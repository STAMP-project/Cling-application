import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest20 {

    public static boolean debug = false;

    @Test
    public void test10001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10001");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.millisOfDay();
        java.lang.String str5 = property4.getName();
        int int6 = property4.getMaximumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = property4.getFieldType();
        int int8 = property4.getLeapAmount();
        int int9 = property4.getMinimumValueOverall();
        java.lang.String str10 = property4.getAsString();
        org.joda.time.LocalDateTime localDateTime12 = property4.addToCopy(5);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.minusYears(43);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime12.withYearOfEra(74051404);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str19 = dateTimeZone17.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime20 = org.joda.time.LocalDateTime.now(dateTimeZone17);
        org.joda.time.LocalDateTime.Property property21 = localDateTime20.millisOfDay();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime20.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime20.plusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.minusHours((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.withEra((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property30 = localDateTime29.secondOfMinute();
        java.lang.String str31 = property30.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = property30.getFieldType();
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology35 = localDateTime34.getChronology();
        org.joda.time.DurationField durationField36 = chronology35.weekyears();
        org.joda.time.DurationField durationField37 = chronology35.seconds();
        org.joda.time.DurationField durationField38 = chronology35.seconds();
        org.joda.time.DurationField durationField39 = chronology35.seconds();
        org.joda.time.DateTimeField dateTimeField40 = chronology35.millisOfDay();
        org.joda.time.DateTimeField dateTimeField41 = chronology35.centuryOfEra();
        boolean boolean42 = dateTimeFieldType32.isSupported(chronology35);
        org.joda.time.LocalDateTime localDateTime44 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology45 = localDateTime44.getChronology();
        org.joda.time.DurationField durationField46 = chronology45.weekyears();
        org.joda.time.DurationField durationField47 = chronology45.centuries();
        org.joda.time.DurationField durationField48 = chronology45.hours();
        org.joda.time.DurationField durationField49 = chronology45.seconds();
        org.joda.time.DateTimeField dateTimeField50 = chronology45.dayOfYear();
        org.joda.time.DateTimeField dateTimeField51 = chronology45.millisOfDay();
        org.joda.time.DateTimeField dateTimeField52 = chronology45.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField53 = dateTimeFieldType32.getField(chronology45);
        org.joda.time.DurationFieldType durationFieldType54 = dateTimeFieldType32.getDurationType();
        boolean boolean55 = localDateTime16.isSupported(dateTimeFieldType32);
        org.junit.Assert.assertNotNull(dateTimeZone0);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+07:10:22.088" + "'", str2, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "millisOfDay" + "'", str5, "millisOfDay");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 86399999 + "'", int6 == 86399999);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "52425086" + "'", str10, "52425086");
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "+07:10:22.088" + "'", str19, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Property[secondOfMinute]" + "'", str31, "Property[secondOfMinute]");
        org.junit.Assert.assertNotNull(dateTimeFieldType32);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(durationField46);
        org.junit.Assert.assertNotNull(durationField47);
        org.junit.Assert.assertNotNull(durationField48);
        org.junit.Assert.assertNotNull(durationField49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(durationFieldType54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
    }

    @Test
    public void test10002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10002");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.millisOfDay();
        java.lang.String str5 = property4.getName();
        int int6 = property4.getMaximumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = property4.getFieldType();
        java.util.Locale locale8 = java.util.Locale.getDefault();
        java.lang.String str9 = locale8.getISO3Language();
        java.lang.String str10 = property4.getAsText(locale8);
        java.util.Set<java.lang.String> strSet11 = locale8.getUnicodeLocaleKeys();
        java.lang.String str12 = locale8.getDisplayLanguage();
        org.junit.Assert.assertNotNull(dateTimeZone0);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+07:10:22.088" + "'", str2, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "millisOfDay" + "'", str5, "millisOfDay");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 86399999 + "'", int6 == 86399999);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(locale8);
// flaky:         org.junit.Assert.assertEquals(locale8.toString(), "de");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "deu" + "'", str9, "deu");
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "52425143" + "'", str10, "52425143");
        org.junit.Assert.assertNotNull(strSet11);
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Deutsch" + "'", str12, "Deutsch");
    }

    @Test
    public void test10003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10003");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DateTimeField dateTimeField3 = chronology2.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField4 = chronology2.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField5 = chronology2.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField6 = chronology2.millisOfDay();
        org.joda.time.DurationField durationField7 = chronology2.hours();
        org.joda.time.DateTimeField dateTimeField8 = chronology2.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField9 = chronology2.yearOfEra();
        org.joda.time.DateTimeField dateTimeField10 = chronology2.clockhourOfHalfday();
        java.lang.String str11 = chronology2.toString();
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "ISOChronology[UTC]" + "'", str11, "ISOChronology[UTC]");
    }

    @Test
    public void test10004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10004");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("26208642");
        java.util.TimeZone.setDefault(timeZone1);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str5 = timeZone1.getDisplayName(false, 273);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal style: 273");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeZone1);
// flaky:         org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Greenwich Zeit");
    }

    @Test
    public void test10005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10005");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DurationField durationField3 = chronology2.weekyears();
        org.joda.time.DurationField durationField4 = chronology2.centuries();
        org.joda.time.DurationField durationField5 = chronology2.minutes();
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime();
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.LocalDateTime localDateTime9 = localDateTime6.withDurationAdded(readableDuration7, (int) '#');
        org.joda.time.LocalDateTime.Property property10 = localDateTime9.weekyear();
        java.lang.String str11 = property10.getAsString();
        org.joda.time.LocalDateTime localDateTime13 = property10.setCopy(67);
        org.joda.time.LocalDateTime localDateTime14 = property10.roundFloorCopy();
        org.joda.time.LocalDateTime.Property property15 = localDateTime14.dayOfWeek();
        int[] intArray17 = chronology2.get((org.joda.time.ReadablePartial) localDateTime14, 1645629356L);
        org.joda.time.DateTimeField dateTimeField18 = chronology2.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField19 = chronology2.monthOfYear();
        org.joda.time.DateTimeField dateTimeField20 = chronology2.dayOfWeek();
        java.lang.String str22 = dateTimeField20.getAsShortText(1645629499917L);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "2022" + "'", str11, "2022");
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1970, 1, 20, 4029356]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Mi" + "'", str22, "Mi");
    }

    @Test
    public void test10006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10006");
        org.joda.time.DurationFieldType durationFieldType1 = org.joda.time.DurationFieldType.weeks();
        java.lang.String str2 = durationFieldType1.toString();
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime();
        java.lang.String str4 = localDateTime3.toString();
        int int5 = localDateTime3.getCenturyOfEra();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime3.minusMonths(2);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str11 = dateTimeZone9.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime12 = org.joda.time.LocalDateTime.now(dateTimeZone9);
        org.joda.time.LocalDateTime.Property property13 = localDateTime12.millisOfDay();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime12.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime12.plusHours((int) ' ');
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.DateTime dateTime19 = localDateTime17.toDateTime(readableInstant18);
        long long20 = dateTime19.getMillis();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str23 = dateTimeZone21.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime24 = org.joda.time.LocalDateTime.now(dateTimeZone21);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = localDateTime24.getFieldType((int) (short) 0);
        boolean boolean27 = dateTime19.isSupported(dateTimeFieldType26);
        org.joda.time.DateTime dateTime28 = localDateTime7.toDateTime((org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str31 = dateTimeZone29.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime32 = org.joda.time.LocalDateTime.now(dateTimeZone29);
        org.joda.time.LocalDateTime.Property property33 = localDateTime32.millisOfDay();
        org.joda.time.LocalDateTime localDateTime35 = localDateTime32.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime32.plusHours((int) ' ');
        org.joda.time.ReadableInstant readableInstant38 = null;
        org.joda.time.DateTime dateTime39 = localDateTime37.toDateTime(readableInstant38);
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str42 = dateTimeZone40.getShortName((long) (short) 10);
        long long44 = dateTimeZone40.convertUTCToLocal((long) ' ');
        java.lang.String str45 = dateTimeZone40.toString();
        long long47 = dateTimeZone40.previousTransition(32L);
        long long50 = dateTimeZone40.convertLocalToUTC(97L, false);
        boolean boolean51 = dateTime39.equals((java.lang.Object) false);
        boolean boolean52 = dateTime28.isEqual((org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.Chronology chronology53 = dateTime39.getChronology();
        org.joda.time.DurationField durationField54 = durationFieldType1.getField(chronology53);
        org.joda.time.DurationField durationField55 = chronology53.weeks();
        org.joda.time.LocalDateTime localDateTime56 = new org.joda.time.LocalDateTime(1645629451174L, chronology53);
        org.joda.time.DurationField durationField57 = chronology53.minutes();
        org.joda.time.DateTimeField dateTimeField58 = chronology53.yearOfEra();
        org.joda.time.DateTimeField dateTimeField59 = chronology53.clockhourOfDay();
        org.joda.time.DurationField durationField60 = chronology53.weeks();
        long long63 = durationField60.subtract(1645629560045L, 8);
        org.junit.Assert.assertNotNull(durationFieldType1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "weeks" + "'", str2, "weeks");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022-02-22T14:33:45.198" + "'", str4, "2022-02-22T14:33:45.198");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 20 + "'", int5 == 20);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+07:10:22.088" + "'", str11, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
// flaky:         org.junit.Assert.assertTrue("'" + long20 + "' != '" + 1645629803110L + "'", long20 == 1645629803110L);
        org.junit.Assert.assertNotNull(dateTimeZone21);
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "+07:10:22.088" + "'", str23, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTimeZone29);
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "+07:10:22.088" + "'", str31, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTimeZone40);
// flaky:         org.junit.Assert.assertEquals("'" + str42 + "' != '" + "+07:10:22.088" + "'", str42, "+07:10:22.088");
// flaky:         org.junit.Assert.assertTrue("'" + long44 + "' != '" + 25822120L + "'", long44 == 25822120L);
// flaky:         org.junit.Assert.assertEquals("'" + str45 + "' != '" + "+07:10:22.088" + "'", str45, "+07:10:22.088");
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 32L + "'", long47 == 32L);
// flaky:         org.junit.Assert.assertTrue("'" + long50 + "' != '" + (-25821991L) + "'", long50 == (-25821991L));
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(durationField54);
        org.junit.Assert.assertNotNull(durationField55);
        org.junit.Assert.assertNotNull(durationField57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(durationField60);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 1640791160045L + "'", long63 == 1640791160045L);
    }

    @Test
    public void test10007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10007");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("");
        timeZone1.setRawOffset(292278993);
        timeZone1.setRawOffset(1970);
        java.lang.Object obj6 = timeZone1.clone();
        org.junit.Assert.assertNotNull(timeZone1);
// flaky:         org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Greenwich Zeit");
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "sun.util.calendar.ZoneInfo[id=\"GMT\",offset=1970,dstSavings=0,useDaylight=false,transitions=0,lastRule=null]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "sun.util.calendar.ZoneInfo[id=\"GMT\",offset=1970,dstSavings=0,useDaylight=false,transitions=0,lastRule=null]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "sun.util.calendar.ZoneInfo[id=\"GMT\",offset=1970,dstSavings=0,useDaylight=false,transitions=0,lastRule=null]");
    }

    @Test
    public void test10008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10008");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.millisOfDay();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime3.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime3.plusHours((int) ' ');
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.DateTime dateTime10 = localDateTime8.toDateTime(readableInstant9);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime8.minusYears(67);
        int int13 = localDateTime12.getEra();
        int int14 = localDateTime12.getWeekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str17 = dateTimeZone15.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime18 = org.joda.time.LocalDateTime.now(dateTimeZone15);
        org.joda.time.LocalDateTime.Property property19 = localDateTime18.millisOfDay();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime18.withYear((int) (short) 100);
        org.joda.time.LocalDateTime.Property property22 = localDateTime21.minuteOfHour();
        int int23 = property22.get();
        org.joda.time.LocalDateTime localDateTime25 = property22.setCopy((int) (short) 10);
        org.joda.time.LocalDateTime.Property property26 = localDateTime25.minuteOfHour();
        org.joda.time.ReadableDuration readableDuration27 = null;
        org.joda.time.LocalDateTime localDateTime28 = localDateTime25.minus(readableDuration27);
        org.joda.time.LocalDateTime.Property property29 = localDateTime28.dayOfYear();
        org.joda.time.LocalDateTime localDateTime30 = property29.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime32 = localDateTime30.withYear(4001);
        boolean boolean33 = localDateTime12.isBefore((org.joda.time.ReadablePartial) localDateTime30);
        org.junit.Assert.assertNotNull(dateTimeZone0);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+07:10:22.088" + "'", str2, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 8 + "'", int14 == 8);
        org.junit.Assert.assertNotNull(dateTimeZone15);
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+07:10:22.088" + "'", str17, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(property22);
// flaky:         org.junit.Assert.assertTrue("'" + int23 + "' != '" + 33 + "'", int23 == 33);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test10009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10009");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forID("2022-02-22T07:21:06.838");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The datetime zone id '2022-02-22T07:21:06.838' is not recognised");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test10010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10010");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.millisOfDay();
        java.lang.String str5 = property4.getName();
        int int6 = property4.getMaximumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = property4.getFieldType();
        org.joda.time.LocalDateTime localDateTime8 = property4.withMaximumValue();
        org.joda.time.LocalDateTime.Property property9 = localDateTime8.dayOfYear();
        org.joda.time.LocalDateTime.Property property10 = localDateTime8.year();
        long long11 = property10.remainder();
        org.junit.Assert.assertNotNull(dateTimeZone0);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+07:10:22.088" + "'", str2, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "millisOfDay" + "'", str5, "millisOfDay");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 86399999 + "'", int6 == 86399999);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 4579199999L + "'", long11 == 4579199999L);
    }

    @Test
    public void test10011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10011");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.millisOfDay();
        org.joda.time.DurationFieldType durationFieldType5 = org.joda.time.DurationFieldType.centuries();
        boolean boolean6 = localDateTime3.equals((java.lang.Object) durationFieldType5);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime3.withWeekOfWeekyear((int) (byte) 10);
        int int9 = localDateTime8.getDayOfYear();
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.LocalDateTime localDateTime11 = localDateTime8.plus(readablePeriod10);
        org.joda.time.Chronology chronology12 = localDateTime11.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.secondOfMinute();
        java.lang.String str14 = chronology12.toString();
        org.joda.time.DateTimeField dateTimeField15 = chronology12.secondOfDay();
        org.junit.Assert.assertNotNull(dateTimeZone0);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+07:10:22.088" + "'", str2, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(durationFieldType5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 67 + "'", int9 == 67);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "ISOChronology[UTC]" + "'", str14, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField15);
    }

    @Test
    public void test10012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10012");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone0);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.secondOfDay();
        int int5 = localDateTime3.get(dateTimeFieldType4);
        org.joda.time.LocalDateTime.Property property6 = localDateTime3.dayOfWeek();
        org.joda.time.DurationField durationField7 = property6.getDurationField();
        long long10 = durationField7.getDifferenceAsLong(0L, (long) (-625));
        org.junit.Assert.assertNotNull(dateTimeZone0);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+07:10:22.088" + "'", str2, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 52425 + "'", int5 == 52425);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
    }

    @Test
    public void test10013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10013");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.weeks();
        java.lang.String str1 = durationFieldType0.toString();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DurationField durationField3 = durationFieldType0.getField(chronology2);
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "weeks" + "'", str1, "weeks");
        org.junit.Assert.assertNotNull(durationField3);
    }

    @Test
    public void test10014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10014");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.millisOfDay();
        java.lang.String str5 = property4.getName();
        org.joda.time.LocalDateTime localDateTime6 = property4.roundHalfFloorCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        boolean boolean8 = localDateTime6.isSupported(dateTimeFieldType7);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str11 = dateTimeZone9.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime12 = org.joda.time.LocalDateTime.now(dateTimeZone9);
        org.joda.time.LocalDateTime.Property property13 = localDateTime12.millisOfDay();
        org.joda.time.DurationFieldType durationFieldType14 = org.joda.time.DurationFieldType.centuries();
        boolean boolean15 = localDateTime12.equals((java.lang.Object) durationFieldType14);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray16 = localDateTime12.getFieldTypes();
        java.lang.String str17 = localDateTime12.toString();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime12.plusMillis(22);
        boolean boolean20 = localDateTime6.isBefore((org.joda.time.ReadablePartial) localDateTime19);
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.LocalDateTime localDateTime22 = localDateTime19.plus(readableDuration21);
        org.joda.time.LocalDateTime.Property property23 = localDateTime22.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime24 = property23.roundHalfEvenCopy();
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.plus(readablePeriod25);
        org.joda.time.LocalDateTime.Property property27 = localDateTime24.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str31 = dateTimeZone29.getShortName((long) (short) 10);
        long long33 = dateTimeZone29.convertUTCToLocal((long) ' ');
        java.lang.String str34 = dateTimeZone29.toString();
        boolean boolean36 = dateTimeZone29.equals((java.lang.Object) (short) 100);
        java.util.Locale locale38 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str39 = dateTimeZone29.getShortName((long) (-1), locale38);
        org.joda.time.LocalDateTime localDateTime40 = new org.joda.time.LocalDateTime(dateTimeZone29);
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime43 = localDateTime40.withField(dateTimeFieldType41, (int) (short) 100);
        org.joda.time.LocalDateTime localDateTime45 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology46 = localDateTime45.getChronology();
        org.joda.time.DurationField durationField47 = chronology46.weekyears();
        org.joda.time.DurationField durationField48 = chronology46.centuries();
        org.joda.time.DateTimeField dateTimeField49 = chronology46.minuteOfDay();
        long long53 = chronology46.add((long) 2, (long) 21, (int) '4');
        boolean boolean54 = dateTimeFieldType41.isSupported(chronology46);
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str57 = dateTimeZone55.getShortName((long) (short) 10);
        long long59 = dateTimeZone55.convertUTCToLocal((long) ' ');
        java.lang.String str60 = dateTimeZone55.toString();
        long long62 = dateTimeZone55.previousTransition(32L);
        org.joda.time.LocalDateTime localDateTime63 = new org.joda.time.LocalDateTime(dateTimeZone55);
        org.joda.time.Chronology chronology64 = chronology46.withZone(dateTimeZone55);
        org.joda.time.DateTimeField dateTimeField65 = chronology64.clockhourOfDay();
        java.util.Locale locale66 = java.util.Locale.GERMANY;
        java.lang.String str67 = locale66.getCountry();
        java.lang.String str68 = locale66.toLanguageTag();
        int int69 = dateTimeField65.getMaximumShortTextLength(locale66);
        java.util.Locale locale70 = locale66.stripExtensions();
        org.joda.time.LocalDateTime localDateTime71 = property27.setCopy("30267", locale70);
        org.joda.time.LocalDateTime localDateTime73 = localDateTime71.plusMinutes(273);
        org.junit.Assert.assertNotNull(dateTimeZone0);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+07:10:22.088" + "'", str2, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "millisOfDay" + "'", str5, "millisOfDay");
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(dateTimeZone9);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+07:10:22.088" + "'", str11, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(durationFieldType14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray16);
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "2022-02-22T14:33:45.318" + "'", str17, "2022-02-22T14:33:45.318");
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateTimeZone29);
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "+07:10:22.088" + "'", str31, "+07:10:22.088");
// flaky:         org.junit.Assert.assertTrue("'" + long33 + "' != '" + 25822120L + "'", long33 == 25822120L);
// flaky:         org.junit.Assert.assertEquals("'" + str34 + "' != '" + "+07:10:22.088" + "'", str34, "+07:10:22.088");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "fr_CA");
// flaky:         org.junit.Assert.assertEquals("'" + str39 + "' != '" + "+07:10:22.088" + "'", str39, "+07:10:22.088");
        org.junit.Assert.assertNotNull(dateTimeFieldType41);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(durationField47);
        org.junit.Assert.assertNotNull(durationField48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 1094L + "'", long53 == 1094L);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(dateTimeZone55);
// flaky:         org.junit.Assert.assertEquals("'" + str57 + "' != '" + "+07:10:22.088" + "'", str57, "+07:10:22.088");
// flaky:         org.junit.Assert.assertTrue("'" + long59 + "' != '" + 25822120L + "'", long59 == 25822120L);
// flaky:         org.junit.Assert.assertEquals("'" + str60 + "' != '" + "+07:10:22.088" + "'", str60, "+07:10:22.088");
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 32L + "'", long62 == 32L);
        org.junit.Assert.assertNotNull(chronology64);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "DE" + "'", str67, "DE");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "de-DE" + "'", str68, "de-DE");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 2 + "'", int69 == 2);
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "de_DE");
        org.junit.Assert.assertNotNull(localDateTime71);
        org.junit.Assert.assertNotNull(localDateTime73);
    }

    @Test
    public void test10015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10015");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str3 = dateTimeZone1.getShortName((long) (short) 10);
        long long5 = dateTimeZone1.convertUTCToLocal((long) ' ');
        java.lang.String str6 = dateTimeZone1.toString();
        boolean boolean8 = dateTimeZone1.equals((java.lang.Object) (short) 100);
        java.util.Locale locale10 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str11 = dateTimeZone1.getShortName((long) (-1), locale10);
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime(dateTimeZone1);
        int int14 = dateTimeZone1.getOffset((long) (short) 10);
        boolean boolean15 = dateTimeZone1.isFixed();
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime(1645629423910L, dateTimeZone1);
        java.util.TimeZone timeZone18 = dateTimeZone1.toTimeZone();
        java.lang.String str19 = timeZone18.getDisplayName();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+07:10:22.088" + "'", str3, "+07:10:22.088");
// flaky:         org.junit.Assert.assertTrue("'" + long5 + "' != '" + 25822120L + "'", long5 == 25822120L);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+07:10:22.088" + "'", str6, "+07:10:22.088");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "fr_CA");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+07:10:22.088" + "'", str11, "+07:10:22.088");
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 25822088 + "'", int14 == 25822088);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(timeZone18);
// flaky:         org.junit.Assert.assertEquals(timeZone18.getDisplayName(), "GMT+07:10");
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "GMT+07:10" + "'", str19, "GMT+07:10");
    }

    @Test
    public void test10016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10016");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DurationField durationField3 = chronology2.weekyears();
        org.joda.time.DurationField durationField4 = chronology2.centuries();
        org.joda.time.DurationField durationField5 = chronology2.hours();
        org.joda.time.DurationField durationField6 = chronology2.seconds();
        org.joda.time.DateTimeField dateTimeField7 = chronology2.dayOfYear();
        org.joda.time.DateTimeField dateTimeField8 = chronology2.millisOfDay();
        org.joda.time.DateTimeField dateTimeField9 = chronology2.halfdayOfDay();
        org.joda.time.Chronology chronology10 = chronology2.withUTC();
        org.joda.time.DateTimeField dateTimeField11 = chronology2.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology14 = localDateTime13.getChronology();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime13.plusDays(3);
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.LocalDateTime localDateTime19 = localDateTime16.withPeriodAdded(readablePeriod17, 1);
        org.joda.time.LocalDateTime.Property property20 = localDateTime16.hourOfDay();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime16.withYear(26384);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime16.withYearOfEra(38);
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.plus(readableDuration25);
        int int27 = dateTimeField11.getMinimumValue((org.joda.time.ReadablePartial) localDateTime24);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
    }

    @Test
    public void test10017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10017");
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology3 = localDateTime2.getChronology();
        org.joda.time.DurationField durationField4 = chronology3.weekyears();
        org.joda.time.DurationField durationField5 = chronology3.centuries();
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime((long) (byte) 0, chronology3);
        org.joda.time.DurationField durationField7 = chronology3.millis();
        org.joda.time.DateTimeField dateTimeField8 = chronology3.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField9 = chronology3.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField10 = chronology3.yearOfEra();
        org.joda.time.DateTimeField dateTimeField11 = chronology3.year();
        org.joda.time.DateTimeField dateTimeField12 = chronology3.centuryOfEra();
        org.joda.time.DurationField durationField13 = dateTimeField12.getDurationField();
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime();
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.LocalDateTime localDateTime17 = localDateTime14.withDurationAdded(readableDuration15, (int) '#');
        org.joda.time.LocalDateTime.Property property18 = localDateTime17.weekyear();
        java.lang.String str19 = property18.getAsString();
        org.joda.time.LocalDateTime localDateTime21 = property18.setCopy(67);
        org.joda.time.LocalDateTime localDateTime22 = property18.roundFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str25 = dateTimeZone23.getShortName((long) (short) 10);
        long long27 = dateTimeZone23.convertUTCToLocal((long) ' ');
        java.lang.String str28 = dateTimeZone23.toString();
        long long30 = dateTimeZone23.previousTransition(32L);
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime(dateTimeZone23);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime31.withWeekyear(22);
        boolean boolean34 = localDateTime22.isEqual((org.joda.time.ReadablePartial) localDateTime33);
        org.joda.time.ReadablePeriod readablePeriod35 = null;
        org.joda.time.LocalDateTime localDateTime37 = localDateTime22.withPeriodAdded(readablePeriod35, 25819981);
        org.joda.time.tz.NameProvider nameProvider38 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale.Category category39 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale40 = java.util.Locale.FRENCH;
        java.util.Locale.setDefault(category39, locale40);
        java.lang.String str42 = locale40.toLanguageTag();
        java.lang.String str43 = locale40.getLanguage();
        java.lang.String str46 = nameProvider38.getShortName(locale40, "days", "26149261");
        org.joda.time.DateTimeZone.setNameProvider(nameProvider38);
        org.joda.time.DateTimeZone.setNameProvider(nameProvider38);
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.DateTimeField dateTimeField51 = dateTimeFieldType49.getField(chronology50);
        long long53 = dateTimeField51.roundFloor((long) (-1));
        org.joda.time.DurationField durationField54 = dateTimeField51.getDurationField();
        java.lang.String str56 = dateTimeField51.getAsText(0L);
        long long58 = dateTimeField51.roundHalfCeiling(1645629364123L);
        long long60 = dateTimeField51.roundHalfCeiling((-31L));
        java.util.Locale locale62 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet63 = locale62.getUnicodeLocaleAttributes();
        java.util.Set<java.lang.String> strSet64 = locale62.getUnicodeLocaleAttributes();
        java.lang.String str65 = locale62.getVariant();
        java.lang.String str66 = locale62.getDisplayLanguage();
        java.lang.String str67 = dateTimeField51.getAsText(31795200000L, locale62);
        java.lang.String str70 = nameProvider38.getShortName(locale62, "weekyearOfCentury", "26186144");
        java.util.Set<java.lang.String> strSet71 = locale62.getUnicodeLocaleKeys();
        java.lang.String str72 = dateTimeField12.getAsShortText((org.joda.time.ReadablePartial) localDateTime22, locale62);
        org.joda.time.LocalDateTime.Property property73 = localDateTime22.weekOfWeekyear();
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "2022" + "'", str19, "2022");
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(dateTimeZone23);
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "+07:10:22.088" + "'", str25, "+07:10:22.088");
// flaky:         org.junit.Assert.assertTrue("'" + long27 + "' != '" + 25822120L + "'", long27 == 25822120L);
// flaky:         org.junit.Assert.assertEquals("'" + str28 + "' != '" + "+07:10:22.088" + "'", str28, "+07:10:22.088");
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 32L + "'", long30 == 32L);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(nameProvider38);
        org.junit.Assert.assertTrue("'" + category39 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category39.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "fr" + "'", str42, "fr");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "fr" + "'", str43, "fr");
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNotNull(dateTimeFieldType49);
        org.junit.Assert.assertNotNull(dateTimeField51);
// flaky:         org.junit.Assert.assertTrue("'" + long53 + "' != '" + (-22088L) + "'", long53 == (-22088L));
        org.junit.Assert.assertNotNull(durationField54);
// flaky:         org.junit.Assert.assertEquals("'" + str56 + "' != '" + "430" + "'", str56, "430");
// flaky:         org.junit.Assert.assertTrue("'" + long58 + "' != '" + 1645629337912L + "'", long58 == 1645629337912L);
// flaky:         org.junit.Assert.assertTrue("'" + long60 + "' != '" + (-22088L) + "'", long60 == (-22088L));
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "");
        org.junit.Assert.assertNotNull(strSet63);
        org.junit.Assert.assertNotNull(strSet64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
// flaky:         org.junit.Assert.assertEquals("'" + str67 + "' != '" + "430" + "'", str67, "430");
        org.junit.Assert.assertNull(str70);
        org.junit.Assert.assertNotNull(strSet71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "20" + "'", str72, "20");
        org.junit.Assert.assertNotNull(property73);
    }

    @Test
    public void test10018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10018");
        org.joda.time.DurationFieldType durationFieldType1 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.weekyears();
        org.joda.time.DurationField durationField6 = chronology4.centuries();
        org.joda.time.DurationField durationField7 = chronology4.hours();
        boolean boolean8 = durationFieldType1.isSupported(chronology4);
        org.joda.time.DateTimeField dateTimeField9 = chronology4.secondOfDay();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime(1645629451459L, chronology4);
        org.joda.time.DateTimeField dateTimeField11 = chronology4.clockhourOfHalfday();
        long long13 = dateTimeField11.roundCeiling(1908343091000L);
        org.junit.Assert.assertNotNull(durationFieldType1);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1908345600000L + "'", long13 == 1908345600000L);
    }

    @Test
    public void test10019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10019");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.millisOfDay();
        long long5 = property4.remainder();
        org.joda.time.LocalDateTime localDateTime6 = property4.roundFloorCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = property4.getFieldType();
        org.joda.time.LocalDateTime localDateTime8 = property4.roundHalfFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str11 = dateTimeZone9.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime12 = org.joda.time.LocalDateTime.now(dateTimeZone9);
        org.joda.time.LocalDateTime.Property property13 = localDateTime12.millisOfDay();
        org.joda.time.DurationFieldType durationFieldType14 = org.joda.time.DurationFieldType.centuries();
        boolean boolean15 = localDateTime12.equals((java.lang.Object) durationFieldType14);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray16 = localDateTime12.getFieldTypes();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str19 = dateTimeZone17.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime20 = org.joda.time.LocalDateTime.now(dateTimeZone17);
        org.joda.time.LocalDateTime.Property property21 = localDateTime20.millisOfDay();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime20.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime20.plusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.minusHours((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.withEra((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property30 = localDateTime29.secondOfMinute();
        boolean boolean31 = localDateTime12.isAfter((org.joda.time.ReadablePartial) localDateTime29);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime12.withYear(32);
        int int34 = localDateTime8.compareTo((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str37 = dateTimeZone35.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime38 = org.joda.time.LocalDateTime.now(dateTimeZone35);
        org.joda.time.LocalDateTime.Property property39 = localDateTime38.millisOfDay();
        org.joda.time.DurationFieldType durationFieldType40 = org.joda.time.DurationFieldType.centuries();
        boolean boolean41 = localDateTime38.equals((java.lang.Object) durationFieldType40);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray42 = localDateTime38.getFieldTypes();
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str45 = dateTimeZone43.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime46 = org.joda.time.LocalDateTime.now(dateTimeZone43);
        org.joda.time.LocalDateTime.Property property47 = localDateTime46.millisOfDay();
        org.joda.time.LocalDateTime localDateTime49 = localDateTime46.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime51 = localDateTime46.plusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime53 = localDateTime51.minusHours((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime55 = localDateTime53.withEra((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property56 = localDateTime55.secondOfMinute();
        boolean boolean57 = localDateTime38.isAfter((org.joda.time.ReadablePartial) localDateTime55);
        boolean boolean58 = localDateTime12.isBefore((org.joda.time.ReadablePartial) localDateTime55);
        org.joda.time.DateTimeZone dateTimeZone59 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str61 = dateTimeZone59.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime62 = org.joda.time.LocalDateTime.now(dateTimeZone59);
        org.joda.time.LocalDateTime.Property property63 = localDateTime62.millisOfDay();
        org.joda.time.LocalDateTime localDateTime65 = localDateTime62.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime67 = localDateTime62.plusHours((int) ' ');
        int int68 = localDateTime62.getDayOfMonth();
        org.joda.time.LocalDateTime localDateTime70 = localDateTime62.minusMinutes(0);
        org.joda.time.LocalDateTime localDateTime72 = new org.joda.time.LocalDateTime(100L);
        org.joda.time.LocalDateTime.Property property73 = localDateTime72.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime75 = localDateTime72.plusSeconds(9);
        org.joda.time.LocalDateTime.Property property76 = localDateTime72.secondOfMinute();
        org.joda.time.DateTimeFieldType dateTimeFieldType77 = property76.getFieldType();
        boolean boolean78 = localDateTime62.isSupported(dateTimeFieldType77);
        org.joda.time.LocalDateTime localDateTime80 = localDateTime62.plusHours(59);
        boolean boolean81 = localDateTime55.isBefore((org.joda.time.ReadablePartial) localDateTime80);
        org.joda.time.LocalDateTime localDateTime83 = localDateTime55.plusMinutes(4);
        org.joda.time.LocalDateTime localDateTime85 = new org.joda.time.LocalDateTime((long) 10);
        org.joda.time.ReadablePeriod readablePeriod86 = null;
        org.joda.time.LocalDateTime localDateTime87 = localDateTime85.plus(readablePeriod86);
        int int88 = localDateTime85.getYear();
        org.joda.time.LocalDateTime localDateTime89 = localDateTime55.withFields((org.joda.time.ReadablePartial) localDateTime85);
        org.joda.time.LocalDateTime localDateTime91 = localDateTime85.plusMillis(0);
        org.junit.Assert.assertNotNull(dateTimeZone0);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+07:10:22.088" + "'", str2, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+07:10:22.088" + "'", str11, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(durationFieldType14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "+07:10:22.088" + "'", str19, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone35);
// flaky:         org.junit.Assert.assertEquals("'" + str37 + "' != '" + "+07:10:22.088" + "'", str37, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(durationFieldType40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray42);
        org.junit.Assert.assertNotNull(dateTimeZone43);
// flaky:         org.junit.Assert.assertEquals("'" + str45 + "' != '" + "+07:10:22.088" + "'", str45, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(dateTimeZone59);
// flaky:         org.junit.Assert.assertEquals("'" + str61 + "' != '" + "+07:10:22.088" + "'", str61, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 22 + "'", int68 == 22);
        org.junit.Assert.assertNotNull(localDateTime70);
        org.junit.Assert.assertNotNull(property73);
        org.junit.Assert.assertNotNull(localDateTime75);
        org.junit.Assert.assertNotNull(property76);
        org.junit.Assert.assertNotNull(dateTimeFieldType77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNotNull(localDateTime80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNotNull(localDateTime83);
        org.junit.Assert.assertNotNull(localDateTime87);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 1970 + "'", int88 == 1970);
        org.junit.Assert.assertNotNull(localDateTime89);
        org.junit.Assert.assertNotNull(localDateTime91);
    }

    @Test
    public void test10020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10020");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((-52), 428, (-3040), 26526582, 55205019, 52341238, 26428);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26526582 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test10021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10021");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.millisOfDay();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime3.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime3.plusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minusHours((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.withEra((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime10.minusSeconds(863999890);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.LocalDateTime localDateTime17 = localDateTime14.withPeriodAdded(readablePeriod15, 916);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.minusMillis(681);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray20 = localDateTime17.getFieldTypes();
        int int21 = localDateTime17.getHourOfDay();
        org.junit.Assert.assertNotNull(dateTimeZone0);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+07:10:22.088" + "'", str2, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray20);
// flaky:         org.junit.Assert.assertTrue("'" + int21 + "' != '" + 12 + "'", int21 == 12);
    }

    @Test
    public void test10022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10022");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.millisOfDay();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime3.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime3.plusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minusHours((int) (short) 10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray11 = localDateTime8.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime8.minusMillis(0);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withWeekyear(1970);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.plusDays(15);
        org.joda.time.LocalDateTime.Property property18 = localDateTime17.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime19 = property18.getLocalDateTime();
        org.joda.time.Interval interval20 = property18.toInterval();
        org.joda.time.DurationField durationField21 = property18.getDurationField();
        // The following exception was thrown during execution in test generation
        try {
            long long24 = durationField21.getMillis(1645514267000L, (long) 1745);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Value cannot fit in an int: 1645514267000");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+07:10:22.088" + "'", str2, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertNotNull(durationField21);
    }

    @Test
    public void test10023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10023");
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology3 = localDateTime2.getChronology();
        org.joda.time.DurationField durationField4 = chronology3.weekyears();
        org.joda.time.DurationField durationField5 = chronology3.centuries();
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime((long) (byte) 0, chronology3);
        org.joda.time.DurationField durationField7 = chronology3.millis();
        org.joda.time.DateTimeField dateTimeField8 = chronology3.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField9 = chronology3.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField10 = chronology3.yearOfEra();
        org.joda.time.DateTimeField dateTimeField11 = chronology3.year();
        org.joda.time.tz.NameProvider nameProvider12 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale13 = java.util.Locale.CANADA;
        java.lang.String str16 = nameProvider12.getShortName(locale13, "fran\347ais", "2022-02-22T07:15:48.066");
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str19 = dateTimeZone17.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime20 = org.joda.time.LocalDateTime.now(dateTimeZone17);
        org.joda.time.LocalDateTime.Property property21 = localDateTime20.millisOfDay();
        org.joda.time.DurationFieldType durationFieldType22 = org.joda.time.DurationFieldType.centuries();
        boolean boolean23 = localDateTime20.equals((java.lang.Object) durationFieldType22);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray24 = localDateTime20.getFieldTypes();
        java.lang.String str25 = localDateTime20.toString();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime20.plusMillis(22);
        org.joda.time.LocalDateTime.Property property28 = localDateTime20.monthOfYear();
        java.util.Locale locale29 = java.util.Locale.ROOT;
        int int30 = property28.getMaximumShortTextLength(locale29);
        java.lang.String str31 = locale13.getDisplayCountry(locale29);
        int int32 = dateTimeField11.getMaximumTextLength(locale29);
        long long35 = dateTimeField11.addWrapField(1688725239982L, 27426242);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(nameProvider12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "en_CA");
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "+07:10:22.088" + "'", str19, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(durationFieldType22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray24);
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "2022-02-22T14:33:45.589" + "'", str25, "2022-02-22T14:33:45.589");
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 3 + "'", int30 == 3);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Canada" + "'", str31, "Canada");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 9 + "'", int32 == 9);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 865490291086839982L + "'", long35 == 865490291086839982L);
    }

    @Test
    public void test10024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10024");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        int int2 = timeZone0.getOffset((long) (short) 100);
        int int3 = timeZone0.getRawOffset();
        java.util.TimeZone.setDefault(timeZone0);
        timeZone0.setID("monthOfYear");
        java.util.TimeZone.setDefault(timeZone0);
        java.lang.String str8 = timeZone0.getDisplayName();
        org.junit.Assert.assertNotNull(timeZone0);
        org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "GMT+00:00" + "'", str8, "GMT+00:00");
    }

    @Test
    public void test10025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10025");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        org.joda.time.LocalDateTime localDateTime3 = localDateTime0.withDurationAdded(readableDuration1, (int) '#');
        org.joda.time.LocalDateTime.Property property4 = localDateTime0.era();
        int int5 = localDateTime0.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime0.withWeekOfWeekyear((int) (byte) 1);
        int int8 = localDateTime0.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime0.plusDays(500);
        org.joda.time.DurationFieldType durationFieldType11 = org.joda.time.DurationFieldType.days();
        java.lang.String str12 = durationFieldType11.toString();
        boolean boolean13 = localDateTime10.isSupported(durationFieldType11);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology17 = localDateTime16.getChronology();
        org.joda.time.DurationField durationField18 = chronology17.weekyears();
        boolean boolean19 = dateTimeFieldType14.isSupported(chronology17);
        org.joda.time.DurationField durationField20 = durationFieldType11.getField(chronology17);
        org.joda.time.DurationField durationField21 = chronology17.minutes();
        org.joda.time.DateTimeField dateTimeField22 = chronology17.weekOfWeekyear();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 22 + "'", int5 == 22);
        org.junit.Assert.assertNotNull(localDateTime7);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 14 + "'", int8 == 14);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(durationFieldType11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "days" + "'", str12, "days");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
    }

    @Test
    public void test10026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10026");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str5 = dateTimeZone3.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime6 = org.joda.time.LocalDateTime.now(dateTimeZone3);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.millisOfDay();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime6.withYear((int) (short) 100);
        org.joda.time.LocalDateTime.Property property10 = localDateTime9.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime9.minusMonths(2022);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.withMinuteOfHour((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime12.plusHours(500);
        int int17 = localDateTime12.getWeekOfWeekyear();
        int[] intArray19 = chronology2.get((org.joda.time.ReadablePartial) localDateTime12, (long) 26169);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str22 = dateTimeZone20.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime23 = org.joda.time.LocalDateTime.now(dateTimeZone20);
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str26 = dateTimeZone24.getShortName((long) (short) 10);
        long long28 = dateTimeZone24.convertUTCToLocal((long) ' ');
        java.lang.String str29 = dateTimeZone24.toString();
        boolean boolean31 = dateTimeZone24.equals((java.lang.Object) (short) 100);
        java.util.Locale locale33 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str34 = dateTimeZone24.getShortName((long) (-1), locale33);
        long long36 = dateTimeZone20.getMillisKeepLocal(dateTimeZone24, (long) (byte) -1);
        org.joda.time.Chronology chronology37 = chronology2.withZone(dateTimeZone24);
        org.joda.time.DateTimeField dateTimeField38 = chronology2.dayOfWeek();
        java.lang.String str40 = dateTimeField38.getAsText(1688725254656L);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeZone3);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+07:10:22.088" + "'", str5, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 34 + "'", int17 == 34);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[1970, 1, 1, 26169]");
        org.junit.Assert.assertNotNull(dateTimeZone20);
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+07:10:22.088" + "'", str22, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "+07:10:22.088" + "'", str26, "+07:10:22.088");
// flaky:         org.junit.Assert.assertTrue("'" + long28 + "' != '" + 25822120L + "'", long28 == 25822120L);
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "+07:10:22.088" + "'", str29, "+07:10:22.088");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "fr_CA");
// flaky:         org.junit.Assert.assertEquals("'" + str34 + "' != '" + "+07:10:22.088" + "'", str34, "+07:10:22.088");
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + (-1L) + "'", long36 == (-1L));
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
// flaky:         org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Freitag" + "'", str40, "Freitag");
    }

    @Test
    public void test10027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10027");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plus(readablePeriod2);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.minusMillis((int) (short) 1);
        org.joda.time.LocalDateTime.Property property6 = localDateTime3.millisOfDay();
        int int7 = localDateTime3.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime3.minusSeconds(26370);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str12 = dateTimeZone10.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime13 = org.joda.time.LocalDateTime.now(dateTimeZone10);
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.millisOfDay();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime13.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime13.plusHours((int) ' ');
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.DateTime dateTime20 = localDateTime18.toDateTime(readableInstant19);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str23 = dateTimeZone21.getShortName((long) (short) 10);
        long long25 = dateTimeZone21.convertUTCToLocal((long) ' ');
        java.lang.String str26 = dateTimeZone21.toString();
        long long28 = dateTimeZone21.previousTransition(32L);
        long long31 = dateTimeZone21.convertLocalToUTC(97L, false);
        boolean boolean32 = dateTime20.equals((java.lang.Object) false);
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str35 = dateTimeZone33.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime36 = org.joda.time.LocalDateTime.now(dateTimeZone33);
        org.joda.time.LocalDateTime.Property property37 = localDateTime36.millisOfDay();
        org.joda.time.LocalDateTime localDateTime39 = localDateTime36.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime41 = localDateTime36.plusHours((int) ' ');
        org.joda.time.ReadableInstant readableInstant42 = null;
        org.joda.time.DateTime dateTime43 = localDateTime41.toDateTime(readableInstant42);
        long long44 = dateTime43.getMillis();
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str47 = dateTimeZone45.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime48 = org.joda.time.LocalDateTime.now(dateTimeZone45);
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = localDateTime48.getFieldType((int) (short) 0);
        boolean boolean51 = dateTime43.isSupported(dateTimeFieldType50);
        boolean boolean52 = dateTime20.isAfter((org.joda.time.ReadableInstant) dateTime43);
        org.joda.time.DateTimeZone dateTimeZone53 = dateTime43.getZone();
        org.joda.time.DateTimeZone dateTimeZone54 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str56 = dateTimeZone54.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime57 = org.joda.time.LocalDateTime.now(dateTimeZone54);
        org.joda.time.LocalDateTime.Property property58 = localDateTime57.millisOfDay();
        org.joda.time.ReadableInstant readableInstant59 = null;
        long long60 = property58.getDifferenceAsLong(readableInstant59);
        org.joda.time.DurationField durationField61 = property58.getLeapDurationField();
        java.lang.String str62 = property58.getAsString();
        org.joda.time.LocalDateTime localDateTime64 = property58.addToCopy(1645629357222L);
        org.joda.time.LocalDateTime.Property property65 = localDateTime64.millisOfDay();
        org.joda.time.LocalDateTime localDateTime66 = property65.roundHalfEvenCopy();
        boolean boolean67 = dateTimeZone53.isLocalDateTimeGap(localDateTime66);
        org.joda.time.DateTime dateTime68 = localDateTime9.toDateTime(dateTimeZone53);
        org.joda.time.LocalDateTime localDateTime69 = new org.joda.time.LocalDateTime(dateTimeZone53);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1970 + "'", int7 == 1970);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+07:10:22.088" + "'", str12, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "+07:10:22.088" + "'", str23, "+07:10:22.088");
// flaky:         org.junit.Assert.assertTrue("'" + long25 + "' != '" + 25822120L + "'", long25 == 25822120L);
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "+07:10:22.088" + "'", str26, "+07:10:22.088");
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 32L + "'", long28 == 32L);
// flaky:         org.junit.Assert.assertTrue("'" + long31 + "' != '" + (-25821991L) + "'", long31 == (-25821991L));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(dateTimeZone33);
// flaky:         org.junit.Assert.assertEquals("'" + str35 + "' != '" + "+07:10:22.088" + "'", str35, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(dateTime43);
// flaky:         org.junit.Assert.assertTrue("'" + long44 + "' != '" + 1645629803601L + "'", long44 == 1645629803601L);
        org.junit.Assert.assertNotNull(dateTimeZone45);
// flaky:         org.junit.Assert.assertEquals("'" + str47 + "' != '" + "+07:10:22.088" + "'", str47, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(dateTimeFieldType50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertNotNull(dateTimeZone54);
// flaky:         org.junit.Assert.assertEquals("'" + str56 + "' != '" + "+07:10:22.088" + "'", str56, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(property58);
// flaky:         org.junit.Assert.assertTrue("'" + long60 + "' != '" + 25822088L + "'", long60 == 25822088L);
        org.junit.Assert.assertNull(durationField61);
// flaky:         org.junit.Assert.assertEquals("'" + str62 + "' != '" + "52425689" + "'", str62, "52425689");
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(dateTime68);
    }

    @Test
    public void test10028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10028");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        org.joda.time.LocalDateTime localDateTime3 = localDateTime0.withDurationAdded(readableDuration1, (int) '#');
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.centuryOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTimeField dateTimeField7 = dateTimeFieldType5.getField(chronology6);
        java.util.Locale locale9 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale10 = locale9.stripExtensions();
        java.lang.String str11 = dateTimeField7.getAsShortText(100, locale10);
        int int12 = property4.getMaximumShortTextLength(locale10);
        java.lang.Object obj13 = null;
        boolean boolean14 = property4.equals(obj13);
        org.joda.time.LocalDateTime localDateTime15 = property4.getLocalDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = property4.getFieldType();
        org.joda.time.DurationFieldType durationFieldType17 = dateTimeFieldType16.getDurationType();
        java.lang.String str18 = dateTimeFieldType16.toString();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "100" + "'", str11, "100");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 7 + "'", int12 == 7);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(durationFieldType17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "centuryOfEra" + "'", str18, "centuryOfEra");
    }

    @Test
    public void test10029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10029");
        java.util.Locale locale0 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet1 = locale0.getUnicodeLocaleAttributes();
        java.lang.Object[] objArray2 = strSet1.toArray();
        boolean boolean3 = strSet1.isEmpty();
        java.util.Locale locale4 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet5 = locale4.getUnicodeLocaleAttributes();
        java.lang.Object[] objArray6 = strSet5.toArray();
        java.util.Locale locale7 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet8 = locale7.getUnicodeLocaleAttributes();
        boolean boolean9 = strSet5.removeAll((java.util.Collection<java.lang.String>) strSet8);
        java.util.Locale locale10 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet11 = locale10.getUnicodeLocaleAttributes();
        org.joda.time.DurationFieldType durationFieldType12 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.DurationFieldType durationFieldType13 = org.joda.time.DurationFieldType.hours();
        org.joda.time.DurationFieldType[] durationFieldTypeArray14 = new org.joda.time.DurationFieldType[] { durationFieldType12, durationFieldType13 };
        org.joda.time.DurationFieldType[] durationFieldTypeArray15 = strSet11.toArray(durationFieldTypeArray14);
        boolean boolean16 = strSet5.containsAll((java.util.Collection<java.lang.String>) strSet11);
        java.lang.Object[] objArray17 = strSet11.toArray();
        boolean boolean18 = strSet1.removeAll((java.util.Collection<java.lang.String>) strSet11);
        strSet11.clear();
        java.util.Collection<java.lang.String> strCollection20 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean21 = strSet11.addAll(strCollection20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "");
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNotNull(objArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray2), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray2), "[]");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[]");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "");
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "");
        org.junit.Assert.assertNotNull(strSet11);
        org.junit.Assert.assertNotNull(durationFieldType12);
        org.junit.Assert.assertNotNull(durationFieldType13);
        org.junit.Assert.assertNotNull(durationFieldTypeArray14);
        org.junit.Assert.assertNotNull(durationFieldTypeArray15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test10030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10030");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.millisOfDay();
        org.joda.time.DurationFieldType durationFieldType5 = org.joda.time.DurationFieldType.centuries();
        boolean boolean6 = localDateTime3.equals((java.lang.Object) durationFieldType5);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray7 = localDateTime3.getFieldTypes();
        java.lang.String str8 = localDateTime3.toString();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime3.plusMillis(22);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str13 = dateTimeZone11.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime14 = org.joda.time.LocalDateTime.now(dateTimeZone11);
        org.joda.time.LocalDateTime.Property property15 = localDateTime14.millisOfDay();
        org.joda.time.DurationFieldType durationFieldType16 = org.joda.time.DurationFieldType.centuries();
        boolean boolean17 = localDateTime14.equals((java.lang.Object) durationFieldType16);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime10.withFieldAdded(durationFieldType16, 0);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.plusHours(292278993);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.withMillisOfDay((int) 'a');
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.minusHours(11);
        org.joda.time.LocalDateTime.Property property26 = localDateTime25.era();
        int int27 = property26.getMinimumValue();
        org.junit.Assert.assertNotNull(dateTimeZone0);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+07:10:22.088" + "'", str2, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(durationFieldType5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "2022-02-22T14:33:45.741" + "'", str8, "2022-02-22T14:33:45.741");
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+07:10:22.088" + "'", str13, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(durationFieldType16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
    }

    @Test
    public void test10031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10031");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DurationField durationField3 = chronology2.weekyears();
        org.joda.time.DurationField durationField4 = chronology2.centuries();
        org.joda.time.DurationField durationField5 = chronology2.minutes();
        org.joda.time.DateTimeField dateTimeField6 = chronology2.monthOfYear();
        org.joda.time.DateTimeField dateTimeField7 = chronology2.dayOfYear();
        org.joda.time.DateTimeField dateTimeField8 = chronology2.secondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetMillis((int) 'a');
        java.lang.String str12 = dateTimeZone10.getShortName((long) 86399999);
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime(dateTimeZone10);
        org.joda.time.Chronology chronology14 = chronology2.withZone(dateTimeZone10);
        int int16 = dateTimeZone10.getStandardOffset(1645629474953L);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str19 = dateTimeZone17.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime20 = org.joda.time.LocalDateTime.now(dateTimeZone17);
        org.joda.time.LocalDateTime.Property property21 = localDateTime20.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime20.plusMonths(16);
        boolean boolean24 = dateTimeZone10.isLocalDateTimeGap(localDateTime23);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.millisOfDay();
        boolean boolean26 = localDateTime23.isSupported(dateTimeFieldType25);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str29 = dateTimeZone27.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime30 = org.joda.time.LocalDateTime.now(dateTimeZone27);
        org.joda.time.LocalDateTime.Property property31 = localDateTime30.millisOfDay();
        org.joda.time.DurationFieldType durationFieldType32 = org.joda.time.DurationFieldType.centuries();
        boolean boolean33 = localDateTime30.equals((java.lang.Object) durationFieldType32);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime30.withWeekOfWeekyear((int) (byte) 10);
        int int36 = localDateTime35.getDayOfYear();
        org.joda.time.LocalDateTime.Property property37 = localDateTime35.yearOfCentury();
        java.lang.String str38 = property37.toString();
        org.joda.time.LocalDateTime localDateTime39 = property37.roundCeilingCopy();
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str42 = dateTimeZone40.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime43 = org.joda.time.LocalDateTime.now(dateTimeZone40);
        org.joda.time.LocalDateTime.Property property44 = localDateTime43.millisOfDay();
        org.joda.time.DurationFieldType durationFieldType45 = org.joda.time.DurationFieldType.centuries();
        boolean boolean46 = localDateTime43.equals((java.lang.Object) durationFieldType45);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray47 = localDateTime43.getFieldTypes();
        java.lang.String str48 = localDateTime43.toString();
        org.joda.time.LocalDateTime localDateTime50 = localDateTime43.plusMillis(22);
        org.joda.time.DateTimeFieldType dateTimeFieldType51 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.DateTimeField dateTimeField53 = dateTimeFieldType51.getField(chronology52);
        org.joda.time.LocalDateTime localDateTime55 = localDateTime43.withField(dateTimeFieldType51, 2);
        org.joda.time.DurationFieldType durationFieldType56 = dateTimeFieldType51.getRangeDurationType();
        org.joda.time.LocalDateTime localDateTime58 = localDateTime39.withFieldAdded(durationFieldType56, 26404627);
        boolean boolean59 = localDateTime23.isBefore((org.joda.time.ReadablePartial) localDateTime39);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime61 = localDateTime23.withDayOfWeek((-115200001));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -115200001 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00:00.097" + "'", str12, "+00:00:00.097");
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 97 + "'", int16 == 97);
        org.junit.Assert.assertNotNull(dateTimeZone17);
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "+07:10:22.088" + "'", str19, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(dateTimeZone27);
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "+07:10:22.088" + "'", str29, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(durationFieldType32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 67 + "'", int36 == 67);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Property[yearOfCentury]" + "'", str38, "Property[yearOfCentury]");
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(dateTimeZone40);
// flaky:         org.junit.Assert.assertEquals("'" + str42 + "' != '" + "+07:10:22.088" + "'", str42, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(durationFieldType45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray47);
// flaky:         org.junit.Assert.assertEquals("'" + str48 + "' != '" + "2022-02-22T14:33:45.753" + "'", str48, "2022-02-22T14:33:45.753");
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(dateTimeFieldType51);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(durationFieldType56);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
    }

    @Test
    public void test10032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10032");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        org.joda.time.LocalDateTime localDateTime3 = localDateTime0.withDurationAdded(readableDuration1, (int) '#');
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.weekyear();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime3.minusMillis((-1));
        org.joda.time.LocalDateTime.Property property7 = localDateTime3.dayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str10 = dateTimeZone8.getShortName((long) (short) 10);
        long long12 = dateTimeZone8.convertUTCToLocal((long) ' ');
        java.util.Locale locale14 = java.util.Locale.ROOT;
        java.lang.String str15 = dateTimeZone8.getName((long) (short) 0, locale14);
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str18 = dateTimeZone16.getShortName((long) (short) 10);
        long long20 = dateTimeZone16.convertUTCToLocal((long) ' ');
        java.lang.String str21 = dateTimeZone16.toString();
        boolean boolean23 = dateTimeZone16.equals((java.lang.Object) (short) 100);
        java.util.Locale locale25 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str26 = dateTimeZone16.getShortName((long) (-1), locale25);
        java.lang.String str27 = locale14.getDisplayVariant(locale25);
        int int28 = property7.getMaximumShortTextLength(locale25);
        java.lang.String str29 = property7.getAsText();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str32 = dateTimeZone30.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime33 = org.joda.time.LocalDateTime.now(dateTimeZone30);
        org.joda.time.LocalDateTime.Property property34 = localDateTime33.millisOfDay();
        int int35 = property34.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime37 = property34.setCopy((int) (byte) 1);
        org.joda.time.LocalDateTime.Property property38 = localDateTime37.millisOfSecond();
        java.util.Date date39 = localDateTime37.toDate();
        int int40 = property7.compareTo((org.joda.time.ReadablePartial) localDateTime37);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+07:10:22.088" + "'", str10, "+07:10:22.088");
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + 25822120L + "'", long12 == 25822120L);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "");
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+07:10:22.088" + "'", str15, "+07:10:22.088");
        org.junit.Assert.assertNotNull(dateTimeZone16);
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+07:10:22.088" + "'", str18, "+07:10:22.088");
// flaky:         org.junit.Assert.assertTrue("'" + long20 + "' != '" + 25822120L + "'", long20 == 25822120L);
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "+07:10:22.088" + "'", str21, "+07:10:22.088");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "fr_CA");
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "+07:10:22.088" + "'", str26, "+07:10:22.088");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "22" + "'", str29, "22");
        org.junit.Assert.assertNotNull(dateTimeZone30);
// flaky:         org.junit.Assert.assertEquals("'" + str32 + "' != '" + "+07:10:22.088" + "'", str32, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 86399999 + "'", int35 == 86399999);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Tue Feb 22 00:00:00 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
    }

    @Test
    public void test10033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10033");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getShortName((long) (short) 10);
        long long4 = dateTimeZone0.convertUTCToLocal((long) ' ');
        java.lang.String str5 = dateTimeZone0.toString();
        java.lang.String str6 = dateTimeZone0.toString();
        boolean boolean7 = dateTimeZone0.isFixed();
        boolean boolean8 = dateTimeZone0.isFixed();
        java.lang.String str9 = dateTimeZone0.getID();
        boolean boolean10 = dateTimeZone0.isFixed();
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology14 = localDateTime13.getChronology();
        org.joda.time.DurationField durationField15 = chronology14.hours();
        java.lang.String str16 = chronology14.toString();
        org.joda.time.DateTimeField dateTimeField17 = chronology14.clockhourOfDay();
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime();
        org.joda.time.ReadableDuration readableDuration19 = null;
        org.joda.time.LocalDateTime localDateTime21 = localDateTime18.withDurationAdded(readableDuration19, (int) '#');
        org.joda.time.LocalDateTime.Property property22 = localDateTime21.weekyear();
        org.joda.time.LocalDateTime localDateTime24 = localDateTime21.minusMillis((-1));
        int[] intArray29 = new int[] { (-292275054), 86399999, 86399999, 22 };
        int int30 = dateTimeField17.getMaximumValue((org.joda.time.ReadablePartial) localDateTime24, intArray29);
        java.util.Locale.Category category32 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale33 = java.util.Locale.FRENCH;
        java.util.Locale.setDefault(category32, locale33);
        java.lang.String str35 = locale33.toLanguageTag();
        java.lang.String str36 = dateTimeField17.getAsText((long) 26269, locale33);
        java.lang.String str37 = dateTimeZone0.getShortName(1908343019644L, locale33);
        long long39 = dateTimeZone0.previousTransition(1645629553413L);
        java.util.Locale locale41 = null;
        java.lang.String str42 = dateTimeZone0.getShortName(1645603788197L, locale41);
        org.junit.Assert.assertNotNull(dateTimeZone0);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+07:10:22.088" + "'", str2, "+07:10:22.088");
// flaky:         org.junit.Assert.assertTrue("'" + long4 + "' != '" + 25822120L + "'", long4 == 25822120L);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+07:10:22.088" + "'", str5, "+07:10:22.088");
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+07:10:22.088" + "'", str6, "+07:10:22.088");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+07:10:22.088" + "'", str9, "+07:10:22.088");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "ISOChronology[UTC]" + "'", str16, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-292275054, 86399999, 86399999, 22]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 24 + "'", int30 == 24);
        org.junit.Assert.assertTrue("'" + category32 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category32.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "fr" + "'", str35, "fr");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "24" + "'", str36, "24");
// flaky:         org.junit.Assert.assertEquals("'" + str37 + "' != '" + "+07:10:22.088" + "'", str37, "+07:10:22.088");
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 1645629553413L + "'", long39 == 1645629553413L);
// flaky:         org.junit.Assert.assertEquals("'" + str42 + "' != '" + "+07:10:22.088" + "'", str42, "+07:10:22.088");
    }

    @Test
    public void test10034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10034");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        org.joda.time.LocalDateTime localDateTime3 = localDateTime0.withDurationAdded(readableDuration1, (int) '#');
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.weekyear();
        int int5 = property4.getMaximumValue();
        org.joda.time.DateTimeField dateTimeField6 = property4.getField();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str9 = dateTimeZone7.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime10 = org.joda.time.LocalDateTime.now(dateTimeZone7);
        org.joda.time.LocalDateTime.Property property11 = localDateTime10.millisOfDay();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime10.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime10.plusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.minusHours((int) (short) 10);
        int int18 = dateTimeField6.getMinimumValue((org.joda.time.ReadablePartial) localDateTime17);
        java.lang.String str20 = dateTimeField6.getAsText((long) (-292275054));
        int int21 = dateTimeField6.getMinimumValue();
        long long23 = dateTimeField6.roundHalfFloor(1645629391920L);
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = dateTimeField6.getType();
        int int26 = dateTimeField6.getMaximumValue(1645629725378L);
        long long29 = dateTimeField6.getDifferenceAsLong(0L, 1908343039481L);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 292278993 + "'", int5 == 292278993);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+07:10:22.088" + "'", str9, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-292275054) + "'", int18 == (-292275054));
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "1969" + "'", str20, "1969");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-292275054) + "'", int21 == (-292275054));
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 1641168000000L + "'", long23 == 1641168000000L);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 292278993 + "'", int26 == 292278993);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + (-60L) + "'", long29 == (-60L));
    }

    @Test
    public void test10035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10035");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeField dateTimeField2 = dateTimeFieldType0.getField(chronology1);
        java.util.Locale locale4 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale5 = locale4.stripExtensions();
        java.lang.String str6 = dateTimeField2.getAsShortText(100, locale5);
        int int8 = dateTimeField2.getLeapAmount((long) (short) 100);
        java.lang.String str9 = dateTimeField2.getName();
        long long12 = dateTimeField2.add((long) (short) 1, 0);
        int int14 = dateTimeField2.get((long) 86399999);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str17 = dateTimeZone15.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime18 = org.joda.time.LocalDateTime.now(dateTimeZone15);
        org.joda.time.LocalDateTime.Property property19 = localDateTime18.millisOfDay();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime18.withYear((int) (short) 100);
        org.joda.time.LocalDateTime.Property property22 = localDateTime21.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime24 = localDateTime21.minusMonths(2022);
        int int25 = localDateTime21.getDayOfMonth();
        java.util.Locale locale26 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet27 = locale26.getUnicodeLocaleAttributes();
        java.lang.String str28 = locale26.toLanguageTag();
        java.lang.String str29 = dateTimeField2.getAsText((org.joda.time.ReadablePartial) localDateTime21, locale26);
        org.joda.time.LocalDateTime.Property property30 = localDateTime21.era();
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology33 = localDateTime32.getChronology();
        org.joda.time.DurationField durationField34 = chronology33.weekyears();
        org.joda.time.DurationField durationField35 = chronology33.centuries();
        org.joda.time.DurationField durationField36 = chronology33.hours();
        org.joda.time.DurationField durationField37 = chronology33.seconds();
        org.joda.time.DateTimeField dateTimeField38 = chronology33.dayOfYear();
        boolean boolean39 = dateTimeField38.isSupported();
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str42 = dateTimeZone40.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime43 = org.joda.time.LocalDateTime.now(dateTimeZone40);
        org.joda.time.LocalDateTime.Property property44 = localDateTime43.millisOfDay();
        org.joda.time.ReadableInstant readableInstant45 = null;
        long long46 = property44.getDifferenceAsLong(readableInstant45);
        org.joda.time.DurationField durationField47 = property44.getLeapDurationField();
        java.lang.String str48 = property44.getAsString();
        org.joda.time.LocalDateTime localDateTime50 = property44.addToCopy(1645629357222L);
        org.joda.time.LocalDateTime.Property property51 = localDateTime50.millisOfDay();
        org.joda.time.LocalDateTime localDateTime53 = localDateTime50.plusHours(100);
        org.joda.time.LocalDateTime localDateTime56 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology57 = localDateTime56.getChronology();
        org.joda.time.DurationField durationField58 = chronology57.weekyears();
        org.joda.time.DurationField durationField59 = chronology57.centuries();
        org.joda.time.DateTimeField dateTimeField60 = chronology57.minuteOfDay();
        java.util.Locale locale61 = java.util.Locale.US;
        int int62 = dateTimeField60.getMaximumShortTextLength(locale61);
        java.lang.String str63 = dateTimeField38.getAsText((org.joda.time.ReadablePartial) localDateTime53, 31, locale61);
        java.lang.String str64 = property30.getAsText(locale61);
        org.joda.time.LocalDateTime localDateTime65 = property30.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property66 = localDateTime65.dayOfWeek();
        int int67 = localDateTime65.getWeekyear();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "100" + "'", str6, "100");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "minuteOfDay" + "'", str9, "minuteOfDay");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 430 + "'", int14 == 430);
        org.junit.Assert.assertNotNull(dateTimeZone15);
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+07:10:22.088" + "'", str17, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 22 + "'", int25 == 22);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "");
        org.junit.Assert.assertNotNull(strSet27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "und" + "'", str28, "und");
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "873" + "'", str29, "873");
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(dateTimeZone40);
// flaky:         org.junit.Assert.assertEquals("'" + str42 + "' != '" + "+07:10:22.088" + "'", str42, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(property44);
// flaky:         org.junit.Assert.assertTrue("'" + long46 + "' != '" + 25822088L + "'", long46 == 25822088L);
        org.junit.Assert.assertNull(durationField47);
// flaky:         org.junit.Assert.assertEquals("'" + str48 + "' != '" + "52425824" + "'", str48, "52425824");
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(durationField58);
        org.junit.Assert.assertNotNull(durationField59);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "en_US");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 4 + "'", int62 == 4);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "31" + "'", str63, "31");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "AD" + "'", str64, "AD");
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-292275055) + "'", int67 == (-292275055));
    }

    @Test
    public void test10036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10036");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.millisOfDay();
        org.joda.time.DurationFieldType durationFieldType5 = org.joda.time.DurationFieldType.days();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime3.withFieldAdded(durationFieldType5, 26149500);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime3.minusHours((int) 'a');
        org.joda.time.LocalDateTime.Property property10 = localDateTime9.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime12 = property10.addWrapFieldToCopy(1940);
        org.junit.Assert.assertNotNull(dateTimeZone0);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+07:10:22.088" + "'", str2, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(durationFieldType5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDateTime12);
    }

    @Test
    public void test10037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10037");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.millisOfDay();
        org.joda.time.DurationFieldType durationFieldType5 = org.joda.time.DurationFieldType.centuries();
        boolean boolean6 = localDateTime3.equals((java.lang.Object) durationFieldType5);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray7 = localDateTime3.getFieldTypes();
        java.lang.String str8 = localDateTime3.toString();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime3.plusMillis(22);
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTimeField dateTimeField13 = dateTimeFieldType11.getField(chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime3.withField(dateTimeFieldType11, 2);
        org.joda.time.DurationFieldType durationFieldType16 = dateTimeFieldType11.getDurationType();
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology20 = localDateTime19.getChronology();
        org.joda.time.DurationField durationField21 = chronology20.weekyears();
        boolean boolean22 = dateTimeFieldType17.isSupported(chronology20);
        org.joda.time.DurationField durationField23 = chronology20.centuries();
        org.joda.time.DateTimeField dateTimeField24 = chronology20.year();
        boolean boolean25 = durationFieldType16.isSupported(chronology20);
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology29 = localDateTime28.getChronology();
        org.joda.time.DateTimeField dateTimeField30 = chronology29.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField31 = chronology29.minuteOfDay();
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime((-100L), chronology29);
        org.joda.time.DateTimeField dateTimeField33 = chronology29.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField34 = chronology29.dayOfWeek();
        boolean boolean35 = durationFieldType16.isSupported(chronology29);
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology38 = localDateTime37.getChronology();
        org.joda.time.DurationField durationField39 = chronology38.weekyears();
        org.joda.time.DurationField durationField40 = chronology38.seconds();
        org.joda.time.DurationField durationField41 = chronology38.seconds();
        org.joda.time.DurationField durationField42 = chronology38.seconds();
        org.joda.time.DateTimeField dateTimeField43 = chronology38.secondOfDay();
        org.joda.time.DateTimeField dateTimeField44 = chronology38.secondOfMinute();
        boolean boolean45 = durationFieldType16.isSupported(chronology38);
        org.joda.time.DateTimeZone dateTimeZone46 = chronology38.getZone();
        org.joda.time.DurationField durationField47 = chronology38.halfdays();
        org.joda.time.DurationFieldType durationFieldType48 = durationField47.getType();
        java.lang.String str49 = durationFieldType48.getName();
        org.junit.Assert.assertNotNull(dateTimeZone0);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+07:10:22.088" + "'", str2, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(durationFieldType5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "2022-02-22T14:33:45.861" + "'", str8, "2022-02-22T14:33:45.861");
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(durationFieldType16);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertNotNull(durationField40);
        org.junit.Assert.assertNotNull(durationField41);
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertNotNull(durationField47);
        org.junit.Assert.assertNotNull(durationFieldType48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "halfdays" + "'", str49, "halfdays");
    }

    @Test
    public void test10038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10038");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        org.joda.time.LocalDateTime localDateTime3 = localDateTime0.withDurationAdded(readableDuration1, (int) '#');
        org.joda.time.LocalDateTime.Property property4 = localDateTime0.era();
        int int5 = localDateTime0.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime0.withWeekOfWeekyear((int) (byte) 1);
        org.joda.time.LocalDateTime.Property property8 = localDateTime0.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime10 = property8.addToCopy(365);
        org.joda.time.LocalDateTime localDateTime11 = property8.withMinimumValue();
        java.lang.String str12 = property8.getAsString();
        org.joda.time.DateTimeField dateTimeField13 = property8.getField();
        int int14 = property8.get();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 22 + "'", int5 == 22);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime11);
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "33" + "'", str12, "33");
        org.junit.Assert.assertNotNull(dateTimeField13);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 33 + "'", int14 == 33);
    }

    @Test
    public void test10039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10039");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DurationField durationField3 = chronology2.hours();
        java.lang.String str4 = chronology2.toString();
        org.joda.time.DateTimeField dateTimeField5 = chronology2.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField6 = chronology2.era();
        org.joda.time.DurationField durationField7 = chronology2.hours();
        org.joda.time.DateTimeField dateTimeField8 = chronology2.clockhourOfDay();
        org.joda.time.DurationField durationField9 = chronology2.days();
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology12 = localDateTime11.getChronology();
        org.joda.time.DurationField durationField13 = chronology12.weekyears();
        org.joda.time.DurationField durationField14 = chronology12.centuries();
        org.joda.time.DateTimeField dateTimeField15 = chronology12.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField16 = chronology12.clockhourOfHalfday();
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime();
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.LocalDateTime localDateTime20 = localDateTime17.withDurationAdded(readableDuration18, (int) '#');
        org.joda.time.LocalDateTime.Property property21 = localDateTime17.era();
        int int22 = localDateTime17.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime24 = localDateTime17.withWeekOfWeekyear((int) (byte) 1);
        int int25 = localDateTime17.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime17.plusDays(500);
        org.joda.time.DurationFieldType durationFieldType28 = org.joda.time.DurationFieldType.days();
        java.lang.String str29 = durationFieldType28.toString();
        boolean boolean30 = localDateTime27.isSupported(durationFieldType28);
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.LocalDateTime localDateTime32 = localDateTime27.plus(readablePeriod31);
        org.joda.time.DurationFieldType durationFieldType33 = org.joda.time.DurationFieldType.hours();
        org.joda.time.Chronology chronology34 = null;
        boolean boolean35 = durationFieldType33.isSupported(chronology34);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime27.withFieldAdded(durationFieldType33, 3);
        org.joda.time.LocalDateTime localDateTime41 = localDateTime37.withDate(500, 7, 17);
        long long43 = chronology12.set((org.joda.time.ReadablePartial) localDateTime37, 1645629356615L);
        org.joda.time.DateTimeZone dateTimeZone44 = chronology12.getZone();
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str47 = dateTimeZone45.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime48 = org.joda.time.LocalDateTime.now(dateTimeZone45);
        org.joda.time.LocalDateTime.Property property49 = localDateTime48.millisOfDay();
        org.joda.time.ReadableInstant readableInstant50 = null;
        long long51 = property49.getDifferenceAsLong(readableInstant50);
        org.joda.time.DurationField durationField52 = property49.getLeapDurationField();
        java.lang.String str53 = property49.getAsString();
        org.joda.time.LocalDateTime localDateTime54 = property49.roundFloorCopy();
        org.joda.time.LocalDateTime localDateTime56 = localDateTime54.withWeekyear((int) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone57 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str59 = dateTimeZone57.getShortName((long) (short) 10);
        long long61 = dateTimeZone57.convertUTCToLocal((long) ' ');
        java.lang.String str62 = dateTimeZone57.toString();
        boolean boolean64 = dateTimeZone57.equals((java.lang.Object) (short) 100);
        java.util.Locale locale66 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str67 = dateTimeZone57.getShortName((long) (-1), locale66);
        org.joda.time.LocalDateTime localDateTime68 = new org.joda.time.LocalDateTime(dateTimeZone57);
        org.joda.time.DateTime dateTime69 = localDateTime56.toDateTime(dateTimeZone57);
        org.joda.time.DateTimeZone dateTimeZone70 = dateTime69.getZone();
        int int71 = dateTimeZone44.getOffset((org.joda.time.ReadableInstant) dateTime69);
        org.joda.time.Chronology chronology72 = chronology2.withZone(dateTimeZone44);
        org.joda.time.DateTimeField dateTimeField73 = chronology2.dayOfYear();
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "ISOChronology[UTC]" + "'", str4, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 22 + "'", int22 == 22);
        org.junit.Assert.assertNotNull(localDateTime24);
// flaky:         org.junit.Assert.assertTrue("'" + int25 + "' != '" + 14 + "'", int25 == 14);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(durationFieldType28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "days" + "'", str29, "days");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(durationFieldType33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(localDateTime41);
// flaky:         org.junit.Assert.assertTrue("'" + long43 + "' != '" + 1688751225908L + "'", long43 == 1688751225908L);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertNotNull(dateTimeZone45);
// flaky:         org.junit.Assert.assertEquals("'" + str47 + "' != '" + "+07:10:22.088" + "'", str47, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(property49);
// flaky:         org.junit.Assert.assertTrue("'" + long51 + "' != '" + 25822088L + "'", long51 == 25822088L);
        org.junit.Assert.assertNull(durationField52);
// flaky:         org.junit.Assert.assertEquals("'" + str53 + "' != '" + "52425908" + "'", str53, "52425908");
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(dateTimeZone57);
// flaky:         org.junit.Assert.assertEquals("'" + str59 + "' != '" + "+07:10:22.088" + "'", str59, "+07:10:22.088");
// flaky:         org.junit.Assert.assertTrue("'" + long61 + "' != '" + 25822120L + "'", long61 == 25822120L);
// flaky:         org.junit.Assert.assertEquals("'" + str62 + "' != '" + "+07:10:22.088" + "'", str62, "+07:10:22.088");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "fr_CA");
// flaky:         org.junit.Assert.assertEquals("'" + str67 + "' != '" + "+07:10:22.088" + "'", str67, "+07:10:22.088");
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(dateTimeZone70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(chronology72);
        org.junit.Assert.assertNotNull(dateTimeField73);
    }

    @Test
    public void test10040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10040");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.days();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology3 = localDateTime2.getChronology();
        org.joda.time.DurationField durationField4 = chronology3.hours();
        org.joda.time.DurationField durationField5 = durationFieldType0.getField(chronology3);
        org.joda.time.DateTimeField dateTimeField6 = chronology3.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField7 = chronology3.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField8 = chronology3.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField9 = chronology3.dayOfWeek();
        org.joda.time.DurationField durationField10 = dateTimeField9.getLeapDurationField();
        int int13 = dateTimeField9.getDifference(455592L, 1645629399160L);
        java.util.Locale.Category category15 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale16 = java.util.Locale.getDefault();
        java.lang.String str17 = locale16.getISO3Language();
        java.util.Locale.setDefault(category15, locale16);
        java.util.Locale locale19 = java.util.Locale.getDefault(category15);
        java.util.Locale locale20 = java.util.Locale.getDefault(category15);
        java.lang.String str22 = locale20.getExtension('a');
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology25 = localDateTime24.getChronology();
        org.joda.time.DurationField durationField26 = chronology25.hours();
        java.lang.String str27 = chronology25.toString();
        org.joda.time.DateTimeField dateTimeField28 = chronology25.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField29 = chronology25.era();
        int int30 = dateTimeField29.getMaximumValue();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str33 = dateTimeZone31.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime34 = org.joda.time.LocalDateTime.now(dateTimeZone31);
        org.joda.time.LocalDateTime.Property property35 = localDateTime34.millisOfDay();
        java.lang.String str36 = property35.getName();
        org.joda.time.LocalDateTime localDateTime37 = property35.roundHalfFloorCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        boolean boolean39 = localDateTime37.isSupported(dateTimeFieldType38);
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str42 = dateTimeZone40.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime43 = org.joda.time.LocalDateTime.now(dateTimeZone40);
        org.joda.time.LocalDateTime.Property property44 = localDateTime43.millisOfDay();
        org.joda.time.DurationFieldType durationFieldType45 = org.joda.time.DurationFieldType.centuries();
        boolean boolean46 = localDateTime43.equals((java.lang.Object) durationFieldType45);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray47 = localDateTime43.getFieldTypes();
        java.lang.String str48 = localDateTime43.toString();
        org.joda.time.LocalDateTime localDateTime50 = localDateTime43.plusMillis(22);
        boolean boolean51 = localDateTime37.isBefore((org.joda.time.ReadablePartial) localDateTime50);
        org.joda.time.ReadableDuration readableDuration52 = null;
        org.joda.time.LocalDateTime localDateTime53 = localDateTime50.plus(readableDuration52);
        org.joda.time.ReadableDuration readableDuration54 = null;
        org.joda.time.LocalDateTime localDateTime56 = localDateTime53.withDurationAdded(readableDuration54, 26169);
        org.joda.time.ReadablePeriod readablePeriod57 = null;
        org.joda.time.LocalDateTime localDateTime58 = localDateTime53.plus(readablePeriod57);
        java.util.Locale locale59 = java.util.Locale.ITALIAN;
        java.util.Set<java.lang.String> strSet60 = locale59.getUnicodeLocaleKeys();
        java.lang.String str61 = dateTimeField29.getAsShortText((org.joda.time.ReadablePartial) localDateTime58, locale59);
        java.lang.String str62 = locale20.getDisplayName(locale59);
        boolean boolean63 = locale59.hasExtensions();
        java.lang.String str64 = locale59.getDisplayVariant();
        java.util.Set<java.lang.String> strSet65 = locale59.getUnicodeLocaleAttributes();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str66 = dateTimeField9.getAsShortText(55021617, locale59);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 55021617");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNull(durationField10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-19046) + "'", int13 == (-19046));
        org.junit.Assert.assertTrue("'" + category15 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category15.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale16);
// flaky:         org.junit.Assert.assertEquals(locale16.toString(), "de");
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "deu" + "'", str17, "deu");
        org.junit.Assert.assertNotNull(locale19);
// flaky:         org.junit.Assert.assertEquals(locale19.toString(), "de");
        org.junit.Assert.assertNotNull(locale20);
// flaky:         org.junit.Assert.assertEquals(locale20.toString(), "de");
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "ISOChronology[UTC]" + "'", str27, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(dateTimeZone31);
// flaky:         org.junit.Assert.assertEquals("'" + str33 + "' != '" + "+07:10:22.088" + "'", str33, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "millisOfDay" + "'", str36, "millisOfDay");
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(dateTimeFieldType38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(dateTimeZone40);
// flaky:         org.junit.Assert.assertEquals("'" + str42 + "' != '" + "+07:10:22.088" + "'", str42, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(durationFieldType45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray47);
// flaky:         org.junit.Assert.assertEquals("'" + str48 + "' != '" + "2022-02-22T14:33:45.937" + "'", str48, "2022-02-22T14:33:45.937");
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "it");
        org.junit.Assert.assertNotNull(strSet60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "dopo Cristo" + "'", str61, "dopo Cristo");
// flaky:         org.junit.Assert.assertEquals("'" + str62 + "' != '" + "tedesco" + "'", str62, "tedesco");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertNotNull(strSet65);
    }

    @Test
    public void test10041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10041");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.weeks();
        java.lang.String str1 = durationFieldType0.toString();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime();
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withDurationAdded(readableDuration3, (int) '#');
        org.joda.time.LocalDateTime.Property property6 = localDateTime2.era();
        int int7 = localDateTime2.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime2.withWeekOfWeekyear((int) (byte) 1);
        int int10 = localDateTime2.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime2.plusDays(500);
        org.joda.time.DurationFieldType durationFieldType13 = org.joda.time.DurationFieldType.days();
        java.lang.String str14 = durationFieldType13.toString();
        boolean boolean15 = localDateTime12.isSupported(durationFieldType13);
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology19 = localDateTime18.getChronology();
        org.joda.time.DurationField durationField20 = chronology19.weekyears();
        org.joda.time.DurationField durationField21 = chronology19.centuries();
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime((long) (byte) 0, chronology19);
        org.joda.time.DurationField durationField23 = chronology19.millis();
        org.joda.time.DateTimeField dateTimeField24 = chronology19.minuteOfDay();
        org.joda.time.DurationField durationField25 = durationFieldType13.getField(chronology19);
        org.joda.time.DurationField durationField26 = durationFieldType0.getField(chronology19);
        org.joda.time.DurationField durationField27 = chronology19.weekyears();
        boolean boolean28 = durationField27.isSupported();
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "weeks" + "'", str1, "weeks");
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 22 + "'", int7 == 22);
        org.junit.Assert.assertNotNull(localDateTime9);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 14 + "'", int10 == 14);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(durationFieldType13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "days" + "'", str14, "days");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
    }

    @Test
    public void test10042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10042");
        java.util.Locale locale2 = new java.util.Locale("26568353", "2022-02-22T07:16:29.758");
        org.junit.Assert.assertEquals(locale2.toString(), "26568353_2022-02-22T07:16:29.758");
    }

    @Test
    public void test10043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10043");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.millisOfDay();
        java.lang.String str5 = property4.getName();
        int int6 = property4.getMaximumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = property4.getFieldType();
        org.joda.time.LocalDateTime localDateTime8 = property4.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime9 = property4.roundFloorCopy();
        org.joda.time.LocalDateTime localDateTime11 = property4.addToCopy(1908343039481L);
        java.lang.String str12 = property4.getAsText();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str15 = dateTimeZone13.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime16 = org.joda.time.LocalDateTime.now(dateTimeZone13);
        org.joda.time.LocalDateTime.Property property17 = localDateTime16.millisOfDay();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime16.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime16.plusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.minusHours((int) (short) 10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray24 = localDateTime21.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime26 = localDateTime21.withMillisOfDay((int) '4');
        org.joda.time.LocalDateTime.Property property27 = localDateTime21.monthOfYear();
        org.joda.time.LocalDateTime localDateTime28 = property27.withMinimumValue();
        org.joda.time.DateTime dateTime29 = localDateTime28.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone30 = dateTime29.getZone();
        long long31 = property4.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str34 = dateTimeZone32.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime35 = org.joda.time.LocalDateTime.now(dateTimeZone32);
        org.joda.time.LocalDateTime.Property property36 = localDateTime35.millisOfDay();
        java.lang.String str37 = property36.getName();
        org.joda.time.LocalDateTime localDateTime38 = property36.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime40 = localDateTime38.minusHours(0);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime40.minusMonths(22);
        org.joda.time.LocalDateTime localDateTime44 = localDateTime42.withCenturyOfEra(3);
        int[] intArray45 = localDateTime44.getValues();
        org.joda.time.LocalDateTime.Property property46 = localDateTime44.era();
        org.joda.time.Chronology chronology47 = localDateTime44.getChronology();
        org.joda.time.DateTimeZone dateTimeZone48 = chronology47.getZone();
        boolean boolean49 = dateTime29.equals((java.lang.Object) chronology47);
        org.junit.Assert.assertNotNull(dateTimeZone0);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+07:10:22.088" + "'", str2, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "millisOfDay" + "'", str5, "millisOfDay");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 86399999 + "'", int6 == 86399999);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "52426008" + "'", str12, "52426008");
        org.junit.Assert.assertNotNull(dateTimeZone13);
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+07:10:22.088" + "'", str15, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTimeZone30);
// flaky:         org.junit.Assert.assertTrue("'" + long31 + "' != '" + 2589022088L + "'", long31 == 2589022088L);
        org.junit.Assert.assertNotNull(dateTimeZone32);
// flaky:         org.junit.Assert.assertEquals("'" + str34 + "' != '" + "+07:10:22.088" + "'", str34, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "millisOfDay" + "'", str37, "millisOfDay");
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(intArray45);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[320, 4, 22, 52426008]");
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test10044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10044");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology3 = localDateTime2.getChronology();
        org.joda.time.DurationField durationField4 = chronology3.weekyears();
        boolean boolean5 = dateTimeFieldType0.isSupported(chronology3);
        org.joda.time.DateTimeField dateTimeField6 = chronology3.halfdayOfDay();
        org.joda.time.DurationField durationField7 = chronology3.weeks();
        org.joda.time.DateTimeField dateTimeField8 = chronology3.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField9 = chronology3.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField10 = chronology3.hourOfDay();
        long long13 = dateTimeField10.add((long) 324, 1645629794277L);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 5924267259397200324L + "'", long13 == 5924267259397200324L);
    }

    @Test
    public void test10045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10045");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DurationField durationField3 = chronology2.weekyears();
        org.joda.time.DurationField durationField4 = chronology2.seconds();
        long long7 = durationField4.getValueAsLong(1645629369702L, 28L);
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTimeField dateTimeField10 = dateTimeFieldType8.getField(chronology9);
        java.util.Locale locale12 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale13 = locale12.stripExtensions();
        java.lang.String str14 = dateTimeField10.getAsShortText(100, locale13);
        int int16 = dateTimeField10.getLeapAmount((long) (short) 100);
        org.joda.time.DurationField durationField17 = dateTimeField10.getRangeDurationField();
        long long20 = durationField17.add(1645629359098L, (int) (byte) 0);
        long long22 = durationField17.getMillis((long) 8);
        int int23 = durationField4.compareTo(durationField17);
        int int26 = durationField17.getValue((long) 54, 3216503530103L);
        long long27 = durationField17.getUnitMillis();
        long long29 = durationField17.getValueAsLong(65640051L);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1645629369L + "'", long7 == 1645629369L);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "100" + "'", str14, "100");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 1645629359098L + "'", long20 == 1645629359098L);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 691200000L + "'", long22 == 691200000L);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 86400000L + "'", long27 == 86400000L);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
    }

    @Test
    public void test10046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10046");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.millisOfDay();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime3.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime3.plusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minusHours((int) (short) 10);
        int int11 = localDateTime8.getMinuteOfHour();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime8.minusMinutes(0);
        org.joda.time.DurationFieldType durationFieldType14 = org.joda.time.DurationFieldType.weekyears();
        java.lang.String str15 = durationFieldType14.toString();
        org.joda.time.DurationFieldType durationFieldType16 = org.joda.time.DurationFieldType.millis();
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology19 = localDateTime18.getChronology();
        org.joda.time.DurationField durationField20 = chronology19.weekyears();
        org.joda.time.DurationField durationField21 = chronology19.centuries();
        org.joda.time.DurationField durationField22 = durationFieldType16.getField(chronology19);
        boolean boolean23 = durationFieldType14.isSupported(chronology19);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime8.withFieldAdded(durationFieldType14, (-1));
        int int26 = localDateTime25.getWeekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str29 = dateTimeZone27.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime30 = org.joda.time.LocalDateTime.now(dateTimeZone27);
        org.joda.time.LocalDateTime.Property property31 = localDateTime30.millisOfDay();
        org.joda.time.LocalDateTime localDateTime33 = localDateTime30.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime30.withMonthOfYear((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime25.withFields((org.joda.time.ReadablePartial) localDateTime30);
        org.joda.time.ReadableDuration readableDuration37 = null;
        org.joda.time.LocalDateTime localDateTime39 = localDateTime30.withDurationAdded(readableDuration37, (int) 'u');
        org.joda.time.LocalDateTime localDateTime41 = localDateTime39.minusMillis(55158611);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime43 = localDateTime41.withDayOfYear(1439);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1439 for dayOfYear must be in the range [1,365]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+07:10:22.088" + "'", str2, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 33 + "'", int11 == 33);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(durationFieldType14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "weekyears" + "'", str15, "weekyears");
        org.junit.Assert.assertNotNull(durationFieldType16);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 8 + "'", int26 == 8);
        org.junit.Assert.assertNotNull(dateTimeZone27);
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "+07:10:22.088" + "'", str29, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(localDateTime41);
    }

    @Test
    public void test10047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10047");
        org.joda.time.DurationFieldType durationFieldType1 = org.joda.time.DurationFieldType.weeks();
        java.lang.String str2 = durationFieldType1.toString();
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime();
        java.lang.String str4 = localDateTime3.toString();
        int int5 = localDateTime3.getCenturyOfEra();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime3.minusMonths(2);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str11 = dateTimeZone9.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime12 = org.joda.time.LocalDateTime.now(dateTimeZone9);
        org.joda.time.LocalDateTime.Property property13 = localDateTime12.millisOfDay();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime12.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime12.plusHours((int) ' ');
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.DateTime dateTime19 = localDateTime17.toDateTime(readableInstant18);
        long long20 = dateTime19.getMillis();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str23 = dateTimeZone21.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime24 = org.joda.time.LocalDateTime.now(dateTimeZone21);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = localDateTime24.getFieldType((int) (short) 0);
        boolean boolean27 = dateTime19.isSupported(dateTimeFieldType26);
        org.joda.time.DateTime dateTime28 = localDateTime7.toDateTime((org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str31 = dateTimeZone29.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime32 = org.joda.time.LocalDateTime.now(dateTimeZone29);
        org.joda.time.LocalDateTime.Property property33 = localDateTime32.millisOfDay();
        org.joda.time.LocalDateTime localDateTime35 = localDateTime32.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime32.plusHours((int) ' ');
        org.joda.time.ReadableInstant readableInstant38 = null;
        org.joda.time.DateTime dateTime39 = localDateTime37.toDateTime(readableInstant38);
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str42 = dateTimeZone40.getShortName((long) (short) 10);
        long long44 = dateTimeZone40.convertUTCToLocal((long) ' ');
        java.lang.String str45 = dateTimeZone40.toString();
        long long47 = dateTimeZone40.previousTransition(32L);
        long long50 = dateTimeZone40.convertLocalToUTC(97L, false);
        boolean boolean51 = dateTime39.equals((java.lang.Object) false);
        boolean boolean52 = dateTime28.isEqual((org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.Chronology chronology53 = dateTime39.getChronology();
        org.joda.time.DurationField durationField54 = durationFieldType1.getField(chronology53);
        org.joda.time.DurationField durationField55 = chronology53.weeks();
        org.joda.time.LocalDateTime localDateTime56 = new org.joda.time.LocalDateTime(1645629451174L, chronology53);
        org.joda.time.DurationField durationField57 = chronology53.minutes();
        org.joda.time.DurationFieldType durationFieldType58 = durationField57.getType();
        org.junit.Assert.assertNotNull(durationFieldType1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "weeks" + "'", str2, "weeks");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022-02-22T14:33:46.070" + "'", str4, "2022-02-22T14:33:46.070");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 20 + "'", int5 == 20);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+07:10:22.088" + "'", str11, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
// flaky:         org.junit.Assert.assertTrue("'" + long20 + "' != '" + 1645629803982L + "'", long20 == 1645629803982L);
        org.junit.Assert.assertNotNull(dateTimeZone21);
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "+07:10:22.088" + "'", str23, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTimeZone29);
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "+07:10:22.088" + "'", str31, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTimeZone40);
// flaky:         org.junit.Assert.assertEquals("'" + str42 + "' != '" + "+07:10:22.088" + "'", str42, "+07:10:22.088");
// flaky:         org.junit.Assert.assertTrue("'" + long44 + "' != '" + 25822120L + "'", long44 == 25822120L);
// flaky:         org.junit.Assert.assertEquals("'" + str45 + "' != '" + "+07:10:22.088" + "'", str45, "+07:10:22.088");
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 32L + "'", long47 == 32L);
// flaky:         org.junit.Assert.assertTrue("'" + long50 + "' != '" + (-25821991L) + "'", long50 == (-25821991L));
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(durationField54);
        org.junit.Assert.assertNotNull(durationField55);
        org.junit.Assert.assertNotNull(durationField57);
        org.junit.Assert.assertNotNull(durationFieldType58);
    }

    @Test
    public void test10048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10048");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.millisOfDay();
        int int5 = localDateTime3.getCenturyOfEra();
        int int6 = localDateTime3.getYearOfEra();
        org.joda.time.LocalDateTime.Property property7 = localDateTime3.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str10 = dateTimeZone8.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now(dateTimeZone8);
        org.joda.time.LocalDateTime.Property property12 = localDateTime11.millisOfDay();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime11.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime11.plusHours((int) ' ');
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = localDateTime16.getFieldType((int) (byte) 0);
        int int19 = localDateTime3.indexOf(dateTimeFieldType18);
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology23 = localDateTime22.getChronology();
        org.joda.time.DurationField durationField24 = chronology23.weekyears();
        org.joda.time.DurationField durationField25 = chronology23.centuries();
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime((long) (byte) 0, chronology23);
        org.joda.time.DurationField durationField27 = chronology23.millis();
        org.joda.time.DateTimeField dateTimeField28 = chronology23.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField29 = chronology23.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField30 = chronology23.yearOfEra();
        org.joda.time.DateTimeField dateTimeField31 = chronology23.year();
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str34 = dateTimeZone32.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime35 = org.joda.time.LocalDateTime.now(dateTimeZone32);
        org.joda.time.LocalDateTime.Property property36 = localDateTime35.millisOfDay();
        org.joda.time.DurationFieldType durationFieldType37 = org.joda.time.DurationFieldType.centuries();
        boolean boolean38 = localDateTime35.equals((java.lang.Object) durationFieldType37);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray39 = localDateTime35.getFieldTypes();
        java.lang.String str40 = localDateTime35.toString();
        org.joda.time.LocalDateTime localDateTime42 = localDateTime35.plusMillis(22);
        int[] intArray44 = chronology23.get((org.joda.time.ReadablePartial) localDateTime42, (-1893417120000000L));
        org.joda.time.DurationField durationField45 = chronology23.weekyears();
        org.joda.time.DurationField durationField46 = chronology23.hours();
        org.joda.time.DateTimeField dateTimeField47 = dateTimeFieldType18.getField(chronology23);
        org.junit.Assert.assertNotNull(dateTimeZone0);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+07:10:22.088" + "'", str2, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 20 + "'", int5 == 20);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2022 + "'", int6 == 2022);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+07:10:22.088" + "'", str10, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeZone32);
// flaky:         org.junit.Assert.assertEquals("'" + str34 + "' != '" + "+07:10:22.088" + "'", str34, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(durationFieldType37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray39);
// flaky:         org.junit.Assert.assertEquals("'" + str40 + "' != '" + "2022-02-22T14:33:46.133" + "'", str40, "2022-02-22T14:33:46.133");
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-58030, 1, 1, 0]");
        org.junit.Assert.assertNotNull(durationField45);
        org.junit.Assert.assertNotNull(durationField46);
        org.junit.Assert.assertNotNull(dateTimeField47);
    }

    @Test
    public void test10049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10049");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.addUnicodeLocaleAttribute("und");
        java.util.Locale.Builder builder3 = builder2.clear();
        java.util.Locale.Builder builder6 = builder2.setExtension('a', "26150748");
        java.util.Locale.Builder builder7 = builder2.clear();
        java.util.Locale.Builder builder8 = builder7.clearExtensions();
        java.util.Locale.Builder builder10 = builder7.addUnicodeLocaleAttribute("Tuesday");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder12 = builder7.setLanguageTag("26482328");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Invalid subtag: 26482328 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test10050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10050");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        org.joda.time.LocalDateTime localDateTime3 = localDateTime0.withDurationAdded(readableDuration1, (int) '#');
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.weekyear();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime3.minusMillis((-1));
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str9 = dateTimeZone7.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime10 = org.joda.time.LocalDateTime.now(dateTimeZone7);
        org.joda.time.LocalDateTime.Property property11 = localDateTime10.millisOfDay();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime10.withYear((int) (short) 100);
        java.lang.String str14 = localDateTime13.toString();
        boolean boolean15 = localDateTime3.isAfter((org.joda.time.ReadablePartial) localDateTime13);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime13.withEra((int) (byte) 1);
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.minus(readableDuration18);
        org.joda.time.LocalDateTime.Property property20 = localDateTime17.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime17.withMillisOfDay(365);
        int int23 = localDateTime17.getYearOfCentury();
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.LocalDateTime localDateTime25 = localDateTime17.plus(readablePeriod24);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime27 = localDateTime25.withMillisOfSecond((-89377912));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -89377912 for millisOfSecond must be in the range [0,999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+07:10:22.088" + "'", str9, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDateTime13);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "0100-02-22T14:33:46.163" + "'", str14, "0100-02-22T14:33:46.163");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(localDateTime25);
    }

    @Test
    public void test10051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10051");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.millisOfDay();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime3.withYear((int) (short) 100);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.minuteOfHour();
        int int8 = property7.get();
        int int9 = property7.getMinimumValueOverall();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str12 = dateTimeZone10.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime13 = org.joda.time.LocalDateTime.now(dateTimeZone10);
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.millisOfDay();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime13.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime13.plusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.minusHours((int) (short) 10);
        int int21 = localDateTime18.getMinuteOfHour();
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.LocalDateTime localDateTime23 = localDateTime18.minus(readablePeriod22);
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str26 = dateTimeZone24.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime27 = org.joda.time.LocalDateTime.now(dateTimeZone24);
        org.joda.time.LocalDateTime.Property property28 = localDateTime27.millisOfDay();
        org.joda.time.LocalDateTime localDateTime30 = localDateTime27.withYear((int) (short) 100);
        int int31 = localDateTime30.getCenturyOfEra();
        boolean boolean32 = localDateTime18.isBefore((org.joda.time.ReadablePartial) localDateTime30);
        int int33 = localDateTime30.getDayOfYear();
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str36 = dateTimeZone34.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime37 = org.joda.time.LocalDateTime.now(dateTimeZone34);
        org.joda.time.LocalDateTime.Property property38 = localDateTime37.millisOfDay();
        org.joda.time.LocalDateTime localDateTime40 = localDateTime37.withYear((int) (short) 100);
        int int41 = localDateTime30.compareTo((org.joda.time.ReadablePartial) localDateTime40);
        org.joda.time.LocalDateTime.Property property42 = localDateTime40.weekyear();
        int int43 = property7.compareTo((org.joda.time.ReadablePartial) localDateTime40);
        org.joda.time.LocalDateTime localDateTime44 = new org.joda.time.LocalDateTime();
        java.lang.String str45 = localDateTime44.toString();
        org.joda.time.LocalDateTime localDateTime47 = localDateTime44.plusMonths((int) (short) -1);
        org.joda.time.LocalDateTime.Property property48 = localDateTime44.yearOfEra();
        org.joda.time.LocalDateTime localDateTime49 = new org.joda.time.LocalDateTime();
        org.joda.time.ReadableDuration readableDuration50 = null;
        org.joda.time.LocalDateTime localDateTime52 = localDateTime49.withDurationAdded(readableDuration50, (int) '#');
        org.joda.time.LocalDateTime.Property property53 = localDateTime52.centuryOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType54 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.DateTimeField dateTimeField56 = dateTimeFieldType54.getField(chronology55);
        java.util.Locale locale58 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale59 = locale58.stripExtensions();
        java.lang.String str60 = dateTimeField56.getAsShortText(100, locale59);
        int int61 = property53.getMaximumShortTextLength(locale59);
        java.lang.String str62 = locale59.getDisplayLanguage();
        java.util.Locale locale63 = locale59.stripExtensions();
        boolean boolean64 = localDateTime44.equals((java.lang.Object) locale63);
        java.lang.String str65 = property7.getAsShortText(locale63);
        org.junit.Assert.assertNotNull(dateTimeZone0);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+07:10:22.088" + "'", str2, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 33 + "'", int8 == 33);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone10);
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+07:10:22.088" + "'", str12, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
// flaky:         org.junit.Assert.assertTrue("'" + int21 + "' != '" + 33 + "'", int21 == 33);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "+07:10:22.088" + "'", str26, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 53 + "'", int33 == 53);
        org.junit.Assert.assertNotNull(dateTimeZone34);
// flaky:         org.junit.Assert.assertEquals("'" + str36 + "' != '" + "+07:10:22.088" + "'", str36, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
// flaky:         org.junit.Assert.assertEquals("'" + str45 + "' != '" + "2022-02-22T14:33:46.175" + "'", str45, "2022-02-22T14:33:46.175");
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(dateTimeFieldType54);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "100" + "'", str60, "100");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 7 + "'", int61 == 7);
// flaky:         org.junit.Assert.assertEquals("'" + str62 + "' != '" + "Franz\366sisch" + "'", str62, "Franz\366sisch");
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "fr_CA");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str65 + "' != '" + "33" + "'", str65, "33");
    }

    @Test
    public void test10052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10052");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.DurationFieldType durationFieldType1 = dateTimeFieldType0.getDurationType();
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.weekyears();
        org.joda.time.DurationField durationField6 = chronology4.centuries();
        boolean boolean7 = durationFieldType1.isSupported(chronology4);
        org.joda.time.DurationField durationField8 = chronology4.halfdays();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.Chronology chronology10 = chronology4.withZone(dateTimeZone9);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str13 = dateTimeZone11.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime14 = org.joda.time.LocalDateTime.now(dateTimeZone11);
        org.joda.time.LocalDateTime.Property property15 = localDateTime14.millisOfDay();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime14.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime14.plusHours((int) ' ');
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.DateTime dateTime21 = localDateTime19.toDateTime(readableInstant20);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str24 = dateTimeZone22.getShortName((long) (short) 10);
        long long26 = dateTimeZone22.convertUTCToLocal((long) ' ');
        java.lang.String str27 = dateTimeZone22.toString();
        long long29 = dateTimeZone22.previousTransition(32L);
        long long32 = dateTimeZone22.convertLocalToUTC(97L, false);
        boolean boolean33 = dateTime21.equals((java.lang.Object) false);
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str36 = dateTimeZone34.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime37 = org.joda.time.LocalDateTime.now(dateTimeZone34);
        org.joda.time.LocalDateTime.Property property38 = localDateTime37.millisOfDay();
        org.joda.time.LocalDateTime localDateTime40 = localDateTime37.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime37.plusHours((int) ' ');
        org.joda.time.ReadableInstant readableInstant43 = null;
        org.joda.time.DateTime dateTime44 = localDateTime42.toDateTime(readableInstant43);
        long long45 = dateTime44.getMillis();
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str48 = dateTimeZone46.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime49 = org.joda.time.LocalDateTime.now(dateTimeZone46);
        org.joda.time.DateTimeFieldType dateTimeFieldType51 = localDateTime49.getFieldType((int) (short) 0);
        boolean boolean52 = dateTime44.isSupported(dateTimeFieldType51);
        boolean boolean53 = dateTime21.isAfter((org.joda.time.ReadableInstant) dateTime44);
        java.lang.String str54 = dateTime21.toString();
        boolean boolean56 = dateTime21.equals((java.lang.Object) (short) 1);
        int int57 = dateTimeZone9.getOffset((org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.LocalDateTime localDateTime58 = new org.joda.time.LocalDateTime(dateTimeZone9);
        org.joda.time.LocalDateTime localDateTime60 = localDateTime58.withMillisOfDay(26213656);
        org.joda.time.ReadableDuration readableDuration61 = null;
        org.joda.time.LocalDateTime localDateTime63 = localDateTime60.withDurationAdded(readableDuration61, 25808891);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime65 = localDateTime63.withWeekOfWeekyear(192);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 192 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(durationFieldType1);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+07:10:22.088" + "'", str13, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTimeZone22);
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "+07:10:22.088" + "'", str24, "+07:10:22.088");
// flaky:         org.junit.Assert.assertTrue("'" + long26 + "' != '" + 25822120L + "'", long26 == 25822120L);
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "+07:10:22.088" + "'", str27, "+07:10:22.088");
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 32L + "'", long29 == 32L);
// flaky:         org.junit.Assert.assertTrue("'" + long32 + "' != '" + (-25821991L) + "'", long32 == (-25821991L));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(dateTimeZone34);
// flaky:         org.junit.Assert.assertEquals("'" + str36 + "' != '" + "+07:10:22.088" + "'", str36, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
// flaky:         org.junit.Assert.assertTrue("'" + long45 + "' != '" + 1645629804113L + "'", long45 == 1645629804113L);
        org.junit.Assert.assertNotNull(dateTimeZone46);
// flaky:         org.junit.Assert.assertEquals("'" + str48 + "' != '" + "+07:10:22.088" + "'", str48, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(dateTimeFieldType51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str54 + "' != '" + "2022-02-23T22:33:46.201+07:10:22.088" + "'", str54, "2022-02-23T22:33:46.201+07:10:22.088");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(localDateTime63);
    }

    @Test
    public void test10053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10053");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Locale locale3 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale4 = java.util.Locale.CANADA;
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str7 = dateTimeZone5.getShortName((long) (short) 10);
        long long9 = dateTimeZone5.convertUTCToLocal((long) ' ');
        java.lang.String str10 = dateTimeZone5.toString();
        boolean boolean12 = dateTimeZone5.equals((java.lang.Object) (short) 100);
        java.util.Locale locale14 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str15 = dateTimeZone5.getShortName((long) (-1), locale14);
        java.util.Locale locale16 = java.util.Locale.CANADA;
        java.util.Locale locale17 = java.util.Locale.FRENCH;
        java.util.Locale[] localeArray18 = new java.util.Locale[] { locale3, locale4, locale14, locale16, locale17 };
        java.util.ArrayList<java.util.Locale> localeList19 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList19, localeArray18);
        java.util.Locale locale21 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.util.Locale>) localeList19);
        java.util.Locale locale22 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet23 = locale22.getUnicodeLocaleAttributes();
        java.lang.Object[] objArray24 = strSet23.toArray();
        java.util.List<java.lang.String> strList25 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet23);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap26 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList27 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strMap26);
        java.util.Collection<java.lang.String> strCollection28 = null;
        java.util.Locale.FilteringMode filteringMode29 = java.util.Locale.FilteringMode.AUTOSELECT_FILTERING;
        java.util.List<java.lang.String> strList30 = java.util.Locale.filterTags(languageRangeList27, strCollection28, filteringMode29);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap31 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList32 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList27, strMap31);
        java.util.Locale locale33 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet34 = locale33.getUnicodeLocaleAttributes();
        java.lang.Object[] objArray35 = strSet34.toArray();
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str38 = dateTimeZone36.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime39 = org.joda.time.LocalDateTime.now(dateTimeZone36);
        org.joda.time.LocalDateTime.Property property40 = localDateTime39.millisOfDay();
        org.joda.time.DurationFieldType durationFieldType41 = org.joda.time.DurationFieldType.centuries();
        boolean boolean42 = localDateTime39.equals((java.lang.Object) durationFieldType41);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray43 = localDateTime39.getFieldTypes();
        java.lang.String str44 = localDateTime39.toString();
        org.joda.time.LocalDateTime localDateTime46 = localDateTime39.plusMillis(22);
        org.joda.time.LocalDateTime.Property property47 = localDateTime39.monthOfYear();
        boolean boolean48 = strSet34.remove((java.lang.Object) property47);
        java.lang.String str49 = java.util.Locale.lookupTag(languageRangeList27, (java.util.Collection<java.lang.String>) strSet34);
        java.util.stream.Stream<java.lang.String> strStream50 = strSet34.parallelStream();
        java.util.Locale locale51 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet52 = locale51.getUnicodeLocaleAttributes();
        java.lang.Object[] objArray53 = strSet52.toArray();
        boolean boolean54 = strSet52.isEmpty();
        java.util.Locale locale55 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet56 = locale55.getUnicodeLocaleAttributes();
        java.lang.Object[] objArray57 = strSet56.toArray();
        java.util.Locale locale58 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet59 = locale58.getUnicodeLocaleAttributes();
        boolean boolean60 = strSet56.removeAll((java.util.Collection<java.lang.String>) strSet59);
        java.util.Locale locale61 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet62 = locale61.getUnicodeLocaleAttributes();
        org.joda.time.DurationFieldType durationFieldType63 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.DurationFieldType durationFieldType64 = org.joda.time.DurationFieldType.hours();
        org.joda.time.DurationFieldType[] durationFieldTypeArray65 = new org.joda.time.DurationFieldType[] { durationFieldType63, durationFieldType64 };
        org.joda.time.DurationFieldType[] durationFieldTypeArray66 = strSet62.toArray(durationFieldTypeArray65);
        boolean boolean67 = strSet56.containsAll((java.util.Collection<java.lang.String>) strSet62);
        java.lang.Object[] objArray68 = strSet62.toArray();
        boolean boolean69 = strSet52.removeAll((java.util.Collection<java.lang.String>) strSet62);
        strSet62.clear();
        java.util.Spliterator<java.lang.String> strSpliterator71 = strSet62.spliterator();
        java.util.Iterator<java.lang.String> strItor72 = strSet62.iterator();
        boolean boolean73 = strSet34.removeAll((java.util.Collection<java.lang.String>) strSet62);
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en_CA");
        org.junit.Assert.assertNotNull(dateTimeZone5);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+07:10:22.088" + "'", str7, "+07:10:22.088");
// flaky:         org.junit.Assert.assertTrue("'" + long9 + "' != '" + 25822120L + "'", long9 == 25822120L);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+07:10:22.088" + "'", str10, "+07:10:22.088");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "fr_CA");
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+07:10:22.088" + "'", str15, "+07:10:22.088");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "fr");
        org.junit.Assert.assertNotNull(localeArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNull(locale21);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "");
        org.junit.Assert.assertNotNull(strSet23);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[]");
        org.junit.Assert.assertNotNull(strList25);
        org.junit.Assert.assertNotNull(languageRangeList27);
        org.junit.Assert.assertTrue("'" + filteringMode29 + "' != '" + java.util.Locale.FilteringMode.AUTOSELECT_FILTERING + "'", filteringMode29.equals(java.util.Locale.FilteringMode.AUTOSELECT_FILTERING));
        org.junit.Assert.assertNotNull(strList30);
        org.junit.Assert.assertNotNull(languageRangeList32);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "");
        org.junit.Assert.assertNotNull(strSet34);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[]");
        org.junit.Assert.assertNotNull(dateTimeZone36);
// flaky:         org.junit.Assert.assertEquals("'" + str38 + "' != '" + "+07:10:22.088" + "'", str38, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(durationFieldType41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray43);
// flaky:         org.junit.Assert.assertEquals("'" + str44 + "' != '" + "2022-02-22T14:33:46.227" + "'", str44, "2022-02-22T14:33:46.227");
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertNotNull(strStream50);
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "");
        org.junit.Assert.assertNotNull(strSet52);
        org.junit.Assert.assertNotNull(objArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray53), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray53), "[]");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "");
        org.junit.Assert.assertNotNull(strSet56);
        org.junit.Assert.assertNotNull(objArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray57), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray57), "[]");
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "");
        org.junit.Assert.assertNotNull(strSet59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "");
        org.junit.Assert.assertNotNull(strSet62);
        org.junit.Assert.assertNotNull(durationFieldType63);
        org.junit.Assert.assertNotNull(durationFieldType64);
        org.junit.Assert.assertNotNull(durationFieldTypeArray65);
        org.junit.Assert.assertNotNull(durationFieldTypeArray66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(objArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray68), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray68), "[]");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(strSpliterator71);
        org.junit.Assert.assertNotNull(strItor72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
    }

    @Test
    public void test10054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10054");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.millisOfDay();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime3.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime3.plusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minusHours((int) (short) 10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray11 = localDateTime8.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime8.minusMillis(0);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withDayOfYear(32);
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str18 = dateTimeZone16.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime19 = org.joda.time.LocalDateTime.now(dateTimeZone16);
        org.joda.time.LocalDateTime.Property property20 = localDateTime19.millisOfDay();
        org.joda.time.ReadableInstant readableInstant21 = null;
        long long22 = property20.getDifferenceAsLong(readableInstant21);
        java.util.Locale locale23 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str24 = locale23.getISO3Language();
        java.lang.String str25 = property20.getAsShortText(locale23);
        org.joda.time.DurationField durationField26 = property20.getDurationField();
        long long29 = durationField26.add((long) 1, 10);
        boolean boolean30 = durationField26.isPrecise();
        boolean boolean31 = localDateTime13.equals((java.lang.Object) boolean30);
        org.joda.time.LocalDateTime.Property property32 = localDateTime13.dayOfMonth();
        int int33 = property32.getMinimumValueOverall();
        org.junit.Assert.assertNotNull(dateTimeZone0);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+07:10:22.088" + "'", str2, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+07:10:22.088" + "'", str18, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(property20);
// flaky:         org.junit.Assert.assertTrue("'" + long22 + "' != '" + 25822088L + "'", long22 == 25822088L);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "fra" + "'", str24, "fra");
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "52426260" + "'", str25, "52426260");
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 11L + "'", long29 == 11L);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
    }

    @Test
    public void test10055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10055");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(25821774, 720);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minutes out of range: 720");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test10056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10056");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) ' ');
        java.lang.String str2 = dateTimeZone1.getID();
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str5 = dateTimeZone3.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime6 = org.joda.time.LocalDateTime.now(dateTimeZone3);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.millisOfDay();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime6.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime6.plusHours((int) ' ');
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.DateTime dateTime13 = localDateTime11.toDateTime(readableInstant12);
        int int14 = dateTimeZone1.getOffset(readableInstant12);
        java.lang.String str15 = dateTimeZone1.getID();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+32:00" + "'", str2, "+32:00");
        org.junit.Assert.assertNotNull(dateTimeZone3);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+07:10:22.088" + "'", str5, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 115200000 + "'", int14 == 115200000);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+32:00" + "'", str15, "+32:00");
    }

    @Test
    public void test10057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10057");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("2022-02-22T07:17:21.175");
        timeZone1.setRawOffset(0);
        timeZone1.setRawOffset(3);
        java.lang.Object obj6 = timeZone1.clone();
        org.junit.Assert.assertNotNull(timeZone1);
// flaky:         org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Greenwich Zeit");
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "sun.util.calendar.ZoneInfo[id=\"GMT\",offset=3,dstSavings=0,useDaylight=false,transitions=0,lastRule=null]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "sun.util.calendar.ZoneInfo[id=\"GMT\",offset=3,dstSavings=0,useDaylight=false,transitions=0,lastRule=null]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "sun.util.calendar.ZoneInfo[id=\"GMT\",offset=3,dstSavings=0,useDaylight=false,transitions=0,lastRule=null]");
    }

    @Test
    public void test10058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10058");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getShortName((long) (short) 10);
        long long4 = dateTimeZone0.convertUTCToLocal((long) ' ');
        java.lang.String str5 = dateTimeZone0.toString();
        boolean boolean7 = dateTimeZone0.equals((java.lang.Object) (short) 100);
        long long10 = dateTimeZone0.adjustOffset((long) 2022, true);
        java.util.TimeZone timeZone11 = dateTimeZone0.toTimeZone();
        java.util.TimeZone timeZone12 = java.util.TimeZone.getDefault();
        int int14 = timeZone12.getOffset((long) (short) 100);
        timeZone12.setID("hourOfDay");
        boolean boolean17 = timeZone12.observesDaylightTime();
        boolean boolean18 = timeZone11.hasSameRules(timeZone12);
        int int20 = timeZone12.getOffset(1645629361196L);
        java.util.TimeZone timeZone22 = java.util.TimeZone.getTimeZone("Frankreich");
        timeZone22.setRawOffset(26149500);
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        timeZone22.setID("26243983");
        timeZone22.setRawOffset(54976760);
        boolean boolean30 = timeZone12.hasSameRules(timeZone22);
        // The following exception was thrown during execution in test generation
        try {
            int int37 = timeZone12.getOffset(10, (-20170), 81519108, 0, 55071980, 18);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+07:10:22.088" + "'", str2, "+07:10:22.088");
// flaky:         org.junit.Assert.assertTrue("'" + long4 + "' != '" + 25822120L + "'", long4 == 25822120L);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+07:10:22.088" + "'", str5, "+07:10:22.088");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 2022L + "'", long10 == 2022L);
        org.junit.Assert.assertNotNull(timeZone11);
// flaky:         org.junit.Assert.assertEquals(timeZone11.getDisplayName(), "GMT+07:10");
        org.junit.Assert.assertNotNull(timeZone12);
        org.junit.Assert.assertEquals(timeZone12.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(timeZone22);
        org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "GMT+15:16");
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test10059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10059");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DateTimeField dateTimeField3 = chronology2.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField4 = chronology2.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField5 = chronology2.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField6 = chronology2.hourOfDay();
        org.joda.time.DateTimeField dateTimeField7 = chronology2.yearOfEra();
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
    }

    @Test
    public void test10060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10060");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DateTimeField dateTimeField3 = chronology2.dayOfYear();
        org.joda.time.DateTimeField dateTimeField4 = chronology2.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone5 = chronology2.getZone();
        org.joda.time.DateTimeField dateTimeField6 = chronology2.minuteOfDay();
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTimeField6);
    }

    @Test
    public void test10061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10061");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.millisOfDay();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime3.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime3.plusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minusHours((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.withEra((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property13 = localDateTime12.secondOfMinute();
        java.lang.String str14 = property13.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = property13.getFieldType();
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology18 = localDateTime17.getChronology();
        org.joda.time.DurationField durationField19 = chronology18.weekyears();
        org.joda.time.DurationField durationField20 = chronology18.seconds();
        org.joda.time.DurationField durationField21 = chronology18.seconds();
        org.joda.time.DurationField durationField22 = chronology18.seconds();
        org.joda.time.DateTimeField dateTimeField23 = chronology18.millisOfDay();
        org.joda.time.DateTimeField dateTimeField24 = chronology18.centuryOfEra();
        boolean boolean25 = dateTimeFieldType15.isSupported(chronology18);
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str28 = dateTimeZone26.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime29 = org.joda.time.LocalDateTime.now(dateTimeZone26);
        org.joda.time.LocalDateTime.Property property30 = localDateTime29.millisOfDay();
        org.joda.time.DurationFieldType durationFieldType31 = org.joda.time.DurationFieldType.centuries();
        boolean boolean32 = localDateTime29.equals((java.lang.Object) durationFieldType31);
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology35 = localDateTime34.getChronology();
        org.joda.time.DurationField durationField36 = chronology35.weekyears();
        org.joda.time.DateTimeField dateTimeField37 = chronology35.minuteOfDay();
        org.joda.time.DurationField durationField38 = durationFieldType31.getField(chronology35);
        boolean boolean39 = dateTimeFieldType15.isSupported(chronology35);
        org.joda.time.DateTimeField dateTimeField40 = chronology35.dayOfWeek();
        int int41 = dateTimeField40.getMinimumValue();
        org.junit.Assert.assertNotNull(dateTimeZone0);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+07:10:22.088" + "'", str2, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Property[secondOfMinute]" + "'", str14, "Property[secondOfMinute]");
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(dateTimeZone26);
// flaky:         org.junit.Assert.assertEquals("'" + str28 + "' != '" + "+07:10:22.088" + "'", str28, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(durationFieldType31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
    }

    @Test
    public void test10062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10062");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getShortName((long) (short) 10);
        long long4 = dateTimeZone0.convertUTCToLocal((long) ' ');
        java.lang.String str5 = dateTimeZone0.toString();
        long long7 = dateTimeZone0.previousTransition(32L);
        java.lang.String str8 = dateTimeZone0.toString();
        java.util.Locale.Category category10 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale11 = java.util.Locale.FRENCH;
        java.util.Locale.setDefault(category10, locale11);
        java.lang.String str13 = locale11.getDisplayName();
        boolean boolean14 = locale11.hasExtensions();
        java.lang.String str15 = dateTimeZone0.getShortName(86399084L, locale11);
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str18 = dateTimeZone16.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime19 = org.joda.time.LocalDateTime.now(dateTimeZone16);
        org.joda.time.LocalDateTime.Property property20 = localDateTime19.millisOfDay();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime19.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime19.plusHours((int) ' ');
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.DateTime dateTime26 = localDateTime24.toDateTime(readableInstant25);
        long long27 = dateTime26.getMillis();
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = org.joda.time.DateTimeFieldType.hourOfDay();
        boolean boolean29 = dateTime26.isSupported(dateTimeFieldType28);
        int int30 = dateTimeZone0.getOffset((org.joda.time.ReadableInstant) dateTime26);
        java.util.TimeZone timeZone31 = dateTimeZone0.toTimeZone();
        org.junit.Assert.assertNotNull(dateTimeZone0);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+07:10:22.088" + "'", str2, "+07:10:22.088");
// flaky:         org.junit.Assert.assertTrue("'" + long4 + "' != '" + 25822120L + "'", long4 == 25822120L);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+07:10:22.088" + "'", str5, "+07:10:22.088");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 32L + "'", long7 == 32L);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+07:10:22.088" + "'", str8, "+07:10:22.088");
        org.junit.Assert.assertTrue("'" + category10 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category10.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "fran\347ais" + "'", str13, "fran\347ais");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+07:10:22.088" + "'", str15, "+07:10:22.088");
        org.junit.Assert.assertNotNull(dateTimeZone16);
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+07:10:22.088" + "'", str18, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
// flaky:         org.junit.Assert.assertTrue("'" + long27 + "' != '" + 1645629804284L + "'", long27 == 1645629804284L);
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int30 + "' != '" + 25822088 + "'", int30 == 25822088);
        org.junit.Assert.assertNotNull(timeZone31);
// flaky:         org.junit.Assert.assertEquals(timeZone31.getDisplayName(), "GMT+07:10");
    }

    @Test
    public void test10063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10063");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        org.joda.time.LocalDateTime localDateTime3 = localDateTime0.withDurationAdded(readableDuration1, (int) '#');
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.weekyear();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime3.minusMillis((-1));
        org.joda.time.LocalDateTime.Property property7 = localDateTime3.dayOfMonth();
        int int8 = property7.get();
        org.joda.time.LocalDateTime localDateTime9 = property7.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.withMinuteOfHour(0);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.plusMinutes(0);
        java.util.Date date14 = localDateTime11.toDate();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 22 + "'", int8 == 22);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(date14);
// flaky:         org.junit.Assert.assertEquals(date14.toString(), "Mon Feb 28 14:00:46 GMT 2022");
    }

    @Test
    public void test10064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10064");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.months();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology3 = localDateTime2.getChronology();
        org.joda.time.DurationField durationField4 = chronology3.weekyears();
        org.joda.time.DurationField durationField5 = chronology3.seconds();
        org.joda.time.DurationField durationField6 = chronology3.seconds();
        org.joda.time.DurationField durationField7 = chronology3.seconds();
        org.joda.time.DurationField durationField8 = chronology3.weekyears();
        boolean boolean9 = durationFieldType0.isSupported(chronology3);
        org.joda.time.DurationField durationField10 = chronology3.hours();
        org.joda.time.DateTimeField dateTimeField11 = chronology3.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField12 = chronology3.monthOfYear();
        // The following exception was thrown during execution in test generation
        try {
            long long20 = chronology3.getDateTimeMillis(9, (int) (short) 10, 52477744, 30, 0, 0, 52422796);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 30 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
    }

    @Test
    public void test10065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10065");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.millisOfDay();
        java.lang.String str5 = property4.getName();
        org.joda.time.LocalDateTime localDateTime6 = property4.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.minusHours(0);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.withDayOfYear((int) '#');
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology14 = localDateTime13.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = chronology14.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField16 = chronology14.minuteOfDay();
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((-100L), chronology14);
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime();
        org.joda.time.ReadableDuration readableDuration19 = null;
        org.joda.time.LocalDateTime localDateTime21 = localDateTime18.withDurationAdded(readableDuration19, (int) '#');
        int int22 = localDateTime21.getDayOfWeek();
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTimeField dateTimeField25 = dateTimeFieldType23.getField(chronology24);
        java.util.Locale locale27 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale28 = locale27.stripExtensions();
        java.lang.String str29 = dateTimeField25.getAsShortText(100, locale28);
        int int31 = dateTimeField25.getLeapAmount((long) (short) 100);
        java.lang.String str32 = dateTimeField25.getName();
        long long35 = dateTimeField25.add((long) (short) 1, 0);
        int int37 = dateTimeField25.get((long) 86399999);
        int int39 = dateTimeField25.get((long) ' ');
        int int41 = dateTimeField25.getMaximumValue(97L);
        long long44 = dateTimeField25.set(1645629374450L, 20);
        org.joda.time.DurationField durationField45 = dateTimeField25.getLeapDurationField();
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str48 = dateTimeZone46.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime49 = org.joda.time.LocalDateTime.now(dateTimeZone46);
        org.joda.time.LocalDateTime.Property property50 = localDateTime49.millisOfDay();
        org.joda.time.LocalDateTime localDateTime52 = localDateTime49.withYear((int) (short) 100);
        int int53 = localDateTime52.getCenturyOfEra();
        org.joda.time.ReadablePeriod readablePeriod54 = null;
        org.joda.time.LocalDateTime localDateTime56 = localDateTime52.withPeriodAdded(readablePeriod54, 10);
        org.joda.time.LocalDateTime localDateTime58 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology59 = localDateTime58.getChronology();
        org.joda.time.DateTimeField dateTimeField60 = chronology59.halfdayOfDay();
        org.joda.time.DurationField durationField61 = dateTimeField60.getRangeDurationField();
        org.joda.time.DateTimeZone dateTimeZone62 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str64 = dateTimeZone62.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime65 = org.joda.time.LocalDateTime.now(dateTimeZone62);
        org.joda.time.LocalDateTime.Property property66 = localDateTime65.millisOfDay();
        java.lang.String str67 = property66.getName();
        org.joda.time.LocalDateTime localDateTime68 = property66.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime70 = localDateTime68.plusYears((int) (short) -1);
        int[] intArray78 = new int[] { 'a', (-1), 10, 26151696, 4, (byte) 1 };
        int[] intArray80 = dateTimeField60.set((org.joda.time.ReadablePartial) localDateTime68, 0, intArray78, (int) (short) 0);
        int int81 = dateTimeField25.getMaximumValue((org.joda.time.ReadablePartial) localDateTime52, intArray78);
        chronology14.validate((org.joda.time.ReadablePartial) localDateTime21, intArray78);
        boolean boolean83 = localDateTime10.isAfter((org.joda.time.ReadablePartial) localDateTime21);
        org.joda.time.LocalDateTime.Property property84 = localDateTime21.secondOfMinute();
        org.junit.Assert.assertNotNull(dateTimeZone0);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+07:10:22.088" + "'", str2, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "millisOfDay" + "'", str5, "millisOfDay");
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "100" + "'", str29, "100");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "minuteOfDay" + "'", str32, "minuteOfDay");
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 1L + "'", long35 == 1L);
// flaky:         org.junit.Assert.assertTrue("'" + int37 + "' != '" + 430 + "'", int37 == 430);
// flaky:         org.junit.Assert.assertTrue("'" + int39 + "' != '" + 430 + "'", int39 == 430);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1439 + "'", int41 == 1439);
// flaky:         org.junit.Assert.assertTrue("'" + long44 + "' != '" + 1645549814450L + "'", long44 == 1645549814450L);
        org.junit.Assert.assertNull(durationField45);
        org.junit.Assert.assertNotNull(dateTimeZone46);
// flaky:         org.junit.Assert.assertEquals("'" + str48 + "' != '" + "+07:10:22.088" + "'", str48, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(durationField61);
        org.junit.Assert.assertNotNull(dateTimeZone62);
// flaky:         org.junit.Assert.assertEquals("'" + str64 + "' != '" + "+07:10:22.088" + "'", str64, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "millisOfDay" + "'", str67, "millisOfDay");
        org.junit.Assert.assertNotNull(localDateTime68);
        org.junit.Assert.assertNotNull(localDateTime70);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[0, 1, 10, 26151696, 4, 1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[0, 1, 10, 26151696, 4, 1]");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 1439 + "'", int81 == 1439);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(property84);
    }

    @Test
    public void test10066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10066");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology5 = localDateTime4.getChronology();
        org.joda.time.DurationField durationField6 = chronology5.weekyears();
        org.joda.time.DurationField durationField7 = chronology5.centuries();
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime((long) (byte) 0, chronology5);
        org.joda.time.DurationField durationField9 = chronology5.millis();
        org.joda.time.DateTimeField dateTimeField10 = chronology5.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField11 = chronology5.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime((long) (-997), chronology5);
        org.joda.time.DurationField durationField13 = chronology5.minutes();
        org.joda.time.DurationField durationField14 = chronology5.days();
        org.joda.time.DateTimeField dateTimeField15 = dateTimeFieldType0.getField(chronology5);
        org.joda.time.DurationField durationField16 = chronology5.minutes();
        int int19 = durationField16.getValue(3301297021000L, 59903L);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 55021617 + "'", int19 == 55021617);
    }

    @Test
    public void test10067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10067");
        org.joda.time.tz.Provider provider0 = org.joda.time.DateTimeZone.getProvider();
        org.joda.time.DateTimeZone.setProvider(provider0);
        org.joda.time.DateTimeZone.setProvider(provider0);
        org.joda.time.DateTimeZone.setProvider(provider0);
        java.util.Set<java.lang.String> strSet4 = provider0.getAvailableIDs();
        org.junit.Assert.assertNotNull(provider0);
        org.junit.Assert.assertNotNull(strSet4);
    }

    @Test
    public void test10068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10068");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.millisOfDay();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime3.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime3.plusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minusHours((int) (short) 10);
        int int11 = localDateTime8.getMinuteOfHour();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime8.minusMinutes(0);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.plusMillis(2022);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime13.plusMillis(56);
        org.joda.time.LocalDateTime.Property property18 = localDateTime17.monthOfYear();
        org.joda.time.LocalDateTime.Property property19 = localDateTime17.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str22 = dateTimeZone20.getShortName((long) (short) 10);
        long long24 = dateTimeZone20.convertUTCToLocal((long) ' ');
        java.lang.String str25 = dateTimeZone20.toString();
        long long27 = dateTimeZone20.previousTransition(32L);
        long long30 = dateTimeZone20.convertLocalToUTC(97L, false);
        java.lang.String str32 = dateTimeZone20.getShortName((long) 5);
        int int34 = dateTimeZone20.getOffsetFromLocal(5356800000L);
        org.joda.time.DateTime dateTime35 = localDateTime17.toDateTime(dateTimeZone20);
        org.joda.time.LocalDateTime.Property property36 = localDateTime17.millisOfSecond();
        org.junit.Assert.assertNotNull(dateTimeZone0);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+07:10:22.088" + "'", str2, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 33 + "'", int11 == 33);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+07:10:22.088" + "'", str22, "+07:10:22.088");
// flaky:         org.junit.Assert.assertTrue("'" + long24 + "' != '" + 25822120L + "'", long24 == 25822120L);
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "+07:10:22.088" + "'", str25, "+07:10:22.088");
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 32L + "'", long27 == 32L);
// flaky:         org.junit.Assert.assertTrue("'" + long30 + "' != '" + (-25821991L) + "'", long30 == (-25821991L));
// flaky:         org.junit.Assert.assertEquals("'" + str32 + "' != '" + "+07:10:22.088" + "'", str32, "+07:10:22.088");
// flaky:         org.junit.Assert.assertTrue("'" + int34 + "' != '" + 25822088 + "'", int34 == 25822088);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(property36);
    }

    @Test
    public void test10069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10069");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(1645629393805L);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusSeconds(2);
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.LocalDateTime localDateTime6 = localDateTime3.withDurationAdded(readableDuration4, (int) '#');
        int int7 = localDateTime3.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime3.minusMinutes(0);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime6);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 22 + "'", int7 == 22);
        org.junit.Assert.assertNotNull(localDateTime9);
    }

    @Test
    public void test10070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10070");
        java.util.Locale locale0 = java.util.Locale.CHINA;
        java.util.Set<java.lang.String> strSet1 = locale0.getUnicodeLocaleAttributes();
        java.util.Locale locale4 = new java.util.Locale("fra", "fran\347ais (Canada)");
        java.lang.String str5 = locale4.getDisplayCountry();
        java.lang.String str6 = locale4.getDisplayScript();
        java.lang.String str7 = locale0.getDisplayVariant(locale4);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str10 = dateTimeZone8.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now(dateTimeZone8);
        org.joda.time.LocalDateTime.Property property12 = localDateTime11.millisOfDay();
        org.joda.time.ReadableInstant readableInstant13 = null;
        long long14 = property12.getDifferenceAsLong(readableInstant13);
        java.util.Locale locale16 = java.util.Locale.CANADA_FRENCH;
        java.util.Set<java.lang.String> strSet17 = locale16.getUnicodeLocaleKeys();
        org.joda.time.LocalDateTime localDateTime18 = property12.setCopy("26153615", locale16);
        java.lang.String str19 = locale4.getDisplayCountry(locale16);
        java.util.Set<java.lang.String> strSet20 = locale16.getUnicodeLocaleKeys();
        java.lang.String str21 = locale16.getDisplayName();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertEquals(locale4.toString(), "fra_FRAN\347AIS (CANADA)");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "FRAN\347AIS (CANADA)" + "'", str5, "FRAN\347AIS (CANADA)");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(dateTimeZone8);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+07:10:22.088" + "'", str10, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
// flaky:         org.junit.Assert.assertTrue("'" + long14 + "' != '" + 25822088L + "'", long14 == 25822088L);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(strSet17);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "FRAN\347AIS (CANADA)" + "'", str19, "FRAN\347AIS (CANADA)");
        org.junit.Assert.assertNotNull(strSet20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "fran\347ais (Canada)" + "'", str21, "fran\347ais (Canada)");
    }

    @Test
    public void test10071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10071");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeField dateTimeField2 = dateTimeFieldType0.getField(chronology1);
        java.util.Locale.Category category4 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale5 = java.util.Locale.FRENCH;
        java.util.Locale.setDefault(category4, locale5);
        java.lang.String str7 = locale5.toLanguageTag();
        java.lang.String str8 = dateTimeField2.getAsText((long) 26149, locale5);
        long long11 = dateTimeField2.addWrapField((long) (short) 10, (-1));
        java.util.Locale.Category category13 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale14 = java.util.Locale.FRENCH;
        java.util.Locale.setDefault(category13, locale14);
        java.lang.String str16 = locale14.toLanguageTag();
        java.lang.String str17 = dateTimeField2.getAsText(26283608, locale14);
        boolean boolean19 = dateTimeField2.isLeap(1645629576168L);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = dateTimeField2.getType();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertTrue("'" + category4 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category4.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "fr" + "'", str7, "fr");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "430" + "'", str8, "430");
// flaky:         org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-59990L) + "'", long11 == (-59990L));
        org.junit.Assert.assertTrue("'" + category13 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category13.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "fr" + "'", str16, "fr");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "26283608" + "'", str17, "26283608");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
    }

    @Test
    public void test10072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10072");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.millisOfDay();
        java.lang.String str5 = property4.getName();
        org.joda.time.LocalDateTime localDateTime6 = property4.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime8 = property4.addToCopy(0L);
        java.lang.String str9 = property4.getAsString();
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime(26149500L);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minusSeconds(1439);
        int int14 = property4.compareTo((org.joda.time.ReadablePartial) localDateTime13);
        int int15 = localDateTime13.getEra();
        org.junit.Assert.assertNotNull(dateTimeZone0);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+07:10:22.088" + "'", str2, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "millisOfDay" + "'", str5, "millisOfDay");
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "52426545" + "'", str9, "52426545");
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
    }

    @Test
    public void test10073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10073");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("hours");
        double double2 = languageRange1.getWeight();
        java.lang.String str3 = languageRange1.getRange();
        double double4 = languageRange1.getWeight();
        double double5 = languageRange1.getWeight();
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.0d + "'", double2 == 1.0d);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "hours" + "'", str3, "hours");
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 1.0d + "'", double4 == 1.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
    }

    @Test
    public void test10074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10074");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DurationField durationField3 = chronology2.weekyears();
        org.joda.time.DurationField durationField4 = chronology2.centuries();
        org.joda.time.DurationField durationField5 = chronology2.minutes();
        org.joda.time.DateTimeField dateTimeField6 = chronology2.monthOfYear();
        org.joda.time.DateTimeField dateTimeField7 = chronology2.dayOfYear();
        org.joda.time.DateTimeField dateTimeField8 = chronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField9 = chronology2.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str12 = dateTimeZone10.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime13 = org.joda.time.LocalDateTime.now(dateTimeZone10);
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.millisOfDay();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime13.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime13.plusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.minusHours((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.withEra((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property23 = localDateTime22.secondOfMinute();
        java.lang.String str24 = property23.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = property23.getFieldType();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str28 = dateTimeZone26.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime29 = org.joda.time.LocalDateTime.now(dateTimeZone26);
        org.joda.time.LocalDateTime.Property property30 = localDateTime29.millisOfDay();
        org.joda.time.ReadableInstant readableInstant31 = null;
        long long32 = property30.getDifferenceAsLong(readableInstant31);
        java.util.Locale locale33 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str34 = locale33.getISO3Language();
        java.lang.String str35 = property30.getAsShortText(locale33);
        org.joda.time.DurationField durationField36 = property30.getDurationField();
        long long39 = durationField36.add((long) 1, 10);
        boolean boolean40 = durationField36.isPrecise();
        int int42 = durationField36.getValue((long) 26149500);
        int int45 = durationField36.getValue((long) (short) 10, 0L);
        long long48 = durationField36.add((long) 'a', (long) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType49 = durationField36.getType();
        org.joda.time.DurationFieldType durationFieldType50 = org.joda.time.DurationFieldType.days();
        org.joda.time.LocalDateTime localDateTime52 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology53 = localDateTime52.getChronology();
        org.joda.time.DurationField durationField54 = chronology53.hours();
        org.joda.time.DurationField durationField55 = durationFieldType50.getField(chronology53);
        org.joda.time.DateTimeField dateTimeField56 = chronology53.hourOfHalfday();
        org.joda.time.DurationField durationField57 = chronology53.weeks();
        boolean boolean58 = durationFieldType49.isSupported(chronology53);
        org.joda.time.DateTimeField dateTimeField59 = chronology53.secondOfDay();
        org.joda.time.DateTimeField dateTimeField60 = dateTimeFieldType25.getField(chronology53);
        org.joda.time.LocalDateTime localDateTime62 = new org.joda.time.LocalDateTime();
        org.joda.time.ReadableDuration readableDuration63 = null;
        org.joda.time.LocalDateTime localDateTime65 = localDateTime62.withDurationAdded(readableDuration63, (int) '#');
        org.joda.time.LocalDateTime.Property property66 = localDateTime65.weekyear();
        int int67 = property66.getMaximumValue();
        org.joda.time.DateTimeField dateTimeField68 = property66.getField();
        org.joda.time.DateTimeZone dateTimeZone69 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str71 = dateTimeZone69.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime72 = org.joda.time.LocalDateTime.now(dateTimeZone69);
        org.joda.time.LocalDateTime.Property property73 = localDateTime72.millisOfDay();
        org.joda.time.LocalDateTime localDateTime75 = localDateTime72.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime77 = localDateTime72.plusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime79 = localDateTime77.minusHours((int) (short) 10);
        int int80 = dateTimeField68.getMinimumValue((org.joda.time.ReadablePartial) localDateTime79);
        java.util.Locale locale82 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str83 = dateTimeField68.getAsShortText((long) 15, locale82);
        java.util.Locale locale85 = java.util.Locale.GERMAN;
        java.util.Locale.setDefault(locale85);
        java.lang.String str87 = dateTimeField68.getAsText(1654010160000L, locale85);
        java.lang.String str88 = dateTimeField60.getAsShortText(19046, locale85);
        int int89 = dateTimeField9.getMaximumTextLength(locale85);
        java.lang.String str90 = locale85.getISO3Language();
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+07:10:22.088" + "'", str12, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Property[secondOfMinute]" + "'", str24, "Property[secondOfMinute]");
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertNotNull(dateTimeZone26);
// flaky:         org.junit.Assert.assertEquals("'" + str28 + "' != '" + "+07:10:22.088" + "'", str28, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(property30);
// flaky:         org.junit.Assert.assertTrue("'" + long32 + "' != '" + 25822088L + "'", long32 == 25822088L);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "fra" + "'", str34, "fra");
// flaky:         org.junit.Assert.assertEquals("'" + str35 + "' != '" + "52426561" + "'", str35, "52426561");
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 11L + "'", long39 == 11L);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 26149500 + "'", int42 == 26149500);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 10 + "'", int45 == 10);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 197L + "'", long48 == 197L);
        org.junit.Assert.assertNotNull(durationFieldType49);
        org.junit.Assert.assertNotNull(durationFieldType50);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(durationField54);
        org.junit.Assert.assertNotNull(durationField55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(durationField57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 292278993 + "'", int67 == 292278993);
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertNotNull(dateTimeZone69);
// flaky:         org.junit.Assert.assertEquals("'" + str71 + "' != '" + "+07:10:22.088" + "'", str71, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime72);
        org.junit.Assert.assertNotNull(property73);
        org.junit.Assert.assertNotNull(localDateTime75);
        org.junit.Assert.assertNotNull(localDateTime77);
        org.junit.Assert.assertNotNull(localDateTime79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + (-292275054) + "'", int80 == (-292275054));
        org.junit.Assert.assertNotNull(locale82);
        org.junit.Assert.assertEquals(locale82.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "1970" + "'", str83, "1970");
        org.junit.Assert.assertNotNull(locale85);
        org.junit.Assert.assertEquals(locale85.toString(), "de");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "2022" + "'", str87, "2022");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "19046" + "'", str88, "19046");
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 2 + "'", int89 == 2);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "deu" + "'", str90, "deu");
    }

    @Test
    public void test10075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10075");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(100L);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusSeconds(9);
        org.joda.time.LocalDateTime.Property property5 = localDateTime1.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime1.withCenturyOfEra(2);
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.LocalDateTime.Property property9 = localDateTime7.property(dateTimeFieldType8);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str12 = dateTimeZone10.getShortName((long) (short) 10);
        long long14 = dateTimeZone10.convertUTCToLocal((long) ' ');
        java.lang.String str15 = dateTimeZone10.toString();
        boolean boolean17 = dateTimeZone10.equals((java.lang.Object) (short) 100);
        java.util.Locale locale19 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str20 = dateTimeZone10.getShortName((long) (-1), locale19);
        org.joda.time.DateTime dateTime21 = localDateTime7.toDateTime(dateTimeZone10);
        java.lang.String str23 = dateTimeZone10.getNameKey(1645629365489L);
        int int25 = dateTimeZone10.getStandardOffset(0L);
        int int27 = dateTimeZone10.getStandardOffset(1151828812800052L);
        java.util.TimeZone timeZone28 = dateTimeZone10.toTimeZone();
        int int30 = timeZone28.getOffset(1645629559517L);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+07:10:22.088" + "'", str12, "+07:10:22.088");
// flaky:         org.junit.Assert.assertTrue("'" + long14 + "' != '" + 25822120L + "'", long14 == 25822120L);
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+07:10:22.088" + "'", str15, "+07:10:22.088");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "fr_CA");
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+07:10:22.088" + "'", str20, "+07:10:22.088");
        org.junit.Assert.assertNotNull(dateTime21);
// flaky:         org.junit.Assert.assertNull(str23);
// flaky:         org.junit.Assert.assertTrue("'" + int25 + "' != '" + 25822088 + "'", int25 == 25822088);
// flaky:         org.junit.Assert.assertTrue("'" + int27 + "' != '" + 25822088 + "'", int27 == 25822088);
        org.junit.Assert.assertNotNull(timeZone28);
// flaky:         org.junit.Assert.assertEquals(timeZone28.getDisplayName(), "GMT+07:10");
// flaky:         org.junit.Assert.assertTrue("'" + int30 + "' != '" + 25822088 + "'", int30 == 25822088);
    }

    @Test
    public void test10076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10076");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) 'a');
        java.lang.String str3 = dateTimeZone1.getShortName((long) 86399999);
        java.util.Locale locale8 = new java.util.Locale("26153811", "3", "");
        java.util.Locale locale9 = locale8.stripExtensions();
        java.lang.String str10 = dateTimeZone1.getShortName(102L, locale9);
        int int12 = dateTimeZone1.getStandardOffset(1649647016055L);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str15 = dateTimeZone13.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime16 = org.joda.time.LocalDateTime.now(dateTimeZone13);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = localDateTime16.getFieldType((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime16.minusMonths(0);
        int int21 = localDateTime20.getHourOfDay();
        int int22 = localDateTime20.getWeekOfWeekyear();
        int int23 = localDateTime20.size();
        boolean boolean24 = dateTimeZone1.isLocalDateTimeGap(localDateTime20);
        long long26 = dateTimeZone1.previousTransition(1645629465394L);
        long long29 = dateTimeZone1.convertLocalToUTC(1645629749933L, false);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+00:00:00.097" + "'", str3, "+00:00:00.097");
        org.junit.Assert.assertEquals(locale8.toString(), "26153811_3");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "26153811_3");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+00:00:00.097" + "'", str10, "+00:00:00.097");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 97 + "'", int12 == 97);
        org.junit.Assert.assertNotNull(dateTimeZone13);
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+07:10:22.088" + "'", str15, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(localDateTime20);
// flaky:         org.junit.Assert.assertTrue("'" + int21 + "' != '" + 14 + "'", int21 == 14);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 8 + "'", int22 == 8);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 4 + "'", int23 == 4);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1645629465394L + "'", long26 == 1645629465394L);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 1645629749836L + "'", long29 == 1645629749836L);
    }

    @Test
    public void test10077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10077");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.millisOfDay();
        org.joda.time.DurationFieldType durationFieldType5 = org.joda.time.DurationFieldType.centuries();
        boolean boolean6 = localDateTime3.equals((java.lang.Object) durationFieldType5);
        org.joda.time.LocalDateTime.Property property7 = localDateTime3.centuryOfEra();
        org.joda.time.LocalDateTime.Property property8 = localDateTime3.dayOfWeek();
        org.junit.Assert.assertNotNull(dateTimeZone0);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+07:10:22.088" + "'", str2, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(durationFieldType5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(property8);
    }

    @Test
    public void test10078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10078");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        org.joda.time.LocalDateTime localDateTime3 = localDateTime0.withDurationAdded(readableDuration1, (int) '#');
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.weekyear();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime3.minusMillis((-1));
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str9 = dateTimeZone7.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime10 = org.joda.time.LocalDateTime.now(dateTimeZone7);
        org.joda.time.LocalDateTime.Property property11 = localDateTime10.millisOfDay();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime10.withYear((int) (short) 100);
        java.lang.String str14 = localDateTime13.toString();
        boolean boolean15 = localDateTime3.isAfter((org.joda.time.ReadablePartial) localDateTime13);
        java.util.Locale locale16 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet17 = locale16.getUnicodeLocaleAttributes();
        java.lang.Object[] objArray18 = strSet17.toArray();
        boolean boolean19 = strSet17.isEmpty();
        java.util.Locale locale20 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet21 = locale20.getUnicodeLocaleAttributes();
        java.lang.Object[] objArray22 = strSet21.toArray();
        java.util.Locale locale23 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet24 = locale23.getUnicodeLocaleAttributes();
        boolean boolean25 = strSet21.removeAll((java.util.Collection<java.lang.String>) strSet24);
        java.util.Locale locale26 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet27 = locale26.getUnicodeLocaleAttributes();
        org.joda.time.DurationFieldType durationFieldType28 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.DurationFieldType durationFieldType29 = org.joda.time.DurationFieldType.hours();
        org.joda.time.DurationFieldType[] durationFieldTypeArray30 = new org.joda.time.DurationFieldType[] { durationFieldType28, durationFieldType29 };
        org.joda.time.DurationFieldType[] durationFieldTypeArray31 = strSet27.toArray(durationFieldTypeArray30);
        boolean boolean32 = strSet21.containsAll((java.util.Collection<java.lang.String>) strSet27);
        java.lang.Object[] objArray33 = strSet27.toArray();
        boolean boolean34 = strSet17.removeAll((java.util.Collection<java.lang.String>) strSet27);
        java.util.Locale locale35 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet36 = locale35.getUnicodeLocaleAttributes();
        java.lang.Object[] objArray37 = strSet36.toArray();
        java.util.Locale locale38 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet39 = locale38.getUnicodeLocaleAttributes();
        boolean boolean40 = strSet36.removeAll((java.util.Collection<java.lang.String>) strSet39);
        java.util.Locale locale41 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet42 = locale41.getUnicodeLocaleAttributes();
        org.joda.time.DurationFieldType durationFieldType43 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.DurationFieldType durationFieldType44 = org.joda.time.DurationFieldType.hours();
        org.joda.time.DurationFieldType[] durationFieldTypeArray45 = new org.joda.time.DurationFieldType[] { durationFieldType43, durationFieldType44 };
        org.joda.time.DurationFieldType[] durationFieldTypeArray46 = strSet42.toArray(durationFieldTypeArray45);
        boolean boolean47 = strSet36.containsAll((java.util.Collection<java.lang.String>) strSet42);
        java.util.Locale locale48 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet49 = locale48.getUnicodeLocaleAttributes();
        java.lang.Object[] objArray50 = strSet49.toArray();
        java.util.Locale locale51 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet52 = locale51.getUnicodeLocaleAttributes();
        boolean boolean53 = strSet49.removeAll((java.util.Collection<java.lang.String>) strSet52);
        java.util.Locale locale54 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet55 = locale54.getUnicodeLocaleAttributes();
        org.joda.time.DurationFieldType durationFieldType56 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.DurationFieldType durationFieldType57 = org.joda.time.DurationFieldType.hours();
        org.joda.time.DurationFieldType[] durationFieldTypeArray58 = new org.joda.time.DurationFieldType[] { durationFieldType56, durationFieldType57 };
        org.joda.time.DurationFieldType[] durationFieldTypeArray59 = strSet55.toArray(durationFieldTypeArray58);
        boolean boolean60 = strSet49.containsAll((java.util.Collection<java.lang.String>) strSet55);
        java.lang.Object[] objArray61 = strSet55.toArray();
        boolean boolean62 = strSet36.retainAll((java.util.Collection<java.lang.String>) strSet55);
        boolean boolean63 = strSet27.addAll((java.util.Collection<java.lang.String>) strSet55);
        org.joda.time.DateTimeFieldType dateTimeFieldType64 = org.joda.time.DateTimeFieldType.yearOfEra();
        boolean boolean65 = strSet55.remove((java.lang.Object) dateTimeFieldType64);
        org.joda.time.LocalDateTime.Property property66 = localDateTime3.property(dateTimeFieldType64);
        org.joda.time.ReadableDuration readableDuration67 = null;
        org.joda.time.LocalDateTime localDateTime68 = localDateTime3.minus(readableDuration67);
        org.joda.time.LocalDateTime localDateTime70 = localDateTime3.withWeekyear(10);
        org.joda.time.LocalDateTime.Property property71 = localDateTime3.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration72 = null;
        org.joda.time.LocalDateTime localDateTime74 = localDateTime3.withDurationAdded(readableDuration72, 26428);
        org.joda.time.LocalDateTime.Property property75 = localDateTime74.dayOfYear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime77 = property75.setCopy("2022-02-22T07:17:11.189");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2022-02-22T07:17:11.189\" for dayOfYear is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+07:10:22.088" + "'", str9, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDateTime13);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "0100-02-22T14:33:46.630" + "'", str14, "0100-02-22T14:33:46.630");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "");
        org.junit.Assert.assertNotNull(strSet17);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "");
        org.junit.Assert.assertNotNull(strSet21);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[]");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "");
        org.junit.Assert.assertNotNull(strSet24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "");
        org.junit.Assert.assertNotNull(strSet27);
        org.junit.Assert.assertNotNull(durationFieldType28);
        org.junit.Assert.assertNotNull(durationFieldType29);
        org.junit.Assert.assertNotNull(durationFieldTypeArray30);
        org.junit.Assert.assertNotNull(durationFieldTypeArray31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "");
        org.junit.Assert.assertNotNull(strSet36);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[]");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "");
        org.junit.Assert.assertNotNull(strSet39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "");
        org.junit.Assert.assertNotNull(strSet42);
        org.junit.Assert.assertNotNull(durationFieldType43);
        org.junit.Assert.assertNotNull(durationFieldType44);
        org.junit.Assert.assertNotNull(durationFieldTypeArray45);
        org.junit.Assert.assertNotNull(durationFieldTypeArray46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "");
        org.junit.Assert.assertNotNull(strSet49);
        org.junit.Assert.assertNotNull(objArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[]");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "");
        org.junit.Assert.assertNotNull(strSet52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "");
        org.junit.Assert.assertNotNull(strSet55);
        org.junit.Assert.assertNotNull(durationFieldType56);
        org.junit.Assert.assertNotNull(durationFieldType57);
        org.junit.Assert.assertNotNull(durationFieldTypeArray58);
        org.junit.Assert.assertNotNull(durationFieldTypeArray59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(objArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray61), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray61), "[]");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertNotNull(localDateTime68);
        org.junit.Assert.assertNotNull(localDateTime70);
        org.junit.Assert.assertNotNull(property71);
        org.junit.Assert.assertNotNull(localDateTime74);
        org.junit.Assert.assertNotNull(property75);
    }

    @Test
    public void test10079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10079");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(100L);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusSeconds(9);
        org.joda.time.LocalDateTime.Property property5 = localDateTime1.weekyear();
        java.lang.String str6 = property5.getAsShortText();
        java.lang.String str7 = property5.getAsText();
        org.joda.time.DurationField durationField8 = property5.getRangeDurationField();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "1970" + "'", str6, "1970");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1970" + "'", str7, "1970");
        org.junit.Assert.assertNull(durationField8);
    }

    @Test
    public void test10080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10080");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.millisOfDay();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime3.plusMonths((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.minusHours((int) '4');
        org.joda.time.LocalDateTime.Property property9 = localDateTime8.era();
        int int10 = property9.getMaximumValueOverall();
        org.joda.time.LocalDateTime localDateTime11 = property9.withMinimumValue();
        int int12 = property9.getMaximumValue();
        org.junit.Assert.assertNotNull(dateTimeZone0);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+07:10:22.088" + "'", str2, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
    }

    @Test
    public void test10081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10081");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        org.joda.time.LocalDateTime localDateTime3 = localDateTime0.withDurationAdded(readableDuration1, (int) '#');
        org.joda.time.LocalDateTime.Property property4 = localDateTime0.era();
        int int5 = localDateTime0.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime0.withWeekOfWeekyear((int) (byte) 1);
        int int8 = localDateTime0.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime0.plusDays(500);
        org.joda.time.DurationFieldType durationFieldType11 = org.joda.time.DurationFieldType.days();
        java.lang.String str12 = durationFieldType11.toString();
        boolean boolean13 = localDateTime10.isSupported(durationFieldType11);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology17 = localDateTime16.getChronology();
        org.joda.time.DurationField durationField18 = chronology17.weekyears();
        boolean boolean19 = dateTimeFieldType14.isSupported(chronology17);
        org.joda.time.DurationField durationField20 = durationFieldType11.getField(chronology17);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        long long24 = chronology17.add(readablePeriod21, (long) 27427155, (int) (byte) 0);
        org.joda.time.DurationField durationField25 = chronology17.hours();
        org.joda.time.DateTimeField dateTimeField26 = chronology17.weekyearOfCentury();
        org.joda.time.DurationField durationField27 = chronology17.centuries();
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology30 = localDateTime29.getChronology();
        org.joda.time.DurationField durationField31 = chronology30.weekyears();
        org.joda.time.DurationField durationField32 = chronology30.seconds();
        org.joda.time.DurationField durationField33 = chronology30.seconds();
        org.joda.time.DurationField durationField34 = chronology30.millis();
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology38 = localDateTime37.getChronology();
        org.joda.time.DurationField durationField39 = chronology38.weekyears();
        boolean boolean40 = dateTimeFieldType35.isSupported(chronology38);
        org.joda.time.DateTimeField dateTimeField41 = chronology38.halfdayOfDay();
        org.joda.time.DurationField durationField42 = chronology38.millis();
        org.joda.time.DateTimeZone dateTimeZone43 = chronology38.getZone();
        org.joda.time.Chronology chronology44 = chronology30.withZone(dateTimeZone43);
        org.joda.time.Chronology chronology45 = chronology17.withZone(dateTimeZone43);
        org.joda.time.DateTimeField dateTimeField46 = chronology45.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField47 = chronology45.yearOfCentury();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 22 + "'", int5 == 22);
        org.junit.Assert.assertNotNull(localDateTime7);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 14 + "'", int8 == 14);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(durationFieldType11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "days" + "'", str12, "days");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 27427155L + "'", long24 == 27427155L);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(dateTimeFieldType35);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(dateTimeField47);
    }

    @Test
    public void test10082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10082");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("0100-02-22T07:17:37.650");
        java.lang.Class<?> wildcardClass2 = timeZone1.getClass();
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Greenwich Zeit");
        org.junit.Assert.assertNotNull(wildcardClass2);
    }

    @Test
    public void test10083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10083");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        java.lang.String str2 = localDateTime1.toString();
        int int3 = localDateTime1.getCenturyOfEra();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.minusMonths(2);
        org.joda.time.LocalDateTime.Property property6 = localDateTime5.millisOfSecond();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.LocalDateTime localDateTime9 = localDateTime5.withPeriodAdded(readablePeriod7, 56);
        org.joda.time.LocalDateTime.Property property10 = localDateTime9.weekyear();
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.LocalDateTime localDateTime12 = localDateTime9.plus(readablePeriod11);
        org.joda.time.Chronology chronology13 = localDateTime9.getChronology();
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((long) 86, chronology13);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "2022-02-22T14:33:46.721" + "'", str2, "2022-02-22T14:33:46.721");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 20 + "'", int3 == 20);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(chronology13);
    }

    @Test
    public void test10084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10084");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.millisOfDay();
        org.joda.time.LocalDateTime localDateTime6 = property4.addToCopy(500);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.withYearOfEra(16);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.LocalDateTime localDateTime11 = localDateTime6.withPeriodAdded(readablePeriod9, 27427155);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minusDays(70);
        int int14 = localDateTime11.getWeekOfWeekyear();
        org.joda.time.LocalDateTime.Property property15 = localDateTime11.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime16 = property15.roundFloorCopy();
        org.junit.Assert.assertNotNull(dateTimeZone0);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+07:10:22.088" + "'", str2, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 8 + "'", int14 == 8);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDateTime16);
    }

    @Test
    public void test10085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10085");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.millisOfDay();
        org.joda.time.DurationFieldType durationFieldType5 = org.joda.time.DurationFieldType.centuries();
        boolean boolean6 = localDateTime3.equals((java.lang.Object) durationFieldType5);
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology9 = localDateTime8.getChronology();
        org.joda.time.DurationField durationField10 = chronology9.weekyears();
        org.joda.time.DateTimeField dateTimeField11 = chronology9.minuteOfDay();
        org.joda.time.DurationField durationField12 = durationFieldType5.getField(chronology9);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str15 = dateTimeZone13.getShortName((long) (short) 10);
        long long17 = dateTimeZone13.convertUTCToLocal((long) ' ');
        java.lang.String str18 = dateTimeZone13.toString();
        long long21 = dateTimeZone13.adjustOffset((long) (short) 100, false);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone13);
        org.joda.time.Chronology chronology23 = chronology9.withZone(dateTimeZone13);
        org.joda.time.DateTimeField dateTimeField24 = chronology9.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField25 = chronology9.dayOfMonth();
        org.joda.time.DurationField durationField26 = chronology9.minutes();
        org.junit.Assert.assertNotNull(dateTimeZone0);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+07:10:22.088" + "'", str2, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(durationFieldType5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeZone13);
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+07:10:22.088" + "'", str15, "+07:10:22.088");
// flaky:         org.junit.Assert.assertTrue("'" + long17 + "' != '" + 25822120L + "'", long17 == 25822120L);
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+07:10:22.088" + "'", str18, "+07:10:22.088");
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 100L + "'", long21 == 100L);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(durationField26);
    }

    @Test
    public void test10086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10086");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.millisOfDay();
        java.lang.String str5 = property4.getName();
        org.joda.time.LocalDateTime localDateTime6 = property4.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.minusHours(0);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.withDayOfYear((int) '#');
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology14 = localDateTime13.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = chronology14.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField16 = chronology14.minuteOfDay();
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((-100L), chronology14);
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime();
        org.joda.time.ReadableDuration readableDuration19 = null;
        org.joda.time.LocalDateTime localDateTime21 = localDateTime18.withDurationAdded(readableDuration19, (int) '#');
        int int22 = localDateTime21.getDayOfWeek();
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTimeField dateTimeField25 = dateTimeFieldType23.getField(chronology24);
        java.util.Locale locale27 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale28 = locale27.stripExtensions();
        java.lang.String str29 = dateTimeField25.getAsShortText(100, locale28);
        int int31 = dateTimeField25.getLeapAmount((long) (short) 100);
        java.lang.String str32 = dateTimeField25.getName();
        long long35 = dateTimeField25.add((long) (short) 1, 0);
        int int37 = dateTimeField25.get((long) 86399999);
        int int39 = dateTimeField25.get((long) ' ');
        int int41 = dateTimeField25.getMaximumValue(97L);
        long long44 = dateTimeField25.set(1645629374450L, 20);
        org.joda.time.DurationField durationField45 = dateTimeField25.getLeapDurationField();
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str48 = dateTimeZone46.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime49 = org.joda.time.LocalDateTime.now(dateTimeZone46);
        org.joda.time.LocalDateTime.Property property50 = localDateTime49.millisOfDay();
        org.joda.time.LocalDateTime localDateTime52 = localDateTime49.withYear((int) (short) 100);
        int int53 = localDateTime52.getCenturyOfEra();
        org.joda.time.ReadablePeriod readablePeriod54 = null;
        org.joda.time.LocalDateTime localDateTime56 = localDateTime52.withPeriodAdded(readablePeriod54, 10);
        org.joda.time.LocalDateTime localDateTime58 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology59 = localDateTime58.getChronology();
        org.joda.time.DateTimeField dateTimeField60 = chronology59.halfdayOfDay();
        org.joda.time.DurationField durationField61 = dateTimeField60.getRangeDurationField();
        org.joda.time.DateTimeZone dateTimeZone62 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str64 = dateTimeZone62.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime65 = org.joda.time.LocalDateTime.now(dateTimeZone62);
        org.joda.time.LocalDateTime.Property property66 = localDateTime65.millisOfDay();
        java.lang.String str67 = property66.getName();
        org.joda.time.LocalDateTime localDateTime68 = property66.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime70 = localDateTime68.plusYears((int) (short) -1);
        int[] intArray78 = new int[] { 'a', (-1), 10, 26151696, 4, (byte) 1 };
        int[] intArray80 = dateTimeField60.set((org.joda.time.ReadablePartial) localDateTime68, 0, intArray78, (int) (short) 0);
        int int81 = dateTimeField25.getMaximumValue((org.joda.time.ReadablePartial) localDateTime52, intArray78);
        chronology14.validate((org.joda.time.ReadablePartial) localDateTime21, intArray78);
        boolean boolean83 = localDateTime10.isAfter((org.joda.time.ReadablePartial) localDateTime21);
        org.joda.time.LocalDateTime localDateTime85 = localDateTime10.withWeekyear(0);
        org.joda.time.ReadableDuration readableDuration86 = null;
        org.joda.time.LocalDateTime localDateTime87 = localDateTime10.minus(readableDuration86);
        org.junit.Assert.assertNotNull(dateTimeZone0);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+07:10:22.088" + "'", str2, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "millisOfDay" + "'", str5, "millisOfDay");
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "100" + "'", str29, "100");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "minuteOfDay" + "'", str32, "minuteOfDay");
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 1L + "'", long35 == 1L);
// flaky:         org.junit.Assert.assertTrue("'" + int37 + "' != '" + 430 + "'", int37 == 430);
// flaky:         org.junit.Assert.assertTrue("'" + int39 + "' != '" + 430 + "'", int39 == 430);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1439 + "'", int41 == 1439);
// flaky:         org.junit.Assert.assertTrue("'" + long44 + "' != '" + 1645549814450L + "'", long44 == 1645549814450L);
        org.junit.Assert.assertNull(durationField45);
        org.junit.Assert.assertNotNull(dateTimeZone46);
// flaky:         org.junit.Assert.assertEquals("'" + str48 + "' != '" + "+07:10:22.088" + "'", str48, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(durationField61);
        org.junit.Assert.assertNotNull(dateTimeZone62);
// flaky:         org.junit.Assert.assertEquals("'" + str64 + "' != '" + "+07:10:22.088" + "'", str64, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "millisOfDay" + "'", str67, "millisOfDay");
        org.junit.Assert.assertNotNull(localDateTime68);
        org.junit.Assert.assertNotNull(localDateTime70);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[0, 1, 10, 26151696, 4, 1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[0, 1, 10, 26151696, 4, 1]");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 1439 + "'", int81 == 1439);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(localDateTime85);
        org.junit.Assert.assertNotNull(localDateTime87);
    }

    @Test
    public void test10087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10087");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.millisOfDay();
        org.joda.time.DurationFieldType durationFieldType5 = org.joda.time.DurationFieldType.centuries();
        boolean boolean6 = localDateTime3.equals((java.lang.Object) durationFieldType5);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime3.withWeekOfWeekyear((int) (byte) 10);
        int int9 = localDateTime8.getDayOfYear();
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.LocalDateTime localDateTime11 = localDateTime8.plus(readablePeriod10);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.withYearOfEra(69);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime11.minusMonths(72);
        org.junit.Assert.assertNotNull(dateTimeZone0);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+07:10:22.088" + "'", str2, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(durationFieldType5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 67 + "'", int9 == 67);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
    }

    @Test
    public void test10088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10088");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.addUnicodeLocaleAttribute("und");
        java.util.Locale.Builder builder3 = builder2.clear();
        java.util.Locale.Builder builder5 = builder2.setRegion("");
        java.util.Locale.Builder builder6 = builder2.clear();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test10089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10089");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DurationField durationField3 = chronology2.weekyears();
        org.joda.time.DurationField durationField4 = chronology2.centuries();
        org.joda.time.DurationField durationField5 = chronology2.minutes();
        org.joda.time.DateTimeField dateTimeField6 = chronology2.monthOfYear();
        org.joda.time.DurationField durationField7 = chronology2.months();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str10 = dateTimeZone8.getShortName((long) (short) 10);
        long long12 = dateTimeZone8.convertUTCToLocal((long) ' ');
        java.lang.String str13 = dateTimeZone8.toString();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone8);
        org.joda.time.Chronology chronology15 = chronology2.withZone(dateTimeZone8);
        long long17 = dateTimeZone8.nextTransition(1645629409296L);
        org.joda.time.LocalDateTime localDateTime18 = org.joda.time.LocalDateTime.now(dateTimeZone8);
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime();
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.LocalDateTime localDateTime22 = localDateTime19.withDurationAdded(readableDuration20, (int) '#');
        org.joda.time.LocalDateTime.Property property23 = localDateTime19.secondOfMinute();
        int int24 = localDateTime19.getSecondOfMinute();
        org.joda.time.LocalDateTime localDateTime26 = localDateTime19.minusMinutes(69);
        int int27 = localDateTime19.getEra();
        int int28 = localDateTime18.compareTo((org.joda.time.ReadablePartial) localDateTime19);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+07:10:22.088" + "'", str10, "+07:10:22.088");
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + 25822120L + "'", long12 == 25822120L);
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+07:10:22.088" + "'", str13, "+07:10:22.088");
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1645629409296L + "'", long17 == 1645629409296L);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(property23);
// flaky:         org.junit.Assert.assertTrue("'" + int24 + "' != '" + 46 + "'", int24 == 46);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
    }

    @Test
    public void test10090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10090");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(100L);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusSeconds(9);
        org.joda.time.LocalDateTime.Property property5 = localDateTime1.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime1.withCenturyOfEra(2);
        org.joda.time.LocalDateTime.Property property8 = localDateTime1.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime();
        java.lang.String str10 = localDateTime9.toString();
        int int11 = localDateTime9.getCenturyOfEra();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime9.minusMonths(2);
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str17 = dateTimeZone15.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime18 = org.joda.time.LocalDateTime.now(dateTimeZone15);
        org.joda.time.LocalDateTime.Property property19 = localDateTime18.millisOfDay();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime18.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime18.plusHours((int) ' ');
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.DateTime dateTime25 = localDateTime23.toDateTime(readableInstant24);
        long long26 = dateTime25.getMillis();
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str29 = dateTimeZone27.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime30 = org.joda.time.LocalDateTime.now(dateTimeZone27);
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = localDateTime30.getFieldType((int) (short) 0);
        boolean boolean33 = dateTime25.isSupported(dateTimeFieldType32);
        org.joda.time.DateTime dateTime34 = localDateTime13.toDateTime((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.LocalDateTime.Property property35 = localDateTime13.dayOfMonth();
        int int36 = property35.getMinimumValue();
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime();
        java.lang.String str38 = localDateTime37.toString();
        int int39 = localDateTime37.getCenturyOfEra();
        org.joda.time.LocalDateTime localDateTime41 = localDateTime37.minusMonths(2);
        org.joda.time.LocalDateTime.Property property42 = localDateTime41.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str45 = dateTimeZone43.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime46 = org.joda.time.LocalDateTime.now(dateTimeZone43);
        org.joda.time.LocalDateTime.Property property47 = localDateTime46.millisOfDay();
        org.joda.time.LocalDateTime localDateTime49 = localDateTime46.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime51 = localDateTime46.plusHours((int) ' ');
        org.joda.time.ReadableInstant readableInstant52 = null;
        org.joda.time.DateTime dateTime53 = localDateTime51.toDateTime(readableInstant52);
        long long54 = dateTime53.getMillis();
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str57 = dateTimeZone55.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime58 = org.joda.time.LocalDateTime.now(dateTimeZone55);
        org.joda.time.DateTimeFieldType dateTimeFieldType60 = localDateTime58.getFieldType((int) (short) 0);
        boolean boolean61 = dateTime53.isSupported(dateTimeFieldType60);
        org.joda.time.DateTime dateTime62 = localDateTime41.toDateTime((org.joda.time.ReadableInstant) dateTime53);
        long long63 = property35.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime62);
        long long64 = property8.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime62);
        org.joda.time.LocalDateTime localDateTime65 = new org.joda.time.LocalDateTime();
        org.joda.time.ReadableDuration readableDuration66 = null;
        org.joda.time.LocalDateTime localDateTime68 = localDateTime65.withDurationAdded(readableDuration66, (int) '#');
        org.joda.time.LocalDateTime.Property property69 = localDateTime65.secondOfMinute();
        int int70 = localDateTime65.getSecondOfMinute();
        org.joda.time.LocalDateTime localDateTime72 = localDateTime65.minusMinutes(69);
        org.joda.time.LocalDateTime localDateTime74 = localDateTime65.minusMillis(18);
        int int75 = property8.compareTo((org.joda.time.ReadablePartial) localDateTime74);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "2022-02-22T14:33:46.913" + "'", str10, "2022-02-22T14:33:46.913");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 20 + "'", int11 == 20);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+07:10:22.088" + "'", str17, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
// flaky:         org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1645629804825L + "'", long26 == 1645629804825L);
        org.junit.Assert.assertNotNull(dateTimeZone27);
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "+07:10:22.088" + "'", str29, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(dateTimeFieldType32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
// flaky:         org.junit.Assert.assertEquals("'" + str38 + "' != '" + "2022-02-22T14:33:46.913" + "'", str38, "2022-02-22T14:33:46.913");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 20 + "'", int39 == 20);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(dateTimeZone43);
// flaky:         org.junit.Assert.assertEquals("'" + str45 + "' != '" + "+07:10:22.088" + "'", str45, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(dateTime53);
// flaky:         org.junit.Assert.assertTrue("'" + long54 + "' != '" + 1645629804825L + "'", long54 == 1645629804825L);
        org.junit.Assert.assertNotNull(dateTimeZone55);
// flaky:         org.junit.Assert.assertEquals("'" + str57 + "' != '" + "+07:10:22.088" + "'", str57, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(dateTimeFieldType60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 0L + "'", long63 == 0L);
// flaky:         org.junit.Assert.assertTrue("'" + long64 + "' != '" + (-1640131982L) + "'", long64 == (-1640131982L));
        org.junit.Assert.assertNotNull(localDateTime68);
        org.junit.Assert.assertNotNull(property69);
// flaky:         org.junit.Assert.assertTrue("'" + int70 + "' != '" + 46 + "'", int70 == 46);
        org.junit.Assert.assertNotNull(localDateTime72);
        org.junit.Assert.assertNotNull(localDateTime74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-1) + "'", int75 == (-1));
    }

    @Test
    public void test10091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10091");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.millisOfDay();
        java.lang.String str5 = property4.getName();
        int int6 = property4.getMaximumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = property4.getFieldType();
        org.joda.time.LocalDateTime localDateTime8 = property4.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime9 = property4.roundFloorCopy();
        org.joda.time.LocalDateTime localDateTime11 = property4.addToCopy(1908343039481L);
        org.joda.time.LocalDateTime localDateTime13 = property4.addToCopy((-74790L));
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime();
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.LocalDateTime localDateTime17 = localDateTime14.withDurationAdded(readableDuration15, (int) '#');
        org.joda.time.LocalDateTime.Property property18 = localDateTime17.weekyear();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime17.minusMillis((-1));
        java.util.Locale locale22 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale23 = locale22.stripExtensions();
        java.lang.String str24 = locale22.getVariant();
        java.lang.String str25 = localDateTime20.toString("26149261", locale22);
        org.joda.time.DateTime dateTime26 = localDateTime20.toDateTime();
        java.lang.String str27 = dateTime26.toString();
        org.joda.time.DateTimeZone dateTimeZone28 = dateTime26.getZone();
        java.lang.String str29 = dateTime26.toString();
        int int30 = property4.getDifference((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str33 = dateTimeZone31.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime34 = org.joda.time.LocalDateTime.now(dateTimeZone31);
        org.joda.time.LocalDateTime.Property property35 = localDateTime34.millisOfDay();
        org.joda.time.LocalDateTime localDateTime37 = localDateTime34.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime34.plusHours((int) ' ');
        org.joda.time.ReadableInstant readableInstant40 = null;
        org.joda.time.DateTime dateTime41 = localDateTime39.toDateTime(readableInstant40);
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str44 = dateTimeZone42.getShortName((long) (short) 10);
        long long46 = dateTimeZone42.convertUTCToLocal((long) ' ');
        java.lang.String str47 = dateTimeZone42.toString();
        long long49 = dateTimeZone42.previousTransition(32L);
        long long52 = dateTimeZone42.convertLocalToUTC(97L, false);
        boolean boolean53 = dateTime41.equals((java.lang.Object) false);
        org.joda.time.DateTimeZone dateTimeZone54 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str56 = dateTimeZone54.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime57 = org.joda.time.LocalDateTime.now(dateTimeZone54);
        org.joda.time.LocalDateTime.Property property58 = localDateTime57.millisOfDay();
        org.joda.time.LocalDateTime localDateTime60 = localDateTime57.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime62 = localDateTime57.plusHours((int) ' ');
        org.joda.time.ReadableInstant readableInstant63 = null;
        org.joda.time.DateTime dateTime64 = localDateTime62.toDateTime(readableInstant63);
        long long65 = dateTime64.getMillis();
        org.joda.time.DateTimeZone dateTimeZone66 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str68 = dateTimeZone66.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime69 = org.joda.time.LocalDateTime.now(dateTimeZone66);
        org.joda.time.DateTimeFieldType dateTimeFieldType71 = localDateTime69.getFieldType((int) (short) 0);
        boolean boolean72 = dateTime64.isSupported(dateTimeFieldType71);
        boolean boolean73 = dateTime41.isAfter((org.joda.time.ReadableInstant) dateTime64);
        java.lang.String str74 = dateTime41.toString();
        boolean boolean76 = dateTime41.equals((java.lang.Object) (short) 1);
        boolean boolean77 = dateTime26.isAfter((org.joda.time.ReadableInstant) dateTime41);
        org.junit.Assert.assertNotNull(dateTimeZone0);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+07:10:22.088" + "'", str2, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "millisOfDay" + "'", str5, "millisOfDay");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 86399999 + "'", int6 == 86399999);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "26149261" + "'", str25, "26149261");
        org.junit.Assert.assertNotNull(dateTime26);
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "2022-02-22T14:33:46.952+07:10:22.088" + "'", str27, "2022-02-22T14:33:46.952+07:10:22.088");
        org.junit.Assert.assertNotNull(dateTimeZone28);
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "2022-02-22T14:33:46.952+07:10:22.088" + "'", str29, "2022-02-22T14:33:46.952+07:10:22.088");
// flaky:         org.junit.Assert.assertTrue("'" + int30 + "' != '" + 25822087 + "'", int30 == 25822087);
        org.junit.Assert.assertNotNull(dateTimeZone31);
// flaky:         org.junit.Assert.assertEquals("'" + str33 + "' != '" + "+07:10:22.088" + "'", str33, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTimeZone42);
// flaky:         org.junit.Assert.assertEquals("'" + str44 + "' != '" + "+07:10:22.088" + "'", str44, "+07:10:22.088");
// flaky:         org.junit.Assert.assertTrue("'" + long46 + "' != '" + 25822120L + "'", long46 == 25822120L);
// flaky:         org.junit.Assert.assertEquals("'" + str47 + "' != '" + "+07:10:22.088" + "'", str47, "+07:10:22.088");
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 32L + "'", long49 == 32L);
// flaky:         org.junit.Assert.assertTrue("'" + long52 + "' != '" + (-25821991L) + "'", long52 == (-25821991L));
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(dateTimeZone54);
// flaky:         org.junit.Assert.assertEquals("'" + str56 + "' != '" + "+07:10:22.088" + "'", str56, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertNotNull(dateTime64);
// flaky:         org.junit.Assert.assertTrue("'" + long65 + "' != '" + 1645629804863L + "'", long65 == 1645629804863L);
        org.junit.Assert.assertNotNull(dateTimeZone66);
// flaky:         org.junit.Assert.assertEquals("'" + str68 + "' != '" + "+07:10:22.088" + "'", str68, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime69);
        org.junit.Assert.assertNotNull(dateTimeFieldType71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str74 + "' != '" + "2022-02-23T22:33:46.951+07:10:22.088" + "'", str74, "2022-02-23T22:33:46.951+07:10:22.088");
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
    }

    @Test
    public void test10092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10092");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        boolean boolean1 = timeZone0.observesDaylightTime();
        java.util.TimeZone.setDefault(timeZone0);
        timeZone0.setRawOffset(26181236);
        java.lang.String str5 = timeZone0.getID();
        boolean boolean6 = timeZone0.observesDaylightTime();
        java.util.TimeZone timeZone8 = java.util.TimeZone.getTimeZone("26243926");
        timeZone8.setRawOffset(67);
        java.time.ZoneId zoneId11 = timeZone8.toZoneId();
        timeZone8.setID("2022-02-22T07:18:51.343");
        boolean boolean14 = timeZone0.hasSameRules(timeZone8);
        int int15 = timeZone8.getRawOffset();
        org.junit.Assert.assertNotNull(timeZone0);
// flaky:         org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "\u683c\u6797\u5a01\u6cbb\u6642\u9593");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "GMT" + "'", str5, "GMT");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(timeZone8);
        org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(zoneId11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 67 + "'", int15 == 67);
    }

    @Test
    public void test10093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10093");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DurationField durationField3 = chronology2.weekyears();
        org.joda.time.DurationField durationField4 = chronology2.centuries();
        org.joda.time.DurationField durationField5 = chronology2.minutes();
        org.joda.time.DateTimeField dateTimeField6 = chronology2.monthOfYear();
        org.joda.time.DateTimeField dateTimeField7 = chronology2.dayOfYear();
        org.joda.time.DurationField durationField8 = chronology2.days();
        org.joda.time.DurationField durationField9 = chronology2.weekyears();
        long long12 = durationField9.getMillis(356, 26312059L);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 11234764800000L + "'", long12 == 11234764800000L);
    }

    @Test
    public void test10094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10094");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("hours");
        java.lang.String str2 = languageRange1.getRange();
        double double3 = languageRange1.getWeight();
        double double4 = languageRange1.getWeight();
        java.lang.String str5 = languageRange1.getRange();
        java.lang.String str6 = languageRange1.getRange();
        java.lang.String str7 = languageRange1.getRange();
        double double8 = languageRange1.getWeight();
        java.lang.String str9 = languageRange1.getRange();
        java.util.Locale locale10 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet11 = locale10.getUnicodeLocaleAttributes();
        java.lang.Object[] objArray12 = strSet11.toArray();
        java.util.Locale locale13 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet14 = locale13.getUnicodeLocaleAttributes();
        boolean boolean15 = strSet11.removeAll((java.util.Collection<java.lang.String>) strSet14);
        java.util.Locale locale16 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet17 = locale16.getUnicodeLocaleAttributes();
        org.joda.time.DurationFieldType durationFieldType18 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.DurationFieldType durationFieldType19 = org.joda.time.DurationFieldType.hours();
        org.joda.time.DurationFieldType[] durationFieldTypeArray20 = new org.joda.time.DurationFieldType[] { durationFieldType18, durationFieldType19 };
        org.joda.time.DurationFieldType[] durationFieldTypeArray21 = strSet17.toArray(durationFieldTypeArray20);
        boolean boolean22 = strSet11.containsAll((java.util.Collection<java.lang.String>) strSet17);
        java.lang.Object[] objArray23 = strSet11.toArray();
        java.util.Locale.LanguageRange[] languageRangeArray24 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList25 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList25, languageRangeArray24);
        java.util.Locale locale27 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale28 = java.util.Locale.CANADA;
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str31 = dateTimeZone29.getShortName((long) (short) 10);
        long long33 = dateTimeZone29.convertUTCToLocal((long) ' ');
        java.lang.String str34 = dateTimeZone29.toString();
        boolean boolean36 = dateTimeZone29.equals((java.lang.Object) (short) 100);
        java.util.Locale locale38 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str39 = dateTimeZone29.getShortName((long) (-1), locale38);
        java.util.Locale locale40 = java.util.Locale.CANADA;
        java.util.Locale locale41 = java.util.Locale.FRENCH;
        java.util.Locale[] localeArray42 = new java.util.Locale[] { locale27, locale28, locale38, locale40, locale41 };
        java.util.ArrayList<java.util.Locale> localeList43 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList43, localeArray42);
        java.util.Locale locale45 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList25, (java.util.Collection<java.util.Locale>) localeList43);
        java.util.Locale locale46 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet47 = locale46.getUnicodeLocaleAttributes();
        java.lang.Object[] objArray48 = strSet47.toArray();
        java.util.List<java.lang.String> strList49 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList25, (java.util.Collection<java.lang.String>) strSet47);
        boolean boolean50 = strSet11.containsAll((java.util.Collection<java.lang.String>) strList49);
        int int51 = strSet11.size();
        boolean boolean52 = languageRange1.equals((java.lang.Object) strSet11);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hours" + "'", str2, "hours");
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 1.0d + "'", double4 == 1.0d);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hours" + "'", str5, "hours");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hours" + "'", str6, "hours");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hours" + "'", str7, "hours");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0d + "'", double8 == 1.0d);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hours" + "'", str9, "hours");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "");
        org.junit.Assert.assertNotNull(strSet11);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[]");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "");
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "");
        org.junit.Assert.assertNotNull(strSet17);
        org.junit.Assert.assertNotNull(durationFieldType18);
        org.junit.Assert.assertNotNull(durationFieldType19);
        org.junit.Assert.assertNotNull(durationFieldTypeArray20);
        org.junit.Assert.assertNotNull(durationFieldTypeArray21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[]");
        org.junit.Assert.assertNotNull(languageRangeArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "en_CA");
        org.junit.Assert.assertNotNull(dateTimeZone29);
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "+07:10:22.088" + "'", str31, "+07:10:22.088");
// flaky:         org.junit.Assert.assertTrue("'" + long33 + "' != '" + 25822120L + "'", long33 == 25822120L);
// flaky:         org.junit.Assert.assertEquals("'" + str34 + "' != '" + "+07:10:22.088" + "'", str34, "+07:10:22.088");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "fr_CA");
// flaky:         org.junit.Assert.assertEquals("'" + str39 + "' != '" + "+07:10:22.088" + "'", str39, "+07:10:22.088");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "fr");
        org.junit.Assert.assertNotNull(localeArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNull(locale45);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "");
        org.junit.Assert.assertNotNull(strSet47);
        org.junit.Assert.assertNotNull(objArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray48), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray48), "[]");
        org.junit.Assert.assertNotNull(strList49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
    }

    @Test
    public void test10095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10095");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.millisOfDay();
        org.joda.time.DurationFieldType durationFieldType5 = org.joda.time.DurationFieldType.centuries();
        boolean boolean6 = localDateTime3.equals((java.lang.Object) durationFieldType5);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime3.withWeekOfWeekyear((int) (byte) 10);
        int int9 = localDateTime8.getDayOfYear();
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.LocalDateTime localDateTime11 = localDateTime8.plus(readablePeriod10);
        org.joda.time.Chronology chronology12 = localDateTime11.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str17 = dateTimeZone15.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime18 = org.joda.time.LocalDateTime.now(dateTimeZone15);
        org.joda.time.LocalDateTime.Property property19 = localDateTime18.millisOfDay();
        long long20 = property19.remainder();
        int int21 = property19.getMinimumValueOverall();
        java.util.Locale.Category category22 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale23 = java.util.Locale.FRENCH;
        java.util.Locale.setDefault(category22, locale23);
        java.lang.String str25 = locale23.getDisplayName();
        int int26 = property19.getMaximumShortTextLength(locale23);
        java.lang.String str27 = dateTimeField13.getAsShortText(1645629512923L, locale23);
        java.util.Set<java.lang.String> strSet28 = locale23.getUnicodeLocaleKeys();
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.DateTimeField dateTimeField31 = dateTimeFieldType29.getField(chronology30);
        java.util.Locale locale33 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale34 = locale33.stripExtensions();
        java.lang.String str35 = dateTimeField31.getAsShortText(100, locale34);
        int int37 = dateTimeField31.getLeapAmount((long) (short) 100);
        java.lang.String str38 = dateTimeField31.getName();
        long long41 = dateTimeField31.add((long) (short) 1, 0);
        int int43 = dateTimeField31.get((long) 86399999);
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str46 = dateTimeZone44.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime47 = org.joda.time.LocalDateTime.now(dateTimeZone44);
        org.joda.time.LocalDateTime.Property property48 = localDateTime47.millisOfDay();
        org.joda.time.LocalDateTime localDateTime50 = localDateTime47.withYear((int) (short) 100);
        org.joda.time.LocalDateTime.Property property51 = localDateTime50.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime53 = localDateTime50.minusMonths(2022);
        int int54 = localDateTime50.getDayOfMonth();
        java.util.Locale locale55 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet56 = locale55.getUnicodeLocaleAttributes();
        java.lang.String str57 = locale55.toLanguageTag();
        java.lang.String str58 = dateTimeField31.getAsText((org.joda.time.ReadablePartial) localDateTime50, locale55);
        long long60 = dateTimeField31.roundCeiling(14200L);
        java.lang.String str62 = dateTimeField31.getAsText(1645629365489L);
        boolean boolean63 = strSet28.remove((java.lang.Object) dateTimeField31);
        boolean boolean65 = dateTimeField31.isLeap((-1893417120000000L));
        org.joda.time.DurationField durationField66 = dateTimeField31.getDurationField();
        org.junit.Assert.assertNotNull(dateTimeZone0);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+07:10:22.088" + "'", str2, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(durationFieldType5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 67 + "'", int9 == 67);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+07:10:22.088" + "'", str17, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + category22 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category22.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "fran\347ais" + "'", str25, "fran\347ais");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 8 + "'", int26 == 8);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "15" + "'", str27, "15");
        org.junit.Assert.assertNotNull(strSet28);
        org.junit.Assert.assertNotNull(dateTimeFieldType29);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "100" + "'", str35, "100");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "minuteOfDay" + "'", str38, "minuteOfDay");
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 1L + "'", long41 == 1L);
// flaky:         org.junit.Assert.assertTrue("'" + int43 + "' != '" + 430 + "'", int43 == 430);
        org.junit.Assert.assertNotNull(dateTimeZone44);
// flaky:         org.junit.Assert.assertEquals("'" + str46 + "' != '" + "+07:10:22.088" + "'", str46, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 22 + "'", int54 == 22);
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "");
        org.junit.Assert.assertNotNull(strSet56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "und" + "'", str57, "und");
// flaky:         org.junit.Assert.assertEquals("'" + str58 + "' != '" + "873" + "'", str58, "873");
// flaky:         org.junit.Assert.assertTrue("'" + long60 + "' != '" + 37912L + "'", long60 == 37912L);
// flaky:         org.junit.Assert.assertEquals("'" + str62 + "' != '" + "1346" + "'", str62, "1346");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(durationField66);
    }

    @Test
    public void test10096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10096");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology3 = localDateTime2.getChronology();
        org.joda.time.DurationField durationField4 = chronology3.weekyears();
        org.joda.time.DurationField durationField5 = chronology3.centuries();
        org.joda.time.DurationField durationField6 = chronology3.hours();
        boolean boolean7 = dateTimeFieldType0.isSupported(chronology3);
        org.joda.time.DateTimeField dateTimeField8 = chronology3.yearOfEra();
        org.joda.time.DateTimeField dateTimeField9 = chronology3.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField10 = chronology3.weekyearOfCentury();
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime(chronology3);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minusDays(23);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.plusDays(242);
        java.util.Locale locale17 = null;
        java.lang.String str18 = localDateTime13.toString("26333728", locale17);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "26333728" + "'", str18, "26333728");
    }

    @Test
    public void test10097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10097");
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology3 = localDateTime2.getChronology();
        org.joda.time.DurationField durationField4 = chronology3.weekyears();
        org.joda.time.DurationField durationField5 = chronology3.centuries();
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime((long) (byte) 0, chronology3);
        org.joda.time.DurationField durationField7 = chronology3.millis();
        org.joda.time.DateTimeField dateTimeField8 = chronology3.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField9 = chronology3.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology13 = localDateTime12.getChronology();
        org.joda.time.DurationField durationField14 = chronology13.weekyears();
        org.joda.time.DurationField durationField15 = chronology13.centuries();
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((long) (byte) 0, chronology13);
        org.joda.time.DurationField durationField17 = chronology13.millis();
        org.joda.time.DateTimeField dateTimeField18 = chronology13.minuteOfDay();
        org.joda.time.DurationFieldType durationFieldType19 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology22 = localDateTime21.getChronology();
        org.joda.time.DurationField durationField23 = chronology22.weekyears();
        org.joda.time.DurationField durationField24 = chronology22.centuries();
        org.joda.time.DurationField durationField25 = chronology22.hours();
        boolean boolean26 = durationFieldType19.isSupported(chronology22);
        org.joda.time.DateTimeField dateTimeField27 = chronology22.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime();
        org.joda.time.ReadableDuration readableDuration29 = null;
        org.joda.time.LocalDateTime localDateTime31 = localDateTime28.withDurationAdded(readableDuration29, (int) '#');
        org.joda.time.LocalDateTime.Property property32 = localDateTime31.weekyear();
        int int33 = property32.getMaximumValue();
        org.joda.time.DateTimeField dateTimeField34 = property32.getField();
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str37 = dateTimeZone35.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime38 = org.joda.time.LocalDateTime.now(dateTimeZone35);
        org.joda.time.LocalDateTime.Property property39 = localDateTime38.millisOfDay();
        org.joda.time.LocalDateTime localDateTime41 = localDateTime38.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime43 = localDateTime38.plusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime45 = localDateTime43.minusHours((int) (short) 10);
        int int46 = dateTimeField34.getMinimumValue((org.joda.time.ReadablePartial) localDateTime45);
        java.util.Locale locale48 = java.util.Locale.PRC;
        java.lang.String str49 = dateTimeField27.getAsShortText((org.joda.time.ReadablePartial) localDateTime45, (-1), locale48);
        int int50 = dateTimeField18.getMaximumTextLength(locale48);
        long long53 = dateTimeField18.add(197L, 22);
        org.joda.time.LocalDateTime localDateTime56 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology57 = localDateTime56.getChronology();
        org.joda.time.DurationField durationField58 = chronology57.weekyears();
        org.joda.time.DurationField durationField59 = chronology57.centuries();
        org.joda.time.LocalDateTime localDateTime60 = new org.joda.time.LocalDateTime((long) (byte) 0, chronology57);
        org.joda.time.DateTimeField dateTimeField61 = chronology57.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField62 = chronology57.clockhourOfHalfday();
        org.joda.time.LocalDateTime localDateTime64 = new org.joda.time.LocalDateTime(100L);
        org.joda.time.LocalDateTime localDateTime66 = localDateTime64.plusDays(0);
        long long68 = chronology57.set((org.joda.time.ReadablePartial) localDateTime66, (long) 24);
        org.joda.time.DurationFieldType durationFieldType70 = org.joda.time.DurationFieldType.days();
        org.joda.time.LocalDateTime localDateTime72 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology73 = localDateTime72.getChronology();
        org.joda.time.DurationField durationField74 = chronology73.hours();
        org.joda.time.DurationField durationField75 = durationFieldType70.getField(chronology73);
        org.joda.time.DateTimeField dateTimeField76 = chronology73.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField77 = chronology73.halfdayOfDay();
        java.util.Locale.Builder builder78 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder80 = builder78.addUnicodeLocaleAttribute("und");
        java.util.Locale locale81 = builder80.build();
        java.util.Locale locale82 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet83 = locale82.getUnicodeLocaleAttributes();
        java.util.Set<java.lang.String> strSet84 = locale82.getUnicodeLocaleAttributes();
        java.lang.String str85 = locale82.getVariant();
        java.util.Locale.Builder builder86 = builder80.setLocale(locale82);
        int int87 = dateTimeField77.getMaximumShortTextLength(locale82);
        java.util.Locale locale88 = null;
        java.lang.String str89 = locale82.getDisplayCountry(locale88);
        java.lang.String str90 = dateTimeField18.getAsShortText((org.joda.time.ReadablePartial) localDateTime66, (-1), locale88);
        java.util.Locale.Category category91 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale92 = java.util.Locale.FRENCH;
        java.util.Locale.setDefault(category91, locale92);
        java.lang.String str94 = locale92.getDisplayName();
        java.lang.String str95 = locale92.getDisplayName();
        java.lang.String str96 = dateTimeField9.getAsShortText((org.joda.time.ReadablePartial) localDateTime66, locale92);
        org.joda.time.LocalDateTime.Property property97 = localDateTime66.dayOfYear();
        org.joda.time.LocalDateTime localDateTime99 = localDateTime66.minusHours(297);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationFieldType19);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 292278993 + "'", int33 == 292278993);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeZone35);
// flaky:         org.junit.Assert.assertEquals("'" + str37 + "' != '" + "+07:10:22.088" + "'", str37, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-292275054) + "'", int46 == (-292275054));
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "-1" + "'", str49, "-1");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 4 + "'", int50 == 4);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 1320197L + "'", long53 == 1320197L);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(durationField58);
        org.junit.Assert.assertNotNull(durationField59);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertNotNull(localDateTime66);
// flaky:         org.junit.Assert.assertTrue("'" + long68 + "' != '" + 25822188L + "'", long68 == 25822188L);
        org.junit.Assert.assertNotNull(durationFieldType70);
        org.junit.Assert.assertNotNull(chronology73);
        org.junit.Assert.assertNotNull(durationField74);
        org.junit.Assert.assertNotNull(durationField75);
        org.junit.Assert.assertNotNull(dateTimeField76);
        org.junit.Assert.assertNotNull(dateTimeField77);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(locale81);
        org.junit.Assert.assertEquals(locale81.toString(), "");
        org.junit.Assert.assertNotNull(locale82);
        org.junit.Assert.assertEquals(locale82.toString(), "");
        org.junit.Assert.assertNotNull(strSet83);
        org.junit.Assert.assertNotNull(strSet84);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "" + "'", str85, "");
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 2 + "'", int87 == 2);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "" + "'", str89, "");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "-1" + "'", str90, "-1");
        org.junit.Assert.assertTrue("'" + category91 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category91.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale92);
        org.junit.Assert.assertEquals(locale92.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "fran\347ais" + "'", str94, "fran\347ais");
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "fran\347ais" + "'", str95, "fran\347ais");
// flaky:         org.junit.Assert.assertEquals("'" + str96 + "' != '" + "188" + "'", str96, "188");
        org.junit.Assert.assertNotNull(property97);
        org.junit.Assert.assertNotNull(localDateTime99);
    }

    @Test
    public void test10098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10098");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(26149500L);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusSeconds(1439);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.plus(readablePeriod4);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.LocalDateTime localDateTime8 = localDateTime5.withPeriodAdded(readablePeriod6, (-18));
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime8);
    }

    @Test
    public void test10099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10099");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.millisOfDay();
        org.joda.time.DurationFieldType durationFieldType5 = org.joda.time.DurationFieldType.centuries();
        boolean boolean6 = localDateTime3.equals((java.lang.Object) durationFieldType5);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.LocalDateTime localDateTime9 = localDateTime3.withPeriodAdded(readablePeriod7, 0);
        int int10 = localDateTime9.getMinuteOfHour();
        org.joda.time.LocalDateTime.Property property11 = localDateTime9.millisOfDay();
        java.util.Locale.Builder builder13 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder15 = builder13.addUnicodeLocaleAttribute("und");
        java.util.Locale locale16 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale17 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str18 = locale16.getDisplayCountry(locale17);
        java.lang.String str19 = locale17.getDisplayName();
        java.util.Locale.Builder builder20 = builder15.setLocale(locale17);
        java.util.Locale.Builder builder21 = builder15.clearExtensions();
        java.util.Locale.Builder builder23 = builder15.removeUnicodeLocaleAttribute("26185191");
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str26 = dateTimeZone24.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime27 = org.joda.time.LocalDateTime.now(dateTimeZone24);
        org.joda.time.LocalDateTime.Property property28 = localDateTime27.millisOfDay();
        org.joda.time.LocalDateTime localDateTime30 = localDateTime27.withYear((int) (short) 100);
        org.joda.time.LocalDateTime.Property property31 = localDateTime30.minuteOfHour();
        org.joda.time.DurationField durationField32 = property31.getLeapDurationField();
        java.util.Locale locale33 = java.util.Locale.GERMAN;
        java.util.Locale.setDefault(locale33);
        java.util.Locale locale35 = java.util.Locale.CANADA;
        boolean boolean36 = locale35.hasExtensions();
        java.lang.String str37 = locale33.getDisplayScript(locale35);
        java.lang.String str38 = property31.getAsText(locale35);
        org.joda.time.tz.NameProvider nameProvider39 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale40 = java.util.Locale.CANADA;
        java.lang.String str43 = nameProvider39.getShortName(locale40, "fran\347ais", "2022-02-22T07:15:48.066");
        int int44 = property31.getMaximumTextLength(locale40);
        java.util.Locale.Builder builder45 = builder15.setLocale(locale40);
        java.util.Locale locale46 = builder45.build();
        org.joda.time.LocalDateTime localDateTime47 = property11.setCopy("26503272", locale46);
        org.junit.Assert.assertNotNull(dateTimeZone0);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+07:10:22.088" + "'", str2, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(durationFieldType5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(localDateTime9);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 33 + "'", int10 == 33);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Canada" + "'", str18, "Canada");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "fran\347ais (Canada)" + "'", str19, "fran\347ais (Canada)");
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "+07:10:22.088" + "'", str26, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNull(durationField32);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "de");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "en_CA");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
// flaky:         org.junit.Assert.assertEquals("'" + str38 + "' != '" + "33" + "'", str38, "33");
        org.junit.Assert.assertNotNull(nameProvider39);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "en_CA");
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2 + "'", int44 == 2);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "en_CA");
        org.junit.Assert.assertNotNull(localDateTime47);
    }

    @Test
    public void test10100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10100");
        org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.parse("26423414");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str4 = dateTimeZone2.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime5 = org.joda.time.LocalDateTime.now(dateTimeZone2);
        org.joda.time.LocalDateTime.Property property6 = localDateTime5.millisOfDay();
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.centuries();
        boolean boolean8 = localDateTime5.equals((java.lang.Object) durationFieldType7);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray9 = localDateTime5.getFieldTypes();
        java.lang.String str10 = localDateTime5.toString();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime5.plusMillis(22);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime5.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology15 = localDateTime5.getChronology();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str18 = dateTimeZone16.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime19 = org.joda.time.LocalDateTime.now(dateTimeZone16);
        org.joda.time.LocalDateTime.Property property20 = localDateTime19.millisOfDay();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime19.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime19.plusHours((int) ' ');
        int int25 = localDateTime19.getDayOfMonth();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime19.minusHours(26147585);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str30 = dateTimeZone28.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime31 = org.joda.time.LocalDateTime.now(dateTimeZone28);
        org.joda.time.LocalDateTime.Property property32 = localDateTime31.millisOfDay();
        java.lang.String str33 = property32.getName();
        org.joda.time.LocalDateTime localDateTime34 = property32.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime36 = property32.addToCopy(0L);
        java.lang.String str37 = property32.getAsString();
        org.joda.time.LocalDateTime localDateTime38 = property32.roundCeilingCopy();
        org.joda.time.LocalDateTime localDateTime39 = localDateTime19.withFields((org.joda.time.ReadablePartial) localDateTime38);
        org.joda.time.LocalDateTime.Property property40 = localDateTime38.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime41 = localDateTime5.withFields((org.joda.time.ReadablePartial) localDateTime38);
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str44 = dateTimeZone42.getShortName((long) (short) 10);
        long long46 = dateTimeZone42.convertUTCToLocal((long) ' ');
        java.lang.String str47 = dateTimeZone42.toString();
        long long50 = dateTimeZone42.adjustOffset((long) (short) 100, false);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone42);
        boolean boolean53 = dateTimeZone42.equals((java.lang.Object) "CA");
        int int55 = dateTimeZone42.getOffsetFromLocal(1094L);
        long long57 = dateTimeZone42.convertUTCToLocal(1645629434501L);
        long long59 = dateTimeZone42.convertUTCToLocal(224L);
        org.joda.time.DateTime dateTime60 = localDateTime41.toDateTime(dateTimeZone42);
        boolean boolean61 = localDateTime1.isBefore((org.joda.time.ReadablePartial) localDateTime41);
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertNotNull(dateTimeZone2);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+07:10:22.088" + "'", str4, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray9);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "2022-02-22T14:33:47.168" + "'", str10, "2022-02-22T14:33:47.168");
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+07:10:22.088" + "'", str18, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 22 + "'", int25 == 22);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(dateTimeZone28);
// flaky:         org.junit.Assert.assertEquals("'" + str30 + "' != '" + "+07:10:22.088" + "'", str30, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "millisOfDay" + "'", str33, "millisOfDay");
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(localDateTime36);
// flaky:         org.junit.Assert.assertEquals("'" + str37 + "' != '" + "52427168" + "'", str37, "52427168");
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(dateTimeZone42);
// flaky:         org.junit.Assert.assertEquals("'" + str44 + "' != '" + "+07:10:22.088" + "'", str44, "+07:10:22.088");
// flaky:         org.junit.Assert.assertTrue("'" + long46 + "' != '" + 25822120L + "'", long46 == 25822120L);
// flaky:         org.junit.Assert.assertEquals("'" + str47 + "' != '" + "+07:10:22.088" + "'", str47, "+07:10:22.088");
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 100L + "'", long50 == 100L);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int55 + "' != '" + 25822088 + "'", int55 == 25822088);
// flaky:         org.junit.Assert.assertTrue("'" + long57 + "' != '" + 1645655256589L + "'", long57 == 1645655256589L);
// flaky:         org.junit.Assert.assertTrue("'" + long59 + "' != '" + 25822312L + "'", long59 == 25822312L);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
    }

    @Test
    public void test10101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10101");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.millisOfDay();
        java.lang.String str5 = property4.getName();
        org.joda.time.LocalDateTime localDateTime6 = property4.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.minusHours(0);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str12 = dateTimeZone10.getShortName((long) (short) 10);
        long long14 = dateTimeZone10.convertUTCToLocal((long) ' ');
        java.lang.String str15 = dateTimeZone10.toString();
        boolean boolean17 = dateTimeZone10.equals((java.lang.Object) (short) 100);
        java.util.Locale locale19 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str20 = dateTimeZone10.getShortName((long) (-1), locale19);
        long long23 = dateTimeZone10.convertLocalToUTC((long) (short) 10, true);
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime((long) 7, dateTimeZone10);
        org.joda.time.DateTime dateTime25 = localDateTime8.toDateTime(dateTimeZone10);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime8.withDayOfYear(9);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.minusMonths(26169744);
        org.joda.time.LocalDateTime.Property property30 = localDateTime27.dayOfMonth();
        org.joda.time.LocalDateTime.Property property31 = localDateTime27.millisOfDay();
        org.joda.time.LocalDateTime localDateTime33 = localDateTime27.minusHours((-15));
        int int34 = localDateTime27.getWeekyear();
        org.junit.Assert.assertNotNull(dateTimeZone0);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+07:10:22.088" + "'", str2, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "millisOfDay" + "'", str5, "millisOfDay");
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(dateTimeZone10);
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+07:10:22.088" + "'", str12, "+07:10:22.088");
// flaky:         org.junit.Assert.assertTrue("'" + long14 + "' != '" + 25822120L + "'", long14 == 25822120L);
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+07:10:22.088" + "'", str15, "+07:10:22.088");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "fr_CA");
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+07:10:22.088" + "'", str20, "+07:10:22.088");
// flaky:         org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-25822078L) + "'", long23 == (-25822078L));
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2022 + "'", int34 == 2022);
    }

    @Test
    public void test10102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10102");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.millisOfDay();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime3.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime3.plusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minusHours((int) (short) 10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray11 = localDateTime8.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime8.withMillisOfDay((int) '4');
        org.joda.time.LocalDateTime.Property property14 = localDateTime8.monthOfYear();
        org.joda.time.LocalDateTime.Property property15 = localDateTime8.centuryOfEra();
        int int16 = property15.get();
        org.junit.Assert.assertNotNull(dateTimeZone0);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+07:10:22.088" + "'", str2, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 20 + "'", int16 == 20);
    }

    @Test
    public void test10103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10103");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DurationField durationField3 = chronology2.weekyears();
        org.joda.time.DurationField durationField4 = chronology2.seconds();
        org.joda.time.DurationField durationField5 = chronology2.seconds();
        org.joda.time.DateTimeField dateTimeField6 = chronology2.millisOfDay();
        java.lang.String str7 = dateTimeField6.toString();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str10 = dateTimeZone8.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now(dateTimeZone8);
        org.joda.time.LocalDateTime.Property property12 = localDateTime11.millisOfDay();
        org.joda.time.LocalDateTime localDateTime14 = property12.addToCopy(500);
        int int15 = localDateTime14.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateTimeField dateTimeField18 = dateTimeFieldType16.getField(chronology17);
        long long20 = dateTimeField18.roundFloor((long) (-1));
        java.util.Locale.Builder builder21 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder23 = builder21.addUnicodeLocaleAttribute("und");
        java.util.Locale locale24 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale25 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str26 = locale24.getDisplayCountry(locale25);
        java.lang.String str27 = locale25.getDisplayName();
        java.util.Locale.Builder builder28 = builder23.setLocale(locale25);
        int int29 = dateTimeField18.getMaximumShortTextLength(locale25);
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str32 = dateTimeZone30.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime33 = org.joda.time.LocalDateTime.now(dateTimeZone30);
        org.joda.time.LocalDateTime.Property property34 = localDateTime33.millisOfDay();
        org.joda.time.ReadableInstant readableInstant35 = null;
        long long36 = property34.getDifferenceAsLong(readableInstant35);
        org.joda.time.DurationField durationField37 = property34.getLeapDurationField();
        java.lang.String str38 = property34.getAsString();
        org.joda.time.LocalDateTime localDateTime39 = property34.roundFloorCopy();
        java.util.Locale locale40 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet41 = locale40.getUnicodeLocaleAttributes();
        java.util.Set<java.lang.String> strSet42 = locale40.getUnicodeLocaleAttributes();
        java.lang.String str43 = dateTimeField18.getAsShortText((org.joda.time.ReadablePartial) localDateTime39, locale40);
        java.util.Locale locale44 = locale40.stripExtensions();
        java.lang.String str45 = dateTimeField6.getAsShortText((org.joda.time.ReadablePartial) localDateTime14, locale44);
        org.joda.time.DurationField durationField46 = dateTimeField6.getRangeDurationField();
        int int49 = durationField46.getValue(1645629497805L, (long) (-55));
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "DateTimeField[millisOfDay]" + "'", str7, "DateTimeField[millisOfDay]");
        org.junit.Assert.assertNotNull(dateTimeZone8);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+07:10:22.088" + "'", str10, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2022 + "'", int15 == 2022);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(dateTimeField18);
// flaky:         org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-22088L) + "'", long20 == (-22088L));
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Canada" + "'", str26, "Canada");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Franz\366sisch (Kanada)" + "'", str27, "Franz\366sisch (Kanada)");
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 4 + "'", int29 == 4);
        org.junit.Assert.assertNotNull(dateTimeZone30);
// flaky:         org.junit.Assert.assertEquals("'" + str32 + "' != '" + "+07:10:22.088" + "'", str32, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(property34);
// flaky:         org.junit.Assert.assertTrue("'" + long36 + "' != '" + 25822088L + "'", long36 == 25822088L);
        org.junit.Assert.assertNull(durationField37);
// flaky:         org.junit.Assert.assertEquals("'" + str38 + "' != '" + "52427215" + "'", str38, "52427215");
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "");
        org.junit.Assert.assertNotNull(strSet41);
        org.junit.Assert.assertNotNull(strSet42);
// flaky:         org.junit.Assert.assertEquals("'" + str43 + "' != '" + "873" + "'", str43, "873");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "");
// flaky:         org.junit.Assert.assertEquals("'" + str45 + "' != '" + "52427715" + "'", str45, "52427715");
        org.junit.Assert.assertNotNull(durationField46);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 19046 + "'", int49 == 19046);
    }

    @Test
    public void test10104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10104");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("minutes");
        java.lang.String str2 = languageRange1.getRange();
        java.lang.String str3 = languageRange1.getRange();
        java.lang.Object obj4 = null;
        boolean boolean5 = languageRange1.equals(obj4);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "minutes" + "'", str2, "minutes");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "minutes" + "'", str3, "minutes");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test10105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10105");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology3 = localDateTime2.getChronology();
        org.joda.time.DurationField durationField4 = chronology3.weekyears();
        org.joda.time.DurationField durationField5 = chronology3.seconds();
        org.joda.time.DurationField durationField6 = chronology3.weekyears();
        org.joda.time.DateTimeField dateTimeField7 = dateTimeFieldType0.getField(chronology3);
        org.joda.time.DateTimeField dateTimeField8 = chronology3.era();
        org.joda.time.DurationField durationField9 = chronology3.years();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
    }

    @Test
    public void test10106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10106");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.millisOfDay();
        long long5 = property4.remainder();
        org.joda.time.LocalDateTime localDateTime6 = property4.roundFloorCopy();
        java.util.Locale.Builder builder7 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder9 = builder7.addUnicodeLocaleAttribute("und");
        java.util.Locale locale10 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale11 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str12 = locale10.getDisplayCountry(locale11);
        java.lang.String str13 = locale11.getDisplayName();
        java.util.Locale.Builder builder14 = builder9.setLocale(locale11);
        java.util.Locale.Builder builder16 = builder9.setScript("");
        java.util.Locale locale17 = builder9.build();
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology20 = localDateTime19.getChronology();
        org.joda.time.DateTimeField dateTimeField21 = chronology20.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField22 = chronology20.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField23 = chronology20.millisOfSecond();
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateTimeField dateTimeField27 = dateTimeFieldType25.getField(chronology26);
        long long29 = dateTimeField27.roundFloor((long) (-1));
        java.util.Locale.Builder builder30 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder32 = builder30.addUnicodeLocaleAttribute("und");
        java.util.Locale locale33 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale34 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str35 = locale33.getDisplayCountry(locale34);
        java.lang.String str36 = locale34.getDisplayName();
        java.util.Locale.Builder builder37 = builder32.setLocale(locale34);
        int int38 = dateTimeField27.getMaximumShortTextLength(locale34);
        java.lang.String str39 = dateTimeField23.getAsShortText((long) 'a', locale34);
        java.lang.String str40 = locale17.getDisplayLanguage(locale34);
        java.util.Locale locale41 = locale34.stripExtensions();
        boolean boolean42 = property4.equals((java.lang.Object) locale34);
        org.joda.time.LocalDateTime localDateTime44 = property4.addWrapFieldToCopy((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime45 = property4.getLocalDateTime();
        org.joda.time.LocalDateTime.Property property46 = localDateTime45.year();
        int[] intArray47 = localDateTime45.getValues();
        org.junit.Assert.assertNotNull(dateTimeZone0);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+07:10:22.088" + "'", str2, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Canada" + "'", str12, "Canada");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Franz\366sisch (Kanada)" + "'", str13, "Franz\366sisch (Kanada)");
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertNotNull(dateTimeField27);
// flaky:         org.junit.Assert.assertTrue("'" + long29 + "' != '" + (-22088L) + "'", long29 == (-22088L));
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Canada" + "'", str35, "Canada");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Franz\366sisch (Kanada)" + "'", str36, "Franz\366sisch (Kanada)");
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 4 + "'", int38 == 4);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "97" + "'", str39, "97");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "fran\347ais" + "'", str40, "fran\347ais");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "fr_CA");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(intArray47);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[2022, 2, 22, 52427260]");
    }

    @Test
    public void test10107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10107");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.DurationFieldType durationFieldType1 = dateTimeFieldType0.getDurationType();
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.weekyears();
        org.joda.time.DurationField durationField6 = chronology4.centuries();
        boolean boolean7 = durationFieldType1.isSupported(chronology4);
        org.joda.time.DurationField durationField8 = chronology4.halfdays();
        org.joda.time.LocalDateTime localDateTime9 = org.joda.time.LocalDateTime.now(chronology4);
        org.joda.time.DateTimeField dateTimeField10 = chronology4.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField11 = chronology4.dayOfMonth();
        org.joda.time.DurationField durationField12 = dateTimeField11.getLeapDurationField();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str15 = dateTimeZone13.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime16 = org.joda.time.LocalDateTime.now(dateTimeZone13);
        org.joda.time.LocalDateTime.Property property17 = localDateTime16.millisOfDay();
        org.joda.time.DurationFieldType durationFieldType18 = org.joda.time.DurationFieldType.centuries();
        boolean boolean19 = localDateTime16.equals((java.lang.Object) durationFieldType18);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray20 = localDateTime16.getFieldTypes();
        java.lang.String str21 = localDateTime16.toString();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime16.plusMillis(22);
        org.joda.time.LocalDateTime.Property property24 = localDateTime16.monthOfYear();
        int int25 = localDateTime16.getDayOfYear();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str28 = dateTimeZone26.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime29 = org.joda.time.LocalDateTime.now(dateTimeZone26);
        org.joda.time.LocalDateTime.Property property30 = localDateTime29.millisOfDay();
        java.lang.String str31 = property30.getName();
        int int32 = property30.getMaximumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = property30.getFieldType();
        java.util.Locale locale34 = java.util.Locale.getDefault();
        java.lang.String str35 = locale34.getISO3Language();
        java.lang.String str36 = property30.getAsText(locale34);
        java.lang.String str37 = dateTimeField11.getAsText((org.joda.time.ReadablePartial) localDateTime16, locale34);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime16.minusMillis(81393140);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(durationFieldType1);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeZone13);
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+07:10:22.088" + "'", str15, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(durationFieldType18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray20);
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "2022-02-22T14:33:47.307" + "'", str21, "2022-02-22T14:33:47.307");
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 53 + "'", int25 == 53);
        org.junit.Assert.assertNotNull(dateTimeZone26);
// flaky:         org.junit.Assert.assertEquals("'" + str28 + "' != '" + "+07:10:22.088" + "'", str28, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "millisOfDay" + "'", str31, "millisOfDay");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 86399999 + "'", int32 == 86399999);
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "de");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "deu" + "'", str35, "deu");
// flaky:         org.junit.Assert.assertEquals("'" + str36 + "' != '" + "52427307" + "'", str36, "52427307");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "22" + "'", str37, "22");
        org.junit.Assert.assertNotNull(localDateTime39);
    }

    @Test
    public void test10108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10108");
        org.joda.time.tz.Provider provider0 = org.joda.time.DateTimeZone.getProvider();
        java.util.Set<java.lang.String> strSet1 = provider0.getAvailableIDs();
        org.joda.time.DateTimeZone dateTimeZone3 = provider0.getZone("French (Canada)");
        org.joda.time.DateTimeZone.setProvider(provider0);
        java.util.Set<java.lang.String> strSet5 = provider0.getAvailableIDs();
        java.util.TimeZone timeZone7 = java.util.TimeZone.getTimeZone("26238663");
        timeZone7.setID("26278518");
        java.util.TimeZone timeZone11 = java.util.TimeZone.getTimeZone("2021-12-22T07:23:03.003Z");
        java.util.TimeZone timeZone13 = java.util.TimeZone.getTimeZone("2022-02-22T07:16:00.550");
        java.time.ZoneId zoneId14 = timeZone13.toZoneId();
        java.util.TimeZone timeZone15 = java.util.TimeZone.getTimeZone(zoneId14);
        java.util.TimeZone timeZone16 = java.util.TimeZone.getTimeZone(zoneId14);
        java.util.TimeZone[] timeZoneArray17 = new java.util.TimeZone[] { timeZone7, timeZone11, timeZone16 };
        // The following exception was thrown during execution in test generation
        try {
            java.util.TimeZone[] timeZoneArray18 = strSet5.toArray(timeZoneArray17);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayStoreException; message: null");
        } catch (java.lang.ArrayStoreException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(provider0);
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertNotNull(timeZone7);
        org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone11);
        org.junit.Assert.assertEquals(timeZone11.getDisplayName(), "Greenwich Zeit");
        org.junit.Assert.assertNotNull(timeZone13);
        org.junit.Assert.assertEquals(timeZone13.getDisplayName(), "Greenwich Zeit");
        org.junit.Assert.assertNotNull(zoneId14);
        org.junit.Assert.assertNotNull(timeZone15);
        org.junit.Assert.assertEquals(timeZone15.getDisplayName(), "Greenwich Zeit");
        org.junit.Assert.assertNotNull(timeZone16);
        org.junit.Assert.assertEquals(timeZone16.getDisplayName(), "Greenwich Zeit");
        org.junit.Assert.assertNotNull(timeZoneArray17);
    }

    @Test
    public void test10109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10109");
        java.util.Locale locale0 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet1 = locale0.getUnicodeLocaleAttributes();
        java.lang.Object[] objArray2 = strSet1.toArray();
        java.util.Locale locale3 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet4 = locale3.getUnicodeLocaleAttributes();
        boolean boolean5 = strSet1.removeAll((java.util.Collection<java.lang.String>) strSet4);
        java.util.Locale locale6 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet7 = locale6.getUnicodeLocaleAttributes();
        org.joda.time.DurationFieldType durationFieldType8 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.DurationFieldType durationFieldType9 = org.joda.time.DurationFieldType.hours();
        org.joda.time.DurationFieldType[] durationFieldTypeArray10 = new org.joda.time.DurationFieldType[] { durationFieldType8, durationFieldType9 };
        org.joda.time.DurationFieldType[] durationFieldTypeArray11 = strSet7.toArray(durationFieldTypeArray10);
        boolean boolean12 = strSet1.containsAll((java.util.Collection<java.lang.String>) strSet7);
        java.lang.Object[] objArray13 = strSet7.toArray();
        int int14 = strSet7.size();
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTimeField dateTimeField17 = dateTimeFieldType15.getField(chronology16);
        java.util.Locale.Category category19 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale20 = java.util.Locale.FRENCH;
        java.util.Locale.setDefault(category19, locale20);
        java.lang.String str22 = locale20.toLanguageTag();
        java.lang.String str23 = dateTimeField17.getAsText((long) 26149, locale20);
        boolean boolean24 = strSet7.contains((java.lang.Object) str23);
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str27 = dateTimeZone25.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime28 = org.joda.time.LocalDateTime.now(dateTimeZone25);
        org.joda.time.LocalDateTime.Property property29 = localDateTime28.millisOfDay();
        java.lang.String str30 = property29.getName();
        int int31 = property29.getMaximumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = property29.getFieldType();
        org.joda.time.LocalDateTime localDateTime33 = property29.roundFloorCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = property29.getFieldType();
        boolean boolean35 = strSet7.contains((java.lang.Object) dateTimeFieldType34);
        boolean boolean36 = strSet7.isEmpty();
        java.util.Spliterator<java.lang.String> strSpliterator37 = strSet7.spliterator();
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str40 = dateTimeZone38.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime41 = org.joda.time.LocalDateTime.now(dateTimeZone38);
        org.joda.time.LocalDateTime.Property property42 = localDateTime41.millisOfDay();
        org.joda.time.LocalDateTime localDateTime44 = localDateTime41.withYear((int) (short) 100);
        java.lang.String str45 = localDateTime44.toString();
        org.joda.time.ReadableDuration readableDuration46 = null;
        org.joda.time.LocalDateTime localDateTime47 = localDateTime44.minus(readableDuration46);
        org.joda.time.LocalDateTime localDateTime49 = localDateTime47.minusYears(1970);
        boolean boolean50 = strSet7.contains((java.lang.Object) localDateTime47);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean52 = strSet7.add("2022-02-22T07:23:16.019");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "");
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNotNull(objArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray2), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray2), "[]");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "");
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "");
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertNotNull(durationFieldType8);
        org.junit.Assert.assertNotNull(durationFieldType9);
        org.junit.Assert.assertNotNull(durationFieldTypeArray10);
        org.junit.Assert.assertNotNull(durationFieldTypeArray11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertTrue("'" + category19 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category19.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "fr" + "'", str22, "fr");
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "430" + "'", str23, "430");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(dateTimeZone25);
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "+07:10:22.088" + "'", str27, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "millisOfDay" + "'", str30, "millisOfDay");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 86399999 + "'", int31 == 86399999);
        org.junit.Assert.assertNotNull(dateTimeFieldType32);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(strSpliterator37);
        org.junit.Assert.assertNotNull(dateTimeZone38);
// flaky:         org.junit.Assert.assertEquals("'" + str40 + "' != '" + "+07:10:22.088" + "'", str40, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(localDateTime44);
// flaky:         org.junit.Assert.assertEquals("'" + str45 + "' != '" + "0100-02-22T14:33:47.359" + "'", str45, "0100-02-22T14:33:47.359");
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test10110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10110");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeField dateTimeField2 = dateTimeFieldType0.getField(chronology1);
        long long4 = dateTimeField2.roundFloor((long) (-1));
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str7 = dateTimeZone5.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime8 = org.joda.time.LocalDateTime.now(dateTimeZone5);
        org.joda.time.LocalDateTime.Property property9 = localDateTime8.millisOfDay();
        org.joda.time.DurationFieldType durationFieldType10 = org.joda.time.DurationFieldType.centuries();
        boolean boolean11 = localDateTime8.equals((java.lang.Object) durationFieldType10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray12 = localDateTime8.getFieldTypes();
        java.lang.String str13 = localDateTime8.toString();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime8.plusMillis(22);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime8.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology18 = localDateTime8.getChronology();
        java.util.Locale locale22 = new java.util.Locale("und", "+00:00:00.097");
        java.lang.String str23 = dateTimeField2.getAsShortText((org.joda.time.ReadablePartial) localDateTime8, (int) (short) 1, locale22);
        java.util.Set<java.lang.String> strSet24 = locale22.getUnicodeLocaleKeys();
        java.util.stream.Stream<java.lang.String> strStream25 = strSet24.stream();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeField2);
// flaky:         org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-22088L) + "'", long4 == (-22088L));
        org.junit.Assert.assertNotNull(dateTimeZone5);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+07:10:22.088" + "'", str7, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(durationFieldType10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray12);
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "2022-02-22T14:33:47.385" + "'", str13, "2022-02-22T14:33:47.385");
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertEquals(locale22.toString(), "und_+00:00:00.097");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "1" + "'", str23, "1");
        org.junit.Assert.assertNotNull(strSet24);
        org.junit.Assert.assertNotNull(strStream25);
    }

    @Test
    public void test10111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10111");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.DurationFieldType durationFieldType1 = dateTimeFieldType0.getDurationType();
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.weekyears();
        org.joda.time.DurationField durationField6 = chronology4.centuries();
        boolean boolean7 = durationFieldType1.isSupported(chronology4);
        org.joda.time.DurationField durationField8 = chronology4.halfdays();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.Chronology chronology10 = chronology4.withZone(dateTimeZone9);
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime(dateTimeZone9);
        java.lang.String str12 = dateTimeZone9.getID();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(durationFieldType1);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "UTC" + "'", str12, "UTC");
    }

    @Test
    public void test10112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10112");
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology3 = localDateTime2.getChronology();
        org.joda.time.DurationField durationField4 = chronology3.weekyears();
        org.joda.time.DurationField durationField5 = chronology3.centuries();
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime((long) (byte) 0, chronology3);
        org.joda.time.DurationField durationField7 = chronology3.millis();
        org.joda.time.DurationField durationField8 = chronology3.months();
        org.joda.time.DurationField durationField9 = chronology3.halfdays();
        org.joda.time.DateTimeField dateTimeField10 = chronology3.minuteOfDay();
        int int11 = dateTimeField10.getMinimumValue();
        long long13 = dateTimeField10.roundHalfFloor(1645629427309L);
        boolean boolean14 = dateTimeField10.isLenient();
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1645629420000L + "'", long13 == 1645629420000L);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test10113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10113");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.millisOfDay();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime3.withYear((int) (short) 100);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.minuteOfHour();
        int int8 = property7.get();
        org.joda.time.LocalDateTime localDateTime10 = property7.setCopy((int) (short) 10);
        org.joda.time.LocalDateTime.Property property11 = localDateTime10.minuteOfHour();
        java.util.Locale.Builder builder13 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder15 = builder13.setVariant("");
        java.util.Locale locale16 = builder13.build();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime17 = property11.setCopy("26186443", locale16);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26186443 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+07:10:22.088" + "'", str2, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 33 + "'", int8 == 33);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "");
    }

    @Test
    public void test10114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10114");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        org.joda.time.LocalDateTime localDateTime3 = localDateTime0.withDurationAdded(readableDuration1, (int) '#');
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime3.minusHours(0);
        int int7 = localDateTime3.getWeekyear();
        org.joda.time.Chronology chronology8 = localDateTime3.getChronology();
        org.joda.time.LocalDateTime localDateTime9 = org.joda.time.LocalDateTime.now(chronology8);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str12 = dateTimeZone10.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime13 = org.joda.time.LocalDateTime.now(dateTimeZone10);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str16 = dateTimeZone14.getShortName((long) (short) 10);
        long long18 = dateTimeZone14.convertUTCToLocal((long) ' ');
        java.lang.String str19 = dateTimeZone14.toString();
        boolean boolean21 = dateTimeZone14.equals((java.lang.Object) (short) 100);
        java.util.Locale locale23 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str24 = dateTimeZone14.getShortName((long) (-1), locale23);
        long long26 = dateTimeZone10.getMillisKeepLocal(dateTimeZone14, (long) (byte) -1);
        org.joda.time.Chronology chronology27 = chronology8.withZone(dateTimeZone10);
        org.joda.time.DateTimeField dateTimeField28 = chronology8.secondOfDay();
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime(chronology8);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2022 + "'", int7 == 2022);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+07:10:22.088" + "'", str12, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+07:10:22.088" + "'", str16, "+07:10:22.088");
// flaky:         org.junit.Assert.assertTrue("'" + long18 + "' != '" + 25822120L + "'", long18 == 25822120L);
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "+07:10:22.088" + "'", str19, "+07:10:22.088");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "fr_CA");
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "+07:10:22.088" + "'", str24, "+07:10:22.088");
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + (-1L) + "'", long26 == (-1L));
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
    }

    @Test
    public void test10115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10115");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        org.joda.time.LocalDateTime localDateTime3 = localDateTime0.withDurationAdded(readableDuration1, (int) '#');
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.weekyear();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime3.minusMillis((-1));
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str9 = dateTimeZone7.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime10 = org.joda.time.LocalDateTime.now(dateTimeZone7);
        org.joda.time.LocalDateTime.Property property11 = localDateTime10.millisOfDay();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime10.withYear((int) (short) 100);
        java.lang.String str14 = localDateTime13.toString();
        boolean boolean15 = localDateTime3.isAfter((org.joda.time.ReadablePartial) localDateTime13);
        java.util.Locale locale16 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet17 = locale16.getUnicodeLocaleAttributes();
        java.lang.Object[] objArray18 = strSet17.toArray();
        boolean boolean19 = strSet17.isEmpty();
        java.util.Locale locale20 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet21 = locale20.getUnicodeLocaleAttributes();
        java.lang.Object[] objArray22 = strSet21.toArray();
        java.util.Locale locale23 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet24 = locale23.getUnicodeLocaleAttributes();
        boolean boolean25 = strSet21.removeAll((java.util.Collection<java.lang.String>) strSet24);
        java.util.Locale locale26 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet27 = locale26.getUnicodeLocaleAttributes();
        org.joda.time.DurationFieldType durationFieldType28 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.DurationFieldType durationFieldType29 = org.joda.time.DurationFieldType.hours();
        org.joda.time.DurationFieldType[] durationFieldTypeArray30 = new org.joda.time.DurationFieldType[] { durationFieldType28, durationFieldType29 };
        org.joda.time.DurationFieldType[] durationFieldTypeArray31 = strSet27.toArray(durationFieldTypeArray30);
        boolean boolean32 = strSet21.containsAll((java.util.Collection<java.lang.String>) strSet27);
        java.lang.Object[] objArray33 = strSet27.toArray();
        boolean boolean34 = strSet17.removeAll((java.util.Collection<java.lang.String>) strSet27);
        java.util.Locale locale35 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet36 = locale35.getUnicodeLocaleAttributes();
        java.lang.Object[] objArray37 = strSet36.toArray();
        java.util.Locale locale38 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet39 = locale38.getUnicodeLocaleAttributes();
        boolean boolean40 = strSet36.removeAll((java.util.Collection<java.lang.String>) strSet39);
        java.util.Locale locale41 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet42 = locale41.getUnicodeLocaleAttributes();
        org.joda.time.DurationFieldType durationFieldType43 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.DurationFieldType durationFieldType44 = org.joda.time.DurationFieldType.hours();
        org.joda.time.DurationFieldType[] durationFieldTypeArray45 = new org.joda.time.DurationFieldType[] { durationFieldType43, durationFieldType44 };
        org.joda.time.DurationFieldType[] durationFieldTypeArray46 = strSet42.toArray(durationFieldTypeArray45);
        boolean boolean47 = strSet36.containsAll((java.util.Collection<java.lang.String>) strSet42);
        java.util.Locale locale48 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet49 = locale48.getUnicodeLocaleAttributes();
        java.lang.Object[] objArray50 = strSet49.toArray();
        java.util.Locale locale51 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet52 = locale51.getUnicodeLocaleAttributes();
        boolean boolean53 = strSet49.removeAll((java.util.Collection<java.lang.String>) strSet52);
        java.util.Locale locale54 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet55 = locale54.getUnicodeLocaleAttributes();
        org.joda.time.DurationFieldType durationFieldType56 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.DurationFieldType durationFieldType57 = org.joda.time.DurationFieldType.hours();
        org.joda.time.DurationFieldType[] durationFieldTypeArray58 = new org.joda.time.DurationFieldType[] { durationFieldType56, durationFieldType57 };
        org.joda.time.DurationFieldType[] durationFieldTypeArray59 = strSet55.toArray(durationFieldTypeArray58);
        boolean boolean60 = strSet49.containsAll((java.util.Collection<java.lang.String>) strSet55);
        java.lang.Object[] objArray61 = strSet55.toArray();
        boolean boolean62 = strSet36.retainAll((java.util.Collection<java.lang.String>) strSet55);
        boolean boolean63 = strSet27.addAll((java.util.Collection<java.lang.String>) strSet55);
        org.joda.time.DateTimeFieldType dateTimeFieldType64 = org.joda.time.DateTimeFieldType.yearOfEra();
        boolean boolean65 = strSet55.remove((java.lang.Object) dateTimeFieldType64);
        org.joda.time.LocalDateTime.Property property66 = localDateTime3.property(dateTimeFieldType64);
        org.joda.time.DateTimeField[] dateTimeFieldArray67 = localDateTime3.getFields();
        org.joda.time.DateTimeField[] dateTimeFieldArray68 = localDateTime3.getFields();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+07:10:22.088" + "'", str9, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDateTime13);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "0100-02-22T14:33:47.463" + "'", str14, "0100-02-22T14:33:47.463");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "");
        org.junit.Assert.assertNotNull(strSet17);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "");
        org.junit.Assert.assertNotNull(strSet21);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[]");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "");
        org.junit.Assert.assertNotNull(strSet24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "");
        org.junit.Assert.assertNotNull(strSet27);
        org.junit.Assert.assertNotNull(durationFieldType28);
        org.junit.Assert.assertNotNull(durationFieldType29);
        org.junit.Assert.assertNotNull(durationFieldTypeArray30);
        org.junit.Assert.assertNotNull(durationFieldTypeArray31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "");
        org.junit.Assert.assertNotNull(strSet36);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[]");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "");
        org.junit.Assert.assertNotNull(strSet39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "");
        org.junit.Assert.assertNotNull(strSet42);
        org.junit.Assert.assertNotNull(durationFieldType43);
        org.junit.Assert.assertNotNull(durationFieldType44);
        org.junit.Assert.assertNotNull(durationFieldTypeArray45);
        org.junit.Assert.assertNotNull(durationFieldTypeArray46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "");
        org.junit.Assert.assertNotNull(strSet49);
        org.junit.Assert.assertNotNull(objArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[]");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "");
        org.junit.Assert.assertNotNull(strSet52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "");
        org.junit.Assert.assertNotNull(strSet55);
        org.junit.Assert.assertNotNull(durationFieldType56);
        org.junit.Assert.assertNotNull(durationFieldType57);
        org.junit.Assert.assertNotNull(durationFieldTypeArray58);
        org.junit.Assert.assertNotNull(durationFieldTypeArray59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(objArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray61), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray61), "[]");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertNotNull(dateTimeFieldArray67);
        org.junit.Assert.assertNotNull(dateTimeFieldArray68);
    }

    @Test
    public void test10116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10116");
        java.util.Locale locale0 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet1 = locale0.getUnicodeLocaleAttributes();
        java.lang.String str2 = locale0.toLanguageTag();
        java.lang.String str3 = locale0.getScript();
        java.util.Set<java.lang.Character> charSet4 = locale0.getExtensionKeys();
        java.util.Set<java.lang.String> strSet5 = locale0.getUnicodeLocaleAttributes();
        java.util.Locale locale6 = java.util.Locale.ITALIAN;
        java.util.Set<java.lang.String> strSet7 = locale6.getUnicodeLocaleKeys();
        boolean boolean8 = strSet5.addAll((java.util.Collection<java.lang.String>) strSet7);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "");
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "und" + "'", str2, "und");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(charSet4);
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "it");
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test10117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10117");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale1 = java.util.Locale.FRENCH;
        java.util.Locale.setDefault(category0, locale1);
        java.lang.String str3 = locale1.getDisplayName();
        java.util.Set<java.lang.String> strSet4 = locale1.getUnicodeLocaleAttributes();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str7 = dateTimeZone5.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime8 = org.joda.time.LocalDateTime.now(dateTimeZone5);
        org.joda.time.LocalDateTime.Property property9 = localDateTime8.millisOfDay();
        int int10 = localDateTime8.getCenturyOfEra();
        org.joda.time.LocalDateTime.Property property11 = localDateTime8.dayOfWeek();
        boolean boolean12 = strSet4.remove((java.lang.Object) localDateTime8);
        org.joda.time.LocalDateTime.Property property13 = localDateTime8.millisOfDay();
        int int14 = localDateTime8.getMonthOfYear();
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime();
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.LocalDateTime localDateTime18 = localDateTime15.withDurationAdded(readableDuration16, (int) '#');
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.withYear(0);
        org.joda.time.LocalDateTime.Property property21 = localDateTime20.year();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime20.plusMinutes((int) (byte) -1);
        boolean boolean24 = localDateTime8.isBefore((org.joda.time.ReadablePartial) localDateTime23);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime26 = localDateTime8.withMinuteOfHour(26393979);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26393979 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "fran\347ais" + "'", str3, "fran\347ais");
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+07:10:22.088" + "'", str7, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 20 + "'", int10 == 20);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test10118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10118");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("hours");
        java.lang.String str2 = languageRange1.getRange();
        double double3 = languageRange1.getWeight();
        double double4 = languageRange1.getWeight();
        double double5 = languageRange1.getWeight();
        double double6 = languageRange1.getWeight();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str9 = dateTimeZone7.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime10 = org.joda.time.LocalDateTime.now(dateTimeZone7);
        org.joda.time.LocalDateTime.Property property11 = localDateTime10.millisOfDay();
        org.joda.time.ReadableInstant readableInstant12 = null;
        long long13 = property11.getDifferenceAsLong(readableInstant12);
        java.util.Locale locale14 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str15 = locale14.getISO3Language();
        java.lang.String str16 = property11.getAsShortText(locale14);
        org.joda.time.DurationField durationField17 = property11.getDurationField();
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime();
        org.joda.time.ReadableDuration readableDuration19 = null;
        org.joda.time.LocalDateTime localDateTime21 = localDateTime18.withDurationAdded(readableDuration19, (int) '#');
        org.joda.time.LocalDateTime.Property property22 = localDateTime21.weekyear();
        int int23 = property22.getMaximumValue();
        org.joda.time.DurationField durationField24 = property22.getDurationField();
        int int25 = durationField17.compareTo(durationField24);
        boolean boolean26 = languageRange1.equals((java.lang.Object) durationField17);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hours" + "'", str2, "hours");
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 1.0d + "'", double4 == 1.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
        org.junit.Assert.assertNotNull(dateTimeZone7);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+07:10:22.088" + "'", str9, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
// flaky:         org.junit.Assert.assertTrue("'" + long13 + "' != '" + 25822088L + "'", long13 == 25822088L);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "fra" + "'", str15, "fra");
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "52427563" + "'", str16, "52427563");
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 292278993 + "'", int23 == 292278993);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test10119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10119");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.millisOfDay();
        org.joda.time.ReadableInstant readableInstant5 = null;
        long long6 = property4.getDifferenceAsLong(readableInstant5);
        org.joda.time.DurationField durationField7 = property4.getLeapDurationField();
        java.util.Locale locale8 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet9 = locale8.getUnicodeLocaleAttributes();
        java.lang.String str10 = locale8.getLanguage();
        java.lang.String str11 = locale8.toLanguageTag();
        java.lang.String str12 = property4.getAsShortText(locale8);
        org.joda.time.LocalDateTime localDateTime13 = property4.roundCeilingCopy();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.minusHours((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology18 = localDateTime17.getChronology();
        org.joda.time.DurationField durationField19 = chronology18.hours();
        java.lang.String str20 = chronology18.toString();
        org.joda.time.DateTimeField dateTimeField21 = chronology18.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField22 = chronology18.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime();
        org.joda.time.ReadableDuration readableDuration24 = null;
        org.joda.time.LocalDateTime localDateTime26 = localDateTime23.withDurationAdded(readableDuration24, (int) '#');
        org.joda.time.LocalDateTime.Property property27 = localDateTime26.weekyear();
        org.joda.time.LocalDateTime localDateTime29 = localDateTime26.minusMillis((-1));
        org.joda.time.LocalDateTime.Property property30 = localDateTime26.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime31 = property30.roundHalfFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str34 = dateTimeZone32.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime35 = org.joda.time.LocalDateTime.now(dateTimeZone32);
        org.joda.time.LocalDateTime.Property property36 = localDateTime35.millisOfDay();
        org.joda.time.DurationFieldType durationFieldType37 = org.joda.time.DurationFieldType.centuries();
        boolean boolean38 = localDateTime35.equals((java.lang.Object) durationFieldType37);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray39 = localDateTime35.getFieldTypes();
        java.lang.String str40 = localDateTime35.toString();
        org.joda.time.LocalDateTime localDateTime42 = localDateTime35.plusMillis(22);
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = org.joda.time.DateTimeFieldType.secondOfDay();
        boolean boolean44 = localDateTime35.isSupported(dateTimeFieldType43);
        int int45 = localDateTime31.indexOf(dateTimeFieldType43);
        int[] intArray47 = chronology18.get((org.joda.time.ReadablePartial) localDateTime31, 1645629358650L);
        org.joda.time.LocalDateTime localDateTime49 = localDateTime31.plusWeeks(26149500);
        org.joda.time.LocalDateTime localDateTime51 = localDateTime49.withYearOfEra(10);
        org.joda.time.DateTimeFieldType dateTimeFieldType52 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.DateTimeField dateTimeField54 = dateTimeFieldType52.getField(chronology53);
        java.util.Locale locale56 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale57 = locale56.stripExtensions();
        java.lang.String str58 = dateTimeField54.getAsShortText(100, locale57);
        int int60 = dateTimeField54.getLeapAmount((long) (short) 100);
        org.joda.time.DurationField durationField61 = dateTimeField54.getRangeDurationField();
        boolean boolean62 = dateTimeField54.isLenient();
        org.joda.time.LocalDateTime localDateTime63 = new org.joda.time.LocalDateTime();
        org.joda.time.ReadableDuration readableDuration64 = null;
        org.joda.time.LocalDateTime localDateTime66 = localDateTime63.withDurationAdded(readableDuration64, (int) '#');
        org.joda.time.LocalDateTime.Property property67 = localDateTime66.weekyear();
        int int68 = dateTimeField54.getMaximumValue((org.joda.time.ReadablePartial) localDateTime66);
        org.joda.time.ReadableDuration readableDuration69 = null;
        org.joda.time.LocalDateTime localDateTime70 = localDateTime66.plus(readableDuration69);
        org.joda.time.DurationFieldType durationFieldType71 = org.joda.time.DurationFieldType.days();
        java.lang.String str72 = durationFieldType71.toString();
        org.joda.time.LocalDateTime localDateTime74 = localDateTime70.withFieldAdded(durationFieldType71, 0);
        org.joda.time.LocalDateTime localDateTime76 = localDateTime51.withFieldAdded(durationFieldType71, 0);
        org.joda.time.LocalDateTime localDateTime78 = localDateTime13.withFieldAdded(durationFieldType71, 55005041);
        org.joda.time.LocalDateTime.Property property79 = localDateTime13.yearOfEra();
        org.joda.time.LocalDateTime localDateTime81 = localDateTime13.minusMillis(437);
        org.joda.time.Chronology chronology82 = localDateTime81.getChronology();
        org.joda.time.LocalDateTime.Property property83 = localDateTime81.centuryOfEra();
        org.junit.Assert.assertNotNull(dateTimeZone0);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+07:10:22.088" + "'", str2, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
// flaky:         org.junit.Assert.assertTrue("'" + long6 + "' != '" + 25822088L + "'", long6 == 25822088L);
        org.junit.Assert.assertNull(durationField7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "und" + "'", str11, "und");
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "52427578" + "'", str12, "52427578");
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "ISOChronology[UTC]" + "'", str20, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(dateTimeZone32);
// flaky:         org.junit.Assert.assertEquals("'" + str34 + "' != '" + "+07:10:22.088" + "'", str34, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(durationFieldType37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray39);
// flaky:         org.junit.Assert.assertEquals("'" + str40 + "' != '" + "2022-02-22T14:33:47.578" + "'", str40, "2022-02-22T14:33:47.578");
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(dateTimeFieldType43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[2022, 2, 23, 54958650]");
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(dateTimeFieldType52);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "100" + "'", str58, "100");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(durationField61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertNotNull(property67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1439 + "'", int68 == 1439);
        org.junit.Assert.assertNotNull(localDateTime70);
        org.junit.Assert.assertNotNull(durationFieldType71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "days" + "'", str72, "days");
        org.junit.Assert.assertNotNull(localDateTime74);
        org.junit.Assert.assertNotNull(localDateTime76);
        org.junit.Assert.assertNotNull(localDateTime78);
        org.junit.Assert.assertNotNull(property79);
        org.junit.Assert.assertNotNull(localDateTime81);
        org.junit.Assert.assertNotNull(chronology82);
        org.junit.Assert.assertNotNull(property83);
    }

    @Test
    public void test10120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10120");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((-19046), 26587, 26278944, 26586, 241);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26586 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test10121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10121");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        org.joda.time.LocalDateTime localDateTime3 = localDateTime0.withDurationAdded(readableDuration1, (int) '#');
        org.joda.time.LocalDateTime.Property property4 = localDateTime0.era();
        int int5 = localDateTime0.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime0.withWeekOfWeekyear((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime();
        java.lang.String str9 = localDateTime8.toString();
        int int10 = localDateTime8.getCenturyOfEra();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime8.minusMonths(2);
        org.joda.time.LocalDateTime.Property property13 = localDateTime12.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str16 = dateTimeZone14.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime17 = org.joda.time.LocalDateTime.now(dateTimeZone14);
        org.joda.time.LocalDateTime.Property property18 = localDateTime17.millisOfDay();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime17.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime17.plusHours((int) ' ');
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.DateTime dateTime24 = localDateTime22.toDateTime(readableInstant23);
        long long25 = dateTime24.getMillis();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str28 = dateTimeZone26.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime29 = org.joda.time.LocalDateTime.now(dateTimeZone26);
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = localDateTime29.getFieldType((int) (short) 0);
        boolean boolean32 = dateTime24.isSupported(dateTimeFieldType31);
        org.joda.time.DateTime dateTime33 = localDateTime12.toDateTime((org.joda.time.ReadableInstant) dateTime24);
        int int34 = localDateTime7.compareTo((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.LocalDateTime.Property property35 = localDateTime12.minuteOfHour();
        int int36 = property35.getLeapAmount();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 22 + "'", int5 == 22);
        org.junit.Assert.assertNotNull(localDateTime7);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "2022-02-22T14:33:47.626" + "'", str9, "2022-02-22T14:33:47.626");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 20 + "'", int10 == 20);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+07:10:22.088" + "'", str16, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
// flaky:         org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1645629805538L + "'", long25 == 1645629805538L);
        org.junit.Assert.assertNotNull(dateTimeZone26);
// flaky:         org.junit.Assert.assertEquals("'" + str28 + "' != '" + "+07:10:22.088" + "'", str28, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(dateTimeFieldType31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
    }

    @Test
    public void test10122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10122");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getShortName((long) (short) 10);
        long long4 = dateTimeZone0.convertUTCToLocal((long) ' ');
        java.lang.String str5 = dateTimeZone0.toString();
        long long8 = dateTimeZone0.adjustOffset((long) (short) 100, false);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone0);
        boolean boolean11 = dateTimeZone0.equals((java.lang.Object) "CA");
        int int13 = dateTimeZone0.getOffsetFromLocal(1094L);
        java.util.TimeZone timeZone14 = dateTimeZone0.toTimeZone();
        timeZone14.setRawOffset((int) (byte) -1);
        timeZone14.setRawOffset(67);
        timeZone14.setRawOffset(26147585);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str23 = timeZone14.getDisplayName(true, 26154433);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal style: 26154433");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+07:10:22.088" + "'", str2, "+07:10:22.088");
// flaky:         org.junit.Assert.assertTrue("'" + long4 + "' != '" + 25822120L + "'", long4 == 25822120L);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+07:10:22.088" + "'", str5, "+07:10:22.088");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 100L + "'", long8 == 100L);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 25822088 + "'", int13 == 25822088);
        org.junit.Assert.assertNotNull(timeZone14);
// flaky:         org.junit.Assert.assertEquals(timeZone14.getDisplayName(), "GMT+07:15");
    }

    @Test
    public void test10123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10123");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DurationField durationField3 = chronology2.weekyears();
        org.joda.time.DurationField durationField4 = chronology2.centuries();
        org.joda.time.DurationField durationField5 = chronology2.hours();
        org.joda.time.DurationField durationField6 = chronology2.seconds();
        org.joda.time.DateTimeField dateTimeField7 = chronology2.secondOfDay();
        org.joda.time.DateTimeField dateTimeField8 = chronology2.minuteOfDay();
        org.joda.time.DurationField durationField9 = chronology2.weekyears();
        long long12 = durationField9.getDifferenceAsLong(1645629653927L, 1645629800440L);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
    }

    @Test
    public void test10124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10124");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        org.joda.time.LocalDateTime localDateTime3 = localDateTime0.withDurationAdded(readableDuration1, (int) '#');
        org.joda.time.LocalDateTime.Property property4 = localDateTime0.era();
        int int5 = localDateTime0.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime0.withWeekOfWeekyear((int) (byte) 1);
        int int8 = localDateTime0.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime0.plusDays(500);
        org.joda.time.DurationFieldType durationFieldType11 = org.joda.time.DurationFieldType.days();
        java.lang.String str12 = durationFieldType11.toString();
        boolean boolean13 = localDateTime10.isSupported(durationFieldType11);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.LocalDateTime localDateTime15 = localDateTime10.plus(readablePeriod14);
        org.joda.time.DurationFieldType durationFieldType16 = org.joda.time.DurationFieldType.hours();
        org.joda.time.Chronology chronology17 = null;
        boolean boolean18 = durationFieldType16.isSupported(chronology17);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime10.withFieldAdded(durationFieldType16, 3);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime20.withDate(500, 7, 17);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.withYear(1970);
        java.util.Locale.Builder builder28 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder30 = builder28.addUnicodeLocaleAttribute("und");
        java.util.Locale locale31 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale32 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str33 = locale31.getDisplayCountry(locale32);
        java.lang.String str34 = locale32.getDisplayName();
        java.util.Locale.Builder builder35 = builder30.setLocale(locale32);
        java.util.Locale locale36 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale37 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str38 = locale36.getDisplayCountry(locale37);
        java.util.Locale locale39 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale40 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str41 = locale39.getDisplayCountry(locale40);
        java.lang.String str42 = locale36.getDisplayVariant(locale39);
        java.util.Locale locale43 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale44 = locale43.stripExtensions();
        java.lang.String str45 = locale36.getDisplayLanguage(locale44);
        java.util.Locale.Builder builder46 = builder30.setLocale(locale44);
        java.util.Locale.Builder builder47 = builder46.clearExtensions();
        java.util.Locale.Builder builder48 = builder46.clear();
        java.util.Locale.Builder builder49 = builder48.clear();
        java.util.Locale.Builder builder50 = builder49.clear();
        java.util.Locale.Builder builder52 = builder50.removeUnicodeLocaleAttribute("26200367");
        java.util.Locale locale53 = builder50.build();
        java.lang.String str54 = locale53.getCountry();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str55 = localDateTime26.toString("2022-02-22T07:20:47.914", locale53);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: T");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 22 + "'", int5 == 22);
        org.junit.Assert.assertNotNull(localDateTime7);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 14 + "'", int8 == 14);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(durationFieldType11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "days" + "'", str12, "days");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(durationFieldType16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Canada" + "'", str33, "Canada");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "fran\347ais (Canada)" + "'", str34, "fran\347ais (Canada)");
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Canada" + "'", str38, "Canada");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "Canada" + "'", str41, "Canada");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "fran\347ais" + "'", str45, "fran\347ais");
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
    }

    @Test
    public void test10125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10125");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder2 = builder1.clearExtensions();
        java.util.Locale locale3 = builder2.build();
        java.util.Locale.Builder builder5 = builder2.addUnicodeLocaleAttribute("26201959");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder7 = builder2.setLanguage("52293031");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed language: 52293031 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "");
        org.junit.Assert.assertNotNull(builder5);
    }

    @Test
    public void test10126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10126");
        org.joda.time.DurationFieldType durationFieldType1 = org.joda.time.DurationFieldType.days();
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.hours();
        org.joda.time.DurationField durationField6 = durationFieldType1.getField(chronology4);
        org.joda.time.Chronology chronology7 = chronology4.withUTC();
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        long long11 = chronology4.add(readablePeriod8, (-1010876166L), (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime(1645629375880L, chronology4);
        org.joda.time.DateTimeField dateTimeField13 = chronology4.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField14 = chronology4.weekOfWeekyear();
        long long16 = dateTimeField14.roundHalfEven(1645629639327L);
        int int18 = dateTimeField14.get((long) 24);
        org.junit.Assert.assertNotNull(durationFieldType1);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1010876166L) + "'", long11 == (-1010876166L));
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1645401600000L + "'", long16 == 1645401600000L);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
    }

    @Test
    public void test10127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10127");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Locale locale3 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale4 = java.util.Locale.CANADA;
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str7 = dateTimeZone5.getShortName((long) (short) 10);
        long long9 = dateTimeZone5.convertUTCToLocal((long) ' ');
        java.lang.String str10 = dateTimeZone5.toString();
        boolean boolean12 = dateTimeZone5.equals((java.lang.Object) (short) 100);
        java.util.Locale locale14 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str15 = dateTimeZone5.getShortName((long) (-1), locale14);
        java.util.Locale locale16 = java.util.Locale.CANADA;
        java.util.Locale locale17 = java.util.Locale.FRENCH;
        java.util.Locale[] localeArray18 = new java.util.Locale[] { locale3, locale4, locale14, locale16, locale17 };
        java.util.ArrayList<java.util.Locale> localeList19 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList19, localeArray18);
        java.util.Locale locale21 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.util.Locale>) localeList19);
        java.util.Locale locale22 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet23 = locale22.getUnicodeLocaleAttributes();
        java.lang.Object[] objArray24 = strSet23.toArray();
        boolean boolean25 = strSet23.isEmpty();
        java.util.Locale locale26 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet27 = locale26.getUnicodeLocaleAttributes();
        java.lang.Object[] objArray28 = strSet27.toArray();
        java.util.Locale locale29 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet30 = locale29.getUnicodeLocaleAttributes();
        boolean boolean31 = strSet27.removeAll((java.util.Collection<java.lang.String>) strSet30);
        java.util.Locale locale32 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet33 = locale32.getUnicodeLocaleAttributes();
        org.joda.time.DurationFieldType durationFieldType34 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.DurationFieldType durationFieldType35 = org.joda.time.DurationFieldType.hours();
        org.joda.time.DurationFieldType[] durationFieldTypeArray36 = new org.joda.time.DurationFieldType[] { durationFieldType34, durationFieldType35 };
        org.joda.time.DurationFieldType[] durationFieldTypeArray37 = strSet33.toArray(durationFieldTypeArray36);
        boolean boolean38 = strSet27.containsAll((java.util.Collection<java.lang.String>) strSet33);
        java.lang.Object[] objArray39 = strSet33.toArray();
        boolean boolean40 = strSet23.removeAll((java.util.Collection<java.lang.String>) strSet33);
        java.util.Locale.FilteringMode filteringMode41 = java.util.Locale.FilteringMode.AUTOSELECT_FILTERING;
        java.util.List<java.lang.String> strList42 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet23, filteringMode41);
        java.util.Locale locale43 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet44 = locale43.getUnicodeLocaleAttributes();
        java.util.Locale locale45 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet46 = locale45.getUnicodeLocaleAttributes();
        java.lang.Object[] objArray47 = strSet46.toArray();
        java.util.Locale locale48 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet49 = locale48.getUnicodeLocaleAttributes();
        boolean boolean50 = strSet46.removeAll((java.util.Collection<java.lang.String>) strSet49);
        java.util.Locale locale51 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet52 = locale51.getUnicodeLocaleAttributes();
        org.joda.time.DurationFieldType durationFieldType53 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.DurationFieldType durationFieldType54 = org.joda.time.DurationFieldType.hours();
        org.joda.time.DurationFieldType[] durationFieldTypeArray55 = new org.joda.time.DurationFieldType[] { durationFieldType53, durationFieldType54 };
        org.joda.time.DurationFieldType[] durationFieldTypeArray56 = strSet52.toArray(durationFieldTypeArray55);
        boolean boolean57 = strSet46.containsAll((java.util.Collection<java.lang.String>) strSet52);
        java.util.Locale locale58 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet59 = locale58.getUnicodeLocaleAttributes();
        java.lang.Object[] objArray60 = strSet59.toArray();
        boolean boolean61 = strSet46.addAll((java.util.Collection<java.lang.String>) strSet59);
        boolean boolean62 = strSet44.retainAll((java.util.Collection<java.lang.String>) strSet46);
        int int63 = strSet46.size();
        java.util.Locale locale64 = java.util.Locale.CANADA_FRENCH;
        java.util.Set<java.lang.String> strSet65 = locale64.getUnicodeLocaleKeys();
        java.util.stream.Stream<java.lang.String> strStream66 = strSet65.parallelStream();
        boolean boolean67 = strSet46.containsAll((java.util.Collection<java.lang.String>) strSet65);
        java.lang.String str68 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet65);
        java.util.stream.Stream<java.lang.String> strStream69 = strSet65.stream();
        java.util.stream.Stream<java.lang.String> strStream70 = strSet65.parallelStream();
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en_CA");
        org.junit.Assert.assertNotNull(dateTimeZone5);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+07:10:22.088" + "'", str7, "+07:10:22.088");
// flaky:         org.junit.Assert.assertTrue("'" + long9 + "' != '" + 25822120L + "'", long9 == 25822120L);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+07:10:22.088" + "'", str10, "+07:10:22.088");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "fr_CA");
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+07:10:22.088" + "'", str15, "+07:10:22.088");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "fr");
        org.junit.Assert.assertNotNull(localeArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNull(locale21);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "");
        org.junit.Assert.assertNotNull(strSet23);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "");
        org.junit.Assert.assertNotNull(strSet27);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[]");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "");
        org.junit.Assert.assertNotNull(strSet30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "");
        org.junit.Assert.assertNotNull(strSet33);
        org.junit.Assert.assertNotNull(durationFieldType34);
        org.junit.Assert.assertNotNull(durationFieldType35);
        org.junit.Assert.assertNotNull(durationFieldTypeArray36);
        org.junit.Assert.assertNotNull(durationFieldTypeArray37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + filteringMode41 + "' != '" + java.util.Locale.FilteringMode.AUTOSELECT_FILTERING + "'", filteringMode41.equals(java.util.Locale.FilteringMode.AUTOSELECT_FILTERING));
        org.junit.Assert.assertNotNull(strList42);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "");
        org.junit.Assert.assertNotNull(strSet44);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "");
        org.junit.Assert.assertNotNull(strSet46);
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray47), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray47), "[]");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "");
        org.junit.Assert.assertNotNull(strSet49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "");
        org.junit.Assert.assertNotNull(strSet52);
        org.junit.Assert.assertNotNull(durationFieldType53);
        org.junit.Assert.assertNotNull(durationFieldType54);
        org.junit.Assert.assertNotNull(durationFieldTypeArray55);
        org.junit.Assert.assertNotNull(durationFieldTypeArray56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "");
        org.junit.Assert.assertNotNull(strSet59);
        org.junit.Assert.assertNotNull(objArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray60), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray60), "[]");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(strSet65);
        org.junit.Assert.assertNotNull(strStream66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNull(str68);
        org.junit.Assert.assertNotNull(strStream69);
        org.junit.Assert.assertNotNull(strStream70);
    }

    @Test
    public void test10128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10128");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        org.joda.time.LocalDateTime localDateTime3 = localDateTime0.withDurationAdded(readableDuration1, (int) '#');
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.weekyear();
        java.lang.String str5 = property4.getAsString();
        org.joda.time.LocalDateTime localDateTime7 = property4.setCopy(67);
        int int8 = property4.get();
        int int9 = property4.get();
        org.joda.time.LocalDateTime localDateTime10 = property4.withMinimumValue();
        org.joda.time.LocalDateTime localDateTime11 = property4.roundFloorCopy();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.withYear(81377961);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "2022" + "'", str5, "2022");
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2022 + "'", int8 == 2022);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2022 + "'", int9 == 2022);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
    }

    @Test
    public void test10129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10129");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.millisOfDay();
        java.lang.String str5 = property4.getName();
        org.joda.time.LocalDateTime localDateTime6 = property4.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.minusYears(7);
        int int9 = localDateTime8.getEra();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str12 = dateTimeZone10.getShortName((long) (short) 10);
        long long14 = dateTimeZone10.convertUTCToLocal((long) ' ');
        java.lang.String str15 = dateTimeZone10.toString();
        java.lang.String str16 = dateTimeZone10.toString();
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime8, dateTimeZone10);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime8.withMinuteOfHour(0);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime8.withYearOfCentury((int) (byte) 10);
        int int22 = localDateTime21.getYearOfCentury();
        int[] intArray23 = localDateTime21.getValues();
        org.joda.time.LocalDateTime.Property property24 = localDateTime21.year();
        org.joda.time.LocalDateTime localDateTime26 = property24.addToCopy(948);
        boolean boolean27 = property24.isLeap();
        org.junit.Assert.assertNotNull(dateTimeZone0);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+07:10:22.088" + "'", str2, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "millisOfDay" + "'", str5, "millisOfDay");
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(dateTimeZone10);
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+07:10:22.088" + "'", str12, "+07:10:22.088");
// flaky:         org.junit.Assert.assertTrue("'" + long14 + "' != '" + 25822120L + "'", long14 == 25822120L);
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+07:10:22.088" + "'", str15, "+07:10:22.088");
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+07:10:22.088" + "'", str16, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10 + "'", int22 == 10);
        org.junit.Assert.assertNotNull(intArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[2010, 2, 22, 52427843]");
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test10130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10130");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        org.joda.time.LocalDateTime localDateTime3 = localDateTime0.withDurationAdded(readableDuration1, (int) '#');
        org.joda.time.LocalDateTime.Property property4 = localDateTime0.era();
        int int5 = localDateTime0.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime0.withWeekOfWeekyear((int) (byte) 1);
        int int8 = localDateTime0.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime0.plusDays(500);
        org.joda.time.DurationFieldType durationFieldType11 = org.joda.time.DurationFieldType.days();
        java.lang.String str12 = durationFieldType11.toString();
        boolean boolean13 = localDateTime10.isSupported(durationFieldType11);
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology17 = localDateTime16.getChronology();
        org.joda.time.DurationField durationField18 = chronology17.weekyears();
        org.joda.time.DurationField durationField19 = chronology17.centuries();
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime((long) (byte) 0, chronology17);
        org.joda.time.DurationField durationField21 = chronology17.millis();
        org.joda.time.DateTimeField dateTimeField22 = chronology17.minuteOfDay();
        org.joda.time.DurationField durationField23 = durationFieldType11.getField(chronology17);
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology27 = localDateTime26.getChronology();
        org.joda.time.DurationField durationField28 = chronology27.weekyears();
        org.joda.time.DurationField durationField29 = chronology27.centuries();
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime((long) (byte) 0, chronology27);
        org.joda.time.DurationField durationField31 = chronology27.millis();
        org.joda.time.DurationField durationField32 = chronology27.months();
        org.joda.time.DurationField durationField33 = chronology27.halfdays();
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str36 = dateTimeZone34.getShortName((long) (short) 10);
        long long38 = dateTimeZone34.convertUTCToLocal((long) ' ');
        java.lang.String str39 = dateTimeZone34.toString();
        boolean boolean41 = dateTimeZone34.equals((java.lang.Object) (short) 100);
        java.util.Locale locale43 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str44 = dateTimeZone34.getShortName((long) (-1), locale43);
        org.joda.time.LocalDateTime localDateTime45 = new org.joda.time.LocalDateTime(dateTimeZone34);
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime48 = localDateTime45.withField(dateTimeFieldType46, (int) (short) 100);
        org.joda.time.LocalDateTime localDateTime50 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology51 = localDateTime50.getChronology();
        org.joda.time.DurationField durationField52 = chronology51.weekyears();
        org.joda.time.DurationField durationField53 = chronology51.centuries();
        org.joda.time.DateTimeField dateTimeField54 = chronology51.minuteOfDay();
        long long58 = chronology51.add((long) 2, (long) 21, (int) '4');
        boolean boolean59 = dateTimeFieldType46.isSupported(chronology51);
        org.joda.time.DateTimeZone dateTimeZone60 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str62 = dateTimeZone60.getShortName((long) (short) 10);
        long long64 = dateTimeZone60.convertUTCToLocal((long) ' ');
        java.lang.String str65 = dateTimeZone60.toString();
        long long67 = dateTimeZone60.previousTransition(32L);
        org.joda.time.LocalDateTime localDateTime68 = new org.joda.time.LocalDateTime(dateTimeZone60);
        org.joda.time.Chronology chronology69 = chronology51.withZone(dateTimeZone60);
        org.joda.time.DateTimeZone dateTimeZone71 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 100);
        org.joda.time.Chronology chronology72 = chronology51.withZone(dateTimeZone71);
        org.joda.time.Chronology chronology73 = chronology27.withZone(dateTimeZone71);
        org.joda.time.DurationField durationField74 = durationFieldType11.getField(chronology27);
        org.joda.time.DurationField durationField75 = chronology27.halfdays();
        org.joda.time.DurationField durationField76 = chronology27.months();
        org.joda.time.DateTimeField dateTimeField77 = chronology27.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField78 = chronology27.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField79 = chronology27.dayOfWeek();
        org.joda.time.DurationField durationField80 = chronology27.seconds();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 22 + "'", int5 == 22);
        org.junit.Assert.assertNotNull(localDateTime7);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 14 + "'", int8 == 14);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(durationFieldType11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "days" + "'", str12, "days");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(dateTimeZone34);
// flaky:         org.junit.Assert.assertEquals("'" + str36 + "' != '" + "+07:10:22.088" + "'", str36, "+07:10:22.088");
// flaky:         org.junit.Assert.assertTrue("'" + long38 + "' != '" + 25822120L + "'", long38 == 25822120L);
// flaky:         org.junit.Assert.assertEquals("'" + str39 + "' != '" + "+07:10:22.088" + "'", str39, "+07:10:22.088");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "fr_CA");
// flaky:         org.junit.Assert.assertEquals("'" + str44 + "' != '" + "+07:10:22.088" + "'", str44, "+07:10:22.088");
        org.junit.Assert.assertNotNull(dateTimeFieldType46);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(durationField52);
        org.junit.Assert.assertNotNull(durationField53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 1094L + "'", long58 == 1094L);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(dateTimeZone60);
// flaky:         org.junit.Assert.assertEquals("'" + str62 + "' != '" + "+07:10:22.088" + "'", str62, "+07:10:22.088");
// flaky:         org.junit.Assert.assertTrue("'" + long64 + "' != '" + 25822120L + "'", long64 == 25822120L);
// flaky:         org.junit.Assert.assertEquals("'" + str65 + "' != '" + "+07:10:22.088" + "'", str65, "+07:10:22.088");
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 32L + "'", long67 == 32L);
        org.junit.Assert.assertNotNull(chronology69);
        org.junit.Assert.assertNotNull(dateTimeZone71);
        org.junit.Assert.assertNotNull(chronology72);
        org.junit.Assert.assertNotNull(chronology73);
        org.junit.Assert.assertNotNull(durationField74);
        org.junit.Assert.assertNotNull(durationField75);
        org.junit.Assert.assertNotNull(durationField76);
        org.junit.Assert.assertNotNull(dateTimeField77);
        org.junit.Assert.assertNotNull(dateTimeField78);
        org.junit.Assert.assertNotNull(dateTimeField79);
        org.junit.Assert.assertNotNull(durationField80);
    }

    @Test
    public void test10131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10131");
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology11 = localDateTime10.getChronology();
        org.joda.time.DurationField durationField12 = chronology11.weekyears();
        boolean boolean13 = dateTimeFieldType8.isSupported(chronology11);
        org.joda.time.DateTimeField dateTimeField14 = chronology11.halfdayOfDay();
        org.joda.time.DurationField durationField15 = chronology11.weeks();
        org.joda.time.DateTimeField dateTimeField16 = chronology11.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField17 = chronology11.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField18 = chronology11.hourOfDay();
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime(0L, chronology11);
        org.joda.time.DurationField durationField20 = chronology11.millis();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime(923, 26438393, 27426240, 413, 0, 49, 73, chronology11);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 413 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField20);
    }

    @Test
    public void test10132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10132");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime(241200000, 26285, 26451059, 26269, (-99710), 91, 81506107);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26269 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test10133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10133");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.millisOfDay();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime3.withYear((int) (short) 100);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.minuteOfHour();
        int int8 = property7.get();
        org.joda.time.LocalDateTime localDateTime10 = property7.setCopy((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime11 = property7.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property12 = localDateTime11.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime11.minusMinutes(26169);
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.LocalDateTime localDateTime17 = localDateTime11.withDurationAdded(readableDuration15, 26300363);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType19 = localDateTime17.getFieldType(26163523);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 26163523");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+07:10:22.088" + "'", str2, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 33 + "'", int8 == 33);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime17);
    }

    @Test
    public void test10134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10134");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        org.joda.time.LocalDateTime localDateTime3 = localDateTime0.withDurationAdded(readableDuration1, (int) '#');
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.weekyear();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime3.minusMillis((-1));
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str9 = dateTimeZone7.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime10 = org.joda.time.LocalDateTime.now(dateTimeZone7);
        org.joda.time.LocalDateTime.Property property11 = localDateTime10.millisOfDay();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime10.withYear((int) (short) 100);
        java.lang.String str14 = localDateTime13.toString();
        boolean boolean15 = localDateTime3.isAfter((org.joda.time.ReadablePartial) localDateTime13);
        java.util.Locale locale16 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet17 = locale16.getUnicodeLocaleAttributes();
        java.lang.Object[] objArray18 = strSet17.toArray();
        boolean boolean19 = strSet17.isEmpty();
        java.util.Locale locale20 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet21 = locale20.getUnicodeLocaleAttributes();
        java.lang.Object[] objArray22 = strSet21.toArray();
        java.util.Locale locale23 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet24 = locale23.getUnicodeLocaleAttributes();
        boolean boolean25 = strSet21.removeAll((java.util.Collection<java.lang.String>) strSet24);
        java.util.Locale locale26 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet27 = locale26.getUnicodeLocaleAttributes();
        org.joda.time.DurationFieldType durationFieldType28 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.DurationFieldType durationFieldType29 = org.joda.time.DurationFieldType.hours();
        org.joda.time.DurationFieldType[] durationFieldTypeArray30 = new org.joda.time.DurationFieldType[] { durationFieldType28, durationFieldType29 };
        org.joda.time.DurationFieldType[] durationFieldTypeArray31 = strSet27.toArray(durationFieldTypeArray30);
        boolean boolean32 = strSet21.containsAll((java.util.Collection<java.lang.String>) strSet27);
        java.lang.Object[] objArray33 = strSet27.toArray();
        boolean boolean34 = strSet17.removeAll((java.util.Collection<java.lang.String>) strSet27);
        java.util.Locale locale35 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet36 = locale35.getUnicodeLocaleAttributes();
        java.lang.Object[] objArray37 = strSet36.toArray();
        java.util.Locale locale38 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet39 = locale38.getUnicodeLocaleAttributes();
        boolean boolean40 = strSet36.removeAll((java.util.Collection<java.lang.String>) strSet39);
        java.util.Locale locale41 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet42 = locale41.getUnicodeLocaleAttributes();
        org.joda.time.DurationFieldType durationFieldType43 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.DurationFieldType durationFieldType44 = org.joda.time.DurationFieldType.hours();
        org.joda.time.DurationFieldType[] durationFieldTypeArray45 = new org.joda.time.DurationFieldType[] { durationFieldType43, durationFieldType44 };
        org.joda.time.DurationFieldType[] durationFieldTypeArray46 = strSet42.toArray(durationFieldTypeArray45);
        boolean boolean47 = strSet36.containsAll((java.util.Collection<java.lang.String>) strSet42);
        java.util.Locale locale48 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet49 = locale48.getUnicodeLocaleAttributes();
        java.lang.Object[] objArray50 = strSet49.toArray();
        java.util.Locale locale51 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet52 = locale51.getUnicodeLocaleAttributes();
        boolean boolean53 = strSet49.removeAll((java.util.Collection<java.lang.String>) strSet52);
        java.util.Locale locale54 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet55 = locale54.getUnicodeLocaleAttributes();
        org.joda.time.DurationFieldType durationFieldType56 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.DurationFieldType durationFieldType57 = org.joda.time.DurationFieldType.hours();
        org.joda.time.DurationFieldType[] durationFieldTypeArray58 = new org.joda.time.DurationFieldType[] { durationFieldType56, durationFieldType57 };
        org.joda.time.DurationFieldType[] durationFieldTypeArray59 = strSet55.toArray(durationFieldTypeArray58);
        boolean boolean60 = strSet49.containsAll((java.util.Collection<java.lang.String>) strSet55);
        java.lang.Object[] objArray61 = strSet55.toArray();
        boolean boolean62 = strSet36.retainAll((java.util.Collection<java.lang.String>) strSet55);
        boolean boolean63 = strSet27.addAll((java.util.Collection<java.lang.String>) strSet55);
        org.joda.time.DateTimeFieldType dateTimeFieldType64 = org.joda.time.DateTimeFieldType.yearOfEra();
        boolean boolean65 = strSet55.remove((java.lang.Object) dateTimeFieldType64);
        org.joda.time.LocalDateTime.Property property66 = localDateTime3.property(dateTimeFieldType64);
        org.joda.time.ReadableDuration readableDuration67 = null;
        org.joda.time.LocalDateTime localDateTime68 = localDateTime3.minus(readableDuration67);
        org.joda.time.LocalDateTime.Property property69 = localDateTime3.era();
        org.joda.time.LocalDateTime localDateTime71 = localDateTime3.withSecondOfMinute((int) ' ');
        org.joda.time.DateTimeZone dateTimeZone72 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str74 = dateTimeZone72.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime75 = org.joda.time.LocalDateTime.now(dateTimeZone72);
        org.joda.time.LocalDateTime.Property property76 = localDateTime75.millisOfDay();
        org.joda.time.LocalDateTime localDateTime78 = localDateTime75.withYear((int) (short) 100);
        org.joda.time.LocalDateTime.Property property79 = localDateTime78.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime81 = localDateTime78.minusMonths(2022);
        org.joda.time.LocalDateTime localDateTime83 = localDateTime81.withMinuteOfHour((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime85 = localDateTime81.plusWeeks((int) 'x');
        org.joda.time.LocalDateTime localDateTime87 = localDateTime81.withWeekyear(24);
        org.joda.time.LocalDateTime localDateTime89 = localDateTime81.minusSeconds((int) (byte) 1);
        int int90 = localDateTime89.getWeekOfWeekyear();
        boolean boolean91 = localDateTime71.isAfter((org.joda.time.ReadablePartial) localDateTime89);
        org.joda.time.LocalDateTime localDateTime93 = localDateTime89.withWeekyear(18);
        org.joda.time.LocalDateTime localDateTime95 = localDateTime93.withYear(55166);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime97 = localDateTime95.withDayOfYear((-55));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -55 for dayOfYear must be in the range [1,365]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+07:10:22.088" + "'", str9, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDateTime13);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "0100-02-22T14:33:47.937" + "'", str14, "0100-02-22T14:33:47.937");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "");
        org.junit.Assert.assertNotNull(strSet17);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "");
        org.junit.Assert.assertNotNull(strSet21);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[]");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "");
        org.junit.Assert.assertNotNull(strSet24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "");
        org.junit.Assert.assertNotNull(strSet27);
        org.junit.Assert.assertNotNull(durationFieldType28);
        org.junit.Assert.assertNotNull(durationFieldType29);
        org.junit.Assert.assertNotNull(durationFieldTypeArray30);
        org.junit.Assert.assertNotNull(durationFieldTypeArray31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "");
        org.junit.Assert.assertNotNull(strSet36);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[]");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "");
        org.junit.Assert.assertNotNull(strSet39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "");
        org.junit.Assert.assertNotNull(strSet42);
        org.junit.Assert.assertNotNull(durationFieldType43);
        org.junit.Assert.assertNotNull(durationFieldType44);
        org.junit.Assert.assertNotNull(durationFieldTypeArray45);
        org.junit.Assert.assertNotNull(durationFieldTypeArray46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "");
        org.junit.Assert.assertNotNull(strSet49);
        org.junit.Assert.assertNotNull(objArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[]");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "");
        org.junit.Assert.assertNotNull(strSet52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "");
        org.junit.Assert.assertNotNull(strSet55);
        org.junit.Assert.assertNotNull(durationFieldType56);
        org.junit.Assert.assertNotNull(durationFieldType57);
        org.junit.Assert.assertNotNull(durationFieldTypeArray58);
        org.junit.Assert.assertNotNull(durationFieldTypeArray59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(objArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray61), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray61), "[]");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertNotNull(localDateTime68);
        org.junit.Assert.assertNotNull(property69);
        org.junit.Assert.assertNotNull(localDateTime71);
        org.junit.Assert.assertNotNull(dateTimeZone72);
// flaky:         org.junit.Assert.assertEquals("'" + str74 + "' != '" + "+07:10:22.088" + "'", str74, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime75);
        org.junit.Assert.assertNotNull(property76);
        org.junit.Assert.assertNotNull(localDateTime78);
        org.junit.Assert.assertNotNull(property79);
        org.junit.Assert.assertNotNull(localDateTime81);
        org.junit.Assert.assertNotNull(localDateTime83);
        org.junit.Assert.assertNotNull(localDateTime85);
        org.junit.Assert.assertNotNull(localDateTime87);
        org.junit.Assert.assertNotNull(localDateTime89);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 34 + "'", int90 == 34);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertNotNull(localDateTime93);
        org.junit.Assert.assertNotNull(localDateTime95);
    }

    @Test
    public void test10135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10135");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.millisOfDay();
        org.joda.time.ReadableInstant readableInstant5 = null;
        long long6 = property4.getDifferenceAsLong(readableInstant5);
        java.util.Locale locale7 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str8 = locale7.getISO3Language();
        java.lang.String str9 = property4.getAsShortText(locale7);
        org.joda.time.DurationField durationField10 = property4.getDurationField();
        long long13 = durationField10.add((long) 1, 10);
        boolean boolean14 = durationField10.isPrecise();
        int int16 = durationField10.getValue((long) 26149500);
        int int19 = durationField10.getValue((long) (short) 10, 0L);
        long long22 = durationField10.add((long) 'a', (long) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType23 = durationField10.getType();
        org.joda.time.DurationFieldType durationFieldType24 = org.joda.time.DurationFieldType.days();
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology27 = localDateTime26.getChronology();
        org.joda.time.DurationField durationField28 = chronology27.hours();
        org.joda.time.DurationField durationField29 = durationFieldType24.getField(chronology27);
        org.joda.time.DateTimeField dateTimeField30 = chronology27.hourOfHalfday();
        org.joda.time.DurationField durationField31 = chronology27.weeks();
        boolean boolean32 = durationFieldType23.isSupported(chronology27);
        org.joda.time.DateTimeField dateTimeField33 = chronology27.monthOfYear();
        org.joda.time.DurationField durationField34 = chronology27.millis();
        long long36 = durationField34.getValueAsLong(0L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+07:10:22.088" + "'", str2, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
// flaky:         org.junit.Assert.assertTrue("'" + long6 + "' != '" + 25822088L + "'", long6 == 25822088L);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "fra" + "'", str8, "fra");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "52428038" + "'", str9, "52428038");
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 11L + "'", long13 == 11L);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 26149500 + "'", int16 == 26149500);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10 + "'", int19 == 10);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 197L + "'", long22 == 197L);
        org.junit.Assert.assertNotNull(durationFieldType23);
        org.junit.Assert.assertNotNull(durationFieldType24);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
    }

    @Test
    public void test10136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10136");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeField dateTimeField2 = dateTimeFieldType0.getField(chronology1);
        org.joda.time.DurationField durationField3 = dateTimeField2.getRangeDurationField();
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.withDurationAdded(readableDuration5, (int) '#');
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.weekyear();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime7.minusMillis((-1));
        java.util.Locale locale12 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale13 = locale12.stripExtensions();
        java.lang.String str14 = locale12.getVariant();
        java.lang.String str15 = localDateTime10.toString("26149261", locale12);
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.LocalDateTime localDateTime17 = localDateTime10.plus(readableDuration16);
        int int18 = localDateTime10.getWeekyear();
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology21 = localDateTime20.getChronology();
        org.joda.time.DurationField durationField22 = chronology21.hours();
        java.lang.String str23 = chronology21.toString();
        org.joda.time.DateTimeField dateTimeField24 = chronology21.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField25 = chronology21.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime();
        org.joda.time.ReadableDuration readableDuration27 = null;
        org.joda.time.LocalDateTime localDateTime29 = localDateTime26.withDurationAdded(readableDuration27, (int) '#');
        org.joda.time.LocalDateTime.Property property30 = localDateTime29.weekyear();
        org.joda.time.LocalDateTime localDateTime32 = localDateTime29.minusMillis((-1));
        org.joda.time.LocalDateTime.Property property33 = localDateTime29.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime34 = property33.roundHalfFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str37 = dateTimeZone35.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime38 = org.joda.time.LocalDateTime.now(dateTimeZone35);
        org.joda.time.LocalDateTime.Property property39 = localDateTime38.millisOfDay();
        org.joda.time.DurationFieldType durationFieldType40 = org.joda.time.DurationFieldType.centuries();
        boolean boolean41 = localDateTime38.equals((java.lang.Object) durationFieldType40);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray42 = localDateTime38.getFieldTypes();
        java.lang.String str43 = localDateTime38.toString();
        org.joda.time.LocalDateTime localDateTime45 = localDateTime38.plusMillis(22);
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = org.joda.time.DateTimeFieldType.secondOfDay();
        boolean boolean47 = localDateTime38.isSupported(dateTimeFieldType46);
        int int48 = localDateTime34.indexOf(dateTimeFieldType46);
        int[] intArray50 = chronology21.get((org.joda.time.ReadablePartial) localDateTime34, 1645629358650L);
        int int51 = dateTimeField2.getMinimumValue((org.joda.time.ReadablePartial) localDateTime10, intArray50);
        org.joda.time.LocalDateTime.Property property52 = localDateTime10.weekOfWeekyear();
        org.joda.time.ReadableDuration readableDuration53 = null;
        org.joda.time.LocalDateTime localDateTime54 = localDateTime10.minus(readableDuration53);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "26149261" + "'", str15, "26149261");
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2022 + "'", int18 == 2022);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "ISOChronology[UTC]" + "'", str23, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(dateTimeZone35);
// flaky:         org.junit.Assert.assertEquals("'" + str37 + "' != '" + "+07:10:22.088" + "'", str37, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(durationFieldType40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray42);
// flaky:         org.junit.Assert.assertEquals("'" + str43 + "' != '" + "2022-02-22T14:33:48.057" + "'", str43, "2022-02-22T14:33:48.057");
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(dateTimeFieldType46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[2022, 2, 23, 54958650]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(localDateTime54);
    }

    @Test
    public void test10137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10137");
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology3 = localDateTime2.getChronology();
        org.joda.time.DurationField durationField4 = chronology3.weekyears();
        org.joda.time.DurationField durationField5 = chronology3.centuries();
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime((long) (byte) 0, chronology3);
        org.joda.time.DurationField durationField7 = chronology3.millis();
        org.joda.time.DateTimeField dateTimeField8 = chronology3.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField9 = chronology3.millisOfSecond();
        org.joda.time.Chronology chronology10 = chronology3.withUTC();
        org.joda.time.DurationField durationField11 = chronology10.weekyears();
        org.joda.time.DateTimeField dateTimeField12 = chronology10.weekOfWeekyear();
        java.util.Locale.Builder builder14 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder15 = builder14.clearExtensions();
        java.util.Locale.Builder builder16 = builder15.clearExtensions();
        java.util.Locale locale17 = builder16.build();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str20 = dateTimeZone18.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime21 = org.joda.time.LocalDateTime.now(dateTimeZone18);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str24 = dateTimeZone22.getShortName((long) (short) 10);
        long long26 = dateTimeZone22.convertUTCToLocal((long) ' ');
        java.lang.String str27 = dateTimeZone22.toString();
        boolean boolean29 = dateTimeZone22.equals((java.lang.Object) (short) 100);
        java.util.Locale locale31 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str32 = dateTimeZone22.getShortName((long) (-1), locale31);
        long long34 = dateTimeZone18.getMillisKeepLocal(dateTimeZone22, (long) (byte) -1);
        java.util.Locale locale36 = java.util.Locale.US;
        java.lang.String str37 = dateTimeZone18.getShortName(1645629357666L, locale36);
        java.util.Locale.Builder builder39 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder40 = builder39.clearExtensions();
        java.util.Locale.Builder builder41 = builder40.clearExtensions();
        java.util.Locale locale42 = builder41.build();
        java.lang.String str43 = dateTimeZone18.getShortName(19043L, locale42);
        java.util.Locale locale44 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet45 = locale44.getUnicodeLocaleAttributes();
        java.lang.String str46 = locale44.getDisplayName();
        java.lang.String str47 = locale42.getDisplayVariant(locale44);
        java.lang.String str48 = locale17.getDisplayName(locale44);
        java.util.Set<java.lang.String> strSet49 = locale17.getUnicodeLocaleKeys();
        java.lang.String str50 = dateTimeField12.getAsShortText((-457119), locale17);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "");
        org.junit.Assert.assertNotNull(dateTimeZone18);
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+07:10:22.088" + "'", str20, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(dateTimeZone22);
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "+07:10:22.088" + "'", str24, "+07:10:22.088");
// flaky:         org.junit.Assert.assertTrue("'" + long26 + "' != '" + 25822120L + "'", long26 == 25822120L);
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "+07:10:22.088" + "'", str27, "+07:10:22.088");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "fr_CA");
// flaky:         org.junit.Assert.assertEquals("'" + str32 + "' != '" + "+07:10:22.088" + "'", str32, "+07:10:22.088");
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + (-1L) + "'", long34 == (-1L));
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "en_US");
// flaky:         org.junit.Assert.assertEquals("'" + str37 + "' != '" + "+07:10:22.088" + "'", str37, "+07:10:22.088");
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "");
// flaky:         org.junit.Assert.assertEquals("'" + str43 + "' != '" + "+07:10:22.088" + "'", str43, "+07:10:22.088");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "");
        org.junit.Assert.assertNotNull(strSet45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNotNull(strSet49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "-457119" + "'", str50, "-457119");
    }

    @Test
    public void test10138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10138");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.millisOfDay();
        org.joda.time.DurationFieldType durationFieldType5 = org.joda.time.DurationFieldType.centuries();
        boolean boolean6 = localDateTime3.equals((java.lang.Object) durationFieldType5);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray7 = localDateTime3.getFieldTypes();
        java.lang.String str8 = localDateTime3.toString();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime3.plusMillis(22);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime3.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology13 = localDateTime3.getChronology();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str16 = dateTimeZone14.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime17 = org.joda.time.LocalDateTime.now(dateTimeZone14);
        org.joda.time.LocalDateTime.Property property18 = localDateTime17.millisOfDay();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime17.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime17.plusHours((int) ' ');
        int int23 = localDateTime17.getDayOfMonth();
        org.joda.time.LocalDateTime localDateTime25 = localDateTime17.minusHours(26147585);
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str28 = dateTimeZone26.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime29 = org.joda.time.LocalDateTime.now(dateTimeZone26);
        org.joda.time.LocalDateTime.Property property30 = localDateTime29.millisOfDay();
        java.lang.String str31 = property30.getName();
        org.joda.time.LocalDateTime localDateTime32 = property30.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime34 = property30.addToCopy(0L);
        java.lang.String str35 = property30.getAsString();
        org.joda.time.LocalDateTime localDateTime36 = property30.roundCeilingCopy();
        org.joda.time.LocalDateTime localDateTime37 = localDateTime17.withFields((org.joda.time.ReadablePartial) localDateTime36);
        org.joda.time.LocalDateTime.Property property38 = localDateTime36.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime39 = localDateTime3.withFields((org.joda.time.ReadablePartial) localDateTime36);
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str42 = dateTimeZone40.getShortName((long) (short) 10);
        long long44 = dateTimeZone40.convertUTCToLocal((long) ' ');
        java.lang.String str45 = dateTimeZone40.toString();
        long long48 = dateTimeZone40.adjustOffset((long) (short) 100, false);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone40);
        boolean boolean51 = dateTimeZone40.equals((java.lang.Object) "CA");
        int int53 = dateTimeZone40.getOffsetFromLocal(1094L);
        long long55 = dateTimeZone40.convertUTCToLocal(1645629434501L);
        long long57 = dateTimeZone40.convertUTCToLocal(224L);
        org.joda.time.DateTime dateTime58 = localDateTime39.toDateTime(dateTimeZone40);
        org.joda.time.LocalDateTime localDateTime59 = org.joda.time.LocalDateTime.now(dateTimeZone40);
        java.util.TimeZone timeZone60 = dateTimeZone40.toTimeZone();
        boolean boolean61 = timeZone60.observesDaylightTime();
        java.util.TimeZone.setDefault(timeZone60);
        java.lang.Object obj63 = timeZone60.clone();
        org.junit.Assert.assertNotNull(dateTimeZone0);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+07:10:22.088" + "'", str2, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(durationFieldType5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "2022-02-22T14:33:48.107" + "'", str8, "2022-02-22T14:33:48.107");
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+07:10:22.088" + "'", str16, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 22 + "'", int23 == 22);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(dateTimeZone26);
// flaky:         org.junit.Assert.assertEquals("'" + str28 + "' != '" + "+07:10:22.088" + "'", str28, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "millisOfDay" + "'", str31, "millisOfDay");
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(localDateTime34);
// flaky:         org.junit.Assert.assertEquals("'" + str35 + "' != '" + "52428107" + "'", str35, "52428107");
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(dateTimeZone40);
// flaky:         org.junit.Assert.assertEquals("'" + str42 + "' != '" + "+07:10:22.088" + "'", str42, "+07:10:22.088");
// flaky:         org.junit.Assert.assertTrue("'" + long44 + "' != '" + 25822120L + "'", long44 == 25822120L);
// flaky:         org.junit.Assert.assertEquals("'" + str45 + "' != '" + "+07:10:22.088" + "'", str45, "+07:10:22.088");
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 100L + "'", long48 == 100L);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int53 + "' != '" + 25822088 + "'", int53 == 25822088);
// flaky:         org.junit.Assert.assertTrue("'" + long55 + "' != '" + 1645655256589L + "'", long55 == 1645655256589L);
// flaky:         org.junit.Assert.assertTrue("'" + long57 + "' != '" + 25822312L + "'", long57 == 25822312L);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertNotNull(timeZone60);
// flaky:         org.junit.Assert.assertEquals(timeZone60.getDisplayName(), "GMT+07:10");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(obj63);
// flaky:         org.junit.Assert.assertEquals(obj63.toString(), "java.util.SimpleTimeZone[id=+07:10:22.088,offset=25822088,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj63), "java.util.SimpleTimeZone[id=+07:10:22.088,offset=25822088,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj63), "java.util.SimpleTimeZone[id=+07:10:22.088,offset=25822088,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]");
    }

    @Test
    public void test10139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10139");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.millisOfDay();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime3.withYear((int) (short) 100);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.minuteOfHour();
        int int8 = property7.get();
        org.joda.time.LocalDateTime localDateTime10 = property7.setCopy((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime11 = property7.roundCeilingCopy();
        org.joda.time.DateTimeField[] dateTimeFieldArray12 = localDateTime11.getFields();
        int int13 = localDateTime11.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime11.withMillisOfDay(4001);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime11.withYear(14);
        int int18 = localDateTime11.getWeekOfWeekyear();
        org.joda.time.LocalDateTime.Property property19 = localDateTime11.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime20 = property19.roundHalfEvenCopy();
        org.junit.Assert.assertNotNull(dateTimeZone0);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+07:10:22.088" + "'", str2, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 33 + "'", int8 == 33);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTimeFieldArray12);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 14 + "'", int13 == 14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 8 + "'", int18 == 8);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(localDateTime20);
    }

    @Test
    public void test10140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10140");
        java.util.Locale locale2 = new java.util.Locale("2022-02-22T07:17:51.493", "26304530");
        org.junit.Assert.assertEquals(locale2.toString(), "2022-02-22t07:17:51.493_26304530");
    }

    @Test
    public void test10141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10141");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        org.joda.time.LocalDateTime localDateTime3 = localDateTime0.withDurationAdded(readableDuration1, (int) '#');
        int int4 = localDateTime3.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime3.withMinuteOfHour(2);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str9 = dateTimeZone7.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime10 = org.joda.time.LocalDateTime.now(dateTimeZone7);
        org.joda.time.LocalDateTime.Property property11 = localDateTime10.millisOfDay();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime10.withYear((int) (short) 100);
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime13.minusMonths(2022);
        int int17 = localDateTime13.getDayOfMonth();
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.dayOfMonth();
        boolean boolean19 = localDateTime13.equals((java.lang.Object) dateTimeFieldType18);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime13.plusHours(26163523);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime13.withDayOfMonth((int) (byte) 10);
        int int24 = localDateTime6.compareTo((org.joda.time.ReadablePartial) localDateTime23);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime6.withWeekyear(2);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime6.withWeekyear(31);
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime();
        org.joda.time.ReadableDuration readableDuration30 = null;
        org.joda.time.LocalDateTime localDateTime32 = localDateTime29.withDurationAdded(readableDuration30, (int) '#');
        org.joda.time.LocalDateTime.Property property33 = localDateTime32.weekyear();
        org.joda.time.LocalDateTime localDateTime35 = localDateTime32.minusMillis((-1));
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str38 = dateTimeZone36.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime39 = org.joda.time.LocalDateTime.now(dateTimeZone36);
        org.joda.time.LocalDateTime.Property property40 = localDateTime39.millisOfDay();
        org.joda.time.LocalDateTime localDateTime42 = localDateTime39.withYear((int) (short) 100);
        java.lang.String str43 = localDateTime42.toString();
        boolean boolean44 = localDateTime32.isAfter((org.joda.time.ReadablePartial) localDateTime42);
        int int45 = localDateTime42.getWeekOfWeekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDateTime localDateTime48 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology49 = localDateTime48.getChronology();
        org.joda.time.DurationField durationField50 = chronology49.weekyears();
        org.joda.time.DurationField durationField51 = chronology49.centuries();
        org.joda.time.DurationField durationField52 = chronology49.hours();
        boolean boolean53 = dateTimeFieldType46.isSupported(chronology49);
        org.joda.time.LocalDateTime localDateTime55 = localDateTime42.withField(dateTimeFieldType46, (int) 'x');
        org.joda.time.LocalDateTime.Property property56 = localDateTime28.property(dateTimeFieldType46);
        org.joda.time.DurationFieldType durationFieldType57 = dateTimeFieldType46.getDurationType();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2 + "'", int4 == 2);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+07:10:22.088" + "'", str9, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 22 + "'", int17 == 22);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(dateTimeZone36);
// flaky:         org.junit.Assert.assertEquals("'" + str38 + "' != '" + "+07:10:22.088" + "'", str38, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(localDateTime42);
// flaky:         org.junit.Assert.assertEquals("'" + str43 + "' != '" + "0100-02-22T14:33:48.145" + "'", str43, "0100-02-22T14:33:48.145");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 8 + "'", int45 == 8);
        org.junit.Assert.assertNotNull(dateTimeFieldType46);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(durationField50);
        org.junit.Assert.assertNotNull(durationField51);
        org.junit.Assert.assertNotNull(durationField52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(durationFieldType57);
    }

    @Test
    public void test10142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10142");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.millisOfDay();
        org.joda.time.ReadableInstant readableInstant5 = null;
        long long6 = property4.getDifferenceAsLong(readableInstant5);
        int int7 = property4.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime8 = property4.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.plusDays(4);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str14 = dateTimeZone12.getShortName((long) (short) 10);
        long long16 = dateTimeZone12.convertUTCToLocal((long) ' ');
        java.util.Locale locale18 = java.util.Locale.ROOT;
        java.lang.String str19 = dateTimeZone12.getName((long) (short) 0, locale18);
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime(1645629356616L, dateTimeZone12);
        java.lang.String str21 = dateTimeZone12.toString();
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime();
        org.joda.time.ReadableDuration readableDuration23 = null;
        org.joda.time.LocalDateTime localDateTime25 = localDateTime22.withDurationAdded(readableDuration23, (int) '#');
        org.joda.time.LocalDateTime.Property property26 = localDateTime25.weekyear();
        org.joda.time.LocalDateTime localDateTime28 = localDateTime25.minusMillis((-1));
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str31 = dateTimeZone29.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime32 = org.joda.time.LocalDateTime.now(dateTimeZone29);
        org.joda.time.LocalDateTime.Property property33 = localDateTime32.millisOfDay();
        org.joda.time.LocalDateTime localDateTime35 = localDateTime32.withYear((int) (short) 100);
        java.lang.String str36 = localDateTime35.toString();
        boolean boolean37 = localDateTime25.isAfter((org.joda.time.ReadablePartial) localDateTime35);
        java.util.Locale locale38 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet39 = locale38.getUnicodeLocaleAttributes();
        java.lang.Object[] objArray40 = strSet39.toArray();
        boolean boolean41 = strSet39.isEmpty();
        java.util.Locale locale42 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet43 = locale42.getUnicodeLocaleAttributes();
        java.lang.Object[] objArray44 = strSet43.toArray();
        java.util.Locale locale45 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet46 = locale45.getUnicodeLocaleAttributes();
        boolean boolean47 = strSet43.removeAll((java.util.Collection<java.lang.String>) strSet46);
        java.util.Locale locale48 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet49 = locale48.getUnicodeLocaleAttributes();
        org.joda.time.DurationFieldType durationFieldType50 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.DurationFieldType durationFieldType51 = org.joda.time.DurationFieldType.hours();
        org.joda.time.DurationFieldType[] durationFieldTypeArray52 = new org.joda.time.DurationFieldType[] { durationFieldType50, durationFieldType51 };
        org.joda.time.DurationFieldType[] durationFieldTypeArray53 = strSet49.toArray(durationFieldTypeArray52);
        boolean boolean54 = strSet43.containsAll((java.util.Collection<java.lang.String>) strSet49);
        java.lang.Object[] objArray55 = strSet49.toArray();
        boolean boolean56 = strSet39.removeAll((java.util.Collection<java.lang.String>) strSet49);
        java.util.Locale locale57 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet58 = locale57.getUnicodeLocaleAttributes();
        java.lang.Object[] objArray59 = strSet58.toArray();
        java.util.Locale locale60 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet61 = locale60.getUnicodeLocaleAttributes();
        boolean boolean62 = strSet58.removeAll((java.util.Collection<java.lang.String>) strSet61);
        java.util.Locale locale63 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet64 = locale63.getUnicodeLocaleAttributes();
        org.joda.time.DurationFieldType durationFieldType65 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.DurationFieldType durationFieldType66 = org.joda.time.DurationFieldType.hours();
        org.joda.time.DurationFieldType[] durationFieldTypeArray67 = new org.joda.time.DurationFieldType[] { durationFieldType65, durationFieldType66 };
        org.joda.time.DurationFieldType[] durationFieldTypeArray68 = strSet64.toArray(durationFieldTypeArray67);
        boolean boolean69 = strSet58.containsAll((java.util.Collection<java.lang.String>) strSet64);
        java.util.Locale locale70 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet71 = locale70.getUnicodeLocaleAttributes();
        java.lang.Object[] objArray72 = strSet71.toArray();
        java.util.Locale locale73 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet74 = locale73.getUnicodeLocaleAttributes();
        boolean boolean75 = strSet71.removeAll((java.util.Collection<java.lang.String>) strSet74);
        java.util.Locale locale76 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet77 = locale76.getUnicodeLocaleAttributes();
        org.joda.time.DurationFieldType durationFieldType78 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.DurationFieldType durationFieldType79 = org.joda.time.DurationFieldType.hours();
        org.joda.time.DurationFieldType[] durationFieldTypeArray80 = new org.joda.time.DurationFieldType[] { durationFieldType78, durationFieldType79 };
        org.joda.time.DurationFieldType[] durationFieldTypeArray81 = strSet77.toArray(durationFieldTypeArray80);
        boolean boolean82 = strSet71.containsAll((java.util.Collection<java.lang.String>) strSet77);
        java.lang.Object[] objArray83 = strSet77.toArray();
        boolean boolean84 = strSet58.retainAll((java.util.Collection<java.lang.String>) strSet77);
        boolean boolean85 = strSet49.addAll((java.util.Collection<java.lang.String>) strSet77);
        org.joda.time.DateTimeFieldType dateTimeFieldType86 = org.joda.time.DateTimeFieldType.yearOfEra();
        boolean boolean87 = strSet77.remove((java.lang.Object) dateTimeFieldType86);
        org.joda.time.LocalDateTime.Property property88 = localDateTime25.property(dateTimeFieldType86);
        org.joda.time.ReadableDuration readableDuration89 = null;
        org.joda.time.LocalDateTime localDateTime90 = localDateTime25.minus(readableDuration89);
        org.joda.time.LocalDateTime.Property property91 = localDateTime25.era();
        boolean boolean92 = dateTimeZone12.equals((java.lang.Object) localDateTime25);
        org.joda.time.LocalDateTime.Property property93 = localDateTime25.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime94 = localDateTime10.withFields((org.joda.time.ReadablePartial) localDateTime25);
        org.joda.time.ReadableDuration readableDuration95 = null;
        org.joda.time.LocalDateTime localDateTime96 = localDateTime25.minus(readableDuration95);
        org.junit.Assert.assertNotNull(dateTimeZone0);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+07:10:22.088" + "'", str2, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
// flaky:         org.junit.Assert.assertTrue("'" + long6 + "' != '" + 25822088L + "'", long6 == 25822088L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 86399999 + "'", int7 == 86399999);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(dateTimeZone12);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+07:10:22.088" + "'", str14, "+07:10:22.088");
// flaky:         org.junit.Assert.assertTrue("'" + long16 + "' != '" + 25822120L + "'", long16 == 25822120L);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "");
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "+07:10:22.088" + "'", str19, "+07:10:22.088");
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "+07:10:22.088" + "'", str21, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(dateTimeZone29);
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "+07:10:22.088" + "'", str31, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(localDateTime35);
// flaky:         org.junit.Assert.assertEquals("'" + str36 + "' != '" + "0100-02-22T14:33:48.170" + "'", str36, "0100-02-22T14:33:48.170");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "");
        org.junit.Assert.assertNotNull(strSet39);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[]");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "");
        org.junit.Assert.assertNotNull(strSet43);
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[]");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "");
        org.junit.Assert.assertNotNull(strSet46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "");
        org.junit.Assert.assertNotNull(strSet49);
        org.junit.Assert.assertNotNull(durationFieldType50);
        org.junit.Assert.assertNotNull(durationFieldType51);
        org.junit.Assert.assertNotNull(durationFieldTypeArray52);
        org.junit.Assert.assertNotNull(durationFieldTypeArray53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(objArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray55), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray55), "[]");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "");
        org.junit.Assert.assertNotNull(strSet58);
        org.junit.Assert.assertNotNull(objArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray59), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray59), "[]");
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "");
        org.junit.Assert.assertNotNull(strSet61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "");
        org.junit.Assert.assertNotNull(strSet64);
        org.junit.Assert.assertNotNull(durationFieldType65);
        org.junit.Assert.assertNotNull(durationFieldType66);
        org.junit.Assert.assertNotNull(durationFieldTypeArray67);
        org.junit.Assert.assertNotNull(durationFieldTypeArray68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "");
        org.junit.Assert.assertNotNull(strSet71);
        org.junit.Assert.assertNotNull(objArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray72), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray72), "[]");
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "");
        org.junit.Assert.assertNotNull(strSet74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(locale76);
        org.junit.Assert.assertEquals(locale76.toString(), "");
        org.junit.Assert.assertNotNull(strSet77);
        org.junit.Assert.assertNotNull(durationFieldType78);
        org.junit.Assert.assertNotNull(durationFieldType79);
        org.junit.Assert.assertNotNull(durationFieldTypeArray80);
        org.junit.Assert.assertNotNull(durationFieldTypeArray81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertNotNull(objArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray83), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray83), "[]");
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(property88);
        org.junit.Assert.assertNotNull(localDateTime90);
        org.junit.Assert.assertNotNull(property91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(property93);
        org.junit.Assert.assertNotNull(localDateTime94);
        org.junit.Assert.assertNotNull(localDateTime96);
    }

    @Test
    public void test10143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10143");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        org.joda.time.LocalDateTime localDateTime3 = localDateTime0.withDurationAdded(readableDuration1, (int) '#');
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.weekyear();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime3.minusMillis((-1));
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str9 = dateTimeZone7.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime10 = org.joda.time.LocalDateTime.now(dateTimeZone7);
        org.joda.time.LocalDateTime.Property property11 = localDateTime10.millisOfDay();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime10.withYear((int) (short) 100);
        java.lang.String str14 = localDateTime13.toString();
        boolean boolean15 = localDateTime3.isAfter((org.joda.time.ReadablePartial) localDateTime13);
        java.util.Locale locale16 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet17 = locale16.getUnicodeLocaleAttributes();
        java.lang.Object[] objArray18 = strSet17.toArray();
        boolean boolean19 = strSet17.isEmpty();
        java.util.Locale locale20 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet21 = locale20.getUnicodeLocaleAttributes();
        java.lang.Object[] objArray22 = strSet21.toArray();
        java.util.Locale locale23 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet24 = locale23.getUnicodeLocaleAttributes();
        boolean boolean25 = strSet21.removeAll((java.util.Collection<java.lang.String>) strSet24);
        java.util.Locale locale26 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet27 = locale26.getUnicodeLocaleAttributes();
        org.joda.time.DurationFieldType durationFieldType28 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.DurationFieldType durationFieldType29 = org.joda.time.DurationFieldType.hours();
        org.joda.time.DurationFieldType[] durationFieldTypeArray30 = new org.joda.time.DurationFieldType[] { durationFieldType28, durationFieldType29 };
        org.joda.time.DurationFieldType[] durationFieldTypeArray31 = strSet27.toArray(durationFieldTypeArray30);
        boolean boolean32 = strSet21.containsAll((java.util.Collection<java.lang.String>) strSet27);
        java.lang.Object[] objArray33 = strSet27.toArray();
        boolean boolean34 = strSet17.removeAll((java.util.Collection<java.lang.String>) strSet27);
        java.util.Locale locale35 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet36 = locale35.getUnicodeLocaleAttributes();
        java.lang.Object[] objArray37 = strSet36.toArray();
        java.util.Locale locale38 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet39 = locale38.getUnicodeLocaleAttributes();
        boolean boolean40 = strSet36.removeAll((java.util.Collection<java.lang.String>) strSet39);
        java.util.Locale locale41 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet42 = locale41.getUnicodeLocaleAttributes();
        org.joda.time.DurationFieldType durationFieldType43 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.DurationFieldType durationFieldType44 = org.joda.time.DurationFieldType.hours();
        org.joda.time.DurationFieldType[] durationFieldTypeArray45 = new org.joda.time.DurationFieldType[] { durationFieldType43, durationFieldType44 };
        org.joda.time.DurationFieldType[] durationFieldTypeArray46 = strSet42.toArray(durationFieldTypeArray45);
        boolean boolean47 = strSet36.containsAll((java.util.Collection<java.lang.String>) strSet42);
        java.util.Locale locale48 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet49 = locale48.getUnicodeLocaleAttributes();
        java.lang.Object[] objArray50 = strSet49.toArray();
        java.util.Locale locale51 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet52 = locale51.getUnicodeLocaleAttributes();
        boolean boolean53 = strSet49.removeAll((java.util.Collection<java.lang.String>) strSet52);
        java.util.Locale locale54 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet55 = locale54.getUnicodeLocaleAttributes();
        org.joda.time.DurationFieldType durationFieldType56 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.DurationFieldType durationFieldType57 = org.joda.time.DurationFieldType.hours();
        org.joda.time.DurationFieldType[] durationFieldTypeArray58 = new org.joda.time.DurationFieldType[] { durationFieldType56, durationFieldType57 };
        org.joda.time.DurationFieldType[] durationFieldTypeArray59 = strSet55.toArray(durationFieldTypeArray58);
        boolean boolean60 = strSet49.containsAll((java.util.Collection<java.lang.String>) strSet55);
        java.lang.Object[] objArray61 = strSet55.toArray();
        boolean boolean62 = strSet36.retainAll((java.util.Collection<java.lang.String>) strSet55);
        boolean boolean63 = strSet27.addAll((java.util.Collection<java.lang.String>) strSet55);
        org.joda.time.DateTimeFieldType dateTimeFieldType64 = org.joda.time.DateTimeFieldType.yearOfEra();
        boolean boolean65 = strSet55.remove((java.lang.Object) dateTimeFieldType64);
        org.joda.time.LocalDateTime.Property property66 = localDateTime3.property(dateTimeFieldType64);
        org.joda.time.DurationFieldType durationFieldType67 = org.joda.time.DurationFieldType.millis();
        org.joda.time.LocalDateTime localDateTime69 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology70 = localDateTime69.getChronology();
        org.joda.time.DurationField durationField71 = chronology70.weekyears();
        org.joda.time.DurationField durationField72 = chronology70.centuries();
        org.joda.time.DurationField durationField73 = durationFieldType67.getField(chronology70);
        boolean boolean74 = dateTimeFieldType64.isSupported(chronology70);
        org.joda.time.DateTimeZone dateTimeZone75 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str77 = dateTimeZone75.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime78 = org.joda.time.LocalDateTime.now(dateTimeZone75);
        org.joda.time.LocalDateTime.Property property79 = localDateTime78.millisOfDay();
        org.joda.time.LocalDateTime localDateTime81 = localDateTime78.plusMonths((int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod82 = null;
        org.joda.time.LocalDateTime localDateTime83 = localDateTime81.plus(readablePeriod82);
        long long85 = chronology70.set((org.joda.time.ReadablePartial) localDateTime83, 864000010L);
        org.joda.time.DurationField durationField86 = chronology70.halfdays();
        org.joda.time.DateTimeField dateTimeField87 = chronology70.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField88 = chronology70.year();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+07:10:22.088" + "'", str9, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDateTime13);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "0100-02-22T14:33:48.204" + "'", str14, "0100-02-22T14:33:48.204");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "");
        org.junit.Assert.assertNotNull(strSet17);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "");
        org.junit.Assert.assertNotNull(strSet21);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[]");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "");
        org.junit.Assert.assertNotNull(strSet24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "");
        org.junit.Assert.assertNotNull(strSet27);
        org.junit.Assert.assertNotNull(durationFieldType28);
        org.junit.Assert.assertNotNull(durationFieldType29);
        org.junit.Assert.assertNotNull(durationFieldTypeArray30);
        org.junit.Assert.assertNotNull(durationFieldTypeArray31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "");
        org.junit.Assert.assertNotNull(strSet36);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[]");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "");
        org.junit.Assert.assertNotNull(strSet39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "");
        org.junit.Assert.assertNotNull(strSet42);
        org.junit.Assert.assertNotNull(durationFieldType43);
        org.junit.Assert.assertNotNull(durationFieldType44);
        org.junit.Assert.assertNotNull(durationFieldTypeArray45);
        org.junit.Assert.assertNotNull(durationFieldTypeArray46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "");
        org.junit.Assert.assertNotNull(strSet49);
        org.junit.Assert.assertNotNull(objArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[]");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "");
        org.junit.Assert.assertNotNull(strSet52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "");
        org.junit.Assert.assertNotNull(strSet55);
        org.junit.Assert.assertNotNull(durationFieldType56);
        org.junit.Assert.assertNotNull(durationFieldType57);
        org.junit.Assert.assertNotNull(durationFieldTypeArray58);
        org.junit.Assert.assertNotNull(durationFieldTypeArray59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(objArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray61), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray61), "[]");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertNotNull(durationFieldType67);
        org.junit.Assert.assertNotNull(chronology70);
        org.junit.Assert.assertNotNull(durationField71);
        org.junit.Assert.assertNotNull(durationField72);
        org.junit.Assert.assertNotNull(durationField73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(dateTimeZone75);
// flaky:         org.junit.Assert.assertEquals("'" + str77 + "' != '" + "+07:10:22.088" + "'", str77, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime78);
        org.junit.Assert.assertNotNull(property79);
        org.junit.Assert.assertNotNull(localDateTime81);
        org.junit.Assert.assertNotNull(localDateTime83);
// flaky:         org.junit.Assert.assertTrue("'" + long85 + "' != '" + 1908369228204L + "'", long85 == 1908369228204L);
        org.junit.Assert.assertNotNull(durationField86);
        org.junit.Assert.assertNotNull(dateTimeField87);
        org.junit.Assert.assertNotNull(dateTimeField88);
    }

    @Test
    public void test10144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10144");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.millisOfDay();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime3.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime3.plusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minusHours((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.withEra((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime10.minusSeconds(863999890);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.LocalDateTime localDateTime17 = localDateTime14.withPeriodAdded(readablePeriod15, 916);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.minusMillis(681);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.plusSeconds(25810494);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime23 = localDateTime21.withMillisOfSecond(26304617);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26304617 for millisOfSecond must be in the range [0,999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+07:10:22.088" + "'", str2, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
    }

    @Test
    public void test10145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10145");
        java.util.Locale locale2 = new java.util.Locale("monthOfYear", "DurationField[days]");
        java.lang.String str3 = locale2.getDisplayVariant();
        java.util.Locale.setDefault(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "monthofyear_DURATIONFIELD[DAYS]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
    }

    @Test
    public void test10146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10146");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        org.joda.time.LocalDateTime localDateTime3 = localDateTime0.withDurationAdded(readableDuration1, (int) '#');
        org.joda.time.LocalDateTime.Property property4 = localDateTime0.era();
        int int5 = localDateTime0.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime0.withWeekOfWeekyear((int) (byte) 1);
        int int8 = localDateTime0.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime0.plusDays(500);
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology13 = localDateTime12.getChronology();
        org.joda.time.DurationField durationField14 = chronology13.weekyears();
        org.joda.time.DurationField durationField15 = chronology13.seconds();
        org.joda.time.DurationField durationField16 = chronology13.seconds();
        org.joda.time.DateTimeField dateTimeField17 = chronology13.yearOfCentury();
        boolean boolean18 = localDateTime10.equals((java.lang.Object) dateTimeField17);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str21 = dateTimeZone19.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime22 = org.joda.time.LocalDateTime.now(dateTimeZone19);
        org.joda.time.LocalDateTime.Property property23 = localDateTime22.millisOfDay();
        org.joda.time.DurationFieldType durationFieldType24 = org.joda.time.DurationFieldType.centuries();
        boolean boolean25 = localDateTime22.equals((java.lang.Object) durationFieldType24);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray26 = localDateTime22.getFieldTypes();
        java.lang.String str27 = localDateTime22.toString();
        org.joda.time.LocalDateTime localDateTime29 = localDateTime22.plusMillis(22);
        int int30 = localDateTime29.getMillisOfDay();
        java.util.Locale.Builder builder32 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder34 = builder32.addUnicodeLocaleAttribute("und");
        java.util.Locale locale35 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale36 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str37 = locale35.getDisplayCountry(locale36);
        java.lang.String str38 = locale36.getDisplayName();
        java.util.Locale.Builder builder39 = builder34.setLocale(locale36);
        java.util.Set<java.lang.Character> charSet40 = locale36.getExtensionKeys();
        java.lang.String str41 = dateTimeField17.getAsShortText((org.joda.time.ReadablePartial) localDateTime29, 67, locale36);
        org.joda.time.DurationField durationField42 = dateTimeField17.getRangeDurationField();
        // The following exception was thrown during execution in test generation
        try {
            long long45 = durationField42.subtract((long) 87, 1645629788456L);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Value cannot fit in an int: -164562978845600");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 22 + "'", int5 == 22);
        org.junit.Assert.assertNotNull(localDateTime7);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 14 + "'", int8 == 14);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(dateTimeZone19);
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "+07:10:22.088" + "'", str21, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(durationFieldType24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray26);
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "2022-02-22T14:33:48.311" + "'", str27, "2022-02-22T14:33:48.311");
        org.junit.Assert.assertNotNull(localDateTime29);
// flaky:         org.junit.Assert.assertTrue("'" + int30 + "' != '" + 52428333 + "'", int30 == 52428333);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Canada" + "'", str37, "Canada");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "French (Canada)" + "'", str38, "French (Canada)");
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(charSet40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "67" + "'", str41, "67");
        org.junit.Assert.assertNotNull(durationField42);
    }

    @Test
    public void test10147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10147");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.millisOfDay();
        org.joda.time.LocalDateTime localDateTime6 = property4.addToCopy(500);
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.plus(readableDuration7);
        org.joda.time.LocalDateTime.Property property9 = localDateTime6.millisOfSecond();
        org.joda.time.DurationField durationField10 = property9.getDurationField();
        org.joda.time.LocalDateTime localDateTime12 = property9.addToCopy(56);
        java.lang.String str13 = localDateTime12.toString();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime12.plusDays(55220511);
        org.junit.Assert.assertNotNull(dateTimeZone0);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+07:10:22.088" + "'", str2, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(localDateTime12);
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "2022-02-22T14:33:48.881" + "'", str13, "2022-02-22T14:33:48.881");
        org.junit.Assert.assertNotNull(localDateTime15);
    }

    @Test
    public void test10148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10148");
        org.joda.time.tz.Provider provider0 = org.joda.time.DateTimeZone.getProvider();
        java.util.Set<java.lang.String> strSet1 = provider0.getAvailableIDs();
        java.util.Set<java.lang.String> strSet2 = provider0.getAvailableIDs();
        org.joda.time.DateTimeZone.setProvider(provider0);
        org.joda.time.DateTimeZone dateTimeZone5 = provider0.getZone("26355970");
        java.util.Set<java.lang.String> strSet6 = provider0.getAvailableIDs();
        org.joda.time.DateTimeZone dateTimeZone8 = provider0.getZone("26579886");
        org.junit.Assert.assertNotNull(provider0);
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertNull(dateTimeZone8);
    }

    @Test
    public void test10149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10149");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getShortName((long) (short) 10);
        long long4 = dateTimeZone0.convertUTCToLocal((long) ' ');
        java.util.Locale locale6 = java.util.Locale.ROOT;
        java.lang.String str7 = dateTimeZone0.getName((long) (short) 0, locale6);
        java.lang.String str9 = dateTimeZone0.getShortName(1645629371478L);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str12 = dateTimeZone10.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime13 = org.joda.time.LocalDateTime.now(dateTimeZone10);
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.millisOfDay();
        int int15 = property14.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime16 = property14.withMaximumValue();
        boolean boolean17 = dateTimeZone0.isLocalDateTimeGap(localDateTime16);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str21 = dateTimeZone19.getShortName((long) (short) 10);
        long long23 = dateTimeZone19.convertUTCToLocal((long) ' ');
        java.util.Locale locale25 = java.util.Locale.ROOT;
        java.lang.String str26 = dateTimeZone19.getName((long) (short) 0, locale25);
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime(1645629356616L, dateTimeZone19);
        boolean boolean28 = dateTimeZone19.isFixed();
        java.util.TimeZone timeZone29 = dateTimeZone19.toTimeZone();
        long long31 = dateTimeZone0.getMillisKeepLocal(dateTimeZone19, (-31525173850500L));
        org.joda.time.DateTimeZone.setDefault(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTimeZone0);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+07:10:22.088" + "'", str2, "+07:10:22.088");
// flaky:         org.junit.Assert.assertTrue("'" + long4 + "' != '" + 25822120L + "'", long4 == 25822120L);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+07:10:22.088" + "'", str7, "+07:10:22.088");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+07:10:22.088" + "'", str9, "+07:10:22.088");
        org.junit.Assert.assertNotNull(dateTimeZone10);
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+07:10:22.088" + "'", str12, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 86399999 + "'", int15 == 86399999);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(dateTimeZone19);
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "+07:10:22.088" + "'", str21, "+07:10:22.088");
// flaky:         org.junit.Assert.assertTrue("'" + long23 + "' != '" + 25822120L + "'", long23 == 25822120L);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "");
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "+07:10:22.088" + "'", str26, "+07:10:22.088");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(timeZone29);
// flaky:         org.junit.Assert.assertEquals(timeZone29.getDisplayName(), "GMT+07:10");
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + (-31525173850500L) + "'", long31 == (-31525173850500L));
    }

    @Test
    public void test10150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10150");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getShortName((long) (short) 10);
        long long4 = dateTimeZone0.convertUTCToLocal((long) ' ');
        java.lang.String str5 = dateTimeZone0.toString();
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime();
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.LocalDateTime localDateTime9 = localDateTime6.withDurationAdded(readableDuration7, (int) '#');
        org.joda.time.LocalDateTime.Property property10 = localDateTime9.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime9.minusHours(0);
        int int13 = localDateTime9.getWeekyear();
        org.joda.time.Chronology chronology14 = localDateTime9.getChronology();
        boolean boolean15 = dateTimeZone0.isLocalDateTimeGap(localDateTime9);
        org.joda.time.LocalDateTime.Property property16 = localDateTime9.weekOfWeekyear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField18 = localDateTime9.getField(922);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 922");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+07:10:22.088" + "'", str2, "+07:10:22.088");
// flaky:         org.junit.Assert.assertTrue("'" + long4 + "' != '" + 25822120L + "'", long4 == 25822120L);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+07:10:22.088" + "'", str5, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2022 + "'", int13 == 2022);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(property16);
    }

    @Test
    public void test10151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10151");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("2022-02-22T07:19:52.913");
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Greenwich Mean Time");
    }

    @Test
    public void test10152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10152");
        org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.parse("26279558");
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.dayOfMonth();
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertNotNull(property2);
    }

    @Test
    public void test10153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10153");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        org.joda.time.LocalDateTime localDateTime3 = localDateTime0.withDurationAdded(readableDuration1, (int) '#');
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.weekyear();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime3.minusMillis((-1));
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str9 = dateTimeZone7.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime10 = org.joda.time.LocalDateTime.now(dateTimeZone7);
        org.joda.time.LocalDateTime.Property property11 = localDateTime10.millisOfDay();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime10.withYear((int) (short) 100);
        java.lang.String str14 = localDateTime13.toString();
        boolean boolean15 = localDateTime3.isAfter((org.joda.time.ReadablePartial) localDateTime13);
        java.util.Locale locale16 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet17 = locale16.getUnicodeLocaleAttributes();
        java.lang.Object[] objArray18 = strSet17.toArray();
        boolean boolean19 = strSet17.isEmpty();
        java.util.Locale locale20 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet21 = locale20.getUnicodeLocaleAttributes();
        java.lang.Object[] objArray22 = strSet21.toArray();
        java.util.Locale locale23 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet24 = locale23.getUnicodeLocaleAttributes();
        boolean boolean25 = strSet21.removeAll((java.util.Collection<java.lang.String>) strSet24);
        java.util.Locale locale26 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet27 = locale26.getUnicodeLocaleAttributes();
        org.joda.time.DurationFieldType durationFieldType28 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.DurationFieldType durationFieldType29 = org.joda.time.DurationFieldType.hours();
        org.joda.time.DurationFieldType[] durationFieldTypeArray30 = new org.joda.time.DurationFieldType[] { durationFieldType28, durationFieldType29 };
        org.joda.time.DurationFieldType[] durationFieldTypeArray31 = strSet27.toArray(durationFieldTypeArray30);
        boolean boolean32 = strSet21.containsAll((java.util.Collection<java.lang.String>) strSet27);
        java.lang.Object[] objArray33 = strSet27.toArray();
        boolean boolean34 = strSet17.removeAll((java.util.Collection<java.lang.String>) strSet27);
        java.util.Locale locale35 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet36 = locale35.getUnicodeLocaleAttributes();
        java.lang.Object[] objArray37 = strSet36.toArray();
        java.util.Locale locale38 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet39 = locale38.getUnicodeLocaleAttributes();
        boolean boolean40 = strSet36.removeAll((java.util.Collection<java.lang.String>) strSet39);
        java.util.Locale locale41 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet42 = locale41.getUnicodeLocaleAttributes();
        org.joda.time.DurationFieldType durationFieldType43 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.DurationFieldType durationFieldType44 = org.joda.time.DurationFieldType.hours();
        org.joda.time.DurationFieldType[] durationFieldTypeArray45 = new org.joda.time.DurationFieldType[] { durationFieldType43, durationFieldType44 };
        org.joda.time.DurationFieldType[] durationFieldTypeArray46 = strSet42.toArray(durationFieldTypeArray45);
        boolean boolean47 = strSet36.containsAll((java.util.Collection<java.lang.String>) strSet42);
        java.util.Locale locale48 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet49 = locale48.getUnicodeLocaleAttributes();
        java.lang.Object[] objArray50 = strSet49.toArray();
        java.util.Locale locale51 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet52 = locale51.getUnicodeLocaleAttributes();
        boolean boolean53 = strSet49.removeAll((java.util.Collection<java.lang.String>) strSet52);
        java.util.Locale locale54 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet55 = locale54.getUnicodeLocaleAttributes();
        org.joda.time.DurationFieldType durationFieldType56 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.DurationFieldType durationFieldType57 = org.joda.time.DurationFieldType.hours();
        org.joda.time.DurationFieldType[] durationFieldTypeArray58 = new org.joda.time.DurationFieldType[] { durationFieldType56, durationFieldType57 };
        org.joda.time.DurationFieldType[] durationFieldTypeArray59 = strSet55.toArray(durationFieldTypeArray58);
        boolean boolean60 = strSet49.containsAll((java.util.Collection<java.lang.String>) strSet55);
        java.lang.Object[] objArray61 = strSet55.toArray();
        boolean boolean62 = strSet36.retainAll((java.util.Collection<java.lang.String>) strSet55);
        boolean boolean63 = strSet27.addAll((java.util.Collection<java.lang.String>) strSet55);
        org.joda.time.DateTimeFieldType dateTimeFieldType64 = org.joda.time.DateTimeFieldType.yearOfEra();
        boolean boolean65 = strSet55.remove((java.lang.Object) dateTimeFieldType64);
        org.joda.time.LocalDateTime.Property property66 = localDateTime3.property(dateTimeFieldType64);
        int int67 = property66.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime68 = property66.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime70 = localDateTime68.minusMillis(683);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+07:10:22.088" + "'", str9, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDateTime13);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "0100-02-22T14:33:48.437" + "'", str14, "0100-02-22T14:33:48.437");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "");
        org.junit.Assert.assertNotNull(strSet17);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "");
        org.junit.Assert.assertNotNull(strSet21);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[]");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "");
        org.junit.Assert.assertNotNull(strSet24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "");
        org.junit.Assert.assertNotNull(strSet27);
        org.junit.Assert.assertNotNull(durationFieldType28);
        org.junit.Assert.assertNotNull(durationFieldType29);
        org.junit.Assert.assertNotNull(durationFieldTypeArray30);
        org.junit.Assert.assertNotNull(durationFieldTypeArray31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "");
        org.junit.Assert.assertNotNull(strSet36);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[]");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "");
        org.junit.Assert.assertNotNull(strSet39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "");
        org.junit.Assert.assertNotNull(strSet42);
        org.junit.Assert.assertNotNull(durationFieldType43);
        org.junit.Assert.assertNotNull(durationFieldType44);
        org.junit.Assert.assertNotNull(durationFieldTypeArray45);
        org.junit.Assert.assertNotNull(durationFieldTypeArray46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "");
        org.junit.Assert.assertNotNull(strSet49);
        org.junit.Assert.assertNotNull(objArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[]");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "");
        org.junit.Assert.assertNotNull(strSet52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "");
        org.junit.Assert.assertNotNull(strSet55);
        org.junit.Assert.assertNotNull(durationFieldType56);
        org.junit.Assert.assertNotNull(durationFieldType57);
        org.junit.Assert.assertNotNull(durationFieldTypeArray58);
        org.junit.Assert.assertNotNull(durationFieldTypeArray59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(objArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray61), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray61), "[]");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 292278993 + "'", int67 == 292278993);
        org.junit.Assert.assertNotNull(localDateTime68);
        org.junit.Assert.assertNotNull(localDateTime70);
    }

    @Test
    public void test10154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10154");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.millisOfDay();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime3.withYear((int) (short) 100);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.minuteOfHour();
        int int8 = property7.get();
        org.joda.time.LocalDateTime localDateTime10 = property7.setCopy((int) (short) 10);
        org.joda.time.LocalDateTime.Property property11 = localDateTime10.minuteOfHour();
        org.joda.time.LocalDateTime.Property property12 = localDateTime10.weekyear();
        org.joda.time.DurationField durationField13 = property12.getLeapDurationField();
        int int16 = durationField13.getValue(1645629398857L, 1645629671855L);
        org.joda.time.DurationFieldType durationFieldType17 = durationField13.getType();
        org.junit.Assert.assertNotNull(dateTimeZone0);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+07:10:22.088" + "'", str2, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 33 + "'", int8 == 33);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2720 + "'", int16 == 2720);
        org.junit.Assert.assertNotNull(durationFieldType17);
    }

    @Test
    public void test10155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10155");
        org.joda.time.tz.NameProvider nameProvider0 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale1 = java.util.Locale.CANADA;
        java.lang.String str4 = nameProvider0.getShortName(locale1, "fran\347ais", "2022-02-22T07:15:48.066");
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str7 = dateTimeZone5.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime8 = org.joda.time.LocalDateTime.now(dateTimeZone5);
        org.joda.time.LocalDateTime.Property property9 = localDateTime8.millisOfDay();
        org.joda.time.DurationFieldType durationFieldType10 = org.joda.time.DurationFieldType.centuries();
        boolean boolean11 = localDateTime8.equals((java.lang.Object) durationFieldType10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray12 = localDateTime8.getFieldTypes();
        java.lang.String str13 = localDateTime8.toString();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime8.plusMillis(22);
        org.joda.time.LocalDateTime.Property property16 = localDateTime8.monthOfYear();
        java.util.Locale locale17 = java.util.Locale.ROOT;
        int int18 = property16.getMaximumShortTextLength(locale17);
        java.lang.String str19 = locale1.getDisplayCountry(locale17);
        java.lang.String str20 = locale17.getVariant();
        java.lang.String str21 = locale17.getDisplayScript();
        org.junit.Assert.assertNotNull(nameProvider0);
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "en_CA");
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+07:10:22.088" + "'", str7, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(durationFieldType10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray12);
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "2022-02-22T14:33:48.485" + "'", str13, "2022-02-22T14:33:48.485");
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 3 + "'", int18 == 3);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Canada" + "'", str19, "Canada");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
    }

    @Test
    public void test10156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10156");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology3 = localDateTime2.getChronology();
        org.joda.time.DurationField durationField4 = chronology3.weekyears();
        org.joda.time.DurationField durationField5 = chronology3.centuries();
        org.joda.time.DurationField durationField6 = chronology3.hours();
        boolean boolean7 = dateTimeFieldType0.isSupported(chronology3);
        org.joda.time.DateTimeField dateTimeField8 = chronology3.yearOfEra();
        org.joda.time.DateTimeField dateTimeField9 = chronology3.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField10 = chronology3.weekyearOfCentury();
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime(chronology3);
        org.joda.time.DateTimeField dateTimeField12 = chronology3.dayOfWeek();
        long long16 = chronology3.add((-62162700053717L), (-27L), 26295);
        org.joda.time.DateTimeField dateTimeField17 = chronology3.secondOfDay();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-62162700763682L) + "'", long16 == (-62162700763682L));
        org.junit.Assert.assertNotNull(dateTimeField17);
    }

    @Test
    public void test10157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10157");
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology3 = localDateTime2.getChronology();
        org.joda.time.DurationField durationField4 = chronology3.weekyears();
        org.joda.time.DurationField durationField5 = chronology3.centuries();
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime((long) (byte) 0, chronology3);
        org.joda.time.DurationField durationField7 = chronology3.millis();
        org.joda.time.DateTimeField dateTimeField8 = chronology3.minuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str11 = dateTimeZone9.getShortName((long) (short) 10);
        long long13 = dateTimeZone9.convertUTCToLocal((long) ' ');
        java.lang.String str14 = dateTimeZone9.toString();
        java.lang.String str15 = dateTimeZone9.toString();
        java.util.Locale locale17 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale18 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str19 = locale17.getDisplayCountry(locale18);
        java.util.Locale locale20 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale21 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str22 = locale20.getDisplayCountry(locale21);
        java.lang.String str23 = locale17.getDisplayVariant(locale20);
        java.util.Locale locale24 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale25 = locale24.stripExtensions();
        java.lang.String str26 = locale17.getDisplayLanguage(locale25);
        java.lang.String str27 = dateTimeZone9.getName((long) 67, locale25);
        int int28 = dateTimeField8.getMaximumTextLength(locale25);
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime();
        org.joda.time.ReadableDuration readableDuration30 = null;
        org.joda.time.LocalDateTime localDateTime32 = localDateTime29.withDurationAdded(readableDuration30, (int) '#');
        org.joda.time.LocalDateTime.Property property33 = localDateTime29.era();
        org.joda.time.LocalDateTime localDateTime34 = property33.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology38 = localDateTime37.getChronology();
        org.joda.time.DurationField durationField39 = chronology38.weekyears();
        org.joda.time.DurationField durationField40 = chronology38.centuries();
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime((long) (byte) 0, chronology38);
        org.joda.time.DateTimeField dateTimeField42 = chronology38.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField43 = chronology38.clockhourOfHalfday();
        java.util.Locale locale45 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet46 = locale45.getUnicodeLocaleAttributes();
        java.util.Set<java.lang.String> strSet47 = locale45.getUnicodeLocaleAttributes();
        java.lang.String str48 = dateTimeField43.getAsShortText((int) (byte) 0, locale45);
        java.lang.String str49 = dateTimeField8.getAsText((org.joda.time.ReadablePartial) localDateTime34, locale45);
        int int50 = localDateTime34.getSecondOfMinute();
        org.joda.time.LocalDateTime.Property property51 = localDateTime34.yearOfCentury();
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+07:10:22.088" + "'", str11, "+07:10:22.088");
// flaky:         org.junit.Assert.assertTrue("'" + long13 + "' != '" + 25822120L + "'", long13 == 25822120L);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+07:10:22.088" + "'", str14, "+07:10:22.088");
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+07:10:22.088" + "'", str15, "+07:10:22.088");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Canada" + "'", str19, "Canada");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Canada" + "'", str22, "Canada");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "fran\347ais" + "'", str26, "fran\347ais");
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "+07:10:22.088" + "'", str27, "+07:10:22.088");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 4 + "'", int28 == 4);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertNotNull(durationField40);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "");
        org.junit.Assert.assertNotNull(strSet46);
        org.junit.Assert.assertNotNull(strSet47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "0" + "'", str48, "0");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "0" + "'", str49, "0");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(property51);
    }

    @Test
    public void test10158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10158");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.millisOfDay();
        org.joda.time.ReadableInstant readableInstant5 = null;
        long long6 = property4.getDifferenceAsLong(readableInstant5);
        java.util.Locale locale7 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str8 = locale7.getISO3Language();
        java.lang.String str9 = property4.getAsShortText(locale7);
        org.joda.time.DateTimeField dateTimeField10 = property4.getField();
        org.joda.time.LocalDateTime localDateTime11 = property4.withMinimumValue();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray12 = localDateTime11.getFieldTypes();
        org.joda.time.LocalDateTime.Property property13 = localDateTime11.dayOfWeek();
        int[] intArray14 = localDateTime11.getValues();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str17 = dateTimeZone15.getShortName((long) (short) 10);
        long long19 = dateTimeZone15.convertUTCToLocal((long) ' ');
        java.lang.String str20 = dateTimeZone15.toString();
        boolean boolean22 = dateTimeZone15.equals((java.lang.Object) (short) 100);
        java.util.Locale locale24 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str25 = dateTimeZone15.getShortName((long) (-1), locale24);
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime(dateTimeZone15);
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime29 = localDateTime26.withField(dateTimeFieldType27, (int) (short) 100);
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology32 = localDateTime31.getChronology();
        org.joda.time.DurationField durationField33 = chronology32.weekyears();
        org.joda.time.DurationField durationField34 = chronology32.centuries();
        org.joda.time.DateTimeField dateTimeField35 = chronology32.minuteOfDay();
        long long39 = chronology32.add((long) 2, (long) 21, (int) '4');
        boolean boolean40 = dateTimeFieldType27.isSupported(chronology32);
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str43 = dateTimeZone41.getShortName((long) (short) 10);
        long long45 = dateTimeZone41.convertUTCToLocal((long) ' ');
        java.lang.String str46 = dateTimeZone41.toString();
        long long48 = dateTimeZone41.previousTransition(32L);
        org.joda.time.LocalDateTime localDateTime49 = new org.joda.time.LocalDateTime(dateTimeZone41);
        org.joda.time.Chronology chronology50 = chronology32.withZone(dateTimeZone41);
        org.joda.time.DateTimeField dateTimeField51 = chronology50.clockhourOfDay();
        java.util.Locale locale52 = java.util.Locale.GERMANY;
        java.lang.String str53 = locale52.getCountry();
        java.lang.String str54 = locale52.toLanguageTag();
        int int55 = dateTimeField51.getMaximumShortTextLength(locale52);
        java.util.Set<java.lang.Character> charSet56 = locale52.getExtensionKeys();
        boolean boolean57 = localDateTime11.equals((java.lang.Object) locale52);
        org.joda.time.LocalDateTime localDateTime59 = localDateTime11.plusMillis(55076);
        org.junit.Assert.assertNotNull(dateTimeZone0);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+07:10:22.088" + "'", str2, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
// flaky:         org.junit.Assert.assertTrue("'" + long6 + "' != '" + 25822088L + "'", long6 == 25822088L);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "fra" + "'", str8, "fra");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "52428585" + "'", str9, "52428585");
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[2022, 2, 22, 0]");
        org.junit.Assert.assertNotNull(dateTimeZone15);
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+07:10:22.088" + "'", str17, "+07:10:22.088");
// flaky:         org.junit.Assert.assertTrue("'" + long19 + "' != '" + 25822120L + "'", long19 == 25822120L);
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+07:10:22.088" + "'", str20, "+07:10:22.088");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "fr_CA");
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "+07:10:22.088" + "'", str25, "+07:10:22.088");
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 1094L + "'", long39 == 1094L);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(dateTimeZone41);
// flaky:         org.junit.Assert.assertEquals("'" + str43 + "' != '" + "+07:10:22.088" + "'", str43, "+07:10:22.088");
// flaky:         org.junit.Assert.assertTrue("'" + long45 + "' != '" + 25822120L + "'", long45 == 25822120L);
// flaky:         org.junit.Assert.assertEquals("'" + str46 + "' != '" + "+07:10:22.088" + "'", str46, "+07:10:22.088");
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 32L + "'", long48 == 32L);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "DE" + "'", str53, "DE");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "de-DE" + "'", str54, "de-DE");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 2 + "'", int55 == 2);
        org.junit.Assert.assertNotNull(charSet56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(localDateTime59);
    }

    @Test
    public void test10159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10159");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str3 = dateTimeZone1.getShortName((long) (short) 10);
        long long5 = dateTimeZone1.convertUTCToLocal((long) ' ');
        java.lang.String str6 = dateTimeZone1.toString();
        long long9 = dateTimeZone1.adjustOffset((long) (short) 100, false);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        boolean boolean12 = dateTimeZone1.equals((java.lang.Object) "CA");
        int int14 = dateTimeZone1.getOffset(69000L);
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime((long) 437, dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime16 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+07:10:22.088" + "'", str3, "+07:10:22.088");
// flaky:         org.junit.Assert.assertTrue("'" + long5 + "' != '" + 25822120L + "'", long5 == 25822120L);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+07:10:22.088" + "'", str6, "+07:10:22.088");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 100L + "'", long9 == 100L);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 25822088 + "'", int14 == 25822088);
        org.junit.Assert.assertNotNull(localDateTime16);
    }

    @Test
    public void test10160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10160");
        java.lang.String[] strArray1 = java.util.TimeZone.getAvailableIDs(81488292);
        org.junit.Assert.assertNotNull(strArray1);
    }

    @Test
    public void test10161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10161");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        org.joda.time.LocalDateTime localDateTime3 = localDateTime0.withDurationAdded(readableDuration1, (int) '#');
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime3.minusHours(0);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.withWeekyear((int) (short) 10);
        org.joda.time.DateTime dateTime9 = localDateTime8.toDateTime();
        java.lang.String str10 = dateTime9.toString();
        java.lang.String str11 = dateTime9.toString();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "0010-02-23T14:33:48.649+07:10:22.088" + "'", str10, "0010-02-23T14:33:48.649+07:10:22.088");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "0010-02-23T14:33:48.649+07:10:22.088" + "'", str11, "0010-02-23T14:33:48.649+07:10:22.088");
    }

    @Test
    public void test10162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10162");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DurationField durationField3 = chronology2.weekyears();
        org.joda.time.DurationField durationField4 = chronology2.centuries();
        org.joda.time.DurationField durationField5 = chronology2.minutes();
        org.joda.time.DateTimeField dateTimeField6 = chronology2.monthOfYear();
        org.joda.time.DurationField durationField7 = chronology2.months();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str10 = dateTimeZone8.getShortName((long) (short) 10);
        long long12 = dateTimeZone8.convertUTCToLocal((long) ' ');
        java.lang.String str13 = dateTimeZone8.toString();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone8);
        org.joda.time.Chronology chronology15 = chronology2.withZone(dateTimeZone8);
        org.joda.time.DateTimeField dateTimeField16 = chronology15.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField17 = chronology15.halfdayOfDay();
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+07:10:22.088" + "'", str10, "+07:10:22.088");
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + 25822120L + "'", long12 == 25822120L);
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+07:10:22.088" + "'", str13, "+07:10:22.088");
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
    }

    @Test
    public void test10163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10163");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        org.joda.time.LocalDateTime localDateTime3 = localDateTime0.withDurationAdded(readableDuration1, (int) '#');
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.weekyear();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime3.minusMillis((-1));
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime();
        java.lang.String str8 = localDateTime7.toString();
        int int9 = localDateTime7.getCenturyOfEra();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime7.minusMonths(2);
        org.joda.time.LocalDateTime.Property property12 = localDateTime11.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str15 = dateTimeZone13.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime16 = org.joda.time.LocalDateTime.now(dateTimeZone13);
        org.joda.time.LocalDateTime.Property property17 = localDateTime16.millisOfDay();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime16.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime16.plusHours((int) ' ');
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.DateTime dateTime23 = localDateTime21.toDateTime(readableInstant22);
        long long24 = dateTime23.getMillis();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str27 = dateTimeZone25.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime28 = org.joda.time.LocalDateTime.now(dateTimeZone25);
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = localDateTime28.getFieldType((int) (short) 0);
        boolean boolean31 = dateTime23.isSupported(dateTimeFieldType30);
        org.joda.time.DateTime dateTime32 = localDateTime11.toDateTime((org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str35 = dateTimeZone33.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime36 = org.joda.time.LocalDateTime.now(dateTimeZone33);
        org.joda.time.LocalDateTime.Property property37 = localDateTime36.millisOfDay();
        org.joda.time.LocalDateTime localDateTime39 = localDateTime36.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime41 = localDateTime36.plusHours((int) ' ');
        org.joda.time.ReadableInstant readableInstant42 = null;
        org.joda.time.DateTime dateTime43 = localDateTime41.toDateTime(readableInstant42);
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str46 = dateTimeZone44.getShortName((long) (short) 10);
        long long48 = dateTimeZone44.convertUTCToLocal((long) ' ');
        java.lang.String str49 = dateTimeZone44.toString();
        long long51 = dateTimeZone44.previousTransition(32L);
        long long54 = dateTimeZone44.convertLocalToUTC(97L, false);
        boolean boolean55 = dateTime43.equals((java.lang.Object) false);
        boolean boolean56 = dateTime32.isEqual((org.joda.time.ReadableInstant) dateTime43);
        org.joda.time.Instant instant57 = dateTime32.toInstant();
        org.joda.time.DateTime dateTime58 = localDateTime3.toDateTime((org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.Chronology chronology59 = dateTime32.getChronology();
        org.joda.time.DateTimeZone dateTimeZone60 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str62 = dateTimeZone60.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime63 = org.joda.time.LocalDateTime.now(dateTimeZone60);
        org.joda.time.LocalDateTime.Property property64 = localDateTime63.millisOfDay();
        org.joda.time.LocalDateTime localDateTime66 = localDateTime63.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime68 = localDateTime63.plusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime70 = localDateTime68.minusHours((int) (short) 10);
        int int71 = localDateTime68.getMinuteOfHour();
        org.joda.time.ReadablePeriod readablePeriod72 = null;
        org.joda.time.LocalDateTime localDateTime73 = localDateTime68.minus(readablePeriod72);
        org.joda.time.DateTimeZone dateTimeZone74 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str76 = dateTimeZone74.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime77 = org.joda.time.LocalDateTime.now(dateTimeZone74);
        org.joda.time.LocalDateTime.Property property78 = localDateTime77.millisOfDay();
        org.joda.time.LocalDateTime localDateTime80 = localDateTime77.withYear((int) (short) 100);
        int int81 = localDateTime80.getCenturyOfEra();
        boolean boolean82 = localDateTime68.isBefore((org.joda.time.ReadablePartial) localDateTime80);
        org.joda.time.LocalDateTime localDateTime84 = localDateTime80.plusMinutes(0);
        org.joda.time.LocalDateTime localDateTime86 = localDateTime80.withMillisOfSecond(8);
        org.joda.time.LocalDateTime localDateTime88 = localDateTime86.plusSeconds(45);
        boolean boolean89 = dateTime32.equals((java.lang.Object) localDateTime88);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime6);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "2022-02-22T14:33:48.669" + "'", str8, "2022-02-22T14:33:48.669");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 20 + "'", int9 == 20);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTimeZone13);
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+07:10:22.088" + "'", str15, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
// flaky:         org.junit.Assert.assertTrue("'" + long24 + "' != '" + 1645629806581L + "'", long24 == 1645629806581L);
        org.junit.Assert.assertNotNull(dateTimeZone25);
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "+07:10:22.088" + "'", str27, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTimeZone33);
// flaky:         org.junit.Assert.assertEquals("'" + str35 + "' != '" + "+07:10:22.088" + "'", str35, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTimeZone44);
// flaky:         org.junit.Assert.assertEquals("'" + str46 + "' != '" + "+07:10:22.088" + "'", str46, "+07:10:22.088");
// flaky:         org.junit.Assert.assertTrue("'" + long48 + "' != '" + 25822120L + "'", long48 == 25822120L);
// flaky:         org.junit.Assert.assertEquals("'" + str49 + "' != '" + "+07:10:22.088" + "'", str49, "+07:10:22.088");
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 32L + "'", long51 == 32L);
// flaky:         org.junit.Assert.assertTrue("'" + long54 + "' != '" + (-25821991L) + "'", long54 == (-25821991L));
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(instant57);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(dateTimeZone60);
// flaky:         org.junit.Assert.assertEquals("'" + str62 + "' != '" + "+07:10:22.088" + "'", str62, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertNotNull(localDateTime68);
        org.junit.Assert.assertNotNull(localDateTime70);
// flaky:         org.junit.Assert.assertTrue("'" + int71 + "' != '" + 33 + "'", int71 == 33);
        org.junit.Assert.assertNotNull(localDateTime73);
        org.junit.Assert.assertNotNull(dateTimeZone74);
// flaky:         org.junit.Assert.assertEquals("'" + str76 + "' != '" + "+07:10:22.088" + "'", str76, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime77);
        org.junit.Assert.assertNotNull(property78);
        org.junit.Assert.assertNotNull(localDateTime80);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 1 + "'", int81 == 1);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(localDateTime84);
        org.junit.Assert.assertNotNull(localDateTime86);
        org.junit.Assert.assertNotNull(localDateTime88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
    }

    @Test
    public void test10164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10164");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.millisOfDay();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime3.withYear((int) (short) 100);
        int int7 = localDateTime6.getCenturyOfEra();
        int int8 = localDateTime6.getMinuteOfHour();
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.LocalDateTime localDateTime10 = localDateTime6.plus(readableDuration9);
        org.joda.time.LocalDateTime.Property property11 = localDateTime10.year();
        org.junit.Assert.assertNotNull(dateTimeZone0);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+07:10:22.088" + "'", str2, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 33 + "'", int8 == 33);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
    }

    @Test
    public void test10165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10165");
        java.util.Locale locale0 = java.util.Locale.US;
        java.util.Locale locale1 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet2 = locale1.getUnicodeLocaleAttributes();
        java.util.Set<java.lang.String> strSet3 = locale1.getUnicodeLocaleAttributes();
        java.lang.String str4 = locale1.getVariant();
        java.lang.String str5 = locale1.getDisplayLanguage();
        java.lang.String str6 = locale1.getLanguage();
        java.lang.String str7 = locale0.getDisplayVariant(locale1);
        boolean boolean8 = locale0.hasExtensions();
        java.util.Locale.Builder builder9 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder11 = builder9.addUnicodeLocaleAttribute("und");
        java.util.Locale locale12 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale13 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str14 = locale12.getDisplayCountry(locale13);
        java.lang.String str15 = locale13.getDisplayName();
        java.util.Locale.Builder builder16 = builder11.setLocale(locale13);
        java.util.Locale.Builder builder17 = builder11.clearExtensions();
        java.util.Locale.Builder builder19 = builder11.removeUnicodeLocaleAttribute("26185191");
        java.util.Locale locale20 = java.util.Locale.ROOT;
        java.util.Locale.Builder builder21 = builder19.setLocale(locale20);
        java.util.Locale locale22 = builder21.build();
        java.lang.String str23 = locale22.toLanguageTag();
        java.lang.String str24 = locale0.getDisplayLanguage(locale22);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_US");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Canada" + "'", str14, "Canada");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "French (Canada)" + "'", str15, "French (Canada)");
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "");
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "und" + "'", str23, "und");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "English" + "'", str24, "English");
    }

    @Test
    public void test10166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10166");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        java.lang.String str1 = localDateTime0.toString();
        org.joda.time.LocalDateTime localDateTime3 = localDateTime0.plusMonths((int) (short) -1);
        org.joda.time.LocalDateTime.Property property4 = localDateTime0.yearOfEra();
        java.lang.String str5 = property4.getAsText();
        org.joda.time.LocalDateTime localDateTime6 = property4.withMinimumValue();
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.year();
        org.joda.time.LocalDateTime.Property property8 = localDateTime6.dayOfWeek();
        int int9 = property8.getLeapAmount();
        org.joda.time.DurationField durationField10 = property8.getRangeDurationField();
        // The following exception was thrown during execution in test generation
        try {
            long long13 = durationField10.getMillis(1645629581982L, 22018L);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows a long: 1645629581982 * 604800000");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "2022-02-22T14:33:48.732" + "'", str1, "2022-02-22T14:33:48.732");
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "2022" + "'", str5, "2022");
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(durationField10);
    }

    @Test
    public void test10167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10167");
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.weekyears();
        boolean boolean6 = dateTimeFieldType1.isSupported(chronology4);
        org.joda.time.DateTimeField dateTimeField7 = chronology4.halfdayOfDay();
        org.joda.time.DurationField durationField8 = chronology4.weeks();
        org.joda.time.DateTimeField dateTimeField9 = chronology4.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField10 = chronology4.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField11 = chronology4.hourOfDay();
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime((-55L), chronology4);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.minusMillis(27335960);
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(localDateTime14);
    }

    @Test
    public void test10168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10168");
        org.joda.time.tz.Provider provider0 = org.joda.time.DateTimeZone.getProvider();
        org.joda.time.DateTimeZone dateTimeZone2 = provider0.getZone("2022-02-22T07:16:01.507");
        java.util.Set<java.lang.String> strSet3 = provider0.getAvailableIDs();
        java.util.Set<java.lang.String> strSet4 = provider0.getAvailableIDs();
        org.joda.time.DateTimeZone dateTimeZone6 = provider0.getZone("f\351vrier");
        org.joda.time.DateTimeZone.setProvider(provider0);
        java.util.Set<java.lang.String> strSet8 = provider0.getAvailableIDs();
        org.junit.Assert.assertNotNull(provider0);
        org.junit.Assert.assertNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(strSet8);
    }

    @Test
    public void test10169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10169");
        java.util.Locale locale0 = java.util.Locale.PRC;
        java.lang.String str1 = locale0.getDisplayName();
        java.lang.String str2 = locale0.getVariant();
        java.util.Locale.Builder builder3 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder5 = builder3.addUnicodeLocaleAttribute("und");
        java.util.Locale locale6 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale7 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str8 = locale6.getDisplayCountry(locale7);
        java.lang.String str9 = locale7.getDisplayName();
        java.util.Locale.Builder builder10 = builder5.setLocale(locale7);
        java.util.Locale locale11 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale12 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str13 = locale11.getDisplayCountry(locale12);
        java.util.Locale locale14 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale15 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str16 = locale14.getDisplayCountry(locale15);
        java.lang.String str17 = locale11.getDisplayVariant(locale14);
        java.util.Locale locale18 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale19 = locale18.stripExtensions();
        java.lang.String str20 = locale11.getDisplayLanguage(locale19);
        java.util.Locale.Builder builder21 = builder5.setLocale(locale19);
        java.util.Locale.Builder builder22 = builder21.clearExtensions();
        java.util.Locale.Builder builder23 = builder21.clear();
        java.util.Locale.Builder builder24 = builder23.clear();
        java.util.Locale.Builder builder26 = builder24.setLanguage("");
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str29 = dateTimeZone27.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime30 = org.joda.time.LocalDateTime.now(dateTimeZone27);
        org.joda.time.LocalDateTime.Property property31 = localDateTime30.millisOfDay();
        long long32 = property31.remainder();
        org.joda.time.LocalDateTime localDateTime33 = property31.roundFloorCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = property31.getFieldType();
        org.joda.time.LocalDateTime localDateTime35 = property31.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime37 = property31.addToCopy((long) 1970);
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str41 = dateTimeZone39.getShortName((long) (short) 10);
        long long43 = dateTimeZone39.convertUTCToLocal((long) ' ');
        java.lang.String str44 = dateTimeZone39.toString();
        long long47 = dateTimeZone39.adjustOffset((long) (short) 100, false);
        org.joda.time.LocalDateTime localDateTime48 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone39);
        int int49 = property31.compareTo((org.joda.time.ReadablePartial) localDateTime48);
        org.joda.time.DurationField durationField50 = property31.getLeapDurationField();
        org.joda.time.DateTimeFieldType dateTimeFieldType51 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.DateTimeField dateTimeField53 = dateTimeFieldType51.getField(chronology52);
        long long55 = dateTimeField53.roundFloor((long) (-1));
        java.util.Locale.Builder builder56 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder58 = builder56.addUnicodeLocaleAttribute("und");
        java.util.Locale locale59 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale60 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str61 = locale59.getDisplayCountry(locale60);
        java.lang.String str62 = locale60.getDisplayName();
        java.util.Locale.Builder builder63 = builder58.setLocale(locale60);
        int int64 = dateTimeField53.getMaximumShortTextLength(locale60);
        java.lang.String str65 = property31.getAsShortText(locale60);
        java.util.Locale.Builder builder66 = builder24.setLocale(locale60);
        java.lang.String str67 = locale0.getDisplayName(locale60);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Chinesisch (China)" + "'", str1, "Chinesisch (China)");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Canada" + "'", str8, "Canada");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Franz\366sisch (Kanada)" + "'", str9, "Franz\366sisch (Kanada)");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Canada" + "'", str13, "Canada");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Canada" + "'", str16, "Canada");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "fran\347ais" + "'", str20, "fran\347ais");
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(dateTimeZone27);
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "+07:10:22.088" + "'", str29, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(dateTimeZone39);
// flaky:         org.junit.Assert.assertEquals("'" + str41 + "' != '" + "+07:10:22.088" + "'", str41, "+07:10:22.088");
// flaky:         org.junit.Assert.assertTrue("'" + long43 + "' != '" + 25822120L + "'", long43 == 25822120L);
// flaky:         org.junit.Assert.assertEquals("'" + str44 + "' != '" + "+07:10:22.088" + "'", str44, "+07:10:22.088");
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 100L + "'", long47 == 100L);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertNull(durationField50);
        org.junit.Assert.assertNotNull(dateTimeFieldType51);
        org.junit.Assert.assertNotNull(dateTimeField53);
// flaky:         org.junit.Assert.assertTrue("'" + long55 + "' != '" + (-22088L) + "'", long55 == (-22088L));
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "Canada" + "'", str61, "Canada");
// flaky:         org.junit.Assert.assertEquals("'" + str62 + "' != '" + "Franz\366sisch (Kanada)" + "'", str62, "Franz\366sisch (Kanada)");
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 4 + "'", int64 == 4);
// flaky:         org.junit.Assert.assertEquals("'" + str65 + "' != '" + "52428913" + "'", str65, "52428913");
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "chinois (Chine)" + "'", str67, "chinois (Chine)");
    }

    @Test
    public void test10170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10170");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology3 = localDateTime2.getChronology();
        org.joda.time.DurationField durationField4 = chronology3.weekyears();
        org.joda.time.DurationField durationField5 = chronology3.centuries();
        org.joda.time.DurationField durationField6 = chronology3.hours();
        boolean boolean7 = durationFieldType0.isSupported(chronology3);
        org.joda.time.DateTimeField dateTimeField8 = chronology3.secondOfDay();
        org.joda.time.DurationField durationField9 = chronology3.minutes();
        org.joda.time.DateTimeField dateTimeField10 = chronology3.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now(chronology3);
        int int12 = localDateTime11.getDayOfMonth();
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.dayOfWeek();
        int int14 = localDateTime11.get(dateTimeFieldType13);
        org.joda.time.DurationFieldType durationFieldType15 = dateTimeFieldType13.getRangeDurationType();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str18 = dateTimeZone16.getShortName((long) (short) 10);
        long long20 = dateTimeZone16.convertUTCToLocal((long) ' ');
        java.lang.String str21 = dateTimeZone16.toString();
        boolean boolean23 = dateTimeZone16.equals((java.lang.Object) (short) 100);
        java.util.Locale locale25 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str26 = dateTimeZone16.getShortName((long) (-1), locale25);
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime(dateTimeZone16);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime30 = localDateTime27.withField(dateTimeFieldType28, (int) (short) 100);
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology33 = localDateTime32.getChronology();
        org.joda.time.DurationField durationField34 = chronology33.weekyears();
        org.joda.time.DurationField durationField35 = chronology33.centuries();
        org.joda.time.DateTimeField dateTimeField36 = chronology33.minuteOfDay();
        long long40 = chronology33.add((long) 2, (long) 21, (int) '4');
        boolean boolean41 = dateTimeFieldType28.isSupported(chronology33);
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str44 = dateTimeZone42.getShortName((long) (short) 10);
        long long46 = dateTimeZone42.convertUTCToLocal((long) ' ');
        java.lang.String str47 = dateTimeZone42.toString();
        long long49 = dateTimeZone42.previousTransition(32L);
        org.joda.time.LocalDateTime localDateTime50 = new org.joda.time.LocalDateTime(dateTimeZone42);
        org.joda.time.Chronology chronology51 = chronology33.withZone(dateTimeZone42);
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 100);
        org.joda.time.Chronology chronology54 = chronology33.withZone(dateTimeZone53);
        org.joda.time.DateTimeField dateTimeField55 = chronology33.year();
        org.joda.time.DateTimeField dateTimeField56 = dateTimeFieldType13.getField(chronology33);
        org.joda.time.DateTimeField dateTimeField57 = chronology33.secondOfMinute();
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 22 + "'", int12 == 22);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertNotNull(durationFieldType15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+07:10:22.088" + "'", str18, "+07:10:22.088");
// flaky:         org.junit.Assert.assertTrue("'" + long20 + "' != '" + 25822120L + "'", long20 == 25822120L);
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "+07:10:22.088" + "'", str21, "+07:10:22.088");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "fr_CA");
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "+07:10:22.088" + "'", str26, "+07:10:22.088");
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 1094L + "'", long40 == 1094L);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(dateTimeZone42);
// flaky:         org.junit.Assert.assertEquals("'" + str44 + "' != '" + "+07:10:22.088" + "'", str44, "+07:10:22.088");
// flaky:         org.junit.Assert.assertTrue("'" + long46 + "' != '" + 25822120L + "'", long46 == 25822120L);
// flaky:         org.junit.Assert.assertEquals("'" + str47 + "' != '" + "+07:10:22.088" + "'", str47, "+07:10:22.088");
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 32L + "'", long49 == 32L);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(dateTimeField57);
    }

    @Test
    public void test10171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10171");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(100L);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusSeconds(9);
        org.joda.time.LocalDateTime.Property property5 = localDateTime1.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime1.withCenturyOfEra(2);
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.LocalDateTime.Property property9 = localDateTime7.property(dateTimeFieldType8);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str12 = dateTimeZone10.getShortName((long) (short) 10);
        long long14 = dateTimeZone10.convertUTCToLocal((long) ' ');
        java.lang.String str15 = dateTimeZone10.toString();
        boolean boolean17 = dateTimeZone10.equals((java.lang.Object) (short) 100);
        java.util.Locale locale19 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str20 = dateTimeZone10.getShortName((long) (-1), locale19);
        org.joda.time.DateTime dateTime21 = localDateTime7.toDateTime(dateTimeZone10);
        java.lang.String str23 = dateTimeZone10.getNameKey(1645629365489L);
        int int25 = dateTimeZone10.getStandardOffset(0L);
        int int27 = dateTimeZone10.getStandardOffset(1151828812800052L);
        java.util.TimeZone timeZone28 = dateTimeZone10.toTimeZone();
        int int30 = dateTimeZone10.getOffsetFromLocal(0L);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+07:10:22.088" + "'", str12, "+07:10:22.088");
// flaky:         org.junit.Assert.assertTrue("'" + long14 + "' != '" + 25822120L + "'", long14 == 25822120L);
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+07:10:22.088" + "'", str15, "+07:10:22.088");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "fr_CA");
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+07:10:22.088" + "'", str20, "+07:10:22.088");
        org.junit.Assert.assertNotNull(dateTime21);
// flaky:         org.junit.Assert.assertNull(str23);
// flaky:         org.junit.Assert.assertTrue("'" + int25 + "' != '" + 25822088 + "'", int25 == 25822088);
// flaky:         org.junit.Assert.assertTrue("'" + int27 + "' != '" + 25822088 + "'", int27 == 25822088);
        org.junit.Assert.assertNotNull(timeZone28);
// flaky:         org.junit.Assert.assertEquals(timeZone28.getDisplayName(), "GMT+07:10");
// flaky:         org.junit.Assert.assertTrue("'" + int30 + "' != '" + 25822088 + "'", int30 == 25822088);
    }

    @Test
    public void test10172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10172");
        java.util.Locale locale0 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str1 = locale0.getISO3Language();
        java.lang.String str2 = locale0.getDisplayVariant();
        java.lang.String str3 = locale0.getDisplayCountry();
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTimeField dateTimeField6 = dateTimeFieldType4.getField(chronology5);
        java.util.Locale locale8 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale9 = locale8.stripExtensions();
        java.lang.String str10 = dateTimeField6.getAsShortText(100, locale9);
        int int12 = dateTimeField6.getLeapAmount((long) (short) 100);
        java.lang.String str13 = dateTimeField6.getName();
        long long16 = dateTimeField6.add((long) (short) 1, 0);
        int int18 = dateTimeField6.get((long) 86399999);
        int int20 = dateTimeField6.get((long) ' ');
        int int22 = dateTimeField6.getMaximumValue(97L);
        long long25 = dateTimeField6.set(1645629374450L, 20);
        java.util.Locale locale27 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet28 = locale27.getUnicodeLocaleAttributes();
        java.util.Set<java.lang.String> strSet29 = locale27.getUnicodeLocaleAttributes();
        java.lang.String str30 = locale27.getVariant();
        java.lang.String str31 = dateTimeField6.getAsText(1645629532248L, locale27);
        int int33 = dateTimeField6.getLeapAmount((long) 29);
        org.joda.time.tz.NameProvider nameProvider35 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale.Category category36 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale37 = java.util.Locale.FRENCH;
        java.util.Locale.setDefault(category36, locale37);
        java.lang.String str39 = locale37.toLanguageTag();
        java.lang.String str40 = locale37.getLanguage();
        java.lang.String str43 = nameProvider35.getShortName(locale37, "days", "26149261");
        org.joda.time.DateTimeZone.setNameProvider(nameProvider35);
        org.joda.time.DateTimeZone.setNameProvider(nameProvider35);
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.DateTimeField dateTimeField48 = dateTimeFieldType46.getField(chronology47);
        long long50 = dateTimeField48.roundFloor((long) (-1));
        org.joda.time.DurationField durationField51 = dateTimeField48.getDurationField();
        java.lang.String str53 = dateTimeField48.getAsText(0L);
        long long55 = dateTimeField48.roundHalfCeiling(1645629364123L);
        long long57 = dateTimeField48.roundHalfCeiling((-31L));
        java.util.Locale locale59 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet60 = locale59.getUnicodeLocaleAttributes();
        java.util.Set<java.lang.String> strSet61 = locale59.getUnicodeLocaleAttributes();
        java.lang.String str62 = locale59.getVariant();
        java.lang.String str63 = locale59.getDisplayLanguage();
        java.lang.String str64 = dateTimeField48.getAsText(31795200000L, locale59);
        java.lang.String str67 = nameProvider35.getShortName(locale59, "weekyearOfCentury", "26186144");
        java.util.Set<java.lang.String> strSet68 = locale59.getUnicodeLocaleKeys();
        java.lang.String str69 = dateTimeField6.getAsText(55, locale59);
        java.lang.String str70 = locale0.getDisplayName(locale59);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str72 = locale0.getUnicodeLocaleType("2022-02-22T07:17:04.636");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed Unicode locale key: 2022-02-22T07:17:04.636");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "fra" + "'", str1, "fra");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Kanada" + "'", str3, "Kanada");
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "100" + "'", str10, "100");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "minuteOfDay" + "'", str13, "minuteOfDay");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1L + "'", long16 == 1L);
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + 430 + "'", int18 == 430);
// flaky:         org.junit.Assert.assertTrue("'" + int20 + "' != '" + 430 + "'", int20 == 430);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1439 + "'", int22 == 1439);
// flaky:         org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1645549814450L + "'", long25 == 1645549814450L);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "");
        org.junit.Assert.assertNotNull(strSet28);
        org.junit.Assert.assertNotNull(strSet29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "1349" + "'", str31, "1349");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(nameProvider35);
        org.junit.Assert.assertTrue("'" + category36 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category36.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "fr" + "'", str39, "fr");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "fr" + "'", str40, "fr");
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNotNull(dateTimeFieldType46);
        org.junit.Assert.assertNotNull(dateTimeField48);
// flaky:         org.junit.Assert.assertTrue("'" + long50 + "' != '" + (-22088L) + "'", long50 == (-22088L));
        org.junit.Assert.assertNotNull(durationField51);
// flaky:         org.junit.Assert.assertEquals("'" + str53 + "' != '" + "430" + "'", str53, "430");
// flaky:         org.junit.Assert.assertTrue("'" + long55 + "' != '" + 1645629337912L + "'", long55 == 1645629337912L);
// flaky:         org.junit.Assert.assertTrue("'" + long57 + "' != '" + (-22088L) + "'", long57 == (-22088L));
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "");
        org.junit.Assert.assertNotNull(strSet60);
        org.junit.Assert.assertNotNull(strSet61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
// flaky:         org.junit.Assert.assertEquals("'" + str64 + "' != '" + "430" + "'", str64, "430");
        org.junit.Assert.assertNull(str67);
        org.junit.Assert.assertNotNull(strSet68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "55" + "'", str69, "55");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "French (Canada)" + "'", str70, "French (Canada)");
    }

    @Test
    public void test10173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10173");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology3 = localDateTime2.getChronology();
        org.joda.time.DurationField durationField4 = chronology3.weekyears();
        boolean boolean5 = dateTimeFieldType0.isSupported(chronology3);
        org.joda.time.DateTimeField dateTimeField6 = chronology3.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField7 = chronology3.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField8 = chronology3.era();
        org.joda.time.DateTimeField dateTimeField9 = chronology3.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField10 = chronology3.secondOfDay();
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime(chronology3);
        org.joda.time.Chronology chronology12 = localDateTime11.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.weekyear();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
    }

    @Test
    public void test10174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10174");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.millisOfDay();
        java.lang.String str5 = property4.getName();
        org.joda.time.LocalDateTime localDateTime6 = property4.roundHalfFloorCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        boolean boolean8 = localDateTime6.isSupported(dateTimeFieldType7);
        java.lang.String str9 = dateTimeFieldType7.toString();
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology12 = localDateTime11.getChronology();
        org.joda.time.DurationField durationField13 = chronology12.weekyears();
        org.joda.time.DurationField durationField14 = chronology12.seconds();
        org.joda.time.DurationField durationField15 = chronology12.seconds();
        org.joda.time.DurationField durationField16 = chronology12.seconds();
        org.joda.time.DateTimeField dateTimeField17 = chronology12.millisOfDay();
        org.joda.time.DateTimeField dateTimeField18 = chronology12.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField19 = dateTimeFieldType7.getField(chronology12);
        org.joda.time.DurationField durationField20 = chronology12.minutes();
        org.joda.time.DurationField durationField21 = chronology12.weekyears();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str24 = dateTimeZone22.getShortName((long) (short) 10);
        long long26 = dateTimeZone22.convertUTCToLocal((long) ' ');
        java.lang.String str27 = dateTimeZone22.toString();
        boolean boolean29 = dateTimeZone22.equals((java.lang.Object) (short) 100);
        java.util.Locale locale31 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str32 = dateTimeZone22.getShortName((long) (-1), locale31);
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime(dateTimeZone22);
        int int35 = dateTimeZone22.getOffset((long) (short) 10);
        java.util.TimeZone timeZone36 = dateTimeZone22.toTimeZone();
        org.joda.time.LocalDateTime localDateTime37 = org.joda.time.LocalDateTime.now(dateTimeZone22);
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str40 = dateTimeZone38.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime41 = org.joda.time.LocalDateTime.now(dateTimeZone38);
        org.joda.time.LocalDateTime.Property property42 = localDateTime41.millisOfDay();
        org.joda.time.ReadableInstant readableInstant43 = null;
        long long44 = property42.getDifferenceAsLong(readableInstant43);
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str47 = dateTimeZone45.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime48 = org.joda.time.LocalDateTime.now(dateTimeZone45);
        org.joda.time.LocalDateTime.Property property49 = localDateTime48.millisOfDay();
        org.joda.time.LocalDateTime localDateTime51 = localDateTime48.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime53 = localDateTime48.plusHours((int) ' ');
        org.joda.time.ReadableInstant readableInstant54 = null;
        org.joda.time.DateTime dateTime55 = localDateTime53.toDateTime(readableInstant54);
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str58 = dateTimeZone56.getShortName((long) (short) 10);
        long long60 = dateTimeZone56.convertUTCToLocal((long) ' ');
        java.lang.String str61 = dateTimeZone56.toString();
        long long63 = dateTimeZone56.previousTransition(32L);
        long long66 = dateTimeZone56.convertLocalToUTC(97L, false);
        boolean boolean67 = dateTime55.equals((java.lang.Object) false);
        org.joda.time.DateTimeZone dateTimeZone68 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str70 = dateTimeZone68.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime71 = org.joda.time.LocalDateTime.now(dateTimeZone68);
        org.joda.time.LocalDateTime.Property property72 = localDateTime71.millisOfDay();
        org.joda.time.LocalDateTime localDateTime74 = localDateTime71.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime76 = localDateTime71.plusHours((int) ' ');
        org.joda.time.ReadableInstant readableInstant77 = null;
        org.joda.time.DateTime dateTime78 = localDateTime76.toDateTime(readableInstant77);
        long long79 = dateTime78.getMillis();
        org.joda.time.DateTimeZone dateTimeZone80 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str82 = dateTimeZone80.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime83 = org.joda.time.LocalDateTime.now(dateTimeZone80);
        org.joda.time.DateTimeFieldType dateTimeFieldType85 = localDateTime83.getFieldType((int) (short) 0);
        boolean boolean86 = dateTime78.isSupported(dateTimeFieldType85);
        boolean boolean87 = dateTime55.isAfter((org.joda.time.ReadableInstant) dateTime78);
        int int88 = property42.compareTo((org.joda.time.ReadableInstant) dateTime55);
        int int89 = dateTimeZone22.getOffset((org.joda.time.ReadableInstant) dateTime55);
        org.joda.time.Chronology chronology90 = chronology12.withZone(dateTimeZone22);
        org.junit.Assert.assertNotNull(dateTimeZone0);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+07:10:22.088" + "'", str2, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "millisOfDay" + "'", str5, "millisOfDay");
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "clockhourOfDay" + "'", str9, "clockhourOfDay");
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeZone22);
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "+07:10:22.088" + "'", str24, "+07:10:22.088");
// flaky:         org.junit.Assert.assertTrue("'" + long26 + "' != '" + 25822120L + "'", long26 == 25822120L);
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "+07:10:22.088" + "'", str27, "+07:10:22.088");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "fr_CA");
// flaky:         org.junit.Assert.assertEquals("'" + str32 + "' != '" + "+07:10:22.088" + "'", str32, "+07:10:22.088");
// flaky:         org.junit.Assert.assertTrue("'" + int35 + "' != '" + 25822088 + "'", int35 == 25822088);
        org.junit.Assert.assertNotNull(timeZone36);
// flaky:         org.junit.Assert.assertEquals(timeZone36.getDisplayName(), "GMT+07:10");
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(dateTimeZone38);
// flaky:         org.junit.Assert.assertEquals("'" + str40 + "' != '" + "+07:10:22.088" + "'", str40, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(property42);
// flaky:         org.junit.Assert.assertTrue("'" + long44 + "' != '" + 25822088L + "'", long44 == 25822088L);
        org.junit.Assert.assertNotNull(dateTimeZone45);
// flaky:         org.junit.Assert.assertEquals("'" + str47 + "' != '" + "+07:10:22.088" + "'", str47, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTimeZone56);
// flaky:         org.junit.Assert.assertEquals("'" + str58 + "' != '" + "+07:10:22.088" + "'", str58, "+07:10:22.088");
// flaky:         org.junit.Assert.assertTrue("'" + long60 + "' != '" + 25822120L + "'", long60 == 25822120L);
// flaky:         org.junit.Assert.assertEquals("'" + str61 + "' != '" + "+07:10:22.088" + "'", str61, "+07:10:22.088");
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 32L + "'", long63 == 32L);
// flaky:         org.junit.Assert.assertTrue("'" + long66 + "' != '" + (-25821991L) + "'", long66 == (-25821991L));
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(dateTimeZone68);
// flaky:         org.junit.Assert.assertEquals("'" + str70 + "' != '" + "+07:10:22.088" + "'", str70, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime71);
        org.junit.Assert.assertNotNull(property72);
        org.junit.Assert.assertNotNull(localDateTime74);
        org.junit.Assert.assertNotNull(localDateTime76);
        org.junit.Assert.assertNotNull(dateTime78);
// flaky:         org.junit.Assert.assertTrue("'" + long79 + "' != '" + 1645629806928L + "'", long79 == 1645629806928L);
        org.junit.Assert.assertNotNull(dateTimeZone80);
// flaky:         org.junit.Assert.assertEquals("'" + str82 + "' != '" + "+07:10:22.088" + "'", str82, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime83);
        org.junit.Assert.assertNotNull(dateTimeFieldType85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + (-1) + "'", int88 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + int89 + "' != '" + 25822088 + "'", int89 == 25822088);
        org.junit.Assert.assertNotNull(chronology90);
    }

    @Test
    public void test10175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10175");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.millisOfDay();
        java.lang.String str5 = property4.getName();
        org.joda.time.LocalDateTime localDateTime6 = property4.roundHalfFloorCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        boolean boolean8 = localDateTime6.isSupported(dateTimeFieldType7);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str11 = dateTimeZone9.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime12 = org.joda.time.LocalDateTime.now(dateTimeZone9);
        org.joda.time.LocalDateTime.Property property13 = localDateTime12.millisOfDay();
        org.joda.time.DurationFieldType durationFieldType14 = org.joda.time.DurationFieldType.centuries();
        boolean boolean15 = localDateTime12.equals((java.lang.Object) durationFieldType14);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray16 = localDateTime12.getFieldTypes();
        java.lang.String str17 = localDateTime12.toString();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime12.plusMillis(22);
        boolean boolean20 = localDateTime6.isBefore((org.joda.time.ReadablePartial) localDateTime19);
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.LocalDateTime localDateTime22 = localDateTime19.plus(readableDuration21);
        org.joda.time.LocalDateTime.Property property23 = localDateTime22.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime();
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.LocalDateTime localDateTime27 = localDateTime24.withDurationAdded(readableDuration25, (int) '#');
        org.joda.time.LocalDateTime.Property property28 = localDateTime24.era();
        java.util.Locale locale29 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale30 = locale29.stripExtensions();
        java.lang.String str31 = locale29.getVariant();
        java.lang.String str32 = locale29.getLanguage();
        java.util.Locale locale35 = new java.util.Locale("fra", "fran\347ais (Canada)");
        java.lang.String str36 = locale29.getDisplayName(locale35);
        java.lang.String str37 = property28.getAsShortText(locale29);
        java.lang.String str38 = locale29.getDisplayVariant();
        int int39 = property23.getMaximumShortTextLength(locale29);
        org.joda.time.LocalDateTime localDateTime40 = property23.roundCeilingCopy();
        org.joda.time.LocalDateTime localDateTime41 = property23.withMinimumValue();
        boolean boolean42 = property23.isLeap();
        org.junit.Assert.assertNotNull(dateTimeZone0);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+07:10:22.088" + "'", str2, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "millisOfDay" + "'", str5, "millisOfDay");
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(dateTimeZone9);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+07:10:22.088" + "'", str11, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(durationFieldType14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray16);
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "2022-02-22T14:33:49.071" + "'", str17, "2022-02-22T14:33:49.071");
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "fr" + "'", str32, "fr");
        org.junit.Assert.assertEquals(locale35.toString(), "fra_FRAN\347AIS (CANADA)");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "French (Canada)" + "'", str36, "French (Canada)");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "ap. J.-C." + "'", str37, "ap. J.-C.");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2 + "'", int39 == 2);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test10176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10176");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        java.util.Locale.setDefault(locale2);
        java.util.Locale.Builder builder4 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder6 = builder4.addUnicodeLocaleAttribute("und");
        java.util.Locale.Builder builder7 = builder6.clear();
        java.util.Locale locale8 = builder7.build();
        java.lang.String str9 = locale8.toLanguageTag();
        java.lang.String str10 = locale2.getDisplayCountry(locale8);
        java.util.Locale.Builder builder11 = builder0.setLocale(locale2);
        java.util.Locale.Builder builder12 = builder0.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder14 = builder0.addUnicodeLocaleAttribute("2022-02-22T14:33:41.518");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: 2022-02-22T14:33:41.518 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "und" + "'", str9, "und");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test10177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10177");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.DurationFieldType durationFieldType1 = dateTimeFieldType0.getDurationType();
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.weekyears();
        org.joda.time.DurationField durationField6 = chronology4.centuries();
        boolean boolean7 = durationFieldType1.isSupported(chronology4);
        org.joda.time.DurationField durationField8 = chronology4.halfdays();
        org.joda.time.LocalDateTime localDateTime9 = org.joda.time.LocalDateTime.now(chronology4);
        org.joda.time.DateTimeField dateTimeField10 = chronology4.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField11 = chronology4.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField12 = chronology4.minuteOfDay();
        org.joda.time.DurationField durationField13 = chronology4.weeks();
        long long16 = durationField13.subtract(3301297021000L, 256L);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(durationFieldType1);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 3146468221000L + "'", long16 == 3146468221000L);
    }

    @Test
    public void test10178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10178");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DurationField durationField3 = chronology2.hours();
        java.lang.String str4 = chronology2.toString();
        org.joda.time.DateTimeField dateTimeField5 = chronology2.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField6 = chronology2.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime();
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.LocalDateTime localDateTime10 = localDateTime7.withDurationAdded(readableDuration8, (int) '#');
        org.joda.time.LocalDateTime.Property property11 = localDateTime10.weekyear();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime10.minusMillis((-1));
        org.joda.time.LocalDateTime.Property property14 = localDateTime10.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime15 = property14.roundHalfFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str18 = dateTimeZone16.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime19 = org.joda.time.LocalDateTime.now(dateTimeZone16);
        org.joda.time.LocalDateTime.Property property20 = localDateTime19.millisOfDay();
        org.joda.time.DurationFieldType durationFieldType21 = org.joda.time.DurationFieldType.centuries();
        boolean boolean22 = localDateTime19.equals((java.lang.Object) durationFieldType21);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray23 = localDateTime19.getFieldTypes();
        java.lang.String str24 = localDateTime19.toString();
        org.joda.time.LocalDateTime localDateTime26 = localDateTime19.plusMillis(22);
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.secondOfDay();
        boolean boolean28 = localDateTime19.isSupported(dateTimeFieldType27);
        int int29 = localDateTime15.indexOf(dateTimeFieldType27);
        int[] intArray31 = chronology2.get((org.joda.time.ReadablePartial) localDateTime15, 1645629358650L);
        org.joda.time.DurationField durationField32 = chronology2.millis();
        org.joda.time.DurationField durationField33 = chronology2.halfdays();
        org.joda.time.LocalDateTime localDateTime34 = org.joda.time.LocalDateTime.now(chronology2);
        org.joda.time.DateTimeField dateTimeField35 = chronology2.hourOfHalfday();
        java.lang.String str36 = dateTimeField35.toString();
        long long39 = dateTimeField35.add(5356800224L, 1645629619417L);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "ISOChronology[UTC]" + "'", str4, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+07:10:22.088" + "'", str18, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(durationFieldType21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray23);
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "2022-02-22T14:33:49.130" + "'", str24, "2022-02-22T14:33:49.130");
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[2022, 2, 23, 54958650]");
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "DateTimeField[hourOfHalfday]" + "'", str36, "DateTimeField[hourOfHalfday]");
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 5924266635258000224L + "'", long39 == 5924266635258000224L);
    }

    @Test
    public void test10179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10179");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DurationField durationField3 = chronology2.hours();
        java.lang.String str4 = chronology2.toString();
        org.joda.time.DateTimeField dateTimeField5 = chronology2.clockhourOfDay();
        int int7 = dateTimeField5.get(1645629354990L);
        java.util.Locale locale11 = new java.util.Locale("und", "+00:00:00.097");
        boolean boolean12 = locale11.hasExtensions();
        java.lang.String str13 = dateTimeField5.getAsShortText((long) 26169, locale11);
        long long16 = dateTimeField5.add(1645629374095L, (int) (short) 100);
        long long18 = dateTimeField5.remainder(0L);
        java.util.Locale locale22 = new java.util.Locale("2022-02-22T07:16:06.715", "0100-02-22T07:15:51.431");
        java.util.Set<java.lang.Character> charSet23 = locale22.getExtensionKeys();
        java.lang.String str24 = dateTimeField5.getAsShortText(1979, locale22);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "ISOChronology[UTC]" + "'", str4, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 15 + "'", int7 == 15);
        org.junit.Assert.assertEquals(locale11.toString(), "und_+00:00:00.097");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "24" + "'", str13, "24");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1645989374095L + "'", long16 == 1645989374095L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertEquals(locale22.toString(), "2022-02-22t07:16:06.715_0100-02-22T07:15:51.431");
        org.junit.Assert.assertNotNull(charSet23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "1979" + "'", str24, "1979");
    }

    @Test
    public void test10180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10180");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getShortName((long) (short) 10);
        long long4 = dateTimeZone0.convertUTCToLocal((long) ' ');
        java.lang.String str5 = dateTimeZone0.toString();
        boolean boolean7 = dateTimeZone0.equals((java.lang.Object) (short) 100);
        java.util.Locale locale9 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str10 = dateTimeZone0.getShortName((long) (-1), locale9);
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime11.withField(dateTimeFieldType12, (int) (short) 100);
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology17 = localDateTime16.getChronology();
        org.joda.time.DurationField durationField18 = chronology17.weekyears();
        org.joda.time.DurationField durationField19 = chronology17.centuries();
        org.joda.time.DateTimeField dateTimeField20 = chronology17.minuteOfDay();
        long long24 = chronology17.add((long) 2, (long) 21, (int) '4');
        boolean boolean25 = dateTimeFieldType12.isSupported(chronology17);
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str28 = dateTimeZone26.getShortName((long) (short) 10);
        long long30 = dateTimeZone26.convertUTCToLocal((long) ' ');
        java.lang.String str31 = dateTimeZone26.toString();
        long long33 = dateTimeZone26.previousTransition(32L);
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime(dateTimeZone26);
        org.joda.time.Chronology chronology35 = chronology17.withZone(dateTimeZone26);
        org.joda.time.DateTimeField dateTimeField36 = chronology35.clockhourOfDay();
        java.util.Locale locale37 = java.util.Locale.CANADA_FRENCH;
        boolean boolean38 = locale37.hasExtensions();
        int int39 = dateTimeField36.getMaximumTextLength(locale37);
        java.util.Set<java.lang.String> strSet40 = locale37.getUnicodeLocaleKeys();
        java.util.Locale locale42 = java.util.Locale.forLanguageTag("2022-02-22T07:20:59.795");
        java.lang.String str43 = locale42.getISO3Language();
        java.lang.String str44 = locale37.getDisplayVariant(locale42);
        org.junit.Assert.assertNotNull(dateTimeZone0);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+07:10:22.088" + "'", str2, "+07:10:22.088");
// flaky:         org.junit.Assert.assertTrue("'" + long4 + "' != '" + 25822120L + "'", long4 == 25822120L);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+07:10:22.088" + "'", str5, "+07:10:22.088");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "fr_CA");
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+07:10:22.088" + "'", str10, "+07:10:22.088");
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 1094L + "'", long24 == 1094L);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(dateTimeZone26);
// flaky:         org.junit.Assert.assertEquals("'" + str28 + "' != '" + "+07:10:22.088" + "'", str28, "+07:10:22.088");
// flaky:         org.junit.Assert.assertTrue("'" + long30 + "' != '" + 25822120L + "'", long30 == 25822120L);
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "+07:10:22.088" + "'", str31, "+07:10:22.088");
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 32L + "'", long33 == 32L);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "fr_CA");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2 + "'", int39 == 2);
        org.junit.Assert.assertNotNull(strSet40);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
    }

    @Test
    public void test10181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10181");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        org.joda.time.LocalDateTime localDateTime3 = localDateTime0.withDurationAdded(readableDuration1, (int) '#');
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.weekyear();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime3.minusMillis((-1));
        org.joda.time.LocalDateTime.Property property7 = localDateTime3.dayOfMonth();
        int int8 = localDateTime3.getWeekyear();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime3.plusSeconds(26163523);
        org.joda.time.Chronology chronology11 = localDateTime3.getChronology();
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((java.lang.Object) 3304318800000L);
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime();
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.LocalDateTime localDateTime17 = localDateTime14.withDurationAdded(readableDuration15, (int) '#');
        org.joda.time.LocalDateTime.Property property18 = localDateTime17.weekyear();
        int int19 = property18.getMaximumValue();
        org.joda.time.DateTimeField dateTimeField20 = property18.getField();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str23 = dateTimeZone21.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime24 = org.joda.time.LocalDateTime.now(dateTimeZone21);
        org.joda.time.LocalDateTime.Property property25 = localDateTime24.millisOfDay();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime24.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime24.plusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.minusHours((int) (short) 10);
        int int32 = dateTimeField20.getMinimumValue((org.joda.time.ReadablePartial) localDateTime31);
        java.lang.String str34 = dateTimeField20.getAsText((long) (-292275054));
        long long36 = dateTimeField20.roundHalfFloor(0L);
        int int39 = dateTimeField20.getDifference(864000010L, 1645629368231L);
        org.joda.time.LocalDateTime localDateTime40 = new org.joda.time.LocalDateTime();
        java.lang.String str41 = localDateTime40.toString();
        org.joda.time.LocalDateTime localDateTime43 = localDateTime40.plusMonths((int) (short) -1);
        org.joda.time.LocalDateTime.Property property44 = localDateTime40.yearOfEra();
        org.joda.time.LocalDateTime localDateTime46 = property44.addToCopy(20);
        org.joda.time.LocalDateTime localDateTime49 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology50 = localDateTime49.getChronology();
        org.joda.time.DurationField durationField51 = chronology50.weekyears();
        org.joda.time.DurationField durationField52 = chronology50.centuries();
        org.joda.time.LocalDateTime localDateTime53 = new org.joda.time.LocalDateTime((long) (byte) 0, chronology50);
        org.joda.time.DurationField durationField54 = chronology50.millis();
        org.joda.time.DateTimeField dateTimeField55 = chronology50.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField56 = chronology50.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField57 = chronology50.yearOfEra();
        org.joda.time.DateTimeField dateTimeField58 = chronology50.year();
        org.joda.time.DateTimeZone dateTimeZone59 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str61 = dateTimeZone59.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime62 = org.joda.time.LocalDateTime.now(dateTimeZone59);
        org.joda.time.LocalDateTime.Property property63 = localDateTime62.millisOfDay();
        org.joda.time.DurationFieldType durationFieldType64 = org.joda.time.DurationFieldType.centuries();
        boolean boolean65 = localDateTime62.equals((java.lang.Object) durationFieldType64);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray66 = localDateTime62.getFieldTypes();
        java.lang.String str67 = localDateTime62.toString();
        org.joda.time.LocalDateTime localDateTime69 = localDateTime62.plusMillis(22);
        int[] intArray71 = chronology50.get((org.joda.time.ReadablePartial) localDateTime69, (-1893417120000000L));
        int int72 = dateTimeField20.getMaximumValue((org.joda.time.ReadablePartial) localDateTime46, intArray71);
        int[] intArray73 = localDateTime46.getValues();
        chronology11.validate((org.joda.time.ReadablePartial) localDateTime13, intArray73);
        int int75 = localDateTime13.getYearOfCentury();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2022 + "'", int8 == 2022);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 292278993 + "'", int19 == 292278993);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "+07:10:22.088" + "'", str23, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-292275054) + "'", int32 == (-292275054));
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "1969" + "'", str34, "1969");
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + (-259200000L) + "'", long36 == (-259200000L));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-52) + "'", int39 == (-52));
// flaky:         org.junit.Assert.assertEquals("'" + str41 + "' != '" + "2022-02-22T14:33:49.231" + "'", str41, "2022-02-22T14:33:49.231");
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(durationField51);
        org.junit.Assert.assertNotNull(durationField52);
        org.junit.Assert.assertNotNull(durationField54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(dateTimeZone59);
// flaky:         org.junit.Assert.assertEquals("'" + str61 + "' != '" + "+07:10:22.088" + "'", str61, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertNotNull(durationFieldType64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray66);
// flaky:         org.junit.Assert.assertEquals("'" + str67 + "' != '" + "2022-02-22T14:33:49.231" + "'", str67, "2022-02-22T14:33:49.231");
        org.junit.Assert.assertNotNull(localDateTime69);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-58030, 1, 1, 0]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 292278993 + "'", int72 == 292278993);
        org.junit.Assert.assertNotNull(intArray73);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[2042, 2, 22, 52429231]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 74 + "'", int75 == 74);
    }

    @Test
    public void test10182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10182");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology3 = localDateTime2.getChronology();
        org.joda.time.DurationField durationField4 = chronology3.weekyears();
        boolean boolean5 = dateTimeFieldType0.isSupported(chronology3);
        org.joda.time.DateTimeField dateTimeField6 = chronology3.secondOfDay();
        org.joda.time.DateTimeField dateTimeField7 = chronology3.weekyearOfCentury();
        long long11 = chronology3.add((long) 54974408, 0L, (int) (short) 10);
        org.joda.time.DateTimeField dateTimeField12 = chronology3.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField13 = chronology3.era();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(15);
        java.lang.Object obj16 = null;
        boolean boolean17 = dateTimeZone15.equals(obj16);
        org.joda.time.Chronology chronology18 = chronology3.withZone(dateTimeZone15);
        org.joda.time.DurationField durationField19 = chronology3.halfdays();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 54974408L + "'", long11 == 54974408L);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(durationField19);
    }

    @Test
    public void test10183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10183");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.millisOfDay();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime3.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime3.plusHours((int) ' ');
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.DateTime dateTime10 = localDateTime8.toDateTime(readableInstant9);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str13 = dateTimeZone11.getShortName((long) (short) 10);
        long long15 = dateTimeZone11.convertUTCToLocal((long) ' ');
        java.lang.String str16 = dateTimeZone11.toString();
        long long18 = dateTimeZone11.previousTransition(32L);
        long long21 = dateTimeZone11.convertLocalToUTC(97L, false);
        boolean boolean22 = dateTime10.equals((java.lang.Object) false);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str25 = dateTimeZone23.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime26 = org.joda.time.LocalDateTime.now(dateTimeZone23);
        org.joda.time.LocalDateTime.Property property27 = localDateTime26.millisOfDay();
        org.joda.time.LocalDateTime localDateTime29 = localDateTime26.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime26.plusHours((int) ' ');
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.DateTime dateTime33 = localDateTime31.toDateTime(readableInstant32);
        long long34 = dateTime33.getMillis();
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str37 = dateTimeZone35.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime38 = org.joda.time.LocalDateTime.now(dateTimeZone35);
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = localDateTime38.getFieldType((int) (short) 0);
        boolean boolean41 = dateTime33.isSupported(dateTimeFieldType40);
        boolean boolean42 = dateTime10.isAfter((org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str45 = dateTimeZone43.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime46 = org.joda.time.LocalDateTime.now(dateTimeZone43);
        org.joda.time.LocalDateTime.Property property47 = localDateTime46.millisOfDay();
        org.joda.time.LocalDateTime localDateTime49 = localDateTime46.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime51 = localDateTime46.plusHours((int) ' ');
        org.joda.time.ReadableInstant readableInstant52 = null;
        org.joda.time.DateTime dateTime53 = localDateTime51.toDateTime(readableInstant52);
        long long54 = dateTime53.getMillis();
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str57 = dateTimeZone55.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime58 = org.joda.time.LocalDateTime.now(dateTimeZone55);
        org.joda.time.DateTimeFieldType dateTimeFieldType60 = localDateTime58.getFieldType((int) (short) 0);
        boolean boolean61 = dateTime53.isSupported(dateTimeFieldType60);
        boolean boolean62 = dateTime10.isAfter((org.joda.time.ReadableInstant) dateTime53);
        org.joda.time.LocalDateTime localDateTime63 = new org.joda.time.LocalDateTime();
        java.lang.String str64 = localDateTime63.toString();
        int int65 = localDateTime63.getCenturyOfEra();
        org.joda.time.LocalDateTime localDateTime67 = localDateTime63.minusMonths(2);
        org.joda.time.LocalDateTime.Property property68 = localDateTime67.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone69 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str71 = dateTimeZone69.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime72 = org.joda.time.LocalDateTime.now(dateTimeZone69);
        org.joda.time.LocalDateTime.Property property73 = localDateTime72.millisOfDay();
        org.joda.time.LocalDateTime localDateTime75 = localDateTime72.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime77 = localDateTime72.plusHours((int) ' ');
        org.joda.time.ReadableInstant readableInstant78 = null;
        org.joda.time.DateTime dateTime79 = localDateTime77.toDateTime(readableInstant78);
        long long80 = dateTime79.getMillis();
        org.joda.time.DateTimeZone dateTimeZone81 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str83 = dateTimeZone81.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime84 = org.joda.time.LocalDateTime.now(dateTimeZone81);
        org.joda.time.DateTimeFieldType dateTimeFieldType86 = localDateTime84.getFieldType((int) (short) 0);
        boolean boolean87 = dateTime79.isSupported(dateTimeFieldType86);
        org.joda.time.DateTime dateTime88 = localDateTime67.toDateTime((org.joda.time.ReadableInstant) dateTime79);
        java.lang.String str89 = dateTime88.toString();
        boolean boolean90 = dateTime10.isEqual((org.joda.time.ReadableInstant) dateTime88);
        org.joda.time.Chronology chronology91 = dateTime88.getChronology();
        java.lang.String str92 = dateTime88.toString();
        java.lang.String str93 = dateTime88.toString();
        org.junit.Assert.assertNotNull(dateTimeZone0);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+07:10:22.088" + "'", str2, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+07:10:22.088" + "'", str13, "+07:10:22.088");
// flaky:         org.junit.Assert.assertTrue("'" + long15 + "' != '" + 25822120L + "'", long15 == 25822120L);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+07:10:22.088" + "'", str16, "+07:10:22.088");
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 32L + "'", long18 == 32L);
// flaky:         org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-25821991L) + "'", long21 == (-25821991L));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(dateTimeZone23);
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "+07:10:22.088" + "'", str25, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
// flaky:         org.junit.Assert.assertTrue("'" + long34 + "' != '" + 1645629807226L + "'", long34 == 1645629807226L);
        org.junit.Assert.assertNotNull(dateTimeZone35);
// flaky:         org.junit.Assert.assertEquals("'" + str37 + "' != '" + "+07:10:22.088" + "'", str37, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(dateTimeFieldType40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(dateTimeZone43);
// flaky:         org.junit.Assert.assertEquals("'" + str45 + "' != '" + "+07:10:22.088" + "'", str45, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(dateTime53);
// flaky:         org.junit.Assert.assertTrue("'" + long54 + "' != '" + 1645629807226L + "'", long54 == 1645629807226L);
        org.junit.Assert.assertNotNull(dateTimeZone55);
// flaky:         org.junit.Assert.assertEquals("'" + str57 + "' != '" + "+07:10:22.088" + "'", str57, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(dateTimeFieldType60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str64 + "' != '" + "2022-02-22T14:33:49.314" + "'", str64, "2022-02-22T14:33:49.314");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 20 + "'", int65 == 20);
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertNotNull(property68);
        org.junit.Assert.assertNotNull(dateTimeZone69);
// flaky:         org.junit.Assert.assertEquals("'" + str71 + "' != '" + "+07:10:22.088" + "'", str71, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime72);
        org.junit.Assert.assertNotNull(property73);
        org.junit.Assert.assertNotNull(localDateTime75);
        org.junit.Assert.assertNotNull(localDateTime77);
        org.junit.Assert.assertNotNull(dateTime79);
// flaky:         org.junit.Assert.assertTrue("'" + long80 + "' != '" + 1645629807226L + "'", long80 == 1645629807226L);
        org.junit.Assert.assertNotNull(dateTimeZone81);
// flaky:         org.junit.Assert.assertEquals("'" + str83 + "' != '" + "+07:10:22.088" + "'", str83, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime84);
        org.junit.Assert.assertNotNull(dateTimeFieldType86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertNotNull(dateTime88);
// flaky:         org.junit.Assert.assertEquals("'" + str89 + "' != '" + "2021-12-22T14:33:49.314+07:10:22.088" + "'", str89, "2021-12-22T14:33:49.314+07:10:22.088");
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(chronology91);
// flaky:         org.junit.Assert.assertEquals("'" + str92 + "' != '" + "2021-12-22T14:33:49.314+07:10:22.088" + "'", str92, "2021-12-22T14:33:49.314+07:10:22.088");
// flaky:         org.junit.Assert.assertEquals("'" + str93 + "' != '" + "2021-12-22T14:33:49.314+07:10:22.088" + "'", str93, "2021-12-22T14:33:49.314+07:10:22.088");
    }

    @Test
    public void test10184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10184");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.millisOfDay();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime3.withYear((int) (short) 100);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime6.minusMonths(2022);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.withMinuteOfHour((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime9.plusWeeks((int) 'x');
        org.joda.time.LocalDateTime localDateTime15 = localDateTime9.withWeekyear(24);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime9.minusSeconds((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.withMinuteOfHour(11);
        int int20 = localDateTime17.getCenturyOfEra();
        org.junit.Assert.assertNotNull(dateTimeZone0);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+07:10:22.088" + "'", str2, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
    }

    @Test
    public void test10185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10185");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forID("2022-02-22T07:19:16.632");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The datetime zone id '2022-02-22T07:19:16.632' is not recognised");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test10186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10186");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        org.joda.time.LocalDateTime localDateTime3 = localDateTime0.withDurationAdded(readableDuration1, (int) '#');
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.withYear(0);
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minus(readableDuration6);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.weekyear();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology11 = localDateTime10.getChronology();
        org.joda.time.DurationField durationField12 = chronology11.weekyears();
        org.joda.time.DurationField durationField13 = chronology11.centuries();
        org.joda.time.DurationField durationField14 = chronology11.hours();
        org.joda.time.DurationField durationField15 = chronology11.seconds();
        org.joda.time.DateTimeField dateTimeField16 = chronology11.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str19 = dateTimeZone17.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime20 = org.joda.time.LocalDateTime.now(dateTimeZone17);
        org.joda.time.LocalDateTime.Property property21 = localDateTime20.millisOfDay();
        java.lang.String str22 = property21.getName();
        org.joda.time.LocalDateTime localDateTime23 = property21.roundHalfFloorCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        boolean boolean25 = localDateTime23.isSupported(dateTimeFieldType24);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime23.plusMinutes(26147585);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.DateTimeField dateTimeField30 = dateTimeFieldType28.getField(chronology29);
        long long32 = dateTimeField30.roundFloor((long) (-1));
        java.util.Locale.Builder builder33 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder35 = builder33.addUnicodeLocaleAttribute("und");
        java.util.Locale locale36 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale37 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str38 = locale36.getDisplayCountry(locale37);
        java.lang.String str39 = locale37.getDisplayName();
        java.util.Locale.Builder builder40 = builder35.setLocale(locale37);
        int int41 = dateTimeField30.getMaximumShortTextLength(locale37);
        java.lang.String str42 = dateTimeField16.getAsText((org.joda.time.ReadablePartial) localDateTime27, locale37);
        java.util.Locale locale43 = locale37.stripExtensions();
        java.lang.String str44 = property8.getAsText(locale37);
        int int45 = property8.getMaximumValue();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "+07:10:22.088" + "'", str19, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "millisOfDay" + "'", str22, "millisOfDay");
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertNotNull(dateTimeField30);
// flaky:         org.junit.Assert.assertTrue("'" + long32 + "' != '" + (-22088L) + "'", long32 == (-22088L));
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Canada" + "'", str38, "Canada");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "Franz\366sisch (Kanada)" + "'", str39, "Franz\366sisch (Kanada)");
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 4 + "'", int41 == 4);
// flaky:         org.junit.Assert.assertEquals("'" + str42 + "' != '" + "56329" + "'", str42, "56329");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "0" + "'", str44, "0");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 292278993 + "'", int45 == 292278993);
    }

    @Test
    public void test10187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10187");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.millisOfDay();
        org.joda.time.ReadableInstant readableInstant5 = null;
        long long6 = property4.getDifferenceAsLong(readableInstant5);
        org.joda.time.DurationField durationField7 = property4.getLeapDurationField();
        java.lang.String str8 = property4.getAsString();
        org.joda.time.LocalDateTime localDateTime9 = property4.roundFloorCopy();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.withWeekyear((int) (byte) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology15 = localDateTime14.getChronology();
        org.joda.time.DurationField durationField16 = chronology15.weekyears();
        boolean boolean17 = dateTimeFieldType12.isSupported(chronology15);
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime();
        java.lang.String str19 = localDateTime18.toString();
        int int20 = localDateTime18.getCenturyOfEra();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime18.minusMonths(2);
        org.joda.time.LocalDateTime.Property property23 = localDateTime22.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str26 = dateTimeZone24.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime27 = org.joda.time.LocalDateTime.now(dateTimeZone24);
        org.joda.time.LocalDateTime.Property property28 = localDateTime27.millisOfDay();
        org.joda.time.LocalDateTime localDateTime30 = localDateTime27.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime27.plusHours((int) ' ');
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.DateTime dateTime34 = localDateTime32.toDateTime(readableInstant33);
        long long35 = dateTime34.getMillis();
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str38 = dateTimeZone36.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime39 = org.joda.time.LocalDateTime.now(dateTimeZone36);
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = localDateTime39.getFieldType((int) (short) 0);
        boolean boolean42 = dateTime34.isSupported(dateTimeFieldType41);
        org.joda.time.DateTime dateTime43 = localDateTime22.toDateTime((org.joda.time.ReadableInstant) dateTime34);
        int[] intArray45 = chronology15.get((org.joda.time.ReadablePartial) localDateTime22, 11L);
        org.joda.time.DateTimeField dateTimeField46 = chronology15.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str49 = dateTimeZone47.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime50 = org.joda.time.LocalDateTime.now(dateTimeZone47);
        org.joda.time.LocalDateTime.Property property51 = localDateTime50.millisOfDay();
        org.joda.time.LocalDateTime localDateTime53 = localDateTime50.withYear((int) (short) 100);
        org.joda.time.LocalDateTime.Property property54 = localDateTime53.minuteOfHour();
        java.util.Locale locale56 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale57 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str58 = locale56.getDisplayCountry(locale57);
        java.util.Locale locale59 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale60 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str61 = locale59.getDisplayCountry(locale60);
        java.lang.String str62 = locale56.getDisplayVariant(locale59);
        java.lang.String str63 = dateTimeField46.getAsText((org.joda.time.ReadablePartial) localDateTime53, 1, locale59);
        org.joda.time.DateTimeZone dateTimeZone64 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str66 = dateTimeZone64.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime67 = org.joda.time.LocalDateTime.now(dateTimeZone64);
        org.joda.time.LocalDateTime.Property property68 = localDateTime67.millisOfDay();
        org.joda.time.ReadableInstant readableInstant69 = null;
        long long70 = property68.getDifferenceAsLong(readableInstant69);
        org.joda.time.DurationField durationField71 = property68.getLeapDurationField();
        java.lang.String str72 = property68.getAsString();
        org.joda.time.LocalDateTime localDateTime73 = property68.roundFloorCopy();
        org.joda.time.LocalDateTime localDateTime75 = localDateTime73.withWeekyear((int) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone76 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str78 = dateTimeZone76.getShortName((long) (short) 10);
        long long80 = dateTimeZone76.convertUTCToLocal((long) ' ');
        java.lang.String str81 = dateTimeZone76.toString();
        boolean boolean83 = dateTimeZone76.equals((java.lang.Object) (short) 100);
        java.util.Locale locale85 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str86 = dateTimeZone76.getShortName((long) (-1), locale85);
        org.joda.time.LocalDateTime localDateTime87 = new org.joda.time.LocalDateTime(dateTimeZone76);
        org.joda.time.DateTime dateTime88 = localDateTime75.toDateTime(dateTimeZone76);
        org.joda.time.DateTime dateTime89 = localDateTime53.toDateTime((org.joda.time.ReadableInstant) dateTime88);
        boolean boolean90 = localDateTime9.equals((java.lang.Object) localDateTime53);
        org.joda.time.LocalDateTime localDateTime92 = localDateTime9.minusYears(81263329);
        org.joda.time.LocalDateTime.Property property93 = localDateTime9.year();
        org.joda.time.DurationField durationField94 = property93.getRangeDurationField();
        java.lang.String str95 = property93.toString();
        org.junit.Assert.assertNotNull(dateTimeZone0);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+07:10:22.088" + "'", str2, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
// flaky:         org.junit.Assert.assertTrue("'" + long6 + "' != '" + 25822088L + "'", long6 == 25822088L);
        org.junit.Assert.assertNull(durationField7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "52429412" + "'", str8, "52429412");
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "2022-02-22T14:33:49.412" + "'", str19, "2022-02-22T14:33:49.412");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 20 + "'", int20 == 20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "+07:10:22.088" + "'", str26, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
// flaky:         org.junit.Assert.assertTrue("'" + long35 + "' != '" + 1645629807324L + "'", long35 == 1645629807324L);
        org.junit.Assert.assertNotNull(dateTimeZone36);
// flaky:         org.junit.Assert.assertEquals("'" + str38 + "' != '" + "+07:10:22.088" + "'", str38, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(dateTimeFieldType41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[1970, 1, 1, 11]");
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(dateTimeZone47);
// flaky:         org.junit.Assert.assertEquals("'" + str49 + "' != '" + "+07:10:22.088" + "'", str49, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "Canada" + "'", str58, "Canada");
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "Canada" + "'", str61, "Canada");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "1" + "'", str63, "1");
        org.junit.Assert.assertNotNull(dateTimeZone64);
// flaky:         org.junit.Assert.assertEquals("'" + str66 + "' != '" + "+07:10:22.088" + "'", str66, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertNotNull(property68);
// flaky:         org.junit.Assert.assertTrue("'" + long70 + "' != '" + 25822088L + "'", long70 == 25822088L);
        org.junit.Assert.assertNull(durationField71);
// flaky:         org.junit.Assert.assertEquals("'" + str72 + "' != '" + "52429412" + "'", str72, "52429412");
        org.junit.Assert.assertNotNull(localDateTime73);
        org.junit.Assert.assertNotNull(localDateTime75);
        org.junit.Assert.assertNotNull(dateTimeZone76);
// flaky:         org.junit.Assert.assertEquals("'" + str78 + "' != '" + "+07:10:22.088" + "'", str78, "+07:10:22.088");
// flaky:         org.junit.Assert.assertTrue("'" + long80 + "' != '" + 25822120L + "'", long80 == 25822120L);
// flaky:         org.junit.Assert.assertEquals("'" + str81 + "' != '" + "+07:10:22.088" + "'", str81, "+07:10:22.088");
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(locale85);
        org.junit.Assert.assertEquals(locale85.toString(), "fr_CA");
// flaky:         org.junit.Assert.assertEquals("'" + str86 + "' != '" + "+07:10:22.088" + "'", str86, "+07:10:22.088");
        org.junit.Assert.assertNotNull(dateTime88);
        org.junit.Assert.assertNotNull(dateTime89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(localDateTime92);
        org.junit.Assert.assertNotNull(property93);
        org.junit.Assert.assertNull(durationField94);
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "Property[year]" + "'", str95, "Property[year]");
    }

    @Test
    public void test10188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10188");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        org.joda.time.LocalDateTime localDateTime3 = localDateTime0.withDurationAdded(readableDuration1, (int) '#');
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.weekyear();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime3.minusMillis((-1));
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str9 = dateTimeZone7.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime10 = org.joda.time.LocalDateTime.now(dateTimeZone7);
        org.joda.time.LocalDateTime.Property property11 = localDateTime10.millisOfDay();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime10.withYear((int) (short) 100);
        java.lang.String str14 = localDateTime13.toString();
        boolean boolean15 = localDateTime3.isAfter((org.joda.time.ReadablePartial) localDateTime13);
        java.util.Locale locale16 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet17 = locale16.getUnicodeLocaleAttributes();
        java.lang.Object[] objArray18 = strSet17.toArray();
        boolean boolean19 = strSet17.isEmpty();
        java.util.Locale locale20 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet21 = locale20.getUnicodeLocaleAttributes();
        java.lang.Object[] objArray22 = strSet21.toArray();
        java.util.Locale locale23 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet24 = locale23.getUnicodeLocaleAttributes();
        boolean boolean25 = strSet21.removeAll((java.util.Collection<java.lang.String>) strSet24);
        java.util.Locale locale26 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet27 = locale26.getUnicodeLocaleAttributes();
        org.joda.time.DurationFieldType durationFieldType28 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.DurationFieldType durationFieldType29 = org.joda.time.DurationFieldType.hours();
        org.joda.time.DurationFieldType[] durationFieldTypeArray30 = new org.joda.time.DurationFieldType[] { durationFieldType28, durationFieldType29 };
        org.joda.time.DurationFieldType[] durationFieldTypeArray31 = strSet27.toArray(durationFieldTypeArray30);
        boolean boolean32 = strSet21.containsAll((java.util.Collection<java.lang.String>) strSet27);
        java.lang.Object[] objArray33 = strSet27.toArray();
        boolean boolean34 = strSet17.removeAll((java.util.Collection<java.lang.String>) strSet27);
        java.util.Locale locale35 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet36 = locale35.getUnicodeLocaleAttributes();
        java.lang.Object[] objArray37 = strSet36.toArray();
        java.util.Locale locale38 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet39 = locale38.getUnicodeLocaleAttributes();
        boolean boolean40 = strSet36.removeAll((java.util.Collection<java.lang.String>) strSet39);
        java.util.Locale locale41 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet42 = locale41.getUnicodeLocaleAttributes();
        org.joda.time.DurationFieldType durationFieldType43 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.DurationFieldType durationFieldType44 = org.joda.time.DurationFieldType.hours();
        org.joda.time.DurationFieldType[] durationFieldTypeArray45 = new org.joda.time.DurationFieldType[] { durationFieldType43, durationFieldType44 };
        org.joda.time.DurationFieldType[] durationFieldTypeArray46 = strSet42.toArray(durationFieldTypeArray45);
        boolean boolean47 = strSet36.containsAll((java.util.Collection<java.lang.String>) strSet42);
        java.util.Locale locale48 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet49 = locale48.getUnicodeLocaleAttributes();
        java.lang.Object[] objArray50 = strSet49.toArray();
        java.util.Locale locale51 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet52 = locale51.getUnicodeLocaleAttributes();
        boolean boolean53 = strSet49.removeAll((java.util.Collection<java.lang.String>) strSet52);
        java.util.Locale locale54 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet55 = locale54.getUnicodeLocaleAttributes();
        org.joda.time.DurationFieldType durationFieldType56 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.DurationFieldType durationFieldType57 = org.joda.time.DurationFieldType.hours();
        org.joda.time.DurationFieldType[] durationFieldTypeArray58 = new org.joda.time.DurationFieldType[] { durationFieldType56, durationFieldType57 };
        org.joda.time.DurationFieldType[] durationFieldTypeArray59 = strSet55.toArray(durationFieldTypeArray58);
        boolean boolean60 = strSet49.containsAll((java.util.Collection<java.lang.String>) strSet55);
        java.lang.Object[] objArray61 = strSet55.toArray();
        boolean boolean62 = strSet36.retainAll((java.util.Collection<java.lang.String>) strSet55);
        boolean boolean63 = strSet27.addAll((java.util.Collection<java.lang.String>) strSet55);
        org.joda.time.DateTimeFieldType dateTimeFieldType64 = org.joda.time.DateTimeFieldType.yearOfEra();
        boolean boolean65 = strSet55.remove((java.lang.Object) dateTimeFieldType64);
        org.joda.time.LocalDateTime.Property property66 = localDateTime3.property(dateTimeFieldType64);
        org.joda.time.DurationFieldType durationFieldType67 = org.joda.time.DurationFieldType.millis();
        org.joda.time.LocalDateTime localDateTime69 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology70 = localDateTime69.getChronology();
        org.joda.time.DurationField durationField71 = chronology70.weekyears();
        org.joda.time.DurationField durationField72 = chronology70.centuries();
        org.joda.time.DurationField durationField73 = durationFieldType67.getField(chronology70);
        boolean boolean74 = dateTimeFieldType64.isSupported(chronology70);
        org.joda.time.DurationFieldType durationFieldType75 = dateTimeFieldType64.getDurationType();
        org.joda.time.DateTimeFieldType dateTimeFieldType76 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.DurationFieldType durationFieldType77 = dateTimeFieldType76.getDurationType();
        org.joda.time.LocalDateTime localDateTime79 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology80 = localDateTime79.getChronology();
        org.joda.time.DurationField durationField81 = chronology80.weekyears();
        org.joda.time.DurationField durationField82 = chronology80.centuries();
        boolean boolean83 = durationFieldType77.isSupported(chronology80);
        boolean boolean84 = durationFieldType75.isSupported(chronology80);
        org.joda.time.DurationField durationField85 = chronology80.weeks();
        // The following exception was thrown during execution in test generation
        try {
            long long87 = durationField85.getMillis(1645514267000L);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows a long: 1645514267000 * 604800000");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+07:10:22.088" + "'", str9, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDateTime13);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "0100-02-22T14:33:49.458" + "'", str14, "0100-02-22T14:33:49.458");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "");
        org.junit.Assert.assertNotNull(strSet17);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "");
        org.junit.Assert.assertNotNull(strSet21);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[]");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "");
        org.junit.Assert.assertNotNull(strSet24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "");
        org.junit.Assert.assertNotNull(strSet27);
        org.junit.Assert.assertNotNull(durationFieldType28);
        org.junit.Assert.assertNotNull(durationFieldType29);
        org.junit.Assert.assertNotNull(durationFieldTypeArray30);
        org.junit.Assert.assertNotNull(durationFieldTypeArray31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "");
        org.junit.Assert.assertNotNull(strSet36);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[]");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "");
        org.junit.Assert.assertNotNull(strSet39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "");
        org.junit.Assert.assertNotNull(strSet42);
        org.junit.Assert.assertNotNull(durationFieldType43);
        org.junit.Assert.assertNotNull(durationFieldType44);
        org.junit.Assert.assertNotNull(durationFieldTypeArray45);
        org.junit.Assert.assertNotNull(durationFieldTypeArray46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "");
        org.junit.Assert.assertNotNull(strSet49);
        org.junit.Assert.assertNotNull(objArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[]");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "");
        org.junit.Assert.assertNotNull(strSet52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "");
        org.junit.Assert.assertNotNull(strSet55);
        org.junit.Assert.assertNotNull(durationFieldType56);
        org.junit.Assert.assertNotNull(durationFieldType57);
        org.junit.Assert.assertNotNull(durationFieldTypeArray58);
        org.junit.Assert.assertNotNull(durationFieldTypeArray59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(objArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray61), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray61), "[]");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertNotNull(durationFieldType67);
        org.junit.Assert.assertNotNull(chronology70);
        org.junit.Assert.assertNotNull(durationField71);
        org.junit.Assert.assertNotNull(durationField72);
        org.junit.Assert.assertNotNull(durationField73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(durationFieldType75);
        org.junit.Assert.assertNotNull(dateTimeFieldType76);
        org.junit.Assert.assertNotNull(durationFieldType77);
        org.junit.Assert.assertNotNull(chronology80);
        org.junit.Assert.assertNotNull(durationField81);
        org.junit.Assert.assertNotNull(durationField82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertNotNull(durationField85);
    }

    @Test
    public void test10189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10189");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.millisOfDay();
        long long5 = property4.remainder();
        org.joda.time.LocalDateTime localDateTime6 = property4.roundFloorCopy();
        java.lang.String str7 = property4.getAsShortText();
        java.lang.String str8 = property4.getAsString();
        int int9 = property4.getMaximumValueOverall();
        org.joda.time.DurationField durationField10 = property4.getLeapDurationField();
        org.joda.time.DurationField durationField11 = property4.getLeapDurationField();
        org.joda.time.LocalDateTime localDateTime12 = property4.roundHalfCeilingCopy();
        org.joda.time.DateTimeField dateTimeField13 = property4.getField();
        java.util.Locale locale15 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale16 = locale15.stripExtensions();
        java.lang.String str17 = locale15.getVariant();
        java.lang.String str18 = locale15.getLanguage();
        java.util.Locale locale21 = new java.util.Locale("fra", "fran\347ais (Canada)");
        java.lang.String str22 = locale15.getDisplayName(locale21);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str25 = dateTimeZone23.getShortName((long) (short) 10);
        long long27 = dateTimeZone23.convertUTCToLocal((long) ' ');
        java.lang.String str28 = dateTimeZone23.toString();
        boolean boolean30 = dateTimeZone23.equals((java.lang.Object) (short) 100);
        java.util.Locale locale32 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str33 = dateTimeZone23.getShortName((long) (-1), locale32);
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime(dateTimeZone23);
        java.lang.String str36 = dateTimeZone23.getName((long) 26149);
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str39 = dateTimeZone37.getShortName((long) (short) 10);
        long long41 = dateTimeZone37.convertUTCToLocal((long) ' ');
        java.lang.String str42 = dateTimeZone37.toString();
        long long44 = dateTimeZone37.previousTransition(32L);
        org.joda.time.LocalDateTime localDateTime45 = new org.joda.time.LocalDateTime(dateTimeZone37);
        long long47 = dateTimeZone23.getMillisKeepLocal(dateTimeZone37, 0L);
        long long49 = dateTimeZone23.previousTransition(2022L);
        java.util.Locale.Builder builder51 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder53 = builder51.addUnicodeLocaleAttribute("und");
        java.util.Locale locale54 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale55 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str56 = locale54.getDisplayCountry(locale55);
        java.lang.String str57 = locale55.getDisplayName();
        java.util.Locale.Builder builder58 = builder53.setLocale(locale55);
        java.util.Locale.Builder builder60 = builder53.setScript("");
        java.util.Locale locale61 = builder53.build();
        java.lang.String str62 = dateTimeZone23.getShortName(5183924341094L, locale61);
        java.lang.String str63 = locale15.getDisplayScript(locale61);
        java.lang.String str64 = dateTimeField13.getAsText(198077821260000000L, locale15);
        org.junit.Assert.assertNotNull(dateTimeZone0);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+07:10:22.088" + "'", str2, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertNotNull(localDateTime6);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "52429486" + "'", str7, "52429486");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "52429486" + "'", str8, "52429486");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 86399999 + "'", int9 == 86399999);
        org.junit.Assert.assertNull(durationField10);
        org.junit.Assert.assertNull(durationField11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "fr" + "'", str18, "fr");
        org.junit.Assert.assertEquals(locale21.toString(), "fra_FRAN\347AIS (CANADA)");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "French (Canada)" + "'", str22, "French (Canada)");
        org.junit.Assert.assertNotNull(dateTimeZone23);
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "+07:10:22.088" + "'", str25, "+07:10:22.088");
// flaky:         org.junit.Assert.assertTrue("'" + long27 + "' != '" + 25822120L + "'", long27 == 25822120L);
// flaky:         org.junit.Assert.assertEquals("'" + str28 + "' != '" + "+07:10:22.088" + "'", str28, "+07:10:22.088");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "fr_CA");
// flaky:         org.junit.Assert.assertEquals("'" + str33 + "' != '" + "+07:10:22.088" + "'", str33, "+07:10:22.088");
// flaky:         org.junit.Assert.assertEquals("'" + str36 + "' != '" + "+07:10:22.088" + "'", str36, "+07:10:22.088");
        org.junit.Assert.assertNotNull(dateTimeZone37);
// flaky:         org.junit.Assert.assertEquals("'" + str39 + "' != '" + "+07:10:22.088" + "'", str39, "+07:10:22.088");
// flaky:         org.junit.Assert.assertTrue("'" + long41 + "' != '" + 25822120L + "'", long41 == 25822120L);
// flaky:         org.junit.Assert.assertEquals("'" + str42 + "' != '" + "+07:10:22.088" + "'", str42, "+07:10:22.088");
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 32L + "'", long44 == 32L);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 2022L + "'", long49 == 2022L);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "Canada" + "'", str56, "Canada");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "Franz\366sisch (Kanada)" + "'", str57, "Franz\366sisch (Kanada)");
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "fr_CA");
// flaky:         org.junit.Assert.assertEquals("'" + str62 + "' != '" + "+07:10:22.088" + "'", str62, "+07:10:22.088");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "60000000" + "'", str64, "60000000");
    }

    @Test
    public void test10190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10190");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getShortName((long) (short) 10);
        long long4 = dateTimeZone0.convertUTCToLocal((long) ' ');
        boolean boolean6 = dateTimeZone0.isStandardOffset(1908343060955L);
        java.util.TimeZone timeZone7 = dateTimeZone0.toTimeZone();
        java.lang.String str8 = timeZone7.getID();
        int int10 = timeZone7.getOffset(1645629745067L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+07:10:22.088" + "'", str2, "+07:10:22.088");
// flaky:         org.junit.Assert.assertTrue("'" + long4 + "' != '" + 25822120L + "'", long4 == 25822120L);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(timeZone7);
// flaky:         org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "GMT+07:10");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+07:10:22.088" + "'", str8, "+07:10:22.088");
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 25822088 + "'", int10 == 25822088);
    }

    @Test
    public void test10191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10191");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.millisOfDay();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime3.plusMonths((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.minusHours((int) '4');
        org.joda.time.LocalDateTime.Property property9 = localDateTime8.era();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime8.plusSeconds(11990863);
        org.junit.Assert.assertNotNull(dateTimeZone0);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+07:10:22.088" + "'", str2, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDateTime11);
    }

    @Test
    public void test10192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10192");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.addUnicodeLocaleAttribute("und");
        java.util.Locale locale3 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale4 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str5 = locale3.getDisplayCountry(locale4);
        java.lang.String str6 = locale4.getDisplayName();
        java.util.Locale.Builder builder7 = builder2.setLocale(locale4);
        java.util.Locale locale8 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale9 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str10 = locale8.getDisplayCountry(locale9);
        java.util.Locale locale11 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale12 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str13 = locale11.getDisplayCountry(locale12);
        java.lang.String str14 = locale8.getDisplayVariant(locale11);
        java.util.Locale locale15 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale16 = locale15.stripExtensions();
        java.lang.String str17 = locale8.getDisplayLanguage(locale16);
        java.util.Locale.Builder builder18 = builder2.setLocale(locale16);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder20 = builder18.addUnicodeLocaleAttribute("2022-02-23T15:20:09.749+00:00:00.224");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: 2022-02-23T15:20:09.749+00:00:00.224 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Canada" + "'", str5, "Canada");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Franz\366sisch (Kanada)" + "'", str6, "Franz\366sisch (Kanada)");
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Canada" + "'", str10, "Canada");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Canada" + "'", str13, "Canada");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "fran\347ais" + "'", str17, "fran\347ais");
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test10193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10193");
        org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.parse("26151980");
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusHours(26149);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime5 = localDateTime3.withMinuteOfHour(25807473);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 25807473 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertNotNull(localDateTime3);
    }

    @Test
    public void test10194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10194");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.millisOfDay();
        org.joda.time.ReadableInstant readableInstant5 = null;
        long long6 = property4.getDifferenceAsLong(readableInstant5);
        int int7 = property4.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime8 = property4.roundHalfEvenCopy();
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.plus(readablePeriod9);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime8.withMinuteOfHour(0);
        int int13 = localDateTime8.getMonthOfYear();
        org.junit.Assert.assertNotNull(dateTimeZone0);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+07:10:22.088" + "'", str2, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
// flaky:         org.junit.Assert.assertTrue("'" + long6 + "' != '" + 25822088L + "'", long6 == 25822088L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 86399999 + "'", int7 == 86399999);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
    }

    @Test
    public void test10195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10195");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DurationField durationField3 = chronology2.weekyears();
        org.joda.time.DurationField durationField4 = chronology2.centuries();
        org.joda.time.DurationField durationField5 = chronology2.hours();
        org.joda.time.DurationField durationField6 = chronology2.seconds();
        org.joda.time.DateTimeField dateTimeField7 = chronology2.dayOfYear();
        org.joda.time.DateTimeField dateTimeField8 = chronology2.millisOfDay();
        org.joda.time.DateTimeField dateTimeField9 = chronology2.halfdayOfDay();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str12 = dateTimeZone10.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime13 = org.joda.time.LocalDateTime.now(dateTimeZone10);
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.millisOfDay();
        org.joda.time.DurationFieldType durationFieldType15 = org.joda.time.DurationFieldType.days();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime13.withFieldAdded(durationFieldType15, 26149500);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime13.minusHours((int) 'a');
        long long21 = chronology2.set((org.joda.time.ReadablePartial) localDateTime19, 1908343039481L);
        org.joda.time.DateTimeZone dateTimeZone22 = chronology2.getZone();
        boolean boolean24 = dateTimeZone22.equals((java.lang.Object) 25814384);
        long long28 = dateTimeZone22.convertLocalToUTC(1645629464158L, false, 3291143952175L);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+07:10:22.088" + "'", str12, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(durationFieldType15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
// flaky:         org.junit.Assert.assertTrue("'" + long21 + "' != '" + 1645191229662L + "'", long21 == 1645191229662L);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 1645629464158L + "'", long28 == 1645629464158L);
    }

    @Test
    public void test10196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10196");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DurationField durationField3 = chronology2.weekyears();
        org.joda.time.DurationField durationField4 = chronology2.centuries();
        org.joda.time.DurationField durationField5 = chronology2.hours();
        org.joda.time.Chronology chronology6 = chronology2.withUTC();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str9 = dateTimeZone7.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime10 = org.joda.time.LocalDateTime.now(dateTimeZone7);
        org.joda.time.LocalDateTime.Property property11 = localDateTime10.millisOfDay();
        java.lang.String str12 = property11.getName();
        org.joda.time.LocalDateTime localDateTime13 = property11.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.minusHours(0);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str19 = dateTimeZone17.getShortName((long) (short) 10);
        long long21 = dateTimeZone17.convertUTCToLocal((long) ' ');
        java.lang.String str22 = dateTimeZone17.toString();
        boolean boolean24 = dateTimeZone17.equals((java.lang.Object) (short) 100);
        java.util.Locale locale26 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str27 = dateTimeZone17.getShortName((long) (-1), locale26);
        long long30 = dateTimeZone17.convertLocalToUTC((long) (short) 10, true);
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime((long) 7, dateTimeZone17);
        org.joda.time.DateTime dateTime32 = localDateTime15.toDateTime(dateTimeZone17);
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str35 = dateTimeZone33.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime36 = org.joda.time.LocalDateTime.now(dateTimeZone33);
        org.joda.time.LocalDateTime.Property property37 = localDateTime36.millisOfDay();
        java.lang.String str38 = property37.getName();
        org.joda.time.LocalDateTime localDateTime39 = property37.roundHalfFloorCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        boolean boolean41 = localDateTime39.isSupported(dateTimeFieldType40);
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str44 = dateTimeZone42.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime45 = org.joda.time.LocalDateTime.now(dateTimeZone42);
        org.joda.time.LocalDateTime.Property property46 = localDateTime45.millisOfDay();
        org.joda.time.DurationFieldType durationFieldType47 = org.joda.time.DurationFieldType.centuries();
        boolean boolean48 = localDateTime45.equals((java.lang.Object) durationFieldType47);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray49 = localDateTime45.getFieldTypes();
        java.lang.String str50 = localDateTime45.toString();
        org.joda.time.LocalDateTime localDateTime52 = localDateTime45.plusMillis(22);
        boolean boolean53 = localDateTime39.isBefore((org.joda.time.ReadablePartial) localDateTime52);
        org.joda.time.ReadableDuration readableDuration54 = null;
        org.joda.time.LocalDateTime localDateTime55 = localDateTime52.plus(readableDuration54);
        org.joda.time.ReadableDuration readableDuration56 = null;
        org.joda.time.LocalDateTime localDateTime58 = localDateTime55.withDurationAdded(readableDuration56, 26169);
        org.joda.time.DateTime dateTime59 = localDateTime55.toDateTime();
        org.joda.time.DateTime dateTime60 = localDateTime15.toDateTime((org.joda.time.ReadableInstant) dateTime59);
        long long62 = chronology2.set((org.joda.time.ReadablePartial) localDateTime15, 1645629363422L);
        org.joda.time.DateTimeField dateTimeField63 = chronology2.weekyearOfCentury();
        java.util.Locale locale67 = new java.util.Locale("2022-02-22T07:17:24.672", "DateTimeField[dayOfWeek]", "26189500");
        int int68 = dateTimeField63.getMaximumShortTextLength(locale67);
        java.util.Locale.Builder builder69 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder71 = builder69.addUnicodeLocaleAttribute("und");
        java.util.Locale locale72 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale73 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str74 = locale72.getDisplayCountry(locale73);
        java.lang.String str75 = locale73.getDisplayName();
        java.util.Locale.Builder builder76 = builder71.setLocale(locale73);
        java.util.Locale locale77 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale78 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str79 = locale77.getDisplayCountry(locale78);
        java.util.Locale locale80 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale81 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str82 = locale80.getDisplayCountry(locale81);
        java.lang.String str83 = locale77.getDisplayVariant(locale80);
        java.util.Locale locale84 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale85 = locale84.stripExtensions();
        java.lang.String str86 = locale77.getDisplayLanguage(locale85);
        java.util.Locale.Builder builder87 = builder71.setLocale(locale85);
        java.util.Locale.Builder builder88 = builder87.clear();
        java.util.Locale.Builder builder89 = builder88.clearExtensions();
        java.util.Locale locale90 = builder88.build();
        java.lang.String str91 = locale67.getDisplayCountry(locale90);
        java.lang.String str92 = locale90.getDisplayName();
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+07:10:22.088" + "'", str9, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "millisOfDay" + "'", str12, "millisOfDay");
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(dateTimeZone17);
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "+07:10:22.088" + "'", str19, "+07:10:22.088");
// flaky:         org.junit.Assert.assertTrue("'" + long21 + "' != '" + 25822120L + "'", long21 == 25822120L);
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+07:10:22.088" + "'", str22, "+07:10:22.088");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "fr_CA");
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "+07:10:22.088" + "'", str27, "+07:10:22.088");
// flaky:         org.junit.Assert.assertTrue("'" + long30 + "' != '" + (-25822078L) + "'", long30 == (-25822078L));
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTimeZone33);
// flaky:         org.junit.Assert.assertEquals("'" + str35 + "' != '" + "+07:10:22.088" + "'", str35, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "millisOfDay" + "'", str38, "millisOfDay");
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(dateTimeFieldType40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(dateTimeZone42);
// flaky:         org.junit.Assert.assertEquals("'" + str44 + "' != '" + "+07:10:22.088" + "'", str44, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(durationFieldType47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray49);
// flaky:         org.junit.Assert.assertEquals("'" + str50 + "' != '" + "2022-02-22T14:33:49.697" + "'", str50, "2022-02-22T14:33:49.697");
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTime60);
// flaky:         org.junit.Assert.assertTrue("'" + long62 + "' != '" + 1645540429696L + "'", long62 == 1645540429696L);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertEquals(locale67.toString(), "2022-02-22t07:17:24.672_DATETIMEFIELD[DAYOFWEEK]_26189500");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 2 + "'", int68 == 2);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(locale72);
        org.junit.Assert.assertEquals(locale72.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "Canada" + "'", str74, "Canada");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "Franz\366sisch (Kanada)" + "'", str75, "Franz\366sisch (Kanada)");
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(locale77);
        org.junit.Assert.assertEquals(locale77.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale78);
        org.junit.Assert.assertEquals(locale78.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "Canada" + "'", str79, "Canada");
        org.junit.Assert.assertNotNull(locale80);
        org.junit.Assert.assertEquals(locale80.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale81);
        org.junit.Assert.assertEquals(locale81.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "Canada" + "'", str82, "Canada");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "" + "'", str83, "");
        org.junit.Assert.assertNotNull(locale84);
        org.junit.Assert.assertEquals(locale84.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale85);
        org.junit.Assert.assertEquals(locale85.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "fran\347ais" + "'", str86, "fran\347ais");
        org.junit.Assert.assertNotNull(builder87);
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertNotNull(builder89);
        org.junit.Assert.assertNotNull(locale90);
        org.junit.Assert.assertEquals(locale90.toString(), "");
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "DATETIMEFIELD[DAYOFWEEK]" + "'", str91, "DATETIMEFIELD[DAYOFWEEK]");
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "" + "'", str92, "");
    }

    @Test
    public void test10197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10197");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DurationField durationField3 = chronology2.weekyears();
        org.joda.time.DurationField durationField4 = chronology2.centuries();
        org.joda.time.DurationField durationField5 = chronology2.minutes();
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime();
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.LocalDateTime localDateTime9 = localDateTime6.withDurationAdded(readableDuration7, (int) '#');
        org.joda.time.LocalDateTime.Property property10 = localDateTime9.weekyear();
        java.lang.String str11 = property10.getAsString();
        org.joda.time.LocalDateTime localDateTime13 = property10.setCopy(67);
        org.joda.time.LocalDateTime localDateTime14 = property10.roundFloorCopy();
        org.joda.time.LocalDateTime.Property property15 = localDateTime14.dayOfWeek();
        int[] intArray17 = chronology2.get((org.joda.time.ReadablePartial) localDateTime14, 1645629356L);
        org.joda.time.DateTimeField dateTimeField18 = chronology2.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField19 = chronology2.monthOfYear();
        org.joda.time.DurationField durationField20 = chronology2.halfdays();
        org.joda.time.DateTimeField dateTimeField21 = chronology2.clockhourOfDay();
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "2022" + "'", str11, "2022");
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1970, 1, 20, 4029356]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
    }

    @Test
    public void test10198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10198");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getShortName((long) (short) 10);
        long long4 = dateTimeZone0.convertUTCToLocal((long) ' ');
        java.lang.String str5 = dateTimeZone0.toString();
        long long7 = dateTimeZone0.previousTransition(32L);
        long long10 = dateTimeZone0.convertLocalToUTC(97L, false);
        int int12 = dateTimeZone0.getOffset((long) (short) 1);
        long long15 = dateTimeZone0.convertLocalToUTC(1645629351548L, false);
        int int17 = dateTimeZone0.getStandardOffset(1645629423910L);
        java.lang.String str18 = dateTimeZone0.toString();
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology23 = localDateTime22.getChronology();
        org.joda.time.DurationField durationField24 = chronology23.weekyears();
        org.joda.time.DurationField durationField25 = chronology23.centuries();
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime((long) (byte) 0, chronology23);
        org.joda.time.DateTimeField dateTimeField27 = chronology23.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField28 = chronology23.clockhourOfHalfday();
        java.util.Locale locale30 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet31 = locale30.getUnicodeLocaleAttributes();
        java.util.Set<java.lang.String> strSet32 = locale30.getUnicodeLocaleAttributes();
        java.lang.String str33 = dateTimeField28.getAsShortText((int) (byte) 0, locale30);
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str36 = dateTimeZone34.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime37 = org.joda.time.LocalDateTime.now(dateTimeZone34);
        org.joda.time.LocalDateTime.Property property38 = localDateTime37.millisOfDay();
        java.lang.String str39 = property38.getName();
        int int40 = property38.getMaximumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = property38.getFieldType();
        org.joda.time.LocalDateTime localDateTime42 = property38.roundFloorCopy();
        java.util.Locale locale43 = java.util.Locale.US;
        java.lang.String str44 = property38.getAsShortText(locale43);
        java.lang.String str45 = locale30.getDisplayScript(locale43);
        java.lang.String str46 = dateTimeZone0.getShortName(1645586240327L, locale43);
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str50 = dateTimeZone48.getShortName((long) (short) 10);
        long long52 = dateTimeZone48.convertUTCToLocal((long) ' ');
        java.lang.String str53 = dateTimeZone48.toString();
        long long56 = dateTimeZone48.adjustOffset((long) 'a', true);
        org.joda.time.ReadableInstant readableInstant57 = null;
        int int58 = dateTimeZone48.getOffset(readableInstant57);
        org.joda.time.LocalDateTime localDateTime59 = new org.joda.time.LocalDateTime(1645629353861L, dateTimeZone48);
        boolean boolean60 = dateTimeZone0.isLocalDateTimeGap(localDateTime59);
        org.junit.Assert.assertNotNull(dateTimeZone0);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+07:10:22.088" + "'", str2, "+07:10:22.088");
// flaky:         org.junit.Assert.assertTrue("'" + long4 + "' != '" + 25822120L + "'", long4 == 25822120L);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+07:10:22.088" + "'", str5, "+07:10:22.088");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 32L + "'", long7 == 32L);
// flaky:         org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-25821991L) + "'", long10 == (-25821991L));
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 25822088 + "'", int12 == 25822088);
// flaky:         org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1645603529460L + "'", long15 == 1645603529460L);
// flaky:         org.junit.Assert.assertTrue("'" + int17 + "' != '" + 25822088 + "'", int17 == 25822088);
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+07:10:22.088" + "'", str18, "+07:10:22.088");
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "");
        org.junit.Assert.assertNotNull(strSet31);
        org.junit.Assert.assertNotNull(strSet32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "0" + "'", str33, "0");
        org.junit.Assert.assertNotNull(dateTimeZone34);
// flaky:         org.junit.Assert.assertEquals("'" + str36 + "' != '" + "+07:10:22.088" + "'", str36, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "millisOfDay" + "'", str39, "millisOfDay");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 86399999 + "'", int40 == 86399999);
        org.junit.Assert.assertNotNull(dateTimeFieldType41);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "en_US");
// flaky:         org.junit.Assert.assertEquals("'" + str44 + "' != '" + "52429738" + "'", str44, "52429738");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
// flaky:         org.junit.Assert.assertEquals("'" + str46 + "' != '" + "+07:10:22.088" + "'", str46, "+07:10:22.088");
        org.junit.Assert.assertNotNull(dateTimeZone48);
// flaky:         org.junit.Assert.assertEquals("'" + str50 + "' != '" + "+07:10:22.088" + "'", str50, "+07:10:22.088");
// flaky:         org.junit.Assert.assertTrue("'" + long52 + "' != '" + 25822120L + "'", long52 == 25822120L);
// flaky:         org.junit.Assert.assertEquals("'" + str53 + "' != '" + "+07:10:22.088" + "'", str53, "+07:10:22.088");
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 97L + "'", long56 == 97L);
// flaky:         org.junit.Assert.assertTrue("'" + int58 + "' != '" + 25822088 + "'", int58 == 25822088);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    }

    @Test
    public void test10199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10199");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        boolean boolean1 = timeZone0.observesDaylightTime();
        java.util.TimeZone.setDefault(timeZone0);
        timeZone0.setRawOffset(26181236);
        java.lang.String str5 = timeZone0.getID();
        boolean boolean6 = timeZone0.observesDaylightTime();
        boolean boolean7 = timeZone0.useDaylightTime();
        org.junit.Assert.assertNotNull(timeZone0);
// flaky:         org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "GMT+07:16");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+07:10:22.088" + "'", str5, "+07:10:22.088");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test10200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10200");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(100L);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusSeconds(9);
        org.joda.time.LocalDateTime.Property property5 = localDateTime1.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime1.withCenturyOfEra(2);
        org.joda.time.LocalDateTime.Property property8 = localDateTime1.monthOfYear();
        org.joda.time.LocalDateTime localDateTime9 = property8.roundFloorCopy();
        org.joda.time.LocalDateTime.Property property10 = localDateTime9.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime11 = property10.roundCeilingCopy();
        int int12 = property10.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime13 = property10.roundHalfEvenCopy();
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.dayOfWeek();
        org.joda.time.LocalDateTime.Property property15 = localDateTime13.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime13.minusHours(436);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDateTime17);
    }

    @Test
    public void test10201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10201");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.weekyears();
        java.lang.String str1 = durationFieldType0.toString();
        org.joda.time.DurationFieldType durationFieldType2 = org.joda.time.DurationFieldType.millis();
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology5 = localDateTime4.getChronology();
        org.joda.time.DurationField durationField6 = chronology5.weekyears();
        org.joda.time.DurationField durationField7 = chronology5.centuries();
        org.joda.time.DurationField durationField8 = durationFieldType2.getField(chronology5);
        boolean boolean9 = durationFieldType0.isSupported(chronology5);
        org.joda.time.DateTimeField dateTimeField10 = chronology5.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str13 = dateTimeZone11.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime14 = org.joda.time.LocalDateTime.now(dateTimeZone11);
        org.joda.time.LocalDateTime.Property property15 = localDateTime14.millisOfDay();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime14.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime14.plusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.minusHours((int) (short) 10);
        int int22 = localDateTime19.getMinuteOfHour();
        org.joda.time.LocalDateTime localDateTime24 = localDateTime19.minusMinutes(0);
        org.joda.time.DurationFieldType durationFieldType25 = org.joda.time.DurationFieldType.weekyears();
        java.lang.String str26 = durationFieldType25.toString();
        org.joda.time.DurationFieldType durationFieldType27 = org.joda.time.DurationFieldType.millis();
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology30 = localDateTime29.getChronology();
        org.joda.time.DurationField durationField31 = chronology30.weekyears();
        org.joda.time.DurationField durationField32 = chronology30.centuries();
        org.joda.time.DurationField durationField33 = durationFieldType27.getField(chronology30);
        boolean boolean34 = durationFieldType25.isSupported(chronology30);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime19.withFieldAdded(durationFieldType25, (-1));
        int int37 = localDateTime36.getWeekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str40 = dateTimeZone38.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime41 = org.joda.time.LocalDateTime.now(dateTimeZone38);
        org.joda.time.LocalDateTime.Property property42 = localDateTime41.millisOfDay();
        org.joda.time.LocalDateTime localDateTime44 = localDateTime41.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime46 = localDateTime41.withMonthOfYear((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime47 = localDateTime36.withFields((org.joda.time.ReadablePartial) localDateTime41);
        org.joda.time.ReadableDuration readableDuration48 = null;
        org.joda.time.LocalDateTime localDateTime50 = localDateTime41.withDurationAdded(readableDuration48, (int) 'u');
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str53 = dateTimeZone51.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime54 = org.joda.time.LocalDateTime.now(dateTimeZone51);
        org.joda.time.LocalDateTime.Property property55 = localDateTime54.millisOfDay();
        java.lang.String str56 = property55.getName();
        int int57 = property55.getMaximumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType58 = property55.getFieldType();
        int int59 = property55.getMinimumValueOverall();
        boolean boolean60 = property55.isLeap();
        java.util.Locale.Builder builder61 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder63 = builder61.addUnicodeLocaleAttribute("und");
        java.util.Locale.Builder builder64 = builder63.clear();
        java.util.Locale locale65 = builder64.build();
        int int66 = property55.getMaximumShortTextLength(locale65);
        java.lang.String str67 = dateTimeField10.getAsText((org.joda.time.ReadablePartial) localDateTime41, locale65);
        long long70 = dateTimeField10.getDifferenceAsLong(1645629647222L, 26411597L);
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "weekyears" + "'", str1, "weekyears");
        org.junit.Assert.assertNotNull(durationFieldType2);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+07:10:22.088" + "'", str13, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
// flaky:         org.junit.Assert.assertTrue("'" + int22 + "' != '" + 33 + "'", int22 == 33);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(durationFieldType25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "weekyears" + "'", str26, "weekyears");
        org.junit.Assert.assertNotNull(durationFieldType27);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 8 + "'", int37 == 8);
        org.junit.Assert.assertNotNull(dateTimeZone38);
// flaky:         org.junit.Assert.assertEquals("'" + str40 + "' != '" + "+07:10:22.088" + "'", str40, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(dateTimeZone51);
// flaky:         org.junit.Assert.assertEquals("'" + str53 + "' != '" + "+07:10:22.088" + "'", str53, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "millisOfDay" + "'", str56, "millisOfDay");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 86399999 + "'", int57 == 86399999);
        org.junit.Assert.assertNotNull(dateTimeFieldType58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 8 + "'", int66 == 8);
// flaky:         org.junit.Assert.assertEquals("'" + str67 + "' != '" + "52429814" + "'", str67, "52429814");
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 1645603235625L + "'", long70 == 1645603235625L);
    }

    @Test
    public void test10202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10202");
        java.util.Locale locale0 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet1 = locale0.getUnicodeLocaleAttributes();
        java.util.Set<java.lang.String> strSet2 = locale0.getUnicodeLocaleAttributes();
        java.lang.String str3 = locale0.getDisplayScript();
        java.util.Locale locale4 = java.util.Locale.FRANCE;
        java.lang.String str5 = locale0.getDisplayVariant(locale4);
        java.lang.String str6 = locale0.getDisplayLanguage();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "");
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
    }

    @Test
    public void test10203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10203");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.millisOfDay();
        java.lang.String str5 = property4.getName();
        org.joda.time.LocalDateTime localDateTime6 = property4.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.minusHours(0);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minusMonths(22);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.withCenturyOfEra(3);
        int[] intArray13 = localDateTime12.getValues();
        org.joda.time.LocalDateTime.Property property14 = localDateTime12.era();
        org.joda.time.Chronology chronology15 = localDateTime12.getChronology();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str18 = dateTimeZone16.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime19 = org.joda.time.LocalDateTime.now(dateTimeZone16);
        org.joda.time.LocalDateTime.Property property20 = localDateTime19.millisOfDay();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime19.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime19.plusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.minusHours((int) (short) 10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray27 = localDateTime24.getFieldTypes();
        int int28 = localDateTime24.getMonthOfYear();
        org.joda.time.LocalDateTime localDateTime30 = localDateTime24.plusMinutes(26181236);
        int int31 = localDateTime24.getMillisOfDay();
        org.joda.time.ReadableDuration readableDuration32 = null;
        org.joda.time.LocalDateTime localDateTime34 = localDateTime24.withDurationAdded(readableDuration32, 81294615);
        boolean boolean35 = localDateTime12.isEqual((org.joda.time.ReadablePartial) localDateTime24);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime12.minusMinutes(379);
        org.junit.Assert.assertNotNull(dateTimeZone0);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+07:10:22.088" + "'", str2, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "millisOfDay" + "'", str5, "millisOfDay");
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(intArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[320, 4, 22, 52429910]");
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+07:10:22.088" + "'", str18, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertNotNull(localDateTime30);
// flaky:         org.junit.Assert.assertTrue("'" + int31 + "' != '" + 81229910 + "'", int31 == 81229910);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(localDateTime37);
    }

    @Test
    public void test10204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10204");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DateTimeField dateTimeField3 = chronology2.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField4 = chronology2.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField5 = chronology2.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField6 = chronology2.millisOfDay();
        org.joda.time.DateTimeField dateTimeField7 = chronology2.dayOfYear();
        org.joda.time.DateTimeField dateTimeField8 = chronology2.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str12 = dateTimeZone10.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime13 = org.joda.time.LocalDateTime.now(dateTimeZone10);
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.millisOfDay();
        org.joda.time.ReadableInstant readableInstant15 = null;
        long long16 = property14.getDifferenceAsLong(readableInstant15);
        org.joda.time.DurationField durationField17 = property14.getLeapDurationField();
        java.lang.String str18 = property14.getAsString();
        org.joda.time.LocalDateTime localDateTime19 = property14.roundFloorCopy();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.withWeekyear((int) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str24 = dateTimeZone22.getShortName((long) (short) 10);
        long long26 = dateTimeZone22.convertUTCToLocal((long) ' ');
        java.lang.String str27 = dateTimeZone22.toString();
        boolean boolean29 = dateTimeZone22.equals((java.lang.Object) (short) 100);
        java.util.Locale locale31 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str32 = dateTimeZone22.getShortName((long) (-1), locale31);
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime(dateTimeZone22);
        org.joda.time.DateTime dateTime34 = localDateTime21.toDateTime(dateTimeZone22);
        long long36 = dateTimeZone22.previousTransition(1L);
        long long39 = dateTimeZone22.adjustOffset(1645629415330L, true);
        org.joda.time.LocalDateTime localDateTime42 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology43 = localDateTime42.getChronology();
        org.joda.time.DateTimeField dateTimeField44 = chronology43.dayOfYear();
        org.joda.time.DateTimeField dateTimeField45 = chronology43.millisOfDay();
        org.joda.time.LocalDateTime localDateTime47 = new org.joda.time.LocalDateTime();
        org.joda.time.ReadableDuration readableDuration48 = null;
        org.joda.time.LocalDateTime localDateTime50 = localDateTime47.withDurationAdded(readableDuration48, (int) '#');
        org.joda.time.LocalDateTime.Property property51 = localDateTime50.centuryOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType52 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.DateTimeField dateTimeField54 = dateTimeFieldType52.getField(chronology53);
        java.util.Locale locale56 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale57 = locale56.stripExtensions();
        java.lang.String str58 = dateTimeField54.getAsShortText(100, locale57);
        int int59 = property51.getMaximumShortTextLength(locale57);
        java.lang.String str60 = dateTimeField45.getAsShortText(1645629361507L, locale57);
        java.lang.String str61 = locale57.getDisplayScript();
        java.lang.String str62 = dateTimeZone22.getShortName((long) 5689406, locale57);
        java.lang.String str63 = dateTimeField8.getAsText(10, locale57);
        int int65 = dateTimeField8.getLeapAmount((long) 26417567);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeZone10);
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+07:10:22.088" + "'", str12, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
// flaky:         org.junit.Assert.assertTrue("'" + long16 + "' != '" + 25822088L + "'", long16 == 25822088L);
        org.junit.Assert.assertNull(durationField17);
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "52429928" + "'", str18, "52429928");
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(dateTimeZone22);
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "+07:10:22.088" + "'", str24, "+07:10:22.088");
// flaky:         org.junit.Assert.assertTrue("'" + long26 + "' != '" + 25822120L + "'", long26 == 25822120L);
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "+07:10:22.088" + "'", str27, "+07:10:22.088");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "fr_CA");
// flaky:         org.junit.Assert.assertEquals("'" + str32 + "' != '" + "+07:10:22.088" + "'", str32, "+07:10:22.088");
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 1L + "'", long36 == 1L);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 1645629415330L + "'", long39 == 1645629415330L);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(dateTimeFieldType52);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "100" + "'", str58, "100");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 7 + "'", int59 == 7);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "54961507" + "'", str60, "54961507");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
// flaky:         org.junit.Assert.assertEquals("'" + str62 + "' != '" + "+07:10:22.088" + "'", str62, "+07:10:22.088");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "10" + "'", str63, "10");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
    }

    @Test
    public void test10205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10205");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str3 = dateTimeZone1.getShortName((long) (short) 10);
        long long5 = dateTimeZone1.convertUTCToLocal((long) ' ');
        java.lang.String str6 = dateTimeZone1.toString();
        long long9 = dateTimeZone1.adjustOffset((long) 'a', true);
        org.joda.time.ReadableInstant readableInstant10 = null;
        int int11 = dateTimeZone1.getOffset(readableInstant10);
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime(1645629353861L, dateTimeZone1);
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.minus(readableDuration13);
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+07:10:22.088" + "'", str3, "+07:10:22.088");
// flaky:         org.junit.Assert.assertTrue("'" + long5 + "' != '" + 25822120L + "'", long5 == 25822120L);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+07:10:22.088" + "'", str6, "+07:10:22.088");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 97L + "'", long9 == 97L);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 25822088 + "'", int11 == 25822088);
        org.junit.Assert.assertNotNull(localDateTime14);
    }

    @Test
    public void test10206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10206");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        org.joda.time.LocalDateTime localDateTime3 = localDateTime0.withDurationAdded(readableDuration1, (int) '#');
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.weekyear();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime3.minusMillis((-1));
        org.joda.time.LocalDateTime.Property property7 = localDateTime3.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime8 = property7.roundHalfFloorCopy();
        org.joda.time.LocalDateTime.Property property9 = localDateTime8.millisOfDay();
        org.joda.time.LocalDateTime localDateTime11 = property9.setCopy(86399999);
        org.joda.time.LocalDateTime localDateTime12 = property9.roundCeilingCopy();
        org.joda.time.LocalDateTime localDateTime14 = property9.addToCopy(55076);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
    }

    @Test
    public void test10207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10207");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("2022-02-22T14:31:34.877", strMap1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=2022-02-22t14:31:34.877");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test10208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10208");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DurationField durationField3 = chronology2.weekyears();
        org.joda.time.DurationField durationField4 = chronology2.seconds();
        org.joda.time.DurationField durationField5 = chronology2.seconds();
        org.joda.time.DurationField durationField6 = chronology2.seconds();
        org.joda.time.DateTimeField dateTimeField7 = chronology2.millisOfDay();
        org.joda.time.DateTimeField dateTimeField8 = chronology2.halfdayOfDay();
        int int10 = dateTimeField8.getMaximumValue(1645629681633L);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str13 = dateTimeZone11.getShortName((long) (short) 10);
        long long15 = dateTimeZone11.convertUTCToLocal((long) ' ');
        java.lang.String str16 = dateTimeZone11.toString();
        long long18 = dateTimeZone11.previousTransition(32L);
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime(dateTimeZone11);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.withWeekyear(22);
        org.joda.time.LocalDateTime.Property property22 = localDateTime21.millisOfDay();
        org.joda.time.LocalDateTime localDateTime23 = property22.roundCeilingCopy();
        java.util.Locale locale24 = java.util.Locale.getDefault();
        java.lang.String str25 = property22.getAsShortText(locale24);
        int int26 = dateTimeField8.getMaximumTextLength(locale24);
        long long29 = dateTimeField8.getDifferenceAsLong(1645629474466L, 1645629776375L);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(dateTimeZone11);
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+07:10:22.088" + "'", str13, "+07:10:22.088");
// flaky:         org.junit.Assert.assertTrue("'" + long15 + "' != '" + 25822120L + "'", long15 == 25822120L);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+07:10:22.088" + "'", str16, "+07:10:22.088");
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 32L + "'", long18 == 32L);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "de");
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "52430009" + "'", str25, "52430009");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
    }

    @Test
    public void test10209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10209");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.millisOfDay();
        org.joda.time.ReadableInstant readableInstant5 = null;
        long long6 = property4.getDifferenceAsLong(readableInstant5);
        java.util.Locale locale8 = java.util.Locale.CANADA_FRENCH;
        java.util.Set<java.lang.String> strSet9 = locale8.getUnicodeLocaleKeys();
        org.joda.time.LocalDateTime localDateTime10 = property4.setCopy("26153615", locale8);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str13 = dateTimeZone11.getShortName((long) (short) 10);
        long long15 = dateTimeZone11.convertUTCToLocal((long) ' ');
        java.lang.String str16 = dateTimeZone11.toString();
        long long18 = dateTimeZone11.previousTransition(32L);
        long long21 = dateTimeZone11.convertLocalToUTC(97L, false);
        java.lang.String str23 = dateTimeZone11.getShortName((long) 5);
        int int25 = dateTimeZone11.getOffset((long) 567);
        long long27 = dateTimeZone11.nextTransition((long) 26213656);
        java.util.Locale.Builder builder29 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder31 = builder29.addUnicodeLocaleAttribute("und");
        java.util.Locale locale32 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale33 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str34 = locale32.getDisplayCountry(locale33);
        java.lang.String str35 = locale33.getDisplayName();
        java.util.Locale.Builder builder36 = builder31.setLocale(locale33);
        java.util.Set<java.lang.Character> charSet37 = locale33.getExtensionKeys();
        java.lang.String str39 = locale33.getExtension('a');
        java.lang.String str40 = dateTimeZone11.getShortName(33288804662400000L, locale33);
        java.lang.String str41 = locale8.getDisplayScript(locale33);
        java.util.Locale locale43 = new java.util.Locale("");
        java.lang.String str44 = locale8.getDisplayLanguage(locale43);
        java.lang.String str45 = locale43.getDisplayScript();
        org.joda.time.LocalDateTime localDateTime47 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology48 = localDateTime47.getChronology();
        org.joda.time.DurationField durationField49 = chronology48.weekyears();
        org.joda.time.DurationField durationField50 = chronology48.centuries();
        org.joda.time.DurationField durationField51 = chronology48.minutes();
        org.joda.time.DateTimeField dateTimeField52 = chronology48.monthOfYear();
        org.joda.time.DateTimeField dateTimeField53 = chronology48.dayOfYear();
        org.joda.time.DurationField durationField54 = chronology48.days();
        org.joda.time.DateTimeField dateTimeField55 = chronology48.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime58 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology59 = localDateTime58.getChronology();
        org.joda.time.DurationField durationField60 = chronology59.weekyears();
        org.joda.time.DurationField durationField61 = chronology59.centuries();
        org.joda.time.DateTimeField dateTimeField62 = chronology59.minuteOfDay();
        java.util.Locale locale63 = java.util.Locale.GERMAN;
        java.util.Locale.setDefault(locale63);
        java.util.Locale locale65 = java.util.Locale.CANADA;
        boolean boolean66 = locale65.hasExtensions();
        java.lang.String str67 = locale63.getDisplayScript(locale65);
        int int68 = dateTimeField62.getMaximumTextLength(locale65);
        java.lang.String str69 = dateTimeField55.getAsText(915, locale65);
        java.lang.String str70 = locale43.getDisplayName(locale65);
        org.junit.Assert.assertNotNull(dateTimeZone0);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+07:10:22.088" + "'", str2, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
// flaky:         org.junit.Assert.assertTrue("'" + long6 + "' != '" + 25822088L + "'", long6 == 25822088L);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+07:10:22.088" + "'", str13, "+07:10:22.088");
// flaky:         org.junit.Assert.assertTrue("'" + long15 + "' != '" + 25822120L + "'", long15 == 25822120L);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+07:10:22.088" + "'", str16, "+07:10:22.088");
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 32L + "'", long18 == 32L);
// flaky:         org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-25821991L) + "'", long21 == (-25821991L));
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "+07:10:22.088" + "'", str23, "+07:10:22.088");
// flaky:         org.junit.Assert.assertTrue("'" + int25 + "' != '" + 25822088 + "'", int25 == 25822088);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 26213656L + "'", long27 == 26213656L);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Canada" + "'", str34, "Canada");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Franz\366sisch (Kanada)" + "'", str35, "Franz\366sisch (Kanada)");
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(charSet37);
        org.junit.Assert.assertNull(str39);
// flaky:         org.junit.Assert.assertEquals("'" + str40 + "' != '" + "+07:10:22.088" + "'", str40, "+07:10:22.088");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertEquals(locale43.toString(), "");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "French" + "'", str44, "French");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(durationField49);
        org.junit.Assert.assertNotNull(durationField50);
        org.junit.Assert.assertNotNull(durationField51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(durationField54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(durationField60);
        org.junit.Assert.assertNotNull(durationField61);
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "de");
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "en_CA");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 4 + "'", int68 == 4);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "915" + "'", str69, "915");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
    }

    @Test
    public void test10210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10210");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.millisOfDay();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime3.withYear((int) (short) 100);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.minuteOfHour();
        int int8 = property7.get();
        org.joda.time.LocalDateTime localDateTime10 = property7.setCopy((int) (short) 10);
        org.joda.time.LocalDateTime.Property property11 = localDateTime10.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime10.withYearOfCentury(0);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.plusMonths((int) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str19 = dateTimeZone17.getShortName((long) (short) 10);
        long long21 = dateTimeZone17.convertUTCToLocal((long) ' ');
        java.lang.String str22 = dateTimeZone17.toString();
        long long24 = dateTimeZone17.previousTransition(32L);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.DateTimeField dateTimeField28 = dateTimeFieldType26.getField(chronology27);
        java.util.Locale.Category category30 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale31 = java.util.Locale.FRENCH;
        java.util.Locale.setDefault(category30, locale31);
        java.lang.String str33 = locale31.toLanguageTag();
        java.lang.String str34 = dateTimeField28.getAsText((long) 26149, locale31);
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology38 = localDateTime37.getChronology();
        org.joda.time.DurationField durationField39 = chronology38.weekyears();
        org.joda.time.DurationField durationField40 = chronology38.centuries();
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime((long) (byte) 0, chronology38);
        org.joda.time.DurationField durationField42 = chronology38.millis();
        org.joda.time.DateTimeField dateTimeField43 = chronology38.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField44 = chronology38.halfdayOfDay();
        java.util.Locale.Category category46 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale47 = java.util.Locale.FRENCH;
        java.util.Locale.setDefault(category46, locale47);
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.DateTimeField dateTimeField51 = dateTimeFieldType49.getField(chronology50);
        java.util.Locale locale53 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale54 = locale53.stripExtensions();
        java.lang.String str55 = dateTimeField51.getAsShortText(100, locale54);
        java.util.Locale.setDefault(category46, locale54);
        org.joda.time.tz.NameProvider nameProvider57 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale58 = java.util.Locale.CANADA;
        java.lang.String str61 = nameProvider57.getShortName(locale58, "fran\347ais", "2022-02-22T07:15:48.066");
        java.util.Locale.setDefault(category46, locale58);
        java.lang.String str63 = dateTimeField44.getAsShortText((long) 5, locale58);
        java.lang.String str64 = locale31.getDisplayCountry(locale58);
        java.lang.String str65 = dateTimeZone17.getName((long) 54974408, locale31);
        java.lang.String str66 = localDateTime13.toString("26257474", locale31);
        java.lang.Object obj67 = locale31.clone();
        org.junit.Assert.assertNotNull(dateTimeZone0);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+07:10:22.088" + "'", str2, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 33 + "'", int8 == 33);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(dateTimeZone17);
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "+07:10:22.088" + "'", str19, "+07:10:22.088");
// flaky:         org.junit.Assert.assertTrue("'" + long21 + "' != '" + 25822120L + "'", long21 == 25822120L);
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+07:10:22.088" + "'", str22, "+07:10:22.088");
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 32L + "'", long24 == 32L);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertTrue("'" + category30 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category30.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "fr" + "'", str33, "fr");
// flaky:         org.junit.Assert.assertEquals("'" + str34 + "' != '" + "430" + "'", str34, "430");
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertNotNull(durationField40);
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertTrue("'" + category46 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category46.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "fr");
        org.junit.Assert.assertNotNull(dateTimeFieldType49);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "100" + "'", str55, "100");
        org.junit.Assert.assertNotNull(nameProvider57);
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "en_CA");
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "AM" + "'", str63, "AM");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
// flaky:         org.junit.Assert.assertEquals("'" + str65 + "' != '" + "+07:10:22.088" + "'", str65, "+07:10:22.088");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "26257474" + "'", str66, "26257474");
        org.junit.Assert.assertNotNull(obj67);
        org.junit.Assert.assertEquals(obj67.toString(), "fr");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj67), "fr");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj67), "fr");
    }

    @Test
    public void test10211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10211");
        java.util.Locale locale0 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet1 = locale0.getUnicodeLocaleAttributes();
        java.lang.Object[] objArray2 = strSet1.toArray();
        java.util.Locale locale3 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet4 = locale3.getUnicodeLocaleAttributes();
        boolean boolean5 = strSet1.removeAll((java.util.Collection<java.lang.String>) strSet4);
        java.util.Locale locale6 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet7 = locale6.getUnicodeLocaleAttributes();
        java.lang.Object[] objArray8 = strSet7.toArray();
        java.util.Locale locale9 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet10 = locale9.getUnicodeLocaleAttributes();
        boolean boolean11 = strSet7.removeAll((java.util.Collection<java.lang.String>) strSet10);
        java.util.Locale locale12 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet13 = locale12.getUnicodeLocaleAttributes();
        org.joda.time.DurationFieldType durationFieldType14 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.DurationFieldType durationFieldType15 = org.joda.time.DurationFieldType.hours();
        org.joda.time.DurationFieldType[] durationFieldTypeArray16 = new org.joda.time.DurationFieldType[] { durationFieldType14, durationFieldType15 };
        org.joda.time.DurationFieldType[] durationFieldTypeArray17 = strSet13.toArray(durationFieldTypeArray16);
        boolean boolean18 = strSet7.containsAll((java.util.Collection<java.lang.String>) strSet13);
        java.util.Locale locale19 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet20 = locale19.getUnicodeLocaleAttributes();
        java.lang.Object[] objArray21 = strSet20.toArray();
        java.util.Locale locale22 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet23 = locale22.getUnicodeLocaleAttributes();
        boolean boolean24 = strSet20.removeAll((java.util.Collection<java.lang.String>) strSet23);
        java.util.Locale locale25 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet26 = locale25.getUnicodeLocaleAttributes();
        org.joda.time.DurationFieldType durationFieldType27 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.DurationFieldType durationFieldType28 = org.joda.time.DurationFieldType.hours();
        org.joda.time.DurationFieldType[] durationFieldTypeArray29 = new org.joda.time.DurationFieldType[] { durationFieldType27, durationFieldType28 };
        org.joda.time.DurationFieldType[] durationFieldTypeArray30 = strSet26.toArray(durationFieldTypeArray29);
        boolean boolean31 = strSet20.containsAll((java.util.Collection<java.lang.String>) strSet26);
        java.lang.Object[] objArray32 = strSet26.toArray();
        boolean boolean33 = strSet7.retainAll((java.util.Collection<java.lang.String>) strSet26);
        java.lang.Object[] objArray34 = strSet7.toArray();
        boolean boolean35 = strSet1.removeAll((java.util.Collection<java.lang.String>) strSet7);
        boolean boolean36 = strSet1.isEmpty();
        java.lang.Object[] objArray37 = strSet1.toArray();
        java.util.stream.Stream<java.lang.String> strStream38 = strSet1.parallelStream();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "");
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNotNull(objArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray2), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray2), "[]");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "");
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "");
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[]");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "");
        org.junit.Assert.assertNotNull(strSet10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "");
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertNotNull(durationFieldType14);
        org.junit.Assert.assertNotNull(durationFieldType15);
        org.junit.Assert.assertNotNull(durationFieldTypeArray16);
        org.junit.Assert.assertNotNull(durationFieldTypeArray17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "");
        org.junit.Assert.assertNotNull(strSet20);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[]");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "");
        org.junit.Assert.assertNotNull(strSet23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "");
        org.junit.Assert.assertNotNull(strSet26);
        org.junit.Assert.assertNotNull(durationFieldType27);
        org.junit.Assert.assertNotNull(durationFieldType28);
        org.junit.Assert.assertNotNull(durationFieldTypeArray29);
        org.junit.Assert.assertNotNull(durationFieldTypeArray30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[]");
        org.junit.Assert.assertNotNull(strStream38);
    }

    @Test
    public void test10212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10212");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.millisOfDay();
        org.joda.time.ReadableInstant readableInstant5 = null;
        long long6 = property4.getDifferenceAsLong(readableInstant5);
        org.joda.time.DurationField durationField7 = property4.getLeapDurationField();
        java.lang.String str8 = property4.getAsString();
        org.joda.time.LocalDateTime localDateTime10 = property4.addToCopy(1645629357222L);
        org.joda.time.LocalDateTime.Property property11 = localDateTime10.millisOfDay();
        long long12 = property11.remainder();
        org.joda.time.LocalDateTime localDateTime13 = property11.roundCeilingCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTimeField dateTimeField16 = dateTimeFieldType14.getField(chronology15);
        java.util.Locale locale18 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale19 = locale18.stripExtensions();
        java.lang.String str20 = dateTimeField16.getAsShortText(100, locale19);
        int int22 = dateTimeField16.getLeapAmount((long) (short) 100);
        org.joda.time.DurationField durationField23 = dateTimeField16.getRangeDurationField();
        boolean boolean24 = dateTimeField16.isLenient();
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime();
        org.joda.time.ReadableDuration readableDuration26 = null;
        org.joda.time.LocalDateTime localDateTime28 = localDateTime25.withDurationAdded(readableDuration26, (int) '#');
        org.joda.time.LocalDateTime.Property property29 = localDateTime28.weekyear();
        int int30 = dateTimeField16.getMaximumValue((org.joda.time.ReadablePartial) localDateTime28);
        int int31 = localDateTime28.getDayOfMonth();
        org.joda.time.LocalDateTime localDateTime33 = localDateTime28.plusMonths(26306790);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime13.withFields((org.joda.time.ReadablePartial) localDateTime33);
        org.joda.time.ReadableDuration readableDuration35 = null;
        org.joda.time.LocalDateTime localDateTime36 = localDateTime34.minus(readableDuration35);
        int int37 = localDateTime34.getWeekOfWeekyear();
        java.lang.String str38 = localDateTime34.toString();
        org.junit.Assert.assertNotNull(dateTimeZone0);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+07:10:22.088" + "'", str2, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
// flaky:         org.junit.Assert.assertTrue("'" + long6 + "' != '" + 25822088L + "'", long6 == 25822088L);
        org.junit.Assert.assertNull(durationField7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "52430114" + "'", str8, "52430114");
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "100" + "'", str20, "100");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1439 + "'", int30 == 1439);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 22 + "'", int31 == 22);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 34 + "'", int37 == 34);
// flaky:         org.junit.Assert.assertEquals("'" + str38 + "' != '" + "2194254-08-22T14:33:50.114" + "'", str38, "2194254-08-22T14:33:50.114");
    }

    @Test
    public void test10213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10213");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        org.joda.time.LocalDateTime localDateTime3 = localDateTime0.withDurationAdded(readableDuration1, (int) '#');
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.weekyear();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime3.minusMillis((-1));
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str9 = dateTimeZone7.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime10 = org.joda.time.LocalDateTime.now(dateTimeZone7);
        org.joda.time.LocalDateTime.Property property11 = localDateTime10.millisOfDay();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime10.withYear((int) (short) 100);
        java.lang.String str14 = localDateTime13.toString();
        boolean boolean15 = localDateTime3.isAfter((org.joda.time.ReadablePartial) localDateTime13);
        org.joda.time.DurationFieldType durationFieldType16 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime13.withFieldAdded(durationFieldType16, 7);
        org.joda.time.DurationFieldType durationFieldType19 = org.joda.time.DurationFieldType.days();
        java.lang.String str20 = durationFieldType19.toString();
        boolean boolean21 = localDateTime13.isSupported(durationFieldType19);
        int int22 = localDateTime13.getMinuteOfHour();
        int int23 = localDateTime13.getMinuteOfHour();
        org.joda.time.LocalDateTime.Property property24 = localDateTime13.weekyear();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+07:10:22.088" + "'", str9, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDateTime13);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "0100-02-22T14:33:50.138" + "'", str14, "0100-02-22T14:33:50.138");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(durationFieldType16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(durationFieldType19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "days" + "'", str20, "days");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int22 + "' != '" + 33 + "'", int22 == 33);
// flaky:         org.junit.Assert.assertTrue("'" + int23 + "' != '" + 33 + "'", int23 == 33);
        org.junit.Assert.assertNotNull(property24);
    }

    @Test
    public void test10214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10214");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.millisOfDay();
        org.joda.time.DurationFieldType durationFieldType5 = org.joda.time.DurationFieldType.centuries();
        boolean boolean6 = localDateTime3.equals((java.lang.Object) durationFieldType5);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray7 = localDateTime3.getFieldTypes();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str10 = dateTimeZone8.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now(dateTimeZone8);
        org.joda.time.LocalDateTime.Property property12 = localDateTime11.millisOfDay();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime11.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime11.plusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.minusHours((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.withEra((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property21 = localDateTime20.secondOfMinute();
        boolean boolean22 = localDateTime3.isAfter((org.joda.time.ReadablePartial) localDateTime20);
        int[] intArray23 = localDateTime3.getValues();
        org.joda.time.LocalDateTime.Property property24 = localDateTime3.era();
        int int25 = property24.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime26 = property24.roundCeilingCopy();
        org.joda.time.DurationFieldType durationFieldType27 = org.joda.time.DurationFieldType.months();
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology30 = localDateTime29.getChronology();
        org.joda.time.DurationField durationField31 = chronology30.weekyears();
        org.joda.time.DurationField durationField32 = chronology30.seconds();
        org.joda.time.DurationField durationField33 = chronology30.seconds();
        org.joda.time.DurationField durationField34 = chronology30.seconds();
        org.joda.time.DurationField durationField35 = chronology30.weekyears();
        boolean boolean36 = durationFieldType27.isSupported(chronology30);
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology39 = localDateTime38.getChronology();
        org.joda.time.DurationField durationField40 = chronology39.hours();
        org.joda.time.DurationField durationField41 = chronology39.weekyears();
        org.joda.time.DateTimeField dateTimeField42 = chronology39.monthOfYear();
        org.joda.time.DateTimeField dateTimeField43 = chronology39.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime44 = org.joda.time.LocalDateTime.now(chronology39);
        org.joda.time.DurationField durationField45 = durationFieldType27.getField(chronology39);
        org.joda.time.LocalDateTime localDateTime47 = localDateTime26.withFieldAdded(durationFieldType27, 7);
        org.joda.time.LocalDateTime localDateTime49 = localDateTime26.minusYears(18986);
        int int50 = localDateTime26.getSecondOfMinute();
        org.junit.Assert.assertNotNull(dateTimeZone0);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+07:10:22.088" + "'", str2, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(durationFieldType5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+07:10:22.088" + "'", str10, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(intArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[2022, 2, 22, 52430156]");
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(durationFieldType27);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(durationField40);
        org.junit.Assert.assertNotNull(durationField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(durationField45);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 55 + "'", int50 == 55);
    }

    @Test
    public void test10215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10215");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str3 = dateTimeZone1.getShortName((long) (short) 10);
        long long5 = dateTimeZone1.convertUTCToLocal((long) ' ');
        java.lang.String str6 = dateTimeZone1.toString();
        java.lang.String str7 = dateTimeZone1.toString();
        boolean boolean8 = dateTimeZone1.isFixed();
        boolean boolean9 = dateTimeZone1.isFixed();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((java.lang.Object) 594L, dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+07:10:22.088" + "'", str3, "+07:10:22.088");
// flaky:         org.junit.Assert.assertTrue("'" + long5 + "' != '" + 25822120L + "'", long5 == 25822120L);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+07:10:22.088" + "'", str6, "+07:10:22.088");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+07:10:22.088" + "'", str7, "+07:10:22.088");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void test10216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10216");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.millisOfDay();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime3.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime3.plusHours((int) ' ');
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.DateTime dateTime10 = localDateTime8.toDateTime(readableInstant9);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str13 = dateTimeZone11.getShortName((long) (short) 10);
        long long15 = dateTimeZone11.convertUTCToLocal((long) ' ');
        java.lang.String str16 = dateTimeZone11.toString();
        long long18 = dateTimeZone11.previousTransition(32L);
        long long21 = dateTimeZone11.convertLocalToUTC(97L, false);
        boolean boolean22 = dateTime10.equals((java.lang.Object) false);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str25 = dateTimeZone23.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime26 = org.joda.time.LocalDateTime.now(dateTimeZone23);
        org.joda.time.LocalDateTime.Property property27 = localDateTime26.millisOfDay();
        org.joda.time.LocalDateTime localDateTime29 = localDateTime26.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime26.plusHours((int) ' ');
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.DateTime dateTime33 = localDateTime31.toDateTime(readableInstant32);
        long long34 = dateTime33.getMillis();
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str37 = dateTimeZone35.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime38 = org.joda.time.LocalDateTime.now(dateTimeZone35);
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = localDateTime38.getFieldType((int) (short) 0);
        boolean boolean41 = dateTime33.isSupported(dateTimeFieldType40);
        boolean boolean42 = dateTime10.isAfter((org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.DateTimeZone dateTimeZone43 = dateTime33.getZone();
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str46 = dateTimeZone44.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime47 = org.joda.time.LocalDateTime.now(dateTimeZone44);
        org.joda.time.LocalDateTime.Property property48 = localDateTime47.millisOfDay();
        org.joda.time.ReadableInstant readableInstant49 = null;
        long long50 = property48.getDifferenceAsLong(readableInstant49);
        org.joda.time.DurationField durationField51 = property48.getLeapDurationField();
        java.lang.String str52 = property48.getAsString();
        org.joda.time.LocalDateTime localDateTime54 = property48.addToCopy(1645629357222L);
        org.joda.time.LocalDateTime.Property property55 = localDateTime54.millisOfDay();
        org.joda.time.LocalDateTime localDateTime56 = property55.roundHalfEvenCopy();
        boolean boolean57 = dateTimeZone43.isLocalDateTimeGap(localDateTime56);
        java.lang.String str58 = dateTimeZone43.getID();
        long long60 = dateTimeZone43.previousTransition(1645629630740L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+07:10:22.088" + "'", str2, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+07:10:22.088" + "'", str13, "+07:10:22.088");
// flaky:         org.junit.Assert.assertTrue("'" + long15 + "' != '" + 25822120L + "'", long15 == 25822120L);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+07:10:22.088" + "'", str16, "+07:10:22.088");
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 32L + "'", long18 == 32L);
// flaky:         org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-25821991L) + "'", long21 == (-25821991L));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(dateTimeZone23);
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "+07:10:22.088" + "'", str25, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
// flaky:         org.junit.Assert.assertTrue("'" + long34 + "' != '" + 1645629808109L + "'", long34 == 1645629808109L);
        org.junit.Assert.assertNotNull(dateTimeZone35);
// flaky:         org.junit.Assert.assertEquals("'" + str37 + "' != '" + "+07:10:22.088" + "'", str37, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(dateTimeFieldType40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertNotNull(dateTimeZone44);
// flaky:         org.junit.Assert.assertEquals("'" + str46 + "' != '" + "+07:10:22.088" + "'", str46, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(property48);
// flaky:         org.junit.Assert.assertTrue("'" + long50 + "' != '" + 25822088L + "'", long50 == 25822088L);
        org.junit.Assert.assertNull(durationField51);
// flaky:         org.junit.Assert.assertEquals("'" + str52 + "' != '" + "52430197" + "'", str52, "52430197");
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str58 + "' != '" + "+07:10:22.088" + "'", str58, "+07:10:22.088");
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 1645629630740L + "'", long60 == 1645629630740L);
    }

    @Test
    public void test10217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10217");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime(81223195, 339, (int) (short) 10, (-27397156), 36, 0, 26462);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -27397156 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test10218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10218");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology3 = localDateTime2.getChronology();
        org.joda.time.DurationField durationField4 = chronology3.weekyears();
        boolean boolean5 = dateTimeFieldType0.isSupported(chronology3);
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime();
        java.lang.String str7 = localDateTime6.toString();
        int int8 = localDateTime6.getCenturyOfEra();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime6.minusMonths(2);
        org.joda.time.LocalDateTime.Property property11 = localDateTime10.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str14 = dateTimeZone12.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime15 = org.joda.time.LocalDateTime.now(dateTimeZone12);
        org.joda.time.LocalDateTime.Property property16 = localDateTime15.millisOfDay();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime15.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime15.plusHours((int) ' ');
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.DateTime dateTime22 = localDateTime20.toDateTime(readableInstant21);
        long long23 = dateTime22.getMillis();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str26 = dateTimeZone24.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime27 = org.joda.time.LocalDateTime.now(dateTimeZone24);
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = localDateTime27.getFieldType((int) (short) 0);
        boolean boolean30 = dateTime22.isSupported(dateTimeFieldType29);
        org.joda.time.DateTime dateTime31 = localDateTime10.toDateTime((org.joda.time.ReadableInstant) dateTime22);
        int[] intArray33 = chronology3.get((org.joda.time.ReadablePartial) localDateTime10, 11L);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime10.minusMonths((int) (short) 10);
        org.joda.time.LocalDateTime.Property property36 = localDateTime35.secondOfMinute();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "2022-02-22T14:33:50.278" + "'", str7, "2022-02-22T14:33:50.278");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 20 + "'", int8 == 20);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+07:10:22.088" + "'", str14, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
// flaky:         org.junit.Assert.assertTrue("'" + long23 + "' != '" + 1645629808190L + "'", long23 == 1645629808190L);
        org.junit.Assert.assertNotNull(dateTimeZone24);
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "+07:10:22.088" + "'", str26, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(dateTimeFieldType29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1970, 1, 1, 11]");
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(property36);
    }

    @Test
    public void test10219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10219");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.millisOfDay();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime3.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime3.plusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minusHours((int) (short) 10);
        int int11 = localDateTime8.getMinuteOfHour();
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.LocalDateTime localDateTime13 = localDateTime8.minus(readablePeriod12);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str16 = dateTimeZone14.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime17 = org.joda.time.LocalDateTime.now(dateTimeZone14);
        org.joda.time.LocalDateTime.Property property18 = localDateTime17.millisOfDay();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime17.withYear((int) (short) 100);
        int int21 = localDateTime20.getCenturyOfEra();
        boolean boolean22 = localDateTime8.isBefore((org.joda.time.ReadablePartial) localDateTime20);
        int int23 = localDateTime20.getDayOfYear();
        int int24 = localDateTime20.getDayOfMonth();
        org.joda.time.LocalDateTime localDateTime26 = localDateTime20.minusSeconds(31);
        org.joda.time.DateTimeField[] dateTimeFieldArray27 = localDateTime20.getFields();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str30 = dateTimeZone28.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime31 = org.joda.time.LocalDateTime.now(dateTimeZone28);
        org.joda.time.LocalDateTime.Property property32 = localDateTime31.millisOfDay();
        org.joda.time.LocalDateTime localDateTime34 = localDateTime31.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime31.plusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime38 = localDateTime36.minusHours((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime38.withEra((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime38.plusDays(55162270);
        int int43 = localDateTime20.compareTo((org.joda.time.ReadablePartial) localDateTime38);
        org.joda.time.LocalDateTime.Property property44 = localDateTime20.dayOfMonth();
        org.joda.time.ReadableDuration readableDuration45 = null;
        org.joda.time.LocalDateTime localDateTime46 = localDateTime20.plus(readableDuration45);
        org.junit.Assert.assertNotNull(dateTimeZone0);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+07:10:22.088" + "'", str2, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 33 + "'", int11 == 33);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+07:10:22.088" + "'", str16, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 53 + "'", int23 == 53);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 22 + "'", int24 == 22);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(dateTimeFieldArray27);
        org.junit.Assert.assertNotNull(dateTimeZone28);
// flaky:         org.junit.Assert.assertEquals("'" + str30 + "' != '" + "+07:10:22.088" + "'", str30, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(localDateTime46);
    }

    @Test
    public void test10220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10220");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.millisOfDay();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime3.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime3.plusHours((int) ' ');
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = localDateTime8.getFieldType((int) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str13 = dateTimeZone11.getShortName((long) (short) 10);
        long long15 = dateTimeZone11.convertUTCToLocal((long) ' ');
        java.lang.String str16 = dateTimeZone11.toString();
        boolean boolean18 = dateTimeZone11.equals((java.lang.Object) (short) 100);
        java.util.Locale locale20 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str21 = dateTimeZone11.getShortName((long) (-1), locale20);
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime(dateTimeZone11);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime25 = localDateTime22.withField(dateTimeFieldType23, (int) (short) 100);
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology28 = localDateTime27.getChronology();
        org.joda.time.DurationField durationField29 = chronology28.weekyears();
        org.joda.time.DurationField durationField30 = chronology28.centuries();
        org.joda.time.DateTimeField dateTimeField31 = chronology28.minuteOfDay();
        long long35 = chronology28.add((long) 2, (long) 21, (int) '4');
        boolean boolean36 = dateTimeFieldType23.isSupported(chronology28);
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str39 = dateTimeZone37.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime40 = org.joda.time.LocalDateTime.now(dateTimeZone37);
        org.joda.time.LocalDateTime.Property property41 = localDateTime40.millisOfDay();
        int int42 = property41.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime43 = property41.withMaximumValue();
        int[] intArray45 = chronology28.get((org.joda.time.ReadablePartial) localDateTime43, 5498195040L);
        org.joda.time.DateTimeField dateTimeField46 = dateTimeFieldType10.getField(chronology28);
        org.joda.time.DurationField durationField47 = chronology28.hours();
        boolean boolean48 = durationField47.isPrecise();
        org.junit.Assert.assertNotNull(dateTimeZone0);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+07:10:22.088" + "'", str2, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+07:10:22.088" + "'", str13, "+07:10:22.088");
// flaky:         org.junit.Assert.assertTrue("'" + long15 + "' != '" + 25822120L + "'", long15 == 25822120L);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+07:10:22.088" + "'", str16, "+07:10:22.088");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "fr_CA");
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "+07:10:22.088" + "'", str21, "+07:10:22.088");
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 1094L + "'", long35 == 1094L);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(dateTimeZone37);
// flaky:         org.junit.Assert.assertEquals("'" + str39 + "' != '" + "+07:10:22.088" + "'", str39, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 86399999 + "'", int42 == 86399999);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[1970, 3, 5, 54995040]");
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(durationField47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
    }

    @Test
    public void test10221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10221");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.millisOfDay();
        int int5 = localDateTime3.getCenturyOfEra();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime3.minusDays(100);
        int int8 = localDateTime3.getMonthOfYear();
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime();
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.LocalDateTime localDateTime12 = localDateTime9.withDurationAdded(readableDuration10, (int) '#');
        org.joda.time.LocalDateTime.Property property13 = localDateTime12.weekyear();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime12.minusMillis((-1));
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str18 = dateTimeZone16.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime19 = org.joda.time.LocalDateTime.now(dateTimeZone16);
        org.joda.time.LocalDateTime.Property property20 = localDateTime19.millisOfDay();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime19.withYear((int) (short) 100);
        java.lang.String str23 = localDateTime22.toString();
        boolean boolean24 = localDateTime12.isAfter((org.joda.time.ReadablePartial) localDateTime22);
        org.joda.time.DurationFieldType durationFieldType25 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime22.withFieldAdded(durationFieldType25, 7);
        int int28 = localDateTime3.compareTo((org.joda.time.ReadablePartial) localDateTime27);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime27.withYear(0);
        org.junit.Assert.assertNotNull(dateTimeZone0);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+07:10:22.088" + "'", str2, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 20 + "'", int5 == 20);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+07:10:22.088" + "'", str18, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localDateTime22);
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "0100-02-22T14:33:50.346" + "'", str23, "0100-02-22T14:33:50.346");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(durationFieldType25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(localDateTime30);
    }

    @Test
    public void test10222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10222");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getShortName((long) (short) 10);
        long long4 = dateTimeZone0.convertUTCToLocal((long) ' ');
        java.lang.String str5 = dateTimeZone0.toString();
        long long8 = dateTimeZone0.adjustOffset((long) 'a', true);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetHours((int) ' ');
        java.lang.String str11 = dateTimeZone10.getID();
        long long13 = dateTimeZone0.getMillisKeepLocal(dateTimeZone10, 0L);
        java.util.TimeZone timeZone14 = dateTimeZone0.toTimeZone();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forTimeZone(timeZone14);
// flaky:             org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The datetime zone id '+07:10:22.088' is not recognised");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+07:10:22.088" + "'", str2, "+07:10:22.088");
// flaky:         org.junit.Assert.assertTrue("'" + long4 + "' != '" + 25822120L + "'", long4 == 25822120L);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+07:10:22.088" + "'", str5, "+07:10:22.088");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 97L + "'", long8 == 97L);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+32:00" + "'", str11, "+32:00");
// flaky:         org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-89377912L) + "'", long13 == (-89377912L));
        org.junit.Assert.assertNotNull(timeZone14);
// flaky:         org.junit.Assert.assertEquals(timeZone14.getDisplayName(), "GMT+07:10");
    }

    @Test
    public void test10223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10223");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DurationField durationField3 = chronology2.weekyears();
        org.joda.time.DurationField durationField4 = chronology2.centuries();
        org.joda.time.DurationField durationField5 = chronology2.hours();
        org.joda.time.DateTimeField dateTimeField6 = chronology2.year();
        org.joda.time.DateTimeField dateTimeField7 = chronology2.yearOfEra();
        java.lang.String str8 = dateTimeField7.toString();
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "DateTimeField[yearOfEra]" + "'", str8, "DateTimeField[yearOfEra]");
    }

    @Test
    public void test10224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10224");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        org.joda.time.LocalDateTime localDateTime3 = localDateTime0.withDurationAdded(readableDuration1, (int) '#');
        org.joda.time.LocalDateTime.Property property4 = localDateTime0.era();
        int int5 = localDateTime0.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime0.withWeekOfWeekyear((int) (byte) 1);
        org.joda.time.LocalDateTime.Property property8 = localDateTime0.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime0.minusMillis(0);
        org.joda.time.LocalDateTime.Property property11 = localDateTime0.weekOfWeekyear();
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.LocalDateTime localDateTime13 = localDateTime0.plus(readableDuration12);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime17 = localDateTime13.withDate(126000000, 93, (-1922));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 93 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 22 + "'", int5 == 22);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDateTime13);
    }

    @Test
    public void test10225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10225");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime(26502591, 872, 25819981, 81400123, 26548, 2023, 459);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 81400123 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test10226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10226");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.millisOfDay();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime3.withYear((int) (short) 100);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.minuteOfHour();
        int int8 = property7.get();
        org.joda.time.LocalDateTime localDateTime10 = property7.setCopy((int) (short) 10);
        org.joda.time.LocalDateTime.Property property11 = localDateTime10.minuteOfHour();
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.LocalDateTime localDateTime13 = localDateTime10.minus(readableDuration12);
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.dayOfYear();
        org.joda.time.LocalDateTime localDateTime15 = property14.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.withYear(4001);
        org.joda.time.LocalDateTime.Property property18 = localDateTime15.centuryOfEra();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime20 = localDateTime15.withMonthOfYear(52303145);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 52303145 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+07:10:22.088" + "'", str2, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 33 + "'", int8 == 33);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(property18);
    }

    @Test
    public void test10227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10227");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale1 = java.util.Locale.FRENCH;
        java.util.Locale.setDefault(category0, locale1);
        java.util.Locale.Builder builder3 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder5 = builder3.addUnicodeLocaleAttribute("und");
        java.util.Locale locale6 = builder5.build();
        java.util.Locale.setDefault(category0, locale6);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str10 = dateTimeZone8.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now(dateTimeZone8);
        org.joda.time.LocalDateTime.Property property12 = localDateTime11.millisOfDay();
        org.joda.time.DurationFieldType durationFieldType13 = org.joda.time.DurationFieldType.centuries();
        boolean boolean14 = localDateTime11.equals((java.lang.Object) durationFieldType13);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime11.withWeekOfWeekyear((int) (byte) 10);
        int int17 = localDateTime16.getDayOfYear();
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.LocalDateTime localDateTime19 = localDateTime16.plus(readablePeriod18);
        org.joda.time.Chronology chronology20 = localDateTime19.getChronology();
        org.joda.time.DateTimeField dateTimeField21 = chronology20.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str25 = dateTimeZone23.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime26 = org.joda.time.LocalDateTime.now(dateTimeZone23);
        org.joda.time.LocalDateTime.Property property27 = localDateTime26.millisOfDay();
        long long28 = property27.remainder();
        int int29 = property27.getMinimumValueOverall();
        java.util.Locale.Category category30 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale31 = java.util.Locale.FRENCH;
        java.util.Locale.setDefault(category30, locale31);
        java.lang.String str33 = locale31.getDisplayName();
        int int34 = property27.getMaximumShortTextLength(locale31);
        java.lang.String str35 = dateTimeField21.getAsShortText(1645629512923L, locale31);
        java.util.Set<java.lang.String> strSet36 = locale31.getUnicodeLocaleKeys();
        java.util.Locale.setDefault(category0, locale31);
        org.joda.time.tz.NameProvider nameProvider38 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale.Category category39 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale40 = java.util.Locale.FRENCH;
        java.util.Locale.setDefault(category39, locale40);
        java.lang.String str42 = locale40.toLanguageTag();
        java.lang.String str43 = locale40.getLanguage();
        java.lang.String str46 = nameProvider38.getShortName(locale40, "days", "26149261");
        org.joda.time.DateTimeZone.setNameProvider(nameProvider38);
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str50 = dateTimeZone48.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime51 = org.joda.time.LocalDateTime.now(dateTimeZone48);
        org.joda.time.LocalDateTime.Property property52 = localDateTime51.millisOfDay();
        org.joda.time.LocalDateTime localDateTime54 = localDateTime51.withYear((int) (short) 100);
        org.joda.time.LocalDateTime.Property property55 = localDateTime54.minuteOfHour();
        int int56 = property55.get();
        java.util.Locale locale57 = java.util.Locale.GERMANY;
        java.lang.String str58 = locale57.getDisplayCountry();
        int int59 = property55.getMaximumShortTextLength(locale57);
        java.lang.String str62 = nameProvider38.getName(locale57, "26260840", "2022-02-22T07:18:41.340");
        java.util.Locale.Builder builder63 = new java.util.Locale.Builder();
        java.util.Locale locale64 = builder63.build();
        java.lang.String str67 = nameProvider38.getShortName(locale64, "26298434", "26300204");
        java.util.Locale locale68 = java.util.Locale.ENGLISH;
        java.util.Set<java.lang.String> strSet69 = locale68.getUnicodeLocaleAttributes();
        java.util.Locale locale70 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str71 = locale70.getVariant();
        java.lang.String str72 = locale68.getDisplayVariant(locale70);
        java.lang.String str75 = nameProvider38.getName(locale70, "2022-02-22T07:20:33.669", "1979");
        java.util.Locale.setDefault(category0, locale70);
        java.util.Locale locale77 = java.util.Locale.getDefault(category0);
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "fr");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "");
        org.junit.Assert.assertNotNull(dateTimeZone8);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+07:10:22.088" + "'", str10, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(durationFieldType13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 67 + "'", int17 == 67);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeZone23);
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "+07:10:22.088" + "'", str25, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + category30 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category30.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "fran\347ais" + "'", str33, "fran\347ais");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 8 + "'", int34 == 8);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "15" + "'", str35, "15");
        org.junit.Assert.assertNotNull(strSet36);
        org.junit.Assert.assertNotNull(nameProvider38);
        org.junit.Assert.assertTrue("'" + category39 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category39.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "fr" + "'", str42, "fr");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "fr" + "'", str43, "fr");
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNotNull(dateTimeZone48);
// flaky:         org.junit.Assert.assertEquals("'" + str50 + "' != '" + "+07:10:22.088" + "'", str50, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(property55);
// flaky:         org.junit.Assert.assertTrue("'" + int56 + "' != '" + 33 + "'", int56 == 33);
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "Allemagne" + "'", str58, "Allemagne");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 2 + "'", int59 == 2);
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "");
        org.junit.Assert.assertNull(str67);
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "en");
        org.junit.Assert.assertNotNull(strSet69);
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
        org.junit.Assert.assertNull(str75);
        org.junit.Assert.assertNotNull(locale77);
        org.junit.Assert.assertEquals(locale77.toString(), "zh_TW");
    }

    @Test
    public void test10228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10228");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DateTimeField dateTimeField3 = chronology2.dayOfYear();
        org.joda.time.DateTimeField dateTimeField4 = chronology2.millisOfDay();
        org.joda.time.DateTimeField dateTimeField5 = chronology2.yearOfCentury();
        java.lang.String str6 = chronology2.toString();
        org.joda.time.DurationField durationField7 = chronology2.centuries();
        // The following exception was thrown during execution in test generation
        try {
            long long10 = durationField7.getMillis(1645629555815L, (-17531631L));
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Value cannot fit in an int: 164562955581500");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "ISOChronology[UTC]" + "'", str6, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField7);
    }

    @Test
    public void test10229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10229");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DateTimeField dateTimeField3 = chronology2.dayOfYear();
        org.joda.time.DateTimeField dateTimeField4 = chronology2.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone5 = chronology2.getZone();
        org.joda.time.DateTimeField dateTimeField6 = chronology2.dayOfWeek();
        long long8 = dateTimeField6.roundFloor(52L);
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology12 = localDateTime11.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.dayOfYear();
        org.joda.time.DateTimeField dateTimeField14 = chronology12.millisOfDay();
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime();
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.LocalDateTime localDateTime19 = localDateTime16.withDurationAdded(readableDuration17, (int) '#');
        org.joda.time.LocalDateTime.Property property20 = localDateTime19.centuryOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateTimeField dateTimeField23 = dateTimeFieldType21.getField(chronology22);
        java.util.Locale locale25 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale26 = locale25.stripExtensions();
        java.lang.String str27 = dateTimeField23.getAsShortText(100, locale26);
        int int28 = property20.getMaximumShortTextLength(locale26);
        java.lang.String str29 = dateTimeField14.getAsShortText(1645629361507L, locale26);
        java.lang.String str30 = dateTimeField6.getAsText(1645629386304L, locale26);
        java.util.Set<java.lang.String> strSet31 = locale26.getUnicodeLocaleAttributes();
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "100" + "'", str27, "100");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 7 + "'", int28 == 7);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "54961507" + "'", str29, "54961507");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "mercredi" + "'", str30, "mercredi");
        org.junit.Assert.assertNotNull(strSet31);
    }

    @Test
    public void test10230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10230");
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology3 = localDateTime2.getChronology();
        org.joda.time.DurationField durationField4 = chronology3.weekyears();
        org.joda.time.DurationField durationField5 = chronology3.centuries();
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime((long) (byte) 0, chronology3);
        org.joda.time.DateTimeField dateTimeField7 = chronology3.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField8 = chronology3.clockhourOfHalfday();
        long long12 = chronology3.add((long) 1970, (-4838399947L), 292278993);
        org.joda.time.DateTimeField dateTimeField13 = chronology3.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField14 = chronology3.centuryOfEra();
        int int16 = dateTimeField14.getMaximumValue((-1209599395L));
        long long19 = dateTimeField14.add(134L, 0L);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1414162664240411401L) + "'", long12 == (-1414162664240411401L));
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2922789 + "'", int16 == 2922789);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 134L + "'", long19 == 134L);
    }

    @Test
    public void test10231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10231");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.plusMillis((-457106));
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType4 = localDateTime0.getFieldType(43);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 43");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
    }

    @Test
    public void test10232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10232");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        org.joda.time.LocalDateTime localDateTime3 = localDateTime0.withDurationAdded(readableDuration1, (int) '#');
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.weekyear();
        org.joda.time.LocalDateTime localDateTime5 = property4.roundHalfFloorCopy();
        java.util.Locale locale9 = new java.util.Locale("2022-02-22T07:16:13.657", "0100-02-22T07:16:04.074", "2022-02-22T07:16:14.450");
        java.util.Set<java.lang.String> strSet10 = locale9.getUnicodeLocaleAttributes();
        int int11 = property4.getMaximumShortTextLength(locale9);
        java.lang.String str12 = locale9.toLanguageTag();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertEquals(locale9.toString(), "2022-02-22t07:16:13.657_0100-02-22T07:16:04.074_2022-02-22T07:16:14.450");
        org.junit.Assert.assertNotNull(strSet10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 9 + "'", int11 == 9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "und" + "'", str12, "und");
    }

    @Test
    public void test10233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10233");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.millisOfDay();
        java.lang.String str5 = property4.getName();
        int int6 = property4.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime();
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.LocalDateTime localDateTime10 = localDateTime7.withDurationAdded(readableDuration8, (int) '#');
        org.joda.time.LocalDateTime.Property property11 = localDateTime10.weekyear();
        int int12 = property11.getMaximumValue();
        org.joda.time.DateTimeField dateTimeField13 = property11.getField();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str16 = dateTimeZone14.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime17 = org.joda.time.LocalDateTime.now(dateTimeZone14);
        org.joda.time.LocalDateTime.Property property18 = localDateTime17.millisOfDay();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime17.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime17.plusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.minusHours((int) (short) 10);
        int int25 = dateTimeField13.getMinimumValue((org.joda.time.ReadablePartial) localDateTime24);
        java.lang.String str27 = dateTimeField13.getAsText((long) (-292275054));
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str30 = dateTimeZone28.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime31 = org.joda.time.LocalDateTime.now(dateTimeZone28);
        org.joda.time.LocalDateTime.Property property32 = localDateTime31.millisOfDay();
        org.joda.time.ReadableInstant readableInstant33 = null;
        long long34 = property32.getDifferenceAsLong(readableInstant33);
        java.util.Locale locale35 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str36 = locale35.getISO3Language();
        java.lang.String str37 = property32.getAsShortText(locale35);
        int int38 = dateTimeField13.getMaximumShortTextLength(locale35);
        long long40 = dateTimeField13.roundHalfFloor(0L);
        java.util.Locale locale42 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale43 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str44 = locale42.getDisplayCountry(locale43);
        java.lang.String str45 = locale43.getDisplayName();
        java.lang.String str46 = dateTimeField13.getAsText(19, locale43);
        int int47 = property4.getMaximumTextLength(locale43);
        org.joda.time.LocalDateTime localDateTime48 = property4.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime49 = property4.roundCeilingCopy();
        org.joda.time.LocalDateTime localDateTime50 = property4.roundHalfCeilingCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType52 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.DateTimeField dateTimeField54 = dateTimeFieldType52.getField(chronology53);
        java.util.Locale locale56 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale57 = locale56.stripExtensions();
        java.lang.String str58 = dateTimeField54.getAsShortText(100, locale57);
        int int60 = dateTimeField54.getLeapAmount((long) (short) 100);
        java.lang.String str61 = dateTimeField54.getName();
        org.joda.time.DateTimeFieldType dateTimeFieldType62 = dateTimeField54.getType();
        org.joda.time.DateTimeZone dateTimeZone63 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str65 = dateTimeZone63.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime66 = org.joda.time.LocalDateTime.now(dateTimeZone63);
        org.joda.time.LocalDateTime.Property property67 = localDateTime66.millisOfDay();
        org.joda.time.LocalDateTime localDateTime69 = localDateTime66.withYear((int) (short) 100);
        org.joda.time.LocalDateTime.Property property70 = localDateTime69.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime72 = localDateTime69.minusMonths(2022);
        org.joda.time.LocalDateTime localDateTime74 = localDateTime72.withMinuteOfHour((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime76 = localDateTime72.plusWeeks((int) 'x');
        org.joda.time.LocalDateTime localDateTime78 = localDateTime72.withWeekyear(24);
        org.joda.time.LocalDateTime localDateTime80 = localDateTime72.minusSeconds((int) (byte) 1);
        java.util.Locale locale81 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet82 = locale81.getUnicodeLocaleAttributes();
        java.lang.String str83 = dateTimeField54.getAsText((org.joda.time.ReadablePartial) localDateTime80, locale81);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str84 = localDateTime50.toString("2022-02-22T07:20:30.124", locale81);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: T");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+07:10:22.088" + "'", str2, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "millisOfDay" + "'", str5, "millisOfDay");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 86399999 + "'", int6 == 86399999);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 292278993 + "'", int12 == 292278993);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+07:10:22.088" + "'", str16, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-292275054) + "'", int25 == (-292275054));
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "1969" + "'", str27, "1969");
        org.junit.Assert.assertNotNull(dateTimeZone28);
// flaky:         org.junit.Assert.assertEquals("'" + str30 + "' != '" + "+07:10:22.088" + "'", str30, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(property32);
// flaky:         org.junit.Assert.assertTrue("'" + long34 + "' != '" + 25822088L + "'", long34 == 25822088L);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "fra" + "'", str36, "fra");
// flaky:         org.junit.Assert.assertEquals("'" + str37 + "' != '" + "52430658" + "'", str37, "52430658");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 9 + "'", int38 == 9);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + (-259200000L) + "'", long40 == (-259200000L));
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Canada" + "'", str44, "Canada");
// flaky:         org.junit.Assert.assertEquals("'" + str45 + "' != '" + "French (Canada)" + "'", str45, "French (Canada)");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "19" + "'", str46, "19");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 8 + "'", int47 == 8);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(dateTimeFieldType52);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "100" + "'", str58, "100");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "minuteOfDay" + "'", str61, "minuteOfDay");
        org.junit.Assert.assertNotNull(dateTimeFieldType62);
        org.junit.Assert.assertNotNull(dateTimeZone63);
// flaky:         org.junit.Assert.assertEquals("'" + str65 + "' != '" + "+07:10:22.088" + "'", str65, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertNotNull(property67);
        org.junit.Assert.assertNotNull(localDateTime69);
        org.junit.Assert.assertNotNull(property70);
        org.junit.Assert.assertNotNull(localDateTime72);
        org.junit.Assert.assertNotNull(localDateTime74);
        org.junit.Assert.assertNotNull(localDateTime76);
        org.junit.Assert.assertNotNull(localDateTime78);
        org.junit.Assert.assertNotNull(localDateTime80);
        org.junit.Assert.assertNotNull(locale81);
        org.junit.Assert.assertEquals(locale81.toString(), "");
        org.junit.Assert.assertNotNull(strSet82);
// flaky:         org.junit.Assert.assertEquals("'" + str83 + "' != '" + "873" + "'", str83, "873");
    }

    @Test
    public void test10234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10234");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.millisOfDay();
        org.joda.time.DurationFieldType durationFieldType5 = org.joda.time.DurationFieldType.days();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime3.withFieldAdded(durationFieldType5, 26149500);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime3.minusHours((int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DurationFieldType durationFieldType11 = dateTimeFieldType10.getDurationType();
        boolean boolean12 = localDateTime9.isSupported(dateTimeFieldType10);
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology15 = localDateTime14.getChronology();
        org.joda.time.DurationField durationField16 = chronology15.weekyears();
        org.joda.time.DateTimeField dateTimeField17 = chronology15.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField18 = chronology15.secondOfDay();
        org.joda.time.DateTimeField dateTimeField19 = chronology15.dayOfYear();
        org.joda.time.DateTimeField dateTimeField20 = chronology15.clockhourOfDay();
        boolean boolean21 = dateTimeFieldType10.isSupported(chronology15);
        org.joda.time.DateTimeField dateTimeField22 = chronology15.clockhourOfHalfday();
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        long long26 = chronology15.add(readablePeriod23, 6098069028283200000L, 439);
        org.junit.Assert.assertNotNull(dateTimeZone0);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+07:10:22.088" + "'", str2, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(durationFieldType5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertNotNull(durationFieldType11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 6098069028283200000L + "'", long26 == 6098069028283200000L);
    }

    @Test
    public void test10235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10235");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getShortName((long) (short) 10);
        long long4 = dateTimeZone0.convertUTCToLocal((long) ' ');
        java.lang.String str5 = dateTimeZone0.toString();
        boolean boolean7 = dateTimeZone0.equals((java.lang.Object) (short) 100);
        java.util.Locale locale9 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str10 = dateTimeZone0.getShortName((long) (-1), locale9);
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime11.withField(dateTimeFieldType12, (int) (short) 100);
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology17 = localDateTime16.getChronology();
        org.joda.time.DurationField durationField18 = chronology17.weekyears();
        org.joda.time.DurationField durationField19 = chronology17.centuries();
        org.joda.time.DateTimeField dateTimeField20 = chronology17.minuteOfDay();
        long long24 = chronology17.add((long) 2, (long) 21, (int) '4');
        boolean boolean25 = dateTimeFieldType12.isSupported(chronology17);
        java.lang.Class<?> wildcardClass26 = dateTimeFieldType12.getClass();
        org.junit.Assert.assertNotNull(dateTimeZone0);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+07:10:22.088" + "'", str2, "+07:10:22.088");
// flaky:         org.junit.Assert.assertTrue("'" + long4 + "' != '" + 25822120L + "'", long4 == 25822120L);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+07:10:22.088" + "'", str5, "+07:10:22.088");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "fr_CA");
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+07:10:22.088" + "'", str10, "+07:10:22.088");
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 1094L + "'", long24 == 1094L);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(wildcardClass26);
    }

    @Test
    public void test10236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10236");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("hours");
        java.lang.String str2 = languageRange1.getRange();
        java.util.Locale.LanguageRange[] languageRangeArray3 = new java.util.Locale.LanguageRange[] { languageRange1 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList4 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList4, languageRangeArray3);
        java.util.Locale.LanguageRange[] languageRangeArray6 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList7 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList7, languageRangeArray6);
        java.util.Locale locale9 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale10 = java.util.Locale.CANADA;
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str13 = dateTimeZone11.getShortName((long) (short) 10);
        long long15 = dateTimeZone11.convertUTCToLocal((long) ' ');
        java.lang.String str16 = dateTimeZone11.toString();
        boolean boolean18 = dateTimeZone11.equals((java.lang.Object) (short) 100);
        java.util.Locale locale20 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str21 = dateTimeZone11.getShortName((long) (-1), locale20);
        java.util.Locale locale22 = java.util.Locale.CANADA;
        java.util.Locale locale23 = java.util.Locale.FRENCH;
        java.util.Locale[] localeArray24 = new java.util.Locale[] { locale9, locale10, locale20, locale22, locale23 };
        java.util.ArrayList<java.util.Locale> localeList25 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList25, localeArray24);
        java.util.Locale locale27 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList7, (java.util.Collection<java.util.Locale>) localeList25);
        java.util.Locale locale28 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet29 = locale28.getUnicodeLocaleAttributes();
        java.lang.Object[] objArray30 = strSet29.toArray();
        java.util.List<java.lang.String> strList31 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList7, (java.util.Collection<java.lang.String>) strSet29);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap32 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList33 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList7, strMap32);
        java.util.Collection<java.lang.String> strCollection34 = null;
        java.util.Locale.FilteringMode filteringMode35 = java.util.Locale.FilteringMode.AUTOSELECT_FILTERING;
        java.util.List<java.lang.String> strList36 = java.util.Locale.filterTags(languageRangeList33, strCollection34, filteringMode35);
        java.util.List<java.lang.String> strList37 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList4, (java.util.Collection<java.lang.String>) strList36);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap38 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList39 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList4, strMap38);
        java.util.Locale locale40 = java.util.Locale.US;
        java.util.Set<java.lang.String> strSet41 = locale40.getUnicodeLocaleKeys();
        java.util.List<java.lang.String> strList42 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList4, (java.util.Collection<java.lang.String>) strSet41);
        java.util.Locale.LanguageRange[] languageRangeArray43 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList44 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList44, languageRangeArray43);
        java.util.Locale locale46 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale47 = java.util.Locale.CANADA;
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str50 = dateTimeZone48.getShortName((long) (short) 10);
        long long52 = dateTimeZone48.convertUTCToLocal((long) ' ');
        java.lang.String str53 = dateTimeZone48.toString();
        boolean boolean55 = dateTimeZone48.equals((java.lang.Object) (short) 100);
        java.util.Locale locale57 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str58 = dateTimeZone48.getShortName((long) (-1), locale57);
        java.util.Locale locale59 = java.util.Locale.CANADA;
        java.util.Locale locale60 = java.util.Locale.FRENCH;
        java.util.Locale[] localeArray61 = new java.util.Locale[] { locale46, locale47, locale57, locale59, locale60 };
        java.util.ArrayList<java.util.Locale> localeList62 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList62, localeArray61);
        java.util.Locale locale64 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList44, (java.util.Collection<java.util.Locale>) localeList62);
        java.util.Collection<java.lang.String> strCollection65 = null;
        java.util.List<java.lang.String> strList66 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList44, strCollection65);
        java.util.Collection<java.lang.String> strCollection67 = null;
        java.lang.String str68 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList44, strCollection67);
        java.util.Locale.LanguageRange languageRange70 = new java.util.Locale.LanguageRange("hours");
        java.util.Locale.LanguageRange[] languageRangeArray71 = new java.util.Locale.LanguageRange[] { languageRange70 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList72 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean73 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList72, languageRangeArray71);
        java.util.Locale.LanguageRange[] languageRangeArray74 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList75 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean76 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList75, languageRangeArray74);
        java.util.Locale locale77 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale78 = java.util.Locale.CANADA;
        org.joda.time.DateTimeZone dateTimeZone79 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str81 = dateTimeZone79.getShortName((long) (short) 10);
        long long83 = dateTimeZone79.convertUTCToLocal((long) ' ');
        java.lang.String str84 = dateTimeZone79.toString();
        boolean boolean86 = dateTimeZone79.equals((java.lang.Object) (short) 100);
        java.util.Locale locale88 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str89 = dateTimeZone79.getShortName((long) (-1), locale88);
        java.util.Locale locale90 = java.util.Locale.CANADA;
        java.util.Locale locale91 = java.util.Locale.FRENCH;
        java.util.Locale[] localeArray92 = new java.util.Locale[] { locale77, locale78, locale88, locale90, locale91 };
        java.util.ArrayList<java.util.Locale> localeList93 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean94 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList93, localeArray92);
        java.util.Locale locale95 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList75, (java.util.Collection<java.util.Locale>) localeList93);
        java.util.List<java.util.Locale> localeList96 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList72, (java.util.Collection<java.util.Locale>) localeList93);
        java.util.Locale locale97 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList44, (java.util.Collection<java.util.Locale>) localeList93);
        java.util.List<java.util.Locale> localeList98 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList4, (java.util.Collection<java.util.Locale>) localeList93);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hours" + "'", str2, "hours");
        org.junit.Assert.assertNotNull(languageRangeArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(languageRangeArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "en_CA");
        org.junit.Assert.assertNotNull(dateTimeZone11);
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+07:10:22.088" + "'", str13, "+07:10:22.088");
// flaky:         org.junit.Assert.assertTrue("'" + long15 + "' != '" + 25822120L + "'", long15 == 25822120L);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+07:10:22.088" + "'", str16, "+07:10:22.088");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "fr_CA");
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "+07:10:22.088" + "'", str21, "+07:10:22.088");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "fr");
        org.junit.Assert.assertNotNull(localeArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNull(locale27);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "");
        org.junit.Assert.assertNotNull(strSet29);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[]");
        org.junit.Assert.assertNotNull(strList31);
        org.junit.Assert.assertNotNull(languageRangeList33);
        org.junit.Assert.assertTrue("'" + filteringMode35 + "' != '" + java.util.Locale.FilteringMode.AUTOSELECT_FILTERING + "'", filteringMode35.equals(java.util.Locale.FilteringMode.AUTOSELECT_FILTERING));
        org.junit.Assert.assertNotNull(strList36);
        org.junit.Assert.assertNotNull(strList37);
        org.junit.Assert.assertNotNull(languageRangeList39);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "en_US");
        org.junit.Assert.assertNotNull(strSet41);
        org.junit.Assert.assertNotNull(strList42);
        org.junit.Assert.assertNotNull(languageRangeArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "en_CA");
        org.junit.Assert.assertNotNull(dateTimeZone48);
// flaky:         org.junit.Assert.assertEquals("'" + str50 + "' != '" + "+07:10:22.088" + "'", str50, "+07:10:22.088");
// flaky:         org.junit.Assert.assertTrue("'" + long52 + "' != '" + 25822120L + "'", long52 == 25822120L);
// flaky:         org.junit.Assert.assertEquals("'" + str53 + "' != '" + "+07:10:22.088" + "'", str53, "+07:10:22.088");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "fr_CA");
// flaky:         org.junit.Assert.assertEquals("'" + str58 + "' != '" + "+07:10:22.088" + "'", str58, "+07:10:22.088");
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "fr");
        org.junit.Assert.assertNotNull(localeArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNull(locale64);
        org.junit.Assert.assertNotNull(strList66);
        org.junit.Assert.assertNull(str68);
        org.junit.Assert.assertNotNull(languageRangeArray71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(languageRangeArray74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(locale77);
        org.junit.Assert.assertEquals(locale77.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale78);
        org.junit.Assert.assertEquals(locale78.toString(), "en_CA");
        org.junit.Assert.assertNotNull(dateTimeZone79);
// flaky:         org.junit.Assert.assertEquals("'" + str81 + "' != '" + "+07:10:22.088" + "'", str81, "+07:10:22.088");
// flaky:         org.junit.Assert.assertTrue("'" + long83 + "' != '" + 25822120L + "'", long83 == 25822120L);
// flaky:         org.junit.Assert.assertEquals("'" + str84 + "' != '" + "+07:10:22.088" + "'", str84, "+07:10:22.088");
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(locale88);
        org.junit.Assert.assertEquals(locale88.toString(), "fr_CA");
// flaky:         org.junit.Assert.assertEquals("'" + str89 + "' != '" + "+07:10:22.088" + "'", str89, "+07:10:22.088");
        org.junit.Assert.assertNotNull(locale90);
        org.junit.Assert.assertEquals(locale90.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale91);
        org.junit.Assert.assertEquals(locale91.toString(), "fr");
        org.junit.Assert.assertNotNull(localeArray92);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
        org.junit.Assert.assertNull(locale95);
        org.junit.Assert.assertNotNull(localeList96);
        org.junit.Assert.assertNull(locale97);
        org.junit.Assert.assertNotNull(localeList98);
    }

    @Test
    public void test10237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10237");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DateTimeField dateTimeField3 = chronology2.halfdayOfDay();
        org.joda.time.DurationField durationField4 = dateTimeField3.getRangeDurationField();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str7 = dateTimeZone5.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime8 = org.joda.time.LocalDateTime.now(dateTimeZone5);
        org.joda.time.LocalDateTime.Property property9 = localDateTime8.millisOfDay();
        java.lang.String str10 = property9.getName();
        org.joda.time.LocalDateTime localDateTime11 = property9.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.plusYears((int) (short) -1);
        int[] intArray21 = new int[] { 'a', (-1), 10, 26151696, 4, (byte) 1 };
        int[] intArray23 = dateTimeField3.set((org.joda.time.ReadablePartial) localDateTime11, 0, intArray21, (int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str26 = dateTimeZone24.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime27 = org.joda.time.LocalDateTime.now(dateTimeZone24);
        org.joda.time.LocalDateTime.Property property28 = localDateTime27.millisOfDay();
        org.joda.time.LocalDateTime localDateTime30 = localDateTime27.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime27.plusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime34 = localDateTime32.minusHours((int) (short) 10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray35 = localDateTime32.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime37 = localDateTime32.withMillisOfDay((int) '4');
        boolean boolean38 = localDateTime11.isBefore((org.joda.time.ReadablePartial) localDateTime32);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime32.minusMinutes(2922789);
        org.joda.time.LocalDateTime.Property property41 = localDateTime40.dayOfWeek();
        int int42 = localDateTime40.getYear();
        int int43 = localDateTime40.getSecondOfMinute();
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+07:10:22.088" + "'", str7, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "millisOfDay" + "'", str10, "millisOfDay");
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[0, 1, 10, 26151696, 4, 1]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[0, 1, 10, 26151696, 4, 1]");
        org.junit.Assert.assertNotNull(dateTimeZone24);
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "+07:10:22.088" + "'", str26, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2016 + "'", int42 == 2016);
// flaky:         org.junit.Assert.assertTrue("'" + int43 + "' != '" + 50 + "'", int43 == 50);
    }

    @Test
    public void test10238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10238");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.millisOfDay();
        org.joda.time.ReadableInstant readableInstant5 = null;
        long long6 = property4.getDifferenceAsLong(readableInstant5);
        java.util.Locale locale7 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str8 = locale7.getISO3Language();
        java.lang.String str9 = property4.getAsShortText(locale7);
        org.joda.time.DurationField durationField10 = property4.getDurationField();
        long long13 = durationField10.add((long) 1, 10);
        boolean boolean14 = durationField10.isPrecise();
        int int16 = durationField10.getValue((long) 26149500);
        int int19 = durationField10.getValue((long) (short) 10, 0L);
        long long22 = durationField10.add((long) 'a', (long) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType23 = durationField10.getType();
        org.joda.time.DurationFieldType durationFieldType24 = org.joda.time.DurationFieldType.weekyears();
        java.lang.String str25 = durationFieldType24.toString();
        org.joda.time.DurationFieldType durationFieldType26 = org.joda.time.DurationFieldType.millis();
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology29 = localDateTime28.getChronology();
        org.joda.time.DurationField durationField30 = chronology29.weekyears();
        org.joda.time.DurationField durationField31 = chronology29.centuries();
        org.joda.time.DurationField durationField32 = durationFieldType26.getField(chronology29);
        boolean boolean33 = durationFieldType24.isSupported(chronology29);
        org.joda.time.DateTimeField dateTimeField34 = chronology29.year();
        org.joda.time.DateTimeField dateTimeField35 = chronology29.minuteOfHour();
        org.joda.time.DurationField durationField36 = durationFieldType23.getField(chronology29);
        org.joda.time.DateTimeField dateTimeField37 = chronology29.dayOfMonth();
        long long39 = dateTimeField37.roundHalfCeiling((-98737770770099605L));
        org.junit.Assert.assertNotNull(dateTimeZone0);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+07:10:22.088" + "'", str2, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
// flaky:         org.junit.Assert.assertTrue("'" + long6 + "' != '" + 25822088L + "'", long6 == 25822088L);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "fra" + "'", str8, "fra");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "52430812" + "'", str9, "52430812");
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 11L + "'", long13 == 11L);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 26149500 + "'", int16 == 26149500);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10 + "'", int19 == 10);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 197L + "'", long22 == 197L);
        org.junit.Assert.assertNotNull(durationFieldType23);
        org.junit.Assert.assertNotNull(durationFieldType24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "weekyears" + "'", str25, "weekyears");
        org.junit.Assert.assertNotNull(durationFieldType26);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + (-98737770787200000L) + "'", long39 == (-98737770787200000L));
    }

    @Test
    public void test10239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10239");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DurationField durationField3 = chronology2.weekyears();
        org.joda.time.DurationField durationField4 = chronology2.centuries();
        org.joda.time.DurationField durationField5 = chronology2.minutes();
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime(chronology2);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str9 = dateTimeZone7.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime10 = org.joda.time.LocalDateTime.now(dateTimeZone7);
        org.joda.time.LocalDateTime.Property property11 = localDateTime10.millisOfDay();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime10.withYear((int) (short) 100);
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime13.minusMonths(2022);
        int int17 = localDateTime13.getDayOfMonth();
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.dayOfMonth();
        boolean boolean19 = localDateTime13.equals((java.lang.Object) dateTimeFieldType18);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime13.plusHours(26163523);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime13.withDayOfMonth((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.minusYears((int) 'x');
        org.joda.time.LocalDateTime localDateTime27 = localDateTime23.minusMillis(26224);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime6.withFields((org.joda.time.ReadablePartial) localDateTime27);
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime(100L);
        org.joda.time.LocalDateTime.Property property33 = localDateTime32.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime35 = localDateTime32.plusSeconds(9);
        org.joda.time.LocalDateTime.Property property36 = localDateTime32.weekyear();
        org.joda.time.DateTime dateTime37 = localDateTime32.toDateTime();
        int int38 = dateTimeZone30.getOffset((org.joda.time.ReadableInstant) dateTime37);
        long long40 = dateTimeZone30.previousTransition((-1645629363406L));
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime27, dateTimeZone30);
        long long44 = dateTimeZone30.adjustOffset(1645629730053L, false);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeZone7);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+07:10:22.088" + "'", str9, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 22 + "'", int17 == 22);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + (-1645629363406L) + "'", long40 == (-1645629363406L));
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 1645629730053L + "'", long44 == 1645629730053L);
    }

    @Test
    public void test10240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10240");
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology3 = localDateTime2.getChronology();
        org.joda.time.DurationField durationField4 = chronology3.weekyears();
        org.joda.time.DurationField durationField5 = chronology3.centuries();
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime((long) (byte) 0, chronology3);
        org.joda.time.DateTimeField dateTimeField7 = chronology3.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField8 = chronology3.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField9 = chronology3.millisOfDay();
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
    }

    @Test
    public void test10241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10241");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getShortName((long) (short) 10);
        long long4 = dateTimeZone0.convertUTCToLocal((long) ' ');
        java.lang.String str5 = dateTimeZone0.toString();
        boolean boolean7 = dateTimeZone0.equals((java.lang.Object) (short) 100);
        java.util.Locale locale9 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str10 = dateTimeZone0.getShortName((long) (-1), locale9);
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime11.withField(dateTimeFieldType12, (int) (short) 100);
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology17 = localDateTime16.getChronology();
        org.joda.time.DurationField durationField18 = chronology17.weekyears();
        org.joda.time.DurationField durationField19 = chronology17.centuries();
        org.joda.time.DateTimeField dateTimeField20 = chronology17.minuteOfDay();
        long long24 = chronology17.add((long) 2, (long) 21, (int) '4');
        boolean boolean25 = dateTimeFieldType12.isSupported(chronology17);
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str28 = dateTimeZone26.getShortName((long) (short) 10);
        long long30 = dateTimeZone26.convertUTCToLocal((long) ' ');
        java.lang.String str31 = dateTimeZone26.toString();
        long long33 = dateTimeZone26.previousTransition(32L);
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime(dateTimeZone26);
        org.joda.time.Chronology chronology35 = chronology17.withZone(dateTimeZone26);
        java.lang.String str37 = dateTimeZone26.getName(1908342976251L);
        int int39 = dateTimeZone26.getOffsetFromLocal(1645629370103L);
        int int41 = dateTimeZone26.getOffset(404L);
        org.joda.time.LocalDateTime localDateTime42 = org.joda.time.LocalDateTime.now(dateTimeZone26);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime44 = localDateTime42.withDayOfWeek(23);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 23 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+07:10:22.088" + "'", str2, "+07:10:22.088");
// flaky:         org.junit.Assert.assertTrue("'" + long4 + "' != '" + 25822120L + "'", long4 == 25822120L);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+07:10:22.088" + "'", str5, "+07:10:22.088");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "fr_CA");
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+07:10:22.088" + "'", str10, "+07:10:22.088");
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 1094L + "'", long24 == 1094L);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(dateTimeZone26);
// flaky:         org.junit.Assert.assertEquals("'" + str28 + "' != '" + "+07:10:22.088" + "'", str28, "+07:10:22.088");
// flaky:         org.junit.Assert.assertTrue("'" + long30 + "' != '" + 25822120L + "'", long30 == 25822120L);
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "+07:10:22.088" + "'", str31, "+07:10:22.088");
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 32L + "'", long33 == 32L);
        org.junit.Assert.assertNotNull(chronology35);
// flaky:         org.junit.Assert.assertEquals("'" + str37 + "' != '" + "+07:10:22.088" + "'", str37, "+07:10:22.088");
// flaky:         org.junit.Assert.assertTrue("'" + int39 + "' != '" + 25822088 + "'", int39 == 25822088);
// flaky:         org.junit.Assert.assertTrue("'" + int41 + "' != '" + 25822088 + "'", int41 == 25822088);
        org.junit.Assert.assertNotNull(localDateTime42);
    }

    @Test
    public void test10242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10242");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 10);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plus(readablePeriod2);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.minusMonths(605);
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology8 = localDateTime7.getChronology();
        org.joda.time.DurationField durationField9 = chronology8.weekyears();
        org.joda.time.DurationField durationField10 = chronology8.centuries();
        org.joda.time.DurationField durationField11 = chronology8.minutes();
        org.joda.time.DateTimeField dateTimeField12 = chronology8.monthOfYear();
        org.joda.time.DateTimeField dateTimeField13 = chronology8.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField14 = chronology8.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField15 = chronology8.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField16 = chronology8.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField17 = chronology8.yearOfEra();
        org.joda.time.LocalDateTime localDateTime18 = org.joda.time.LocalDateTime.now(chronology8);
        boolean boolean19 = localDateTime5.isAfter((org.joda.time.ReadablePartial) localDateTime18);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str22 = dateTimeZone20.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime23 = org.joda.time.LocalDateTime.now(dateTimeZone20);
        org.joda.time.LocalDateTime.Property property24 = localDateTime23.millisOfDay();
        org.joda.time.ReadableInstant readableInstant25 = null;
        long long26 = property24.getDifferenceAsLong(readableInstant25);
        org.joda.time.DurationField durationField27 = property24.getLeapDurationField();
        java.lang.String str28 = property24.getAsString();
        org.joda.time.LocalDateTime localDateTime29 = property24.roundFloorCopy();
        java.util.Locale locale30 = java.util.Locale.ENGLISH;
        java.lang.String str31 = property24.getAsText(locale30);
        org.joda.time.LocalDateTime localDateTime32 = property24.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime();
        org.joda.time.ReadableDuration readableDuration34 = null;
        org.joda.time.LocalDateTime localDateTime36 = localDateTime33.withDurationAdded(readableDuration34, (int) '#');
        org.joda.time.LocalDateTime.Property property37 = localDateTime33.era();
        int int38 = localDateTime33.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime40 = localDateTime33.withWeekOfWeekyear((int) (byte) 1);
        int int41 = localDateTime33.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime43 = localDateTime33.plusDays(500);
        org.joda.time.DurationFieldType durationFieldType44 = org.joda.time.DurationFieldType.days();
        java.lang.String str45 = durationFieldType44.toString();
        boolean boolean46 = localDateTime43.isSupported(durationFieldType44);
        org.joda.time.LocalDateTime localDateTime49 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology50 = localDateTime49.getChronology();
        org.joda.time.DurationField durationField51 = chronology50.weekyears();
        org.joda.time.DurationField durationField52 = chronology50.centuries();
        org.joda.time.LocalDateTime localDateTime53 = new org.joda.time.LocalDateTime((long) (byte) 0, chronology50);
        org.joda.time.DurationField durationField54 = chronology50.millis();
        org.joda.time.DateTimeField dateTimeField55 = chronology50.minuteOfDay();
        org.joda.time.DurationField durationField56 = durationFieldType44.getField(chronology50);
        java.lang.String str57 = durationFieldType44.toString();
        boolean boolean58 = localDateTime32.isSupported(durationFieldType44);
        org.joda.time.LocalDateTime localDateTime60 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology61 = localDateTime60.getChronology();
        org.joda.time.DurationField durationField62 = chronology61.weekyears();
        org.joda.time.DurationField durationField63 = chronology61.centuries();
        org.joda.time.DurationField durationField64 = chronology61.minutes();
        org.joda.time.DateTimeField dateTimeField65 = chronology61.monthOfYear();
        org.joda.time.DateTimeField dateTimeField66 = chronology61.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField67 = chronology61.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField68 = chronology61.secondOfMinute();
        org.joda.time.DurationField durationField69 = durationFieldType44.getField(chronology61);
        boolean boolean70 = localDateTime18.isSupported(durationFieldType44);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(dateTimeZone20);
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+07:10:22.088" + "'", str22, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(property24);
// flaky:         org.junit.Assert.assertTrue("'" + long26 + "' != '" + 25822088L + "'", long26 == 25822088L);
        org.junit.Assert.assertNull(durationField27);
// flaky:         org.junit.Assert.assertEquals("'" + str28 + "' != '" + "52430887" + "'", str28, "52430887");
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "52430887" + "'", str31, "52430887");
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 22 + "'", int38 == 22);
        org.junit.Assert.assertNotNull(localDateTime40);
// flaky:         org.junit.Assert.assertTrue("'" + int41 + "' != '" + 14 + "'", int41 == 14);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(durationFieldType44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "days" + "'", str45, "days");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(durationField51);
        org.junit.Assert.assertNotNull(durationField52);
        org.junit.Assert.assertNotNull(durationField54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(durationField56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "days" + "'", str57, "days");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(durationField62);
        org.junit.Assert.assertNotNull(durationField63);
        org.junit.Assert.assertNotNull(durationField64);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertNotNull(durationField69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
    }

    @Test
    public void test10243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10243");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.millisOfDay();
        org.joda.time.DurationFieldType durationFieldType5 = org.joda.time.DurationFieldType.centuries();
        boolean boolean6 = localDateTime3.equals((java.lang.Object) durationFieldType5);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime3.withWeekOfWeekyear((int) (byte) 10);
        int int9 = localDateTime8.getDayOfYear();
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.LocalDateTime localDateTime11 = localDateTime8.plus(readablePeriod10);
        org.joda.time.Chronology chronology12 = localDateTime11.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.clockhourOfDay();
        int int15 = dateTimeField13.get(1645629612149L);
        long long17 = dateTimeField13.roundHalfFloor(1645514369624L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+07:10:22.088" + "'", str2, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(durationFieldType5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 67 + "'", int9 == 67);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 15 + "'", int15 == 15);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1645513200000L + "'", long17 == 1645513200000L);
    }

    @Test
    public void test10244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10244");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale1 = java.util.Locale.FRENCH;
        java.util.Locale.setDefault(category0, locale1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTimeField dateTimeField5 = dateTimeFieldType3.getField(chronology4);
        java.util.Locale locale7 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale8 = locale7.stripExtensions();
        java.lang.String str9 = dateTimeField5.getAsShortText(100, locale8);
        java.util.Locale.setDefault(category0, locale8);
        java.util.Locale locale11 = java.util.Locale.getDefault(category0);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str14 = dateTimeZone12.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime15 = org.joda.time.LocalDateTime.now(dateTimeZone12);
        org.joda.time.LocalDateTime.Property property16 = localDateTime15.millisOfDay();
        org.joda.time.DurationFieldType durationFieldType17 = org.joda.time.DurationFieldType.centuries();
        boolean boolean18 = localDateTime15.equals((java.lang.Object) durationFieldType17);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray19 = localDateTime15.getFieldTypes();
        java.lang.String str20 = localDateTime15.toString();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime15.plusMillis(22);
        org.joda.time.LocalDateTime.Property property23 = localDateTime15.monthOfYear();
        java.util.Locale locale24 = java.util.Locale.ROOT;
        int int25 = property23.getMaximumShortTextLength(locale24);
        java.lang.String str26 = locale11.getDisplayVariant(locale24);
        java.lang.String str27 = locale11.getDisplayCountry();
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "fr");
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "100" + "'", str9, "100");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(dateTimeZone12);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+07:10:22.088" + "'", str14, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(durationFieldType17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray19);
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "2022-02-22T14:33:50.933" + "'", str20, "2022-02-22T14:33:50.933");
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 3 + "'", int25 == 3);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Canada" + "'", str27, "Canada");
    }

    @Test
    public void test10245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10245");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Locale locale3 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale4 = java.util.Locale.CANADA;
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str7 = dateTimeZone5.getShortName((long) (short) 10);
        long long9 = dateTimeZone5.convertUTCToLocal((long) ' ');
        java.lang.String str10 = dateTimeZone5.toString();
        boolean boolean12 = dateTimeZone5.equals((java.lang.Object) (short) 100);
        java.util.Locale locale14 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str15 = dateTimeZone5.getShortName((long) (-1), locale14);
        java.util.Locale locale16 = java.util.Locale.CANADA;
        java.util.Locale locale17 = java.util.Locale.FRENCH;
        java.util.Locale[] localeArray18 = new java.util.Locale[] { locale3, locale4, locale14, locale16, locale17 };
        java.util.ArrayList<java.util.Locale> localeList19 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList19, localeArray18);
        java.util.Locale locale21 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.util.Locale>) localeList19);
        java.util.Locale locale22 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet23 = locale22.getUnicodeLocaleAttributes();
        java.lang.Object[] objArray24 = strSet23.toArray();
        java.util.Locale locale25 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet26 = locale25.getUnicodeLocaleAttributes();
        boolean boolean27 = strSet23.removeAll((java.util.Collection<java.lang.String>) strSet26);
        java.util.Locale locale28 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet29 = locale28.getUnicodeLocaleAttributes();
        org.joda.time.DurationFieldType durationFieldType30 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.DurationFieldType durationFieldType31 = org.joda.time.DurationFieldType.hours();
        org.joda.time.DurationFieldType[] durationFieldTypeArray32 = new org.joda.time.DurationFieldType[] { durationFieldType30, durationFieldType31 };
        org.joda.time.DurationFieldType[] durationFieldTypeArray33 = strSet29.toArray(durationFieldTypeArray32);
        boolean boolean34 = strSet23.containsAll((java.util.Collection<java.lang.String>) strSet29);
        java.util.Locale locale35 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet36 = locale35.getUnicodeLocaleAttributes();
        java.lang.Object[] objArray37 = strSet36.toArray();
        boolean boolean38 = strSet23.addAll((java.util.Collection<java.lang.String>) strSet36);
        java.lang.String str39 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet23);
        org.joda.time.tz.Provider provider40 = org.joda.time.DateTimeZone.getProvider();
        java.util.Set<java.lang.String> strSet41 = provider40.getAvailableIDs();
        java.util.Locale.LanguageRange[] languageRangeArray42 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList43 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList43, languageRangeArray42);
        java.util.Locale locale45 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale46 = java.util.Locale.CANADA;
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str49 = dateTimeZone47.getShortName((long) (short) 10);
        long long51 = dateTimeZone47.convertUTCToLocal((long) ' ');
        java.lang.String str52 = dateTimeZone47.toString();
        boolean boolean54 = dateTimeZone47.equals((java.lang.Object) (short) 100);
        java.util.Locale locale56 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str57 = dateTimeZone47.getShortName((long) (-1), locale56);
        java.util.Locale locale58 = java.util.Locale.CANADA;
        java.util.Locale locale59 = java.util.Locale.FRENCH;
        java.util.Locale[] localeArray60 = new java.util.Locale[] { locale45, locale46, locale56, locale58, locale59 };
        java.util.ArrayList<java.util.Locale> localeList61 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList61, localeArray60);
        java.util.Locale locale63 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList43, (java.util.Collection<java.util.Locale>) localeList61);
        java.util.Locale locale64 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet65 = locale64.getUnicodeLocaleAttributes();
        java.lang.Object[] objArray66 = strSet65.toArray();
        java.util.List<java.lang.String> strList67 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList43, (java.util.Collection<java.lang.String>) strSet65);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap68 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList69 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList43, strMap68);
        java.util.Collection<java.lang.String> strCollection70 = null;
        java.util.Locale.FilteringMode filteringMode71 = java.util.Locale.FilteringMode.AUTOSELECT_FILTERING;
        java.util.List<java.lang.String> strList72 = java.util.Locale.filterTags(languageRangeList69, strCollection70, filteringMode71);
        java.util.List<java.lang.String> strList73 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet41, filteringMode71);
        java.util.Locale locale74 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet75 = locale74.getUnicodeLocaleAttributes();
        java.lang.Object[] objArray76 = strSet75.toArray();
        java.util.Locale locale77 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet78 = locale77.getUnicodeLocaleAttributes();
        boolean boolean79 = strSet75.removeAll((java.util.Collection<java.lang.String>) strSet78);
        java.util.Locale locale80 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet81 = locale80.getUnicodeLocaleAttributes();
        org.joda.time.DurationFieldType durationFieldType82 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.DurationFieldType durationFieldType83 = org.joda.time.DurationFieldType.hours();
        org.joda.time.DurationFieldType[] durationFieldTypeArray84 = new org.joda.time.DurationFieldType[] { durationFieldType82, durationFieldType83 };
        org.joda.time.DurationFieldType[] durationFieldTypeArray85 = strSet81.toArray(durationFieldTypeArray84);
        boolean boolean86 = strSet75.containsAll((java.util.Collection<java.lang.String>) strSet81);
        boolean boolean87 = strSet41.removeAll((java.util.Collection<java.lang.String>) strSet75);
        java.util.Iterator<java.lang.String> strItor88 = strSet41.iterator();
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en_CA");
        org.junit.Assert.assertNotNull(dateTimeZone5);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+07:10:22.088" + "'", str7, "+07:10:22.088");
// flaky:         org.junit.Assert.assertTrue("'" + long9 + "' != '" + 25822120L + "'", long9 == 25822120L);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+07:10:22.088" + "'", str10, "+07:10:22.088");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "fr_CA");
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+07:10:22.088" + "'", str15, "+07:10:22.088");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "fr");
        org.junit.Assert.assertNotNull(localeArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNull(locale21);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "");
        org.junit.Assert.assertNotNull(strSet23);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[]");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "");
        org.junit.Assert.assertNotNull(strSet26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "");
        org.junit.Assert.assertNotNull(strSet29);
        org.junit.Assert.assertNotNull(durationFieldType30);
        org.junit.Assert.assertNotNull(durationFieldType31);
        org.junit.Assert.assertNotNull(durationFieldTypeArray32);
        org.junit.Assert.assertNotNull(durationFieldTypeArray33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "");
        org.junit.Assert.assertNotNull(strSet36);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNotNull(provider40);
        org.junit.Assert.assertNotNull(strSet41);
        org.junit.Assert.assertNotNull(languageRangeArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "en_CA");
        org.junit.Assert.assertNotNull(dateTimeZone47);
// flaky:         org.junit.Assert.assertEquals("'" + str49 + "' != '" + "+07:10:22.088" + "'", str49, "+07:10:22.088");
// flaky:         org.junit.Assert.assertTrue("'" + long51 + "' != '" + 25822120L + "'", long51 == 25822120L);
// flaky:         org.junit.Assert.assertEquals("'" + str52 + "' != '" + "+07:10:22.088" + "'", str52, "+07:10:22.088");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "fr_CA");
// flaky:         org.junit.Assert.assertEquals("'" + str57 + "' != '" + "+07:10:22.088" + "'", str57, "+07:10:22.088");
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "fr");
        org.junit.Assert.assertNotNull(localeArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNull(locale63);
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "");
        org.junit.Assert.assertNotNull(strSet65);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[]");
        org.junit.Assert.assertNotNull(strList67);
        org.junit.Assert.assertNotNull(languageRangeList69);
        org.junit.Assert.assertTrue("'" + filteringMode71 + "' != '" + java.util.Locale.FilteringMode.AUTOSELECT_FILTERING + "'", filteringMode71.equals(java.util.Locale.FilteringMode.AUTOSELECT_FILTERING));
        org.junit.Assert.assertNotNull(strList72);
        org.junit.Assert.assertNotNull(strList73);
        org.junit.Assert.assertNotNull(locale74);
        org.junit.Assert.assertEquals(locale74.toString(), "");
        org.junit.Assert.assertNotNull(strSet75);
        org.junit.Assert.assertNotNull(objArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray76), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray76), "[]");
        org.junit.Assert.assertNotNull(locale77);
        org.junit.Assert.assertEquals(locale77.toString(), "");
        org.junit.Assert.assertNotNull(strSet78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(locale80);
        org.junit.Assert.assertEquals(locale80.toString(), "");
        org.junit.Assert.assertNotNull(strSet81);
        org.junit.Assert.assertNotNull(durationFieldType82);
        org.junit.Assert.assertNotNull(durationFieldType83);
        org.junit.Assert.assertNotNull(durationFieldTypeArray84);
        org.junit.Assert.assertNotNull(durationFieldTypeArray85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(strItor88);
    }

    @Test
    public void test10246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10246");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeField dateTimeField2 = dateTimeFieldType0.getField(chronology1);
        java.util.Locale locale4 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale5 = locale4.stripExtensions();
        java.lang.String str6 = dateTimeField2.getAsShortText(100, locale5);
        int int8 = dateTimeField2.getLeapAmount((long) (short) 100);
        java.lang.String str9 = dateTimeField2.getName();
        long long12 = dateTimeField2.add((long) (short) 1, 0);
        int int14 = dateTimeField2.get((long) 86399999);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str17 = dateTimeZone15.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime18 = org.joda.time.LocalDateTime.now(dateTimeZone15);
        org.joda.time.LocalDateTime.Property property19 = localDateTime18.millisOfDay();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime18.withYear((int) (short) 100);
        org.joda.time.LocalDateTime.Property property22 = localDateTime21.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime24 = localDateTime21.minusMonths(2022);
        int int25 = localDateTime21.getDayOfMonth();
        java.util.Locale locale26 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet27 = locale26.getUnicodeLocaleAttributes();
        java.lang.String str28 = locale26.toLanguageTag();
        java.lang.String str29 = dateTimeField2.getAsText((org.joda.time.ReadablePartial) localDateTime21, locale26);
        int int30 = dateTimeField2.getMaximumValue();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str33 = dateTimeZone31.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime34 = org.joda.time.LocalDateTime.now(dateTimeZone31);
        org.joda.time.LocalDateTime.Property property35 = localDateTime34.millisOfDay();
        java.lang.String str36 = property35.getName();
        int int37 = property35.getMaximumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = property35.getFieldType();
        java.util.Locale locale39 = java.util.Locale.getDefault();
        java.lang.String str40 = locale39.getISO3Language();
        java.lang.String str41 = property35.getAsText(locale39);
        org.joda.time.LocalDateTime localDateTime43 = property35.addToCopy((int) (byte) -1);
        java.util.Locale locale45 = java.util.Locale.getDefault();
        java.lang.String str46 = dateTimeField2.getAsText((org.joda.time.ReadablePartial) localDateTime43, 20, locale45);
        int int47 = localDateTime43.getSecondOfMinute();
        org.joda.time.LocalDateTime localDateTime48 = new org.joda.time.LocalDateTime();
        org.joda.time.ReadableDuration readableDuration49 = null;
        org.joda.time.LocalDateTime localDateTime51 = localDateTime48.withDurationAdded(readableDuration49, (int) '#');
        org.joda.time.LocalDateTime.Property property52 = localDateTime51.weekyear();
        org.joda.time.LocalDateTime localDateTime54 = localDateTime51.minusMillis((-1));
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str57 = dateTimeZone55.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime58 = org.joda.time.LocalDateTime.now(dateTimeZone55);
        org.joda.time.LocalDateTime.Property property59 = localDateTime58.millisOfDay();
        org.joda.time.LocalDateTime localDateTime61 = localDateTime58.withYear((int) (short) 100);
        java.lang.String str62 = localDateTime61.toString();
        boolean boolean63 = localDateTime51.isAfter((org.joda.time.ReadablePartial) localDateTime61);
        org.joda.time.DurationFieldType durationFieldType64 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.LocalDateTime localDateTime66 = localDateTime61.withFieldAdded(durationFieldType64, 7);
        org.joda.time.DateTimeZone dateTimeZone67 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str69 = dateTimeZone67.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime70 = org.joda.time.LocalDateTime.now(dateTimeZone67);
        org.joda.time.LocalDateTime.Property property71 = localDateTime70.millisOfDay();
        org.joda.time.LocalDateTime localDateTime73 = localDateTime70.withYear((int) (short) 100);
        org.joda.time.LocalDateTime.Property property74 = localDateTime73.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime76 = localDateTime73.minusMonths(2022);
        int int77 = localDateTime73.getDayOfMonth();
        org.joda.time.DateTimeFieldType dateTimeFieldType78 = org.joda.time.DateTimeFieldType.dayOfMonth();
        boolean boolean79 = localDateTime73.equals((java.lang.Object) dateTimeFieldType78);
        org.joda.time.LocalDateTime localDateTime81 = localDateTime73.plusHours(26163523);
        boolean boolean82 = localDateTime66.isBefore((org.joda.time.ReadablePartial) localDateTime73);
        org.joda.time.DurationFieldType durationFieldType83 = org.joda.time.DurationFieldType.days();
        boolean boolean84 = localDateTime66.isSupported(durationFieldType83);
        org.joda.time.DateTimeFieldType dateTimeFieldType85 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.DurationFieldType durationFieldType86 = dateTimeFieldType85.getRangeDurationType();
        boolean boolean87 = localDateTime66.isSupported(dateTimeFieldType85);
        boolean boolean88 = localDateTime43.isSupported(dateTimeFieldType85);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "100" + "'", str6, "100");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "minuteOfDay" + "'", str9, "minuteOfDay");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 430 + "'", int14 == 430);
        org.junit.Assert.assertNotNull(dateTimeZone15);
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+07:10:22.088" + "'", str17, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 22 + "'", int25 == 22);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "");
        org.junit.Assert.assertNotNull(strSet27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "und" + "'", str28, "und");
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "873" + "'", str29, "873");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1439 + "'", int30 == 1439);
        org.junit.Assert.assertNotNull(dateTimeZone31);
// flaky:         org.junit.Assert.assertEquals("'" + str33 + "' != '" + "+07:10:22.088" + "'", str33, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "millisOfDay" + "'", str36, "millisOfDay");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 86399999 + "'", int37 == 86399999);
        org.junit.Assert.assertNotNull(dateTimeFieldType38);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "de");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "deu" + "'", str40, "deu");
// flaky:         org.junit.Assert.assertEquals("'" + str41 + "' != '" + "52431030" + "'", str41, "52431030");
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "de");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "20" + "'", str46, "20");
// flaky:         org.junit.Assert.assertTrue("'" + int47 + "' != '" + 51 + "'", int47 == 51);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(dateTimeZone55);
// flaky:         org.junit.Assert.assertEquals("'" + str57 + "' != '" + "+07:10:22.088" + "'", str57, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(localDateTime61);
// flaky:         org.junit.Assert.assertEquals("'" + str62 + "' != '" + "0100-02-22T14:33:51.030" + "'", str62, "0100-02-22T14:33:51.030");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(durationFieldType64);
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertNotNull(dateTimeZone67);
// flaky:         org.junit.Assert.assertEquals("'" + str69 + "' != '" + "+07:10:22.088" + "'", str69, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime70);
        org.junit.Assert.assertNotNull(property71);
        org.junit.Assert.assertNotNull(localDateTime73);
        org.junit.Assert.assertNotNull(property74);
        org.junit.Assert.assertNotNull(localDateTime76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 22 + "'", int77 == 22);
        org.junit.Assert.assertNotNull(dateTimeFieldType78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(localDateTime81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(durationFieldType83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType85);
        org.junit.Assert.assertNotNull(durationFieldType86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
    }

    @Test
    public void test10247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10247");
        java.util.Locale locale0 = java.util.Locale.CANADA_FRENCH;
        java.util.Set<java.lang.String> strSet1 = locale0.getUnicodeLocaleKeys();
        int int2 = strSet1.size();
        strSet1.clear();
        java.util.Locale locale4 = java.util.Locale.CANADA_FRENCH;
        java.util.Set<java.lang.String> strSet5 = locale4.getUnicodeLocaleKeys();
        java.util.stream.Stream<java.lang.String> strStream6 = strSet5.parallelStream();
        boolean boolean7 = strSet1.retainAll((java.util.Collection<java.lang.String>) strSet5);
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime();
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.LocalDateTime localDateTime11 = localDateTime8.withDurationAdded(readableDuration9, (int) '#');
        org.joda.time.LocalDateTime.Property property12 = localDateTime8.era();
        java.util.Locale locale13 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet14 = locale13.getUnicodeLocaleAttributes();
        int int15 = property12.getMaximumTextLength(locale13);
        boolean boolean16 = strSet5.equals((java.lang.Object) locale13);
        java.util.Locale.setDefault(locale13);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertNotNull(strStream6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "");
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2 + "'", int15 == 2);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test10248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10248");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DateTimeField dateTimeField3 = chronology2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone4 = chronology2.getZone();
        org.joda.time.DateTimeField dateTimeField5 = chronology2.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str8 = dateTimeZone6.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime9 = org.joda.time.LocalDateTime.now(dateTimeZone6);
        org.joda.time.LocalDateTime.Property property10 = localDateTime9.millisOfDay();
        org.joda.time.DurationFieldType durationFieldType11 = org.joda.time.DurationFieldType.centuries();
        boolean boolean12 = localDateTime9.equals((java.lang.Object) durationFieldType11);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray13 = localDateTime9.getFieldTypes();
        java.lang.String str14 = localDateTime9.toString();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter15 = null;
        java.lang.String str16 = localDateTime9.toString(dateTimeFormatter15);
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime();
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.LocalDateTime localDateTime20 = localDateTime17.withDurationAdded(readableDuration18, (int) '#');
        org.joda.time.LocalDateTime.Property property21 = localDateTime20.weekyear();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime20.minusMillis((-1));
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str26 = dateTimeZone24.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime27 = org.joda.time.LocalDateTime.now(dateTimeZone24);
        org.joda.time.LocalDateTime.Property property28 = localDateTime27.millisOfDay();
        org.joda.time.LocalDateTime localDateTime30 = localDateTime27.withYear((int) (short) 100);
        java.lang.String str31 = localDateTime30.toString();
        boolean boolean32 = localDateTime20.isAfter((org.joda.time.ReadablePartial) localDateTime30);
        java.util.Locale locale33 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet34 = locale33.getUnicodeLocaleAttributes();
        java.lang.Object[] objArray35 = strSet34.toArray();
        boolean boolean36 = strSet34.isEmpty();
        java.util.Locale locale37 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet38 = locale37.getUnicodeLocaleAttributes();
        java.lang.Object[] objArray39 = strSet38.toArray();
        java.util.Locale locale40 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet41 = locale40.getUnicodeLocaleAttributes();
        boolean boolean42 = strSet38.removeAll((java.util.Collection<java.lang.String>) strSet41);
        java.util.Locale locale43 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet44 = locale43.getUnicodeLocaleAttributes();
        org.joda.time.DurationFieldType durationFieldType45 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.DurationFieldType durationFieldType46 = org.joda.time.DurationFieldType.hours();
        org.joda.time.DurationFieldType[] durationFieldTypeArray47 = new org.joda.time.DurationFieldType[] { durationFieldType45, durationFieldType46 };
        org.joda.time.DurationFieldType[] durationFieldTypeArray48 = strSet44.toArray(durationFieldTypeArray47);
        boolean boolean49 = strSet38.containsAll((java.util.Collection<java.lang.String>) strSet44);
        java.lang.Object[] objArray50 = strSet44.toArray();
        boolean boolean51 = strSet34.removeAll((java.util.Collection<java.lang.String>) strSet44);
        java.util.Locale locale52 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet53 = locale52.getUnicodeLocaleAttributes();
        java.lang.Object[] objArray54 = strSet53.toArray();
        java.util.Locale locale55 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet56 = locale55.getUnicodeLocaleAttributes();
        boolean boolean57 = strSet53.removeAll((java.util.Collection<java.lang.String>) strSet56);
        java.util.Locale locale58 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet59 = locale58.getUnicodeLocaleAttributes();
        org.joda.time.DurationFieldType durationFieldType60 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.DurationFieldType durationFieldType61 = org.joda.time.DurationFieldType.hours();
        org.joda.time.DurationFieldType[] durationFieldTypeArray62 = new org.joda.time.DurationFieldType[] { durationFieldType60, durationFieldType61 };
        org.joda.time.DurationFieldType[] durationFieldTypeArray63 = strSet59.toArray(durationFieldTypeArray62);
        boolean boolean64 = strSet53.containsAll((java.util.Collection<java.lang.String>) strSet59);
        java.util.Locale locale65 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet66 = locale65.getUnicodeLocaleAttributes();
        java.lang.Object[] objArray67 = strSet66.toArray();
        java.util.Locale locale68 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet69 = locale68.getUnicodeLocaleAttributes();
        boolean boolean70 = strSet66.removeAll((java.util.Collection<java.lang.String>) strSet69);
        java.util.Locale locale71 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet72 = locale71.getUnicodeLocaleAttributes();
        org.joda.time.DurationFieldType durationFieldType73 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.DurationFieldType durationFieldType74 = org.joda.time.DurationFieldType.hours();
        org.joda.time.DurationFieldType[] durationFieldTypeArray75 = new org.joda.time.DurationFieldType[] { durationFieldType73, durationFieldType74 };
        org.joda.time.DurationFieldType[] durationFieldTypeArray76 = strSet72.toArray(durationFieldTypeArray75);
        boolean boolean77 = strSet66.containsAll((java.util.Collection<java.lang.String>) strSet72);
        java.lang.Object[] objArray78 = strSet72.toArray();
        boolean boolean79 = strSet53.retainAll((java.util.Collection<java.lang.String>) strSet72);
        boolean boolean80 = strSet44.addAll((java.util.Collection<java.lang.String>) strSet72);
        org.joda.time.DateTimeFieldType dateTimeFieldType81 = org.joda.time.DateTimeFieldType.yearOfEra();
        boolean boolean82 = strSet72.remove((java.lang.Object) dateTimeFieldType81);
        org.joda.time.LocalDateTime.Property property83 = localDateTime20.property(dateTimeFieldType81);
        org.joda.time.DurationFieldType durationFieldType84 = org.joda.time.DurationFieldType.millis();
        org.joda.time.LocalDateTime localDateTime86 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology87 = localDateTime86.getChronology();
        org.joda.time.DurationField durationField88 = chronology87.weekyears();
        org.joda.time.DurationField durationField89 = chronology87.centuries();
        org.joda.time.DurationField durationField90 = durationFieldType84.getField(chronology87);
        boolean boolean91 = dateTimeFieldType81.isSupported(chronology87);
        int int92 = localDateTime9.indexOf(dateTimeFieldType81);
        java.util.Date date93 = localDateTime9.toDate();
        org.joda.time.LocalDateTime localDateTime94 = org.joda.time.LocalDateTime.fromDateFields(date93);
        org.joda.time.LocalDateTime localDateTime95 = org.joda.time.LocalDateTime.fromDateFields(date93);
        org.joda.time.LocalDateTime localDateTime96 = org.joda.time.LocalDateTime.fromDateFields(date93);
        long long98 = chronology2.set((org.joda.time.ReadablePartial) localDateTime96, (long) 35);
        org.joda.time.DurationField durationField99 = chronology2.weekyears();
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+07:10:22.088" + "'", str8, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(durationFieldType11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray13);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "2022-02-22T14:33:51.090" + "'", str14, "2022-02-22T14:33:51.090");
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "2022-02-22T14:33:51.090" + "'", str16, "2022-02-22T14:33:51.090");
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "+07:10:22.088" + "'", str26, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(localDateTime30);
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "0100-02-22T14:33:51.091" + "'", str31, "0100-02-22T14:33:51.091");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "");
        org.junit.Assert.assertNotNull(strSet34);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "");
        org.junit.Assert.assertNotNull(strSet38);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[]");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "");
        org.junit.Assert.assertNotNull(strSet41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "");
        org.junit.Assert.assertNotNull(strSet44);
        org.junit.Assert.assertNotNull(durationFieldType45);
        org.junit.Assert.assertNotNull(durationFieldType46);
        org.junit.Assert.assertNotNull(durationFieldTypeArray47);
        org.junit.Assert.assertNotNull(durationFieldTypeArray48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(objArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[]");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "");
        org.junit.Assert.assertNotNull(strSet53);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[]");
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "");
        org.junit.Assert.assertNotNull(strSet56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "");
        org.junit.Assert.assertNotNull(strSet59);
        org.junit.Assert.assertNotNull(durationFieldType60);
        org.junit.Assert.assertNotNull(durationFieldType61);
        org.junit.Assert.assertNotNull(durationFieldTypeArray62);
        org.junit.Assert.assertNotNull(durationFieldTypeArray63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "");
        org.junit.Assert.assertNotNull(strSet66);
        org.junit.Assert.assertNotNull(objArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray67), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray67), "[]");
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "");
        org.junit.Assert.assertNotNull(strSet69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "");
        org.junit.Assert.assertNotNull(strSet72);
        org.junit.Assert.assertNotNull(durationFieldType73);
        org.junit.Assert.assertNotNull(durationFieldType74);
        org.junit.Assert.assertNotNull(durationFieldTypeArray75);
        org.junit.Assert.assertNotNull(durationFieldTypeArray76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(objArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray78), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray78), "[]");
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(property83);
        org.junit.Assert.assertNotNull(durationFieldType84);
        org.junit.Assert.assertNotNull(chronology87);
        org.junit.Assert.assertNotNull(durationField88);
        org.junit.Assert.assertNotNull(durationField89);
        org.junit.Assert.assertNotNull(durationField90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + (-1) + "'", int92 == (-1));
        org.junit.Assert.assertNotNull(date93);
// flaky:         org.junit.Assert.assertEquals(date93.toString(), "Tue Feb 22 14:33:51 GMT+07:16 2022");
        org.junit.Assert.assertNotNull(localDateTime94);
        org.junit.Assert.assertNotNull(localDateTime95);
        org.junit.Assert.assertNotNull(localDateTime96);
// flaky:         org.junit.Assert.assertTrue("'" + long98 + "' != '" + 1645540431854L + "'", long98 == 1645540431854L);
        org.junit.Assert.assertNotNull(durationField99);
    }

    @Test
    public void test10249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10249");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        org.joda.time.LocalDateTime localDateTime3 = localDateTime0.withDurationAdded(readableDuration1, (int) '#');
        org.joda.time.LocalDateTime.Property property4 = localDateTime0.era();
        int int5 = localDateTime0.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime0.withWeekOfWeekyear((int) (byte) 1);
        int int8 = localDateTime0.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime0.plusDays(500);
        org.joda.time.DurationFieldType durationFieldType11 = org.joda.time.DurationFieldType.days();
        java.lang.String str12 = durationFieldType11.toString();
        boolean boolean13 = localDateTime10.isSupported(durationFieldType11);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology17 = localDateTime16.getChronology();
        org.joda.time.DurationField durationField18 = chronology17.weekyears();
        boolean boolean19 = dateTimeFieldType14.isSupported(chronology17);
        org.joda.time.DurationField durationField20 = durationFieldType11.getField(chronology17);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        long long24 = chronology17.add(readablePeriod21, (long) 27427155, (int) (byte) 0);
        org.joda.time.DurationField durationField25 = chronology17.hours();
        org.joda.time.DateTimeField dateTimeField26 = chronology17.weekyearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str29 = dateTimeZone27.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime30 = org.joda.time.LocalDateTime.now(dateTimeZone27);
        org.joda.time.LocalDateTime.Property property31 = localDateTime30.millisOfDay();
        org.joda.time.LocalDateTime localDateTime33 = localDateTime30.withYear((int) (short) 100);
        org.joda.time.LocalDateTime.Property property34 = localDateTime33.minuteOfHour();
        int int35 = property34.get();
        org.joda.time.LocalDateTime localDateTime37 = property34.setCopy((int) (short) 10);
        org.joda.time.LocalDateTime.Property property38 = localDateTime37.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime40 = localDateTime37.withYearOfCentury(0);
        int int41 = localDateTime40.getMillisOfDay();
        long long43 = chronology17.set((org.joda.time.ReadablePartial) localDateTime40, 1640157423775L);
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str47 = dateTimeZone45.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime48 = org.joda.time.LocalDateTime.now(dateTimeZone45);
        org.joda.time.LocalDateTime.Property property49 = localDateTime48.millisOfDay();
        java.lang.String str50 = property49.getName();
        org.joda.time.LocalDateTime localDateTime51 = property49.roundHalfFloorCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType52 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        boolean boolean53 = localDateTime51.isSupported(dateTimeFieldType52);
        org.joda.time.DateTimeZone dateTimeZone54 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str56 = dateTimeZone54.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime57 = org.joda.time.LocalDateTime.now(dateTimeZone54);
        org.joda.time.LocalDateTime.Property property58 = localDateTime57.millisOfDay();
        org.joda.time.DurationFieldType durationFieldType59 = org.joda.time.DurationFieldType.centuries();
        boolean boolean60 = localDateTime57.equals((java.lang.Object) durationFieldType59);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray61 = localDateTime57.getFieldTypes();
        java.lang.String str62 = localDateTime57.toString();
        org.joda.time.LocalDateTime localDateTime64 = localDateTime57.plusMillis(22);
        boolean boolean65 = localDateTime51.isBefore((org.joda.time.ReadablePartial) localDateTime64);
        org.joda.time.ReadableDuration readableDuration66 = null;
        org.joda.time.LocalDateTime localDateTime67 = localDateTime64.plus(readableDuration66);
        org.joda.time.ReadableDuration readableDuration68 = null;
        org.joda.time.LocalDateTime localDateTime70 = localDateTime67.withDurationAdded(readableDuration68, 26169);
        org.joda.time.Chronology chronology71 = localDateTime70.getChronology();
        org.joda.time.DateTimeField dateTimeField72 = chronology71.clockhourOfDay();
        org.joda.time.LocalDateTime localDateTime73 = new org.joda.time.LocalDateTime((long) 13, chronology71);
        org.joda.time.LocalDateTime localDateTime75 = localDateTime73.withMillisOfSecond(2);
        org.joda.time.DateTimeFieldType dateTimeFieldType76 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.LocalDateTime localDateTime78 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology79 = localDateTime78.getChronology();
        org.joda.time.DurationField durationField80 = chronology79.weekyears();
        org.joda.time.DurationField durationField81 = chronology79.seconds();
        org.joda.time.DurationField durationField82 = chronology79.seconds();
        org.joda.time.DateTimeField dateTimeField83 = chronology79.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime84 = org.joda.time.LocalDateTime.now(chronology79);
        org.joda.time.ReadablePeriod readablePeriod85 = null;
        long long88 = chronology79.add(readablePeriod85, 197L, (int) 'a');
        org.joda.time.DateTimeField dateTimeField89 = dateTimeFieldType76.getField(chronology79);
        org.joda.time.LocalDateTime localDateTime91 = localDateTime75.withField(dateTimeFieldType76, 26234606);
        int int92 = localDateTime40.indexOf(dateTimeFieldType76);
        org.joda.time.DurationFieldType durationFieldType93 = dateTimeFieldType76.getDurationType();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 22 + "'", int5 == 22);
        org.junit.Assert.assertNotNull(localDateTime7);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 14 + "'", int8 == 14);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(durationFieldType11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "days" + "'", str12, "days");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 27427155L + "'", long24 == 27427155L);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeZone27);
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "+07:10:22.088" + "'", str29, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(property34);
// flaky:         org.junit.Assert.assertTrue("'" + int35 + "' != '" + 33 + "'", int35 == 33);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(localDateTime40);
// flaky:         org.junit.Assert.assertTrue("'" + int41 + "' != '" + 51051139 + "'", int41 == 51051139);
// flaky:         org.junit.Assert.assertTrue("'" + long43 + "' != '" + (-59006915348861L) + "'", long43 == (-59006915348861L));
        org.junit.Assert.assertNotNull(dateTimeZone45);
// flaky:         org.junit.Assert.assertEquals("'" + str47 + "' != '" + "+07:10:22.088" + "'", str47, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "millisOfDay" + "'", str50, "millisOfDay");
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(dateTimeFieldType52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(dateTimeZone54);
// flaky:         org.junit.Assert.assertEquals("'" + str56 + "' != '" + "+07:10:22.088" + "'", str56, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNotNull(durationFieldType59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray61);
// flaky:         org.junit.Assert.assertEquals("'" + str62 + "' != '" + "2022-02-22T14:33:51.139" + "'", str62, "2022-02-22T14:33:51.139");
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertNotNull(localDateTime70);
        org.junit.Assert.assertNotNull(chronology71);
        org.junit.Assert.assertNotNull(dateTimeField72);
        org.junit.Assert.assertNotNull(localDateTime75);
        org.junit.Assert.assertNotNull(dateTimeFieldType76);
        org.junit.Assert.assertNotNull(chronology79);
        org.junit.Assert.assertNotNull(durationField80);
        org.junit.Assert.assertNotNull(durationField81);
        org.junit.Assert.assertNotNull(durationField82);
        org.junit.Assert.assertNotNull(dateTimeField83);
        org.junit.Assert.assertNotNull(localDateTime84);
        org.junit.Assert.assertTrue("'" + long88 + "' != '" + 197L + "'", long88 == 197L);
        org.junit.Assert.assertNotNull(dateTimeField89);
        org.junit.Assert.assertNotNull(localDateTime91);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + (-1) + "'", int92 == (-1));
        org.junit.Assert.assertNotNull(durationFieldType93);
    }

    @Test
    public void test10250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10250");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getShortName((long) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str5 = dateTimeZone3.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime6 = org.joda.time.LocalDateTime.now(dateTimeZone3);
        long long8 = dateTimeZone0.getMillisKeepLocal(dateTimeZone3, 1645629358939L);
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime();
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.LocalDateTime localDateTime12 = localDateTime9.withDurationAdded(readableDuration10, (int) '#');
        org.joda.time.LocalDateTime.Property property13 = localDateTime12.weekyear();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime12.minusMillis((-1));
        java.util.Locale locale17 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale18 = locale17.stripExtensions();
        java.lang.String str19 = locale17.getVariant();
        java.lang.String str20 = localDateTime15.toString("26149261", locale17);
        org.joda.time.DateTime dateTime21 = localDateTime15.toDateTime();
        org.joda.time.LocalDateTime.Property property22 = localDateTime15.monthOfYear();
        int int23 = localDateTime15.getSecondOfMinute();
        boolean boolean24 = dateTimeZone0.isLocalDateTimeGap(localDateTime15);
        long long26 = dateTimeZone0.previousTransition(1645629551126L);
        java.lang.String str28 = dateTimeZone0.getNameKey(5183924341094L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+07:10:22.088" + "'", str2, "+07:10:22.088");
        org.junit.Assert.assertNotNull(dateTimeZone3);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+07:10:22.088" + "'", str5, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1645629358939L + "'", long8 == 1645629358939L);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "26149261" + "'", str20, "26149261");
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(property22);
// flaky:         org.junit.Assert.assertTrue("'" + int23 + "' != '" + 51 + "'", int23 == 51);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1645629551126L + "'", long26 == 1645629551126L);
// flaky:         org.junit.Assert.assertNull(str28);
    }

    @Test
    public void test10251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10251");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DateTimeField dateTimeField3 = chronology2.dayOfYear();
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray7 = chronology2.get(readablePeriod4, 1645629464927L, 1645629731819L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
    }

    @Test
    public void test10252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10252");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone0);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = localDateTime3.getFieldType((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime3.minusMonths(0);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime3.minusSeconds(55000019);
        int int10 = localDateTime9.size();
        org.joda.time.LocalDateTime.Property property11 = localDateTime9.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime9.plusMonths(45);
        int int14 = localDateTime13.getMinuteOfHour();
        int int15 = localDateTime13.getYearOfCentury();
        int int16 = localDateTime13.getWeekOfWeekyear();
        org.junit.Assert.assertNotNull(dateTimeZone0);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+07:10:22.088" + "'", str2, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 4 + "'", int10 == 4);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDateTime13);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 46 + "'", int14 == 46);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 24 + "'", int15 == 24);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 9 + "'", int16 == 9);
    }

    @Test
    public void test10253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10253");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.addUnicodeLocaleAttribute("und");
        java.util.Locale locale3 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale4 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str5 = locale3.getDisplayCountry(locale4);
        java.lang.String str6 = locale4.getDisplayName();
        java.util.Locale.Builder builder7 = builder2.setLocale(locale4);
        java.util.Locale locale8 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale9 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str10 = locale8.getDisplayCountry(locale9);
        java.util.Locale locale11 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale12 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str13 = locale11.getDisplayCountry(locale12);
        java.lang.String str14 = locale8.getDisplayVariant(locale11);
        java.util.Locale locale15 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale16 = locale15.stripExtensions();
        java.lang.String str17 = locale8.getDisplayLanguage(locale16);
        java.util.Locale.Builder builder18 = builder2.setLocale(locale16);
        java.util.Locale.Builder builder19 = builder18.clear();
        java.util.Locale.Builder builder20 = builder18.clearExtensions();
        java.util.Locale.Builder builder22 = builder20.setVariant("26166934");
        java.util.Locale.Builder builder23 = builder22.clear();
        java.util.Locale.Builder builder25 = builder23.addUnicodeLocaleAttribute("856");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder28 = builder25.setUnicodeLocaleKeyword("2022-02-22T07:22:38.605", "2022-02-22T07:20:29.448");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale keyword key: 2022-02-22T07:22:38.605 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Canada" + "'", str5, "Canada");
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "fran\347ais (Canada)" + "'", str6, "fran\347ais (Canada)");
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Canada" + "'", str10, "Canada");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Canada" + "'", str13, "Canada");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "fran\347ais" + "'", str17, "fran\347ais");
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
    }

    @Test
    public void test10254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10254");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.millisOfDay();
        int int5 = property4.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime7 = property4.setCopy((int) (byte) 1);
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.minus(readableDuration8);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime7.minusMinutes(26164);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str14 = dateTimeZone12.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime15 = org.joda.time.LocalDateTime.now(dateTimeZone12);
        org.joda.time.LocalDateTime.Property property16 = localDateTime15.millisOfDay();
        java.lang.String str17 = property16.getName();
        org.joda.time.LocalDateTime localDateTime18 = property16.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.minusYears(7);
        int int21 = localDateTime20.getEra();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str24 = dateTimeZone22.getShortName((long) (short) 10);
        long long26 = dateTimeZone22.convertUTCToLocal((long) ' ');
        java.lang.String str27 = dateTimeZone22.toString();
        java.lang.String str28 = dateTimeZone22.toString();
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime20, dateTimeZone22);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime20.withWeekyear((int) ' ');
        boolean boolean32 = localDateTime11.equals((java.lang.Object) localDateTime20);
        org.joda.time.LocalDateTime.Property property33 = localDateTime20.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime34 = property33.roundHalfEvenCopy();
        int int35 = localDateTime34.getMillisOfSecond();
        org.junit.Assert.assertNotNull(dateTimeZone0);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+07:10:22.088" + "'", str2, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 86399999 + "'", int5 == 86399999);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+07:10:22.088" + "'", str14, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "millisOfDay" + "'", str17, "millisOfDay");
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(dateTimeZone22);
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "+07:10:22.088" + "'", str24, "+07:10:22.088");
// flaky:         org.junit.Assert.assertTrue("'" + long26 + "' != '" + 25822120L + "'", long26 == 25822120L);
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "+07:10:22.088" + "'", str27, "+07:10:22.088");
// flaky:         org.junit.Assert.assertEquals("'" + str28 + "' != '" + "+07:10:22.088" + "'", str28, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
    }

    @Test
    public void test10255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10255");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.addUnicodeLocaleAttribute("und");
        java.util.Locale locale3 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale4 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str5 = locale3.getDisplayCountry(locale4);
        java.lang.String str6 = locale4.getDisplayName();
        java.util.Locale.Builder builder7 = builder2.setLocale(locale4);
        java.util.Locale locale8 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale9 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str10 = locale8.getDisplayCountry(locale9);
        java.util.Locale locale11 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale12 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str13 = locale11.getDisplayCountry(locale12);
        java.lang.String str14 = locale8.getDisplayVariant(locale11);
        java.util.Locale locale15 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale16 = locale15.stripExtensions();
        java.lang.String str17 = locale8.getDisplayLanguage(locale16);
        java.util.Locale.Builder builder18 = builder2.setLocale(locale16);
        java.util.Locale.Builder builder19 = builder18.clearExtensions();
        java.util.Locale.Builder builder20 = builder18.clear();
        java.util.Locale.Builder builder21 = builder20.clear();
        java.util.Locale.Builder builder22 = builder21.clear();
        java.util.Locale.Builder builder23 = builder21.clear();
        java.util.Locale.Builder builder24 = builder23.clearExtensions();
        java.util.Locale.Builder builder27 = builder23.setExtension('u', "26158910");
        java.util.Locale.Builder builder29 = builder23.removeUnicodeLocaleAttribute("26165577");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder31 = builder29.setLanguage("2022-02-22T07:16:49.641");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed language: 2022-02-22T07:16:49.641 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Canada" + "'", str5, "Canada");
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "fran\347ais (Canada)" + "'", str6, "fran\347ais (Canada)");
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Canada" + "'", str10, "Canada");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Canada" + "'", str13, "Canada");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "fran\347ais" + "'", str17, "fran\347ais");
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
    }

    @Test
    public void test10256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10256");
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.weekyears();
        org.joda.time.DurationField durationField6 = chronology4.centuries();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((long) (byte) 0, chronology4);
        org.joda.time.DurationField durationField8 = chronology4.millis();
        org.joda.time.DateTimeField dateTimeField9 = chronology4.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField10 = chronology4.monthOfYear();
        org.joda.time.DateTimeField dateTimeField11 = chronology4.dayOfYear();
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime(23L, chronology4);
        java.lang.String str13 = localDateTime12.toString();
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "1970-01-01T00:00:00.023" + "'", str13, "1970-01-01T00:00:00.023");
    }

    @Test
    public void test10257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10257");
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.weekyears();
        org.joda.time.DurationField durationField6 = chronology4.centuries();
        org.joda.time.DurationField durationField7 = chronology4.minutes();
        org.joda.time.DateTimeField dateTimeField8 = chronology4.monthOfYear();
        org.joda.time.DateTimeField dateTimeField9 = chronology4.halfdayOfDay();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((long) 26163523, chronology4);
        org.joda.time.DurationField durationField11 = chronology4.days();
        org.joda.time.DateTimeField dateTimeField12 = chronology4.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime(1645629415330L, chronology4);
        org.joda.time.DateTimeField dateTimeField14 = chronology4.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime();
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.LocalDateTime localDateTime18 = localDateTime15.withDurationAdded(readableDuration16, (int) '#');
        org.joda.time.LocalDateTime.Property property19 = localDateTime18.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime18.minusHours(0);
        int int22 = localDateTime18.getWeekyear();
        org.joda.time.Chronology chronology23 = localDateTime18.getChronology();
        org.joda.time.LocalDateTime localDateTime24 = org.joda.time.LocalDateTime.now(chronology23);
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str27 = dateTimeZone25.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime28 = org.joda.time.LocalDateTime.now(dateTimeZone25);
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str31 = dateTimeZone29.getShortName((long) (short) 10);
        long long33 = dateTimeZone29.convertUTCToLocal((long) ' ');
        java.lang.String str34 = dateTimeZone29.toString();
        boolean boolean36 = dateTimeZone29.equals((java.lang.Object) (short) 100);
        java.util.Locale locale38 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str39 = dateTimeZone29.getShortName((long) (-1), locale38);
        long long41 = dateTimeZone25.getMillisKeepLocal(dateTimeZone29, (long) (byte) -1);
        org.joda.time.Chronology chronology42 = chronology23.withZone(dateTimeZone25);
        org.joda.time.DateTimeZone dateTimeZone43 = chronology42.getZone();
        java.lang.String str45 = dateTimeZone43.getShortName(43200052L);
        org.joda.time.Chronology chronology46 = chronology4.withZone(dateTimeZone43);
        org.joda.time.DateTimeField dateTimeField47 = chronology4.hourOfDay();
        org.joda.time.DateTimeField dateTimeField48 = chronology4.monthOfYear();
        org.joda.time.DurationField durationField49 = chronology4.days();
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2022 + "'", int22 == 2022);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(dateTimeZone25);
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "+07:10:22.088" + "'", str27, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(dateTimeZone29);
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "+07:10:22.088" + "'", str31, "+07:10:22.088");
// flaky:         org.junit.Assert.assertTrue("'" + long33 + "' != '" + 25822120L + "'", long33 == 25822120L);
// flaky:         org.junit.Assert.assertEquals("'" + str34 + "' != '" + "+07:10:22.088" + "'", str34, "+07:10:22.088");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "fr_CA");
// flaky:         org.junit.Assert.assertEquals("'" + str39 + "' != '" + "+07:10:22.088" + "'", str39, "+07:10:22.088");
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + (-1L) + "'", long41 == (-1L));
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(dateTimeZone43);
// flaky:         org.junit.Assert.assertEquals("'" + str45 + "' != '" + "+07:10:22.088" + "'", str45, "+07:10:22.088");
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(durationField49);
    }

    @Test
    public void test10258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10258");
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology3 = localDateTime2.getChronology();
        org.joda.time.DurationField durationField4 = chronology3.weekyears();
        org.joda.time.DurationField durationField5 = chronology3.centuries();
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime((long) (byte) 0, chronology3);
        org.joda.time.DurationField durationField7 = chronology3.millis();
        org.joda.time.DateTimeField dateTimeField8 = chronology3.minuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str11 = dateTimeZone9.getShortName((long) (short) 10);
        long long13 = dateTimeZone9.convertUTCToLocal((long) ' ');
        java.lang.String str14 = dateTimeZone9.toString();
        java.lang.String str15 = dateTimeZone9.toString();
        java.util.Locale locale17 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale18 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str19 = locale17.getDisplayCountry(locale18);
        java.util.Locale locale20 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale21 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str22 = locale20.getDisplayCountry(locale21);
        java.lang.String str23 = locale17.getDisplayVariant(locale20);
        java.util.Locale locale24 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale25 = locale24.stripExtensions();
        java.lang.String str26 = locale17.getDisplayLanguage(locale25);
        java.lang.String str27 = dateTimeZone9.getName((long) 67, locale25);
        int int28 = dateTimeField8.getMaximumTextLength(locale25);
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime(100L);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime30.plusDays(0);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime32.plusMinutes(54974408);
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.DateTimeField dateTimeField37 = dateTimeFieldType35.getField(chronology36);
        java.util.Locale.Category category39 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale40 = java.util.Locale.FRENCH;
        java.util.Locale.setDefault(category39, locale40);
        java.lang.String str42 = locale40.toLanguageTag();
        java.lang.String str43 = dateTimeField37.getAsText((long) 26149, locale40);
        java.util.Locale locale44 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale locale45 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet46 = locale45.getUnicodeLocaleAttributes();
        java.lang.String str47 = locale44.getDisplayCountry(locale45);
        java.lang.String str48 = locale40.getDisplayLanguage(locale45);
        java.lang.String str49 = dateTimeField8.getAsText((org.joda.time.ReadablePartial) localDateTime34, locale40);
        org.joda.time.LocalDateTime localDateTime51 = localDateTime34.minusMinutes(20);
        org.joda.time.LocalDateTime localDateTime53 = localDateTime34.plusSeconds(0);
        org.joda.time.LocalDateTime.Property property54 = localDateTime53.monthOfYear();
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+07:10:22.088" + "'", str11, "+07:10:22.088");
// flaky:         org.junit.Assert.assertTrue("'" + long13 + "' != '" + 25822120L + "'", long13 == 25822120L);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+07:10:22.088" + "'", str14, "+07:10:22.088");
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+07:10:22.088" + "'", str15, "+07:10:22.088");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Canada" + "'", str19, "Canada");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Canada" + "'", str22, "Canada");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "fran\347ais" + "'", str26, "fran\347ais");
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "+07:10:22.088" + "'", str27, "+07:10:22.088");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 4 + "'", int28 == 4);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(dateTimeFieldType35);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertTrue("'" + category39 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category39.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "fr" + "'", str42, "fr");
// flaky:         org.junit.Assert.assertEquals("'" + str43 + "' != '" + "430" + "'", str43, "430");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "");
        org.junit.Assert.assertNotNull(strSet46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "China" + "'", str47, "China");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "French" + "'", str48, "French");
// flaky:         org.junit.Assert.assertEquals("'" + str49 + "' != '" + "1398" + "'", str49, "1398");
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(property54);
    }

    @Test
    public void test10259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10259");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.millisOfDay();
        org.joda.time.ReadableInstant readableInstant5 = null;
        long long6 = property4.getDifferenceAsLong(readableInstant5);
        java.util.Locale locale7 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str8 = locale7.getISO3Language();
        java.lang.String str9 = property4.getAsShortText(locale7);
        org.joda.time.DurationField durationField10 = property4.getDurationField();
        long long13 = durationField10.add((long) 1, 10);
        boolean boolean14 = durationField10.isPrecise();
        int int16 = durationField10.getValue((long) 26149500);
        int int19 = durationField10.getValue((long) (short) 10, 0L);
        long long22 = durationField10.add((long) 'a', (long) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType23 = durationField10.getType();
        org.joda.time.DurationFieldType durationFieldType24 = org.joda.time.DurationFieldType.days();
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology27 = localDateTime26.getChronology();
        org.joda.time.DurationField durationField28 = chronology27.hours();
        org.joda.time.DurationField durationField29 = durationFieldType24.getField(chronology27);
        org.joda.time.DateTimeField dateTimeField30 = chronology27.hourOfHalfday();
        org.joda.time.DurationField durationField31 = chronology27.weeks();
        boolean boolean32 = durationFieldType23.isSupported(chronology27);
        org.joda.time.DateTimeField dateTimeField33 = chronology27.monthOfYear();
        int int35 = dateTimeField33.getLeapAmount(1645629394927L);
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str38 = dateTimeZone36.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime39 = org.joda.time.LocalDateTime.now(dateTimeZone36);
        org.joda.time.LocalDateTime.Property property40 = localDateTime39.millisOfDay();
        java.lang.String str41 = property40.getName();
        org.joda.time.LocalDateTime localDateTime42 = property40.roundHalfFloorCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        boolean boolean44 = localDateTime42.isSupported(dateTimeFieldType43);
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str47 = dateTimeZone45.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime48 = org.joda.time.LocalDateTime.now(dateTimeZone45);
        org.joda.time.LocalDateTime.Property property49 = localDateTime48.millisOfDay();
        org.joda.time.DurationFieldType durationFieldType50 = org.joda.time.DurationFieldType.centuries();
        boolean boolean51 = localDateTime48.equals((java.lang.Object) durationFieldType50);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray52 = localDateTime48.getFieldTypes();
        java.lang.String str53 = localDateTime48.toString();
        org.joda.time.LocalDateTime localDateTime55 = localDateTime48.plusMillis(22);
        boolean boolean56 = localDateTime42.isBefore((org.joda.time.ReadablePartial) localDateTime55);
        org.joda.time.ReadableDuration readableDuration57 = null;
        org.joda.time.LocalDateTime localDateTime58 = localDateTime55.plus(readableDuration57);
        org.joda.time.LocalDateTime.Property property59 = localDateTime58.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime60 = property59.roundHalfEvenCopy();
        org.joda.time.ReadablePeriod readablePeriod61 = null;
        org.joda.time.LocalDateTime localDateTime62 = localDateTime60.plus(readablePeriod61);
        int int63 = dateTimeField33.getMaximumValue((org.joda.time.ReadablePartial) localDateTime60);
        int int65 = dateTimeField33.getMinimumValue((-981L));
        boolean boolean66 = dateTimeField33.isSupported();
        org.junit.Assert.assertNotNull(dateTimeZone0);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+07:10:22.088" + "'", str2, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
// flaky:         org.junit.Assert.assertTrue("'" + long6 + "' != '" + 25822088L + "'", long6 == 25822088L);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "fra" + "'", str8, "fra");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "52431521" + "'", str9, "52431521");
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 11L + "'", long13 == 11L);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 26149500 + "'", int16 == 26149500);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10 + "'", int19 == 10);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 197L + "'", long22 == 197L);
        org.junit.Assert.assertNotNull(durationFieldType23);
        org.junit.Assert.assertNotNull(durationFieldType24);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone36);
// flaky:         org.junit.Assert.assertEquals("'" + str38 + "' != '" + "+07:10:22.088" + "'", str38, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "millisOfDay" + "'", str41, "millisOfDay");
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(dateTimeFieldType43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(dateTimeZone45);
// flaky:         org.junit.Assert.assertEquals("'" + str47 + "' != '" + "+07:10:22.088" + "'", str47, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(durationFieldType50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray52);
// flaky:         org.junit.Assert.assertEquals("'" + str53 + "' != '" + "2022-02-22T14:33:51.521" + "'", str53, "2022-02-22T14:33:51.521");
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 12 + "'", int63 == 12);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
    }

    @Test
    public void test10260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10260");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.millisOfDay();
        java.lang.String str5 = property4.getName();
        org.joda.time.LocalDateTime localDateTime6 = property4.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.minusYears(7);
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.plus(readableDuration9);
        org.junit.Assert.assertNotNull(dateTimeZone0);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+07:10:22.088" + "'", str2, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "millisOfDay" + "'", str5, "millisOfDay");
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
    }

    @Test
    public void test10261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10261");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.millisOfDay();
        org.joda.time.ReadableInstant readableInstant5 = null;
        long long6 = property4.getDifferenceAsLong(readableInstant5);
        java.util.Locale locale7 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str8 = locale7.getISO3Language();
        java.lang.String str9 = property4.getAsShortText(locale7);
        org.joda.time.DurationField durationField10 = property4.getDurationField();
        org.joda.time.LocalDateTime localDateTime11 = property4.getLocalDateTime();
        int int12 = property4.getMinimumValue();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str16 = dateTimeZone14.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime17 = org.joda.time.LocalDateTime.now(dateTimeZone14);
        org.joda.time.LocalDateTime.Property property18 = localDateTime17.millisOfDay();
        org.joda.time.ReadableInstant readableInstant19 = null;
        long long20 = property18.getDifferenceAsLong(readableInstant19);
        org.joda.time.DurationField durationField21 = property18.getLeapDurationField();
        java.lang.String str22 = property18.getAsString();
        org.joda.time.LocalDateTime localDateTime23 = property18.roundFloorCopy();
        java.util.Locale locale24 = java.util.Locale.ENGLISH;
        java.lang.String str25 = property18.getAsText(locale24);
        org.joda.time.LocalDateTime localDateTime26 = property4.setCopy("26175305", locale24);
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime();
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.LocalDateTime localDateTime30 = localDateTime27.withDurationAdded(readableDuration28, (int) '#');
        int int31 = localDateTime30.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime33 = localDateTime30.withMinuteOfHour(2);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime30.withMinuteOfHour(2);
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str38 = dateTimeZone36.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime39 = org.joda.time.LocalDateTime.now(dateTimeZone36);
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = localDateTime39.getFieldType((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime43 = localDateTime39.minusMonths(0);
        boolean boolean44 = localDateTime35.isBefore((org.joda.time.ReadablePartial) localDateTime39);
        int int45 = localDateTime39.getYearOfCentury();
        int int46 = property4.compareTo((org.joda.time.ReadablePartial) localDateTime39);
        java.lang.String str47 = property4.toString();
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str50 = dateTimeZone48.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime51 = org.joda.time.LocalDateTime.now(dateTimeZone48);
        org.joda.time.LocalDateTime.Property property52 = localDateTime51.millisOfDay();
        org.joda.time.LocalDateTime localDateTime54 = localDateTime51.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime56 = localDateTime51.plusHours((int) ' ');
        org.joda.time.ReadableInstant readableInstant57 = null;
        org.joda.time.DateTime dateTime58 = localDateTime56.toDateTime(readableInstant57);
        org.joda.time.DateTimeZone dateTimeZone59 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str61 = dateTimeZone59.getShortName((long) (short) 10);
        long long63 = dateTimeZone59.convertUTCToLocal((long) ' ');
        java.lang.String str64 = dateTimeZone59.toString();
        long long66 = dateTimeZone59.previousTransition(32L);
        long long69 = dateTimeZone59.convertLocalToUTC(97L, false);
        boolean boolean70 = dateTime58.equals((java.lang.Object) false);
        org.joda.time.DateTimeZone dateTimeZone71 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str73 = dateTimeZone71.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime74 = org.joda.time.LocalDateTime.now(dateTimeZone71);
        org.joda.time.LocalDateTime.Property property75 = localDateTime74.millisOfDay();
        org.joda.time.LocalDateTime localDateTime77 = localDateTime74.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime79 = localDateTime74.plusHours((int) ' ');
        org.joda.time.ReadableInstant readableInstant80 = null;
        org.joda.time.DateTime dateTime81 = localDateTime79.toDateTime(readableInstant80);
        long long82 = dateTime81.getMillis();
        org.joda.time.DateTimeZone dateTimeZone83 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str85 = dateTimeZone83.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime86 = org.joda.time.LocalDateTime.now(dateTimeZone83);
        org.joda.time.DateTimeFieldType dateTimeFieldType88 = localDateTime86.getFieldType((int) (short) 0);
        boolean boolean89 = dateTime81.isSupported(dateTimeFieldType88);
        boolean boolean90 = dateTime58.isAfter((org.joda.time.ReadableInstant) dateTime81);
        java.lang.String str91 = dateTime58.toString();
        boolean boolean93 = dateTime58.equals((java.lang.Object) (short) 1);
        org.joda.time.Instant instant94 = dateTime58.toInstant();
        int int95 = property4.getDifference((org.joda.time.ReadableInstant) instant94);
        org.junit.Assert.assertNotNull(dateTimeZone0);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+07:10:22.088" + "'", str2, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
// flaky:         org.junit.Assert.assertTrue("'" + long6 + "' != '" + 25822088L + "'", long6 == 25822088L);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "fra" + "'", str8, "fra");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "52431556" + "'", str9, "52431556");
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone14);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+07:10:22.088" + "'", str16, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(property18);
// flaky:         org.junit.Assert.assertTrue("'" + long20 + "' != '" + 25822088L + "'", long20 == 25822088L);
        org.junit.Assert.assertNull(durationField21);
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "52431557" + "'", str22, "52431557");
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "52431557" + "'", str25, "52431557");
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2 + "'", int31 == 2);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(dateTimeZone36);
// flaky:         org.junit.Assert.assertEquals("'" + str38 + "' != '" + "+07:10:22.088" + "'", str38, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(dateTimeFieldType41);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 22 + "'", int45 == 22);
// flaky:         org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Property[millisOfDay]" + "'", str47, "Property[millisOfDay]");
        org.junit.Assert.assertNotNull(dateTimeZone48);
// flaky:         org.junit.Assert.assertEquals("'" + str50 + "' != '" + "+07:10:22.088" + "'", str50, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTimeZone59);
// flaky:         org.junit.Assert.assertEquals("'" + str61 + "' != '" + "+07:10:22.088" + "'", str61, "+07:10:22.088");
// flaky:         org.junit.Assert.assertTrue("'" + long63 + "' != '" + 25822120L + "'", long63 == 25822120L);
// flaky:         org.junit.Assert.assertEquals("'" + str64 + "' != '" + "+07:10:22.088" + "'", str64, "+07:10:22.088");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 32L + "'", long66 == 32L);
// flaky:         org.junit.Assert.assertTrue("'" + long69 + "' != '" + (-25821991L) + "'", long69 == (-25821991L));
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(dateTimeZone71);
// flaky:         org.junit.Assert.assertEquals("'" + str73 + "' != '" + "+07:10:22.088" + "'", str73, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime74);
        org.junit.Assert.assertNotNull(property75);
        org.junit.Assert.assertNotNull(localDateTime77);
        org.junit.Assert.assertNotNull(localDateTime79);
        org.junit.Assert.assertNotNull(dateTime81);
// flaky:         org.junit.Assert.assertTrue("'" + long82 + "' != '" + 1645629809469L + "'", long82 == 1645629809469L);
        org.junit.Assert.assertNotNull(dateTimeZone83);
// flaky:         org.junit.Assert.assertEquals("'" + str85 + "' != '" + "+07:10:22.088" + "'", str85, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime86);
        org.junit.Assert.assertNotNull(dateTimeFieldType88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str91 + "' != '" + "2022-02-23T22:33:51.557+07:10:22.088" + "'", str91, "2022-02-23T22:33:51.557+07:10:22.088");
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNotNull(instant94);
// flaky:         org.junit.Assert.assertTrue("'" + int95 + "' != '" + (-89377913) + "'", int95 == (-89377913));
    }

    @Test
    public void test10262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10262");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.millisOfDay();
        org.joda.time.ReadableInstant readableInstant5 = null;
        long long6 = property4.getDifferenceAsLong(readableInstant5);
        java.util.Locale locale8 = java.util.Locale.CANADA_FRENCH;
        java.util.Set<java.lang.String> strSet9 = locale8.getUnicodeLocaleKeys();
        org.joda.time.LocalDateTime localDateTime10 = property4.setCopy("26153615", locale8);
        org.joda.time.LocalDateTime localDateTime12 = property4.addToCopy((-6004871L));
        org.joda.time.DurationField durationField13 = property4.getDurationField();
        org.joda.time.DateTimeField dateTimeField14 = property4.getField();
        org.joda.time.LocalDateTime localDateTime15 = property4.getLocalDateTime();
        org.joda.time.LocalDateTime.Property property16 = localDateTime15.secondOfMinute();
        int int17 = localDateTime15.getYearOfEra();
        org.junit.Assert.assertNotNull(dateTimeZone0);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+07:10:22.088" + "'", str2, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
// flaky:         org.junit.Assert.assertTrue("'" + long6 + "' != '" + 25822088L + "'", long6 == 25822088L);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2022 + "'", int17 == 2022);
    }

    @Test
    public void test10263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10263");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.millisOfDay();
        int int5 = property4.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime7 = property4.setCopy(681);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTimeField dateTimeField11 = dateTimeFieldType9.getField(chronology10);
        long long13 = dateTimeField11.roundFloor((long) (-1));
        java.util.Locale.Builder builder14 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder16 = builder14.addUnicodeLocaleAttribute("und");
        java.util.Locale locale17 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale18 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str19 = locale17.getDisplayCountry(locale18);
        java.lang.String str20 = locale18.getDisplayName();
        java.util.Locale.Builder builder21 = builder16.setLocale(locale18);
        int int22 = dateTimeField11.getMaximumShortTextLength(locale18);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str25 = dateTimeZone23.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime26 = org.joda.time.LocalDateTime.now(dateTimeZone23);
        org.joda.time.LocalDateTime.Property property27 = localDateTime26.millisOfDay();
        org.joda.time.ReadableInstant readableInstant28 = null;
        long long29 = property27.getDifferenceAsLong(readableInstant28);
        org.joda.time.DurationField durationField30 = property27.getLeapDurationField();
        java.lang.String str31 = property27.getAsString();
        org.joda.time.LocalDateTime localDateTime32 = property27.roundFloorCopy();
        java.util.Locale locale33 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet34 = locale33.getUnicodeLocaleAttributes();
        java.util.Set<java.lang.String> strSet35 = locale33.getUnicodeLocaleAttributes();
        java.lang.String str36 = dateTimeField11.getAsShortText((org.joda.time.ReadablePartial) localDateTime32, locale33);
        long long38 = dateTimeField11.remainder(100L);
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str41 = dateTimeZone39.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime42 = org.joda.time.LocalDateTime.now(dateTimeZone39);
        org.joda.time.LocalDateTime.Property property43 = localDateTime42.millisOfDay();
        org.joda.time.LocalDateTime localDateTime45 = localDateTime42.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime47 = localDateTime42.plusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime49 = localDateTime47.minusHours((int) (short) 10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray50 = localDateTime47.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime52 = localDateTime47.minusMillis(0);
        org.joda.time.LocalDateTime localDateTime54 = localDateTime52.withDayOfYear(32);
        org.joda.time.DateTimeFieldType dateTimeFieldType55 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        org.joda.time.LocalDateTime localDateTime57 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology58 = localDateTime57.getChronology();
        org.joda.time.DurationField durationField59 = chronology58.weekyears();
        boolean boolean60 = dateTimeFieldType55.isSupported(chronology58);
        org.joda.time.DateTimeField dateTimeField61 = chronology58.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField62 = chronology58.weekyearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone64 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str66 = dateTimeZone64.getShortName((long) (short) 10);
        long long68 = dateTimeZone64.convertUTCToLocal((long) ' ');
        java.util.Locale locale70 = java.util.Locale.ROOT;
        java.lang.String str71 = dateTimeZone64.getName((long) (short) 0, locale70);
        java.lang.String str72 = dateTimeField62.getAsShortText((long) 54976760, locale70);
        java.lang.String str73 = dateTimeField11.getAsShortText((org.joda.time.ReadablePartial) localDateTime54, locale70);
        java.lang.String str74 = localDateTime7.toString("26273943", locale70);
        org.joda.time.LocalDateTime.Property property75 = localDateTime7.yearOfEra();
        org.joda.time.Interval interval76 = property75.toInterval();
        org.junit.Assert.assertNotNull(dateTimeZone0);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+07:10:22.088" + "'", str2, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 86399999 + "'", int5 == 86399999);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(dateTimeField11);
// flaky:         org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-22088L) + "'", long13 == (-22088L));
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Canada" + "'", str19, "Canada");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "fran\347ais (Canada)" + "'", str20, "fran\347ais (Canada)");
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 4 + "'", int22 == 4);
        org.junit.Assert.assertNotNull(dateTimeZone23);
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "+07:10:22.088" + "'", str25, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(property27);
// flaky:         org.junit.Assert.assertTrue("'" + long29 + "' != '" + 25822088L + "'", long29 == 25822088L);
        org.junit.Assert.assertNull(durationField30);
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "52431612" + "'", str31, "52431612");
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "");
        org.junit.Assert.assertNotNull(strSet34);
        org.junit.Assert.assertNotNull(strSet35);
// flaky:         org.junit.Assert.assertEquals("'" + str36 + "' != '" + "873" + "'", str36, "873");
// flaky:         org.junit.Assert.assertTrue("'" + long38 + "' != '" + 22188L + "'", long38 == 22188L);
        org.junit.Assert.assertNotNull(dateTimeZone39);
// flaky:         org.junit.Assert.assertEquals("'" + str41 + "' != '" + "+07:10:22.088" + "'", str41, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray50);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(dateTimeFieldType55);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(durationField59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertNotNull(dateTimeZone64);
// flaky:         org.junit.Assert.assertEquals("'" + str66 + "' != '" + "+07:10:22.088" + "'", str66, "+07:10:22.088");
// flaky:         org.junit.Assert.assertTrue("'" + long68 + "' != '" + 25822120L + "'", long68 == 25822120L);
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "");
// flaky:         org.junit.Assert.assertEquals("'" + str71 + "' != '" + "+07:10:22.088" + "'", str71, "+07:10:22.088");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "70" + "'", str72, "70");
// flaky:         org.junit.Assert.assertEquals("'" + str73 + "' != '" + "1353" + "'", str73, "1353");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "26273943" + "'", str74, "26273943");
        org.junit.Assert.assertNotNull(property75);
        org.junit.Assert.assertNotNull(interval76);
    }

    @Test
    public void test10264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10264");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        boolean boolean1 = timeZone0.observesDaylightTime();
        timeZone0.setRawOffset((int) (byte) 0);
        java.util.TimeZone timeZone4 = java.util.TimeZone.getDefault();
        boolean boolean5 = timeZone4.observesDaylightTime();
        timeZone4.setRawOffset((int) (byte) 0);
        int int8 = timeZone4.getRawOffset();
        boolean boolean9 = timeZone0.hasSameRules(timeZone4);
        java.lang.String str10 = timeZone4.getID();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str13 = dateTimeZone11.getShortName((long) (short) 10);
        long long15 = dateTimeZone11.convertUTCToLocal((long) ' ');
        java.lang.String str16 = dateTimeZone11.toString();
        long long19 = dateTimeZone11.adjustOffset((long) (short) 100, false);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone11);
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime(dateTimeZone11);
        long long23 = dateTimeZone11.convertUTCToLocal((long) 0);
        long long26 = dateTimeZone11.convertLocalToUTC(1645629366715L, false);
        java.util.TimeZone timeZone27 = dateTimeZone11.toTimeZone();
        java.util.TimeZone timeZone29 = java.util.TimeZone.getTimeZone("2022-02-22T07:15:49.443");
        boolean boolean30 = timeZone27.hasSameRules(timeZone29);
        boolean boolean31 = timeZone4.hasSameRules(timeZone27);
        int int32 = timeZone27.getDSTSavings();
        org.junit.Assert.assertNotNull(timeZone0);
// flaky:         org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(timeZone4);
// flaky:         org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+07:10:22.088" + "'", str10, "+07:10:22.088");
        org.junit.Assert.assertNotNull(dateTimeZone11);
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+07:10:22.088" + "'", str13, "+07:10:22.088");
// flaky:         org.junit.Assert.assertTrue("'" + long15 + "' != '" + 25822120L + "'", long15 == 25822120L);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+07:10:22.088" + "'", str16, "+07:10:22.088");
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 100L + "'", long19 == 100L);
// flaky:         org.junit.Assert.assertTrue("'" + long23 + "' != '" + 25822088L + "'", long23 == 25822088L);
// flaky:         org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1645603544627L + "'", long26 == 1645603544627L);
        org.junit.Assert.assertNotNull(timeZone27);
// flaky:         org.junit.Assert.assertEquals(timeZone27.getDisplayName(), "GMT+07:10");
        org.junit.Assert.assertNotNull(timeZone29);
        org.junit.Assert.assertEquals(timeZone29.getDisplayName(), "Heure de Greenwich");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
// flaky:         org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
    }

    @Test
    public void test10265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10265");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Locale locale3 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale4 = java.util.Locale.CANADA;
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str7 = dateTimeZone5.getShortName((long) (short) 10);
        long long9 = dateTimeZone5.convertUTCToLocal((long) ' ');
        java.lang.String str10 = dateTimeZone5.toString();
        boolean boolean12 = dateTimeZone5.equals((java.lang.Object) (short) 100);
        java.util.Locale locale14 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str15 = dateTimeZone5.getShortName((long) (-1), locale14);
        java.util.Locale locale16 = java.util.Locale.CANADA;
        java.util.Locale locale17 = java.util.Locale.FRENCH;
        java.util.Locale[] localeArray18 = new java.util.Locale[] { locale3, locale4, locale14, locale16, locale17 };
        java.util.ArrayList<java.util.Locale> localeList19 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList19, localeArray18);
        java.util.Locale locale21 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.util.Locale>) localeList19);
        java.util.Locale locale22 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet23 = locale22.getUnicodeLocaleAttributes();
        java.lang.Object[] objArray24 = strSet23.toArray();
        java.util.List<java.lang.String> strList25 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet23);
        java.util.Locale locale26 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet27 = locale26.getUnicodeLocaleAttributes();
        java.lang.Object[] objArray28 = strSet27.toArray();
        boolean boolean29 = strSet27.isEmpty();
        java.lang.String str30 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet27);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap31 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList32 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strMap31);
        java.util.Locale locale33 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet34 = locale33.getUnicodeLocaleAttributes();
        java.lang.Object[] objArray35 = strSet34.toArray();
        java.util.Locale locale36 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet37 = locale36.getUnicodeLocaleAttributes();
        boolean boolean38 = strSet34.removeAll((java.util.Collection<java.lang.String>) strSet37);
        java.util.List<java.lang.String> strList39 = java.util.Locale.filterTags(languageRangeList32, (java.util.Collection<java.lang.String>) strSet34);
        java.util.Locale locale40 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet41 = locale40.getUnicodeLocaleAttributes();
        java.lang.Object[] objArray42 = strSet41.toArray();
        java.util.Locale locale43 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet44 = locale43.getUnicodeLocaleAttributes();
        boolean boolean45 = strSet41.removeAll((java.util.Collection<java.lang.String>) strSet44);
        java.util.Locale locale46 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet47 = locale46.getUnicodeLocaleAttributes();
        org.joda.time.DurationFieldType durationFieldType48 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.DurationFieldType durationFieldType49 = org.joda.time.DurationFieldType.hours();
        org.joda.time.DurationFieldType[] durationFieldTypeArray50 = new org.joda.time.DurationFieldType[] { durationFieldType48, durationFieldType49 };
        org.joda.time.DurationFieldType[] durationFieldTypeArray51 = strSet47.toArray(durationFieldTypeArray50);
        boolean boolean52 = strSet41.containsAll((java.util.Collection<java.lang.String>) strSet47);
        java.util.Locale locale53 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet54 = locale53.getUnicodeLocaleAttributes();
        java.lang.Object[] objArray55 = strSet54.toArray();
        java.util.Locale locale56 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet57 = locale56.getUnicodeLocaleAttributes();
        boolean boolean58 = strSet54.removeAll((java.util.Collection<java.lang.String>) strSet57);
        java.util.Locale locale59 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet60 = locale59.getUnicodeLocaleAttributes();
        org.joda.time.DurationFieldType durationFieldType61 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.DurationFieldType durationFieldType62 = org.joda.time.DurationFieldType.hours();
        org.joda.time.DurationFieldType[] durationFieldTypeArray63 = new org.joda.time.DurationFieldType[] { durationFieldType61, durationFieldType62 };
        org.joda.time.DurationFieldType[] durationFieldTypeArray64 = strSet60.toArray(durationFieldTypeArray63);
        boolean boolean65 = strSet54.containsAll((java.util.Collection<java.lang.String>) strSet60);
        java.lang.Object[] objArray66 = strSet60.toArray();
        boolean boolean67 = strSet41.retainAll((java.util.Collection<java.lang.String>) strSet60);
        boolean boolean68 = strSet34.removeAll((java.util.Collection<java.lang.String>) strSet60);
        java.util.Spliterator<java.lang.String> strSpliterator69 = strSet34.spliterator();
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en_CA");
        org.junit.Assert.assertNotNull(dateTimeZone5);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+07:10:22.088" + "'", str7, "+07:10:22.088");
// flaky:         org.junit.Assert.assertTrue("'" + long9 + "' != '" + 25822120L + "'", long9 == 25822120L);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+07:10:22.088" + "'", str10, "+07:10:22.088");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "fr_CA");
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+07:10:22.088" + "'", str15, "+07:10:22.088");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "fr");
        org.junit.Assert.assertNotNull(localeArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNull(locale21);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "");
        org.junit.Assert.assertNotNull(strSet23);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[]");
        org.junit.Assert.assertNotNull(strList25);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "");
        org.junit.Assert.assertNotNull(strSet27);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(languageRangeList32);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "");
        org.junit.Assert.assertNotNull(strSet34);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[]");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "");
        org.junit.Assert.assertNotNull(strSet37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(strList39);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "");
        org.junit.Assert.assertNotNull(strSet41);
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[]");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "");
        org.junit.Assert.assertNotNull(strSet44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "");
        org.junit.Assert.assertNotNull(strSet47);
        org.junit.Assert.assertNotNull(durationFieldType48);
        org.junit.Assert.assertNotNull(durationFieldType49);
        org.junit.Assert.assertNotNull(durationFieldTypeArray50);
        org.junit.Assert.assertNotNull(durationFieldTypeArray51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "");
        org.junit.Assert.assertNotNull(strSet54);
        org.junit.Assert.assertNotNull(objArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray55), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray55), "[]");
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "");
        org.junit.Assert.assertNotNull(strSet57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "");
        org.junit.Assert.assertNotNull(strSet60);
        org.junit.Assert.assertNotNull(durationFieldType61);
        org.junit.Assert.assertNotNull(durationFieldType62);
        org.junit.Assert.assertNotNull(durationFieldTypeArray63);
        org.junit.Assert.assertNotNull(durationFieldTypeArray64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[]");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(strSpliterator69);
    }

    @Test
    public void test10266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10266");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology3 = localDateTime2.getChronology();
        org.joda.time.DurationField durationField4 = chronology3.weekyears();
        org.joda.time.DurationField durationField5 = chronology3.centuries();
        org.joda.time.DurationField durationField6 = chronology3.hours();
        boolean boolean7 = dateTimeFieldType0.isSupported(chronology3);
        org.joda.time.DurationField durationField8 = chronology3.millis();
        org.joda.time.DurationField durationField9 = chronology3.halfdays();
        long long12 = durationField9.getValueAsLong((long) 274, 1645580415068L);
        int int15 = durationField9.getDifference((long) 443, 1645629467406L);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str19 = dateTimeZone17.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime20 = org.joda.time.LocalDateTime.now(dateTimeZone17);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str23 = dateTimeZone21.getShortName((long) (short) 10);
        long long25 = dateTimeZone21.convertUTCToLocal((long) ' ');
        java.lang.String str26 = dateTimeZone21.toString();
        boolean boolean28 = dateTimeZone21.equals((java.lang.Object) (short) 100);
        java.util.Locale locale30 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str31 = dateTimeZone21.getShortName((long) (-1), locale30);
        long long33 = dateTimeZone17.getMillisKeepLocal(dateTimeZone21, (long) (byte) -1);
        java.util.Locale locale34 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet35 = locale34.getUnicodeLocaleAttributes();
        java.lang.Object[] objArray36 = strSet35.toArray();
        java.util.Locale locale37 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet38 = locale37.getUnicodeLocaleAttributes();
        boolean boolean39 = strSet35.removeAll((java.util.Collection<java.lang.String>) strSet38);
        java.util.Locale locale40 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet41 = locale40.getUnicodeLocaleAttributes();
        org.joda.time.DurationFieldType durationFieldType42 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.DurationFieldType durationFieldType43 = org.joda.time.DurationFieldType.hours();
        org.joda.time.DurationFieldType[] durationFieldTypeArray44 = new org.joda.time.DurationFieldType[] { durationFieldType42, durationFieldType43 };
        org.joda.time.DurationFieldType[] durationFieldTypeArray45 = strSet41.toArray(durationFieldTypeArray44);
        boolean boolean46 = strSet35.containsAll((java.util.Collection<java.lang.String>) strSet41);
        java.util.Locale locale47 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet48 = locale47.getUnicodeLocaleAttributes();
        java.lang.Object[] objArray49 = strSet48.toArray();
        java.util.Locale locale50 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet51 = locale50.getUnicodeLocaleAttributes();
        boolean boolean52 = strSet48.removeAll((java.util.Collection<java.lang.String>) strSet51);
        java.util.Locale locale53 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet54 = locale53.getUnicodeLocaleAttributes();
        org.joda.time.DurationFieldType durationFieldType55 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.DurationFieldType durationFieldType56 = org.joda.time.DurationFieldType.hours();
        org.joda.time.DurationFieldType[] durationFieldTypeArray57 = new org.joda.time.DurationFieldType[] { durationFieldType55, durationFieldType56 };
        org.joda.time.DurationFieldType[] durationFieldTypeArray58 = strSet54.toArray(durationFieldTypeArray57);
        boolean boolean59 = strSet48.containsAll((java.util.Collection<java.lang.String>) strSet54);
        java.lang.Object[] objArray60 = strSet48.toArray();
        boolean boolean61 = strSet41.removeAll((java.util.Collection<java.lang.String>) strSet48);
        boolean boolean62 = dateTimeZone21.equals((java.lang.Object) boolean61);
        long long64 = dateTimeZone21.nextTransition(1645629359098L);
        org.joda.time.LocalDateTime localDateTime65 = org.joda.time.LocalDateTime.now(dateTimeZone21);
        java.lang.String str66 = dateTimeZone21.toString();
        long long69 = dateTimeZone21.convertLocalToUTC(1645629398927L, true);
        java.util.TimeZone timeZone70 = dateTimeZone21.toTimeZone();
        org.joda.time.LocalDateTime localDateTime71 = new org.joda.time.LocalDateTime(1645629772071L, dateTimeZone21);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime72 = new org.joda.time.LocalDateTime((java.lang.Object) int15, dateTimeZone21);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: java.lang.Integer");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-38093) + "'", int15 == (-38093));
        org.junit.Assert.assertNotNull(dateTimeZone17);
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "+07:10:22.088" + "'", str19, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "+07:10:22.088" + "'", str23, "+07:10:22.088");
// flaky:         org.junit.Assert.assertTrue("'" + long25 + "' != '" + 25822120L + "'", long25 == 25822120L);
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "+07:10:22.088" + "'", str26, "+07:10:22.088");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "fr_CA");
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "+07:10:22.088" + "'", str31, "+07:10:22.088");
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + (-1L) + "'", long33 == (-1L));
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "");
        org.junit.Assert.assertNotNull(strSet35);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[]");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "");
        org.junit.Assert.assertNotNull(strSet38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "");
        org.junit.Assert.assertNotNull(strSet41);
        org.junit.Assert.assertNotNull(durationFieldType42);
        org.junit.Assert.assertNotNull(durationFieldType43);
        org.junit.Assert.assertNotNull(durationFieldTypeArray44);
        org.junit.Assert.assertNotNull(durationFieldTypeArray45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "");
        org.junit.Assert.assertNotNull(strSet48);
        org.junit.Assert.assertNotNull(objArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray49), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray49), "[]");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "");
        org.junit.Assert.assertNotNull(strSet51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "");
        org.junit.Assert.assertNotNull(strSet54);
        org.junit.Assert.assertNotNull(durationFieldType55);
        org.junit.Assert.assertNotNull(durationFieldType56);
        org.junit.Assert.assertNotNull(durationFieldTypeArray57);
        org.junit.Assert.assertNotNull(durationFieldTypeArray58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(objArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray60), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray60), "[]");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 1645629359098L + "'", long64 == 1645629359098L);
        org.junit.Assert.assertNotNull(localDateTime65);
// flaky:         org.junit.Assert.assertEquals("'" + str66 + "' != '" + "+07:10:22.088" + "'", str66, "+07:10:22.088");
// flaky:         org.junit.Assert.assertTrue("'" + long69 + "' != '" + 1645603576839L + "'", long69 == 1645603576839L);
        org.junit.Assert.assertNotNull(timeZone70);
// flaky:         org.junit.Assert.assertEquals(timeZone70.getDisplayName(), "GMT+07:10");
    }

    @Test
    public void test10267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10267");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology3 = localDateTime2.getChronology();
        org.joda.time.DurationField durationField4 = chronology3.weekyears();
        org.joda.time.DurationField durationField5 = chronology3.centuries();
        org.joda.time.DurationField durationField6 = chronology3.hours();
        boolean boolean7 = durationFieldType0.isSupported(chronology3);
        org.joda.time.DateTimeField dateTimeField8 = chronology3.secondOfDay();
        org.joda.time.DateTimeField dateTimeField9 = chronology3.centuryOfEra();
        long long12 = dateTimeField9.add(1645629658297L, 151);
        java.lang.String str14 = dateTimeField9.getAsShortText(3216503530103L);
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 478155540058297L + "'", long12 == 478155540058297L);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "20" + "'", str14, "20");
    }

    @Test
    public void test10268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10268");
        org.joda.time.tz.Provider provider0 = org.joda.time.DateTimeZone.getProvider();
        org.joda.time.DateTimeZone dateTimeZone2 = provider0.getZone("26254428");
        org.joda.time.DateTimeZone.setProvider(provider0);
        org.junit.Assert.assertNotNull(provider0);
        org.junit.Assert.assertNull(dateTimeZone2);
    }

    @Test
    public void test10269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10269");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("0100-02-22T07:17:09.290", strMap1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=0100-02-22t07:17:09.290");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test10270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10270");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DurationField durationField3 = chronology2.weekyears();
        org.joda.time.DurationField durationField4 = chronology2.seconds();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str7 = dateTimeZone5.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime8 = org.joda.time.LocalDateTime.now(dateTimeZone5);
        org.joda.time.LocalDateTime.Property property9 = localDateTime8.millisOfDay();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime8.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime8.plusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.minusHours((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.withEra((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property18 = localDateTime17.secondOfMinute();
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.DateTimeField dateTimeField21 = dateTimeFieldType19.getField(chronology20);
        java.util.Locale locale23 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale24 = locale23.stripExtensions();
        java.lang.String str25 = dateTimeField21.getAsShortText(100, locale24);
        int int27 = dateTimeField21.getLeapAmount((long) (short) 100);
        java.lang.String str28 = dateTimeField21.getName();
        long long31 = dateTimeField21.add((long) (short) 1, 0);
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str34 = dateTimeZone32.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime35 = org.joda.time.LocalDateTime.now(dateTimeZone32);
        org.joda.time.LocalDateTime.Property property36 = localDateTime35.millisOfDay();
        org.joda.time.ReadableInstant readableInstant37 = null;
        long long38 = property36.getDifferenceAsLong(readableInstant37);
        org.joda.time.DurationField durationField39 = property36.getLeapDurationField();
        java.lang.String str40 = property36.getAsString();
        org.joda.time.LocalDateTime localDateTime41 = property36.roundFloorCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        org.joda.time.LocalDateTime localDateTime45 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology46 = localDateTime45.getChronology();
        org.joda.time.DurationField durationField47 = chronology46.weekyears();
        boolean boolean48 = dateTimeFieldType43.isSupported(chronology46);
        org.joda.time.LocalDateTime localDateTime49 = new org.joda.time.LocalDateTime();
        java.lang.String str50 = localDateTime49.toString();
        int int51 = localDateTime49.getCenturyOfEra();
        org.joda.time.LocalDateTime localDateTime53 = localDateTime49.minusMonths(2);
        org.joda.time.LocalDateTime.Property property54 = localDateTime53.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str57 = dateTimeZone55.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime58 = org.joda.time.LocalDateTime.now(dateTimeZone55);
        org.joda.time.LocalDateTime.Property property59 = localDateTime58.millisOfDay();
        org.joda.time.LocalDateTime localDateTime61 = localDateTime58.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime63 = localDateTime58.plusHours((int) ' ');
        org.joda.time.ReadableInstant readableInstant64 = null;
        org.joda.time.DateTime dateTime65 = localDateTime63.toDateTime(readableInstant64);
        long long66 = dateTime65.getMillis();
        org.joda.time.DateTimeZone dateTimeZone67 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str69 = dateTimeZone67.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime70 = org.joda.time.LocalDateTime.now(dateTimeZone67);
        org.joda.time.DateTimeFieldType dateTimeFieldType72 = localDateTime70.getFieldType((int) (short) 0);
        boolean boolean73 = dateTime65.isSupported(dateTimeFieldType72);
        org.joda.time.DateTime dateTime74 = localDateTime53.toDateTime((org.joda.time.ReadableInstant) dateTime65);
        int[] intArray76 = chronology46.get((org.joda.time.ReadablePartial) localDateTime53, 11L);
        int[] intArray78 = dateTimeField21.add((org.joda.time.ReadablePartial) localDateTime41, (int) (short) 10, intArray76, (int) (byte) 0);
        chronology2.validate((org.joda.time.ReadablePartial) localDateTime17, intArray76);
        org.joda.time.LocalDateTime.Property property80 = localDateTime17.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime81 = property80.roundFloorCopy();
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+07:10:22.088" + "'", str7, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "100" + "'", str25, "100");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "minuteOfDay" + "'", str28, "minuteOfDay");
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 1L + "'", long31 == 1L);
        org.junit.Assert.assertNotNull(dateTimeZone32);
// flaky:         org.junit.Assert.assertEquals("'" + str34 + "' != '" + "+07:10:22.088" + "'", str34, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(property36);
// flaky:         org.junit.Assert.assertTrue("'" + long38 + "' != '" + 25822088L + "'", long38 == 25822088L);
        org.junit.Assert.assertNull(durationField39);
// flaky:         org.junit.Assert.assertEquals("'" + str40 + "' != '" + "52431841" + "'", str40, "52431841");
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(dateTimeFieldType43);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(durationField47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str50 + "' != '" + "2022-02-22T14:33:51.841" + "'", str50, "2022-02-22T14:33:51.841");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 20 + "'", int51 == 20);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(dateTimeZone55);
// flaky:         org.junit.Assert.assertEquals("'" + str57 + "' != '" + "+07:10:22.088" + "'", str57, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNotNull(dateTime65);
// flaky:         org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1645629809753L + "'", long66 == 1645629809753L);
        org.junit.Assert.assertNotNull(dateTimeZone67);
// flaky:         org.junit.Assert.assertEquals("'" + str69 + "' != '" + "+07:10:22.088" + "'", str69, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime70);
        org.junit.Assert.assertNotNull(dateTimeFieldType72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[1970, 1, 1, 11]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[1970, 1, 1, 11]");
        org.junit.Assert.assertNotNull(property80);
        org.junit.Assert.assertNotNull(localDateTime81);
    }

    @Test
    public void test10271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10271");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology3 = localDateTime2.getChronology();
        org.joda.time.DurationField durationField4 = chronology3.weekyears();
        org.joda.time.DurationField durationField5 = chronology3.centuries();
        org.joda.time.DurationField durationField6 = chronology3.hours();
        boolean boolean7 = dateTimeFieldType0.isSupported(chronology3);
        org.joda.time.DateTimeField dateTimeField8 = chronology3.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField9 = chronology3.weekyear();
        java.util.Locale locale11 = java.util.Locale.GERMAN;
        java.util.Locale.setDefault(locale11);
        java.util.Locale locale13 = java.util.Locale.CANADA;
        boolean boolean14 = locale13.hasExtensions();
        java.lang.String str15 = locale11.getDisplayScript(locale13);
        java.lang.String str16 = dateTimeField9.getAsText(21, locale11);
        long long18 = dateTimeField9.roundCeiling((long) 97);
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime();
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.LocalDateTime localDateTime22 = localDateTime19.withDurationAdded(readableDuration20, (int) '#');
        org.joda.time.LocalDateTime.Property property23 = localDateTime22.weekyear();
        java.lang.String str24 = property23.getAsString();
        org.joda.time.LocalDateTime localDateTime26 = property23.setCopy(67);
        org.joda.time.LocalDateTime localDateTime28 = property23.setCopy((int) (byte) 1);
        int int29 = dateTimeField9.getMaximumValue((org.joda.time.ReadablePartial) localDateTime28);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime28.plusDays(26253611);
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str34 = dateTimeZone32.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime35 = org.joda.time.LocalDateTime.now(dateTimeZone32);
        org.joda.time.LocalDateTime.Property property36 = localDateTime35.millisOfDay();
        org.joda.time.DurationFieldType durationFieldType37 = org.joda.time.DurationFieldType.centuries();
        boolean boolean38 = localDateTime35.equals((java.lang.Object) durationFieldType37);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray39 = localDateTime35.getFieldTypes();
        java.lang.String str40 = localDateTime35.toString();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter41 = null;
        java.lang.String str42 = localDateTime35.toString(dateTimeFormatter41);
        int int43 = localDateTime35.size();
        org.joda.time.LocalDateTime.Property property44 = localDateTime35.secondOfMinute();
        int int45 = localDateTime35.getWeekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime47 = localDateTime35.minusMillis(26181236);
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str50 = dateTimeZone48.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime51 = org.joda.time.LocalDateTime.now(dateTimeZone48);
        org.joda.time.LocalDateTime.Property property52 = localDateTime51.millisOfDay();
        org.joda.time.DurationFieldType durationFieldType53 = org.joda.time.DurationFieldType.centuries();
        boolean boolean54 = localDateTime51.equals((java.lang.Object) durationFieldType53);
        org.joda.time.LocalDateTime localDateTime56 = localDateTime51.withWeekOfWeekyear((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime58 = localDateTime51.plusDays(67);
        org.joda.time.LocalDateTime localDateTime60 = localDateTime58.minusHours(17);
        org.joda.time.DateTimeZone dateTimeZone61 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str63 = dateTimeZone61.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime64 = org.joda.time.LocalDateTime.now(dateTimeZone61);
        org.joda.time.LocalDateTime.Property property65 = localDateTime64.millisOfDay();
        org.joda.time.LocalDateTime localDateTime67 = localDateTime64.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime69 = localDateTime64.plusHours((int) ' ');
        org.joda.time.ReadableInstant readableInstant70 = null;
        org.joda.time.DateTime dateTime71 = localDateTime69.toDateTime(readableInstant70);
        long long72 = dateTime71.getMillis();
        org.joda.time.DateTimeFieldType dateTimeFieldType73 = org.joda.time.DateTimeFieldType.hourOfDay();
        boolean boolean74 = dateTime71.isSupported(dateTimeFieldType73);
        int int75 = localDateTime58.indexOf(dateTimeFieldType73);
        org.joda.time.DurationFieldType durationFieldType76 = dateTimeFieldType73.getRangeDurationType();
        boolean boolean77 = localDateTime35.isSupported(durationFieldType76);
        org.joda.time.LocalDateTime localDateTime79 = localDateTime31.withFieldAdded(durationFieldType76, 26154433);
        org.joda.time.LocalDateTime.Property property80 = localDateTime31.monthOfYear();
        int int81 = property80.getLeapAmount();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "de");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "en_CA");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "21" + "'", str16, "21");
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 31795200000L + "'", long18 == 31795200000L);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "2022" + "'", str24, "2022");
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 292278993 + "'", int29 == 292278993);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(dateTimeZone32);
// flaky:         org.junit.Assert.assertEquals("'" + str34 + "' != '" + "+07:10:22.088" + "'", str34, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(durationFieldType37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray39);
// flaky:         org.junit.Assert.assertEquals("'" + str40 + "' != '" + "2022-02-22T14:33:51.887" + "'", str40, "2022-02-22T14:33:51.887");
// flaky:         org.junit.Assert.assertEquals("'" + str42 + "' != '" + "2022-02-22T14:33:51.887" + "'", str42, "2022-02-22T14:33:51.887");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 4 + "'", int43 == 4);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 8 + "'", int45 == 8);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(dateTimeZone48);
// flaky:         org.junit.Assert.assertEquals("'" + str50 + "' != '" + "+07:10:22.088" + "'", str50, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(durationFieldType53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(dateTimeZone61);
// flaky:         org.junit.Assert.assertEquals("'" + str63 + "' != '" + "+07:10:22.088" + "'", str63, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertNotNull(localDateTime69);
        org.junit.Assert.assertNotNull(dateTime71);
// flaky:         org.junit.Assert.assertTrue("'" + long72 + "' != '" + 1645629809799L + "'", long72 == 1645629809799L);
        org.junit.Assert.assertNotNull(dateTimeFieldType73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-1) + "'", int75 == (-1));
        org.junit.Assert.assertNotNull(durationFieldType76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(localDateTime79);
        org.junit.Assert.assertNotNull(property80);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
    }

    @Test
    public void test10272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10272");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.days();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology3 = localDateTime2.getChronology();
        org.joda.time.DurationField durationField4 = chronology3.hours();
        org.joda.time.DurationField durationField5 = durationFieldType0.getField(chronology3);
        org.joda.time.Chronology chronology6 = chronology3.withUTC();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField8 = chronology6.secondOfDay();
        int int10 = dateTimeField8.get(1645629437358L);
        boolean boolean11 = dateTimeField8.isSupported();
        java.lang.String str13 = dateTimeField8.getAsShortText(1645629474466L);
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 55037 + "'", int10 == 55037);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "55074" + "'", str13, "55074");
    }

    @Test
    public void test10273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10273");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        org.joda.time.LocalDateTime localDateTime3 = localDateTime0.withDurationAdded(readableDuration1, (int) '#');
        org.joda.time.LocalDateTime.Property property4 = localDateTime0.era();
        int int5 = localDateTime0.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime0.withWeekOfWeekyear((int) (byte) 1);
        int int8 = localDateTime0.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime0.plusDays(500);
        org.joda.time.DurationFieldType durationFieldType11 = org.joda.time.DurationFieldType.days();
        java.lang.String str12 = durationFieldType11.toString();
        boolean boolean13 = localDateTime10.isSupported(durationFieldType11);
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology17 = localDateTime16.getChronology();
        org.joda.time.DurationField durationField18 = chronology17.weekyears();
        org.joda.time.DurationField durationField19 = chronology17.centuries();
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime((long) (byte) 0, chronology17);
        org.joda.time.DurationField durationField21 = chronology17.millis();
        org.joda.time.DateTimeField dateTimeField22 = chronology17.minuteOfDay();
        org.joda.time.DurationField durationField23 = durationFieldType11.getField(chronology17);
        org.joda.time.DateTimeField dateTimeField24 = chronology17.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField25 = chronology17.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField26 = chronology17.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField27 = chronology17.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str30 = dateTimeZone28.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime31 = org.joda.time.LocalDateTime.now(dateTimeZone28);
        org.joda.time.LocalDateTime.Property property32 = localDateTime31.millisOfDay();
        org.joda.time.ReadableInstant readableInstant33 = null;
        long long34 = property32.getDifferenceAsLong(readableInstant33);
        java.util.Locale locale35 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str36 = locale35.getISO3Language();
        java.lang.String str37 = property32.getAsShortText(locale35);
        org.joda.time.DurationField durationField38 = property32.getDurationField();
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime();
        java.lang.String str40 = localDateTime39.toString();
        int int41 = localDateTime39.getCenturyOfEra();
        org.joda.time.LocalDateTime localDateTime43 = localDateTime39.minusMonths(2);
        org.joda.time.LocalDateTime.Property property44 = localDateTime43.millisOfSecond();
        org.joda.time.ReadablePeriod readablePeriod45 = null;
        org.joda.time.LocalDateTime localDateTime47 = localDateTime43.withPeriodAdded(readablePeriod45, 56);
        org.joda.time.ReadableDuration readableDuration48 = null;
        org.joda.time.LocalDateTime localDateTime49 = localDateTime47.minus(readableDuration48);
        int[] intArray50 = localDateTime49.getValues();
        int int51 = property32.compareTo((org.joda.time.ReadablePartial) localDateTime49);
        org.joda.time.LocalDateTime localDateTime53 = localDateTime49.plusWeeks(26371056);
        org.joda.time.ReadablePeriod readablePeriod54 = null;
        org.joda.time.LocalDateTime localDateTime56 = localDateTime53.withPeriodAdded(readablePeriod54, 26169744);
        org.joda.time.LocalDateTime localDateTime58 = localDateTime53.minusHours(373);
        long long60 = chronology17.set((org.joda.time.ReadablePartial) localDateTime58, (long) 26464549);
        org.joda.time.DurationField durationField61 = chronology17.weekyears();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 22 + "'", int5 == 22);
        org.junit.Assert.assertNotNull(localDateTime7);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 14 + "'", int8 == 14);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(durationFieldType11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "days" + "'", str12, "days");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeZone28);
// flaky:         org.junit.Assert.assertEquals("'" + str30 + "' != '" + "+07:10:22.088" + "'", str30, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(property32);
// flaky:         org.junit.Assert.assertTrue("'" + long34 + "' != '" + 25822088L + "'", long34 == 25822088L);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "fra" + "'", str36, "fra");
// flaky:         org.junit.Assert.assertEquals("'" + str37 + "' != '" + "52431970" + "'", str37, "52431970");
        org.junit.Assert.assertNotNull(durationField38);
// flaky:         org.junit.Assert.assertEquals("'" + str40 + "' != '" + "2022-02-22T14:33:51.970" + "'", str40, "2022-02-22T14:33:51.970");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 20 + "'", int41 == 20);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(intArray50);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[2021, 12, 22, 52431970]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(localDateTime58);
// flaky:         org.junit.Assert.assertTrue("'" + long60 + "' != '" + 15950853509631970L + "'", long60 == 15950853509631970L);
        org.junit.Assert.assertNotNull(durationField61);
    }

    @Test
    public void test10274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10274");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        org.joda.time.LocalDateTime localDateTime3 = localDateTime0.withDurationAdded(readableDuration1, (int) '#');
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.weekyear();
        int int5 = property4.getMaximumValue();
        org.joda.time.DateTimeField dateTimeField6 = property4.getField();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str9 = dateTimeZone7.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime10 = org.joda.time.LocalDateTime.now(dateTimeZone7);
        org.joda.time.LocalDateTime.Property property11 = localDateTime10.millisOfDay();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime10.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime10.plusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.minusHours((int) (short) 10);
        int int18 = dateTimeField6.getMinimumValue((org.joda.time.ReadablePartial) localDateTime17);
        java.lang.String str20 = dateTimeField6.getAsText((long) (-292275054));
        int int21 = dateTimeField6.getMinimumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = dateTimeField6.getType();
        org.joda.time.DurationFieldType durationFieldType23 = org.joda.time.DurationFieldType.centuries();
        java.lang.String str24 = durationFieldType23.getName();
        org.joda.time.DurationFieldType durationFieldType25 = org.joda.time.DurationFieldType.days();
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology28 = localDateTime27.getChronology();
        org.joda.time.DurationField durationField29 = chronology28.hours();
        org.joda.time.DurationField durationField30 = durationFieldType25.getField(chronology28);
        org.joda.time.Chronology chronology31 = chronology28.withUTC();
        org.joda.time.DateTimeField dateTimeField32 = chronology31.era();
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime(chronology31);
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str36 = dateTimeZone34.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime37 = org.joda.time.LocalDateTime.now(dateTimeZone34);
        org.joda.time.LocalDateTime.Property property38 = localDateTime37.millisOfDay();
        java.lang.String str39 = property38.getName();
        org.joda.time.LocalDateTime localDateTime40 = property38.roundHalfFloorCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        boolean boolean42 = localDateTime40.isSupported(dateTimeFieldType41);
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str45 = dateTimeZone43.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime46 = org.joda.time.LocalDateTime.now(dateTimeZone43);
        org.joda.time.LocalDateTime.Property property47 = localDateTime46.millisOfDay();
        org.joda.time.DurationFieldType durationFieldType48 = org.joda.time.DurationFieldType.centuries();
        boolean boolean49 = localDateTime46.equals((java.lang.Object) durationFieldType48);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray50 = localDateTime46.getFieldTypes();
        java.lang.String str51 = localDateTime46.toString();
        org.joda.time.LocalDateTime localDateTime53 = localDateTime46.plusMillis(22);
        boolean boolean54 = localDateTime40.isBefore((org.joda.time.ReadablePartial) localDateTime53);
        org.joda.time.ReadableDuration readableDuration55 = null;
        org.joda.time.LocalDateTime localDateTime56 = localDateTime53.plus(readableDuration55);
        org.joda.time.ReadableDuration readableDuration57 = null;
        org.joda.time.LocalDateTime localDateTime59 = localDateTime56.withDurationAdded(readableDuration57, 26169);
        org.joda.time.DateTime dateTime60 = localDateTime56.toDateTime();
        int[] intArray62 = chronology31.get((org.joda.time.ReadablePartial) localDateTime56, 1645629355285L);
        org.joda.time.DurationField durationField63 = durationFieldType23.getField(chronology31);
        org.joda.time.DateTimeField dateTimeField64 = dateTimeFieldType22.getField(chronology31);
        org.joda.time.DateTimeField dateTimeField65 = chronology31.weekyear();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 292278993 + "'", int5 == 292278993);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+07:10:22.088" + "'", str9, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-292275054) + "'", int18 == (-292275054));
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "1969" + "'", str20, "1969");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-292275054) + "'", int21 == (-292275054));
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(durationFieldType23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "centuries" + "'", str24, "centuries");
        org.junit.Assert.assertNotNull(durationFieldType25);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeZone34);
// flaky:         org.junit.Assert.assertEquals("'" + str36 + "' != '" + "+07:10:22.088" + "'", str36, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "millisOfDay" + "'", str39, "millisOfDay");
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(dateTimeFieldType41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(dateTimeZone43);
// flaky:         org.junit.Assert.assertEquals("'" + str45 + "' != '" + "+07:10:22.088" + "'", str45, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(durationFieldType48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray50);
// flaky:         org.junit.Assert.assertEquals("'" + str51 + "' != '" + "2022-02-22T14:33:52.012" + "'", str51, "2022-02-22T14:33:52.012");
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[2022, 2, 23, 54955285]");
        org.junit.Assert.assertNotNull(durationField63);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertNotNull(dateTimeField65);
    }

    @Test
    public void test10275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10275");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.millisOfDay();
        int int5 = localDateTime3.getCenturyOfEra();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime3.withSecondOfMinute(21);
        org.joda.time.LocalDateTime.Property property8 = localDateTime3.millisOfSecond();
        int int9 = property8.getMinimumValueOverall();
        int int10 = property8.get();
        org.junit.Assert.assertNotNull(dateTimeZone0);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+07:10:22.088" + "'", str2, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 20 + "'", int5 == 20);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 47 + "'", int10 == 47);
    }

    @Test
    public void test10276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10276");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.weekyears();
        java.lang.String str1 = durationFieldType0.toString();
        org.joda.time.DurationFieldType durationFieldType2 = org.joda.time.DurationFieldType.millis();
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology5 = localDateTime4.getChronology();
        org.joda.time.DurationField durationField6 = chronology5.weekyears();
        org.joda.time.DurationField durationField7 = chronology5.centuries();
        org.joda.time.DurationField durationField8 = durationFieldType2.getField(chronology5);
        boolean boolean9 = durationFieldType0.isSupported(chronology5);
        org.joda.time.DateTimeField dateTimeField10 = chronology5.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField11 = chronology5.weekyear();
        org.joda.time.DateTimeField dateTimeField12 = chronology5.minuteOfHour();
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "weekyears" + "'", str1, "weekyears");
        org.junit.Assert.assertNotNull(durationFieldType2);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
    }

    @Test
    public void test10277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10277");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.millisOfDay();
        int int5 = localDateTime3.getCenturyOfEra();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime3.withSecondOfMinute(21);
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTimeField dateTimeField10 = dateTimeFieldType8.getField(chronology9);
        org.joda.time.DurationField durationField11 = dateTimeField10.getRangeDurationField();
        long long13 = dateTimeField10.remainder(1L);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = dateTimeField10.getType();
        int int15 = localDateTime3.indexOf(dateTimeFieldType14);
        java.lang.String str16 = dateTimeFieldType14.getName();
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology19 = localDateTime18.getChronology();
        org.joda.time.DateTimeField dateTimeField20 = dateTimeFieldType14.getField(chronology19);
        long long23 = dateTimeField20.add(1645603788197L, 55257344);
        org.junit.Assert.assertNotNull(dateTimeZone0);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+07:10:22.088" + "'", str2, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 20 + "'", int5 == 20);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
// flaky:         org.junit.Assert.assertTrue("'" + long13 + "' != '" + 22089L + "'", long13 == 22089L);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "minuteOfDay" + "'", str16, "minuteOfDay");
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 4961044428197L + "'", long23 == 4961044428197L);
    }

    @Test
    public void test10278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10278");
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology3 = localDateTime2.getChronology();
        org.joda.time.DurationField durationField4 = chronology3.weekyears();
        org.joda.time.DurationField durationField5 = chronology3.centuries();
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime((long) (byte) 0, chronology3);
        org.joda.time.DurationField durationField7 = chronology3.millis();
        org.joda.time.DateTimeField dateTimeField8 = chronology3.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField9 = chronology3.millisOfDay();
        org.joda.time.DateTimeField dateTimeField10 = chronology3.dayOfMonth();
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
    }

    @Test
    public void test10279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10279");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.millisOfDay();
        long long5 = property4.remainder();
        org.joda.time.LocalDateTime localDateTime6 = property4.roundFloorCopy();
        java.lang.String str7 = property4.getAsShortText();
        org.joda.time.DurationField durationField8 = property4.getRangeDurationField();
        java.lang.String str9 = property4.getName();
        org.joda.time.LocalDateTime localDateTime10 = property4.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.withDayOfYear(166);
        int int13 = localDateTime10.getDayOfMonth();
        org.junit.Assert.assertNotNull(dateTimeZone0);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+07:10:22.088" + "'", str2, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertNotNull(localDateTime6);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "52432115" + "'", str7, "52432115");
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "millisOfDay" + "'", str9, "millisOfDay");
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 22 + "'", int13 == 22);
    }

    @Test
    public void test10280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10280");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str3 = dateTimeZone1.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.LocalDateTime.Property property5 = localDateTime4.millisOfDay();
        org.joda.time.DurationFieldType durationFieldType6 = org.joda.time.DurationFieldType.centuries();
        boolean boolean7 = localDateTime4.equals((java.lang.Object) durationFieldType6);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray8 = localDateTime4.getFieldTypes();
        java.lang.String str9 = localDateTime4.toString();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime4.plusMillis(22);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime4.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology14 = localDateTime4.getChronology();
        org.joda.time.DurationField durationField15 = chronology14.years();
        org.joda.time.DateTimeZone dateTimeZone16 = chronology14.getZone();
        int int18 = dateTimeZone16.getOffset(1645629450743L);
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime((long) 26449059, dateTimeZone16);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone16);
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+07:10:22.088" + "'", str3, "+07:10:22.088");
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(durationFieldType6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray8);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "2022-02-22T14:33:52.126" + "'", str9, "2022-02-22T14:33:52.126");
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
    }

    @Test
    public void test10281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10281");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DurationField durationField3 = chronology2.weekyears();
        org.joda.time.DateTimeField dateTimeField4 = chronology2.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField5 = chronology2.secondOfDay();
        org.joda.time.DateTimeField dateTimeField6 = chronology2.dayOfYear();
        org.joda.time.DateTimeField dateTimeField7 = chronology2.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str10 = dateTimeZone8.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now(dateTimeZone8);
        org.joda.time.LocalDateTime.Property property12 = localDateTime11.millisOfDay();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime11.withYear((int) (short) 100);
        org.joda.time.LocalDateTime.Property property15 = localDateTime14.weekyear();
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.LocalDateTime localDateTime17 = localDateTime14.minus(readablePeriod16);
        org.joda.time.LocalDateTime.Property property18 = localDateTime14.yearOfEra();
        org.joda.time.LocalDateTime localDateTime19 = property18.withMaximumValue();
        long long21 = chronology2.set((org.joda.time.ReadablePartial) localDateTime19, 0L);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+00:00" + "'", str10, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localDateTime19);
// flaky:         org.junit.Assert.assertTrue("'" + long21 + "' != '" + 9223371990113010078L + "'", long21 == 9223371990113010078L);
    }

    @Test
    public void test10282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10282");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology3 = localDateTime2.getChronology();
        org.joda.time.DurationField durationField4 = chronology3.weekyears();
        org.joda.time.DurationField durationField5 = chronology3.centuries();
        org.joda.time.DurationField durationField6 = chronology3.hours();
        boolean boolean7 = durationFieldType0.isSupported(chronology3);
        org.joda.time.DateTimeField dateTimeField8 = chronology3.year();
        org.joda.time.DateTimeField dateTimeField9 = chronology3.year();
        org.joda.time.DateTimeField dateTimeField10 = chronology3.yearOfCentury();
        long long12 = dateTimeField10.roundCeiling(86401022L);
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 31536000000L + "'", long12 == 31536000000L);
    }

    @Test
    public void test10283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10283");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DateTimeField dateTimeField3 = chronology2.halfdayOfDay();
        org.joda.time.DurationField durationField4 = dateTimeField3.getRangeDurationField();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str7 = dateTimeZone5.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime8 = org.joda.time.LocalDateTime.now(dateTimeZone5);
        org.joda.time.LocalDateTime.Property property9 = localDateTime8.millisOfDay();
        java.lang.String str10 = property9.getName();
        org.joda.time.LocalDateTime localDateTime11 = property9.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.plusYears((int) (short) -1);
        int[] intArray21 = new int[] { 'a', (-1), 10, 26151696, 4, (byte) 1 };
        int[] intArray23 = dateTimeField3.set((org.joda.time.ReadablePartial) localDateTime11, 0, intArray21, (int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str26 = dateTimeZone24.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime27 = org.joda.time.LocalDateTime.now(dateTimeZone24);
        org.joda.time.LocalDateTime.Property property28 = localDateTime27.millisOfDay();
        org.joda.time.LocalDateTime localDateTime30 = localDateTime27.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime27.plusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime34 = localDateTime32.minusHours((int) (short) 10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray35 = localDateTime32.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime37 = localDateTime32.withMillisOfDay((int) '4');
        boolean boolean38 = localDateTime11.isBefore((org.joda.time.ReadablePartial) localDateTime32);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime32.minusMinutes(2922789);
        java.util.Date date41 = localDateTime40.toDate();
        org.joda.time.LocalDateTime.Property property42 = localDateTime40.weekOfWeekyear();
        int int43 = property42.getLeapAmount();
        org.joda.time.LocalDateTime localDateTime45 = property42.addToCopy(0);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime47 = property42.addToCopy(1645629596380L);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows a long: 1645629596380 * 604800000");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+00:00" + "'", str7, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "millisOfDay" + "'", str10, "millisOfDay");
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[0, 1, 10, 26151696, 4, 1]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[0, 1, 10, 26151696, 4, 1]");
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "+00:00" + "'", str26, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(date41);
// flaky:         org.junit.Assert.assertEquals(date41.toString(), "Wed Aug 03 22:14:30 GMT+07:16 2016");
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(localDateTime45);
    }

    @Test
    public void test10284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10284");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeField dateTimeField2 = dateTimeFieldType0.getField(chronology1);
        java.util.Locale locale4 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale5 = locale4.stripExtensions();
        java.lang.String str6 = dateTimeField2.getAsShortText(100, locale5);
        int int8 = dateTimeField2.getLeapAmount((long) (short) 100);
        java.lang.String str9 = dateTimeField2.getName();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = dateTimeField2.getType();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str13 = dateTimeZone11.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime14 = org.joda.time.LocalDateTime.now(dateTimeZone11);
        org.joda.time.LocalDateTime.Property property15 = localDateTime14.millisOfDay();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime14.withYear((int) (short) 100);
        org.joda.time.LocalDateTime.Property property18 = localDateTime17.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime17.minusMonths(2022);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.withMinuteOfHour((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime20.plusWeeks((int) 'x');
        org.joda.time.LocalDateTime localDateTime26 = localDateTime20.withWeekyear(24);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime20.minusSeconds((int) (byte) 1);
        java.util.Locale locale29 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet30 = locale29.getUnicodeLocaleAttributes();
        java.lang.String str31 = dateTimeField2.getAsText((org.joda.time.ReadablePartial) localDateTime28, locale29);
        java.util.Set<java.lang.Character> charSet32 = locale29.getExtensionKeys();
        java.util.Locale locale33 = locale29.stripExtensions();
        java.lang.String str34 = locale33.getLanguage();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "100" + "'", str6, "100");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "minuteOfDay" + "'", str9, "minuteOfDay");
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+00:00" + "'", str13, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "");
        org.junit.Assert.assertNotNull(strSet30);
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "443" + "'", str31, "443");
        org.junit.Assert.assertNotNull(charSet32);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
    }

    @Test
    public void test10285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10285");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.millisOfDay();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime3.withYear((int) (short) 100);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.minuteOfHour();
        int int8 = property7.get();
        org.joda.time.LocalDateTime localDateTime10 = property7.setCopy((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime11 = property7.roundCeilingCopy();
        org.joda.time.DateTimeField[] dateTimeFieldArray12 = localDateTime11.getFields();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str15 = dateTimeZone13.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime16 = org.joda.time.LocalDateTime.now(dateTimeZone13);
        org.joda.time.LocalDateTime.Property property17 = localDateTime16.millisOfDay();
        org.joda.time.DurationFieldType durationFieldType18 = org.joda.time.DurationFieldType.centuries();
        boolean boolean19 = localDateTime16.equals((java.lang.Object) durationFieldType18);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray20 = localDateTime16.getFieldTypes();
        java.lang.String str21 = localDateTime16.toString();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime16.plusMillis(22);
        org.joda.time.LocalDateTime.Property property24 = localDateTime16.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str27 = dateTimeZone25.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime28 = org.joda.time.LocalDateTime.now(dateTimeZone25);
        org.joda.time.LocalDateTime.Property property29 = localDateTime28.millisOfDay();
        java.lang.String str30 = property29.getName();
        int int31 = property29.getMaximumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = property29.getFieldType();
        int int33 = localDateTime16.indexOf(dateTimeFieldType32);
        org.joda.time.LocalDateTime.Property property34 = localDateTime11.property(dateTimeFieldType32);
        org.joda.time.DurationFieldType durationFieldType35 = dateTimeFieldType32.getRangeDurationType();
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology40 = localDateTime39.getChronology();
        org.joda.time.DateTimeField dateTimeField41 = chronology40.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField42 = chronology40.minuteOfDay();
        org.joda.time.LocalDateTime localDateTime43 = new org.joda.time.LocalDateTime((-100L), chronology40);
        org.joda.time.DateTimeField dateTimeField44 = chronology40.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime45 = new org.joda.time.LocalDateTime(120L, chronology40);
        boolean boolean46 = durationFieldType35.isSupported(chronology40);
        org.joda.time.DateTimeField dateTimeField47 = chronology40.clockhourOfDay();
        java.lang.String str48 = dateTimeField47.getName();
        java.lang.String str50 = dateTimeField47.getAsText((long) 320);
        java.lang.String str51 = dateTimeField47.getName();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00" + "'", str2, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 23 + "'", int8 == 23);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTimeFieldArray12);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+00:00" + "'", str15, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(durationFieldType18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray20);
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "2022-02-22T07:23:30.134" + "'", str21, "2022-02-22T07:23:30.134");
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "+00:00" + "'", str27, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "millisOfDay" + "'", str30, "millisOfDay");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 86399999 + "'", int31 == 86399999);
        org.junit.Assert.assertNotNull(dateTimeFieldType32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 3 + "'", int33 == 3);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(durationFieldType35);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "clockhourOfDay" + "'", str48, "clockhourOfDay");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "24" + "'", str50, "24");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "clockhourOfDay" + "'", str51, "clockhourOfDay");
    }

    @Test
    public void test10286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10286");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DurationField durationField3 = chronology2.weekyears();
        org.joda.time.DurationField durationField4 = chronology2.seconds();
        org.joda.time.DurationField durationField5 = chronology2.seconds();
        org.joda.time.DurationField durationField6 = chronology2.hours();
        org.joda.time.DateTimeField dateTimeField7 = chronology2.weekyearOfCentury();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = dateTimeField7.getType();
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
    }

    @Test
    public void test10287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10287");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getShortName((long) (short) 10);
        long long4 = dateTimeZone0.convertUTCToLocal((long) ' ');
        java.lang.String str5 = dateTimeZone0.toString();
        long long8 = dateTimeZone0.adjustOffset((long) (short) 100, false);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone0);
        java.lang.Object obj10 = null;
        boolean boolean11 = dateTimeZone0.equals(obj10);
        java.lang.String str13 = dateTimeZone0.getNameKey(1645514497033L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00" + "'", str2, "+00:00");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 32L + "'", long4 == 32L);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "UTC" + "'", str5, "UTC");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 100L + "'", long8 == 100L);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "UTC" + "'", str13, "UTC");
    }

    @Test
    public void test10288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10288");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.addUnicodeLocaleAttribute("und");
        java.util.Locale locale3 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale4 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str5 = locale3.getDisplayCountry(locale4);
        java.lang.String str6 = locale4.getDisplayName();
        java.util.Locale.Builder builder7 = builder2.setLocale(locale4);
        java.util.Locale.Builder builder8 = builder2.clearExtensions();
        java.util.Locale.Builder builder10 = builder8.removeUnicodeLocaleAttribute("26158400");
        java.util.Locale.Builder builder12 = builder10.setVariant("26307336");
        java.util.Locale.Builder builder14 = builder12.setScript("");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder17 = builder12.setExtension('x', "2022-02-22T07:22:52.099");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed extension value: 22T07:22:52.099 [at index 8]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Canada" + "'", str5, "Canada");
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "fran\347ais (Canada)" + "'", str6, "fran\347ais (Canada)");
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test10289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10289");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.millisOfDay();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime3.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime3.plusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minusHours((int) (short) 10);
        int int11 = localDateTime8.getMinuteOfHour();
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.LocalDateTime localDateTime13 = localDateTime8.minus(readablePeriod12);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str16 = dateTimeZone14.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime17 = org.joda.time.LocalDateTime.now(dateTimeZone14);
        org.joda.time.LocalDateTime.Property property18 = localDateTime17.millisOfDay();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime17.withYear((int) (short) 100);
        int int21 = localDateTime20.getCenturyOfEra();
        boolean boolean22 = localDateTime8.isBefore((org.joda.time.ReadablePartial) localDateTime20);
        int int23 = localDateTime20.getDayOfYear();
        int int24 = localDateTime20.getDayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str27 = dateTimeZone25.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime28 = org.joda.time.LocalDateTime.now(dateTimeZone25);
        org.joda.time.LocalDateTime.Property property29 = localDateTime28.millisOfDay();
        java.lang.String str30 = property29.getName();
        org.joda.time.LocalDateTime localDateTime31 = property29.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime33 = property29.addToCopy(0L);
        java.lang.String str34 = property29.getAsString();
        org.joda.time.LocalDateTime localDateTime35 = property29.roundCeilingCopy();
        org.joda.time.LocalDateTime localDateTime37 = localDateTime35.withWeekyear(56);
        int int38 = localDateTime20.compareTo((org.joda.time.ReadablePartial) localDateTime37);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime20.plusMinutes((-1));
        org.joda.time.LocalDateTime localDateTime42 = localDateTime20.minusMillis(100);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00" + "'", str2, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 23 + "'", int11 == 23);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+00:00" + "'", str16, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 53 + "'", int23 == 53);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 22 + "'", int24 == 22);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "+00:00" + "'", str27, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "millisOfDay" + "'", str30, "millisOfDay");
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime33);
// flaky:         org.junit.Assert.assertEquals("'" + str34 + "' != '" + "26610241" + "'", str34, "26610241");
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(localDateTime42);
    }

    @Test
    public void test10290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10290");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        org.joda.time.LocalDateTime localDateTime3 = localDateTime0.withDurationAdded(readableDuration1, (int) '#');
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.withYear(0);
        int int6 = localDateTime5.getDayOfYear();
        org.joda.time.LocalDateTime.Property property7 = localDateTime5.weekOfWeekyear();
        org.joda.time.LocalDateTime.Property property8 = localDateTime5.millisOfSecond();
        boolean boolean9 = property8.isLeap();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 53 + "'", int6 == 53);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test10291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10291");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.weekyears();
        java.lang.String str1 = durationFieldType0.toString();
        org.joda.time.DurationFieldType durationFieldType2 = org.joda.time.DurationFieldType.millis();
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology5 = localDateTime4.getChronology();
        org.joda.time.DurationField durationField6 = chronology5.weekyears();
        org.joda.time.DurationField durationField7 = chronology5.centuries();
        org.joda.time.DurationField durationField8 = durationFieldType2.getField(chronology5);
        boolean boolean9 = durationFieldType0.isSupported(chronology5);
        org.joda.time.DateTimeField dateTimeField10 = chronology5.millisOfDay();
        org.joda.time.Chronology chronology11 = chronology5.withUTC();
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "weekyears" + "'", str1, "weekyears");
        org.junit.Assert.assertNotNull(durationFieldType2);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(chronology11);
    }

    @Test
    public void test10292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10292");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DateTimeField dateTimeField3 = chronology2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone4 = chronology2.getZone();
        org.joda.time.DurationField durationField5 = chronology2.centuries();
        org.joda.time.DurationField durationField6 = chronology2.years();
        org.joda.time.DateTimeField dateTimeField7 = chronology2.millisOfDay();
        org.joda.time.DateTimeField dateTimeField8 = chronology2.hourOfDay();
        long long10 = dateTimeField8.roundCeiling(1645629491065L);
        long long12 = dateTimeField8.roundHalfFloor(1645629433809L);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1645632000000L + "'", long10 == 1645632000000L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1645628400000L + "'", long12 == 1645628400000L);
    }

    @Test
    public void test10293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10293");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.millisOfDay();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime3.withYear((int) (short) 100);
        org.joda.time.LocalDateTime.Property property7 = localDateTime3.dayOfMonth();
        int int8 = localDateTime3.getSecondOfMinute();
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.LocalDateTime localDateTime11 = localDateTime3.withPeriodAdded(readablePeriod9, (int) (short) 100);
        org.joda.time.LocalDateTime.Property property12 = localDateTime11.centuryOfEra();
        boolean boolean13 = property12.isLeap();
        java.util.Locale.Builder builder14 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder16 = builder14.addUnicodeLocaleAttribute("und");
        java.util.Locale locale17 = builder16.build();
        java.util.Locale locale18 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet19 = locale18.getUnicodeLocaleAttributes();
        java.util.Set<java.lang.String> strSet20 = locale18.getUnicodeLocaleAttributes();
        java.lang.String str21 = locale18.getVariant();
        java.util.Locale.Builder builder22 = builder16.setLocale(locale18);
        java.util.Locale.Builder builder24 = builder16.setRegion("");
        java.util.Locale locale25 = builder24.build();
        java.util.Locale.Builder builder26 = builder24.clear();
        java.util.Locale.Builder builder27 = builder26.clear();
        boolean boolean28 = property12.equals((java.lang.Object) builder26);
        int int29 = property12.getLeapAmount();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00" + "'", str2, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 30 + "'", int8 == 30);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "");
        org.junit.Assert.assertNotNull(strSet19);
        org.junit.Assert.assertNotNull(strSet20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "");
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
    }

    @Test
    public void test10294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10294");
        java.util.Locale locale2 = new java.util.Locale("halfdays", "dayOfMonth");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str3 = locale2.getISO3Country();
            org.junit.Assert.fail("Expected exception of type java.util.MissingResourceException; message: Couldn't find 3-letter country code for DAYOFMONTH");
        } catch (java.util.MissingResourceException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(locale2.toString(), "halfdays_DAYOFMONTH");
    }

    @Test
    public void test10295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10295");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        org.joda.time.LocalDateTime localDateTime3 = localDateTime0.withDurationAdded(readableDuration1, (int) '#');
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.weekyear();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime3.minusMillis((-1));
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str9 = dateTimeZone7.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime10 = org.joda.time.LocalDateTime.now(dateTimeZone7);
        org.joda.time.LocalDateTime.Property property11 = localDateTime10.millisOfDay();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime10.withYear((int) (short) 100);
        java.lang.String str14 = localDateTime13.toString();
        boolean boolean15 = localDateTime3.isAfter((org.joda.time.ReadablePartial) localDateTime13);
        java.util.Locale locale16 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet17 = locale16.getUnicodeLocaleAttributes();
        java.lang.Object[] objArray18 = strSet17.toArray();
        boolean boolean19 = strSet17.isEmpty();
        java.util.Locale locale20 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet21 = locale20.getUnicodeLocaleAttributes();
        java.lang.Object[] objArray22 = strSet21.toArray();
        java.util.Locale locale23 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet24 = locale23.getUnicodeLocaleAttributes();
        boolean boolean25 = strSet21.removeAll((java.util.Collection<java.lang.String>) strSet24);
        java.util.Locale locale26 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet27 = locale26.getUnicodeLocaleAttributes();
        org.joda.time.DurationFieldType durationFieldType28 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.DurationFieldType durationFieldType29 = org.joda.time.DurationFieldType.hours();
        org.joda.time.DurationFieldType[] durationFieldTypeArray30 = new org.joda.time.DurationFieldType[] { durationFieldType28, durationFieldType29 };
        org.joda.time.DurationFieldType[] durationFieldTypeArray31 = strSet27.toArray(durationFieldTypeArray30);
        boolean boolean32 = strSet21.containsAll((java.util.Collection<java.lang.String>) strSet27);
        java.lang.Object[] objArray33 = strSet27.toArray();
        boolean boolean34 = strSet17.removeAll((java.util.Collection<java.lang.String>) strSet27);
        java.util.Locale locale35 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet36 = locale35.getUnicodeLocaleAttributes();
        java.lang.Object[] objArray37 = strSet36.toArray();
        java.util.Locale locale38 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet39 = locale38.getUnicodeLocaleAttributes();
        boolean boolean40 = strSet36.removeAll((java.util.Collection<java.lang.String>) strSet39);
        java.util.Locale locale41 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet42 = locale41.getUnicodeLocaleAttributes();
        org.joda.time.DurationFieldType durationFieldType43 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.DurationFieldType durationFieldType44 = org.joda.time.DurationFieldType.hours();
        org.joda.time.DurationFieldType[] durationFieldTypeArray45 = new org.joda.time.DurationFieldType[] { durationFieldType43, durationFieldType44 };
        org.joda.time.DurationFieldType[] durationFieldTypeArray46 = strSet42.toArray(durationFieldTypeArray45);
        boolean boolean47 = strSet36.containsAll((java.util.Collection<java.lang.String>) strSet42);
        java.util.Locale locale48 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet49 = locale48.getUnicodeLocaleAttributes();
        java.lang.Object[] objArray50 = strSet49.toArray();
        java.util.Locale locale51 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet52 = locale51.getUnicodeLocaleAttributes();
        boolean boolean53 = strSet49.removeAll((java.util.Collection<java.lang.String>) strSet52);
        java.util.Locale locale54 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet55 = locale54.getUnicodeLocaleAttributes();
        org.joda.time.DurationFieldType durationFieldType56 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.DurationFieldType durationFieldType57 = org.joda.time.DurationFieldType.hours();
        org.joda.time.DurationFieldType[] durationFieldTypeArray58 = new org.joda.time.DurationFieldType[] { durationFieldType56, durationFieldType57 };
        org.joda.time.DurationFieldType[] durationFieldTypeArray59 = strSet55.toArray(durationFieldTypeArray58);
        boolean boolean60 = strSet49.containsAll((java.util.Collection<java.lang.String>) strSet55);
        java.lang.Object[] objArray61 = strSet55.toArray();
        boolean boolean62 = strSet36.retainAll((java.util.Collection<java.lang.String>) strSet55);
        boolean boolean63 = strSet27.addAll((java.util.Collection<java.lang.String>) strSet55);
        org.joda.time.DateTimeFieldType dateTimeFieldType64 = org.joda.time.DateTimeFieldType.yearOfEra();
        boolean boolean65 = strSet55.remove((java.lang.Object) dateTimeFieldType64);
        org.joda.time.LocalDateTime.Property property66 = localDateTime3.property(dateTimeFieldType64);
        int int67 = property66.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime68 = property66.withMaximumValue();
        int int69 = localDateTime68.getEra();
        org.joda.time.ReadablePeriod readablePeriod70 = null;
        org.joda.time.LocalDateTime localDateTime71 = localDateTime68.minus(readablePeriod70);
        org.joda.time.LocalDateTime.Property property72 = localDateTime68.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone73 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str75 = dateTimeZone73.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime76 = org.joda.time.LocalDateTime.now(dateTimeZone73);
        org.joda.time.LocalDateTime.Property property77 = localDateTime76.millisOfDay();
        org.joda.time.ReadableInstant readableInstant78 = null;
        long long79 = property77.getDifferenceAsLong(readableInstant78);
        int int80 = property77.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime81 = property77.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime82 = property77.roundCeilingCopy();
        java.util.Locale locale83 = java.util.Locale.PRC;
        java.lang.String str84 = locale83.getLanguage();
        java.lang.String str85 = property77.getAsText(locale83);
        java.lang.String str86 = property72.getAsShortText(locale83);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00" + "'", str9, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDateTime13);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "0100-02-22T07:23:30.373" + "'", str14, "0100-02-22T07:23:30.373");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "");
        org.junit.Assert.assertNotNull(strSet17);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "");
        org.junit.Assert.assertNotNull(strSet21);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[]");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "");
        org.junit.Assert.assertNotNull(strSet24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "");
        org.junit.Assert.assertNotNull(strSet27);
        org.junit.Assert.assertNotNull(durationFieldType28);
        org.junit.Assert.assertNotNull(durationFieldType29);
        org.junit.Assert.assertNotNull(durationFieldTypeArray30);
        org.junit.Assert.assertNotNull(durationFieldTypeArray31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "");
        org.junit.Assert.assertNotNull(strSet36);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[]");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "");
        org.junit.Assert.assertNotNull(strSet39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "");
        org.junit.Assert.assertNotNull(strSet42);
        org.junit.Assert.assertNotNull(durationFieldType43);
        org.junit.Assert.assertNotNull(durationFieldType44);
        org.junit.Assert.assertNotNull(durationFieldTypeArray45);
        org.junit.Assert.assertNotNull(durationFieldTypeArray46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "");
        org.junit.Assert.assertNotNull(strSet49);
        org.junit.Assert.assertNotNull(objArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[]");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "");
        org.junit.Assert.assertNotNull(strSet52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "");
        org.junit.Assert.assertNotNull(strSet55);
        org.junit.Assert.assertNotNull(durationFieldType56);
        org.junit.Assert.assertNotNull(durationFieldType57);
        org.junit.Assert.assertNotNull(durationFieldTypeArray58);
        org.junit.Assert.assertNotNull(durationFieldTypeArray59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(objArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray61), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray61), "[]");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 292278993 + "'", int67 == 292278993);
        org.junit.Assert.assertNotNull(localDateTime68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 1 + "'", int69 == 1);
        org.junit.Assert.assertNotNull(localDateTime71);
        org.junit.Assert.assertNotNull(property72);
        org.junit.Assert.assertNotNull(dateTimeZone73);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "+00:00" + "'", str75, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime76);
        org.junit.Assert.assertNotNull(property77);
        org.junit.Assert.assertTrue("'" + long79 + "' != '" + 0L + "'", long79 == 0L);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 86399999 + "'", int80 == 86399999);
        org.junit.Assert.assertNotNull(localDateTime81);
        org.junit.Assert.assertNotNull(localDateTime82);
        org.junit.Assert.assertNotNull(locale83);
        org.junit.Assert.assertEquals(locale83.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "zh" + "'", str84, "zh");
// flaky:         org.junit.Assert.assertEquals("'" + str85 + "' != '" + "26610373" + "'", str85, "26610373");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "292278993" + "'", str86, "292278993");
    }

    @Test
    public void test10296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10296");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.hourOfDay();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology3 = localDateTime2.getChronology();
        org.joda.time.DurationField durationField4 = chronology3.weekyears();
        org.joda.time.DurationField durationField5 = chronology3.centuries();
        org.joda.time.DurationField durationField6 = chronology3.minutes();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime(chronology3);
        boolean boolean8 = dateTimeFieldType0.isSupported(chronology3);
        org.joda.time.DateTimeZone dateTimeZone9 = chronology3.getZone();
        org.joda.time.LocalDateTime localDateTime10 = org.joda.time.LocalDateTime.now(dateTimeZone9);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.plusYears(421);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.withYearOfEra(72);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
    }

    @Test
    public void test10297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10297");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        org.joda.time.LocalDateTime localDateTime3 = localDateTime0.withDurationAdded(readableDuration1, (int) '#');
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime3.minusHours(0);
        int int7 = localDateTime6.size();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis((int) '4');
        java.util.Locale.Builder builder11 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder13 = builder11.addUnicodeLocaleAttribute("und");
        java.util.Locale locale14 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale15 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str16 = locale14.getDisplayCountry(locale15);
        java.lang.String str17 = locale15.getDisplayName();
        java.util.Locale.Builder builder18 = builder13.setLocale(locale15);
        java.util.Locale.Builder builder20 = builder13.setScript("");
        java.util.Locale locale21 = builder13.build();
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology24 = localDateTime23.getChronology();
        org.joda.time.DateTimeField dateTimeField25 = chronology24.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField26 = chronology24.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField27 = chronology24.millisOfSecond();
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.DateTimeField dateTimeField31 = dateTimeFieldType29.getField(chronology30);
        long long33 = dateTimeField31.roundFloor((long) (-1));
        java.util.Locale.Builder builder34 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder36 = builder34.addUnicodeLocaleAttribute("und");
        java.util.Locale locale37 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale38 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str39 = locale37.getDisplayCountry(locale38);
        java.lang.String str40 = locale38.getDisplayName();
        java.util.Locale.Builder builder41 = builder36.setLocale(locale38);
        int int42 = dateTimeField31.getMaximumShortTextLength(locale38);
        java.lang.String str43 = dateTimeField27.getAsShortText((long) 'a', locale38);
        java.lang.String str44 = locale21.getDisplayLanguage(locale38);
        java.util.Set<java.lang.String> strSet45 = locale21.getUnicodeLocaleKeys();
        java.lang.String str46 = dateTimeZone9.getName(1645629382169L, locale21);
        java.lang.String str48 = dateTimeZone9.getShortName(1645629447719L);
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str51 = dateTimeZone49.getShortName((long) (short) 10);
        long long53 = dateTimeZone49.convertUTCToLocal((long) ' ');
        java.lang.String str54 = dateTimeZone49.toString();
        long long56 = dateTimeZone49.previousTransition(32L);
        long long58 = dateTimeZone49.convertUTCToLocal((long) 55000019);
        long long60 = dateTimeZone9.getMillisKeepLocal(dateTimeZone49, 1645629741207L);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime61 = new org.joda.time.LocalDateTime((java.lang.Object) int7, dateTimeZone49);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: java.lang.Integer");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 4 + "'", int7 == 4);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Canada" + "'", str16, "Canada");
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "fran\347ais (Canada)" + "'", str17, "fran\347ais (Canada)");
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeFieldType29);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + (-60000L) + "'", long33 == (-60000L));
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "Canada" + "'", str39, "Canada");
// flaky:         org.junit.Assert.assertEquals("'" + str40 + "' != '" + "fran\347ais (Canada)" + "'", str40, "fran\347ais (Canada)");
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 4 + "'", int42 == 4);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "97" + "'", str43, "97");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "fran\347ais" + "'", str44, "fran\347ais");
        org.junit.Assert.assertNotNull(strSet45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "+00:00:00.052" + "'", str46, "+00:00:00.052");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "+00:00:00.052" + "'", str48, "+00:00:00.052");
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "+00:00" + "'", str51, "+00:00");
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 32L + "'", long53 == 32L);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "UTC" + "'", str54, "UTC");
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 32L + "'", long56 == 32L);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 55000019L + "'", long58 == 55000019L);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 1645629741259L + "'", long60 == 1645629741259L);
    }

    @Test
    public void test10298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10298");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology3 = localDateTime2.getChronology();
        org.joda.time.DurationField durationField4 = chronology3.weekyears();
        org.joda.time.DurationField durationField5 = chronology3.centuries();
        org.joda.time.DurationField durationField6 = chronology3.hours();
        boolean boolean7 = durationFieldType0.isSupported(chronology3);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        long long11 = chronology3.add(readablePeriod8, 1645629375880L, 748);
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1645629375880L + "'", long11 == 1645629375880L);
    }

    @Test
    public void test10299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10299");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        org.joda.time.LocalDateTime localDateTime3 = localDateTime0.withDurationAdded(readableDuration1, (int) '#');
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.weekyear();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime3.minusMillis((-1));
        org.joda.time.LocalDateTime.Property property7 = localDateTime3.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime8 = property7.roundHalfFloorCopy();
        java.util.Locale locale10 = java.util.Locale.FRANCE;
        java.lang.String str11 = localDateTime8.toString("26156413", locale10);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime8.minusHours(21);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime8.minusDays(429);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime17 = localDateTime15.withWeekOfWeekyear(957);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 957 for weekOfWeekyear must be in the range [1,53]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "26156413" + "'", str11, "26156413");
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
    }

    @Test
    public void test10300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10300");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.millisOfDay();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime3.withYear((int) (short) 100);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.minuteOfHour();
        int int8 = property7.get();
        org.joda.time.LocalDateTime localDateTime10 = property7.setCopy((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime11 = property7.roundCeilingCopy();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime13 = property7.setCopy("26191117");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26191117 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00" + "'", str2, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 23 + "'", int8 == 23);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime11);
    }

    @Test
    public void test10301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10301");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getShortName((long) (short) 10);
        long long4 = dateTimeZone0.convertUTCToLocal((long) ' ');
        java.lang.String str5 = dateTimeZone0.toString();
        long long7 = dateTimeZone0.previousTransition(32L);
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.withWeekyear(22);
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime();
        java.lang.String str12 = localDateTime11.toString();
        int int13 = localDateTime11.getCenturyOfEra();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime11.minusMonths(2);
        org.joda.time.LocalDateTime.Property property16 = localDateTime15.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str19 = dateTimeZone17.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime20 = org.joda.time.LocalDateTime.now(dateTimeZone17);
        org.joda.time.LocalDateTime.Property property21 = localDateTime20.millisOfDay();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime20.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime20.plusHours((int) ' ');
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.DateTime dateTime27 = localDateTime25.toDateTime(readableInstant26);
        long long28 = dateTime27.getMillis();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str31 = dateTimeZone29.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime32 = org.joda.time.LocalDateTime.now(dateTimeZone29);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = localDateTime32.getFieldType((int) (short) 0);
        boolean boolean35 = dateTime27.isSupported(dateTimeFieldType34);
        org.joda.time.DateTime dateTime36 = localDateTime15.toDateTime((org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str39 = dateTimeZone37.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime40 = org.joda.time.LocalDateTime.now(dateTimeZone37);
        org.joda.time.LocalDateTime.Property property41 = localDateTime40.millisOfDay();
        org.joda.time.LocalDateTime localDateTime43 = localDateTime40.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime40.plusHours((int) ' ');
        org.joda.time.ReadableInstant readableInstant46 = null;
        org.joda.time.DateTime dateTime47 = localDateTime45.toDateTime(readableInstant46);
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str50 = dateTimeZone48.getShortName((long) (short) 10);
        long long52 = dateTimeZone48.convertUTCToLocal((long) ' ');
        java.lang.String str53 = dateTimeZone48.toString();
        long long55 = dateTimeZone48.previousTransition(32L);
        long long58 = dateTimeZone48.convertLocalToUTC(97L, false);
        boolean boolean59 = dateTime47.equals((java.lang.Object) false);
        boolean boolean60 = dateTime36.isEqual((org.joda.time.ReadableInstant) dateTime47);
        org.joda.time.DateTime dateTime61 = localDateTime8.toDateTime((org.joda.time.ReadableInstant) dateTime47);
        org.joda.time.DateTimeZone dateTimeZone62 = dateTime61.getZone();
        java.lang.String str63 = dateTimeZone62.toString();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00" + "'", str2, "+00:00");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 32L + "'", long4 == 32L);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "UTC" + "'", str5, "UTC");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 32L + "'", long7 == 32L);
        org.junit.Assert.assertNotNull(localDateTime10);
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "2022-02-22T07:23:30.511" + "'", str12, "2022-02-22T07:23:30.511");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 20 + "'", int13 == 20);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "+00:00" + "'", str19, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
// flaky:         org.junit.Assert.assertTrue("'" + long28 + "' != '" + 1645629810511L + "'", long28 == 1645629810511L);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "+00:00" + "'", str31, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "+00:00" + "'", str39, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "+00:00" + "'", str50, "+00:00");
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 32L + "'", long52 == 32L);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "UTC" + "'", str53, "UTC");
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 32L + "'", long55 == 32L);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 97L + "'", long58 == 97L);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTimeZone62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "UTC" + "'", str63, "UTC");
    }

    @Test
    public void test10302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10302");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology3 = localDateTime2.getChronology();
        org.joda.time.DurationField durationField4 = chronology3.weekyears();
        org.joda.time.DurationField durationField5 = chronology3.centuries();
        org.joda.time.DurationField durationField6 = chronology3.hours();
        boolean boolean7 = dateTimeFieldType0.isSupported(chronology3);
        org.joda.time.DateTimeField dateTimeField8 = chronology3.weekOfWeekyear();
        org.joda.time.DurationField durationField9 = chronology3.days();
        org.joda.time.DateTimeField dateTimeField10 = chronology3.secondOfMinute();
        int int11 = dateTimeField10.getMinimumValue();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    public void test10303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10303");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.millisOfDay();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime3.plusMonths((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime3.plusMonths(10);
        org.joda.time.LocalDateTime.Property property9 = localDateTime3.centuryOfEra();
        java.lang.String str10 = property9.getName();
        org.joda.time.LocalDateTime localDateTime12 = property9.addWrapFieldToCopy(635);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = null;
        java.lang.String str14 = localDateTime12.toString(dateTimeFormatter13);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00" + "'", str2, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "centuryOfEra" + "'", str10, "centuryOfEra");
        org.junit.Assert.assertNotNull(localDateTime12);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "65522-02-22T07:23:30.630" + "'", str14, "65522-02-22T07:23:30.630");
    }

    @Test
    public void test10304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10304");
        java.util.Locale locale0 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet1 = locale0.getUnicodeLocaleAttributes();
        java.lang.Object[] objArray2 = strSet1.toArray();
        java.util.Locale locale3 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet4 = locale3.getUnicodeLocaleAttributes();
        boolean boolean5 = strSet1.removeAll((java.util.Collection<java.lang.String>) strSet4);
        java.util.Locale locale6 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet7 = locale6.getUnicodeLocaleAttributes();
        org.joda.time.DurationFieldType durationFieldType8 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.DurationFieldType durationFieldType9 = org.joda.time.DurationFieldType.hours();
        org.joda.time.DurationFieldType[] durationFieldTypeArray10 = new org.joda.time.DurationFieldType[] { durationFieldType8, durationFieldType9 };
        org.joda.time.DurationFieldType[] durationFieldTypeArray11 = strSet7.toArray(durationFieldTypeArray10);
        boolean boolean12 = strSet1.containsAll((java.util.Collection<java.lang.String>) strSet7);
        java.util.Locale locale13 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet14 = locale13.getUnicodeLocaleAttributes();
        java.lang.Object[] objArray15 = strSet14.toArray();
        java.util.Locale locale16 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet17 = locale16.getUnicodeLocaleAttributes();
        boolean boolean18 = strSet14.removeAll((java.util.Collection<java.lang.String>) strSet17);
        java.util.Locale locale19 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet20 = locale19.getUnicodeLocaleAttributes();
        org.joda.time.DurationFieldType durationFieldType21 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.DurationFieldType durationFieldType22 = org.joda.time.DurationFieldType.hours();
        org.joda.time.DurationFieldType[] durationFieldTypeArray23 = new org.joda.time.DurationFieldType[] { durationFieldType21, durationFieldType22 };
        org.joda.time.DurationFieldType[] durationFieldTypeArray24 = strSet20.toArray(durationFieldTypeArray23);
        boolean boolean25 = strSet14.containsAll((java.util.Collection<java.lang.String>) strSet20);
        java.lang.Object[] objArray26 = strSet20.toArray();
        boolean boolean27 = strSet1.retainAll((java.util.Collection<java.lang.String>) strSet20);
        boolean boolean29 = strSet1.remove((java.lang.Object) "0100-02-22T07:16:17.921");
        java.util.Locale.LanguageRange[] languageRangeArray30 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList31 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList31, languageRangeArray30);
        java.util.Locale locale33 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale34 = java.util.Locale.CANADA;
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str37 = dateTimeZone35.getShortName((long) (short) 10);
        long long39 = dateTimeZone35.convertUTCToLocal((long) ' ');
        java.lang.String str40 = dateTimeZone35.toString();
        boolean boolean42 = dateTimeZone35.equals((java.lang.Object) (short) 100);
        java.util.Locale locale44 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str45 = dateTimeZone35.getShortName((long) (-1), locale44);
        java.util.Locale locale46 = java.util.Locale.CANADA;
        java.util.Locale locale47 = java.util.Locale.FRENCH;
        java.util.Locale[] localeArray48 = new java.util.Locale[] { locale33, locale34, locale44, locale46, locale47 };
        java.util.ArrayList<java.util.Locale> localeList49 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList49, localeArray48);
        java.util.Locale locale51 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList31, (java.util.Collection<java.util.Locale>) localeList49);
        java.util.Locale locale52 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet53 = locale52.getUnicodeLocaleAttributes();
        java.lang.Object[] objArray54 = strSet53.toArray();
        java.util.List<java.lang.String> strList55 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList31, (java.util.Collection<java.lang.String>) strSet53);
        java.util.Spliterator[] spliteratorArray57 = new java.util.Spliterator[0];
        @SuppressWarnings("unchecked")
        java.util.Spliterator<java.lang.String>[] strSpliteratorArray58 = (java.util.Spliterator<java.lang.String>[]) spliteratorArray57;
        java.util.Spliterator<java.lang.String>[] strSpliteratorArray59 = strSet53.toArray((java.util.Spliterator<java.lang.String>[]) spliteratorArray57);
        int int60 = strSet53.size();
        boolean boolean61 = strSet1.containsAll((java.util.Collection<java.lang.String>) strSet53);
        java.util.stream.Stream<java.lang.String> strStream62 = strSet1.stream();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "");
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNotNull(objArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray2), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray2), "[]");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "");
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "");
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertNotNull(durationFieldType8);
        org.junit.Assert.assertNotNull(durationFieldType9);
        org.junit.Assert.assertNotNull(durationFieldTypeArray10);
        org.junit.Assert.assertNotNull(durationFieldTypeArray11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "");
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[]");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "");
        org.junit.Assert.assertNotNull(strSet17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "");
        org.junit.Assert.assertNotNull(strSet20);
        org.junit.Assert.assertNotNull(durationFieldType21);
        org.junit.Assert.assertNotNull(durationFieldType22);
        org.junit.Assert.assertNotNull(durationFieldTypeArray23);
        org.junit.Assert.assertNotNull(durationFieldTypeArray24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(languageRangeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "en_CA");
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "+00:00" + "'", str37, "+00:00");
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 32L + "'", long39 == 32L);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "UTC" + "'", str40, "UTC");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "+00:00" + "'", str45, "+00:00");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "fr");
        org.junit.Assert.assertNotNull(localeArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNull(locale51);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "");
        org.junit.Assert.assertNotNull(strSet53);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[]");
        org.junit.Assert.assertNotNull(strList55);
        org.junit.Assert.assertNotNull(spliteratorArray57);
        org.junit.Assert.assertNotNull(strSpliteratorArray58);
        org.junit.Assert.assertNotNull(strSpliteratorArray59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(strStream62);
    }

    @Test
    public void test10305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10305");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        org.joda.time.LocalDateTime localDateTime3 = localDateTime0.withDurationAdded(readableDuration1, (int) '#');
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.weekyear();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime3.minusMillis((-1));
        org.joda.time.LocalDateTime.Property property7 = localDateTime3.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime8 = property7.roundHalfFloorCopy();
        org.joda.time.LocalDateTime.Property property9 = localDateTime8.millisOfDay();
        org.joda.time.LocalDateTime localDateTime11 = property9.setCopy(86399999);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minusHours(1745);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = null;
        java.lang.String str15 = localDateTime13.toString(dateTimeFormatter14);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime13.minusMillis((-15));
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str20 = dateTimeZone18.getShortName((long) (short) 10);
        long long22 = dateTimeZone18.convertUTCToLocal((long) ' ');
        java.lang.String str23 = dateTimeZone18.toString();
        boolean boolean25 = dateTimeZone18.equals((java.lang.Object) (short) 100);
        java.util.Locale locale27 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str28 = dateTimeZone18.getShortName((long) (-1), locale27);
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime(dateTimeZone18);
        long long31 = dateTimeZone18.previousTransition(1645629377469L);
        java.lang.String str32 = dateTimeZone18.getID();
        org.joda.time.LocalDateTime localDateTime33 = org.joda.time.LocalDateTime.now(dateTimeZone18);
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology37 = localDateTime36.getChronology();
        org.joda.time.DateTimeField dateTimeField38 = chronology37.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField39 = chronology37.minuteOfDay();
        org.joda.time.DurationField durationField40 = chronology37.minutes();
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime((long) 916, chronology37);
        org.joda.time.DateTimeField dateTimeField42 = chronology37.hourOfHalfday();
        org.joda.time.LocalDateTime localDateTime43 = org.joda.time.LocalDateTime.now(chronology37);
        boolean boolean44 = dateTimeZone18.isLocalDateTimeGap(localDateTime43);
        boolean boolean45 = localDateTime17.equals((java.lang.Object) dateTimeZone18);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "2021-12-12T06:59:59.999" + "'", str15, "2021-12-12T06:59:59.999");
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+00:00" + "'", str20, "+00:00");
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 32L + "'", long22 == 32L);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "UTC" + "'", str23, "UTC");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "+00:00" + "'", str28, "+00:00");
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 1645629377469L + "'", long31 == 1645629377469L);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "UTC" + "'", str32, "UTC");
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(durationField40);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
    }

    @Test
    public void test10306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10306");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DurationField durationField3 = chronology2.weekyears();
        org.joda.time.DurationField durationField4 = chronology2.centuries();
        org.joda.time.DurationField durationField5 = chronology2.minutes();
        org.joda.time.DateTimeField dateTimeField6 = chronology2.monthOfYear();
        org.joda.time.DateTimeField dateTimeField7 = chronology2.dayOfYear();
        org.joda.time.DurationField durationField8 = chronology2.days();
        org.joda.time.DurationField durationField9 = chronology2.weekyears();
        org.joda.time.DurationField durationField10 = chronology2.months();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str13 = dateTimeZone11.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime14 = org.joda.time.LocalDateTime.now(dateTimeZone11);
        org.joda.time.LocalDateTime.Property property15 = localDateTime14.millisOfDay();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime14.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime14.plusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.minusHours((int) (short) 10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray22 = localDateTime19.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime24 = localDateTime19.minusMillis(0);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.withDayOfYear(32);
        org.joda.time.ReadableDuration readableDuration27 = null;
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.minus(readableDuration27);
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.minus(readablePeriod29);
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.DurationFieldType durationFieldType32 = dateTimeFieldType31.getDurationType();
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology35 = localDateTime34.getChronology();
        org.joda.time.DurationField durationField36 = chronology35.weekyears();
        org.joda.time.DurationField durationField37 = chronology35.centuries();
        boolean boolean38 = durationFieldType32.isSupported(chronology35);
        org.joda.time.DurationField durationField39 = chronology35.halfdays();
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.Chronology chronology41 = chronology35.withZone(dateTimeZone40);
        org.joda.time.DateTimeField dateTimeField42 = chronology35.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime43 = new org.joda.time.LocalDateTime();
        org.joda.time.ReadableDuration readableDuration44 = null;
        org.joda.time.LocalDateTime localDateTime46 = localDateTime43.withDurationAdded(readableDuration44, (int) '#');
        org.joda.time.LocalDateTime.Property property47 = localDateTime43.era();
        org.joda.time.LocalDateTime localDateTime50 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology51 = localDateTime50.getChronology();
        org.joda.time.DurationField durationField52 = chronology51.weekyears();
        org.joda.time.DurationField durationField53 = chronology51.centuries();
        org.joda.time.LocalDateTime localDateTime54 = new org.joda.time.LocalDateTime((long) (byte) 0, chronology51);
        org.joda.time.DurationField durationField55 = chronology51.millis();
        org.joda.time.DateTimeField dateTimeField56 = chronology51.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField57 = chronology51.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField58 = chronology51.yearOfEra();
        org.joda.time.DateTimeField dateTimeField59 = chronology51.year();
        org.joda.time.DateTimeZone dateTimeZone60 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str62 = dateTimeZone60.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime63 = org.joda.time.LocalDateTime.now(dateTimeZone60);
        org.joda.time.LocalDateTime.Property property64 = localDateTime63.millisOfDay();
        org.joda.time.DurationFieldType durationFieldType65 = org.joda.time.DurationFieldType.centuries();
        boolean boolean66 = localDateTime63.equals((java.lang.Object) durationFieldType65);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray67 = localDateTime63.getFieldTypes();
        java.lang.String str68 = localDateTime63.toString();
        org.joda.time.LocalDateTime localDateTime70 = localDateTime63.plusMillis(22);
        int[] intArray72 = chronology51.get((org.joda.time.ReadablePartial) localDateTime70, (-1893417120000000L));
        int int73 = dateTimeField42.getMaximumValue((org.joda.time.ReadablePartial) localDateTime43, intArray72);
        chronology2.validate((org.joda.time.ReadablePartial) localDateTime28, intArray72);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+00:00" + "'", str13, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(dateTimeFieldType31);
        org.junit.Assert.assertNotNull(durationFieldType32);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(durationField52);
        org.junit.Assert.assertNotNull(durationField53);
        org.junit.Assert.assertNotNull(durationField55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(dateTimeZone60);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "+00:00" + "'", str62, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertNotNull(durationFieldType65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray67);
// flaky:         org.junit.Assert.assertEquals("'" + str68 + "' != '" + "2022-02-22T07:23:30.813" + "'", str68, "2022-02-22T07:23:30.813");
        org.junit.Assert.assertNotNull(localDateTime70);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-58030, 1, 1, 0]");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 59 + "'", int73 == 59);
    }

    @Test
    public void test10307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10307");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.millisOfDay();
        org.joda.time.DurationFieldType durationFieldType5 = org.joda.time.DurationFieldType.centuries();
        boolean boolean6 = localDateTime3.equals((java.lang.Object) durationFieldType5);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray7 = localDateTime3.getFieldTypes();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str10 = dateTimeZone8.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now(dateTimeZone8);
        org.joda.time.LocalDateTime.Property property12 = localDateTime11.millisOfDay();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime11.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime11.plusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.minusHours((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.withEra((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property21 = localDateTime20.secondOfMinute();
        boolean boolean22 = localDateTime3.isAfter((org.joda.time.ReadablePartial) localDateTime20);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime3.withYear(32);
        org.joda.time.LocalDateTime.Property property25 = localDateTime24.monthOfYear();
        org.joda.time.LocalDateTime localDateTime27 = property25.addWrapFieldToCopy(53);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.minusYears((int) 'u');
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.withCenturyOfEra(188);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00" + "'", str2, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(durationFieldType5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+00:00" + "'", str10, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
    }

    @Test
    public void test10308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10308");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DurationField durationField3 = chronology2.weekyears();
        org.joda.time.DurationField durationField4 = chronology2.seconds();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str7 = dateTimeZone5.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime8 = org.joda.time.LocalDateTime.now(dateTimeZone5);
        org.joda.time.LocalDateTime.Property property9 = localDateTime8.millisOfDay();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime8.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime8.plusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.minusHours((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.withEra((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property18 = localDateTime17.secondOfMinute();
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.DateTimeField dateTimeField21 = dateTimeFieldType19.getField(chronology20);
        java.util.Locale locale23 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale24 = locale23.stripExtensions();
        java.lang.String str25 = dateTimeField21.getAsShortText(100, locale24);
        int int27 = dateTimeField21.getLeapAmount((long) (short) 100);
        java.lang.String str28 = dateTimeField21.getName();
        long long31 = dateTimeField21.add((long) (short) 1, 0);
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str34 = dateTimeZone32.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime35 = org.joda.time.LocalDateTime.now(dateTimeZone32);
        org.joda.time.LocalDateTime.Property property36 = localDateTime35.millisOfDay();
        org.joda.time.ReadableInstant readableInstant37 = null;
        long long38 = property36.getDifferenceAsLong(readableInstant37);
        org.joda.time.DurationField durationField39 = property36.getLeapDurationField();
        java.lang.String str40 = property36.getAsString();
        org.joda.time.LocalDateTime localDateTime41 = property36.roundFloorCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        org.joda.time.LocalDateTime localDateTime45 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology46 = localDateTime45.getChronology();
        org.joda.time.DurationField durationField47 = chronology46.weekyears();
        boolean boolean48 = dateTimeFieldType43.isSupported(chronology46);
        org.joda.time.LocalDateTime localDateTime49 = new org.joda.time.LocalDateTime();
        java.lang.String str50 = localDateTime49.toString();
        int int51 = localDateTime49.getCenturyOfEra();
        org.joda.time.LocalDateTime localDateTime53 = localDateTime49.minusMonths(2);
        org.joda.time.LocalDateTime.Property property54 = localDateTime53.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str57 = dateTimeZone55.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime58 = org.joda.time.LocalDateTime.now(dateTimeZone55);
        org.joda.time.LocalDateTime.Property property59 = localDateTime58.millisOfDay();
        org.joda.time.LocalDateTime localDateTime61 = localDateTime58.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime63 = localDateTime58.plusHours((int) ' ');
        org.joda.time.ReadableInstant readableInstant64 = null;
        org.joda.time.DateTime dateTime65 = localDateTime63.toDateTime(readableInstant64);
        long long66 = dateTime65.getMillis();
        org.joda.time.DateTimeZone dateTimeZone67 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str69 = dateTimeZone67.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime70 = org.joda.time.LocalDateTime.now(dateTimeZone67);
        org.joda.time.DateTimeFieldType dateTimeFieldType72 = localDateTime70.getFieldType((int) (short) 0);
        boolean boolean73 = dateTime65.isSupported(dateTimeFieldType72);
        org.joda.time.DateTime dateTime74 = localDateTime53.toDateTime((org.joda.time.ReadableInstant) dateTime65);
        int[] intArray76 = chronology46.get((org.joda.time.ReadablePartial) localDateTime53, 11L);
        int[] intArray78 = dateTimeField21.add((org.joda.time.ReadablePartial) localDateTime41, (int) (short) 10, intArray76, (int) (byte) 0);
        chronology2.validate((org.joda.time.ReadablePartial) localDateTime17, intArray76);
        org.joda.time.LocalDateTime localDateTime81 = localDateTime17.plusMillis(54974408);
        int int82 = localDateTime81.getMillisOfDay();
        org.joda.time.LocalDateTime.Property property83 = localDateTime81.weekyear();
        org.joda.time.LocalDateTime localDateTime84 = property83.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime85 = property83.getLocalDateTime();
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+00:00" + "'", str7, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "100" + "'", str25, "100");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "minuteOfDay" + "'", str28, "minuteOfDay");
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 1L + "'", long31 == 1L);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "+00:00" + "'", str34, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertNull(durationField39);
// flaky:         org.junit.Assert.assertEquals("'" + str40 + "' != '" + "26610871" + "'", str40, "26610871");
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(dateTimeFieldType43);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(durationField47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str50 + "' != '" + "2022-02-22T07:23:30.871" + "'", str50, "2022-02-22T07:23:30.871");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 20 + "'", int51 == 20);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(dateTimeZone55);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "+00:00" + "'", str57, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNotNull(dateTime65);
// flaky:         org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1645629810871L + "'", long66 == 1645629810871L);
        org.junit.Assert.assertNotNull(dateTimeZone67);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "+00:00" + "'", str69, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime70);
        org.junit.Assert.assertNotNull(dateTimeFieldType72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[1970, 1, 1, 11]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[1970, 1, 1, 11]");
        org.junit.Assert.assertNotNull(localDateTime81);
// flaky:         org.junit.Assert.assertTrue("'" + int82 + "' != '" + 74385278 + "'", int82 == 74385278);
        org.junit.Assert.assertNotNull(property83);
        org.junit.Assert.assertNotNull(localDateTime84);
        org.junit.Assert.assertNotNull(localDateTime85);
    }

    @Test
    public void test10309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10309");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology3 = localDateTime2.getChronology();
        org.joda.time.DurationField durationField4 = chronology3.weekyears();
        org.joda.time.DurationField durationField5 = chronology3.centuries();
        org.joda.time.DurationField durationField6 = chronology3.hours();
        boolean boolean7 = dateTimeFieldType0.isSupported(chronology3);
        org.joda.time.DateTimeField dateTimeField8 = chronology3.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField9 = chronology3.weekyear();
        java.util.Locale locale11 = java.util.Locale.GERMAN;
        java.util.Locale.setDefault(locale11);
        java.util.Locale locale13 = java.util.Locale.CANADA;
        boolean boolean14 = locale13.hasExtensions();
        java.lang.String str15 = locale11.getDisplayScript(locale13);
        java.lang.String str16 = dateTimeField9.getAsText(21, locale11);
        long long18 = dateTimeField9.roundCeiling((long) 97);
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime();
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.LocalDateTime localDateTime22 = localDateTime19.withDurationAdded(readableDuration20, (int) '#');
        org.joda.time.LocalDateTime.Property property23 = localDateTime22.weekyear();
        java.lang.String str24 = property23.getAsString();
        org.joda.time.LocalDateTime localDateTime26 = property23.setCopy(67);
        org.joda.time.LocalDateTime localDateTime28 = property23.setCopy((int) (byte) 1);
        int int29 = dateTimeField9.getMaximumValue((org.joda.time.ReadablePartial) localDateTime28);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime28.plusDays(26253611);
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str34 = dateTimeZone32.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime35 = org.joda.time.LocalDateTime.now(dateTimeZone32);
        org.joda.time.LocalDateTime.Property property36 = localDateTime35.millisOfDay();
        org.joda.time.DurationFieldType durationFieldType37 = org.joda.time.DurationFieldType.centuries();
        boolean boolean38 = localDateTime35.equals((java.lang.Object) durationFieldType37);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray39 = localDateTime35.getFieldTypes();
        java.lang.String str40 = localDateTime35.toString();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter41 = null;
        java.lang.String str42 = localDateTime35.toString(dateTimeFormatter41);
        int int43 = localDateTime35.size();
        org.joda.time.LocalDateTime.Property property44 = localDateTime35.secondOfMinute();
        int int45 = localDateTime35.getWeekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime47 = localDateTime35.minusMillis(26181236);
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str50 = dateTimeZone48.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime51 = org.joda.time.LocalDateTime.now(dateTimeZone48);
        org.joda.time.LocalDateTime.Property property52 = localDateTime51.millisOfDay();
        org.joda.time.DurationFieldType durationFieldType53 = org.joda.time.DurationFieldType.centuries();
        boolean boolean54 = localDateTime51.equals((java.lang.Object) durationFieldType53);
        org.joda.time.LocalDateTime localDateTime56 = localDateTime51.withWeekOfWeekyear((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime58 = localDateTime51.plusDays(67);
        org.joda.time.LocalDateTime localDateTime60 = localDateTime58.minusHours(17);
        org.joda.time.DateTimeZone dateTimeZone61 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str63 = dateTimeZone61.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime64 = org.joda.time.LocalDateTime.now(dateTimeZone61);
        org.joda.time.LocalDateTime.Property property65 = localDateTime64.millisOfDay();
        org.joda.time.LocalDateTime localDateTime67 = localDateTime64.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime69 = localDateTime64.plusHours((int) ' ');
        org.joda.time.ReadableInstant readableInstant70 = null;
        org.joda.time.DateTime dateTime71 = localDateTime69.toDateTime(readableInstant70);
        long long72 = dateTime71.getMillis();
        org.joda.time.DateTimeFieldType dateTimeFieldType73 = org.joda.time.DateTimeFieldType.hourOfDay();
        boolean boolean74 = dateTime71.isSupported(dateTimeFieldType73);
        int int75 = localDateTime58.indexOf(dateTimeFieldType73);
        org.joda.time.DurationFieldType durationFieldType76 = dateTimeFieldType73.getRangeDurationType();
        boolean boolean77 = localDateTime35.isSupported(durationFieldType76);
        org.joda.time.LocalDateTime localDateTime79 = localDateTime31.withFieldAdded(durationFieldType76, 26154433);
        org.joda.time.LocalDateTime.Property property80 = localDateTime31.monthOfYear();
        // The following exception was thrown during execution in test generation
        try {
            int int82 = localDateTime31.getValue(26502591);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 26502591");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "de");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "en_CA");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "21" + "'", str16, "21");
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 31795200000L + "'", long18 == 31795200000L);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "2022" + "'", str24, "2022");
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 292278993 + "'", int29 == 292278993);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "+00:00" + "'", str34, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(durationFieldType37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray39);
// flaky:         org.junit.Assert.assertEquals("'" + str40 + "' != '" + "2022-02-22T07:23:30.913" + "'", str40, "2022-02-22T07:23:30.913");
// flaky:         org.junit.Assert.assertEquals("'" + str42 + "' != '" + "2022-02-22T07:23:30.913" + "'", str42, "2022-02-22T07:23:30.913");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 4 + "'", int43 == 4);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 8 + "'", int45 == 8);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "+00:00" + "'", str50, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(durationFieldType53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(dateTimeZone61);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "+00:00" + "'", str63, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertNotNull(localDateTime69);
        org.junit.Assert.assertNotNull(dateTime71);
// flaky:         org.junit.Assert.assertTrue("'" + long72 + "' != '" + 1645629810913L + "'", long72 == 1645629810913L);
        org.junit.Assert.assertNotNull(dateTimeFieldType73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-1) + "'", int75 == (-1));
        org.junit.Assert.assertNotNull(durationFieldType76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(localDateTime79);
        org.junit.Assert.assertNotNull(property80);
    }

    @Test
    public void test10310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10310");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        int int2 = timeZone0.getOffset((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str4 = timeZone0.getID();
        timeZone0.setID("2021-12-22T07:15:57.222Z");
        java.util.TimeZone.setDefault(timeZone0);
        java.util.TimeZone timeZone9 = java.util.TimeZone.getTimeZone("26188474");
        timeZone9.setID("2022-02-22T07:16:29.003");
        boolean boolean12 = timeZone9.observesDaylightTime();
        timeZone9.setRawOffset((int) '4');
        boolean boolean15 = timeZone9.observesDaylightTime();
        boolean boolean16 = timeZone9.observesDaylightTime();
        boolean boolean17 = timeZone0.hasSameRules(timeZone9);
        org.junit.Assert.assertNotNull(timeZone0);
// flaky:         org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "GMT+00:00");
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 3 + "'", int2 == 3);
        org.junit.Assert.assertNotNull(dateTimeZone3);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "GMT" + "'", str4, "GMT");
        org.junit.Assert.assertNotNull(timeZone9);
        org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test10311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10311");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.millisOfDay();
        long long5 = property4.remainder();
        org.joda.time.LocalDateTime localDateTime6 = property4.roundFloorCopy();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime();
        java.lang.String str8 = localDateTime7.toString();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime7.plusMonths((int) (short) -1);
        org.joda.time.LocalDateTime.Property property11 = localDateTime7.yearOfEra();
        int int12 = property4.compareTo((org.joda.time.ReadablePartial) localDateTime7);
        org.joda.time.LocalDateTime localDateTime14 = property4.setCopy(26151696);
        int int15 = localDateTime14.getYear();
        java.util.Locale.Category category17 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale18 = java.util.Locale.FRENCH;
        java.util.Locale.setDefault(category17, locale18);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateTimeField dateTimeField22 = dateTimeFieldType20.getField(chronology21);
        java.util.Locale locale24 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale25 = locale24.stripExtensions();
        java.lang.String str26 = dateTimeField22.getAsShortText(100, locale25);
        java.util.Locale.setDefault(category17, locale25);
        java.util.Locale locale28 = java.util.Locale.getDefault(category17);
        java.util.Locale locale29 = java.util.Locale.getDefault(category17);
        java.lang.String str30 = locale29.getCountry();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str31 = localDateTime14.toString("2022-02-22T07:21:47.098", locale29);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: T");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00" + "'", str2, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertNotNull(localDateTime6);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "2022-02-22T07:23:31.017" + "'", str8, "2022-02-22T07:23:31.017");
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2022 + "'", int15 == 2022);
        org.junit.Assert.assertTrue("'" + category17 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category17.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "fr");
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "100" + "'", str26, "100");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "CA" + "'", str30, "CA");
    }

    @Test
    public void test10312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10312");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone0);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = localDateTime3.getFieldType((int) (short) 0);
        org.joda.time.DurationFieldType durationFieldType6 = dateTimeFieldType5.getDurationType();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime();
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.LocalDateTime localDateTime10 = localDateTime7.withDurationAdded(readableDuration8, (int) '#');
        org.joda.time.LocalDateTime.Property property11 = localDateTime10.weekyear();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime10.minusMillis((-1));
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str16 = dateTimeZone14.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime17 = org.joda.time.LocalDateTime.now(dateTimeZone14);
        org.joda.time.LocalDateTime.Property property18 = localDateTime17.millisOfDay();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime17.withYear((int) (short) 100);
        java.lang.String str21 = localDateTime20.toString();
        boolean boolean22 = localDateTime10.isAfter((org.joda.time.ReadablePartial) localDateTime20);
        java.util.Locale locale23 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet24 = locale23.getUnicodeLocaleAttributes();
        java.lang.Object[] objArray25 = strSet24.toArray();
        boolean boolean26 = strSet24.isEmpty();
        java.util.Locale locale27 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet28 = locale27.getUnicodeLocaleAttributes();
        java.lang.Object[] objArray29 = strSet28.toArray();
        java.util.Locale locale30 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet31 = locale30.getUnicodeLocaleAttributes();
        boolean boolean32 = strSet28.removeAll((java.util.Collection<java.lang.String>) strSet31);
        java.util.Locale locale33 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet34 = locale33.getUnicodeLocaleAttributes();
        org.joda.time.DurationFieldType durationFieldType35 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.DurationFieldType durationFieldType36 = org.joda.time.DurationFieldType.hours();
        org.joda.time.DurationFieldType[] durationFieldTypeArray37 = new org.joda.time.DurationFieldType[] { durationFieldType35, durationFieldType36 };
        org.joda.time.DurationFieldType[] durationFieldTypeArray38 = strSet34.toArray(durationFieldTypeArray37);
        boolean boolean39 = strSet28.containsAll((java.util.Collection<java.lang.String>) strSet34);
        java.lang.Object[] objArray40 = strSet34.toArray();
        boolean boolean41 = strSet24.removeAll((java.util.Collection<java.lang.String>) strSet34);
        java.util.Locale locale42 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet43 = locale42.getUnicodeLocaleAttributes();
        java.lang.Object[] objArray44 = strSet43.toArray();
        java.util.Locale locale45 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet46 = locale45.getUnicodeLocaleAttributes();
        boolean boolean47 = strSet43.removeAll((java.util.Collection<java.lang.String>) strSet46);
        java.util.Locale locale48 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet49 = locale48.getUnicodeLocaleAttributes();
        org.joda.time.DurationFieldType durationFieldType50 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.DurationFieldType durationFieldType51 = org.joda.time.DurationFieldType.hours();
        org.joda.time.DurationFieldType[] durationFieldTypeArray52 = new org.joda.time.DurationFieldType[] { durationFieldType50, durationFieldType51 };
        org.joda.time.DurationFieldType[] durationFieldTypeArray53 = strSet49.toArray(durationFieldTypeArray52);
        boolean boolean54 = strSet43.containsAll((java.util.Collection<java.lang.String>) strSet49);
        java.util.Locale locale55 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet56 = locale55.getUnicodeLocaleAttributes();
        java.lang.Object[] objArray57 = strSet56.toArray();
        java.util.Locale locale58 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet59 = locale58.getUnicodeLocaleAttributes();
        boolean boolean60 = strSet56.removeAll((java.util.Collection<java.lang.String>) strSet59);
        java.util.Locale locale61 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet62 = locale61.getUnicodeLocaleAttributes();
        org.joda.time.DurationFieldType durationFieldType63 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.DurationFieldType durationFieldType64 = org.joda.time.DurationFieldType.hours();
        org.joda.time.DurationFieldType[] durationFieldTypeArray65 = new org.joda.time.DurationFieldType[] { durationFieldType63, durationFieldType64 };
        org.joda.time.DurationFieldType[] durationFieldTypeArray66 = strSet62.toArray(durationFieldTypeArray65);
        boolean boolean67 = strSet56.containsAll((java.util.Collection<java.lang.String>) strSet62);
        java.lang.Object[] objArray68 = strSet62.toArray();
        boolean boolean69 = strSet43.retainAll((java.util.Collection<java.lang.String>) strSet62);
        boolean boolean70 = strSet34.addAll((java.util.Collection<java.lang.String>) strSet62);
        org.joda.time.DateTimeFieldType dateTimeFieldType71 = org.joda.time.DateTimeFieldType.yearOfEra();
        boolean boolean72 = strSet62.remove((java.lang.Object) dateTimeFieldType71);
        org.joda.time.LocalDateTime.Property property73 = localDateTime10.property(dateTimeFieldType71);
        org.joda.time.DurationFieldType durationFieldType74 = org.joda.time.DurationFieldType.millis();
        org.joda.time.LocalDateTime localDateTime76 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology77 = localDateTime76.getChronology();
        org.joda.time.DurationField durationField78 = chronology77.weekyears();
        org.joda.time.DurationField durationField79 = chronology77.centuries();
        org.joda.time.DurationField durationField80 = durationFieldType74.getField(chronology77);
        boolean boolean81 = dateTimeFieldType71.isSupported(chronology77);
        org.joda.time.DateTimeZone dateTimeZone82 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str84 = dateTimeZone82.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime85 = org.joda.time.LocalDateTime.now(dateTimeZone82);
        org.joda.time.LocalDateTime.Property property86 = localDateTime85.millisOfDay();
        org.joda.time.LocalDateTime localDateTime88 = localDateTime85.plusMonths((int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod89 = null;
        org.joda.time.LocalDateTime localDateTime90 = localDateTime88.plus(readablePeriod89);
        long long92 = chronology77.set((org.joda.time.ReadablePartial) localDateTime90, 864000010L);
        org.joda.time.DurationField durationField93 = chronology77.weekyears();
        org.joda.time.DateTimeField dateTimeField94 = chronology77.millisOfSecond();
        boolean boolean95 = dateTimeFieldType5.isSupported(chronology77);
        org.joda.time.DurationField durationField96 = chronology77.hours();
        org.joda.time.DateTimeField dateTimeField97 = chronology77.millisOfSecond();
        org.joda.time.DurationField durationField98 = chronology77.hours();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00" + "'", str2, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(durationFieldType6);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+00:00" + "'", str16, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localDateTime20);
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "0100-02-22T07:23:31.032" + "'", str21, "0100-02-22T07:23:31.032");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "");
        org.junit.Assert.assertNotNull(strSet24);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "");
        org.junit.Assert.assertNotNull(strSet28);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[]");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "");
        org.junit.Assert.assertNotNull(strSet31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "");
        org.junit.Assert.assertNotNull(strSet34);
        org.junit.Assert.assertNotNull(durationFieldType35);
        org.junit.Assert.assertNotNull(durationFieldType36);
        org.junit.Assert.assertNotNull(durationFieldTypeArray37);
        org.junit.Assert.assertNotNull(durationFieldTypeArray38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[]");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "");
        org.junit.Assert.assertNotNull(strSet43);
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[]");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "");
        org.junit.Assert.assertNotNull(strSet46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "");
        org.junit.Assert.assertNotNull(strSet49);
        org.junit.Assert.assertNotNull(durationFieldType50);
        org.junit.Assert.assertNotNull(durationFieldType51);
        org.junit.Assert.assertNotNull(durationFieldTypeArray52);
        org.junit.Assert.assertNotNull(durationFieldTypeArray53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "");
        org.junit.Assert.assertNotNull(strSet56);
        org.junit.Assert.assertNotNull(objArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray57), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray57), "[]");
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "");
        org.junit.Assert.assertNotNull(strSet59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "");
        org.junit.Assert.assertNotNull(strSet62);
        org.junit.Assert.assertNotNull(durationFieldType63);
        org.junit.Assert.assertNotNull(durationFieldType64);
        org.junit.Assert.assertNotNull(durationFieldTypeArray65);
        org.junit.Assert.assertNotNull(durationFieldTypeArray66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(objArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray68), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray68), "[]");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(property73);
        org.junit.Assert.assertNotNull(durationFieldType74);
        org.junit.Assert.assertNotNull(chronology77);
        org.junit.Assert.assertNotNull(durationField78);
        org.junit.Assert.assertNotNull(durationField79);
        org.junit.Assert.assertNotNull(durationField80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNotNull(dateTimeZone82);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "+00:00" + "'", str84, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime85);
        org.junit.Assert.assertNotNull(property86);
        org.junit.Assert.assertNotNull(localDateTime88);
        org.junit.Assert.assertNotNull(localDateTime90);
// flaky:         org.junit.Assert.assertTrue("'" + long92 + "' != '" + 1908343411033L + "'", long92 == 1908343411033L);
        org.junit.Assert.assertNotNull(durationField93);
        org.junit.Assert.assertNotNull(dateTimeField94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + true + "'", boolean95 == true);
        org.junit.Assert.assertNotNull(durationField96);
        org.junit.Assert.assertNotNull(dateTimeField97);
        org.junit.Assert.assertNotNull(durationField98);
    }

    @Test
    public void test10313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10313");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        org.joda.time.LocalDateTime localDateTime3 = localDateTime0.withDurationAdded(readableDuration1, (int) '#');
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.weekyear();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime3.minusMillis((-1));
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str9 = dateTimeZone7.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime10 = org.joda.time.LocalDateTime.now(dateTimeZone7);
        org.joda.time.LocalDateTime.Property property11 = localDateTime10.millisOfDay();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime10.withYear((int) (short) 100);
        java.lang.String str14 = localDateTime13.toString();
        boolean boolean15 = localDateTime3.isAfter((org.joda.time.ReadablePartial) localDateTime13);
        org.joda.time.DurationFieldType durationFieldType16 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime13.withFieldAdded(durationFieldType16, 7);
        org.joda.time.DurationFieldType durationFieldType19 = org.joda.time.DurationFieldType.days();
        java.lang.String str20 = durationFieldType19.toString();
        boolean boolean21 = localDateTime13.isSupported(durationFieldType19);
        int int22 = localDateTime13.getWeekyear();
        int int23 = localDateTime13.getWeekyear();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00" + "'", str9, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDateTime13);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "0100-02-22T07:23:31.075" + "'", str14, "0100-02-22T07:23:31.075");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(durationFieldType16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(durationFieldType19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "days" + "'", str20, "days");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 100 + "'", int22 == 100);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 100 + "'", int23 == 100);
    }

    @Test
    public void test10314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10314");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.millisOfDay();
        long long5 = property4.remainder();
        org.joda.time.LocalDateTime localDateTime6 = property4.roundFloorCopy();
        java.lang.String str7 = property4.getAsShortText();
        org.joda.time.DurationField durationField8 = property4.getRangeDurationField();
        java.lang.String str9 = property4.getName();
        org.joda.time.Interval interval10 = property4.toInterval();
        org.joda.time.LocalDateTime localDateTime11 = property4.roundHalfFloorCopy();
        int int12 = localDateTime11.size();
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime();
        java.lang.String str14 = localDateTime13.toString();
        int int15 = localDateTime13.getCenturyOfEra();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime13.minusMonths(2);
        org.joda.time.LocalDateTime.Property property18 = localDateTime17.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str21 = dateTimeZone19.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime22 = org.joda.time.LocalDateTime.now(dateTimeZone19);
        org.joda.time.LocalDateTime.Property property23 = localDateTime22.millisOfDay();
        org.joda.time.LocalDateTime localDateTime25 = localDateTime22.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime22.plusHours((int) ' ');
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.DateTime dateTime29 = localDateTime27.toDateTime(readableInstant28);
        long long30 = dateTime29.getMillis();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str33 = dateTimeZone31.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime34 = org.joda.time.LocalDateTime.now(dateTimeZone31);
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = localDateTime34.getFieldType((int) (short) 0);
        boolean boolean37 = dateTime29.isSupported(dateTimeFieldType36);
        org.joda.time.DateTime dateTime38 = localDateTime17.toDateTime((org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str41 = dateTimeZone39.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime42 = org.joda.time.LocalDateTime.now(dateTimeZone39);
        org.joda.time.LocalDateTime.Property property43 = localDateTime42.millisOfDay();
        org.joda.time.LocalDateTime localDateTime45 = localDateTime42.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime47 = localDateTime42.plusHours((int) ' ');
        org.joda.time.ReadableInstant readableInstant48 = null;
        org.joda.time.DateTime dateTime49 = localDateTime47.toDateTime(readableInstant48);
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str52 = dateTimeZone50.getShortName((long) (short) 10);
        long long54 = dateTimeZone50.convertUTCToLocal((long) ' ');
        java.lang.String str55 = dateTimeZone50.toString();
        long long57 = dateTimeZone50.previousTransition(32L);
        long long60 = dateTimeZone50.convertLocalToUTC(97L, false);
        boolean boolean61 = dateTime49.equals((java.lang.Object) false);
        boolean boolean62 = dateTime38.isEqual((org.joda.time.ReadableInstant) dateTime49);
        long long63 = dateTime49.getMillis();
        org.joda.time.DateTime dateTime64 = localDateTime11.toDateTime((org.joda.time.ReadableInstant) dateTime49);
        org.joda.time.LocalDateTime.Property property65 = localDateTime11.yearOfEra();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00" + "'", str2, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertNotNull(localDateTime6);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "26611113" + "'", str7, "26611113");
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "millisOfDay" + "'", str9, "millisOfDay");
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4 + "'", int12 == 4);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "2022-02-22T07:23:31.113" + "'", str14, "2022-02-22T07:23:31.113");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 20 + "'", int15 == 20);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "+00:00" + "'", str21, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
// flaky:         org.junit.Assert.assertTrue("'" + long30 + "' != '" + 1645629811113L + "'", long30 == 1645629811113L);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "+00:00" + "'", str33, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "+00:00" + "'", str41, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "+00:00" + "'", str52, "+00:00");
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 32L + "'", long54 == 32L);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "UTC" + "'", str55, "UTC");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 32L + "'", long57 == 32L);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 97L + "'", long60 == 97L);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long63 + "' != '" + 1645629811113L + "'", long63 == 1645629811113L);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(property65);
    }

    @Test
    public void test10315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10315");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DurationField durationField3 = chronology2.weekyears();
        org.joda.time.DurationField durationField4 = chronology2.centuries();
        org.joda.time.DurationField durationField5 = chronology2.minutes();
        org.joda.time.DateTimeField dateTimeField6 = chronology2.monthOfYear();
        org.joda.time.DateTimeField dateTimeField7 = chronology2.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField8 = chronology2.clockhourOfDay();
        long long10 = dateTimeField8.roundFloor(1645629481825L);
        long long12 = dateTimeField8.roundHalfEven(1645629635918L);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1645628400000L + "'", long10 == 1645628400000L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1645628400000L + "'", long12 == 1645628400000L);
    }

    @Test
    public void test10316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10316");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeField dateTimeField2 = dateTimeFieldType0.getField(chronology1);
        long long4 = dateTimeField2.roundFloor((long) (-1));
        java.util.Locale.Builder builder5 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder7 = builder5.addUnicodeLocaleAttribute("und");
        java.util.Locale locale8 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale9 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str10 = locale8.getDisplayCountry(locale9);
        java.lang.String str11 = locale9.getDisplayName();
        java.util.Locale.Builder builder12 = builder7.setLocale(locale9);
        int int13 = dateTimeField2.getMaximumShortTextLength(locale9);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str16 = dateTimeZone14.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime17 = org.joda.time.LocalDateTime.now(dateTimeZone14);
        org.joda.time.LocalDateTime.Property property18 = localDateTime17.millisOfDay();
        org.joda.time.ReadableInstant readableInstant19 = null;
        long long20 = property18.getDifferenceAsLong(readableInstant19);
        org.joda.time.DurationField durationField21 = property18.getLeapDurationField();
        java.lang.String str22 = property18.getAsString();
        org.joda.time.LocalDateTime localDateTime23 = property18.roundFloorCopy();
        java.util.Locale locale24 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet25 = locale24.getUnicodeLocaleAttributes();
        java.util.Set<java.lang.String> strSet26 = locale24.getUnicodeLocaleAttributes();
        java.lang.String str27 = dateTimeField2.getAsShortText((org.joda.time.ReadablePartial) localDateTime23, locale24);
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology30 = localDateTime29.getChronology();
        org.joda.time.DateTimeField dateTimeField31 = chronology30.halfdayOfDay();
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str34 = dateTimeZone32.getShortName((long) (short) 10);
        long long36 = dateTimeZone32.convertUTCToLocal((long) ' ');
        java.lang.String str37 = dateTimeZone32.toString();
        boolean boolean39 = dateTimeZone32.equals((java.lang.Object) (short) 100);
        java.util.Locale locale41 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str42 = dateTimeZone32.getShortName((long) (-1), locale41);
        int int43 = dateTimeField31.getMaximumShortTextLength(locale41);
        java.util.Locale locale45 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale46 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str47 = locale45.getDisplayCountry(locale46);
        java.util.Locale locale48 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale49 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str50 = locale48.getDisplayCountry(locale49);
        java.lang.String str51 = locale45.getDisplayVariant(locale48);
        java.util.Locale locale52 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale53 = locale52.stripExtensions();
        java.lang.String str54 = locale45.getDisplayLanguage(locale53);
        java.lang.String str55 = dateTimeField31.getAsText(0, locale53);
        int int56 = dateTimeField2.getMaximumShortTextLength(locale53);
        org.joda.time.DurationField durationField57 = dateTimeField2.getRangeDurationField();
        java.lang.String str58 = durationField57.getName();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60000L) + "'", long4 == (-60000L));
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Canada" + "'", str10, "Canada");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "fran\347ais (Canada)" + "'", str11, "fran\347ais (Canada)");
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 4 + "'", int13 == 4);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+00:00" + "'", str16, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertNull(durationField21);
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "26611175" + "'", str22, "26611175");
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "");
        org.junit.Assert.assertNotNull(strSet25);
        org.junit.Assert.assertNotNull(strSet26);
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "443" + "'", str27, "443");
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "+00:00" + "'", str34, "+00:00");
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 32L + "'", long36 == 32L);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "UTC" + "'", str37, "UTC");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "+00:00" + "'", str42, "+00:00");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Canada" + "'", str47, "Canada");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "Canada" + "'", str50, "Canada");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "fran\347ais" + "'", str54, "fran\347ais");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "AM" + "'", str55, "AM");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 4 + "'", int56 == 4);
        org.junit.Assert.assertNotNull(durationField57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "days" + "'", str58, "days");
    }

    @Test
    public void test10317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10317");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        org.joda.time.LocalDateTime localDateTime3 = localDateTime0.withDurationAdded(readableDuration1, (int) '#');
        org.joda.time.LocalDateTime.Property property4 = localDateTime0.era();
        int int5 = localDateTime0.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime0.withWeekOfWeekyear((int) (byte) 1);
        int int8 = localDateTime0.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime0.plusMillis(53);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.plusDays(24);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.withSecondOfMinute(28);
        int int15 = localDateTime14.getWeekOfWeekyear();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 22 + "'", int5 == 22);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 7 + "'", int8 == 7);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 11 + "'", int15 == 11);
    }

    @Test
    public void test10318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10318");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        org.joda.time.LocalDateTime localDateTime3 = localDateTime0.withDurationAdded(readableDuration1, (int) '#');
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.weekyear();
        int int5 = property4.getMaximumValue();
        org.joda.time.DateTimeField dateTimeField6 = property4.getField();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str9 = dateTimeZone7.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime10 = org.joda.time.LocalDateTime.now(dateTimeZone7);
        org.joda.time.LocalDateTime.Property property11 = localDateTime10.millisOfDay();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime10.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime10.plusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.minusHours((int) (short) 10);
        int int18 = dateTimeField6.getMinimumValue((org.joda.time.ReadablePartial) localDateTime17);
        java.lang.String str20 = dateTimeField6.getAsText((long) (-292275054));
        java.util.Locale locale22 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet23 = locale22.getUnicodeLocaleAttributes();
        java.lang.String str24 = locale22.getLanguage();
        java.lang.String str25 = dateTimeField6.getAsShortText((-259200000L), locale22);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = dateTimeField6.getType();
        long long29 = dateTimeField6.set(31795200000L, 26304059);
        java.util.Locale locale31 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str32 = locale31.getISO3Language();
        java.lang.String str33 = dateTimeField6.getAsText(26261294, locale31);
        java.util.Locale.Category category35 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale36 = java.util.Locale.FRENCH;
        java.util.Locale.setDefault(category35, locale36);
        java.util.Locale locale38 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale39 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str40 = locale38.getDisplayCountry(locale39);
        java.util.Locale.setDefault(category35, locale38);
        java.util.Locale locale42 = java.util.Locale.getDefault(category35);
        java.util.Locale locale46 = new java.util.Locale("2022-02-22T07:15:51.749", "26154571", "26150748");
        java.lang.String str47 = locale46.toLanguageTag();
        java.util.Locale.setDefault(category35, locale46);
        java.util.Locale locale49 = java.util.Locale.GERMAN;
        java.util.Locale.setDefault(locale49);
        java.util.Locale.Builder builder51 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder53 = builder51.addUnicodeLocaleAttribute("und");
        java.util.Locale.Builder builder54 = builder53.clear();
        java.util.Locale locale55 = builder54.build();
        java.lang.String str56 = locale55.toLanguageTag();
        java.lang.String str57 = locale49.getDisplayCountry(locale55);
        java.util.Locale.setDefault(category35, locale55);
        java.util.Set<java.lang.String> strSet59 = locale55.getUnicodeLocaleKeys();
        java.lang.String str60 = locale55.getVariant();
        java.lang.String str61 = dateTimeField6.getAsShortText((long) 26449, locale55);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 292278993 + "'", int5 == 292278993);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00" + "'", str9, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-292275054) + "'", int18 == (-292275054));
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "1969" + "'", str20, "1969");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "");
        org.junit.Assert.assertNotNull(strSet23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "1970" + "'", str25, "1970");
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 830013759936000000L + "'", long29 == 830013759936000000L);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "fra" + "'", str32, "fra");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "26261294" + "'", str33, "26261294");
        org.junit.Assert.assertTrue("'" + category35 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category35.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "fr");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Canada" + "'", str40, "Canada");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "fr_CA");
        org.junit.Assert.assertEquals(locale46.toString(), "2022-02-22t07:15:51.749_26154571_26150748");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "und-26150748" + "'", str47, "und-26150748");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "de");
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "und" + "'", str56, "und");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertNotNull(strSet59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "1970" + "'", str61, "1970");
    }

    @Test
    public void test10319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10319");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.millisOfDay();
        org.joda.time.ReadableInstant readableInstant5 = null;
        long long6 = property4.getDifferenceAsLong(readableInstant5);
        org.joda.time.DurationField durationField7 = property4.getLeapDurationField();
        java.lang.String str8 = property4.getAsString();
        org.joda.time.LocalDateTime localDateTime9 = property4.roundFloorCopy();
        java.util.Locale locale10 = java.util.Locale.ENGLISH;
        java.lang.String str11 = property4.getAsText(locale10);
        org.joda.time.LocalDateTime localDateTime12 = property4.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime14 = property4.addWrapFieldToCopy(26151696);
        org.joda.time.LocalDateTime localDateTime15 = property4.roundFloorCopy();
        org.joda.time.LocalDateTime.Property property16 = localDateTime15.millisOfSecond();
        org.joda.time.LocalDateTime.Property property17 = localDateTime15.minuteOfHour();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00" + "'", str2, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNull(durationField7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "26611261" + "'", str8, "26611261");
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "26611261" + "'", str11, "26611261");
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(property17);
    }

    @Test
    public void test10320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10320");
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology3 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField4 = chronology3.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField5 = chronology3.minuteOfDay();
        org.joda.time.DurationField durationField6 = chronology3.minutes();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((long) 916, chronology3);
        org.joda.time.DateTimeField dateTimeField8 = chronology3.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone9 = chronology3.getZone();
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
    }

    @Test
    public void test10321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10321");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder2 = builder0.clear();
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str5 = dateTimeZone3.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime6 = org.joda.time.LocalDateTime.now(dateTimeZone3);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.millisOfDay();
        java.lang.String str8 = property7.getName();
        org.joda.time.LocalDateTime localDateTime9 = property7.roundHalfFloorCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        boolean boolean11 = localDateTime9.isSupported(dateTimeFieldType10);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str14 = dateTimeZone12.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime15 = org.joda.time.LocalDateTime.now(dateTimeZone12);
        org.joda.time.LocalDateTime.Property property16 = localDateTime15.millisOfDay();
        org.joda.time.DurationFieldType durationFieldType17 = org.joda.time.DurationFieldType.centuries();
        boolean boolean18 = localDateTime15.equals((java.lang.Object) durationFieldType17);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray19 = localDateTime15.getFieldTypes();
        java.lang.String str20 = localDateTime15.toString();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime15.plusMillis(22);
        boolean boolean23 = localDateTime9.isBefore((org.joda.time.ReadablePartial) localDateTime22);
        org.joda.time.ReadableDuration readableDuration24 = null;
        org.joda.time.LocalDateTime localDateTime25 = localDateTime22.plus(readableDuration24);
        org.joda.time.LocalDateTime.Property property26 = localDateTime25.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime27 = property26.roundHalfEvenCopy();
        java.util.Locale locale28 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet29 = locale28.getUnicodeLocaleAttributes();
        java.util.Set<java.lang.String> strSet30 = locale28.getUnicodeLocaleAttributes();
        java.lang.String str31 = locale28.getVariant();
        java.util.Locale locale32 = locale28.stripExtensions();
        int int33 = property26.getMaximumTextLength(locale32);
        java.util.Locale.Builder builder34 = builder0.setLocale(locale32);
        java.util.Set<java.lang.String> strSet35 = locale32.getUnicodeLocaleAttributes();
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+00:00" + "'", str5, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "millisOfDay" + "'", str8, "millisOfDay");
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+00:00" + "'", str14, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(durationFieldType17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray19);
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "2022-02-22T07:23:31.282" + "'", str20, "2022-02-22T07:23:31.282");
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "");
        org.junit.Assert.assertNotNull(strSet29);
        org.junit.Assert.assertNotNull(strSet30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2 + "'", int33 == 2);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strSet35);
    }

    @Test
    public void test10322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10322");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.millisOfDay();
        org.joda.time.DurationFieldType durationFieldType5 = org.joda.time.DurationFieldType.centuries();
        boolean boolean6 = localDateTime3.equals((java.lang.Object) durationFieldType5);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime3.withWeekOfWeekyear((int) (byte) 10);
        int int9 = localDateTime8.getDayOfYear();
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.LocalDateTime localDateTime11 = localDateTime8.plus(readablePeriod10);
        org.joda.time.Chronology chronology12 = localDateTime11.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology17 = localDateTime16.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField19 = chronology17.minuteOfDay();
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime((-100L), chronology17);
        int int21 = dateTimeField13.getMinimumValue((org.joda.time.ReadablePartial) localDateTime20);
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology24 = localDateTime23.getChronology();
        org.joda.time.DurationField durationField25 = chronology24.hours();
        java.lang.String str26 = chronology24.toString();
        org.joda.time.DateTimeField dateTimeField27 = chronology24.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField28 = chronology24.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime();
        org.joda.time.ReadableDuration readableDuration30 = null;
        org.joda.time.LocalDateTime localDateTime32 = localDateTime29.withDurationAdded(readableDuration30, (int) '#');
        org.joda.time.LocalDateTime.Property property33 = localDateTime32.weekyear();
        org.joda.time.LocalDateTime localDateTime35 = localDateTime32.minusMillis((-1));
        org.joda.time.LocalDateTime.Property property36 = localDateTime32.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime37 = property36.roundHalfFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str40 = dateTimeZone38.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime41 = org.joda.time.LocalDateTime.now(dateTimeZone38);
        org.joda.time.LocalDateTime.Property property42 = localDateTime41.millisOfDay();
        org.joda.time.DurationFieldType durationFieldType43 = org.joda.time.DurationFieldType.centuries();
        boolean boolean44 = localDateTime41.equals((java.lang.Object) durationFieldType43);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray45 = localDateTime41.getFieldTypes();
        java.lang.String str46 = localDateTime41.toString();
        org.joda.time.LocalDateTime localDateTime48 = localDateTime41.plusMillis(22);
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = org.joda.time.DateTimeFieldType.secondOfDay();
        boolean boolean50 = localDateTime41.isSupported(dateTimeFieldType49);
        int int51 = localDateTime37.indexOf(dateTimeFieldType49);
        int[] intArray53 = chronology24.get((org.joda.time.ReadablePartial) localDateTime37, 1645629358650L);
        org.joda.time.LocalDateTime localDateTime55 = localDateTime37.plusWeeks(26149500);
        org.joda.time.LocalDateTime localDateTime57 = localDateTime55.withYearOfEra(10);
        int int58 = localDateTime20.compareTo((org.joda.time.ReadablePartial) localDateTime55);
        org.joda.time.LocalDateTime localDateTime60 = localDateTime20.minusDays(26310);
        org.joda.time.LocalDateTime localDateTime61 = new org.joda.time.LocalDateTime();
        org.joda.time.ReadableDuration readableDuration62 = null;
        org.joda.time.LocalDateTime localDateTime64 = localDateTime61.withDurationAdded(readableDuration62, (int) '#');
        org.joda.time.LocalDateTime.Property property65 = localDateTime64.weekyear();
        org.joda.time.LocalDateTime localDateTime67 = localDateTime64.minusMillis((-1));
        org.joda.time.DateTimeZone dateTimeZone68 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str70 = dateTimeZone68.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime71 = org.joda.time.LocalDateTime.now(dateTimeZone68);
        org.joda.time.LocalDateTime.Property property72 = localDateTime71.millisOfDay();
        org.joda.time.LocalDateTime localDateTime74 = localDateTime71.withYear((int) (short) 100);
        java.lang.String str75 = localDateTime74.toString();
        boolean boolean76 = localDateTime64.isAfter((org.joda.time.ReadablePartial) localDateTime74);
        org.joda.time.DurationFieldType durationFieldType77 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.LocalDateTime localDateTime79 = localDateTime74.withFieldAdded(durationFieldType77, 7);
        org.joda.time.DateTimeZone dateTimeZone80 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str82 = dateTimeZone80.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime83 = org.joda.time.LocalDateTime.now(dateTimeZone80);
        org.joda.time.LocalDateTime.Property property84 = localDateTime83.millisOfDay();
        org.joda.time.LocalDateTime localDateTime86 = localDateTime83.withYear((int) (short) 100);
        org.joda.time.LocalDateTime.Property property87 = localDateTime86.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime89 = localDateTime86.minusMonths(2022);
        int int90 = localDateTime86.getDayOfMonth();
        org.joda.time.DateTimeFieldType dateTimeFieldType91 = org.joda.time.DateTimeFieldType.dayOfMonth();
        boolean boolean92 = localDateTime86.equals((java.lang.Object) dateTimeFieldType91);
        org.joda.time.LocalDateTime localDateTime94 = localDateTime86.plusHours(26163523);
        boolean boolean95 = localDateTime79.isBefore((org.joda.time.ReadablePartial) localDateTime86);
        org.joda.time.DateTimeFieldType dateTimeFieldType96 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.LocalDateTime.Property property97 = localDateTime86.property(dateTimeFieldType96);
        int int98 = localDateTime60.get(dateTimeFieldType96);
        org.joda.time.LocalDateTime.Property property99 = localDateTime60.dayOfYear();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00" + "'", str2, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(durationFieldType5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 67 + "'", int9 == 67);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "ISOChronology[UTC]" + "'", str26, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "+00:00" + "'", str40, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(durationFieldType43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray45);
// flaky:         org.junit.Assert.assertEquals("'" + str46 + "' != '" + "2022-02-22T07:23:31.316" + "'", str46, "2022-02-22T07:23:31.316");
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(dateTimeFieldType49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[2022, 2, 23, 54958650]");
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertNotNull(dateTimeZone68);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "+00:00" + "'", str70, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime71);
        org.junit.Assert.assertNotNull(property72);
        org.junit.Assert.assertNotNull(localDateTime74);
// flaky:         org.junit.Assert.assertEquals("'" + str75 + "' != '" + "0100-02-22T07:23:31.316" + "'", str75, "0100-02-22T07:23:31.316");
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(durationFieldType77);
        org.junit.Assert.assertNotNull(localDateTime79);
        org.junit.Assert.assertNotNull(dateTimeZone80);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "+00:00" + "'", str82, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime83);
        org.junit.Assert.assertNotNull(property84);
        org.junit.Assert.assertNotNull(localDateTime86);
        org.junit.Assert.assertNotNull(property87);
        org.junit.Assert.assertNotNull(localDateTime89);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 22 + "'", int90 == 22);
        org.junit.Assert.assertNotNull(dateTimeFieldType91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(localDateTime94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType96);
        org.junit.Assert.assertNotNull(property97);
        org.junit.Assert.assertTrue("'" + int98 + "' != '" + 97 + "'", int98 == 97);
        org.junit.Assert.assertNotNull(property99);
    }

    @Test
    public void test10323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10323");
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.weekyears();
        org.joda.time.DurationField durationField6 = chronology4.centuries();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((long) (byte) 0, chronology4);
        org.joda.time.DateTimeField dateTimeField8 = chronology4.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField9 = chronology4.clockhourOfHalfday();
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime(100L);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.plusDays(0);
        long long15 = chronology4.set((org.joda.time.ReadablePartial) localDateTime13, (long) 24);
        org.joda.time.DurationField durationField16 = chronology4.minutes();
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime(1908343048985L, chronology4);
        org.joda.time.DurationField durationField18 = chronology4.minutes();
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        long long22 = chronology4.add(readablePeriod19, (-127616352577L), 22087);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 100L + "'", long15 == 100L);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-127616352577L) + "'", long22 == (-127616352577L));
    }

    @Test
    public void test10324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10324");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.millisOfDay();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime3.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime3.plusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minusHours((int) (short) 10);
        int int11 = localDateTime8.getMinuteOfHour();
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.LocalDateTime localDateTime13 = localDateTime8.minus(readablePeriod12);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str16 = dateTimeZone14.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime17 = org.joda.time.LocalDateTime.now(dateTimeZone14);
        org.joda.time.LocalDateTime.Property property18 = localDateTime17.millisOfDay();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime17.withYear((int) (short) 100);
        int int21 = localDateTime20.getCenturyOfEra();
        boolean boolean22 = localDateTime8.isBefore((org.joda.time.ReadablePartial) localDateTime20);
        org.joda.time.LocalDateTime.Property property23 = localDateTime8.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime();
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.LocalDateTime localDateTime27 = localDateTime24.withDurationAdded(readableDuration25, (int) '#');
        org.joda.time.LocalDateTime.Property property28 = localDateTime27.weekyear();
        org.joda.time.LocalDateTime localDateTime30 = localDateTime27.minusMillis((-1));
        int int31 = localDateTime27.getMillisOfSecond();
        org.joda.time.LocalDateTime localDateTime33 = localDateTime27.plusMillis(5);
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        org.joda.time.LocalDateTime localDateTime35 = localDateTime27.plus(readablePeriod34);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime8.withFields((org.joda.time.ReadablePartial) localDateTime27);
        int int37 = localDateTime8.getWeekyear();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00" + "'", str2, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 23 + "'", int11 == 23);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+00:00" + "'", str16, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(localDateTime30);
// flaky:         org.junit.Assert.assertTrue("'" + int31 + "' != '" + 397 + "'", int31 == 397);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2022 + "'", int37 == 2022);
    }

    @Test
    public void test10325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10325");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.millisOfDay();
        int int5 = localDateTime3.getCenturyOfEra();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime3.withSecondOfMinute(21);
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTimeField dateTimeField10 = dateTimeFieldType8.getField(chronology9);
        org.joda.time.DurationField durationField11 = dateTimeField10.getRangeDurationField();
        long long13 = dateTimeField10.remainder(1L);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = dateTimeField10.getType();
        int int15 = localDateTime3.indexOf(dateTimeFieldType14);
        java.lang.String str16 = dateTimeFieldType14.getName();
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology19 = localDateTime18.getChronology();
        org.joda.time.DateTimeField dateTimeField20 = dateTimeFieldType14.getField(chronology19);
        java.lang.String str21 = dateTimeFieldType14.toString();
        org.joda.time.DurationFieldType durationFieldType22 = dateTimeFieldType14.getDurationType();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00" + "'", str2, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 20 + "'", int5 == 20);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1L + "'", long13 == 1L);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "minuteOfDay" + "'", str16, "minuteOfDay");
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "minuteOfDay" + "'", str21, "minuteOfDay");
        org.junit.Assert.assertNotNull(durationFieldType22);
    }

    @Test
    public void test10326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10326");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.millisOfDay();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime3.withYear((int) (short) 100);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.minuteOfHour();
        int int8 = property7.get();
        org.joda.time.LocalDateTime localDateTime10 = property7.setCopy((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime11 = property7.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property12 = localDateTime11.dayOfWeek();
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = property12.getFieldType();
        java.lang.String str14 = property12.getAsString();
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = property12.getFieldType();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00" + "'", str2, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 23 + "'", int8 == 23);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "1" + "'", str14, "1");
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
    }

    @Test
    public void test10327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10327");
        java.lang.Object obj0 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str4 = dateTimeZone2.getShortName((long) (short) 10);
        long long6 = dateTimeZone2.convertUTCToLocal((long) ' ');
        java.lang.String str7 = dateTimeZone2.toString();
        boolean boolean9 = dateTimeZone2.equals((java.lang.Object) (short) 100);
        java.util.Locale locale11 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str12 = dateTimeZone2.getShortName((long) (-1), locale11);
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime(dateTimeZone2);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime13.withField(dateTimeFieldType14, (int) (short) 100);
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology19 = localDateTime18.getChronology();
        org.joda.time.DurationField durationField20 = chronology19.weekyears();
        org.joda.time.DurationField durationField21 = chronology19.centuries();
        org.joda.time.DateTimeField dateTimeField22 = chronology19.minuteOfDay();
        long long26 = chronology19.add((long) 2, (long) 21, (int) '4');
        boolean boolean27 = dateTimeFieldType14.isSupported(chronology19);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str30 = dateTimeZone28.getShortName((long) (short) 10);
        long long32 = dateTimeZone28.convertUTCToLocal((long) ' ');
        java.lang.String str33 = dateTimeZone28.toString();
        long long35 = dateTimeZone28.previousTransition(32L);
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime(dateTimeZone28);
        org.joda.time.Chronology chronology37 = chronology19.withZone(dateTimeZone28);
        org.joda.time.DateTimeField dateTimeField38 = chronology37.clockhourOfDay();
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime(35L, chronology37);
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str42 = dateTimeZone40.getShortName((long) (short) 10);
        long long44 = dateTimeZone40.convertUTCToLocal((long) ' ');
        java.lang.String str45 = dateTimeZone40.toString();
        boolean boolean47 = dateTimeZone40.equals((java.lang.Object) (short) 100);
        java.util.Locale locale49 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str50 = dateTimeZone40.getShortName((long) (-1), locale49);
        org.joda.time.LocalDateTime localDateTime51 = new org.joda.time.LocalDateTime(dateTimeZone40);
        int int53 = dateTimeZone40.getOffset((long) (short) 10);
        java.util.TimeZone timeZone54 = dateTimeZone40.toTimeZone();
        java.lang.String str55 = dateTimeZone40.getID();
        java.lang.String str57 = dateTimeZone40.getShortName(1645629456968L);
        org.joda.time.Chronology chronology58 = chronology37.withZone(dateTimeZone40);
        org.joda.time.LocalDateTime localDateTime59 = new org.joda.time.LocalDateTime(obj0, chronology58);
        org.joda.time.DateTimeField dateTimeField60 = chronology58.secondOfDay();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00" + "'", str4, "+00:00");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 32L + "'", long6 == 32L);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "UTC" + "'", str7, "UTC");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00" + "'", str12, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1094L + "'", long26 == 1094L);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "+00:00" + "'", str30, "+00:00");
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 32L + "'", long32 == 32L);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "UTC" + "'", str33, "UTC");
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 32L + "'", long35 == 32L);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "+00:00" + "'", str42, "+00:00");
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 32L + "'", long44 == 32L);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "UTC" + "'", str45, "UTC");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "+00:00" + "'", str50, "+00:00");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(timeZone54);
        org.junit.Assert.assertEquals(timeZone54.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "UTC" + "'", str55, "UTC");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "+00:00" + "'", str57, "+00:00");
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(dateTimeField60);
    }

    @Test
    public void test10328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10328");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        java.lang.String str1 = localDateTime0.toString();
        org.joda.time.LocalDateTime localDateTime3 = localDateTime0.plusMonths((int) (short) -1);
        org.joda.time.LocalDateTime.Property property4 = localDateTime0.yearOfEra();
        java.lang.String str5 = property4.getAsText();
        org.joda.time.LocalDateTime localDateTime6 = property4.withMinimumValue();
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.year();
        org.joda.time.LocalDateTime.Property property8 = localDateTime6.dayOfWeek();
        int int9 = property8.getLeapAmount();
        org.joda.time.DurationField durationField10 = property8.getRangeDurationField();
        // The following exception was thrown during execution in test generation
        try {
            long long13 = durationField10.subtract(1645629698362L, 1645629681059L);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows a long: -1645629681059 * 604800000");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "2022-02-22T07:23:31.475" + "'", str1, "2022-02-22T07:23:31.475");
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "2022" + "'", str5, "2022");
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(durationField10);
    }

    @Test
    public void test10329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10329");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        java.lang.String str1 = localDateTime0.toString();
        org.joda.time.LocalDateTime localDateTime3 = localDateTime0.plusMonths((int) (short) -1);
        org.joda.time.LocalDateTime.Property property4 = localDateTime0.yearOfEra();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.minusHours(81287455);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.plusWeeks(55041013);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime6.plusMinutes(34);
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "2022-02-22T07:23:31.486" + "'", str1, "2022-02-22T07:23:31.486");
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
    }

    @Test
    public void test10330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10330");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DurationField durationField3 = chronology2.hours();
        java.lang.String str4 = chronology2.toString();
        org.joda.time.DateTimeField dateTimeField5 = chronology2.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField6 = chronology2.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime();
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.LocalDateTime localDateTime10 = localDateTime7.withDurationAdded(readableDuration8, (int) '#');
        org.joda.time.LocalDateTime.Property property11 = localDateTime10.weekyear();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime10.minusMillis((-1));
        org.joda.time.LocalDateTime.Property property14 = localDateTime10.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime15 = property14.roundHalfFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str18 = dateTimeZone16.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime19 = org.joda.time.LocalDateTime.now(dateTimeZone16);
        org.joda.time.LocalDateTime.Property property20 = localDateTime19.millisOfDay();
        org.joda.time.DurationFieldType durationFieldType21 = org.joda.time.DurationFieldType.centuries();
        boolean boolean22 = localDateTime19.equals((java.lang.Object) durationFieldType21);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray23 = localDateTime19.getFieldTypes();
        java.lang.String str24 = localDateTime19.toString();
        org.joda.time.LocalDateTime localDateTime26 = localDateTime19.plusMillis(22);
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.secondOfDay();
        boolean boolean28 = localDateTime19.isSupported(dateTimeFieldType27);
        int int29 = localDateTime15.indexOf(dateTimeFieldType27);
        int[] intArray31 = chronology2.get((org.joda.time.ReadablePartial) localDateTime15, 1645629358650L);
        org.joda.time.DurationField durationField32 = chronology2.millis();
        org.joda.time.DurationField durationField33 = chronology2.halfdays();
        org.joda.time.LocalDateTime localDateTime34 = org.joda.time.LocalDateTime.now(chronology2);
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str37 = dateTimeZone35.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime38 = org.joda.time.LocalDateTime.now(dateTimeZone35);
        org.joda.time.LocalDateTime.Property property39 = localDateTime38.millisOfDay();
        org.joda.time.LocalDateTime localDateTime41 = localDateTime38.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime43 = localDateTime38.plusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime45 = localDateTime43.minusHours((int) (short) 10);
        int int46 = localDateTime43.getMinuteOfHour();
        org.joda.time.ReadablePeriod readablePeriod47 = null;
        org.joda.time.LocalDateTime localDateTime48 = localDateTime43.minus(readablePeriod47);
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str51 = dateTimeZone49.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime52 = org.joda.time.LocalDateTime.now(dateTimeZone49);
        org.joda.time.LocalDateTime.Property property53 = localDateTime52.millisOfDay();
        org.joda.time.LocalDateTime localDateTime55 = localDateTime52.withYear((int) (short) 100);
        int int56 = localDateTime55.getCenturyOfEra();
        boolean boolean57 = localDateTime43.isBefore((org.joda.time.ReadablePartial) localDateTime55);
        org.joda.time.LocalDateTime.Property property58 = localDateTime43.hourOfDay();
        int[] intArray60 = chronology2.get((org.joda.time.ReadablePartial) localDateTime43, 1645629398149L);
        org.joda.time.DateTimeField dateTimeField61 = chronology2.weekyearOfCentury();
        org.joda.time.DurationField durationField62 = dateTimeField61.getRangeDurationField();
        java.lang.String str64 = dateTimeField61.getAsText(1645574771856L);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "ISOChronology[UTC]" + "'", str4, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+00:00" + "'", str18, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(durationFieldType21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray23);
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "2022-02-22T07:23:31.496" + "'", str24, "2022-02-22T07:23:31.496");
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[2022, 2, 23, 54958650]");
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "+00:00" + "'", str37, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(localDateTime45);
// flaky:         org.junit.Assert.assertTrue("'" + int46 + "' != '" + 23 + "'", int46 == 23);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "+00:00" + "'", str51, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[2022, 2, 23, 54998149]");
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertNotNull(durationField62);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "22" + "'", str64, "22");
    }

    @Test
    public void test10331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10331");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeField dateTimeField2 = dateTimeFieldType0.getField(chronology1);
        long long4 = dateTimeField2.roundFloor((long) (-1));
        boolean boolean5 = dateTimeField2.isLenient();
        long long7 = dateTimeField2.remainder(0L);
        int int9 = dateTimeField2.getMinimumValue((long) (short) 1);
        long long11 = dateTimeField2.roundHalfFloor((long) 'a');
        boolean boolean12 = dateTimeField2.isSupported();
        int int14 = dateTimeField2.getLeapAmount((long) 81271132);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTimeField dateTimeField17 = dateTimeFieldType15.getField(chronology16);
        java.util.Locale locale19 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale20 = locale19.stripExtensions();
        java.lang.String str21 = dateTimeField17.getAsShortText(100, locale20);
        int int23 = dateTimeField17.getLeapAmount((long) (short) 100);
        java.lang.String str24 = dateTimeField17.getName();
        long long27 = dateTimeField17.add((long) (short) 1, 0);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str30 = dateTimeZone28.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime31 = org.joda.time.LocalDateTime.now(dateTimeZone28);
        org.joda.time.LocalDateTime.Property property32 = localDateTime31.millisOfDay();
        org.joda.time.ReadableInstant readableInstant33 = null;
        long long34 = property32.getDifferenceAsLong(readableInstant33);
        org.joda.time.DurationField durationField35 = property32.getLeapDurationField();
        java.lang.String str36 = property32.getAsString();
        org.joda.time.LocalDateTime localDateTime37 = property32.roundFloorCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology42 = localDateTime41.getChronology();
        org.joda.time.DurationField durationField43 = chronology42.weekyears();
        boolean boolean44 = dateTimeFieldType39.isSupported(chronology42);
        org.joda.time.LocalDateTime localDateTime45 = new org.joda.time.LocalDateTime();
        java.lang.String str46 = localDateTime45.toString();
        int int47 = localDateTime45.getCenturyOfEra();
        org.joda.time.LocalDateTime localDateTime49 = localDateTime45.minusMonths(2);
        org.joda.time.LocalDateTime.Property property50 = localDateTime49.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str53 = dateTimeZone51.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime54 = org.joda.time.LocalDateTime.now(dateTimeZone51);
        org.joda.time.LocalDateTime.Property property55 = localDateTime54.millisOfDay();
        org.joda.time.LocalDateTime localDateTime57 = localDateTime54.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime59 = localDateTime54.plusHours((int) ' ');
        org.joda.time.ReadableInstant readableInstant60 = null;
        org.joda.time.DateTime dateTime61 = localDateTime59.toDateTime(readableInstant60);
        long long62 = dateTime61.getMillis();
        org.joda.time.DateTimeZone dateTimeZone63 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str65 = dateTimeZone63.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime66 = org.joda.time.LocalDateTime.now(dateTimeZone63);
        org.joda.time.DateTimeFieldType dateTimeFieldType68 = localDateTime66.getFieldType((int) (short) 0);
        boolean boolean69 = dateTime61.isSupported(dateTimeFieldType68);
        org.joda.time.DateTime dateTime70 = localDateTime49.toDateTime((org.joda.time.ReadableInstant) dateTime61);
        int[] intArray72 = chronology42.get((org.joda.time.ReadablePartial) localDateTime49, 11L);
        int[] intArray74 = dateTimeField17.add((org.joda.time.ReadablePartial) localDateTime37, (int) (short) 10, intArray72, (int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime76 = localDateTime37.minusMinutes(0);
        org.joda.time.LocalDateTime.Property property77 = localDateTime37.dayOfMonth();
        java.util.Locale.Category category78 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale79 = java.util.Locale.getDefault();
        java.lang.String str80 = locale79.getISO3Language();
        java.util.Locale.setDefault(category78, locale79);
        java.util.Locale locale82 = java.util.Locale.getDefault(category78);
        java.util.Locale locale83 = java.util.Locale.ENGLISH;
        java.util.Locale.setDefault(category78, locale83);
        java.util.Locale locale85 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet86 = locale85.getUnicodeLocaleAttributes();
        java.util.Locale locale87 = null;
        java.lang.String str88 = locale85.getDisplayCountry(locale87);
        java.lang.String str89 = locale85.getVariant();
        java.util.Locale.setDefault(category78, locale85);
        int int91 = property77.getMaximumTextLength(locale85);
        java.lang.String str92 = locale85.getScript();
        int int93 = dateTimeField2.getMaximumTextLength(locale85);
        long long96 = dateTimeField2.add((long) (-51), 1645629535906L);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60000L) + "'", long4 == (-60000L));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "100" + "'", str21, "100");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "minuteOfDay" + "'", str24, "minuteOfDay");
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 1L + "'", long27 == 1L);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "+00:00" + "'", str30, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertNull(durationField35);
// flaky:         org.junit.Assert.assertEquals("'" + str36 + "' != '" + "26611522" + "'", str36, "26611522");
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(durationField43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str46 + "' != '" + "2022-02-22T07:23:31.522" + "'", str46, "2022-02-22T07:23:31.522");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 20 + "'", int47 == 20);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "+00:00" + "'", str53, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertNotNull(dateTime61);
// flaky:         org.junit.Assert.assertTrue("'" + long62 + "' != '" + 1645629811522L + "'", long62 == 1645629811522L);
        org.junit.Assert.assertNotNull(dateTimeZone63);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "+00:00" + "'", str65, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertNotNull(dateTimeFieldType68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[1970, 1, 1, 11]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[1970, 1, 1, 11]");
        org.junit.Assert.assertNotNull(localDateTime76);
        org.junit.Assert.assertNotNull(property77);
        org.junit.Assert.assertTrue("'" + category78 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category78.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale79);
        org.junit.Assert.assertEquals(locale79.toString(), "de");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "deu" + "'", str80, "deu");
        org.junit.Assert.assertNotNull(locale82);
        org.junit.Assert.assertEquals(locale82.toString(), "de");
        org.junit.Assert.assertNotNull(locale83);
        org.junit.Assert.assertEquals(locale83.toString(), "en");
        org.junit.Assert.assertNotNull(locale85);
        org.junit.Assert.assertEquals(locale85.toString(), "");
        org.junit.Assert.assertNotNull(strSet86);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "" + "'", str88, "");
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "" + "'", str89, "");
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 2 + "'", int91 == 2);
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "" + "'", str92, "");
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 4 + "'", int93 == 4);
        org.junit.Assert.assertTrue("'" + long96 + "' != '" + 98737772154359949L + "'", long96 == 98737772154359949L);
    }

    @Test
    public void test10332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10332");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.millisOfDay();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime3.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime3.plusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minusHours((int) (short) 10);
        int int11 = localDateTime8.getMinuteOfHour();
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.LocalDateTime localDateTime13 = localDateTime8.minus(readablePeriod12);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray14 = localDateTime13.getFieldTypes();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str17 = dateTimeZone15.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime18 = org.joda.time.LocalDateTime.now(dateTimeZone15);
        org.joda.time.LocalDateTime.Property property19 = localDateTime18.millisOfDay();
        org.joda.time.ReadableInstant readableInstant20 = null;
        long long21 = property19.getDifferenceAsLong(readableInstant20);
        org.joda.time.DurationField durationField22 = property19.getLeapDurationField();
        java.util.Locale locale23 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet24 = locale23.getUnicodeLocaleAttributes();
        java.lang.String str25 = locale23.getLanguage();
        java.lang.String str26 = locale23.toLanguageTag();
        java.lang.String str27 = property19.getAsShortText(locale23);
        org.joda.time.LocalDateTime localDateTime28 = property19.roundCeilingCopy();
        org.joda.time.DurationField durationField29 = property19.getRangeDurationField();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str32 = dateTimeZone30.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime33 = org.joda.time.LocalDateTime.now(dateTimeZone30);
        org.joda.time.LocalDateTime.Property property34 = localDateTime33.millisOfDay();
        org.joda.time.DurationFieldType durationFieldType35 = org.joda.time.DurationFieldType.centuries();
        boolean boolean36 = localDateTime33.equals((java.lang.Object) durationFieldType35);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray37 = localDateTime33.getFieldTypes();
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str40 = dateTimeZone38.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime41 = org.joda.time.LocalDateTime.now(dateTimeZone38);
        org.joda.time.LocalDateTime.Property property42 = localDateTime41.millisOfDay();
        org.joda.time.LocalDateTime localDateTime44 = localDateTime41.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime46 = localDateTime41.plusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime48 = localDateTime46.minusHours((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime50 = localDateTime48.withEra((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property51 = localDateTime50.secondOfMinute();
        boolean boolean52 = localDateTime33.isAfter((org.joda.time.ReadablePartial) localDateTime50);
        int int53 = property19.compareTo((org.joda.time.ReadablePartial) localDateTime33);
        org.joda.time.LocalDateTime.Property property54 = localDateTime33.yearOfCentury();
        boolean boolean55 = localDateTime13.isBefore((org.joda.time.ReadablePartial) localDateTime33);
        org.joda.time.DurationFieldType durationFieldType56 = org.joda.time.DurationFieldType.months();
        org.joda.time.LocalDateTime localDateTime58 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology59 = localDateTime58.getChronology();
        org.joda.time.DurationField durationField60 = chronology59.weekyears();
        org.joda.time.DurationField durationField61 = chronology59.seconds();
        org.joda.time.DurationField durationField62 = chronology59.seconds();
        org.joda.time.DurationField durationField63 = chronology59.seconds();
        org.joda.time.DurationField durationField64 = chronology59.weekyears();
        boolean boolean65 = durationFieldType56.isSupported(chronology59);
        org.joda.time.LocalDateTime localDateTime67 = localDateTime13.withFieldAdded(durationFieldType56, 40);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00" + "'", str2, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 23 + "'", int11 == 23);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+00:00" + "'", str17, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertNull(durationField22);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "");
        org.junit.Assert.assertNotNull(strSet24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "und" + "'", str26, "und");
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "26611559" + "'", str27, "26611559");
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "+00:00" + "'", str32, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(durationFieldType35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray37);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "+00:00" + "'", str40, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(durationFieldType56);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(durationField60);
        org.junit.Assert.assertNotNull(durationField61);
        org.junit.Assert.assertNotNull(durationField62);
        org.junit.Assert.assertNotNull(durationField63);
        org.junit.Assert.assertNotNull(durationField64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(localDateTime67);
    }

    @Test
    public void test10333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10333");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DateTimeField dateTimeField3 = chronology2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone4 = chronology2.getZone();
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        long long8 = chronology2.add(readablePeriod5, (long) 55105632, (-997));
        org.joda.time.DateTimeField dateTimeField9 = chronology2.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime((long) 10);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.plus(readablePeriod12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime11.minusMonths(605);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str19 = dateTimeZone17.getShortName((long) (short) 10);
        long long21 = dateTimeZone17.convertUTCToLocal((long) ' ');
        java.lang.String str22 = dateTimeZone17.toString();
        long long25 = dateTimeZone17.adjustOffset((long) (short) 100, false);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone17);
        boolean boolean28 = dateTimeZone17.equals((java.lang.Object) "CA");
        java.lang.String str29 = dateTimeZone17.toString();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone17);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone17);
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime(0L, dateTimeZone17);
        int[] intArray33 = localDateTime32.getValues();
        chronology2.validate((org.joda.time.ReadablePartial) localDateTime15, intArray33);
        org.joda.time.DateTimeField dateTimeField35 = chronology2.minuteOfHour();
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 55105632L + "'", long8 == 55105632L);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "+00:00" + "'", str19, "+00:00");
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 32L + "'", long21 == 32L);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "UTC" + "'", str22, "UTC");
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 100L + "'", long25 == 100L);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "UTC" + "'", str29, "UTC");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1970, 1, 1, 0]");
        org.junit.Assert.assertNotNull(dateTimeField35);
    }

    @Test
    public void test10334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10334");
        java.util.Locale locale0 = java.util.Locale.CANADA_FRENCH;
        java.util.Set<java.lang.String> strSet1 = locale0.getUnicodeLocaleKeys();
        int int2 = strSet1.size();
        strSet1.clear();
        java.util.Locale locale4 = java.util.Locale.CANADA_FRENCH;
        java.util.Set<java.lang.String> strSet5 = locale4.getUnicodeLocaleKeys();
        java.util.stream.Stream<java.lang.String> strStream6 = strSet5.parallelStream();
        boolean boolean7 = strSet1.retainAll((java.util.Collection<java.lang.String>) strSet5);
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime();
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.LocalDateTime localDateTime11 = localDateTime8.withDurationAdded(readableDuration9, (int) '#');
        org.joda.time.LocalDateTime.Property property12 = localDateTime8.era();
        java.util.Locale locale13 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet14 = locale13.getUnicodeLocaleAttributes();
        int int15 = property12.getMaximumTextLength(locale13);
        boolean boolean16 = strSet5.equals((java.lang.Object) locale13);
        java.util.Spliterator<java.lang.String> strSpliterator17 = strSet5.spliterator();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean19 = strSet5.add("2022-02-22T07:19:56.379");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertNotNull(strStream6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "");
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2 + "'", int15 == 2);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(strSpliterator17);
    }

    @Test
    public void test10335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10335");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DurationField durationField3 = chronology2.weekyears();
        org.joda.time.DurationField durationField4 = chronology2.seconds();
        org.joda.time.DurationField durationField5 = chronology2.seconds();
        org.joda.time.DurationField durationField6 = chronology2.seconds();
        org.joda.time.DateTimeField dateTimeField7 = chronology2.millisOfDay();
        org.joda.time.DateTimeField dateTimeField8 = chronology2.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField9 = chronology2.weekyear();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str12 = dateTimeZone10.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime13 = org.joda.time.LocalDateTime.now(dateTimeZone10);
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.millisOfDay();
        org.joda.time.LocalDateTime localDateTime16 = property14.addToCopy(500);
        int[] intArray18 = chronology2.get((org.joda.time.ReadablePartial) localDateTime16, 0L);
        org.joda.time.DateTimeField dateTimeField19 = chronology2.year();
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00" + "'", str12, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[1970, 1, 1, 0]");
        org.junit.Assert.assertNotNull(dateTimeField19);
    }

    @Test
    public void test10336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10336");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(100L);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusSeconds(9);
        org.joda.time.LocalDateTime.Property property5 = localDateTime1.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime1.withCenturyOfEra(2);
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.LocalDateTime.Property property9 = localDateTime7.property(dateTimeFieldType8);
        org.joda.time.LocalDateTime.Property property10 = localDateTime7.weekOfWeekyear();
        int int11 = localDateTime7.getMonthOfYear();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime7.plusDays((-997));
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.minus(readableDuration14);
        java.lang.String str16 = localDateTime13.toString();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "0267-04-10T00:00:00.100" + "'", str16, "0267-04-10T00:00:00.100");
    }

    @Test
    public void test10337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10337");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.millisOfDay();
        java.lang.String str5 = property4.getName();
        org.joda.time.LocalDateTime localDateTime6 = property4.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.minusHours(0);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.withDayOfYear((int) '#');
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology14 = localDateTime13.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = chronology14.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField16 = chronology14.minuteOfDay();
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((-100L), chronology14);
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime();
        org.joda.time.ReadableDuration readableDuration19 = null;
        org.joda.time.LocalDateTime localDateTime21 = localDateTime18.withDurationAdded(readableDuration19, (int) '#');
        int int22 = localDateTime21.getDayOfWeek();
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTimeField dateTimeField25 = dateTimeFieldType23.getField(chronology24);
        java.util.Locale locale27 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale28 = locale27.stripExtensions();
        java.lang.String str29 = dateTimeField25.getAsShortText(100, locale28);
        int int31 = dateTimeField25.getLeapAmount((long) (short) 100);
        java.lang.String str32 = dateTimeField25.getName();
        long long35 = dateTimeField25.add((long) (short) 1, 0);
        int int37 = dateTimeField25.get((long) 86399999);
        int int39 = dateTimeField25.get((long) ' ');
        int int41 = dateTimeField25.getMaximumValue(97L);
        long long44 = dateTimeField25.set(1645629374450L, 20);
        org.joda.time.DurationField durationField45 = dateTimeField25.getLeapDurationField();
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str48 = dateTimeZone46.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime49 = org.joda.time.LocalDateTime.now(dateTimeZone46);
        org.joda.time.LocalDateTime.Property property50 = localDateTime49.millisOfDay();
        org.joda.time.LocalDateTime localDateTime52 = localDateTime49.withYear((int) (short) 100);
        int int53 = localDateTime52.getCenturyOfEra();
        org.joda.time.ReadablePeriod readablePeriod54 = null;
        org.joda.time.LocalDateTime localDateTime56 = localDateTime52.withPeriodAdded(readablePeriod54, 10);
        org.joda.time.LocalDateTime localDateTime58 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology59 = localDateTime58.getChronology();
        org.joda.time.DateTimeField dateTimeField60 = chronology59.halfdayOfDay();
        org.joda.time.DurationField durationField61 = dateTimeField60.getRangeDurationField();
        org.joda.time.DateTimeZone dateTimeZone62 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str64 = dateTimeZone62.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime65 = org.joda.time.LocalDateTime.now(dateTimeZone62);
        org.joda.time.LocalDateTime.Property property66 = localDateTime65.millisOfDay();
        java.lang.String str67 = property66.getName();
        org.joda.time.LocalDateTime localDateTime68 = property66.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime70 = localDateTime68.plusYears((int) (short) -1);
        int[] intArray78 = new int[] { 'a', (-1), 10, 26151696, 4, (byte) 1 };
        int[] intArray80 = dateTimeField60.set((org.joda.time.ReadablePartial) localDateTime68, 0, intArray78, (int) (short) 0);
        int int81 = dateTimeField25.getMaximumValue((org.joda.time.ReadablePartial) localDateTime52, intArray78);
        chronology14.validate((org.joda.time.ReadablePartial) localDateTime21, intArray78);
        boolean boolean83 = localDateTime10.isAfter((org.joda.time.ReadablePartial) localDateTime21);
        org.joda.time.LocalDateTime localDateTime85 = localDateTime10.withWeekyear(0);
        org.joda.time.DateTimeZone dateTimeZone86 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str88 = dateTimeZone86.getShortName((long) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone89 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str91 = dateTimeZone89.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime92 = org.joda.time.LocalDateTime.now(dateTimeZone89);
        long long94 = dateTimeZone86.getMillisKeepLocal(dateTimeZone89, 1645629358939L);
        java.lang.String str95 = dateTimeZone86.toString();
        long long98 = dateTimeZone86.convertLocalToUTC((long) 26206, false);
        org.joda.time.LocalDateTime localDateTime99 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime10, dateTimeZone86);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00" + "'", str2, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "millisOfDay" + "'", str5, "millisOfDay");
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "100" + "'", str29, "100");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "minuteOfDay" + "'", str32, "minuteOfDay");
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 1L + "'", long35 == 1L);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1439 + "'", int37 == 1439);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1439 + "'", int41 == 1439);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 1645575614450L + "'", long44 == 1645575614450L);
        org.junit.Assert.assertNull(durationField45);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "+00:00" + "'", str48, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(durationField61);
        org.junit.Assert.assertNotNull(dateTimeZone62);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "+00:00" + "'", str64, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "millisOfDay" + "'", str67, "millisOfDay");
        org.junit.Assert.assertNotNull(localDateTime68);
        org.junit.Assert.assertNotNull(localDateTime70);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[0, 1, 10, 26151696, 4, 1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[0, 1, 10, 26151696, 4, 1]");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 1439 + "'", int81 == 1439);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(localDateTime85);
        org.junit.Assert.assertNotNull(dateTimeZone86);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "+00:00" + "'", str88, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone89);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "+00:00" + "'", str91, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime92);
        org.junit.Assert.assertTrue("'" + long94 + "' != '" + 1645629358939L + "'", long94 == 1645629358939L);
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "UTC" + "'", str95, "UTC");
        org.junit.Assert.assertTrue("'" + long98 + "' != '" + 26206L + "'", long98 == 26206L);
    }

    @Test
    public void test10338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10338");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getShortName((long) (short) 10);
        long long4 = dateTimeZone0.convertUTCToLocal((long) ' ');
        java.lang.String str5 = dateTimeZone0.toString();
        long long7 = dateTimeZone0.previousTransition(32L);
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.withWeekyear(22);
        org.joda.time.LocalDateTime.Property property11 = localDateTime10.millisOfDay();
        org.joda.time.LocalDateTime localDateTime12 = property11.roundCeilingCopy();
        org.joda.time.LocalDateTime localDateTime13 = property11.withMinimumValue();
        org.joda.time.LocalDateTime localDateTime15 = property11.addWrapFieldToCopy(81271132);
        org.joda.time.LocalDateTime.Property property16 = localDateTime15.era();
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.hourOfDay();
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology20 = localDateTime19.getChronology();
        org.joda.time.DurationField durationField21 = chronology20.weekyears();
        org.joda.time.DurationField durationField22 = chronology20.centuries();
        org.joda.time.DurationField durationField23 = chronology20.minutes();
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime(chronology20);
        boolean boolean25 = dateTimeFieldType17.isSupported(chronology20);
        org.joda.time.DateTimeZone dateTimeZone26 = chronology20.getZone();
        org.joda.time.DateTimeField dateTimeField27 = chronology20.weekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = dateTimeField27.getType();
        java.lang.String str29 = dateTimeFieldType28.toString();
        org.joda.time.DurationFieldType durationFieldType30 = dateTimeFieldType28.getDurationType();
        java.lang.String str31 = dateTimeFieldType28.getName();
        boolean boolean32 = localDateTime15.isSupported(dateTimeFieldType28);
        java.lang.String str33 = dateTimeFieldType28.getName();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00" + "'", str2, "+00:00");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 32L + "'", long4 == 32L);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "UTC" + "'", str5, "UTC");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 32L + "'", long7 == 32L);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "weekyear" + "'", str29, "weekyear");
        org.junit.Assert.assertNotNull(durationFieldType30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "weekyear" + "'", str31, "weekyear");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "weekyear" + "'", str33, "weekyear");
    }

    @Test
    public void test10339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10339");
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology3 = localDateTime2.getChronology();
        org.joda.time.DurationField durationField4 = chronology3.weekyears();
        org.joda.time.DurationField durationField5 = chronology3.centuries();
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime((long) (byte) 0, chronology3);
        org.joda.time.DurationField durationField7 = chronology3.millis();
        org.joda.time.DateTimeField dateTimeField8 = chronology3.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField9 = chronology3.millisOfSecond();
        org.joda.time.Chronology chronology10 = chronology3.withUTC();
        org.joda.time.DateTimeField dateTimeField11 = chronology10.secondOfDay();
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime(chronology10);
        org.joda.time.DurationField durationField13 = chronology10.millis();
        org.joda.time.DateTimeField dateTimeField14 = chronology10.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField15 = chronology10.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField16 = chronology10.dayOfYear();
        // The following exception was thrown during execution in test generation
        try {
            long long21 = chronology10.getDateTimeMillis(51036394, 248, 87, 81097784);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 248 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
    }

    @Test
    public void test10340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10340");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.DurationFieldType durationFieldType1 = dateTimeFieldType0.getDurationType();
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.weekyears();
        org.joda.time.DurationField durationField6 = chronology4.centuries();
        boolean boolean7 = durationFieldType1.isSupported(chronology4);
        org.joda.time.DurationField durationField8 = chronology4.halfdays();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.Chronology chronology10 = chronology4.withZone(dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField11 = chronology4.minuteOfHour();
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        long long15 = chronology4.add(readablePeriod12, (long) (-115200001), 27427155);
        org.joda.time.DurationField durationField16 = chronology4.seconds();
        org.joda.time.DurationField durationField17 = chronology4.weeks();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(durationFieldType1);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-115200001L) + "'", long15 == (-115200001L));
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(durationField17);
    }

    @Test
    public void test10341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10341");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.millisOfDay();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime3.withYear((int) (short) 100);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.minuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str10 = dateTimeZone8.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now(dateTimeZone8);
        org.joda.time.DateTime dateTime12 = localDateTime6.toDateTime(dateTimeZone8);
        org.joda.time.Instant instant13 = dateTime12.toInstant();
        org.joda.time.Instant instant14 = dateTime12.toInstant();
        org.joda.time.DateTimeZone dateTimeZone15 = instant14.getZone();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00" + "'", str2, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+00:00" + "'", str10, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertNotNull(instant14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
    }

    @Test
    public void test10342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10342");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DateTimeField dateTimeField3 = chronology2.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField4 = chronology2.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField5 = chronology2.millisOfSecond();
        org.joda.time.DurationField durationField6 = chronology2.centuries();
        long long8 = durationField6.getValueAsLong((long) (byte) 100);
        long long10 = durationField6.getValueAsLong((long) 25807473);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
    }

    @Test
    public void test10343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10343");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str3 = dateTimeZone1.getShortName((long) (short) 10);
        long long5 = dateTimeZone1.convertUTCToLocal((long) ' ');
        java.lang.String str6 = dateTimeZone1.toString();
        java.lang.String str7 = dateTimeZone1.toString();
        java.util.Locale locale9 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale10 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str11 = locale9.getDisplayCountry(locale10);
        java.util.Locale locale12 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale13 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str14 = locale12.getDisplayCountry(locale13);
        java.lang.String str15 = locale9.getDisplayVariant(locale12);
        java.util.Locale locale16 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale17 = locale16.stripExtensions();
        java.lang.String str18 = locale9.getDisplayLanguage(locale17);
        java.lang.String str19 = dateTimeZone1.getName((long) 67, locale17);
        java.lang.String str21 = dateTimeZone1.getName(1645629370103L);
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime((java.lang.Object) "26232281", dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.minusMillis(549744);
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.plus(readablePeriod25);
        int int27 = localDateTime26.getMillisOfDay();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str29 = localDateTime26.toString("2022-02-22T07:16:58.247");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: T");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+00:00" + "'", str3, "+00:00");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 32L + "'", long5 == 32L);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "UTC" + "'", str6, "UTC");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "UTC" + "'", str7, "UTC");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Canada" + "'", str11, "Canada");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Canada" + "'", str14, "Canada");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "fran\347ais" + "'", str18, "fran\347ais");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "+00:00" + "'", str19, "+00:00");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "+00:00" + "'", str21, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 85850256 + "'", int27 == 85850256);
    }

    @Test
    public void test10344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10344");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        org.joda.time.LocalDateTime localDateTime3 = localDateTime0.withDurationAdded(readableDuration1, (int) '#');
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.weekyear();
        org.joda.time.DurationFieldType durationFieldType5 = org.joda.time.DurationFieldType.days();
        java.lang.String str6 = durationFieldType5.toString();
        org.joda.time.Chronology chronology7 = null;
        boolean boolean8 = durationFieldType5.isSupported(chronology7);
        java.lang.String str9 = durationFieldType5.toString();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime3.withFieldAdded(durationFieldType5, (-86340));
        int int12 = localDateTime3.getHourOfDay();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str15 = dateTimeZone13.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime16 = org.joda.time.LocalDateTime.now(dateTimeZone13);
        org.joda.time.LocalDateTime.Property property17 = localDateTime16.millisOfDay();
        int int18 = localDateTime16.getDayOfYear();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime16.minusYears(11);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime3.withFields((org.joda.time.ReadablePartial) localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(durationFieldType5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "days" + "'", str6, "days");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "days" + "'", str9, "days");
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 7 + "'", int12 == 7);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+00:00" + "'", str15, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 53 + "'", int18 == 53);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime21);
    }

    @Test
    public void test10345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10345");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        org.joda.time.LocalDateTime localDateTime3 = localDateTime0.withDurationAdded(readableDuration1, (int) '#');
        org.joda.time.LocalDateTime.Property property4 = localDateTime0.era();
        int int5 = localDateTime0.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime0.withWeekOfWeekyear((int) (byte) 1);
        org.joda.time.LocalDateTime.Property property8 = localDateTime0.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime0.minusMillis(0);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str13 = dateTimeZone11.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime14 = org.joda.time.LocalDateTime.now(dateTimeZone11);
        org.joda.time.LocalDateTime.Property property15 = localDateTime14.millisOfDay();
        org.joda.time.ReadableInstant readableInstant16 = null;
        long long17 = property15.getDifferenceAsLong(readableInstant16);
        org.joda.time.DurationField durationField18 = property15.getLeapDurationField();
        java.util.Locale locale19 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet20 = locale19.getUnicodeLocaleAttributes();
        java.lang.String str21 = locale19.getLanguage();
        java.lang.String str22 = locale19.toLanguageTag();
        java.lang.String str23 = property15.getAsShortText(locale19);
        org.joda.time.LocalDateTime localDateTime24 = property15.roundCeilingCopy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = null;
        java.lang.String str26 = localDateTime24.toString(dateTimeFormatter25);
        org.joda.time.LocalDateTime.Property property27 = localDateTime24.secondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str30 = dateTimeZone28.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime31 = org.joda.time.LocalDateTime.now(dateTimeZone28);
        org.joda.time.LocalDateTime.Property property32 = localDateTime31.millisOfDay();
        java.lang.String str33 = property32.getName();
        org.joda.time.LocalDateTime localDateTime34 = property32.roundHalfFloorCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        boolean boolean36 = localDateTime34.isSupported(dateTimeFieldType35);
        java.lang.String str37 = dateTimeFieldType35.toString();
        int int38 = localDateTime24.get(dateTimeFieldType35);
        int int39 = localDateTime0.get(dateTimeFieldType35);
        int int40 = localDateTime0.size();
        org.joda.time.DateTimeField[] dateTimeFieldArray41 = localDateTime0.getFields();
        org.joda.time.LocalDateTime.Property property42 = localDateTime0.era();
        org.joda.time.LocalDateTime localDateTime44 = localDateTime0.minusWeeks(1439);
        org.joda.time.ReadableDuration readableDuration45 = null;
        org.joda.time.LocalDateTime localDateTime47 = localDateTime0.withDurationAdded(readableDuration45, 0);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime49 = localDateTime47.withDayOfWeek(500);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 500 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 22 + "'", int5 == 22);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+00:00" + "'", str13, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNull(durationField18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "");
        org.junit.Assert.assertNotNull(strSet20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "und" + "'", str22, "und");
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "26611846" + "'", str23, "26611846");
        org.junit.Assert.assertNotNull(localDateTime24);
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "2022-02-22T07:23:31.846" + "'", str26, "2022-02-22T07:23:31.846");
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "+00:00" + "'", str30, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "millisOfDay" + "'", str33, "millisOfDay");
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(dateTimeFieldType35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "clockhourOfDay" + "'", str37, "clockhourOfDay");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 7 + "'", int38 == 7);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 7 + "'", int39 == 7);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 4 + "'", int40 == 4);
        org.junit.Assert.assertNotNull(dateTimeFieldArray41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(localDateTime47);
    }

    @Test
    public void test10346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10346");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getShortName((long) (short) 10);
        long long4 = dateTimeZone0.convertUTCToLocal((long) ' ');
        java.lang.String str5 = dateTimeZone0.toString();
        long long7 = dateTimeZone0.previousTransition(32L);
        java.lang.String str8 = dateTimeZone0.toString();
        java.util.Locale.Category category10 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale11 = java.util.Locale.FRENCH;
        java.util.Locale.setDefault(category10, locale11);
        java.lang.String str13 = locale11.getDisplayName();
        boolean boolean14 = locale11.hasExtensions();
        java.lang.String str15 = dateTimeZone0.getShortName(86399084L, locale11);
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str18 = dateTimeZone16.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime19 = org.joda.time.LocalDateTime.now(dateTimeZone16);
        org.joda.time.LocalDateTime.Property property20 = localDateTime19.millisOfDay();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime19.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime19.plusHours((int) ' ');
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.DateTime dateTime26 = localDateTime24.toDateTime(readableInstant25);
        long long27 = dateTime26.getMillis();
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = org.joda.time.DateTimeFieldType.hourOfDay();
        boolean boolean29 = dateTime26.isSupported(dateTimeFieldType28);
        int int30 = dateTimeZone0.getOffset((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = org.joda.time.DateTimeFieldType.yearOfEra();
        int int32 = dateTime26.get(dateTimeFieldType31);
        org.joda.time.Instant instant33 = dateTime26.toInstant();
        org.joda.time.DateTimeZone dateTimeZone34 = instant33.getZone();
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime(dateTimeZone34);
        java.lang.String str37 = dateTimeZone34.getShortName(183L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00" + "'", str2, "+00:00");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 32L + "'", long4 == 32L);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "UTC" + "'", str5, "UTC");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 32L + "'", long7 == 32L);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "UTC" + "'", str8, "UTC");
        org.junit.Assert.assertTrue("'" + category10 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category10.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "fran\347ais" + "'", str13, "fran\347ais");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+00:00" + "'", str15, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+00:00" + "'", str18, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
// flaky:         org.junit.Assert.assertTrue("'" + long27 + "' != '" + 1645629811863L + "'", long27 == 1645629811863L);
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2022 + "'", int32 == 2022);
        org.junit.Assert.assertNotNull(instant33);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "+00:00" + "'", str37, "+00:00");
    }

    @Test
    public void test10347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10347");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(100L);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusSeconds(9);
        org.joda.time.LocalDateTime.Property property5 = localDateTime1.secondOfMinute();
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.LocalDateTime localDateTime7 = localDateTime1.minus(readableDuration6);
        org.joda.time.DurationFieldType durationFieldType8 = org.joda.time.DurationFieldType.millis();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology11 = localDateTime10.getChronology();
        org.joda.time.DurationField durationField12 = chronology11.weekyears();
        org.joda.time.DurationField durationField13 = chronology11.centuries();
        org.joda.time.DurationField durationField14 = durationFieldType8.getField(chronology11);
        java.lang.String str15 = durationFieldType8.getName();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime7.withFieldAdded(durationFieldType8, 25822088);
        java.lang.String str18 = durationFieldType8.toString();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime(1645629442306L, dateTimeZone21);
        org.joda.time.Chronology chronology23 = localDateTime22.getChronology();
        org.joda.time.DurationField durationField24 = durationFieldType8.getField(chronology23);
        org.joda.time.DateTimeField dateTimeField25 = chronology23.yearOfEra();
        org.joda.time.DateTimeField dateTimeField26 = chronology23.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField27 = chronology23.minuteOfHour();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(durationFieldType8);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "millis" + "'", str15, "millis");
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "millis" + "'", str18, "millis");
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
    }

    @Test
    public void test10348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10348");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.days();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology3 = localDateTime2.getChronology();
        org.joda.time.DurationField durationField4 = chronology3.hours();
        org.joda.time.DurationField durationField5 = durationFieldType0.getField(chronology3);
        org.joda.time.DateTimeField dateTimeField6 = chronology3.hourOfHalfday();
        long long8 = dateTimeField6.roundHalfEven((long) (short) 0);
        long long10 = dateTimeField6.remainder((long) 100);
        long long12 = dateTimeField6.remainder((-27427140000L));
        boolean boolean13 = dateTimeField6.isLenient();
        java.util.Locale.Builder builder15 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder17 = builder15.addUnicodeLocaleAttribute("und");
        java.util.Locale locale18 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale19 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str20 = locale18.getDisplayCountry(locale19);
        java.lang.String str21 = locale19.getDisplayName();
        java.util.Locale.Builder builder22 = builder17.setLocale(locale19);
        java.util.Locale.Builder builder24 = builder17.setScript("");
        java.util.Locale locale25 = builder17.build();
        java.lang.String str26 = dateTimeField6.getAsShortText(1645629362661L, locale25);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str29 = dateTimeZone27.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime30 = org.joda.time.LocalDateTime.now(dateTimeZone27);
        org.joda.time.LocalDateTime.Property property31 = localDateTime30.millisOfDay();
        long long32 = property31.remainder();
        org.joda.time.LocalDateTime localDateTime33 = property31.roundFloorCopy();
        java.lang.String str34 = property31.getAsShortText();
        java.lang.String str35 = property31.getAsString();
        int int36 = property31.getMaximumValueOverall();
        org.joda.time.DurationField durationField37 = property31.getLeapDurationField();
        org.joda.time.DurationField durationField38 = property31.getLeapDurationField();
        org.joda.time.LocalDateTime localDateTime39 = property31.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime localDateTime40 = property31.withMaximumValue();
        java.util.Locale.Category category42 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale43 = java.util.Locale.FRENCH;
        java.util.Locale.setDefault(category42, locale43);
        java.lang.String str45 = locale43.getDisplayName();
        java.lang.String str46 = locale43.getDisplayName();
        java.lang.String str47 = locale43.getDisplayName();
        java.lang.String str48 = locale43.getISO3Country();
        java.lang.String str49 = dateTimeField6.getAsText((org.joda.time.ReadablePartial) localDateTime40, 915, locale43);
        int int50 = localDateTime40.getYearOfEra();
        org.joda.time.DurationFieldType durationFieldType51 = org.joda.time.DurationFieldType.days();
        java.lang.String str52 = durationFieldType51.toString();
        org.joda.time.Chronology chronology53 = null;
        boolean boolean54 = durationFieldType51.isSupported(chronology53);
        org.joda.time.LocalDateTime localDateTime56 = localDateTime40.withFieldAdded(durationFieldType51, 26362);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime58 = localDateTime56.withMinuteOfHour(26502591);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26502591 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 100L + "'", long10 == 100L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1260000L + "'", long12 == 1260000L);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Canada" + "'", str20, "Canada");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "fran\347ais (Canada)" + "'", str21, "fran\347ais (Canada)");
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "3" + "'", str26, "3");
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "+00:00" + "'", str29, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertNotNull(localDateTime33);
// flaky:         org.junit.Assert.assertEquals("'" + str34 + "' != '" + "26611890" + "'", str34, "26611890");
// flaky:         org.junit.Assert.assertEquals("'" + str35 + "' != '" + "26611890" + "'", str35, "26611890");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 86399999 + "'", int36 == 86399999);
        org.junit.Assert.assertNull(durationField37);
        org.junit.Assert.assertNull(durationField38);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertTrue("'" + category42 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category42.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "fran\347ais" + "'", str45, "fran\347ais");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "fran\347ais" + "'", str46, "fran\347ais");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "fran\347ais" + "'", str47, "fran\347ais");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "915" + "'", str49, "915");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2022 + "'", int50 == 2022);
        org.junit.Assert.assertNotNull(durationFieldType51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "days" + "'", str52, "days");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(localDateTime56);
    }

    @Test
    public void test10349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10349");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str3 = dateTimeZone1.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.LocalDateTime.Property property5 = localDateTime4.millisOfDay();
        org.joda.time.ReadableInstant readableInstant6 = null;
        long long7 = property5.getDifferenceAsLong(readableInstant6);
        java.util.Locale locale8 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str9 = locale8.getISO3Language();
        java.lang.String str10 = property5.getAsShortText(locale8);
        org.joda.time.DurationField durationField11 = property5.getDurationField();
        long long14 = durationField11.add((long) 1, 10);
        boolean boolean15 = durationField11.isPrecise();
        int int17 = durationField11.getValue((long) 26149500);
        int int20 = durationField11.getValue((long) (short) 10, 0L);
        long long23 = durationField11.add((long) 'a', (long) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType24 = durationField11.getType();
        org.joda.time.DurationFieldType durationFieldType25 = org.joda.time.DurationFieldType.days();
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology28 = localDateTime27.getChronology();
        org.joda.time.DurationField durationField29 = chronology28.hours();
        org.joda.time.DurationField durationField30 = durationFieldType25.getField(chronology28);
        org.joda.time.DateTimeField dateTimeField31 = chronology28.hourOfHalfday();
        org.joda.time.DurationField durationField32 = chronology28.weeks();
        boolean boolean33 = durationFieldType24.isSupported(chronology28);
        org.joda.time.DateTimeField dateTimeField34 = chronology28.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone35 = chronology28.getZone();
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime(72000000L, chronology28);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime36.plusMinutes(863999890);
        org.joda.time.LocalDateTime.Property property39 = localDateTime36.weekyear();
        org.joda.time.DurationField durationField40 = property39.getDurationField();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+00:00" + "'", str3, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "fra" + "'", str9, "fra");
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "26611924" + "'", str10, "26611924");
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 11L + "'", long14 == 11L);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 26149500 + "'", int17 == 26149500);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 10 + "'", int20 == 10);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 197L + "'", long23 == 197L);
        org.junit.Assert.assertNotNull(durationFieldType24);
        org.junit.Assert.assertNotNull(durationFieldType25);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(durationField40);
    }

    @Test
    public void test10350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10350");
        java.util.Locale locale0 = java.util.Locale.GERMANY;
        java.lang.String str1 = locale0.getDisplayCountry();
        java.lang.String str2 = locale0.getDisplayVariant();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Allemagne" + "'", str1, "Allemagne");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
    }

    @Test
    public void test10351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10351");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DurationField durationField3 = chronology2.weekyears();
        org.joda.time.DurationField durationField4 = chronology2.centuries();
        org.joda.time.DurationField durationField5 = chronology2.hours();
        org.joda.time.DurationField durationField6 = chronology2.seconds();
        org.joda.time.DateTimeField dateTimeField7 = chronology2.secondOfDay();
        org.joda.time.DateTimeField dateTimeField8 = chronology2.minuteOfDay();
        org.joda.time.DurationField durationField9 = chronology2.weekyears();
        org.joda.time.DateTimeField dateTimeField10 = chronology2.weekOfWeekyear();
        org.joda.time.DurationField durationField11 = chronology2.weeks();
        long long14 = durationField11.getMillis((-115200001), 1645629569006L);
        long long17 = durationField11.getDifferenceAsLong((long) 60030100, 833612973604892L);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-69672960604800000L) + "'", long14 == (-69672960604800000L));
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-1378328L) + "'", long17 == (-1378328L));
    }

    @Test
    public void test10352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10352");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        org.joda.time.LocalDateTime localDateTime3 = localDateTime0.withDurationAdded(readableDuration1, (int) '#');
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.weekyear();
        int int5 = property4.getMaximumValue();
        org.joda.time.DateTimeField dateTimeField6 = property4.getField();
        boolean boolean7 = dateTimeField6.isLenient();
        org.joda.time.tz.NameProvider nameProvider9 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale10 = java.util.Locale.CANADA;
        java.lang.String str13 = nameProvider9.getShortName(locale10, "fran\347ais", "2022-02-22T07:15:48.066");
        java.util.Locale locale14 = locale10.stripExtensions();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str17 = dateTimeZone15.getShortName((long) (short) 10);
        long long19 = dateTimeZone15.convertUTCToLocal((long) ' ');
        java.util.Locale locale21 = java.util.Locale.ROOT;
        java.lang.String str22 = dateTimeZone15.getName((long) (short) 0, locale21);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str25 = dateTimeZone23.getShortName((long) (short) 10);
        long long27 = dateTimeZone23.convertUTCToLocal((long) ' ');
        java.lang.String str28 = dateTimeZone23.toString();
        boolean boolean30 = dateTimeZone23.equals((java.lang.Object) (short) 100);
        java.util.Locale locale32 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str33 = dateTimeZone23.getShortName((long) (-1), locale32);
        java.lang.String str34 = locale21.getDisplayVariant(locale32);
        org.joda.time.tz.NameProvider nameProvider35 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale36 = java.util.Locale.CANADA;
        java.lang.String str39 = nameProvider35.getShortName(locale36, "fran\347ais", "2022-02-22T07:15:48.066");
        java.lang.String str40 = locale36.getLanguage();
        java.lang.String str41 = locale32.getDisplayLanguage(locale36);
        java.lang.String str42 = locale14.getDisplayLanguage(locale32);
        java.lang.String str43 = dateTimeField6.getAsText((-86340L), locale14);
        java.util.Locale locale44 = locale14.stripExtensions();
        java.lang.String str45 = locale44.toLanguageTag();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 292278993 + "'", int5 == 292278993);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(nameProvider9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "en_CA");
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "en_CA");
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+00:00" + "'", str17, "+00:00");
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 32L + "'", long19 == 32L);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+00:00" + "'", str22, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "+00:00" + "'", str25, "+00:00");
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 32L + "'", long27 == 32L);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "UTC" + "'", str28, "UTC");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "+00:00" + "'", str33, "+00:00");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(nameProvider35);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "en_CA");
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "en" + "'", str40, "en");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "French" + "'", str41, "French");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "anglais" + "'", str42, "anglais");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "1970" + "'", str43, "1970");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "en-CA" + "'", str45, "en-CA");
    }

    @Test
    public void test10353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10353");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale1 = java.util.Locale.FRENCH;
        java.util.Locale.setDefault(category0, locale1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTimeField dateTimeField5 = dateTimeFieldType3.getField(chronology4);
        java.util.Locale locale7 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale8 = locale7.stripExtensions();
        java.lang.String str9 = dateTimeField5.getAsShortText(100, locale8);
        java.util.Locale.setDefault(category0, locale8);
        java.util.Locale locale13 = new java.util.Locale("+00:00", "DurationField[centuries]");
        java.util.Locale.setDefault(category0, locale13);
        java.util.Locale locale15 = java.util.Locale.getDefault(category0);
        java.util.Locale locale16 = java.util.Locale.getDefault(category0);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str17 = locale16.getISO3Language();
            org.junit.Assert.fail("Expected exception of type java.util.MissingResourceException; message: Couldn't find 3-letter language code for +00:00");
        } catch (java.util.MissingResourceException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "fr");
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "100" + "'", str9, "100");
        org.junit.Assert.assertEquals(locale13.toString(), "+00:00_DURATIONFIELD[CENTURIES]");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "+00:00_DURATIONFIELD[CENTURIES]");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "+00:00_DURATIONFIELD[CENTURIES]");
    }

    @Test
    public void test10354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10354");
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.weekyears();
        org.joda.time.DurationField durationField6 = chronology4.centuries();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((long) (byte) 0, chronology4);
        org.joda.time.DurationField durationField8 = chronology4.millis();
        org.joda.time.DateTimeField dateTimeField9 = chronology4.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField10 = chronology4.hourOfDay();
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime((java.lang.Object) "26165577", chronology4);
        org.joda.time.DateTimeField dateTimeField12 = chronology4.minuteOfHour();
        org.joda.time.DurationField durationField13 = chronology4.weeks();
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
    }

    @Test
    public void test10355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10355");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DurationField durationField3 = chronology2.hours();
        java.lang.String str4 = chronology2.toString();
        org.joda.time.DateTimeField dateTimeField5 = chronology2.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField6 = chronology2.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime();
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.LocalDateTime localDateTime10 = localDateTime7.withDurationAdded(readableDuration8, (int) '#');
        org.joda.time.LocalDateTime.Property property11 = localDateTime10.weekyear();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime10.minusMillis((-1));
        org.joda.time.LocalDateTime.Property property14 = localDateTime10.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime15 = property14.roundHalfFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str18 = dateTimeZone16.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime19 = org.joda.time.LocalDateTime.now(dateTimeZone16);
        org.joda.time.LocalDateTime.Property property20 = localDateTime19.millisOfDay();
        org.joda.time.DurationFieldType durationFieldType21 = org.joda.time.DurationFieldType.centuries();
        boolean boolean22 = localDateTime19.equals((java.lang.Object) durationFieldType21);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray23 = localDateTime19.getFieldTypes();
        java.lang.String str24 = localDateTime19.toString();
        org.joda.time.LocalDateTime localDateTime26 = localDateTime19.plusMillis(22);
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.secondOfDay();
        boolean boolean28 = localDateTime19.isSupported(dateTimeFieldType27);
        int int29 = localDateTime15.indexOf(dateTimeFieldType27);
        int[] intArray31 = chronology2.get((org.joda.time.ReadablePartial) localDateTime15, 1645629358650L);
        org.joda.time.DurationField durationField32 = chronology2.millis();
        org.joda.time.DurationField durationField33 = chronology2.halfdays();
        org.joda.time.LocalDateTime localDateTime34 = org.joda.time.LocalDateTime.now(chronology2);
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str37 = dateTimeZone35.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime38 = org.joda.time.LocalDateTime.now(dateTimeZone35);
        org.joda.time.LocalDateTime.Property property39 = localDateTime38.millisOfDay();
        org.joda.time.LocalDateTime localDateTime41 = localDateTime38.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime43 = localDateTime38.plusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime45 = localDateTime43.minusHours((int) (short) 10);
        int int46 = localDateTime43.getMinuteOfHour();
        org.joda.time.ReadablePeriod readablePeriod47 = null;
        org.joda.time.LocalDateTime localDateTime48 = localDateTime43.minus(readablePeriod47);
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str51 = dateTimeZone49.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime52 = org.joda.time.LocalDateTime.now(dateTimeZone49);
        org.joda.time.LocalDateTime.Property property53 = localDateTime52.millisOfDay();
        org.joda.time.LocalDateTime localDateTime55 = localDateTime52.withYear((int) (short) 100);
        int int56 = localDateTime55.getCenturyOfEra();
        boolean boolean57 = localDateTime43.isBefore((org.joda.time.ReadablePartial) localDateTime55);
        org.joda.time.LocalDateTime.Property property58 = localDateTime43.hourOfDay();
        int[] intArray60 = chronology2.get((org.joda.time.ReadablePartial) localDateTime43, 1645629398149L);
        org.joda.time.LocalDateTime.Property property61 = localDateTime43.year();
        int int62 = localDateTime43.getYearOfEra();
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "ISOChronology[UTC]" + "'", str4, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+00:00" + "'", str18, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(durationFieldType21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray23);
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "2022-02-22T07:23:32.023" + "'", str24, "2022-02-22T07:23:32.023");
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[2022, 2, 23, 54958650]");
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "+00:00" + "'", str37, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(localDateTime45);
// flaky:         org.junit.Assert.assertTrue("'" + int46 + "' != '" + 23 + "'", int46 == 23);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "+00:00" + "'", str51, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[2022, 2, 23, 54998149]");
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 2022 + "'", int62 == 2022);
    }

    @Test
    public void test10356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10356");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.days();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology3 = localDateTime2.getChronology();
        org.joda.time.DurationField durationField4 = chronology3.hours();
        org.joda.time.DurationField durationField5 = durationFieldType0.getField(chronology3);
        org.joda.time.Chronology chronology6 = chronology3.withUTC();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField8 = chronology6.secondOfMinute();
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
    }

    @Test
    public void test10357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10357");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DurationField durationField3 = chronology2.weekyears();
        org.joda.time.DurationField durationField4 = chronology2.centuries();
        org.joda.time.DurationField durationField5 = chronology2.minutes();
        org.joda.time.DateTimeField dateTimeField6 = chronology2.era();
        org.joda.time.LocalDateTime localDateTime7 = org.joda.time.LocalDateTime.now(chronology2);
        org.joda.time.DateTimeField dateTimeField8 = chronology2.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField9 = chronology2.monthOfYear();
        org.joda.time.tz.NameProvider nameProvider11 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale12 = java.util.Locale.CANADA;
        java.lang.String str15 = nameProvider11.getShortName(locale12, "fran\347ais", "2022-02-22T07:15:48.066");
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str18 = dateTimeZone16.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime19 = org.joda.time.LocalDateTime.now(dateTimeZone16);
        org.joda.time.LocalDateTime.Property property20 = localDateTime19.millisOfDay();
        org.joda.time.DurationFieldType durationFieldType21 = org.joda.time.DurationFieldType.centuries();
        boolean boolean22 = localDateTime19.equals((java.lang.Object) durationFieldType21);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray23 = localDateTime19.getFieldTypes();
        java.lang.String str24 = localDateTime19.toString();
        org.joda.time.LocalDateTime localDateTime26 = localDateTime19.plusMillis(22);
        org.joda.time.LocalDateTime.Property property27 = localDateTime19.monthOfYear();
        java.util.Locale locale28 = java.util.Locale.ROOT;
        int int29 = property27.getMaximumShortTextLength(locale28);
        java.lang.String str30 = locale12.getDisplayCountry(locale28);
        java.lang.String str31 = locale28.getVariant();
        java.util.Locale locale32 = locale28.stripExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str33 = dateTimeField9.getAsShortText(26460000, locale28);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 26460000");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(nameProvider11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "en_CA");
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+00:00" + "'", str18, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(durationFieldType21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray23);
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "2022-02-22T07:23:32.109" + "'", str24, "2022-02-22T07:23:32.109");
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 3 + "'", int29 == 3);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Canada" + "'", str30, "Canada");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "");
    }

    @Test
    public void test10358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10358");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        org.joda.time.LocalDateTime localDateTime3 = localDateTime0.withDurationAdded(readableDuration1, (int) '#');
        int int4 = localDateTime3.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime3.withMinuteOfHour(2);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str9 = dateTimeZone7.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime10 = org.joda.time.LocalDateTime.now(dateTimeZone7);
        org.joda.time.LocalDateTime.Property property11 = localDateTime10.millisOfDay();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime10.withYear((int) (short) 100);
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime13.minusMonths(2022);
        int int17 = localDateTime13.getDayOfMonth();
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.dayOfMonth();
        boolean boolean19 = localDateTime13.equals((java.lang.Object) dateTimeFieldType18);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime13.plusHours(26163523);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime13.withDayOfMonth((int) (byte) 10);
        int int24 = localDateTime6.compareTo((org.joda.time.ReadablePartial) localDateTime23);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime6.withWeekyear(2);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime6.withWeekyear(31);
        int int29 = localDateTime28.getWeekyear();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2 + "'", int4 == 2);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00" + "'", str9, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 22 + "'", int17 == 22);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 31 + "'", int29 == 31);
    }

    @Test
    public void test10359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10359");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(100L);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusSeconds(9);
        org.joda.time.LocalDateTime.Property property5 = localDateTime1.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime1.withCenturyOfEra(2);
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.LocalDateTime.Property property9 = localDateTime7.property(dateTimeFieldType8);
        org.joda.time.LocalDateTime.Property property10 = localDateTime7.weekOfWeekyear();
        org.joda.time.LocalDateTime.Property property11 = localDateTime7.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str14 = dateTimeZone12.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime15 = org.joda.time.LocalDateTime.now(dateTimeZone12);
        org.joda.time.LocalDateTime.Property property16 = localDateTime15.millisOfDay();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime15.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime15.plusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.minusHours((int) (short) 10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray23 = localDateTime20.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime25 = localDateTime20.minusMillis(0);
        boolean boolean26 = localDateTime7.isAfter((org.joda.time.ReadablePartial) localDateTime25);
        int int27 = localDateTime7.getDayOfWeek();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+00:00" + "'", str14, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 6 + "'", int27 == 6);
    }

    @Test
    public void test10360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10360");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(100L);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.centuryOfEra();
        int int3 = property2.getMaximumValueOverall();
        org.joda.time.LocalDateTime localDateTime4 = property2.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology7 = localDateTime6.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.halfdayOfDay();
        org.joda.time.DurationField durationField9 = dateTimeField8.getRangeDurationField();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime();
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.LocalDateTime localDateTime13 = localDateTime10.withDurationAdded(readableDuration11, (int) '#');
        int int14 = localDateTime13.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime13.withMinuteOfHour(2);
        java.util.Locale locale17 = java.util.Locale.CANADA;
        java.lang.String str18 = dateTimeField8.getAsText((org.joda.time.ReadablePartial) localDateTime16, locale17);
        java.lang.String str19 = locale17.getDisplayName();
        java.lang.String str20 = property2.getAsText(locale17);
        org.joda.time.tz.NameProvider nameProvider21 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale.Category category22 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale23 = java.util.Locale.FRENCH;
        java.util.Locale.setDefault(category22, locale23);
        java.lang.String str25 = locale23.toLanguageTag();
        java.lang.String str26 = locale23.getLanguage();
        java.lang.String str29 = nameProvider21.getShortName(locale23, "days", "26149261");
        org.joda.time.DateTimeZone.setNameProvider(nameProvider21);
        org.joda.time.DateTimeZone.setNameProvider(nameProvider21);
        java.util.Locale locale32 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet33 = locale32.getUnicodeLocaleAttributes();
        java.lang.String str34 = locale32.toLanguageTag();
        java.lang.String str35 = locale32.getScript();
        java.lang.String str38 = nameProvider21.getShortName(locale32, "44", "2022-02-22T07:16:49.120");
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.DateTimeField dateTimeField41 = dateTimeFieldType39.getField(chronology40);
        java.util.Locale locale43 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale44 = locale43.stripExtensions();
        java.lang.String str45 = dateTimeField41.getAsShortText(100, locale44);
        int int47 = dateTimeField41.getLeapAmount((long) (short) 100);
        java.lang.String str48 = dateTimeField41.getName();
        long long51 = dateTimeField41.add((long) (short) 1, 0);
        org.joda.time.tz.NameProvider nameProvider52 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale.Category category53 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale54 = java.util.Locale.FRENCH;
        java.util.Locale.setDefault(category53, locale54);
        java.lang.String str56 = locale54.toLanguageTag();
        java.lang.String str57 = locale54.getLanguage();
        java.lang.String str60 = nameProvider52.getShortName(locale54, "days", "26149261");
        org.joda.time.DateTimeZone.setNameProvider(nameProvider52);
        java.util.Locale locale62 = null;
        java.lang.String str65 = nameProvider52.getShortName(locale62, "26159153", "2022-02-22T07:15:52.067");
        java.util.Locale locale66 = java.util.Locale.GERMANY;
        java.lang.String str67 = locale66.getCountry();
        java.lang.String str70 = nameProvider52.getShortName(locale66, "100", "2022-02-22T07:16:09.701");
        int int71 = dateTimeField41.getMaximumShortTextLength(locale66);
        java.lang.String str74 = nameProvider21.getShortName(locale66, "436", "18");
        java.lang.String str75 = locale17.getDisplayName(locale66);
        java.lang.String str76 = locale66.getDisplayLanguage();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2922789 + "'", int3 == 2922789);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "AM" + "'", str18, "AM");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "English (Canada)" + "'", str19, "English (Canada)");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "19" + "'", str20, "19");
        org.junit.Assert.assertNotNull(nameProvider21);
        org.junit.Assert.assertTrue("'" + category22 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category22.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "fr" + "'", str25, "fr");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "fr" + "'", str26, "fr");
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "");
        org.junit.Assert.assertNotNull(strSet33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "und" + "'", str34, "und");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "100" + "'", str45, "100");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "minuteOfDay" + "'", str48, "minuteOfDay");
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 1L + "'", long51 == 1L);
        org.junit.Assert.assertNotNull(nameProvider52);
        org.junit.Assert.assertTrue("'" + category53 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category53.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "fr" + "'", str56, "fr");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "fr" + "'", str57, "fr");
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "DE" + "'", str67, "DE");
        org.junit.Assert.assertNull(str70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 4 + "'", int71 == 4);
        org.junit.Assert.assertNull(str74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "Englisch (Kanada)" + "'", str75, "Englisch (Kanada)");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "allemand" + "'", str76, "allemand");
    }

    @Test
    public void test10361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10361");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getShortName((long) (short) 10);
        long long4 = dateTimeZone0.convertUTCToLocal((long) ' ');
        java.lang.String str5 = dateTimeZone0.toString();
        long long8 = dateTimeZone0.adjustOffset((long) (short) 100, false);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str13 = dateTimeZone11.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime14 = org.joda.time.LocalDateTime.now(dateTimeZone11);
        org.joda.time.LocalDateTime.Property property15 = localDateTime14.millisOfDay();
        java.lang.String str16 = property15.getName();
        org.joda.time.LocalDateTime localDateTime17 = property15.roundHalfFloorCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        boolean boolean19 = localDateTime17.isSupported(dateTimeFieldType18);
        boolean boolean20 = localDateTime10.isSupported(dateTimeFieldType18);
        org.joda.time.LocalDateTime.Property property21 = localDateTime10.hourOfDay();
        org.joda.time.LocalDateTime localDateTime23 = property21.setCopy(23);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00" + "'", str2, "+00:00");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 32L + "'", long4 == 32L);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "UTC" + "'", str5, "UTC");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 100L + "'", long8 == 100L);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+00:00" + "'", str13, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "millisOfDay" + "'", str16, "millisOfDay");
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(localDateTime23);
    }

    @Test
    public void test10362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10362");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.millisOfDay();
        org.joda.time.DurationFieldType durationFieldType5 = org.joda.time.DurationFieldType.centuries();
        boolean boolean6 = localDateTime3.equals((java.lang.Object) durationFieldType5);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray7 = localDateTime3.getFieldTypes();
        java.lang.String str8 = localDateTime3.toString();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime3.plusMillis(22);
        org.joda.time.LocalDateTime.Property property11 = localDateTime3.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str14 = dateTimeZone12.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime15 = org.joda.time.LocalDateTime.now(dateTimeZone12);
        org.joda.time.LocalDateTime.Property property16 = localDateTime15.millisOfDay();
        java.lang.String str17 = property16.getName();
        int int18 = property16.getMaximumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = property16.getFieldType();
        int int20 = localDateTime3.indexOf(dateTimeFieldType19);
        org.joda.time.LocalDateTime.Property property21 = localDateTime3.weekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = property21.getFieldType();
        org.joda.time.LocalDateTime localDateTime23 = property21.roundHalfFloorCopy();
        org.joda.time.Chronology chronology24 = localDateTime23.getChronology();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00" + "'", str2, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(durationFieldType5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "2022-02-22T07:23:32.300" + "'", str8, "2022-02-22T07:23:32.300");
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+00:00" + "'", str14, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "millisOfDay" + "'", str17, "millisOfDay");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 86399999 + "'", int18 == 86399999);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 3 + "'", int20 == 3);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(chronology24);
    }

    @Test
    public void test10363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10363");
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.hourOfDay();
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.weekyears();
        org.joda.time.DurationField durationField6 = chronology4.centuries();
        org.joda.time.DurationField durationField7 = chronology4.minutes();
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(chronology4);
        boolean boolean9 = dateTimeFieldType1.isSupported(chronology4);
        org.joda.time.DateTimeZone dateTimeZone10 = chronology4.getZone();
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime((long) 55005041, chronology4);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str14 = dateTimeZone12.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime15 = org.joda.time.LocalDateTime.now(dateTimeZone12);
        org.joda.time.LocalDateTime.Property property16 = localDateTime15.millisOfDay();
        long long17 = property16.remainder();
        org.joda.time.LocalDateTime localDateTime18 = property16.roundFloorCopy();
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime();
        java.lang.String str20 = localDateTime19.toString();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime19.plusMonths((int) (short) -1);
        org.joda.time.LocalDateTime.Property property23 = localDateTime19.yearOfEra();
        int int24 = property16.compareTo((org.joda.time.ReadablePartial) localDateTime19);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime19.plusHours((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.withWeekyear(356);
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.LocalDateTime localDateTime31 = localDateTime28.withPeriodAdded(readablePeriod29, 188);
        boolean boolean32 = localDateTime11.isBefore((org.joda.time.ReadablePartial) localDateTime28);
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime();
        org.joda.time.ReadableDuration readableDuration34 = null;
        org.joda.time.LocalDateTime localDateTime36 = localDateTime33.withDurationAdded(readableDuration34, (int) '#');
        int int37 = localDateTime36.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime39 = localDateTime36.withMinuteOfHour(2);
        org.joda.time.LocalDateTime localDateTime41 = localDateTime36.withMinuteOfHour(2);
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str44 = dateTimeZone42.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime45 = org.joda.time.LocalDateTime.now(dateTimeZone42);
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = localDateTime45.getFieldType((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime49 = localDateTime45.minusMonths(0);
        boolean boolean50 = localDateTime41.isBefore((org.joda.time.ReadablePartial) localDateTime45);
        int int51 = localDateTime45.getYearOfCentury();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray52 = localDateTime45.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime53 = localDateTime28.withFields((org.joda.time.ReadablePartial) localDateTime45);
        org.joda.time.LocalDateTime localDateTime55 = localDateTime53.minusHours(25841694);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime57 = localDateTime53.withMillisOfSecond(26491989);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26491989 for millisOfSecond must be in the range [0,999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+00:00" + "'", str14, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(localDateTime18);
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "2022-02-22T07:23:32.313" + "'", str20, "2022-02-22T07:23:32.313");
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(property23);
// flaky:         org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2 + "'", int37 == 2);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "+00:00" + "'", str44, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(dateTimeFieldType47);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 22 + "'", int51 == 22);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray52);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(localDateTime55);
    }

    @Test
    public void test10364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10364");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getShortName((long) (short) 10);
        long long4 = dateTimeZone0.convertUTCToLocal((long) ' ');
        java.lang.String str5 = dateTimeZone0.toString();
        boolean boolean7 = dateTimeZone0.equals((java.lang.Object) (short) 100);
        java.util.Locale locale9 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str10 = dateTimeZone0.getShortName((long) (-1), locale9);
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime(dateTimeZone0);
        int int13 = dateTimeZone0.getOffset((long) (short) 10);
        boolean boolean14 = dateTimeZone0.isFixed();
        boolean boolean16 = dateTimeZone0.isStandardOffset((long) (byte) 1);
        java.util.TimeZone timeZone17 = dateTimeZone0.toTimeZone();
        java.lang.String str19 = dateTimeZone0.getName(1645629448686L);
        int int21 = dateTimeZone0.getOffset(1645629442181L);
        long long23 = dateTimeZone0.convertUTCToLocal(1645629657148L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00" + "'", str2, "+00:00");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 32L + "'", long4 == 32L);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "UTC" + "'", str5, "UTC");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+00:00" + "'", str10, "+00:00");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(timeZone17);
        org.junit.Assert.assertEquals(timeZone17.getDisplayName(), "Temps universel coordonn\351");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "+00:00" + "'", str19, "+00:00");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 1645629657148L + "'", long23 == 1645629657148L);
    }

    @Test
    public void test10365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10365");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.addUnicodeLocaleAttribute("und");
        java.util.Locale locale3 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale4 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str5 = locale3.getDisplayCountry(locale4);
        java.lang.String str6 = locale4.getDisplayName();
        java.util.Locale.Builder builder7 = builder2.setLocale(locale4);
        java.util.Locale locale8 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale9 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str10 = locale8.getDisplayCountry(locale9);
        java.util.Locale locale11 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale12 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str13 = locale11.getDisplayCountry(locale12);
        java.lang.String str14 = locale8.getDisplayVariant(locale11);
        java.util.Locale locale15 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale16 = locale15.stripExtensions();
        java.lang.String str17 = locale8.getDisplayLanguage(locale16);
        java.util.Locale.Builder builder18 = builder2.setLocale(locale16);
        java.util.Locale.Builder builder19 = builder18.clear();
        java.util.Locale.Builder builder20 = builder19.clearExtensions();
        java.util.Locale locale21 = builder19.build();
        java.util.Locale.Builder builder22 = builder19.clearExtensions();
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology26 = localDateTime25.getChronology();
        org.joda.time.DurationField durationField27 = chronology26.weekyears();
        org.joda.time.DurationField durationField28 = chronology26.centuries();
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime((long) (byte) 0, chronology26);
        org.joda.time.DateTimeField dateTimeField30 = chronology26.halfdayOfDay();
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology35 = localDateTime34.getChronology();
        org.joda.time.DurationField durationField36 = chronology35.weekyears();
        org.joda.time.DurationField durationField37 = chronology35.centuries();
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime((long) (byte) 0, chronology35);
        org.joda.time.DurationField durationField39 = chronology35.millis();
        org.joda.time.DateTimeField dateTimeField40 = chronology35.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField41 = chronology35.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime42 = new org.joda.time.LocalDateTime((long) (-997), chronology35);
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str45 = dateTimeZone43.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime46 = org.joda.time.LocalDateTime.now(dateTimeZone43);
        org.joda.time.LocalDateTime.Property property47 = localDateTime46.millisOfDay();
        org.joda.time.ReadableInstant readableInstant48 = null;
        long long49 = property47.getDifferenceAsLong(readableInstant48);
        java.util.Locale locale50 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str51 = locale50.getISO3Language();
        java.lang.String str52 = property47.getAsShortText(locale50);
        org.joda.time.LocalDateTime localDateTime53 = property47.withMinimumValue();
        org.joda.time.DateTimeZone dateTimeZone54 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str56 = dateTimeZone54.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime57 = org.joda.time.LocalDateTime.now(dateTimeZone54);
        org.joda.time.LocalDateTime.Property property58 = localDateTime57.millisOfDay();
        org.joda.time.DurationFieldType durationFieldType59 = org.joda.time.DurationFieldType.centuries();
        boolean boolean60 = localDateTime57.equals((java.lang.Object) durationFieldType59);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray61 = localDateTime57.getFieldTypes();
        java.lang.String str62 = localDateTime57.toString();
        org.joda.time.LocalDateTime localDateTime64 = localDateTime57.plusMillis(22);
        org.joda.time.LocalDateTime.Property property65 = localDateTime57.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone66 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str68 = dateTimeZone66.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime69 = org.joda.time.LocalDateTime.now(dateTimeZone66);
        org.joda.time.LocalDateTime.Property property70 = localDateTime69.millisOfDay();
        java.lang.String str71 = property70.getName();
        int int72 = property70.getMaximumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType73 = property70.getFieldType();
        int int74 = localDateTime57.indexOf(dateTimeFieldType73);
        int int75 = localDateTime53.get(dateTimeFieldType73);
        org.joda.time.LocalDateTime.Property property76 = localDateTime42.property(dateTimeFieldType73);
        int int77 = dateTimeField30.getMinimumValue((org.joda.time.ReadablePartial) localDateTime42);
        java.util.Locale locale79 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet80 = locale79.getUnicodeLocaleAttributes();
        java.lang.String str81 = locale79.getLanguage();
        java.lang.String str82 = locale79.toLanguageTag();
        java.util.Locale locale83 = locale79.stripExtensions();
        java.lang.String str84 = dateTimeField30.getAsShortText((long) 81254740, locale79);
        java.util.Locale.Builder builder85 = builder22.setLocale(locale79);
        java.util.Locale.Builder builder86 = builder85.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder88 = builder86.setLanguage("26239759");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed language: 26239759 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Canada" + "'", str5, "Canada");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "fran\347ais (Canada)" + "'", str6, "fran\347ais (Canada)");
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Canada" + "'", str10, "Canada");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Canada" + "'", str13, "Canada");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "fran\347ais" + "'", str17, "fran\347ais");
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "");
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "+00:00" + "'", str45, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "fra" + "'", str51, "fra");
// flaky:         org.junit.Assert.assertEquals("'" + str52 + "' != '" + "26612389" + "'", str52, "26612389");
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(dateTimeZone54);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "+00:00" + "'", str56, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNotNull(durationFieldType59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray61);
// flaky:         org.junit.Assert.assertEquals("'" + str62 + "' != '" + "2022-02-22T07:23:32.389" + "'", str62, "2022-02-22T07:23:32.389");
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertNotNull(dateTimeZone66);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "+00:00" + "'", str68, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime69);
        org.junit.Assert.assertNotNull(property70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "millisOfDay" + "'", str71, "millisOfDay");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 86399999 + "'", int72 == 86399999);
        org.junit.Assert.assertNotNull(dateTimeFieldType73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 3 + "'", int74 == 3);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertNotNull(property76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertNotNull(locale79);
        org.junit.Assert.assertEquals(locale79.toString(), "");
        org.junit.Assert.assertNotNull(strSet80);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "" + "'", str81, "");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "und" + "'", str82, "und");
        org.junit.Assert.assertNotNull(locale83);
        org.junit.Assert.assertEquals(locale83.toString(), "");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "PM" + "'", str84, "PM");
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNotNull(builder86);
    }

    @Test
    public void test10366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10366");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeField dateTimeField2 = dateTimeFieldType0.getField(chronology1);
        long long4 = dateTimeField2.roundFloor((long) (-1));
        boolean boolean5 = dateTimeField2.isLenient();
        java.util.Locale locale6 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet7 = locale6.getUnicodeLocaleAttributes();
        java.util.Set<java.lang.String> strSet8 = locale6.getUnicodeLocaleAttributes();
        java.lang.String str9 = locale6.getVariant();
        java.lang.String str10 = locale6.getDisplayLanguage();
        int int11 = dateTimeField2.getMaximumShortTextLength(locale6);
        org.joda.time.DurationField durationField12 = dateTimeField2.getLeapDurationField();
        java.lang.String str14 = dateTimeField2.getAsShortText(1645629539624L);
        int int16 = dateTimeField2.get((long) 26460);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60000L) + "'", long4 == (-60000L));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "");
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 4 + "'", int11 == 4);
        org.junit.Assert.assertNull(durationField12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "918" + "'", str14, "918");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
    }

    @Test
    public void test10367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10367");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        org.joda.time.LocalDateTime localDateTime3 = localDateTime0.withDurationAdded(readableDuration1, (int) '#');
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.weekyear();
        int int5 = property4.getMaximumValue();
        org.joda.time.DateTimeField dateTimeField6 = property4.getField();
        org.joda.time.LocalDateTime localDateTime7 = property4.roundHalfEvenCopy();
        int int8 = localDateTime7.getYearOfCentury();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 292278993 + "'", int5 == 292278993);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 22 + "'", int8 == 22);
    }

    @Test
    public void test10368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10368");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.addUnicodeLocaleAttribute("und");
        java.util.Locale locale3 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale4 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str5 = locale3.getDisplayCountry(locale4);
        java.lang.String str6 = locale4.getDisplayName();
        java.util.Locale.Builder builder7 = builder2.setLocale(locale4);
        java.util.Locale.Builder builder8 = builder2.clearExtensions();
        java.util.Locale.Builder builder10 = builder8.removeUnicodeLocaleAttribute("26158400");
        java.util.Locale.Builder builder12 = builder10.setVariant("26307336");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder14 = builder10.setRegion("2022-02-22T07:17:11.692");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed region: 2022-02-22T07:17:11.692 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Canada" + "'", str5, "Canada");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "fran\347ais (Canada)" + "'", str6, "fran\347ais (Canada)");
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test10369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10369");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("26224606");
        boolean boolean2 = timeZone1.observesDaylightTime();
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Heure de Greenwich");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test10370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10370");
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology3 = localDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField4 = chronology3.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField5 = chronology3.minuteOfDay();
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime((-100L), chronology3);
        org.joda.time.DateTimeField dateTimeField7 = chronology3.yearOfCentury();
        int int9 = dateTimeField7.get((-3597979L));
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 69 + "'", int9 == 69);
    }

    @Test
    public void test10371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10371");
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology3 = localDateTime2.getChronology();
        org.joda.time.DurationField durationField4 = chronology3.weekyears();
        org.joda.time.DurationField durationField5 = chronology3.centuries();
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime((long) (byte) 0, chronology3);
        org.joda.time.DateTimeField dateTimeField7 = chronology3.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField8 = chronology3.clockhourOfHalfday();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime(100L);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.plusDays(0);
        long long14 = chronology3.set((org.joda.time.ReadablePartial) localDateTime12, (long) 24);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter15 = null;
        java.lang.String str16 = localDateTime12.toString(dateTimeFormatter15);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.centuryOfEra();
        java.lang.String str18 = dateTimeFieldType17.toString();
        org.joda.time.DurationFieldType durationFieldType19 = dateTimeFieldType17.getRangeDurationType();
        org.joda.time.LocalDateTime.Property property20 = localDateTime12.property(dateTimeFieldType17);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str23 = dateTimeZone21.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime24 = org.joda.time.LocalDateTime.now(dateTimeZone21);
        org.joda.time.LocalDateTime.Property property25 = localDateTime24.millisOfDay();
        org.joda.time.DurationFieldType durationFieldType26 = org.joda.time.DurationFieldType.centuries();
        boolean boolean27 = localDateTime24.equals((java.lang.Object) durationFieldType26);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray28 = localDateTime24.getFieldTypes();
        java.lang.String str29 = localDateTime24.toString();
        org.joda.time.LocalDateTime localDateTime31 = localDateTime24.plusMillis(22);
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.DateTimeField dateTimeField34 = dateTimeFieldType32.getField(chronology33);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime24.withField(dateTimeFieldType32, 2);
        org.joda.time.DurationFieldType durationFieldType37 = dateTimeFieldType32.getDurationType();
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        org.joda.time.LocalDateTime localDateTime40 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology41 = localDateTime40.getChronology();
        org.joda.time.DurationField durationField42 = chronology41.weekyears();
        boolean boolean43 = dateTimeFieldType38.isSupported(chronology41);
        org.joda.time.DurationField durationField44 = chronology41.centuries();
        org.joda.time.DateTimeField dateTimeField45 = chronology41.year();
        boolean boolean46 = durationFieldType37.isSupported(chronology41);
        org.joda.time.LocalDateTime localDateTime49 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology50 = localDateTime49.getChronology();
        org.joda.time.DateTimeField dateTimeField51 = chronology50.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField52 = chronology50.minuteOfDay();
        org.joda.time.LocalDateTime localDateTime53 = new org.joda.time.LocalDateTime((-100L), chronology50);
        org.joda.time.DateTimeField dateTimeField54 = chronology50.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField55 = chronology50.dayOfWeek();
        boolean boolean56 = durationFieldType37.isSupported(chronology50);
        org.joda.time.LocalDateTime localDateTime58 = localDateTime12.withFieldAdded(durationFieldType37, 41);
        org.joda.time.LocalDateTime.Property property59 = localDateTime58.dayOfMonth();
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 100L + "'", long14 == 100L);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "1970-01-01T00:00:00.100" + "'", str16, "1970-01-01T00:00:00.100");
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "centuryOfEra" + "'", str18, "centuryOfEra");
        org.junit.Assert.assertNotNull(durationFieldType19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "+00:00" + "'", str23, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(durationFieldType26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray28);
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "2022-02-22T07:23:32.468" + "'", str29, "2022-02-22T07:23:32.468");
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(dateTimeFieldType32);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(durationFieldType37);
        org.junit.Assert.assertNotNull(dateTimeFieldType38);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(durationField44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(property59);
    }

    @Test
    public void test10372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10372");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.DurationFieldType durationFieldType1 = dateTimeFieldType0.getDurationType();
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.weekyears();
        org.joda.time.DurationField durationField6 = chronology4.centuries();
        boolean boolean7 = durationFieldType1.isSupported(chronology4);
        org.joda.time.DurationField durationField8 = chronology4.halfdays();
        org.joda.time.LocalDateTime localDateTime9 = org.joda.time.LocalDateTime.now(chronology4);
        org.joda.time.DateTimeField dateTimeField10 = chronology4.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField11 = chronology4.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology14 = localDateTime13.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = chronology14.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone16 = chronology14.getZone();
        org.joda.time.DateTimeField dateTimeField17 = chronology14.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField18 = chronology14.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology21 = localDateTime20.getChronology();
        org.joda.time.DurationField durationField22 = chronology21.weekyears();
        org.joda.time.DurationField durationField23 = chronology21.centuries();
        org.joda.time.DurationField durationField24 = chronology21.hours();
        org.joda.time.Chronology chronology25 = chronology21.withUTC();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str28 = dateTimeZone26.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime29 = org.joda.time.LocalDateTime.now(dateTimeZone26);
        org.joda.time.LocalDateTime.Property property30 = localDateTime29.millisOfDay();
        java.lang.String str31 = property30.getName();
        org.joda.time.LocalDateTime localDateTime32 = property30.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime34 = localDateTime32.minusHours(0);
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str38 = dateTimeZone36.getShortName((long) (short) 10);
        long long40 = dateTimeZone36.convertUTCToLocal((long) ' ');
        java.lang.String str41 = dateTimeZone36.toString();
        boolean boolean43 = dateTimeZone36.equals((java.lang.Object) (short) 100);
        java.util.Locale locale45 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str46 = dateTimeZone36.getShortName((long) (-1), locale45);
        long long49 = dateTimeZone36.convertLocalToUTC((long) (short) 10, true);
        org.joda.time.LocalDateTime localDateTime50 = new org.joda.time.LocalDateTime((long) 7, dateTimeZone36);
        org.joda.time.DateTime dateTime51 = localDateTime34.toDateTime(dateTimeZone36);
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str54 = dateTimeZone52.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime55 = org.joda.time.LocalDateTime.now(dateTimeZone52);
        org.joda.time.LocalDateTime.Property property56 = localDateTime55.millisOfDay();
        java.lang.String str57 = property56.getName();
        org.joda.time.LocalDateTime localDateTime58 = property56.roundHalfFloorCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType59 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        boolean boolean60 = localDateTime58.isSupported(dateTimeFieldType59);
        org.joda.time.DateTimeZone dateTimeZone61 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str63 = dateTimeZone61.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime64 = org.joda.time.LocalDateTime.now(dateTimeZone61);
        org.joda.time.LocalDateTime.Property property65 = localDateTime64.millisOfDay();
        org.joda.time.DurationFieldType durationFieldType66 = org.joda.time.DurationFieldType.centuries();
        boolean boolean67 = localDateTime64.equals((java.lang.Object) durationFieldType66);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray68 = localDateTime64.getFieldTypes();
        java.lang.String str69 = localDateTime64.toString();
        org.joda.time.LocalDateTime localDateTime71 = localDateTime64.plusMillis(22);
        boolean boolean72 = localDateTime58.isBefore((org.joda.time.ReadablePartial) localDateTime71);
        org.joda.time.ReadableDuration readableDuration73 = null;
        org.joda.time.LocalDateTime localDateTime74 = localDateTime71.plus(readableDuration73);
        org.joda.time.ReadableDuration readableDuration75 = null;
        org.joda.time.LocalDateTime localDateTime77 = localDateTime74.withDurationAdded(readableDuration75, 26169);
        org.joda.time.DateTime dateTime78 = localDateTime74.toDateTime();
        org.joda.time.DateTime dateTime79 = localDateTime34.toDateTime((org.joda.time.ReadableInstant) dateTime78);
        long long81 = chronology21.set((org.joda.time.ReadablePartial) localDateTime34, 1645629363422L);
        org.joda.time.LocalDateTime localDateTime83 = new org.joda.time.LocalDateTime(100L);
        org.joda.time.LocalDateTime.Property property84 = localDateTime83.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime86 = localDateTime83.plusSeconds(9);
        org.joda.time.LocalDateTime.Property property87 = localDateTime83.secondOfMinute();
        org.joda.time.ReadableDuration readableDuration88 = null;
        org.joda.time.LocalDateTime localDateTime89 = localDateTime83.minus(readableDuration88);
        org.joda.time.ReadablePeriod readablePeriod90 = null;
        org.joda.time.LocalDateTime localDateTime91 = localDateTime89.plus(readablePeriod90);
        int int92 = localDateTime89.getMillisOfSecond();
        org.joda.time.LocalDateTime localDateTime93 = localDateTime34.withFields((org.joda.time.ReadablePartial) localDateTime89);
        int int94 = dateTimeField18.getMinimumValue((org.joda.time.ReadablePartial) localDateTime89);
        java.util.Locale locale95 = java.util.Locale.ENGLISH;
        java.util.Set<java.lang.String> strSet96 = locale95.getUnicodeLocaleAttributes();
        java.lang.String str97 = dateTimeField11.getAsText((org.joda.time.ReadablePartial) localDateTime89, locale95);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(durationFieldType1);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "+00:00" + "'", str28, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "millisOfDay" + "'", str31, "millisOfDay");
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "+00:00" + "'", str38, "+00:00");
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 32L + "'", long40 == 32L);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "UTC" + "'", str41, "UTC");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "+00:00" + "'", str46, "+00:00");
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 10L + "'", long49 == 10L);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "+00:00" + "'", str54, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "millisOfDay" + "'", str57, "millisOfDay");
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(dateTimeFieldType59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(dateTimeZone61);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "+00:00" + "'", str63, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertNotNull(durationFieldType66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray68);
// flaky:         org.junit.Assert.assertEquals("'" + str69 + "' != '" + "2022-02-22T07:23:32.496" + "'", str69, "2022-02-22T07:23:32.496");
        org.junit.Assert.assertNotNull(localDateTime71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(localDateTime74);
        org.junit.Assert.assertNotNull(localDateTime77);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertNotNull(dateTime79);
// flaky:         org.junit.Assert.assertTrue("'" + long81 + "' != '" + 1645514612496L + "'", long81 == 1645514612496L);
        org.junit.Assert.assertNotNull(property84);
        org.junit.Assert.assertNotNull(localDateTime86);
        org.junit.Assert.assertNotNull(property87);
        org.junit.Assert.assertNotNull(localDateTime89);
        org.junit.Assert.assertNotNull(localDateTime91);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 100 + "'", int92 == 100);
        org.junit.Assert.assertNotNull(localDateTime93);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 1 + "'", int94 == 1);
        org.junit.Assert.assertNotNull(locale95);
        org.junit.Assert.assertEquals(locale95.toString(), "en");
        org.junit.Assert.assertNotNull(strSet96);
        org.junit.Assert.assertEquals("'" + str97 + "' != '" + "0" + "'", str97, "0");
    }

    @Test
    public void test10373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10373");
        java.util.Locale locale0 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet1 = locale0.getUnicodeLocaleAttributes();
        java.lang.Object[] objArray2 = strSet1.toArray();
        boolean boolean3 = strSet1.isEmpty();
        java.util.Locale locale4 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet5 = locale4.getUnicodeLocaleAttributes();
        java.lang.Object[] objArray6 = strSet5.toArray();
        java.util.Locale locale7 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet8 = locale7.getUnicodeLocaleAttributes();
        boolean boolean9 = strSet5.removeAll((java.util.Collection<java.lang.String>) strSet8);
        java.util.Locale locale10 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet11 = locale10.getUnicodeLocaleAttributes();
        org.joda.time.DurationFieldType durationFieldType12 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.DurationFieldType durationFieldType13 = org.joda.time.DurationFieldType.hours();
        org.joda.time.DurationFieldType[] durationFieldTypeArray14 = new org.joda.time.DurationFieldType[] { durationFieldType12, durationFieldType13 };
        org.joda.time.DurationFieldType[] durationFieldTypeArray15 = strSet11.toArray(durationFieldTypeArray14);
        boolean boolean16 = strSet5.containsAll((java.util.Collection<java.lang.String>) strSet11);
        java.lang.Object[] objArray17 = strSet11.toArray();
        boolean boolean18 = strSet1.removeAll((java.util.Collection<java.lang.String>) strSet11);
        java.util.Spliterator<java.lang.String> strSpliterator19 = strSet11.spliterator();
        java.util.Spliterator<java.lang.String> strSpliterator20 = strSet11.spliterator();
        java.lang.Object[] objArray21 = strSet11.toArray();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "");
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNotNull(objArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray2), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray2), "[]");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[]");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "");
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "");
        org.junit.Assert.assertNotNull(strSet11);
        org.junit.Assert.assertNotNull(durationFieldType12);
        org.junit.Assert.assertNotNull(durationFieldType13);
        org.junit.Assert.assertNotNull(durationFieldTypeArray14);
        org.junit.Assert.assertNotNull(durationFieldTypeArray15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(strSpliterator19);
        org.junit.Assert.assertNotNull(strSpliterator20);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[]");
    }

    @Test
    public void test10374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10374");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DurationField durationField3 = chronology2.weekyears();
        org.joda.time.DateTimeField dateTimeField4 = chronology2.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField5 = chronology2.millisOfDay();
        org.joda.time.DurationField durationField6 = chronology2.days();
        org.joda.time.DateTimeZone dateTimeZone7 = chronology2.getZone();
        org.joda.time.DurationField durationField8 = chronology2.hours();
        org.joda.time.DurationField durationField9 = chronology2.days();
        org.joda.time.DateTimeField dateTimeField10 = chronology2.halfdayOfDay();
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
    }

    @Test
    public void test10375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10375");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.millisOfDay();
        org.joda.time.DurationFieldType durationFieldType5 = org.joda.time.DurationFieldType.centuries();
        boolean boolean6 = localDateTime3.equals((java.lang.Object) durationFieldType5);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime3.withWeekOfWeekyear((int) (byte) 10);
        int int9 = localDateTime8.getDayOfYear();
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.LocalDateTime localDateTime11 = localDateTime8.plus(readablePeriod10);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.withYearOfEra(69);
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime13.plusMinutes(26384);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField18 = localDateTime16.getField(26147585);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 26147585");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00" + "'", str2, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(durationFieldType5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 67 + "'", int9 == 67);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDateTime16);
    }

    @Test
    public void test10376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10376");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(100L);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusSeconds(9);
        org.joda.time.LocalDateTime.Property property5 = localDateTime1.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime1.withCenturyOfEra(2);
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.LocalDateTime.Property property9 = localDateTime7.property(dateTimeFieldType8);
        org.joda.time.LocalDateTime.Property property10 = localDateTime7.weekOfWeekyear();
        int int11 = localDateTime7.getMonthOfYear();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime7.plusMinutes(15);
        int int14 = localDateTime13.getYearOfEra();
        org.joda.time.LocalDateTime.Property property15 = localDateTime13.minuteOfHour();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 270 + "'", int14 == 270);
        org.junit.Assert.assertNotNull(property15);
    }

    @Test
    public void test10377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10377");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        org.joda.time.LocalDateTime localDateTime3 = localDateTime0.withDurationAdded(readableDuration1, (int) '#');
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.weekyear();
        java.lang.String str5 = property4.getAsString();
        org.joda.time.LocalDateTime localDateTime7 = property4.setCopy(67);
        org.joda.time.LocalDateTime localDateTime8 = property4.roundHalfEvenCopy();
        int int9 = localDateTime8.getWeekyear();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime8.withMillisOfSecond((int) '4');
        int int12 = localDateTime11.getDayOfWeek();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "2022" + "'", str5, "2022");
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2022 + "'", int9 == 2022);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
    }

    @Test
    public void test10378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10378");
        java.util.Locale locale2 = new java.util.Locale("2022-02-22T07:16:35.509", "26157599");
        java.util.Set<java.lang.String> strSet3 = locale2.getUnicodeLocaleAttributes();
        boolean boolean5 = strSet3.contains((java.lang.Object) 1645629389226L);
        java.util.Locale locale6 = java.util.Locale.CANADA_FRENCH;
        java.util.Set<java.lang.String> strSet7 = locale6.getUnicodeLocaleKeys();
        int int8 = strSet7.size();
        java.util.stream.Stream<java.lang.String> strStream9 = strSet7.stream();
        java.util.Locale locale10 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet11 = locale10.getUnicodeLocaleAttributes();
        java.lang.Object[] objArray12 = strSet11.toArray();
        java.util.Locale locale13 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet14 = locale13.getUnicodeLocaleAttributes();
        boolean boolean15 = strSet11.removeAll((java.util.Collection<java.lang.String>) strSet14);
        java.util.Locale locale16 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet17 = locale16.getUnicodeLocaleAttributes();
        org.joda.time.DurationFieldType durationFieldType18 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.DurationFieldType durationFieldType19 = org.joda.time.DurationFieldType.hours();
        org.joda.time.DurationFieldType[] durationFieldTypeArray20 = new org.joda.time.DurationFieldType[] { durationFieldType18, durationFieldType19 };
        org.joda.time.DurationFieldType[] durationFieldTypeArray21 = strSet17.toArray(durationFieldTypeArray20);
        boolean boolean22 = strSet11.containsAll((java.util.Collection<java.lang.String>) strSet17);
        java.util.Locale locale23 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet24 = locale23.getUnicodeLocaleAttributes();
        java.lang.Object[] objArray25 = strSet24.toArray();
        java.util.Locale locale26 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet27 = locale26.getUnicodeLocaleAttributes();
        boolean boolean28 = strSet24.removeAll((java.util.Collection<java.lang.String>) strSet27);
        java.util.Locale locale29 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet30 = locale29.getUnicodeLocaleAttributes();
        org.joda.time.DurationFieldType durationFieldType31 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.DurationFieldType durationFieldType32 = org.joda.time.DurationFieldType.hours();
        org.joda.time.DurationFieldType[] durationFieldTypeArray33 = new org.joda.time.DurationFieldType[] { durationFieldType31, durationFieldType32 };
        org.joda.time.DurationFieldType[] durationFieldTypeArray34 = strSet30.toArray(durationFieldTypeArray33);
        boolean boolean35 = strSet24.containsAll((java.util.Collection<java.lang.String>) strSet30);
        java.util.Locale locale36 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet37 = locale36.getUnicodeLocaleAttributes();
        java.lang.Object[] objArray38 = strSet37.toArray();
        boolean boolean39 = strSet24.addAll((java.util.Collection<java.lang.String>) strSet37);
        boolean boolean40 = strSet11.retainAll((java.util.Collection<java.lang.String>) strSet37);
        boolean boolean41 = strSet7.containsAll((java.util.Collection<java.lang.String>) strSet11);
        java.lang.Object[] objArray42 = strSet7.toArray();
        java.lang.Object[] objArray43 = strSet7.toArray();
        java.util.stream.Stream<java.lang.String> strStream44 = strSet7.parallelStream();
        boolean boolean45 = strSet3.containsAll((java.util.Collection<java.lang.String>) strSet7);
        strSet3.clear();
        org.junit.Assert.assertEquals(locale2.toString(), "2022-02-22t07:16:35.509_26157599");
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(strStream9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "");
        org.junit.Assert.assertNotNull(strSet11);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[]");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "");
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "");
        org.junit.Assert.assertNotNull(strSet17);
        org.junit.Assert.assertNotNull(durationFieldType18);
        org.junit.Assert.assertNotNull(durationFieldType19);
        org.junit.Assert.assertNotNull(durationFieldTypeArray20);
        org.junit.Assert.assertNotNull(durationFieldTypeArray21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "");
        org.junit.Assert.assertNotNull(strSet24);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[]");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "");
        org.junit.Assert.assertNotNull(strSet27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "");
        org.junit.Assert.assertNotNull(strSet30);
        org.junit.Assert.assertNotNull(durationFieldType31);
        org.junit.Assert.assertNotNull(durationFieldType32);
        org.junit.Assert.assertNotNull(durationFieldTypeArray33);
        org.junit.Assert.assertNotNull(durationFieldTypeArray34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "");
        org.junit.Assert.assertNotNull(strSet37);
        org.junit.Assert.assertNotNull(objArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray38), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray38), "[]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[]");
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[]");
        org.junit.Assert.assertNotNull(strStream44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
    }

    @Test
    public void test10379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10379");
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology3 = localDateTime2.getChronology();
        org.joda.time.DurationField durationField4 = chronology3.weekyears();
        org.joda.time.DurationField durationField5 = chronology3.centuries();
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime((long) (byte) 0, chronology3);
        org.joda.time.DurationField durationField7 = chronology3.millis();
        org.joda.time.DateTimeField dateTimeField8 = chronology3.minuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str11 = dateTimeZone9.getShortName((long) (short) 10);
        long long13 = dateTimeZone9.convertUTCToLocal((long) ' ');
        java.lang.String str14 = dateTimeZone9.toString();
        java.lang.String str15 = dateTimeZone9.toString();
        java.util.Locale locale17 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale18 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str19 = locale17.getDisplayCountry(locale18);
        java.util.Locale locale20 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale21 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str22 = locale20.getDisplayCountry(locale21);
        java.lang.String str23 = locale17.getDisplayVariant(locale20);
        java.util.Locale locale24 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale25 = locale24.stripExtensions();
        java.lang.String str26 = locale17.getDisplayLanguage(locale25);
        java.lang.String str27 = dateTimeZone9.getName((long) 67, locale25);
        int int28 = dateTimeField8.getMaximumTextLength(locale25);
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime();
        org.joda.time.ReadableDuration readableDuration30 = null;
        org.joda.time.LocalDateTime localDateTime32 = localDateTime29.withDurationAdded(readableDuration30, (int) '#');
        org.joda.time.LocalDateTime.Property property33 = localDateTime29.era();
        org.joda.time.LocalDateTime localDateTime34 = property33.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology38 = localDateTime37.getChronology();
        org.joda.time.DurationField durationField39 = chronology38.weekyears();
        org.joda.time.DurationField durationField40 = chronology38.centuries();
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime((long) (byte) 0, chronology38);
        org.joda.time.DateTimeField dateTimeField42 = chronology38.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField43 = chronology38.clockhourOfHalfday();
        java.util.Locale locale45 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet46 = locale45.getUnicodeLocaleAttributes();
        java.util.Set<java.lang.String> strSet47 = locale45.getUnicodeLocaleAttributes();
        java.lang.String str48 = dateTimeField43.getAsShortText((int) (byte) 0, locale45);
        java.lang.String str49 = dateTimeField8.getAsText((org.joda.time.ReadablePartial) localDateTime34, locale45);
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str52 = dateTimeZone50.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime53 = org.joda.time.LocalDateTime.now(dateTimeZone50);
        org.joda.time.LocalDateTime.Property property54 = localDateTime53.millisOfDay();
        org.joda.time.LocalDateTime localDateTime56 = localDateTime53.withYear((int) (short) 100);
        org.joda.time.LocalDateTime.Property property57 = localDateTime56.minuteOfHour();
        int int58 = property57.get();
        java.util.Locale locale59 = java.util.Locale.GERMANY;
        java.lang.String str60 = locale59.getDisplayCountry();
        int int61 = property57.getMaximumShortTextLength(locale59);
        java.lang.String str62 = locale45.getDisplayCountry(locale59);
        org.joda.time.DateTimeZone dateTimeZone63 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str65 = dateTimeZone63.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime66 = org.joda.time.LocalDateTime.now(dateTimeZone63);
        org.joda.time.LocalDateTime.Property property67 = localDateTime66.millisOfDay();
        org.joda.time.ReadableInstant readableInstant68 = null;
        long long69 = property67.getDifferenceAsLong(readableInstant68);
        org.joda.time.DurationField durationField70 = property67.getLeapDurationField();
        java.lang.String str71 = property67.getAsString();
        org.joda.time.LocalDateTime localDateTime72 = property67.roundFloorCopy();
        java.util.Locale locale73 = java.util.Locale.ENGLISH;
        java.lang.String str74 = property67.getAsText(locale73);
        java.lang.String str75 = locale45.getDisplayName(locale73);
        java.util.Set<java.lang.String> strSet76 = locale45.getUnicodeLocaleKeys();
        java.util.Collection<java.lang.String> strCollection77 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean78 = strSet76.removeAll(strCollection77);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+00:00" + "'", str11, "+00:00");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 32L + "'", long13 == 32L);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "UTC" + "'", str14, "UTC");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "UTC" + "'", str15, "UTC");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Canada" + "'", str19, "Canada");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Canada" + "'", str22, "Canada");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "fran\347ais" + "'", str26, "fran\347ais");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "+00:00" + "'", str27, "+00:00");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 4 + "'", int28 == 4);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertNotNull(durationField40);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "");
        org.junit.Assert.assertNotNull(strSet46);
        org.junit.Assert.assertNotNull(strSet47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "0" + "'", str48, "0");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "0" + "'", str49, "0");
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "+00:00" + "'", str52, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(property57);
// flaky:         org.junit.Assert.assertTrue("'" + int58 + "' != '" + 23 + "'", int58 == 23);
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "Allemagne" + "'", str60, "Allemagne");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 2 + "'", int61 == 2);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertNotNull(dateTimeZone63);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "+00:00" + "'", str65, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertNotNull(property67);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 0L + "'", long69 == 0L);
        org.junit.Assert.assertNull(durationField70);
// flaky:         org.junit.Assert.assertEquals("'" + str71 + "' != '" + "26612710" + "'", str71, "26612710");
        org.junit.Assert.assertNotNull(localDateTime72);
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str74 + "' != '" + "26612710" + "'", str74, "26612710");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "" + "'", str75, "");
        org.junit.Assert.assertNotNull(strSet76);
    }

    @Test
    public void test10380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10380");
        org.joda.time.tz.Provider provider0 = org.joda.time.DateTimeZone.getProvider();
        java.util.Set<java.lang.String> strSet1 = provider0.getAvailableIDs();
        java.util.Set<java.lang.String> strSet2 = provider0.getAvailableIDs();
        java.util.Spliterator<java.lang.String> strSpliterator3 = strSet2.spliterator();
        java.util.stream.Stream<java.lang.String> strStream4 = strSet2.parallelStream();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime();
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.LocalDateTime localDateTime8 = localDateTime5.withDurationAdded(readableDuration6, (int) '#');
        org.joda.time.Chronology chronology9 = localDateTime8.getChronology();
        org.joda.time.DurationField durationField10 = chronology9.millis();
        org.joda.time.DateTimeField dateTimeField11 = chronology9.halfdayOfDay();
        boolean boolean12 = strSet2.equals((java.lang.Object) dateTimeField11);
        org.junit.Assert.assertNotNull(provider0);
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(strSpliterator3);
        org.junit.Assert.assertNotNull(strStream4);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test10381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10381");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.millisOfDay();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime3.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime3.plusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minusHours((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.withEra((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property13 = localDateTime12.secondOfMinute();
        java.lang.String str14 = property13.getAsShortText();
        int int15 = property13.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime();
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.LocalDateTime localDateTime19 = localDateTime16.withDurationAdded(readableDuration17, (int) '#');
        org.joda.time.LocalDateTime.Property property20 = localDateTime16.era();
        int int21 = property13.compareTo((org.joda.time.ReadablePartial) localDateTime16);
        int int22 = localDateTime16.getDayOfYear();
        org.joda.time.LocalDateTime localDateTime24 = localDateTime16.plusDays(2021);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime16.withYear((int) '#');
        org.joda.time.LocalDateTime.Property property27 = localDateTime26.weekOfWeekyear();
        int int28 = property27.getMaximumValue();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00" + "'", str2, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "32" + "'", str14, "32");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 53 + "'", int22 == 53);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 52 + "'", int28 == 52);
    }

    @Test
    public void test10382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10382");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.millisOfDay();
        org.joda.time.ReadableInstant readableInstant5 = null;
        long long6 = property4.getDifferenceAsLong(readableInstant5);
        org.joda.time.DurationField durationField7 = property4.getLeapDurationField();
        java.util.Locale locale8 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet9 = locale8.getUnicodeLocaleAttributes();
        java.lang.String str10 = locale8.getLanguage();
        java.lang.String str11 = locale8.toLanguageTag();
        java.lang.String str12 = property4.getAsShortText(locale8);
        org.joda.time.LocalDateTime localDateTime13 = property4.roundCeilingCopy();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.plusSeconds(1);
        org.joda.time.LocalDateTime.Property property16 = localDateTime15.era();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime18 = localDateTime15.withMinuteOfHour(81353602);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 81353602 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00" + "'", str2, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNull(durationField7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "und" + "'", str11, "und");
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "26612790" + "'", str12, "26612790");
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(property16);
    }

    @Test
    public void test10383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10383");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DurationField durationField3 = chronology2.weekyears();
        org.joda.time.DurationField durationField4 = chronology2.centuries();
        org.joda.time.DateTimeField dateTimeField5 = chronology2.minuteOfDay();
        org.joda.time.DurationField durationField6 = dateTimeField5.getDurationField();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str11 = dateTimeZone9.getShortName((long) (short) 10);
        long long13 = dateTimeZone9.convertUTCToLocal((long) ' ');
        java.lang.String str14 = dateTimeZone9.toString();
        long long17 = dateTimeZone9.adjustOffset((long) (short) 100, false);
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone9);
        java.lang.String str19 = dateTimeZone9.toString();
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime(1645629528001L, dateTimeZone9);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime((java.lang.Object) durationField6, dateTimeZone9);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: org.joda.time.field.PreciseDurationField");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+00:00" + "'", str11, "+00:00");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 32L + "'", long13 == 32L);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "UTC" + "'", str14, "UTC");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 100L + "'", long17 == 100L);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "UTC" + "'", str19, "UTC");
    }

    @Test
    public void test10384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10384");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.millisOfDay();
        java.lang.String str5 = property4.getName();
        int int6 = property4.getMaximumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = property4.getFieldType();
        org.joda.time.LocalDateTime localDateTime8 = property4.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime9 = property4.roundFloorCopy();
        org.joda.time.LocalDateTime localDateTime11 = property4.addToCopy(1908343039481L);
        org.joda.time.LocalDateTime localDateTime13 = property4.addToCopy((-74790L));
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str16 = dateTimeZone14.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime17 = org.joda.time.LocalDateTime.now(dateTimeZone14);
        org.joda.time.LocalDateTime.Property property18 = localDateTime17.millisOfDay();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime17.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime17.plusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.minusHours((int) (short) 10);
        int int25 = localDateTime22.getMinuteOfHour();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime22.minusMinutes(0);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.plusMillis(2022);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime27.plusMillis(56);
        org.joda.time.LocalDateTime.Property property32 = localDateTime31.monthOfYear();
        org.joda.time.LocalDateTime localDateTime33 = property32.roundHalfEvenCopy();
        org.joda.time.DurationField durationField34 = property32.getDurationField();
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = property32.getFieldType();
        org.joda.time.LocalDateTime localDateTime36 = property32.roundFloorCopy();
        org.joda.time.LocalDateTime localDateTime37 = localDateTime13.withFields((org.joda.time.ReadablePartial) localDateTime36);
        org.joda.time.LocalDateTime.Property property38 = localDateTime36.hourOfDay();
        org.joda.time.LocalDateTime.Property property39 = localDateTime36.yearOfEra();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00" + "'", str2, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "millisOfDay" + "'", str5, "millisOfDay");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 86399999 + "'", int6 == 86399999);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+00:00" + "'", str16, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
// flaky:         org.junit.Assert.assertTrue("'" + int25 + "' != '" + 23 + "'", int25 == 23);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(dateTimeFieldType35);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(property39);
    }

    @Test
    public void test10385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10385");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.addUnicodeLocaleAttribute("und");
        java.util.Locale locale3 = builder2.build();
        java.util.Locale locale4 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet5 = locale4.getUnicodeLocaleAttributes();
        java.util.Set<java.lang.String> strSet6 = locale4.getUnicodeLocaleAttributes();
        java.lang.String str7 = locale4.getVariant();
        java.util.Locale.Builder builder8 = builder2.setLocale(locale4);
        java.util.Locale.Builder builder10 = builder2.setRegion("");
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTimeField dateTimeField13 = dateTimeFieldType11.getField(chronology12);
        java.util.Locale.Category category15 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale16 = java.util.Locale.FRENCH;
        java.util.Locale.setDefault(category15, locale16);
        java.lang.String str18 = locale16.toLanguageTag();
        java.lang.String str19 = dateTimeField13.getAsText((long) 26149, locale16);
        java.util.Locale locale20 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale locale21 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet22 = locale21.getUnicodeLocaleAttributes();
        java.lang.String str23 = locale20.getDisplayCountry(locale21);
        java.lang.String str24 = locale16.getDisplayLanguage(locale21);
        java.lang.String str25 = locale16.getScript();
        java.util.Locale.Builder builder26 = builder2.setLocale(locale16);
        java.util.Locale locale27 = builder26.build();
        java.util.Locale.Builder builder28 = builder26.clear();
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology32 = localDateTime31.getChronology();
        org.joda.time.DurationField durationField33 = chronology32.weekyears();
        org.joda.time.DurationField durationField34 = chronology32.centuries();
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime((long) (byte) 0, chronology32);
        org.joda.time.DateTimeField dateTimeField36 = chronology32.halfdayOfDay();
        int int39 = dateTimeField36.getDifference(11L, 0L);
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str42 = dateTimeZone40.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime43 = org.joda.time.LocalDateTime.now(dateTimeZone40);
        org.joda.time.LocalDateTime.Property property44 = localDateTime43.millisOfDay();
        org.joda.time.LocalDateTime localDateTime46 = localDateTime43.withYear((int) (short) 100);
        org.joda.time.LocalDateTime.Property property47 = localDateTime46.minuteOfHour();
        int int48 = property47.get();
        org.joda.time.LocalDateTime localDateTime50 = property47.setCopy((int) (short) 10);
        org.joda.time.LocalDateTime.Property property51 = localDateTime50.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime53 = localDateTime50.withYearOfCentury(0);
        java.util.Locale locale55 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale56 = locale55.stripExtensions();
        java.lang.String str57 = locale55.getVariant();
        java.lang.String str58 = locale55.getLanguage();
        java.lang.String str59 = dateTimeField36.getAsShortText((org.joda.time.ReadablePartial) localDateTime53, 0, locale55);
        java.util.Locale.Builder builder60 = builder26.setLocale(locale55);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder62 = builder60.removeUnicodeLocaleAttribute("2022-02-22T14:33:48.395");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: 2022-02-22T14:33:48.395 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + category15 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category15.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "fr" + "'", str18, "fr");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "0" + "'", str19, "0");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "");
        org.junit.Assert.assertNotNull(strSet22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "China" + "'", str23, "China");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "French" + "'", str24, "French");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "fr");
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "+00:00" + "'", str42, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(property47);
// flaky:         org.junit.Assert.assertTrue("'" + int48 + "' != '" + 23 + "'", int48 == 23);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "fr" + "'", str58, "fr");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "AM" + "'", str59, "AM");
        org.junit.Assert.assertNotNull(builder60);
    }

    @Test
    public void test10386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10386");
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology3 = localDateTime2.getChronology();
        org.joda.time.DurationField durationField4 = chronology3.weekyears();
        org.joda.time.DurationField durationField5 = chronology3.centuries();
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime((long) (byte) 0, chronology3);
        org.joda.time.DurationField durationField7 = chronology3.millis();
        org.joda.time.DateTimeField dateTimeField8 = chronology3.minuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str11 = dateTimeZone9.getShortName((long) (short) 10);
        long long13 = dateTimeZone9.convertUTCToLocal((long) ' ');
        java.lang.String str14 = dateTimeZone9.toString();
        java.lang.String str15 = dateTimeZone9.toString();
        java.util.Locale locale17 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale18 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str19 = locale17.getDisplayCountry(locale18);
        java.util.Locale locale20 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale21 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str22 = locale20.getDisplayCountry(locale21);
        java.lang.String str23 = locale17.getDisplayVariant(locale20);
        java.util.Locale locale24 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale25 = locale24.stripExtensions();
        java.lang.String str26 = locale17.getDisplayLanguage(locale25);
        java.lang.String str27 = dateTimeZone9.getName((long) 67, locale25);
        int int28 = dateTimeField8.getMaximumTextLength(locale25);
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime(100L);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime30.plusDays(0);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime32.plusMinutes(54974408);
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.DateTimeField dateTimeField37 = dateTimeFieldType35.getField(chronology36);
        java.util.Locale.Category category39 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale40 = java.util.Locale.FRENCH;
        java.util.Locale.setDefault(category39, locale40);
        java.lang.String str42 = locale40.toLanguageTag();
        java.lang.String str43 = dateTimeField37.getAsText((long) 26149, locale40);
        java.util.Locale locale44 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale locale45 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet46 = locale45.getUnicodeLocaleAttributes();
        java.lang.String str47 = locale44.getDisplayCountry(locale45);
        java.lang.String str48 = locale40.getDisplayLanguage(locale45);
        java.lang.String str49 = dateTimeField8.getAsText((org.joda.time.ReadablePartial) localDateTime34, locale40);
        java.lang.String str51 = dateTimeField8.getAsText((long) 55);
        org.joda.time.DateTimeFieldType dateTimeFieldType52 = dateTimeField8.getType();
        org.joda.time.DurationFieldType durationFieldType53 = dateTimeFieldType52.getDurationType();
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+00:00" + "'", str11, "+00:00");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 32L + "'", long13 == 32L);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "UTC" + "'", str14, "UTC");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "UTC" + "'", str15, "UTC");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Canada" + "'", str19, "Canada");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Canada" + "'", str22, "Canada");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "fran\347ais" + "'", str26, "fran\347ais");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "+00:00" + "'", str27, "+00:00");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 4 + "'", int28 == 4);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(dateTimeFieldType35);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertTrue("'" + category39 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category39.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "fr" + "'", str42, "fr");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "0" + "'", str43, "0");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "");
        org.junit.Assert.assertNotNull(strSet46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "China" + "'", str47, "China");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "French" + "'", str48, "French");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "968" + "'", str49, "968");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "0" + "'", str51, "0");
        org.junit.Assert.assertNotNull(dateTimeFieldType52);
        org.junit.Assert.assertNotNull(durationFieldType53);
    }

    @Test
    public void test10387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10387");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.millisOfDay();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime3.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime3.plusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minusHours((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.withEra((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property13 = localDateTime12.secondOfMinute();
        java.lang.String str14 = property13.getAsShortText();
        int int15 = property13.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime();
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.LocalDateTime localDateTime19 = localDateTime16.withDurationAdded(readableDuration17, (int) '#');
        org.joda.time.LocalDateTime.Property property20 = localDateTime16.era();
        int int21 = property13.compareTo((org.joda.time.ReadablePartial) localDateTime16);
        org.joda.time.LocalDateTime localDateTime22 = property13.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.plusHours(29);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime22.minusMinutes(91);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00" + "'", str2, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "32" + "'", str14, "32");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
    }

    @Test
    public void test10388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10388");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        org.joda.time.LocalDateTime localDateTime3 = localDateTime0.withDurationAdded(readableDuration1, (int) '#');
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.weekyear();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime3.minusMillis((-1));
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str9 = dateTimeZone7.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime10 = org.joda.time.LocalDateTime.now(dateTimeZone7);
        org.joda.time.LocalDateTime.Property property11 = localDateTime10.millisOfDay();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime10.withYear((int) (short) 100);
        java.lang.String str14 = localDateTime13.toString();
        boolean boolean15 = localDateTime3.isAfter((org.joda.time.ReadablePartial) localDateTime13);
        java.util.Locale locale16 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet17 = locale16.getUnicodeLocaleAttributes();
        java.lang.Object[] objArray18 = strSet17.toArray();
        boolean boolean19 = strSet17.isEmpty();
        java.util.Locale locale20 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet21 = locale20.getUnicodeLocaleAttributes();
        java.lang.Object[] objArray22 = strSet21.toArray();
        java.util.Locale locale23 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet24 = locale23.getUnicodeLocaleAttributes();
        boolean boolean25 = strSet21.removeAll((java.util.Collection<java.lang.String>) strSet24);
        java.util.Locale locale26 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet27 = locale26.getUnicodeLocaleAttributes();
        org.joda.time.DurationFieldType durationFieldType28 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.DurationFieldType durationFieldType29 = org.joda.time.DurationFieldType.hours();
        org.joda.time.DurationFieldType[] durationFieldTypeArray30 = new org.joda.time.DurationFieldType[] { durationFieldType28, durationFieldType29 };
        org.joda.time.DurationFieldType[] durationFieldTypeArray31 = strSet27.toArray(durationFieldTypeArray30);
        boolean boolean32 = strSet21.containsAll((java.util.Collection<java.lang.String>) strSet27);
        java.lang.Object[] objArray33 = strSet27.toArray();
        boolean boolean34 = strSet17.removeAll((java.util.Collection<java.lang.String>) strSet27);
        java.util.Locale locale35 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet36 = locale35.getUnicodeLocaleAttributes();
        java.lang.Object[] objArray37 = strSet36.toArray();
        java.util.Locale locale38 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet39 = locale38.getUnicodeLocaleAttributes();
        boolean boolean40 = strSet36.removeAll((java.util.Collection<java.lang.String>) strSet39);
        java.util.Locale locale41 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet42 = locale41.getUnicodeLocaleAttributes();
        org.joda.time.DurationFieldType durationFieldType43 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.DurationFieldType durationFieldType44 = org.joda.time.DurationFieldType.hours();
        org.joda.time.DurationFieldType[] durationFieldTypeArray45 = new org.joda.time.DurationFieldType[] { durationFieldType43, durationFieldType44 };
        org.joda.time.DurationFieldType[] durationFieldTypeArray46 = strSet42.toArray(durationFieldTypeArray45);
        boolean boolean47 = strSet36.containsAll((java.util.Collection<java.lang.String>) strSet42);
        java.util.Locale locale48 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet49 = locale48.getUnicodeLocaleAttributes();
        java.lang.Object[] objArray50 = strSet49.toArray();
        java.util.Locale locale51 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet52 = locale51.getUnicodeLocaleAttributes();
        boolean boolean53 = strSet49.removeAll((java.util.Collection<java.lang.String>) strSet52);
        java.util.Locale locale54 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet55 = locale54.getUnicodeLocaleAttributes();
        org.joda.time.DurationFieldType durationFieldType56 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.DurationFieldType durationFieldType57 = org.joda.time.DurationFieldType.hours();
        org.joda.time.DurationFieldType[] durationFieldTypeArray58 = new org.joda.time.DurationFieldType[] { durationFieldType56, durationFieldType57 };
        org.joda.time.DurationFieldType[] durationFieldTypeArray59 = strSet55.toArray(durationFieldTypeArray58);
        boolean boolean60 = strSet49.containsAll((java.util.Collection<java.lang.String>) strSet55);
        java.lang.Object[] objArray61 = strSet55.toArray();
        boolean boolean62 = strSet36.retainAll((java.util.Collection<java.lang.String>) strSet55);
        boolean boolean63 = strSet27.addAll((java.util.Collection<java.lang.String>) strSet55);
        org.joda.time.DateTimeFieldType dateTimeFieldType64 = org.joda.time.DateTimeFieldType.yearOfEra();
        boolean boolean65 = strSet55.remove((java.lang.Object) dateTimeFieldType64);
        org.joda.time.LocalDateTime.Property property66 = localDateTime3.property(dateTimeFieldType64);
        int int67 = localDateTime3.getCenturyOfEra();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00" + "'", str9, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDateTime13);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "0100-02-22T07:23:32.887" + "'", str14, "0100-02-22T07:23:32.887");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "");
        org.junit.Assert.assertNotNull(strSet17);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "");
        org.junit.Assert.assertNotNull(strSet21);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[]");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "");
        org.junit.Assert.assertNotNull(strSet24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "");
        org.junit.Assert.assertNotNull(strSet27);
        org.junit.Assert.assertNotNull(durationFieldType28);
        org.junit.Assert.assertNotNull(durationFieldType29);
        org.junit.Assert.assertNotNull(durationFieldTypeArray30);
        org.junit.Assert.assertNotNull(durationFieldTypeArray31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "");
        org.junit.Assert.assertNotNull(strSet36);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[]");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "");
        org.junit.Assert.assertNotNull(strSet39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "");
        org.junit.Assert.assertNotNull(strSet42);
        org.junit.Assert.assertNotNull(durationFieldType43);
        org.junit.Assert.assertNotNull(durationFieldType44);
        org.junit.Assert.assertNotNull(durationFieldTypeArray45);
        org.junit.Assert.assertNotNull(durationFieldTypeArray46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "");
        org.junit.Assert.assertNotNull(strSet49);
        org.junit.Assert.assertNotNull(objArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[]");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "");
        org.junit.Assert.assertNotNull(strSet52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "");
        org.junit.Assert.assertNotNull(strSet55);
        org.junit.Assert.assertNotNull(durationFieldType56);
        org.junit.Assert.assertNotNull(durationFieldType57);
        org.junit.Assert.assertNotNull(durationFieldTypeArray58);
        org.junit.Assert.assertNotNull(durationFieldTypeArray59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(objArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray61), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray61), "[]");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 20 + "'", int67 == 20);
    }

    @Test
    public void test10389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10389");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.millisOfDay();
        org.joda.time.ReadableInstant readableInstant5 = null;
        long long6 = property4.getDifferenceAsLong(readableInstant5);
        int int7 = property4.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime8 = property4.roundHalfEvenCopy();
        org.joda.time.DurationField durationField9 = property4.getRangeDurationField();
        org.joda.time.LocalDateTime localDateTime11 = property4.addToCopy(22);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime13 = localDateTime11.withDayOfMonth(26554036);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26554036 for dayOfMonth must be in the range [1,28]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00" + "'", str2, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 86399999 + "'", int7 == 86399999);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(localDateTime11);
    }

    @Test
    public void test10390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10390");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology3 = localDateTime2.getChronology();
        org.joda.time.DurationField durationField4 = chronology3.weekyears();
        boolean boolean5 = dateTimeFieldType0.isSupported(chronology3);
        org.joda.time.DateTimeField dateTimeField6 = chronology3.secondOfDay();
        org.joda.time.DateTimeField dateTimeField7 = chronology3.weekyearOfCentury();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = dateTimeField7.getType();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
    }

    @Test
    public void test10391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10391");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("hours");
        java.lang.String str2 = languageRange1.getRange();
        double double3 = languageRange1.getWeight();
        java.lang.String str4 = languageRange1.getRange();
        double double5 = languageRange1.getWeight();
        java.lang.String str6 = languageRange1.getRange();
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.weekyears();
        java.lang.String str8 = durationFieldType7.toString();
        org.joda.time.DurationFieldType durationFieldType9 = org.joda.time.DurationFieldType.millis();
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology12 = localDateTime11.getChronology();
        org.joda.time.DurationField durationField13 = chronology12.weekyears();
        org.joda.time.DurationField durationField14 = chronology12.centuries();
        org.joda.time.DurationField durationField15 = durationFieldType9.getField(chronology12);
        boolean boolean16 = durationFieldType7.isSupported(chronology12);
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology19 = localDateTime18.getChronology();
        org.joda.time.DurationField durationField20 = chronology19.hours();
        java.lang.String str21 = chronology19.toString();
        org.joda.time.DateTimeField dateTimeField22 = chronology19.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField23 = chronology19.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime();
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.LocalDateTime localDateTime27 = localDateTime24.withDurationAdded(readableDuration25, (int) '#');
        org.joda.time.LocalDateTime.Property property28 = localDateTime27.weekyear();
        org.joda.time.LocalDateTime localDateTime30 = localDateTime27.minusMillis((-1));
        org.joda.time.LocalDateTime.Property property31 = localDateTime27.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime32 = property31.roundHalfFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str35 = dateTimeZone33.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime36 = org.joda.time.LocalDateTime.now(dateTimeZone33);
        org.joda.time.LocalDateTime.Property property37 = localDateTime36.millisOfDay();
        org.joda.time.DurationFieldType durationFieldType38 = org.joda.time.DurationFieldType.centuries();
        boolean boolean39 = localDateTime36.equals((java.lang.Object) durationFieldType38);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray40 = localDateTime36.getFieldTypes();
        java.lang.String str41 = localDateTime36.toString();
        org.joda.time.LocalDateTime localDateTime43 = localDateTime36.plusMillis(22);
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = org.joda.time.DateTimeFieldType.secondOfDay();
        boolean boolean45 = localDateTime36.isSupported(dateTimeFieldType44);
        int int46 = localDateTime32.indexOf(dateTimeFieldType44);
        int[] intArray48 = chronology19.get((org.joda.time.ReadablePartial) localDateTime32, 1645629358650L);
        int int49 = localDateTime32.getMillisOfSecond();
        int[] intArray51 = chronology12.get((org.joda.time.ReadablePartial) localDateTime32, (-75598906L));
        int int52 = localDateTime32.getDayOfMonth();
        org.joda.time.LocalDateTime localDateTime54 = localDateTime32.withMillisOfDay(12);
        boolean boolean55 = languageRange1.equals((java.lang.Object) 12);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hours" + "'", str2, "hours");
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hours" + "'", str4, "hours");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hours" + "'", str6, "hours");
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "weekyears" + "'", str8, "weekyears");
        org.junit.Assert.assertNotNull(durationFieldType9);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "ISOChronology[UTC]" + "'", str21, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "+00:00" + "'", str35, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(durationFieldType38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray40);
// flaky:         org.junit.Assert.assertEquals("'" + str41 + "' != '" + "2022-02-22T07:23:33.016" + "'", str41, "2022-02-22T07:23:33.016");
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(dateTimeFieldType44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[2022, 2, 23, 54958650]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[1969, 12, 31, 10801094]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 22 + "'", int52 == 22);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
    }

    @Test
    public void test10392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10392");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.millisOfDay();
        long long5 = property4.remainder();
        int int6 = property4.getMinimumValueOverall();
        java.util.Locale.Category category7 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale8 = java.util.Locale.FRENCH;
        java.util.Locale.setDefault(category7, locale8);
        java.lang.String str10 = locale8.getDisplayName();
        int int11 = property4.getMaximumShortTextLength(locale8);
        java.lang.String str12 = locale8.getDisplayLanguage();
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology15 = localDateTime14.getChronology();
        org.joda.time.DurationField durationField16 = chronology15.weekyears();
        org.joda.time.DurationField durationField17 = chronology15.centuries();
        org.joda.time.DurationField durationField18 = chronology15.minutes();
        org.joda.time.DateTimeField dateTimeField19 = chronology15.monthOfYear();
        org.joda.time.DateTimeField dateTimeField20 = chronology15.halfdayOfDay();
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime();
        org.joda.time.ReadableDuration readableDuration22 = null;
        org.joda.time.LocalDateTime localDateTime24 = localDateTime21.withDurationAdded(readableDuration22, (int) '#');
        org.joda.time.LocalDateTime.Property property25 = localDateTime24.weekyear();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime24.minusMillis((-1));
        org.joda.time.LocalDateTime.Property property28 = localDateTime24.dayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str31 = dateTimeZone29.getShortName((long) (short) 10);
        long long33 = dateTimeZone29.convertUTCToLocal((long) ' ');
        java.util.Locale locale35 = java.util.Locale.ROOT;
        java.lang.String str36 = dateTimeZone29.getName((long) (short) 0, locale35);
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str39 = dateTimeZone37.getShortName((long) (short) 10);
        long long41 = dateTimeZone37.convertUTCToLocal((long) ' ');
        java.lang.String str42 = dateTimeZone37.toString();
        boolean boolean44 = dateTimeZone37.equals((java.lang.Object) (short) 100);
        java.util.Locale locale46 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str47 = dateTimeZone37.getShortName((long) (-1), locale46);
        java.lang.String str48 = locale35.getDisplayVariant(locale46);
        int int49 = property28.getMaximumShortTextLength(locale46);
        java.lang.String str50 = locale46.getLanguage();
        int int51 = dateTimeField20.getMaximumTextLength(locale46);
        java.lang.String str52 = locale46.getDisplayScript();
        java.lang.String str53 = locale8.getDisplayName(locale46);
        java.util.Locale.Category category54 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale55 = java.util.Locale.getDefault();
        java.lang.String str56 = locale55.getISO3Language();
        java.util.Locale.setDefault(category54, locale55);
        java.util.Locale locale58 = java.util.Locale.getDefault(category54);
        java.util.Locale locale59 = java.util.Locale.ENGLISH;
        java.util.Locale.setDefault(category54, locale59);
        java.lang.String str61 = locale59.getDisplayScript();
        java.lang.String str62 = locale46.getDisplayScript(locale59);
        java.util.Set<java.lang.String> strSet63 = locale46.getUnicodeLocaleKeys();
        java.lang.String str64 = locale46.getDisplayName();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00" + "'", str2, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + category7 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category7.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "fran\347ais" + "'", str10, "fran\347ais");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 8 + "'", int11 == 8);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "fran\347ais" + "'", str12, "fran\347ais");
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "+00:00" + "'", str31, "+00:00");
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 32L + "'", long33 == 32L);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "+00:00" + "'", str36, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "+00:00" + "'", str39, "+00:00");
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 32L + "'", long41 == 32L);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "UTC" + "'", str42, "UTC");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "+00:00" + "'", str47, "+00:00");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 2 + "'", int49 == 2);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "fr" + "'", str50, "fr");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 2 + "'", int51 == 2);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "fran\347ais" + "'", str53, "fran\347ais");
        org.junit.Assert.assertTrue("'" + category54 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category54.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "de");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "deu" + "'", str56, "deu");
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "de");
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "en");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertNotNull(strSet63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "French (Canada)" + "'", str64, "French (Canada)");
    }

    @Test
    public void test10393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10393");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.millisOfDay();
        java.lang.String str5 = property4.getName();
        org.joda.time.LocalDateTime localDateTime6 = property4.roundHalfFloorCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        boolean boolean8 = localDateTime6.isSupported(dateTimeFieldType7);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str11 = dateTimeZone9.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime12 = org.joda.time.LocalDateTime.now(dateTimeZone9);
        org.joda.time.LocalDateTime.Property property13 = localDateTime12.millisOfDay();
        org.joda.time.DurationFieldType durationFieldType14 = org.joda.time.DurationFieldType.centuries();
        boolean boolean15 = localDateTime12.equals((java.lang.Object) durationFieldType14);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray16 = localDateTime12.getFieldTypes();
        java.lang.String str17 = localDateTime12.toString();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime12.plusMillis(22);
        boolean boolean20 = localDateTime6.isBefore((org.joda.time.ReadablePartial) localDateTime19);
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.LocalDateTime localDateTime22 = localDateTime19.plus(readableDuration21);
        org.joda.time.LocalDateTime.Property property23 = localDateTime22.minuteOfHour();
        org.joda.time.LocalDateTime.Property property24 = localDateTime22.yearOfCentury();
        int int25 = localDateTime22.getWeekOfWeekyear();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00" + "'", str2, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "millisOfDay" + "'", str5, "millisOfDay");
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+00:00" + "'", str11, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(durationFieldType14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray16);
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "2022-02-22T07:23:33.060" + "'", str17, "2022-02-22T07:23:33.060");
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 8 + "'", int25 == 8);
    }

    @Test
    public void test10394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10394");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        org.joda.time.LocalDateTime localDateTime3 = localDateTime0.withDurationAdded(readableDuration1, (int) '#');
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.withYear(0);
        int int6 = localDateTime5.getDayOfYear();
        org.joda.time.LocalDateTime.Property property7 = localDateTime5.weekOfWeekyear();
        org.joda.time.LocalDateTime.Property property8 = localDateTime5.millisOfSecond();
        int int9 = property8.getMaximumValue();
        int int10 = property8.getMinimumValue();
        org.joda.time.Interval interval11 = property8.toInterval();
        org.joda.time.DateTimeField dateTimeField12 = property8.getField();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 53 + "'", int6 == 53);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 999 + "'", int9 == 999);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(dateTimeField12);
    }

    @Test
    public void test10395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10395");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.millisOfDay();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime3.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime3.plusHours((int) ' ');
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.DateTime dateTime10 = localDateTime8.toDateTime(readableInstant9);
        long long11 = dateTime10.getMillis();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str14 = dateTimeZone12.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime15 = org.joda.time.LocalDateTime.now(dateTimeZone12);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = localDateTime15.getFieldType((int) (short) 0);
        boolean boolean18 = dateTime10.isSupported(dateTimeFieldType17);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str21 = dateTimeZone19.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime22 = org.joda.time.LocalDateTime.now(dateTimeZone19);
        org.joda.time.LocalDateTime.Property property23 = localDateTime22.millisOfDay();
        org.joda.time.ReadableInstant readableInstant24 = null;
        long long25 = property23.getDifferenceAsLong(readableInstant24);
        org.joda.time.DurationField durationField26 = property23.getLeapDurationField();
        java.lang.String str27 = property23.getAsString();
        org.joda.time.LocalDateTime localDateTime28 = property23.roundFloorCopy();
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.withWeekyear((int) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str33 = dateTimeZone31.getShortName((long) (short) 10);
        long long35 = dateTimeZone31.convertUTCToLocal((long) ' ');
        java.lang.String str36 = dateTimeZone31.toString();
        boolean boolean38 = dateTimeZone31.equals((java.lang.Object) (short) 100);
        java.util.Locale locale40 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str41 = dateTimeZone31.getShortName((long) (-1), locale40);
        org.joda.time.LocalDateTime localDateTime42 = new org.joda.time.LocalDateTime(dateTimeZone31);
        org.joda.time.DateTime dateTime43 = localDateTime30.toDateTime(dateTimeZone31);
        boolean boolean44 = dateTime10.isEqual((org.joda.time.ReadableInstant) dateTime43);
        org.joda.time.Instant instant45 = dateTime43.toInstant();
        long long46 = instant45.getMillis();
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = org.joda.time.DateTimeFieldType.hourOfDay();
        org.joda.time.LocalDateTime localDateTime49 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology50 = localDateTime49.getChronology();
        org.joda.time.DurationField durationField51 = chronology50.weekyears();
        org.joda.time.DurationField durationField52 = chronology50.centuries();
        org.joda.time.DurationField durationField53 = chronology50.minutes();
        org.joda.time.LocalDateTime localDateTime54 = new org.joda.time.LocalDateTime(chronology50);
        boolean boolean55 = dateTimeFieldType47.isSupported(chronology50);
        int int56 = instant45.get(dateTimeFieldType47);
        org.joda.time.Instant instant57 = instant45.toInstant();
        org.joda.time.DateTimeZone dateTimeZone58 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str60 = dateTimeZone58.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime61 = org.joda.time.LocalDateTime.now(dateTimeZone58);
        org.joda.time.LocalDateTime.Property property62 = localDateTime61.millisOfDay();
        org.joda.time.LocalDateTime localDateTime64 = localDateTime61.withYear((int) (short) 100);
        org.joda.time.LocalDateTime.Property property65 = localDateTime64.minuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone66 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str68 = dateTimeZone66.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime69 = org.joda.time.LocalDateTime.now(dateTimeZone66);
        org.joda.time.DateTime dateTime70 = localDateTime64.toDateTime(dateTimeZone66);
        org.joda.time.Instant instant71 = dateTime70.toInstant();
        boolean boolean72 = instant45.isAfter((org.joda.time.ReadableInstant) dateTime70);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00" + "'", str2, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
// flaky:         org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1645629813083L + "'", long11 == 1645629813083L);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+00:00" + "'", str14, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "+00:00" + "'", str21, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertNull(durationField26);
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "26613083" + "'", str27, "26613083");
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "+00:00" + "'", str33, "+00:00");
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 32L + "'", long35 == 32L);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "UTC" + "'", str36, "UTC");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "+00:00" + "'", str41, "+00:00");
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(instant45);
// flaky:         org.junit.Assert.assertTrue("'" + long46 + "' != '" + (-62162699786917L) + "'", long46 == (-62162699786917L));
        org.junit.Assert.assertNotNull(dateTimeFieldType47);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(durationField51);
        org.junit.Assert.assertNotNull(durationField52);
        org.junit.Assert.assertNotNull(durationField53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 7 + "'", int56 == 7);
        org.junit.Assert.assertNotNull(instant57);
        org.junit.Assert.assertNotNull(dateTimeZone58);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "+00:00" + "'", str60, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertNotNull(dateTimeZone66);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "+00:00" + "'", str68, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime69);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(instant71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
    }

    @Test
    public void test10396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10396");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(1745);
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str4 = dateTimeZone2.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime5 = org.joda.time.LocalDateTime.now(dateTimeZone2);
        org.joda.time.LocalDateTime.Property property6 = localDateTime5.millisOfDay();
        long long7 = property6.remainder();
        org.joda.time.LocalDateTime localDateTime8 = property6.roundFloorCopy();
        java.lang.String str9 = property6.getAsShortText();
        org.joda.time.DurationField durationField10 = property6.getRangeDurationField();
        int int13 = durationField10.getValue(86340010L, (long) 292278993);
        long long16 = durationField10.getDifferenceAsLong(56L, (-100L));
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetMillis((-55));
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.DurationFieldType durationFieldType20 = dateTimeFieldType19.getDurationType();
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology23 = localDateTime22.getChronology();
        org.joda.time.DurationField durationField24 = chronology23.weekyears();
        org.joda.time.DurationField durationField25 = chronology23.centuries();
        boolean boolean26 = durationFieldType20.isSupported(chronology23);
        org.joda.time.DurationField durationField27 = chronology23.halfdays();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.Chronology chronology29 = chronology23.withZone(dateTimeZone28);
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str32 = dateTimeZone30.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime33 = org.joda.time.LocalDateTime.now(dateTimeZone30);
        org.joda.time.LocalDateTime.Property property34 = localDateTime33.millisOfDay();
        org.joda.time.LocalDateTime localDateTime36 = localDateTime33.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime33.plusHours((int) ' ');
        org.joda.time.ReadableInstant readableInstant39 = null;
        org.joda.time.DateTime dateTime40 = localDateTime38.toDateTime(readableInstant39);
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str43 = dateTimeZone41.getShortName((long) (short) 10);
        long long45 = dateTimeZone41.convertUTCToLocal((long) ' ');
        java.lang.String str46 = dateTimeZone41.toString();
        long long48 = dateTimeZone41.previousTransition(32L);
        long long51 = dateTimeZone41.convertLocalToUTC(97L, false);
        boolean boolean52 = dateTime40.equals((java.lang.Object) false);
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str55 = dateTimeZone53.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime56 = org.joda.time.LocalDateTime.now(dateTimeZone53);
        org.joda.time.LocalDateTime.Property property57 = localDateTime56.millisOfDay();
        org.joda.time.LocalDateTime localDateTime59 = localDateTime56.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime61 = localDateTime56.plusHours((int) ' ');
        org.joda.time.ReadableInstant readableInstant62 = null;
        org.joda.time.DateTime dateTime63 = localDateTime61.toDateTime(readableInstant62);
        long long64 = dateTime63.getMillis();
        org.joda.time.DateTimeZone dateTimeZone65 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str67 = dateTimeZone65.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime68 = org.joda.time.LocalDateTime.now(dateTimeZone65);
        org.joda.time.DateTimeFieldType dateTimeFieldType70 = localDateTime68.getFieldType((int) (short) 0);
        boolean boolean71 = dateTime63.isSupported(dateTimeFieldType70);
        boolean boolean72 = dateTime40.isAfter((org.joda.time.ReadableInstant) dateTime63);
        java.lang.String str73 = dateTime40.toString();
        boolean boolean75 = dateTime40.equals((java.lang.Object) (short) 1);
        int int76 = dateTimeZone28.getOffset((org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.LocalDateTime localDateTime77 = new org.joda.time.LocalDateTime(dateTimeZone28);
        int int79 = dateTimeZone28.getOffset((long) 67);
        long long83 = dateTimeZone28.convertLocalToUTC((long) 26234606, true, 631411200011L);
        long long85 = dateTimeZone18.getMillisKeepLocal(dateTimeZone28, 2260528390380000L);
        org.joda.time.LocalDateTime localDateTime86 = new org.joda.time.LocalDateTime((java.lang.Object) long16, dateTimeZone18);
        long long88 = dateTimeZone1.getMillisKeepLocal(dateTimeZone18, 1645629708251L);
        java.util.TimeZone timeZone89 = dateTimeZone18.toTimeZone();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00" + "'", str4, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(localDateTime8);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "26613120" + "'", str9, "26613120");
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(durationFieldType20);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "+00:00" + "'", str32, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "+00:00" + "'", str43, "+00:00");
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 32L + "'", long45 == 32L);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "UTC" + "'", str46, "UTC");
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 32L + "'", long48 == 32L);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 97L + "'", long51 == 97L);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "+00:00" + "'", str55, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertNotNull(dateTime63);
// flaky:         org.junit.Assert.assertTrue("'" + long64 + "' != '" + 1645629813120L + "'", long64 == 1645629813120L);
        org.junit.Assert.assertNotNull(dateTimeZone65);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "+00:00" + "'", str67, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime68);
        org.junit.Assert.assertNotNull(dateTimeFieldType70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str73 + "' != '" + "2022-02-23T15:23:33.120Z" + "'", str73, "2022-02-23T15:23:33.120Z");
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertTrue("'" + long83 + "' != '" + 26234606L + "'", long83 == 26234606L);
        org.junit.Assert.assertTrue("'" + long85 + "' != '" + 2260528390379945L + "'", long85 == 2260528390379945L);
        org.junit.Assert.assertTrue("'" + long88 + "' != '" + 1645629710051L + "'", long88 == 1645629710051L);
        org.junit.Assert.assertNotNull(timeZone89);
        org.junit.Assert.assertEquals(timeZone89.getDisplayName(), "GMT+00:00");
    }

    @Test
    public void test10397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10397");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DurationField durationField3 = chronology2.weekyears();
        org.joda.time.DurationField durationField4 = chronology2.seconds();
        org.joda.time.DurationField durationField5 = chronology2.seconds();
        org.joda.time.DateTimeField dateTimeField6 = chronology2.secondOfDay();
        java.util.Locale locale8 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str9 = locale8.getVariant();
        java.lang.String str10 = dateTimeField6.getAsText(1645629360000L, locale8);
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology13 = localDateTime12.getChronology();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime12.plusDays(3);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.LocalDateTime localDateTime18 = localDateTime15.withPeriodAdded(readablePeriod16, 1);
        java.util.Locale locale22 = new java.util.Locale("2022-02-22T07:17:54.085", "2022-02-22T07:18:04.123");
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str25 = dateTimeZone23.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime26 = org.joda.time.LocalDateTime.now(dateTimeZone23);
        org.joda.time.LocalDateTime.Property property27 = localDateTime26.millisOfDay();
        java.lang.String str28 = property27.getName();
        int int29 = property27.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime();
        org.joda.time.ReadableDuration readableDuration31 = null;
        org.joda.time.LocalDateTime localDateTime33 = localDateTime30.withDurationAdded(readableDuration31, (int) '#');
        org.joda.time.LocalDateTime.Property property34 = localDateTime33.weekyear();
        int int35 = property34.getMaximumValue();
        org.joda.time.DateTimeField dateTimeField36 = property34.getField();
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str39 = dateTimeZone37.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime40 = org.joda.time.LocalDateTime.now(dateTimeZone37);
        org.joda.time.LocalDateTime.Property property41 = localDateTime40.millisOfDay();
        org.joda.time.LocalDateTime localDateTime43 = localDateTime40.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime40.plusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime47 = localDateTime45.minusHours((int) (short) 10);
        int int48 = dateTimeField36.getMinimumValue((org.joda.time.ReadablePartial) localDateTime47);
        java.lang.String str50 = dateTimeField36.getAsText((long) (-292275054));
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str53 = dateTimeZone51.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime54 = org.joda.time.LocalDateTime.now(dateTimeZone51);
        org.joda.time.LocalDateTime.Property property55 = localDateTime54.millisOfDay();
        org.joda.time.ReadableInstant readableInstant56 = null;
        long long57 = property55.getDifferenceAsLong(readableInstant56);
        java.util.Locale locale58 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str59 = locale58.getISO3Language();
        java.lang.String str60 = property55.getAsShortText(locale58);
        int int61 = dateTimeField36.getMaximumShortTextLength(locale58);
        long long63 = dateTimeField36.roundHalfFloor(0L);
        java.util.Locale locale65 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale66 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str67 = locale65.getDisplayCountry(locale66);
        java.lang.String str68 = locale66.getDisplayName();
        java.lang.String str69 = dateTimeField36.getAsText(19, locale66);
        int int70 = property27.getMaximumTextLength(locale66);
        java.util.Locale locale71 = locale66.stripExtensions();
        java.lang.String str72 = locale22.getDisplayLanguage(locale71);
        java.lang.String str73 = dateTimeField6.getAsText((org.joda.time.ReadablePartial) localDateTime18, 18, locale22);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime75 = localDateTime18.withCenturyOfEra(172800000);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 172800000 for centuryOfEra must be in the range [0,2922789]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "54960" + "'", str10, "54960");
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertEquals(locale22.toString(), "2022-02-22t07:17:54.085_2022-02-22T07:18:04.123");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "+00:00" + "'", str25, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "millisOfDay" + "'", str28, "millisOfDay");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 86399999 + "'", int29 == 86399999);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 292278993 + "'", int35 == 292278993);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "+00:00" + "'", str39, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-292275054) + "'", int48 == (-292275054));
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "1969" + "'", str50, "1969");
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "+00:00" + "'", str53, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 0L + "'", long57 == 0L);
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "fra" + "'", str59, "fra");
// flaky:         org.junit.Assert.assertEquals("'" + str60 + "' != '" + "26613161" + "'", str60, "26613161");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 9 + "'", int61 == 9);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + (-259200000L) + "'", long63 == (-259200000L));
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "Canada" + "'", str67, "Canada");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "French (Canada)" + "'", str68, "French (Canada)");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "19" + "'", str69, "19");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 8 + "'", int70 == 8);
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "2022-02-22t07:17:54.085" + "'", str72, "2022-02-22t07:17:54.085");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "18" + "'", str73, "18");
    }

    @Test
    public void test10398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10398");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.millisOfDay();
        org.joda.time.ReadableInstant readableInstant5 = null;
        long long6 = property4.getDifferenceAsLong(readableInstant5);
        int int7 = property4.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime8 = property4.roundHalfEvenCopy();
        org.joda.time.DurationField durationField9 = property4.getRangeDurationField();
        org.joda.time.LocalDateTime localDateTime11 = property4.addToCopy(22);
        org.joda.time.LocalDateTime.Property property12 = localDateTime11.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime14 = property12.addToCopy(11825773L);
        java.lang.String str15 = property12.getAsShortText();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00" + "'", str2, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 86399999 + "'", int7 == 86399999);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "8" + "'", str15, "8");
    }

    @Test
    public void test10399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10399");
        java.util.Locale locale0 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet1 = locale0.getUnicodeLocaleAttributes();
        java.lang.Object[] objArray2 = strSet1.toArray();
        java.util.Locale locale3 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet4 = locale3.getUnicodeLocaleAttributes();
        boolean boolean5 = strSet1.removeAll((java.util.Collection<java.lang.String>) strSet4);
        strSet1.clear();
        java.util.stream.Stream<java.lang.String> strStream7 = strSet1.parallelStream();
        java.util.Locale.LanguageRange[] languageRangeArray8 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList9 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList9, languageRangeArray8);
        java.util.Locale locale11 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale12 = java.util.Locale.CANADA;
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str15 = dateTimeZone13.getShortName((long) (short) 10);
        long long17 = dateTimeZone13.convertUTCToLocal((long) ' ');
        java.lang.String str18 = dateTimeZone13.toString();
        boolean boolean20 = dateTimeZone13.equals((java.lang.Object) (short) 100);
        java.util.Locale locale22 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str23 = dateTimeZone13.getShortName((long) (-1), locale22);
        java.util.Locale locale24 = java.util.Locale.CANADA;
        java.util.Locale locale25 = java.util.Locale.FRENCH;
        java.util.Locale[] localeArray26 = new java.util.Locale[] { locale11, locale12, locale22, locale24, locale25 };
        java.util.ArrayList<java.util.Locale> localeList27 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList27, localeArray26);
        java.util.Locale locale29 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList9, (java.util.Collection<java.util.Locale>) localeList27);
        java.util.Locale locale30 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet31 = locale30.getUnicodeLocaleAttributes();
        java.lang.Object[] objArray32 = strSet31.toArray();
        java.util.List<java.lang.String> strList33 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList9, (java.util.Collection<java.lang.String>) strSet31);
        java.util.Locale locale34 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet35 = locale34.getUnicodeLocaleAttributes();
        java.lang.Object[] objArray36 = strSet35.toArray();
        java.util.Locale locale37 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet38 = locale37.getUnicodeLocaleAttributes();
        boolean boolean39 = strSet35.removeAll((java.util.Collection<java.lang.String>) strSet38);
        java.util.List<java.lang.String> strList40 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList9, (java.util.Collection<java.lang.String>) strSet35);
        java.util.Locale locale41 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet42 = locale41.getUnicodeLocaleAttributes();
        java.util.Set<java.lang.String> strSet43 = locale41.getUnicodeLocaleAttributes();
        boolean boolean44 = strSet35.retainAll((java.util.Collection<java.lang.String>) strSet43);
        org.joda.time.DateTimeFieldType dateTimeFieldType45 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.DateTimeField dateTimeField47 = dateTimeFieldType45.getField(chronology46);
        java.util.Locale locale49 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale50 = locale49.stripExtensions();
        java.lang.String str51 = dateTimeField47.getAsShortText(100, locale50);
        int int53 = dateTimeField47.getLeapAmount((long) (short) 100);
        org.joda.time.DurationField durationField54 = dateTimeField47.getRangeDurationField();
        boolean boolean55 = dateTimeField47.isLenient();
        org.joda.time.DateTimeFieldType dateTimeFieldType56 = dateTimeField47.getType();
        int int58 = dateTimeField47.get(1645629354990L);
        boolean boolean59 = strSet35.contains((java.lang.Object) int58);
        java.util.Iterator<java.lang.String> strItor60 = strSet35.iterator();
        boolean boolean61 = strSet1.containsAll((java.util.Collection<java.lang.String>) strSet35);
        java.util.stream.Stream<java.lang.String> strStream62 = strSet35.stream();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "");
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNotNull(objArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray2), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray2), "[]");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "");
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(strStream7);
        org.junit.Assert.assertNotNull(languageRangeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "en_CA");
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+00:00" + "'", str15, "+00:00");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 32L + "'", long17 == 32L);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "UTC" + "'", str18, "UTC");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "+00:00" + "'", str23, "+00:00");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "fr");
        org.junit.Assert.assertNotNull(localeArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNull(locale29);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "");
        org.junit.Assert.assertNotNull(strSet31);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[]");
        org.junit.Assert.assertNotNull(strList33);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "");
        org.junit.Assert.assertNotNull(strSet35);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[]");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "");
        org.junit.Assert.assertNotNull(strSet38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(strList40);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "");
        org.junit.Assert.assertNotNull(strSet42);
        org.junit.Assert.assertNotNull(strSet43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType45);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "100" + "'", str51, "100");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(durationField54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType56);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 915 + "'", int58 == 915);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(strItor60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(strStream62);
    }

    @Test
    public void test10400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10400");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        org.joda.time.LocalDateTime localDateTime3 = localDateTime0.withDurationAdded(readableDuration1, (int) '#');
        org.joda.time.LocalDateTime.Property property4 = localDateTime0.era();
        int int5 = localDateTime0.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime0.withWeekOfWeekyear((int) (byte) 1);
        int int8 = localDateTime0.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime0.plusDays(500);
        org.joda.time.DurationFieldType durationFieldType11 = org.joda.time.DurationFieldType.days();
        java.lang.String str12 = durationFieldType11.toString();
        boolean boolean13 = localDateTime10.isSupported(durationFieldType11);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.LocalDateTime localDateTime15 = localDateTime10.plus(readablePeriod14);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = null;
        java.lang.String str17 = localDateTime10.toString(dateTimeFormatter16);
        org.joda.time.DateTimeField[] dateTimeFieldArray18 = localDateTime10.getFields();
        int int19 = localDateTime10.getDayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str22 = dateTimeZone20.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime23 = org.joda.time.LocalDateTime.now(dateTimeZone20);
        org.joda.time.LocalDateTime.Property property24 = localDateTime23.millisOfDay();
        org.joda.time.LocalDateTime localDateTime26 = localDateTime23.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime23.plusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.minusHours((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime28.withMillisOfDay(26180486);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime28.plusMillis(917);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime34.withMillisOfDay(55124939);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime34.plusMillis(26328866);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime38.plusDays(5689406);
        boolean boolean41 = localDateTime10.isBefore((org.joda.time.ReadablePartial) localDateTime38);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 22 + "'", int5 == 22);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 7 + "'", int8 == 7);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(durationFieldType11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "days" + "'", str12, "days");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(localDateTime15);
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "2023-07-07T07:23:33.249" + "'", str17, "2023-07-07T07:23:33.249");
        org.junit.Assert.assertNotNull(dateTimeFieldArray18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 5 + "'", int19 == 5);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+00:00" + "'", str22, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }

    @Test
    public void test10401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10401");
        java.util.Locale locale0 = java.util.Locale.CHINA;
        java.util.Set<java.lang.String> strSet1 = locale0.getUnicodeLocaleAttributes();
        java.util.Locale locale2 = java.util.Locale.US;
        java.lang.String str3 = locale0.getDisplayName(locale2);
        boolean boolean4 = locale0.hasExtensions();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Chinese (China)" + "'", str3, "Chinese (China)");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test10402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10402");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DurationField durationField3 = chronology2.weekyears();
        org.joda.time.DurationField durationField4 = chronology2.seconds();
        org.joda.time.DurationField durationField5 = chronology2.seconds();
        org.joda.time.DurationField durationField6 = chronology2.seconds();
        org.joda.time.DurationField durationField7 = chronology2.weekyears();
        org.joda.time.DateTimeField dateTimeField8 = chronology2.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField9 = chronology2.halfdayOfDay();
        long long12 = dateTimeField9.getDifferenceAsLong(1704075408000L, 1645629696155L);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str16 = dateTimeZone14.getShortName((long) (short) 10);
        long long18 = dateTimeZone14.convertUTCToLocal((long) ' ');
        java.lang.String str19 = dateTimeZone14.toString();
        boolean boolean21 = dateTimeZone14.equals((java.lang.Object) (short) 100);
        java.util.Locale locale23 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str24 = dateTimeZone14.getShortName((long) (-1), locale23);
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime(dateTimeZone14);
        int int27 = dateTimeZone14.getOffset((long) (short) 10);
        boolean boolean28 = dateTimeZone14.isFixed();
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime(dateTimeZone14);
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime(1645629423910L, dateTimeZone14);
        org.joda.time.Chronology chronology31 = localDateTime30.getChronology();
        long long35 = chronology31.add(1645629443646L, (-33333788508157430L), 0);
        org.joda.time.DateTimeField dateTimeField36 = chronology31.year();
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime((java.lang.Object) 1704075408000L, chronology31);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1352L + "'", long12 == 1352L);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+00:00" + "'", str16, "+00:00");
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 32L + "'", long18 == 32L);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "UTC" + "'", str19, "UTC");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "+00:00" + "'", str24, "+00:00");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 1645629443646L + "'", long35 == 1645629443646L);
        org.junit.Assert.assertNotNull(dateTimeField36);
    }

    @Test
    public void test10403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10403");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        org.joda.time.LocalDateTime localDateTime3 = localDateTime0.withDurationAdded(readableDuration1, (int) '#');
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.weekyear();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime3.minusMillis((-1));
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str9 = dateTimeZone7.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime10 = org.joda.time.LocalDateTime.now(dateTimeZone7);
        org.joda.time.LocalDateTime.Property property11 = localDateTime10.millisOfDay();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime10.withYear((int) (short) 100);
        java.lang.String str14 = localDateTime13.toString();
        boolean boolean15 = localDateTime3.isAfter((org.joda.time.ReadablePartial) localDateTime13);
        org.joda.time.DurationFieldType durationFieldType16 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime13.withFieldAdded(durationFieldType16, 7);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str21 = dateTimeZone19.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime22 = org.joda.time.LocalDateTime.now(dateTimeZone19);
        org.joda.time.LocalDateTime.Property property23 = localDateTime22.millisOfDay();
        org.joda.time.LocalDateTime localDateTime25 = localDateTime22.withYear((int) (short) 100);
        org.joda.time.LocalDateTime.Property property26 = localDateTime25.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime28 = localDateTime25.minusMonths(2022);
        int int29 = localDateTime25.getDayOfMonth();
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = org.joda.time.DateTimeFieldType.dayOfMonth();
        boolean boolean31 = localDateTime25.equals((java.lang.Object) dateTimeFieldType30);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime25.plusHours(26163523);
        boolean boolean34 = localDateTime18.isBefore((org.joda.time.ReadablePartial) localDateTime25);
        int[] intArray35 = localDateTime18.getValues();
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str38 = dateTimeZone36.getShortName((long) (short) 10);
        long long40 = dateTimeZone36.convertUTCToLocal((long) ' ');
        java.lang.String str41 = dateTimeZone36.toString();
        long long43 = dateTimeZone36.previousTransition(32L);
        org.joda.time.LocalDateTime localDateTime44 = new org.joda.time.LocalDateTime(dateTimeZone36);
        org.joda.time.LocalDateTime localDateTime45 = org.joda.time.LocalDateTime.now(dateTimeZone36);
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.LocalDateTime localDateTime48 = localDateTime45.withField(dateTimeFieldType46, 16);
        org.joda.time.LocalDateTime localDateTime49 = new org.joda.time.LocalDateTime();
        org.joda.time.ReadableDuration readableDuration50 = null;
        org.joda.time.LocalDateTime localDateTime52 = localDateTime49.withDurationAdded(readableDuration50, (int) '#');
        org.joda.time.LocalDateTime.Property property53 = localDateTime52.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime55 = localDateTime52.minusHours(0);
        int int56 = localDateTime52.getSecondOfMinute();
        boolean boolean57 = localDateTime45.isEqual((org.joda.time.ReadablePartial) localDateTime52);
        org.joda.time.ReadableDuration readableDuration58 = null;
        org.joda.time.LocalDateTime localDateTime60 = localDateTime45.withDurationAdded(readableDuration58, 55005041);
        boolean boolean61 = localDateTime18.equals((java.lang.Object) localDateTime60);
        org.joda.time.LocalDateTime.Property property62 = localDateTime18.dayOfWeek();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00" + "'", str9, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDateTime13);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "0100-02-22T07:23:33.296" + "'", str14, "0100-02-22T07:23:33.296");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(durationFieldType16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "+00:00" + "'", str21, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 22 + "'", int29 == 22);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(intArray35);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[800, 2, 22, 26613296]");
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "+00:00" + "'", str38, "+00:00");
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 32L + "'", long40 == 32L);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "UTC" + "'", str41, "UTC");
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 32L + "'", long43 == 32L);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(dateTimeFieldType46);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(localDateTime55);
// flaky:         org.junit.Assert.assertTrue("'" + int56 + "' != '" + 33 + "'", int56 == 33);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(property62);
    }

    @Test
    public void test10404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10404");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(2017, 19392405);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minutes out of range: 19392405");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test10405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10405");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.millisOfDay();
        org.joda.time.ReadableInstant readableInstant5 = null;
        long long6 = property4.getDifferenceAsLong(readableInstant5);
        int int7 = property4.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime8 = property4.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime9 = property4.roundCeilingCopy();
        java.lang.String str10 = property4.getAsText();
        java.lang.String str11 = property4.getAsString();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00" + "'", str2, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 86399999 + "'", int7 == 86399999);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime9);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "26613328" + "'", str10, "26613328");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "26613328" + "'", str11, "26613328");
    }

    @Test
    public void test10406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10406");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.weekyears();
        java.lang.String str1 = durationFieldType0.toString();
        org.joda.time.DurationFieldType durationFieldType2 = org.joda.time.DurationFieldType.millis();
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology5 = localDateTime4.getChronology();
        org.joda.time.DurationField durationField6 = chronology5.weekyears();
        org.joda.time.DurationField durationField7 = chronology5.centuries();
        org.joda.time.DurationField durationField8 = durationFieldType2.getField(chronology5);
        boolean boolean9 = durationFieldType0.isSupported(chronology5);
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology12 = localDateTime11.getChronology();
        org.joda.time.DurationField durationField13 = chronology12.hours();
        java.lang.String str14 = chronology12.toString();
        org.joda.time.DateTimeField dateTimeField15 = chronology12.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField16 = chronology12.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime();
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.LocalDateTime localDateTime20 = localDateTime17.withDurationAdded(readableDuration18, (int) '#');
        org.joda.time.LocalDateTime.Property property21 = localDateTime20.weekyear();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime20.minusMillis((-1));
        org.joda.time.LocalDateTime.Property property24 = localDateTime20.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime25 = property24.roundHalfFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str28 = dateTimeZone26.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime29 = org.joda.time.LocalDateTime.now(dateTimeZone26);
        org.joda.time.LocalDateTime.Property property30 = localDateTime29.millisOfDay();
        org.joda.time.DurationFieldType durationFieldType31 = org.joda.time.DurationFieldType.centuries();
        boolean boolean32 = localDateTime29.equals((java.lang.Object) durationFieldType31);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray33 = localDateTime29.getFieldTypes();
        java.lang.String str34 = localDateTime29.toString();
        org.joda.time.LocalDateTime localDateTime36 = localDateTime29.plusMillis(22);
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = org.joda.time.DateTimeFieldType.secondOfDay();
        boolean boolean38 = localDateTime29.isSupported(dateTimeFieldType37);
        int int39 = localDateTime25.indexOf(dateTimeFieldType37);
        int[] intArray41 = chronology12.get((org.joda.time.ReadablePartial) localDateTime25, 1645629358650L);
        int int42 = localDateTime25.getMillisOfSecond();
        int[] intArray44 = chronology5.get((org.joda.time.ReadablePartial) localDateTime25, (-75598906L));
        org.joda.time.DateTimeField dateTimeField45 = chronology5.hourOfHalfday();
        int int46 = dateTimeField45.getMinimumValue();
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "weekyears" + "'", str1, "weekyears");
        org.junit.Assert.assertNotNull(durationFieldType2);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "ISOChronology[UTC]" + "'", str14, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "+00:00" + "'", str28, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(durationFieldType31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray33);
// flaky:         org.junit.Assert.assertEquals("'" + str34 + "' != '" + "2022-02-22T07:23:33.337" + "'", str34, "2022-02-22T07:23:33.337");
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[2022, 2, 23, 54958650]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[1969, 12, 31, 10801094]");
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
    }

    @Test
    public void test10407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10407");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        java.lang.String str3 = dateTimeZone1.getNameKey(1645629465633L);
        int int5 = dateTimeZone1.getStandardOffset((-59006940589506L));
        java.lang.String str6 = dateTimeZone1.toString();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "UTC" + "'", str3, "UTC");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "UTC" + "'", str6, "UTC");
    }

    @Test
    public void test10408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10408");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DateTimeField dateTimeField3 = chronology2.dayOfYear();
        org.joda.time.DateTimeField dateTimeField4 = chronology2.hourOfDay();
        long long7 = dateTimeField4.getDifferenceAsLong(86399019L, 1645629538080L);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-457095L) + "'", long7 == (-457095L));
    }

    @Test
    public void test10409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10409");
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.weekyears();
        boolean boolean6 = dateTimeFieldType1.isSupported(chronology4);
        org.joda.time.DateTimeField dateTimeField7 = chronology4.secondOfDay();
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime((-86340L), chronology4);
        org.joda.time.DateTimeZone dateTimeZone9 = chronology4.getZone();
        int int11 = dateTimeZone9.getStandardOffset(1645630139930L);
        java.lang.String str12 = dateTimeZone9.toString();
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "UTC" + "'", str12, "UTC");
    }

    @Test
    public void test10410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10410");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DurationField durationField3 = chronology2.hours();
        org.joda.time.DurationField durationField4 = chronology2.weekyears();
        org.joda.time.DateTimeField dateTimeField5 = chronology2.monthOfYear();
        org.joda.time.DateTimeField dateTimeField6 = chronology2.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime7 = org.joda.time.LocalDateTime.now(chronology2);
        org.joda.time.DateTimeField dateTimeField8 = chronology2.dayOfYear();
        org.joda.time.DateTimeField dateTimeField9 = chronology2.millisOfDay();
        org.joda.time.DateTimeField dateTimeField10 = chronology2.year();
        // The following exception was thrown during execution in test generation
        try {
            long long13 = dateTimeField10.add(105L, 6996432324000L);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Value cannot fit in an int: 6996432324000");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
    }

    @Test
    public void test10411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10411");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getShortName((long) (short) 10);
        long long4 = dateTimeZone0.convertUTCToLocal((long) ' ');
        java.lang.String str5 = dateTimeZone0.toString();
        java.lang.String str6 = dateTimeZone0.toString();
        int int8 = dateTimeZone0.getOffsetFromLocal((long) 51);
        java.lang.String str9 = dateTimeZone0.toString();
        int int11 = dateTimeZone0.getOffset(719140074116152L);
        java.lang.String str13 = dateTimeZone0.getShortName(1640157759621L);
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime();
        java.lang.String str15 = localDateTime14.toString();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime14.plusMonths((int) (short) -1);
        org.joda.time.LocalDateTime.Property property18 = localDateTime14.yearOfEra();
        java.lang.String str19 = property18.getAsText();
        org.joda.time.LocalDateTime localDateTime20 = property18.withMinimumValue();
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime();
        org.joda.time.ReadableDuration readableDuration22 = null;
        org.joda.time.LocalDateTime localDateTime24 = localDateTime21.withDurationAdded(readableDuration22, (int) '#');
        org.joda.time.LocalDateTime.Property property25 = localDateTime24.weekyear();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime24.minusMillis((-1));
        java.util.Locale locale29 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale30 = locale29.stripExtensions();
        java.lang.String str31 = locale29.getVariant();
        java.lang.String str32 = localDateTime27.toString("26149261", locale29);
        org.joda.time.DateTime dateTime33 = localDateTime27.toDateTime();
        org.joda.time.DateTime dateTime34 = localDateTime20.toDateTime((org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.Chronology chronology35 = dateTime34.getChronology();
        int int36 = dateTimeZone0.getOffset((org.joda.time.ReadableInstant) dateTime34);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00" + "'", str2, "+00:00");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 32L + "'", long4 == 32L);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "UTC" + "'", str5, "UTC");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "UTC" + "'", str6, "UTC");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "UTC" + "'", str9, "UTC");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+00:00" + "'", str13, "+00:00");
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "2022-02-22T07:23:33.389" + "'", str15, "2022-02-22T07:23:33.389");
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "2022" + "'", str19, "2022");
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "26149261" + "'", str32, "26149261");
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
    }

    @Test
    public void test10412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10412");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.millisOfDay();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime3.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime3.plusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minusHours((int) (short) 10);
        int int11 = localDateTime8.getMinuteOfHour();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime8.minusMinutes(0);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.LocalDateTime localDateTime15 = localDateTime8.plus(readablePeriod14);
        org.joda.time.LocalDateTime.Property property16 = localDateTime15.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str19 = dateTimeZone17.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime20 = org.joda.time.LocalDateTime.now(dateTimeZone17);
        org.joda.time.LocalDateTime.Property property21 = localDateTime20.millisOfDay();
        org.joda.time.DurationFieldType durationFieldType22 = org.joda.time.DurationFieldType.days();
        org.joda.time.LocalDateTime localDateTime24 = localDateTime20.withFieldAdded(durationFieldType22, 26149500);
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str28 = dateTimeZone26.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime29 = org.joda.time.LocalDateTime.now(dateTimeZone26);
        org.joda.time.LocalDateTime.Property property30 = localDateTime29.millisOfDay();
        java.lang.String str31 = property30.getName();
        org.joda.time.LocalDateTime localDateTime32 = property30.roundHalfFloorCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        boolean boolean34 = localDateTime32.isSupported(dateTimeFieldType33);
        java.lang.String str35 = dateTimeFieldType33.toString();
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology38 = localDateTime37.getChronology();
        org.joda.time.DurationField durationField39 = chronology38.weekyears();
        org.joda.time.DurationField durationField40 = chronology38.seconds();
        org.joda.time.DurationField durationField41 = chronology38.seconds();
        org.joda.time.DurationField durationField42 = chronology38.seconds();
        org.joda.time.DateTimeField dateTimeField43 = chronology38.millisOfDay();
        org.joda.time.DateTimeField dateTimeField44 = chronology38.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField45 = dateTimeFieldType33.getField(chronology38);
        org.joda.time.DateTimeField dateTimeField46 = chronology38.weekyear();
        org.joda.time.LocalDateTime localDateTime47 = new org.joda.time.LocalDateTime((long) 34, chronology38);
        boolean boolean48 = durationFieldType22.isSupported(chronology38);
        org.joda.time.LocalDateTime localDateTime50 = localDateTime15.withFieldAdded(durationFieldType22, 27427157);
        org.joda.time.LocalDateTime localDateTime52 = localDateTime50.plusSeconds(72000000);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00" + "'", str2, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 23 + "'", int11 == 23);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "+00:00" + "'", str19, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(durationFieldType22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "+00:00" + "'", str28, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "millisOfDay" + "'", str31, "millisOfDay");
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "clockhourOfDay" + "'", str35, "clockhourOfDay");
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertNotNull(durationField40);
        org.junit.Assert.assertNotNull(durationField41);
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(localDateTime52);
    }

    @Test
    public void test10413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10413");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology3 = localDateTime2.getChronology();
        org.joda.time.DurationField durationField4 = chronology3.weekyears();
        org.joda.time.DurationField durationField5 = chronology3.centuries();
        org.joda.time.DurationField durationField6 = chronology3.hours();
        boolean boolean7 = dateTimeFieldType0.isSupported(chronology3);
        org.joda.time.DateTimeField dateTimeField8 = chronology3.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField9 = chronology3.yearOfEra();
        org.joda.time.DateTimeField dateTimeField10 = chronology3.secondOfMinute();
        int int11 = dateTimeField10.getMinimumValue();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    public void test10414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10414");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology3 = localDateTime2.getChronology();
        org.joda.time.DurationField durationField4 = chronology3.weekyears();
        boolean boolean5 = dateTimeFieldType0.isSupported(chronology3);
        org.joda.time.DurationField durationField6 = chronology3.centuries();
        org.joda.time.DateTimeField dateTimeField7 = chronology3.year();
        long long11 = chronology3.add(1645629353861L, (long) 26149500, 97);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology15 = localDateTime14.getChronology();
        org.joda.time.DurationField durationField16 = chronology15.weekyears();
        boolean boolean17 = dateTimeFieldType12.isSupported(chronology15);
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime();
        java.lang.String str19 = localDateTime18.toString();
        int int20 = localDateTime18.getCenturyOfEra();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime18.minusMonths(2);
        org.joda.time.LocalDateTime.Property property23 = localDateTime22.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str26 = dateTimeZone24.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime27 = org.joda.time.LocalDateTime.now(dateTimeZone24);
        org.joda.time.LocalDateTime.Property property28 = localDateTime27.millisOfDay();
        org.joda.time.LocalDateTime localDateTime30 = localDateTime27.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime27.plusHours((int) ' ');
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.DateTime dateTime34 = localDateTime32.toDateTime(readableInstant33);
        long long35 = dateTime34.getMillis();
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str38 = dateTimeZone36.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime39 = org.joda.time.LocalDateTime.now(dateTimeZone36);
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = localDateTime39.getFieldType((int) (short) 0);
        boolean boolean42 = dateTime34.isSupported(dateTimeFieldType41);
        org.joda.time.DateTime dateTime43 = localDateTime22.toDateTime((org.joda.time.ReadableInstant) dateTime34);
        int[] intArray45 = chronology15.get((org.joda.time.ReadablePartial) localDateTime22, 11L);
        org.joda.time.DateTimeField dateTimeField46 = chronology15.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str49 = dateTimeZone47.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime50 = org.joda.time.LocalDateTime.now(dateTimeZone47);
        org.joda.time.LocalDateTime.Property property51 = localDateTime50.millisOfDay();
        org.joda.time.LocalDateTime localDateTime53 = localDateTime50.withYear((int) (short) 100);
        org.joda.time.LocalDateTime.Property property54 = localDateTime53.minuteOfHour();
        java.util.Locale locale56 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale57 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str58 = locale56.getDisplayCountry(locale57);
        java.util.Locale locale59 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale60 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str61 = locale59.getDisplayCountry(locale60);
        java.lang.String str62 = locale56.getDisplayVariant(locale59);
        java.lang.String str63 = dateTimeField46.getAsText((org.joda.time.ReadablePartial) localDateTime53, 1, locale59);
        org.joda.time.LocalDateTime.Property property64 = localDateTime53.secondOfMinute();
        int int65 = localDateTime53.getMinuteOfHour();
        org.joda.time.LocalDateTime localDateTime67 = localDateTime53.minusMonths(26213656);
        int[] intArray69 = chronology3.get((org.joda.time.ReadablePartial) localDateTime67, 382L);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1648165855361L + "'", long11 == 1648165855361L);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "2022-02-22T07:23:33.452" + "'", str19, "2022-02-22T07:23:33.452");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 20 + "'", int20 == 20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "+00:00" + "'", str26, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
// flaky:         org.junit.Assert.assertTrue("'" + long35 + "' != '" + 1645629813452L + "'", long35 == 1645629813452L);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "+00:00" + "'", str38, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(dateTimeFieldType41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[1970, 1, 1, 11]");
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "+00:00" + "'", str49, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "Canada" + "'", str58, "Canada");
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "Canada" + "'", str61, "Canada");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "1" + "'", str63, "1");
        org.junit.Assert.assertNotNull(property64);
// flaky:         org.junit.Assert.assertTrue("'" + int65 + "' != '" + 23 + "'", int65 == 23);
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[1970, 1, 1, 382]");
    }

    @Test
    public void test10415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10415");
        org.joda.time.tz.Provider provider0 = org.joda.time.DateTimeZone.getProvider();
        java.util.Set<java.lang.String> strSet1 = provider0.getAvailableIDs();
        java.util.Set<java.lang.String> strSet2 = provider0.getAvailableIDs();
        java.util.Set<java.lang.String> strSet3 = provider0.getAvailableIDs();
        java.util.Set<java.lang.String> strSet4 = provider0.getAvailableIDs();
        java.util.Set<java.lang.String> strSet5 = provider0.getAvailableIDs();
        org.joda.time.DateTimeZone.setProvider(provider0);
        org.joda.time.DateTimeZone dateTimeZone8 = provider0.getZone("26424712");
        org.joda.time.DateTimeZone dateTimeZone10 = provider0.getZone("2021-12-22T07:21:49.195-00:00:00.055");
        org.joda.time.DateTimeZone.setProvider(provider0);
        org.junit.Assert.assertNotNull(provider0);
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertNull(dateTimeZone8);
        org.junit.Assert.assertNull(dateTimeZone10);
    }

    @Test
    public void test10416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10416");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DurationField durationField3 = chronology2.hours();
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime(chronology2);
        org.joda.time.DateTimeField dateTimeField5 = chronology2.yearOfCentury();
        org.joda.time.DurationField durationField6 = chronology2.hours();
        java.lang.String str7 = durationField6.toString();
        long long9 = durationField6.getMillis(1645629621985L);
        org.joda.time.DurationFieldType durationFieldType10 = durationField6.getType();
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology14 = localDateTime13.getChronology();
        org.joda.time.DurationField durationField15 = chronology14.weekyears();
        boolean boolean16 = dateTimeFieldType11.isSupported(chronology14);
        org.joda.time.DateTimeField dateTimeField17 = chronology14.halfdayOfDay();
        org.joda.time.DurationField durationField18 = chronology14.weeks();
        long long19 = durationField18.getUnitMillis();
        long long22 = durationField18.subtract((-125970748895069L), 356);
        int int23 = durationField6.compareTo(durationField18);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "DurationField[hours]" + "'", str7, "DurationField[hours]");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 5924266639146000000L + "'", long9 == 5924266639146000000L);
        org.junit.Assert.assertNotNull(durationFieldType10);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 604800000L + "'", long19 == 604800000L);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-126186057695069L) + "'", long22 == (-126186057695069L));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
    }

    @Test
    public void test10417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10417");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DurationField durationField3 = chronology2.hours();
        java.lang.String str4 = chronology2.toString();
        org.joda.time.DateTimeField dateTimeField5 = chronology2.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField6 = chronology2.era();
        org.joda.time.DurationField durationField7 = chronology2.hours();
        org.joda.time.DateTimeField dateTimeField8 = chronology2.clockhourOfDay();
        org.joda.time.DurationField durationField9 = chronology2.days();
        long long12 = durationField9.getMillis(52299, 1645629287L);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "ISOChronology[UTC]" + "'", str4, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 4518633600000L + "'", long12 == 4518633600000L);
    }

    @Test
    public void test10418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10418");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.addUnicodeLocaleAttribute("und");
        java.util.Locale.Builder builder3 = builder2.clear();
        java.util.Locale.Builder builder6 = builder2.setExtension('a', "26150748");
        java.util.Locale locale7 = builder2.build();
        java.util.Locale.Builder builder8 = builder2.clear();
        java.util.Locale locale9 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet10 = locale9.getUnicodeLocaleAttributes();
        java.lang.String str11 = locale9.toLanguageTag();
        java.lang.String str12 = locale9.getScript();
        java.util.Locale locale13 = java.util.Locale.US;
        java.lang.String str14 = locale9.getDisplayName(locale13);
        java.util.Locale.Builder builder15 = builder8.setLocale(locale9);
        java.util.Locale locale16 = locale9.stripExtensions();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "");
        org.junit.Assert.assertNotNull(strSet10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "und" + "'", str11, "und");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "");
    }

    @Test
    public void test10419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10419");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getShortName((long) (short) 10);
        long long4 = dateTimeZone0.convertUTCToLocal((long) ' ');
        java.lang.String str5 = dateTimeZone0.toString();
        java.lang.String str6 = dateTimeZone0.toString();
        boolean boolean7 = dateTimeZone0.isFixed();
        boolean boolean8 = dateTimeZone0.isFixed();
        java.lang.String str9 = dateTimeZone0.getID();
        boolean boolean10 = dateTimeZone0.isFixed();
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology14 = localDateTime13.getChronology();
        org.joda.time.DurationField durationField15 = chronology14.weekyears();
        org.joda.time.DurationField durationField16 = chronology14.seconds();
        org.joda.time.DurationField durationField17 = chronology14.seconds();
        org.joda.time.DateTimeField dateTimeField18 = chronology14.millisOfDay();
        org.joda.time.DateTimeField dateTimeField19 = chronology14.year();
        long long22 = dateTimeField19.set(1645629356968L, "26153260");
        java.util.Locale locale24 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale locale25 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet26 = locale25.getUnicodeLocaleAttributes();
        java.lang.String str27 = locale24.getDisplayCountry(locale25);
        java.lang.String str28 = locale25.getDisplayCountry();
        java.lang.String str29 = dateTimeField19.getAsShortText(1645629365489L, locale25);
        java.lang.String str30 = dateTimeZone0.getName(102L, locale25);
        boolean boolean32 = dateTimeZone0.isStandardOffset((-13516L));
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00" + "'", str2, "+00:00");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 32L + "'", long4 == 32L);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "UTC" + "'", str5, "UTC");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "UTC" + "'", str6, "UTC");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "UTC" + "'", str9, "UTC");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 825255007917356968L + "'", long22 == 825255007917356968L);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "");
        org.junit.Assert.assertNotNull(strSet26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "China" + "'", str27, "China");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "2022" + "'", str29, "2022");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "+00:00" + "'", str30, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
    }

    @Test
    public void test10420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10420");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.days();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology3 = localDateTime2.getChronology();
        org.joda.time.DurationField durationField4 = chronology3.hours();
        org.joda.time.DurationField durationField5 = durationFieldType0.getField(chronology3);
        org.joda.time.DateTimeField dateTimeField6 = chronology3.hourOfHalfday();
        long long8 = dateTimeField6.roundHalfEven((long) (short) 0);
        long long10 = dateTimeField6.remainder((long) 100);
        long long12 = dateTimeField6.remainder((-27427140000L));
        boolean boolean13 = dateTimeField6.isLenient();
        java.util.Locale.Builder builder15 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder17 = builder15.addUnicodeLocaleAttribute("und");
        java.util.Locale locale18 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale19 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str20 = locale18.getDisplayCountry(locale19);
        java.lang.String str21 = locale19.getDisplayName();
        java.util.Locale.Builder builder22 = builder17.setLocale(locale19);
        java.util.Locale.Builder builder24 = builder17.setScript("");
        java.util.Locale locale25 = builder17.build();
        java.lang.String str26 = dateTimeField6.getAsShortText(1645629362661L, locale25);
        boolean boolean28 = dateTimeField6.isLeap(1645629759173L);
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 100L + "'", long10 == 100L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1260000L + "'", long12 == 1260000L);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Canada" + "'", str20, "Canada");
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "fran\347ais (Canada)" + "'", str21, "fran\347ais (Canada)");
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "3" + "'", str26, "3");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test10421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10421");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(26149500L);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusSeconds(1439);
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str6 = dateTimeZone4.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime7 = org.joda.time.LocalDateTime.now(dateTimeZone4);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.millisOfDay();
        org.joda.time.DurationFieldType durationFieldType9 = org.joda.time.DurationFieldType.centuries();
        boolean boolean10 = localDateTime7.equals((java.lang.Object) durationFieldType9);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray11 = localDateTime7.getFieldTypes();
        java.lang.String str12 = localDateTime7.toString();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime7.plusMillis(22);
        org.joda.time.LocalDateTime.Property property15 = localDateTime7.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str18 = dateTimeZone16.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime19 = org.joda.time.LocalDateTime.now(dateTimeZone16);
        org.joda.time.LocalDateTime.Property property20 = localDateTime19.millisOfDay();
        java.lang.String str21 = property20.getName();
        int int22 = property20.getMaximumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = property20.getFieldType();
        int int24 = localDateTime7.indexOf(dateTimeFieldType23);
        org.joda.time.LocalDateTime.Property property25 = localDateTime7.weekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = property25.getFieldType();
        org.joda.time.Interval interval27 = property25.toInterval();
        boolean boolean28 = localDateTime1.equals((java.lang.Object) property25);
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology31 = localDateTime30.getChronology();
        org.joda.time.LocalDateTime localDateTime33 = localDateTime30.plusDays(3);
        int int34 = localDateTime1.compareTo((org.joda.time.ReadablePartial) localDateTime30);
        int int35 = localDateTime30.getYearOfEra();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00" + "'", str6, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(durationFieldType9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray11);
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "2022-02-22T07:23:33.712" + "'", str12, "2022-02-22T07:23:33.712");
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+00:00" + "'", str18, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "millisOfDay" + "'", str21, "millisOfDay");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 86399999 + "'", int22 == 86399999);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 3 + "'", int24 == 3);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1970 + "'", int35 == 1970);
    }

    @Test
    public void test10422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10422");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.millisOfDay();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime3.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime3.plusHours((int) ' ');
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.DateTime dateTime10 = localDateTime8.toDateTime(readableInstant9);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str13 = dateTimeZone11.getShortName((long) (short) 10);
        long long15 = dateTimeZone11.convertUTCToLocal((long) ' ');
        java.lang.String str16 = dateTimeZone11.toString();
        long long18 = dateTimeZone11.previousTransition(32L);
        long long21 = dateTimeZone11.convertLocalToUTC(97L, false);
        boolean boolean22 = dateTime10.equals((java.lang.Object) false);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str25 = dateTimeZone23.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime26 = org.joda.time.LocalDateTime.now(dateTimeZone23);
        org.joda.time.LocalDateTime.Property property27 = localDateTime26.millisOfDay();
        org.joda.time.LocalDateTime localDateTime29 = localDateTime26.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime26.plusHours((int) ' ');
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.DateTime dateTime33 = localDateTime31.toDateTime(readableInstant32);
        long long34 = dateTime33.getMillis();
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str37 = dateTimeZone35.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime38 = org.joda.time.LocalDateTime.now(dateTimeZone35);
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = localDateTime38.getFieldType((int) (short) 0);
        boolean boolean41 = dateTime33.isSupported(dateTimeFieldType40);
        boolean boolean42 = dateTime10.isAfter((org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.DateTimeZone dateTimeZone43 = dateTime33.getZone();
        java.util.TimeZone timeZone44 = dateTimeZone43.toTimeZone();
        java.lang.String str45 = timeZone44.getID();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00" + "'", str2, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+00:00" + "'", str13, "+00:00");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 32L + "'", long15 == 32L);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "UTC" + "'", str16, "UTC");
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 32L + "'", long18 == 32L);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 97L + "'", long21 == 97L);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "+00:00" + "'", str25, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
// flaky:         org.junit.Assert.assertTrue("'" + long34 + "' != '" + 1645629813728L + "'", long34 == 1645629813728L);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "+00:00" + "'", str37, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(dateTimeFieldType40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertNotNull(timeZone44);
// flaky:         org.junit.Assert.assertEquals(timeZone44.getDisplayName(), "Temps universel coordonn\351");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "UTC" + "'", str45, "UTC");
    }

    @Test
    public void test10423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10423");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getShortName((long) (short) 10);
        long long4 = dateTimeZone0.convertUTCToLocal((long) ' ');
        java.lang.String str5 = dateTimeZone0.toString();
        boolean boolean7 = dateTimeZone0.equals((java.lang.Object) (short) 100);
        java.util.Locale locale9 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str10 = dateTimeZone0.getShortName((long) (-1), locale9);
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime(dateTimeZone0);
        int int13 = dateTimeZone0.getOffset((long) (short) 10);
        boolean boolean14 = dateTimeZone0.isFixed();
        boolean boolean16 = dateTimeZone0.isStandardOffset((long) (byte) 1);
        java.util.TimeZone timeZone17 = dateTimeZone0.toTimeZone();
        java.lang.String str19 = dateTimeZone0.getName(1645629448686L);
        long long21 = dateTimeZone0.nextTransition(1645629369056L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00" + "'", str2, "+00:00");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 32L + "'", long4 == 32L);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "UTC" + "'", str5, "UTC");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+00:00" + "'", str10, "+00:00");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(timeZone17);
// flaky:         org.junit.Assert.assertEquals(timeZone17.getDisplayName(), "Temps universel coordonn\351");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "+00:00" + "'", str19, "+00:00");
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 1645629369056L + "'", long21 == 1645629369056L);
    }

    @Test
    public void test10424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10424");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(126, 125);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minutes out of range: 125");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test10425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10425");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.millisOfDay();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime3.withYear((int) (short) 100);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.minuteOfHour();
        int int8 = property7.get();
        org.joda.time.LocalDateTime localDateTime10 = property7.setCopy((int) (short) 10);
        org.joda.time.LocalDateTime.Property property11 = localDateTime10.minuteOfHour();
        org.joda.time.LocalDateTime.Property property12 = localDateTime10.weekyear();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str15 = dateTimeZone13.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime16 = org.joda.time.LocalDateTime.now(dateTimeZone13);
        org.joda.time.LocalDateTime.Property property17 = localDateTime16.millisOfDay();
        java.lang.String str18 = property17.getName();
        org.joda.time.LocalDateTime localDateTime19 = property17.roundHalfCeilingCopy();
        boolean boolean20 = property12.equals((java.lang.Object) localDateTime19);
        java.util.Locale.Builder builder22 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder24 = builder22.addUnicodeLocaleAttribute("und");
        java.util.Locale locale25 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale26 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str27 = locale25.getDisplayCountry(locale26);
        java.lang.String str28 = locale26.getDisplayName();
        java.util.Locale.Builder builder29 = builder24.setLocale(locale26);
        java.util.Locale.Builder builder31 = builder24.setScript("");
        java.util.Locale locale32 = builder24.build();
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology35 = localDateTime34.getChronology();
        org.joda.time.DateTimeField dateTimeField36 = chronology35.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField37 = chronology35.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField38 = chronology35.millisOfSecond();
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.DateTimeField dateTimeField42 = dateTimeFieldType40.getField(chronology41);
        long long44 = dateTimeField42.roundFloor((long) (-1));
        java.util.Locale.Builder builder45 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder47 = builder45.addUnicodeLocaleAttribute("und");
        java.util.Locale locale48 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale49 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str50 = locale48.getDisplayCountry(locale49);
        java.lang.String str51 = locale49.getDisplayName();
        java.util.Locale.Builder builder52 = builder47.setLocale(locale49);
        int int53 = dateTimeField42.getMaximumShortTextLength(locale49);
        java.lang.String str54 = dateTimeField38.getAsShortText((long) 'a', locale49);
        java.lang.String str55 = locale32.getDisplayLanguage(locale49);
        java.util.Set<java.lang.String> strSet56 = locale32.getUnicodeLocaleKeys();
        java.lang.String str57 = localDateTime19.toString("26287127", locale32);
        org.joda.time.LocalDateTime.Property property58 = localDateTime19.millisOfDay();
        int int59 = property58.getMinimumValue();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00" + "'", str2, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 23 + "'", int8 == 23);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+00:00" + "'", str15, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "millisOfDay" + "'", str18, "millisOfDay");
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Canada" + "'", str27, "Canada");
// flaky:         org.junit.Assert.assertEquals("'" + str28 + "' != '" + "fran\347ais (Canada)" + "'", str28, "fran\347ais (Canada)");
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeFieldType40);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + (-60000L) + "'", long44 == (-60000L));
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "Canada" + "'", str50, "Canada");
// flaky:         org.junit.Assert.assertEquals("'" + str51 + "' != '" + "fran\347ais (Canada)" + "'", str51, "fran\347ais (Canada)");
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 4 + "'", int53 == 4);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "97" + "'", str54, "97");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "fran\347ais" + "'", str55, "fran\347ais");
        org.junit.Assert.assertNotNull(strSet56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "26287127" + "'", str57, "26287127");
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
    }

    @Test
    public void test10426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10426");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.addUnicodeLocaleAttribute("und");
        java.util.Locale locale3 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale4 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str5 = locale3.getDisplayCountry(locale4);
        java.lang.String str6 = locale4.getDisplayName();
        java.util.Locale.Builder builder7 = builder2.setLocale(locale4);
        java.util.Locale.Builder builder8 = builder2.clearExtensions();
        java.util.Locale.Builder builder10 = builder2.removeUnicodeLocaleAttribute("26185191");
        java.util.Locale locale11 = java.util.Locale.ROOT;
        java.util.Locale.Builder builder12 = builder10.setLocale(locale11);
        java.util.Locale locale13 = builder12.build();
        java.util.Locale.Builder builder15 = builder12.removeUnicodeLocaleAttribute("26156413");
        java.util.Locale.Builder builder16 = builder15.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder18 = builder15.setRegion("26256054");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed region: 26256054 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Canada" + "'", str5, "Canada");
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "fran\347ais (Canada)" + "'", str6, "fran\347ais (Canada)");
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "");
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "");
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test10427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10427");
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.weekyears();
        org.joda.time.DurationField durationField6 = chronology4.centuries();
        org.joda.time.DurationField durationField7 = chronology4.minutes();
        org.joda.time.DateTimeField dateTimeField8 = chronology4.monthOfYear();
        org.joda.time.DateTimeField dateTimeField9 = chronology4.halfdayOfDay();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((long) 26163523, chronology4);
        org.joda.time.DurationField durationField11 = chronology4.days();
        org.joda.time.DateTimeField dateTimeField12 = chronology4.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime(1645629415330L, chronology4);
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime15 = property14.withMinimumValue();
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.LocalDateTime localDateTime18 = localDateTime15.withPeriodAdded(readablePeriod16, 187);
        org.joda.time.LocalDateTime.Property property19 = localDateTime15.secondOfMinute();
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(property19);
    }

    @Test
    public void test10428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10428");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DateTimeField dateTimeField3 = chronology2.dayOfYear();
        org.joda.time.DateTimeField dateTimeField4 = chronology2.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone5 = chronology2.getZone();
        java.util.TimeZone timeZone6 = dateTimeZone5.toTimeZone();
        int int7 = timeZone6.getRawOffset();
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(timeZone6);
// flaky:         org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "Temps universel coordonn\351");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
    }

    @Test
    public void test10429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10429");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str3 = dateTimeZone1.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.LocalDateTime.Property property5 = localDateTime4.millisOfDay();
        java.lang.String str6 = property5.getName();
        org.joda.time.LocalDateTime localDateTime7 = property5.roundHalfFloorCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        boolean boolean9 = localDateTime7.isSupported(dateTimeFieldType8);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str12 = dateTimeZone10.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime13 = org.joda.time.LocalDateTime.now(dateTimeZone10);
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.millisOfDay();
        org.joda.time.DurationFieldType durationFieldType15 = org.joda.time.DurationFieldType.centuries();
        boolean boolean16 = localDateTime13.equals((java.lang.Object) durationFieldType15);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray17 = localDateTime13.getFieldTypes();
        java.lang.String str18 = localDateTime13.toString();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime13.plusMillis(22);
        boolean boolean21 = localDateTime7.isBefore((org.joda.time.ReadablePartial) localDateTime20);
        org.joda.time.ReadableDuration readableDuration22 = null;
        org.joda.time.LocalDateTime localDateTime23 = localDateTime20.plus(readableDuration22);
        org.joda.time.LocalDateTime.Property property24 = localDateTime23.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime25 = property24.roundHalfEvenCopy();
        java.util.Locale locale26 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet27 = locale26.getUnicodeLocaleAttributes();
        java.util.Set<java.lang.String> strSet28 = locale26.getUnicodeLocaleAttributes();
        java.lang.String str29 = locale26.getVariant();
        java.util.Locale locale30 = locale26.stripExtensions();
        int int31 = property24.getMaximumTextLength(locale30);
        java.lang.String str32 = locale30.getISO3Country();
        org.joda.time.tz.NameProvider nameProvider33 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale34 = java.util.Locale.CANADA;
        java.lang.String str37 = nameProvider33.getShortName(locale34, "fran\347ais", "2022-02-22T07:15:48.066");
        java.util.Locale locale38 = locale34.stripExtensions();
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str41 = dateTimeZone39.getShortName((long) (short) 10);
        long long43 = dateTimeZone39.convertUTCToLocal((long) ' ');
        java.util.Locale locale45 = java.util.Locale.ROOT;
        java.lang.String str46 = dateTimeZone39.getName((long) (short) 0, locale45);
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str49 = dateTimeZone47.getShortName((long) (short) 10);
        long long51 = dateTimeZone47.convertUTCToLocal((long) ' ');
        java.lang.String str52 = dateTimeZone47.toString();
        boolean boolean54 = dateTimeZone47.equals((java.lang.Object) (short) 100);
        java.util.Locale locale56 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str57 = dateTimeZone47.getShortName((long) (-1), locale56);
        java.lang.String str58 = locale45.getDisplayVariant(locale56);
        org.joda.time.tz.NameProvider nameProvider59 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale60 = java.util.Locale.CANADA;
        java.lang.String str63 = nameProvider59.getShortName(locale60, "fran\347ais", "2022-02-22T07:15:48.066");
        java.lang.String str64 = locale60.getLanguage();
        java.lang.String str65 = locale56.getDisplayLanguage(locale60);
        java.lang.String str66 = locale38.getDisplayLanguage(locale56);
        java.lang.String str67 = locale30.getDisplayName(locale38);
        java.util.Set<java.lang.String> strSet68 = locale38.getUnicodeLocaleKeys();
        org.joda.time.LocalDateTime localDateTime70 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology71 = localDateTime70.getChronology();
        org.joda.time.DurationField durationField72 = chronology71.weekyears();
        org.joda.time.DurationField durationField73 = chronology71.centuries();
        org.joda.time.DurationField durationField74 = chronology71.minutes();
        org.joda.time.DateTimeField dateTimeField75 = chronology71.monthOfYear();
        org.joda.time.DateTimeField dateTimeField76 = chronology71.dayOfYear();
        org.joda.time.DateTimeField dateTimeField77 = chronology71.secondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone79 = org.joda.time.DateTimeZone.forOffsetMillis((int) 'a');
        java.lang.String str81 = dateTimeZone79.getShortName((long) 86399999);
        org.joda.time.LocalDateTime localDateTime82 = new org.joda.time.LocalDateTime(dateTimeZone79);
        org.joda.time.Chronology chronology83 = chronology71.withZone(dateTimeZone79);
        boolean boolean84 = strSet68.equals((java.lang.Object) dateTimeZone79);
        org.joda.time.LocalDateTime localDateTime85 = new org.joda.time.LocalDateTime((java.lang.Object) "26598222", dateTimeZone79);
        org.joda.time.LocalDateTime localDateTime87 = localDateTime85.plusHours((-89377912));
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+00:00" + "'", str3, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "millisOfDay" + "'", str6, "millisOfDay");
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00" + "'", str12, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(durationFieldType15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray17);
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "2022-02-22T07:23:33.908" + "'", str18, "2022-02-22T07:23:33.908");
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "");
        org.junit.Assert.assertNotNull(strSet27);
        org.junit.Assert.assertNotNull(strSet28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2 + "'", int31 == 2);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(nameProvider33);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "en_CA");
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "en_CA");
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "+00:00" + "'", str41, "+00:00");
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 32L + "'", long43 == 32L);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "+00:00" + "'", str46, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "+00:00" + "'", str49, "+00:00");
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 32L + "'", long51 == 32L);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "UTC" + "'", str52, "UTC");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "+00:00" + "'", str57, "+00:00");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertNotNull(nameProvider59);
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "en_CA");
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "en" + "'", str64, "en");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "French" + "'", str65, "French");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "anglais" + "'", str66, "anglais");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertNotNull(strSet68);
        org.junit.Assert.assertNotNull(chronology71);
        org.junit.Assert.assertNotNull(durationField72);
        org.junit.Assert.assertNotNull(durationField73);
        org.junit.Assert.assertNotNull(durationField74);
        org.junit.Assert.assertNotNull(dateTimeField75);
        org.junit.Assert.assertNotNull(dateTimeField76);
        org.junit.Assert.assertNotNull(dateTimeField77);
        org.junit.Assert.assertNotNull(dateTimeZone79);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "+00:00:00.097" + "'", str81, "+00:00:00.097");
        org.junit.Assert.assertNotNull(chronology83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(localDateTime87);
    }

    @Test
    public void test10430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10430");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        java.lang.String str1 = localDateTime0.toString();
        org.joda.time.LocalDateTime localDateTime3 = localDateTime0.plusMonths((int) (short) -1);
        org.joda.time.LocalDateTime.Property property4 = localDateTime0.yearOfEra();
        org.joda.time.LocalDateTime localDateTime6 = property4.addToCopy(20);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str9 = dateTimeZone7.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime10 = org.joda.time.LocalDateTime.now(dateTimeZone7);
        org.joda.time.LocalDateTime.Property property11 = localDateTime10.millisOfDay();
        org.joda.time.DurationFieldType durationFieldType12 = org.joda.time.DurationFieldType.centuries();
        boolean boolean13 = localDateTime10.equals((java.lang.Object) durationFieldType12);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray14 = localDateTime10.getFieldTypes();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str17 = dateTimeZone15.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime18 = org.joda.time.LocalDateTime.now(dateTimeZone15);
        org.joda.time.LocalDateTime.Property property19 = localDateTime18.millisOfDay();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime18.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime18.plusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.minusHours((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.withEra((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property28 = localDateTime27.secondOfMinute();
        boolean boolean29 = localDateTime10.isAfter((org.joda.time.ReadablePartial) localDateTime27);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime10.withYear(32);
        boolean boolean32 = property4.equals((java.lang.Object) localDateTime31);
        java.lang.String str33 = property4.toString();
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "2022-02-22T07:23:33.944" + "'", str1, "2022-02-22T07:23:33.944");
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00" + "'", str9, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(durationFieldType12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+00:00" + "'", str17, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Property[yearOfEra]" + "'", str33, "Property[yearOfEra]");
    }

    @Test
    public void test10431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10431");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.millisOfDay();
        org.joda.time.DurationFieldType durationFieldType5 = org.joda.time.DurationFieldType.centuries();
        boolean boolean6 = localDateTime3.equals((java.lang.Object) durationFieldType5);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray7 = localDateTime3.getFieldTypes();
        java.lang.String str8 = localDateTime3.toString();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime3.plusMillis(22);
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTimeField dateTimeField13 = dateTimeFieldType11.getField(chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime3.withField(dateTimeFieldType11, 2);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray16 = localDateTime15.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime15.minusYears((-997));
        org.joda.time.DateTime dateTime19 = localDateTime15.toDateTime();
        java.lang.String str20 = dateTime19.toString();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00" + "'", str2, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(durationFieldType5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "2022-02-22T07:23:33.971" + "'", str8, "2022-02-22T07:23:33.971");
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(dateTime19);
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "2022-02-22T00:02:33.971Z" + "'", str20, "2022-02-22T00:02:33.971Z");
    }

    @Test
    public void test10432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10432");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) 'a');
        java.lang.String str3 = dateTimeZone1.getShortName((long) 86399999);
        java.util.TimeZone timeZone4 = dateTimeZone1.toTimeZone();
        java.lang.String str5 = timeZone4.getID();
        java.util.TimeZone timeZone7 = java.util.TimeZone.getTimeZone("0100-02-22T07:16:18.996");
        boolean boolean8 = timeZone4.hasSameRules(timeZone7);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str11 = dateTimeZone9.getShortName((long) (short) 10);
        long long13 = dateTimeZone9.convertUTCToLocal((long) ' ');
        java.lang.String str14 = dateTimeZone9.toString();
        long long17 = dateTimeZone9.adjustOffset((long) 'a', true);
        org.joda.time.ReadableInstant readableInstant18 = null;
        int int19 = dateTimeZone9.getOffset(readableInstant18);
        org.joda.time.LocalDateTime localDateTime20 = org.joda.time.LocalDateTime.now(dateTimeZone9);
        java.util.TimeZone timeZone21 = dateTimeZone9.toTimeZone();
        boolean boolean22 = timeZone7.hasSameRules(timeZone21);
        int int24 = timeZone7.getOffset(1645629656221L);
        int int25 = timeZone7.getRawOffset();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+00:00:00.097" + "'", str3, "+00:00:00.097");
        org.junit.Assert.assertNotNull(timeZone4);
        org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+00:00:00.097" + "'", str5, "+00:00:00.097");
        org.junit.Assert.assertNotNull(timeZone7);
// flaky:         org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "Heure de Greenwich");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+00:00" + "'", str11, "+00:00");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 32L + "'", long13 == 32L);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "UTC" + "'", str14, "UTC");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 97L + "'", long17 == 97L);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(timeZone21);
// flaky:         org.junit.Assert.assertEquals(timeZone21.getDisplayName(), "Temps universel coordonn\351");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
    }

    @Test
    public void test10433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10433");
        java.util.Locale locale0 = java.util.Locale.ROOT;
        java.util.Locale locale1 = java.util.Locale.GERMAN;
        java.util.Locale.setDefault(locale1);
        java.util.Locale locale3 = java.util.Locale.CANADA;
        boolean boolean4 = locale3.hasExtensions();
        java.lang.String str5 = locale1.getDisplayScript(locale3);
        java.util.Set<java.lang.String> strSet6 = locale3.getUnicodeLocaleAttributes();
        java.lang.String str7 = locale0.getDisplayLanguage(locale3);
        java.lang.String str8 = locale0.getDisplayLanguage();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "de");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_CA");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
    }

    @Test
    public void test10434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10434");
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology3 = localDateTime2.getChronology();
        org.joda.time.DurationField durationField4 = chronology3.weekyears();
        org.joda.time.DurationField durationField5 = chronology3.centuries();
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime((long) (byte) 0, chronology3);
        org.joda.time.DateTimeField dateTimeField7 = chronology3.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField8 = chronology3.clockhourOfHalfday();
        java.util.Locale locale10 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet11 = locale10.getUnicodeLocaleAttributes();
        java.util.Set<java.lang.String> strSet12 = locale10.getUnicodeLocaleAttributes();
        java.lang.String str13 = dateTimeField8.getAsShortText((int) (byte) 0, locale10);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str16 = dateTimeZone14.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime17 = org.joda.time.LocalDateTime.now(dateTimeZone14);
        org.joda.time.LocalDateTime.Property property18 = localDateTime17.millisOfDay();
        java.lang.String str19 = property18.getName();
        int int20 = property18.getMaximumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = property18.getFieldType();
        org.joda.time.LocalDateTime localDateTime22 = property18.roundFloorCopy();
        java.util.Locale locale23 = java.util.Locale.US;
        java.lang.String str24 = property18.getAsShortText(locale23);
        java.lang.String str25 = locale10.getDisplayScript(locale23);
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime();
        java.lang.String str27 = localDateTime26.toString();
        int int28 = localDateTime26.getCenturyOfEra();
        org.joda.time.LocalDateTime localDateTime30 = localDateTime26.minusMonths(2);
        org.joda.time.LocalDateTime.Property property31 = localDateTime30.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str34 = dateTimeZone32.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime35 = org.joda.time.LocalDateTime.now(dateTimeZone32);
        org.joda.time.LocalDateTime.Property property36 = localDateTime35.millisOfDay();
        org.joda.time.LocalDateTime localDateTime38 = localDateTime35.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime35.plusHours((int) ' ');
        org.joda.time.ReadableInstant readableInstant41 = null;
        org.joda.time.DateTime dateTime42 = localDateTime40.toDateTime(readableInstant41);
        long long43 = dateTime42.getMillis();
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str46 = dateTimeZone44.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime47 = org.joda.time.LocalDateTime.now(dateTimeZone44);
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = localDateTime47.getFieldType((int) (short) 0);
        boolean boolean50 = dateTime42.isSupported(dateTimeFieldType49);
        org.joda.time.DateTime dateTime51 = localDateTime30.toDateTime((org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str54 = dateTimeZone52.getShortName((long) (short) 10);
        long long56 = dateTimeZone52.convertUTCToLocal((long) ' ');
        java.lang.String str57 = dateTimeZone52.toString();
        long long60 = dateTimeZone52.adjustOffset((long) (short) 100, false);
        org.joda.time.LocalDateTime localDateTime61 = new org.joda.time.LocalDateTime((java.lang.Object) dateTime51, dateTimeZone52);
        org.joda.time.LocalDateTime localDateTime63 = localDateTime61.plusWeeks(26204);
        boolean boolean64 = locale23.equals((java.lang.Object) localDateTime61);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "");
        org.junit.Assert.assertNotNull(strSet11);
        org.junit.Assert.assertNotNull(strSet12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "0" + "'", str13, "0");
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+00:00" + "'", str16, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "millisOfDay" + "'", str19, "millisOfDay");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 86399999 + "'", int20 == 86399999);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "en_US");
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "26614002" + "'", str24, "26614002");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "2022-02-22T07:23:34.002" + "'", str27, "2022-02-22T07:23:34.002");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 20 + "'", int28 == 20);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "+00:00" + "'", str34, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
// flaky:         org.junit.Assert.assertTrue("'" + long43 + "' != '" + 1645629814002L + "'", long43 == 1645629814002L);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "+00:00" + "'", str46, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(dateTimeFieldType49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "+00:00" + "'", str54, "+00:00");
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 32L + "'", long56 == 32L);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "UTC" + "'", str57, "UTC");
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 100L + "'", long60 == 100L);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
    }

    @Test
    public void test10435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10435");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder2 = builder0.clear();
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str5 = dateTimeZone3.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime6 = org.joda.time.LocalDateTime.now(dateTimeZone3);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.millisOfDay();
        java.lang.String str8 = property7.getName();
        org.joda.time.LocalDateTime localDateTime9 = property7.roundHalfFloorCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        boolean boolean11 = localDateTime9.isSupported(dateTimeFieldType10);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str14 = dateTimeZone12.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime15 = org.joda.time.LocalDateTime.now(dateTimeZone12);
        org.joda.time.LocalDateTime.Property property16 = localDateTime15.millisOfDay();
        org.joda.time.DurationFieldType durationFieldType17 = org.joda.time.DurationFieldType.centuries();
        boolean boolean18 = localDateTime15.equals((java.lang.Object) durationFieldType17);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray19 = localDateTime15.getFieldTypes();
        java.lang.String str20 = localDateTime15.toString();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime15.plusMillis(22);
        boolean boolean23 = localDateTime9.isBefore((org.joda.time.ReadablePartial) localDateTime22);
        org.joda.time.ReadableDuration readableDuration24 = null;
        org.joda.time.LocalDateTime localDateTime25 = localDateTime22.plus(readableDuration24);
        org.joda.time.LocalDateTime.Property property26 = localDateTime25.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime27 = property26.roundHalfEvenCopy();
        java.util.Locale locale28 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet29 = locale28.getUnicodeLocaleAttributes();
        java.util.Set<java.lang.String> strSet30 = locale28.getUnicodeLocaleAttributes();
        java.lang.String str31 = locale28.getVariant();
        java.util.Locale locale32 = locale28.stripExtensions();
        int int33 = property26.getMaximumTextLength(locale32);
        java.util.Locale.Builder builder34 = builder0.setLocale(locale32);
        java.util.Locale.Builder builder35 = builder34.clear();
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology39 = localDateTime38.getChronology();
        org.joda.time.DurationField durationField40 = chronology39.weekyears();
        boolean boolean41 = dateTimeFieldType36.isSupported(chronology39);
        org.joda.time.DateTimeField dateTimeField42 = chronology39.halfdayOfDay();
        org.joda.time.DurationField durationField43 = chronology39.millis();
        org.joda.time.DateTimeZone dateTimeZone44 = chronology39.getZone();
        java.util.Locale locale48 = new java.util.Locale("fra", "fran\347ais (Canada)");
        java.lang.String str50 = locale48.getExtension('u');
        java.lang.String str51 = dateTimeZone44.getShortName((long) 805, locale48);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder52 = builder34.setLocale(locale48);
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed region: FRANc?AIS (CANADA) [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+00:00" + "'", str5, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "millisOfDay" + "'", str8, "millisOfDay");
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+00:00" + "'", str14, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(durationFieldType17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray19);
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "2022-02-22T07:23:34.034" + "'", str20, "2022-02-22T07:23:34.034");
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "");
        org.junit.Assert.assertNotNull(strSet29);
        org.junit.Assert.assertNotNull(strSet30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2 + "'", int33 == 2);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(durationField40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(durationField43);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertEquals(locale48.toString(), "fra_FRAN\347AIS (CANADA)");
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "+00:00" + "'", str51, "+00:00");
    }

    @Test
    public void test10436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10436");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeField dateTimeField2 = dateTimeFieldType0.getField(chronology1);
        long long4 = dateTimeField2.roundFloor((long) (-1));
        org.joda.time.DurationField durationField5 = dateTimeField2.getDurationField();
        java.lang.String str7 = dateTimeField2.getAsText(0L);
        long long9 = dateTimeField2.roundHalfCeiling(1645629364123L);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str12 = dateTimeZone10.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime13 = org.joda.time.LocalDateTime.now(dateTimeZone10);
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.millisOfDay();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime13.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime13.plusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.minusHours((int) (short) 10);
        int int21 = localDateTime18.getMinuteOfHour();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime18.minusMinutes(0);
        org.joda.time.DurationFieldType durationFieldType24 = org.joda.time.DurationFieldType.weekyears();
        java.lang.String str25 = durationFieldType24.toString();
        org.joda.time.DurationFieldType durationFieldType26 = org.joda.time.DurationFieldType.millis();
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology29 = localDateTime28.getChronology();
        org.joda.time.DurationField durationField30 = chronology29.weekyears();
        org.joda.time.DurationField durationField31 = chronology29.centuries();
        org.joda.time.DurationField durationField32 = durationFieldType26.getField(chronology29);
        boolean boolean33 = durationFieldType24.isSupported(chronology29);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime18.withFieldAdded(durationFieldType24, (-1));
        int int36 = dateTimeField2.getMinimumValue((org.joda.time.ReadablePartial) localDateTime18);
        java.util.Date date37 = localDateTime18.toDate();
        org.joda.time.LocalDateTime localDateTime38 = org.joda.time.LocalDateTime.fromDateFields(date37);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60000L) + "'", long4 == (-60000L));
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "0" + "'", str7, "0");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1645629360000L + "'", long9 == 1645629360000L);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00" + "'", str12, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
// flaky:         org.junit.Assert.assertTrue("'" + int21 + "' != '" + 23 + "'", int21 == 23);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(durationFieldType24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "weekyears" + "'", str25, "weekyears");
        org.junit.Assert.assertNotNull(durationFieldType26);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(date37);
// flaky:         org.junit.Assert.assertEquals(date37.toString(), "Wed Feb 23 15:23:35 GMT+00:00 2022");
        org.junit.Assert.assertNotNull(localDateTime38);
    }

    @Test
    public void test10437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10437");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology3 = localDateTime2.getChronology();
        org.joda.time.DurationField durationField4 = chronology3.weekyears();
        boolean boolean5 = dateTimeFieldType0.isSupported(chronology3);
        org.joda.time.DateTimeField dateTimeField6 = chronology3.halfdayOfDay();
        org.joda.time.DurationField durationField7 = chronology3.weeks();
        org.joda.time.DateTimeField dateTimeField8 = chronology3.halfdayOfDay();
        org.joda.time.DurationField durationField9 = chronology3.years();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str12 = dateTimeZone10.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime13 = org.joda.time.LocalDateTime.now(dateTimeZone10);
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.millisOfDay();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime13.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime13.plusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.minusHours((int) (short) 10);
        int int21 = localDateTime18.getMinuteOfHour();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime18.minusMinutes(0);
        org.joda.time.DurationFieldType durationFieldType24 = org.joda.time.DurationFieldType.weekyears();
        java.lang.String str25 = durationFieldType24.toString();
        org.joda.time.DurationFieldType durationFieldType26 = org.joda.time.DurationFieldType.millis();
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology29 = localDateTime28.getChronology();
        org.joda.time.DurationField durationField30 = chronology29.weekyears();
        org.joda.time.DurationField durationField31 = chronology29.centuries();
        org.joda.time.DurationField durationField32 = durationFieldType26.getField(chronology29);
        boolean boolean33 = durationFieldType24.isSupported(chronology29);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime18.withFieldAdded(durationFieldType24, (-1));
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology38 = localDateTime37.getChronology();
        org.joda.time.DateTimeField dateTimeField39 = chronology38.dayOfYear();
        org.joda.time.DateTimeField dateTimeField40 = chronology38.weekOfWeekyear();
        boolean boolean41 = durationFieldType24.isSupported(chronology38);
        org.joda.time.DurationField durationField42 = chronology38.minutes();
        org.joda.time.DurationField durationField43 = chronology38.months();
        org.joda.time.DateTimeField dateTimeField44 = chronology38.dayOfMonth();
        org.joda.time.DurationField durationField45 = dateTimeField44.getDurationField();
        int int48 = durationField45.getDifference(1908343223162L, (-31L));
        int int49 = durationField9.compareTo(durationField45);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00" + "'", str12, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
// flaky:         org.junit.Assert.assertTrue("'" + int21 + "' != '" + 23 + "'", int21 == 23);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(durationFieldType24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "weekyears" + "'", str25, "weekyears");
        org.junit.Assert.assertNotNull(durationFieldType26);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertNotNull(durationField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(durationField45);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 22087 + "'", int48 == 22087);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
    }

    @Test
    public void test10438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10438");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.millisOfDay();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime3.withYear((int) (short) 100);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime6.minusMonths(2022);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.withMinuteOfHour((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime9.plusHours(500);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime9.minusMinutes(26239);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.minusYears(26312059);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime19 = localDateTime17.withHourOfDay((-236));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -236 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00" + "'", str2, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
    }

    @Test
    public void test10439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10439");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str4 = dateTimeZone2.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime5 = org.joda.time.LocalDateTime.now(dateTimeZone2);
        org.joda.time.LocalDateTime.Property property6 = localDateTime5.millisOfDay();
        org.joda.time.ReadableInstant readableInstant7 = null;
        long long8 = property6.getDifferenceAsLong(readableInstant7);
        java.util.Locale locale9 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str10 = locale9.getISO3Language();
        java.lang.String str11 = property6.getAsShortText(locale9);
        org.joda.time.DurationField durationField12 = property6.getDurationField();
        long long15 = durationField12.add((long) 1, 10);
        boolean boolean16 = durationField12.isPrecise();
        int int18 = durationField12.getValue((long) 26149500);
        int int21 = durationField12.getValue((long) (short) 10, 0L);
        long long24 = durationField12.add((long) 'a', (long) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType25 = durationField12.getType();
        org.joda.time.DurationFieldType durationFieldType26 = org.joda.time.DurationFieldType.days();
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology29 = localDateTime28.getChronology();
        org.joda.time.DurationField durationField30 = chronology29.hours();
        org.joda.time.DurationField durationField31 = durationFieldType26.getField(chronology29);
        org.joda.time.DateTimeField dateTimeField32 = chronology29.hourOfHalfday();
        org.joda.time.DurationField durationField33 = chronology29.weeks();
        boolean boolean34 = durationFieldType25.isSupported(chronology29);
        org.joda.time.DateTimeField dateTimeField35 = chronology29.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone36 = chronology29.getZone();
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime(72000000L, chronology29);
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime(1645165247954L, chronology29);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00" + "'", str4, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "fra" + "'", str10, "fra");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "26614111" + "'", str11, "26614111");
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 11L + "'", long15 == 11L);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 26149500 + "'", int18 == 26149500);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 10 + "'", int21 == 10);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 197L + "'", long24 == 197L);
        org.junit.Assert.assertNotNull(durationFieldType25);
        org.junit.Assert.assertNotNull(durationFieldType26);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeZone36);
    }

    @Test
    public void test10440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10440");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        org.joda.time.LocalDateTime localDateTime3 = localDateTime0.withDurationAdded(readableDuration1, (int) '#');
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.withYear(0);
        org.joda.time.LocalDateTime.Property property6 = localDateTime5.year();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str9 = dateTimeZone7.getShortName((long) (short) 10);
        long long11 = dateTimeZone7.convertUTCToLocal((long) ' ');
        java.lang.String str12 = dateTimeZone7.toString();
        long long14 = dateTimeZone7.previousTransition(32L);
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime(dateTimeZone7);
        org.joda.time.LocalDateTime localDateTime16 = org.joda.time.LocalDateTime.now(dateTimeZone7);
        boolean boolean17 = dateTimeZone7.isFixed();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str21 = dateTimeZone19.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime22 = org.joda.time.LocalDateTime.now(dateTimeZone19);
        org.joda.time.LocalDateTime.Property property23 = localDateTime22.millisOfDay();
        java.lang.String str24 = property23.getName();
        org.joda.time.LocalDateTime localDateTime25 = property23.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.minusYears(7);
        int int28 = localDateTime27.getEra();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str31 = dateTimeZone29.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime32 = org.joda.time.LocalDateTime.now(dateTimeZone29);
        org.joda.time.LocalDateTime.Property property33 = localDateTime32.millisOfDay();
        org.joda.time.DurationFieldType durationFieldType34 = org.joda.time.DurationFieldType.centuries();
        boolean boolean35 = localDateTime32.equals((java.lang.Object) durationFieldType34);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray36 = localDateTime32.getFieldTypes();
        java.lang.String str37 = localDateTime32.toString();
        org.joda.time.LocalDateTime localDateTime39 = localDateTime32.plusMillis(22);
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.DateTimeField dateTimeField42 = dateTimeFieldType40.getField(chronology41);
        org.joda.time.LocalDateTime localDateTime44 = localDateTime32.withField(dateTimeFieldType40, 2);
        org.joda.time.LocalDateTime localDateTime46 = localDateTime27.withField(dateTimeFieldType40, 0);
        org.joda.time.LocalDateTime.Property property47 = localDateTime46.year();
        java.lang.String str48 = property47.toString();
        java.util.Locale.Builder builder49 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder51 = builder49.addUnicodeLocaleAttribute("und");
        java.util.Locale locale52 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale53 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str54 = locale52.getDisplayCountry(locale53);
        java.lang.String str55 = locale53.getDisplayName();
        java.util.Locale.Builder builder56 = builder51.setLocale(locale53);
        java.util.Locale.Builder builder58 = builder51.setScript("");
        java.util.Locale locale59 = builder51.build();
        org.joda.time.LocalDateTime localDateTime61 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology62 = localDateTime61.getChronology();
        org.joda.time.DateTimeField dateTimeField63 = chronology62.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField64 = chronology62.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField65 = chronology62.millisOfSecond();
        org.joda.time.DateTimeFieldType dateTimeFieldType67 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.DateTimeField dateTimeField69 = dateTimeFieldType67.getField(chronology68);
        long long71 = dateTimeField69.roundFloor((long) (-1));
        java.util.Locale.Builder builder72 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder74 = builder72.addUnicodeLocaleAttribute("und");
        java.util.Locale locale75 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale76 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str77 = locale75.getDisplayCountry(locale76);
        java.lang.String str78 = locale76.getDisplayName();
        java.util.Locale.Builder builder79 = builder74.setLocale(locale76);
        int int80 = dateTimeField69.getMaximumShortTextLength(locale76);
        java.lang.String str81 = dateTimeField65.getAsShortText((long) 'a', locale76);
        java.lang.String str82 = locale59.getDisplayLanguage(locale76);
        java.util.Set<java.lang.String> strSet83 = locale59.getUnicodeLocaleKeys();
        java.lang.String str84 = property47.getAsShortText(locale59);
        java.lang.String str85 = dateTimeZone7.getName(1645629393805L, locale59);
        java.util.Locale.setDefault(locale59);
        int int87 = property6.getMaximumShortTextLength(locale59);
        java.lang.Object obj88 = locale59.clone();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00" + "'", str9, "+00:00");
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 32L + "'", long11 == 32L);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "UTC" + "'", str12, "UTC");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 32L + "'", long14 == 32L);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "+00:00" + "'", str21, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "millisOfDay" + "'", str24, "millisOfDay");
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "+00:00" + "'", str31, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(durationFieldType34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray36);
// flaky:         org.junit.Assert.assertEquals("'" + str37 + "' != '" + "2022-02-22T07:23:34.129" + "'", str37, "2022-02-22T07:23:34.129");
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(dateTimeFieldType40);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "Property[year]" + "'", str48, "Property[year]");
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "Canada" + "'", str54, "Canada");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "Franz\366sisch (Kanada)" + "'", str55, "Franz\366sisch (Kanada)");
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertNotNull(dateTimeFieldType67);
        org.junit.Assert.assertNotNull(dateTimeField69);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + (-60000L) + "'", long71 == (-60000L));
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(locale75);
        org.junit.Assert.assertEquals(locale75.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale76);
        org.junit.Assert.assertEquals(locale76.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "Canada" + "'", str77, "Canada");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "Franz\366sisch (Kanada)" + "'", str78, "Franz\366sisch (Kanada)");
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 4 + "'", int80 == 4);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "97" + "'", str81, "97");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "fran\347ais" + "'", str82, "fran\347ais");
        org.junit.Assert.assertNotNull(strSet83);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "2015" + "'", str84, "2015");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "+00:00" + "'", str85, "+00:00");
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 9 + "'", int87 == 9);
        org.junit.Assert.assertNotNull(obj88);
        org.junit.Assert.assertEquals(obj88.toString(), "fr_CA");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj88), "fr_CA");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj88), "fr_CA");
    }

    @Test
    public void test10441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10441");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("26243926");
        timeZone1.setRawOffset(67);
        java.time.ZoneId zoneId4 = timeZone1.toZoneId();
        java.util.TimeZone timeZone6 = java.util.TimeZone.getTimeZone("26202156");
        timeZone6.setRawOffset(242);
        boolean boolean9 = timeZone6.observesDaylightTime();
        boolean boolean10 = timeZone1.hasSameRules(timeZone6);
        java.time.ZoneId zoneId11 = timeZone1.toZoneId();
        java.lang.String str12 = timeZone1.getID();
        java.lang.String str13 = timeZone1.getID();
        java.util.Locale.Category category14 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale15 = java.util.Locale.FRENCH;
        java.util.Locale.setDefault(category14, locale15);
        java.util.Locale.Builder builder17 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder19 = builder17.addUnicodeLocaleAttribute("und");
        java.util.Locale locale20 = builder19.build();
        java.util.Locale.setDefault(category14, locale20);
        java.util.Locale locale22 = java.util.Locale.getDefault(category14);
        java.util.Locale locale23 = java.util.Locale.getDefault(category14);
        java.util.Locale locale24 = java.util.Locale.getDefault(category14);
        java.util.Locale locale25 = java.util.Locale.getDefault(category14);
        java.lang.String str26 = timeZone1.getDisplayName(locale25);
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(zoneId4);
        org.junit.Assert.assertNotNull(timeZone6);
        org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(zoneId11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "GMT" + "'", str12, "GMT");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "GMT" + "'", str13, "GMT");
        org.junit.Assert.assertTrue("'" + category14 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category14.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "fr");
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Greenwich Mean Time" + "'", str26, "Greenwich Mean Time");
    }

    @Test
    public void test10442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10442");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        org.joda.time.LocalDateTime localDateTime3 = localDateTime0.withDurationAdded(readableDuration1, (int) '#');
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.weekyear();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime3.minusMillis((-1));
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str9 = dateTimeZone7.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime10 = org.joda.time.LocalDateTime.now(dateTimeZone7);
        org.joda.time.LocalDateTime.Property property11 = localDateTime10.millisOfDay();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime10.withYear((int) (short) 100);
        java.lang.String str14 = localDateTime13.toString();
        boolean boolean15 = localDateTime3.isAfter((org.joda.time.ReadablePartial) localDateTime13);
        java.util.Locale locale16 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet17 = locale16.getUnicodeLocaleAttributes();
        java.lang.Object[] objArray18 = strSet17.toArray();
        boolean boolean19 = strSet17.isEmpty();
        java.util.Locale locale20 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet21 = locale20.getUnicodeLocaleAttributes();
        java.lang.Object[] objArray22 = strSet21.toArray();
        java.util.Locale locale23 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet24 = locale23.getUnicodeLocaleAttributes();
        boolean boolean25 = strSet21.removeAll((java.util.Collection<java.lang.String>) strSet24);
        java.util.Locale locale26 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet27 = locale26.getUnicodeLocaleAttributes();
        org.joda.time.DurationFieldType durationFieldType28 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.DurationFieldType durationFieldType29 = org.joda.time.DurationFieldType.hours();
        org.joda.time.DurationFieldType[] durationFieldTypeArray30 = new org.joda.time.DurationFieldType[] { durationFieldType28, durationFieldType29 };
        org.joda.time.DurationFieldType[] durationFieldTypeArray31 = strSet27.toArray(durationFieldTypeArray30);
        boolean boolean32 = strSet21.containsAll((java.util.Collection<java.lang.String>) strSet27);
        java.lang.Object[] objArray33 = strSet27.toArray();
        boolean boolean34 = strSet17.removeAll((java.util.Collection<java.lang.String>) strSet27);
        java.util.Locale locale35 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet36 = locale35.getUnicodeLocaleAttributes();
        java.lang.Object[] objArray37 = strSet36.toArray();
        java.util.Locale locale38 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet39 = locale38.getUnicodeLocaleAttributes();
        boolean boolean40 = strSet36.removeAll((java.util.Collection<java.lang.String>) strSet39);
        java.util.Locale locale41 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet42 = locale41.getUnicodeLocaleAttributes();
        org.joda.time.DurationFieldType durationFieldType43 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.DurationFieldType durationFieldType44 = org.joda.time.DurationFieldType.hours();
        org.joda.time.DurationFieldType[] durationFieldTypeArray45 = new org.joda.time.DurationFieldType[] { durationFieldType43, durationFieldType44 };
        org.joda.time.DurationFieldType[] durationFieldTypeArray46 = strSet42.toArray(durationFieldTypeArray45);
        boolean boolean47 = strSet36.containsAll((java.util.Collection<java.lang.String>) strSet42);
        java.util.Locale locale48 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet49 = locale48.getUnicodeLocaleAttributes();
        java.lang.Object[] objArray50 = strSet49.toArray();
        java.util.Locale locale51 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet52 = locale51.getUnicodeLocaleAttributes();
        boolean boolean53 = strSet49.removeAll((java.util.Collection<java.lang.String>) strSet52);
        java.util.Locale locale54 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet55 = locale54.getUnicodeLocaleAttributes();
        org.joda.time.DurationFieldType durationFieldType56 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.DurationFieldType durationFieldType57 = org.joda.time.DurationFieldType.hours();
        org.joda.time.DurationFieldType[] durationFieldTypeArray58 = new org.joda.time.DurationFieldType[] { durationFieldType56, durationFieldType57 };
        org.joda.time.DurationFieldType[] durationFieldTypeArray59 = strSet55.toArray(durationFieldTypeArray58);
        boolean boolean60 = strSet49.containsAll((java.util.Collection<java.lang.String>) strSet55);
        java.lang.Object[] objArray61 = strSet55.toArray();
        boolean boolean62 = strSet36.retainAll((java.util.Collection<java.lang.String>) strSet55);
        boolean boolean63 = strSet27.addAll((java.util.Collection<java.lang.String>) strSet55);
        org.joda.time.DateTimeFieldType dateTimeFieldType64 = org.joda.time.DateTimeFieldType.yearOfEra();
        boolean boolean65 = strSet55.remove((java.lang.Object) dateTimeFieldType64);
        org.joda.time.LocalDateTime.Property property66 = localDateTime3.property(dateTimeFieldType64);
        org.joda.time.DurationFieldType durationFieldType67 = org.joda.time.DurationFieldType.millis();
        org.joda.time.LocalDateTime localDateTime69 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology70 = localDateTime69.getChronology();
        org.joda.time.DurationField durationField71 = chronology70.weekyears();
        org.joda.time.DurationField durationField72 = chronology70.centuries();
        org.joda.time.DurationField durationField73 = durationFieldType67.getField(chronology70);
        boolean boolean74 = dateTimeFieldType64.isSupported(chronology70);
        org.joda.time.DateTimeZone dateTimeZone75 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str77 = dateTimeZone75.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime78 = org.joda.time.LocalDateTime.now(dateTimeZone75);
        org.joda.time.LocalDateTime.Property property79 = localDateTime78.millisOfDay();
        org.joda.time.LocalDateTime localDateTime81 = localDateTime78.plusMonths((int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod82 = null;
        org.joda.time.LocalDateTime localDateTime83 = localDateTime81.plus(readablePeriod82);
        long long85 = chronology70.set((org.joda.time.ReadablePartial) localDateTime83, 864000010L);
        org.joda.time.DateTimeField dateTimeField86 = chronology70.weekyear();
        org.joda.time.DateTimeField dateTimeField87 = chronology70.minuteOfHour();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00" + "'", str9, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDateTime13);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "0100-02-22T07:23:34.172" + "'", str14, "0100-02-22T07:23:34.172");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "");
        org.junit.Assert.assertNotNull(strSet17);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "");
        org.junit.Assert.assertNotNull(strSet21);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[]");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "");
        org.junit.Assert.assertNotNull(strSet24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "");
        org.junit.Assert.assertNotNull(strSet27);
        org.junit.Assert.assertNotNull(durationFieldType28);
        org.junit.Assert.assertNotNull(durationFieldType29);
        org.junit.Assert.assertNotNull(durationFieldTypeArray30);
        org.junit.Assert.assertNotNull(durationFieldTypeArray31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "");
        org.junit.Assert.assertNotNull(strSet36);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[]");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "");
        org.junit.Assert.assertNotNull(strSet39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "");
        org.junit.Assert.assertNotNull(strSet42);
        org.junit.Assert.assertNotNull(durationFieldType43);
        org.junit.Assert.assertNotNull(durationFieldType44);
        org.junit.Assert.assertNotNull(durationFieldTypeArray45);
        org.junit.Assert.assertNotNull(durationFieldTypeArray46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "");
        org.junit.Assert.assertNotNull(strSet49);
        org.junit.Assert.assertNotNull(objArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[]");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "");
        org.junit.Assert.assertNotNull(strSet52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "");
        org.junit.Assert.assertNotNull(strSet55);
        org.junit.Assert.assertNotNull(durationFieldType56);
        org.junit.Assert.assertNotNull(durationFieldType57);
        org.junit.Assert.assertNotNull(durationFieldTypeArray58);
        org.junit.Assert.assertNotNull(durationFieldTypeArray59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(objArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray61), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray61), "[]");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertNotNull(durationFieldType67);
        org.junit.Assert.assertNotNull(chronology70);
        org.junit.Assert.assertNotNull(durationField71);
        org.junit.Assert.assertNotNull(durationField72);
        org.junit.Assert.assertNotNull(durationField73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(dateTimeZone75);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "+00:00" + "'", str77, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime78);
        org.junit.Assert.assertNotNull(property79);
        org.junit.Assert.assertNotNull(localDateTime81);
        org.junit.Assert.assertNotNull(localDateTime83);
// flaky:         org.junit.Assert.assertTrue("'" + long85 + "' != '" + 1908343414173L + "'", long85 == 1908343414173L);
        org.junit.Assert.assertNotNull(dateTimeField86);
        org.junit.Assert.assertNotNull(dateTimeField87);
    }

    @Test
    public void test10443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10443");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DurationField durationField3 = chronology2.weekyears();
        org.joda.time.DurationField durationField4 = chronology2.centuries();
        org.joda.time.DurationField durationField5 = chronology2.hours();
        org.joda.time.Chronology chronology6 = chronology2.withUTC();
        org.joda.time.DateTimeField dateTimeField7 = chronology2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField8 = chronology2.clockhourOfDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime((java.lang.Object) dateTimeField8);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: org.joda.time.field.ZeroIsMaxDateTimeField");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
    }

    @Test
    public void test10444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10444");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getShortName((long) (short) 10);
        long long4 = dateTimeZone0.convertUTCToLocal((long) ' ');
        java.lang.String str5 = dateTimeZone0.toString();
        boolean boolean7 = dateTimeZone0.equals((java.lang.Object) (short) 100);
        long long10 = dateTimeZone0.adjustOffset((long) 2022, true);
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology13 = localDateTime12.getChronology();
        org.joda.time.DurationField durationField14 = chronology13.weekyears();
        org.joda.time.DurationField durationField15 = chronology13.centuries();
        org.joda.time.DurationField durationField16 = chronology13.minutes();
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime(chronology13);
        org.joda.time.DateTimeField dateTimeField18 = chronology13.millisOfDay();
        org.joda.time.DurationField durationField19 = chronology13.centuries();
        boolean boolean20 = dateTimeZone0.equals((java.lang.Object) chronology13);
        org.joda.time.DateTimeZone dateTimeZone21 = chronology13.getZone();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00" + "'", str2, "+00:00");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 32L + "'", long4 == 32L);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "UTC" + "'", str5, "UTC");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 2022L + "'", long10 == 2022L);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(dateTimeZone21);
    }

    @Test
    public void test10445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10445");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        org.joda.time.LocalDateTime localDateTime3 = localDateTime0.withDurationAdded(readableDuration1, (int) '#');
        org.joda.time.LocalDateTime.Property property4 = localDateTime0.era();
        int int5 = localDateTime0.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime0.withWeekOfWeekyear((int) (byte) 1);
        int int8 = localDateTime0.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime0.plusDays(500);
        org.joda.time.DurationFieldType durationFieldType11 = org.joda.time.DurationFieldType.days();
        java.lang.String str12 = durationFieldType11.toString();
        boolean boolean13 = localDateTime10.isSupported(durationFieldType11);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology17 = localDateTime16.getChronology();
        org.joda.time.DurationField durationField18 = chronology17.weekyears();
        boolean boolean19 = dateTimeFieldType14.isSupported(chronology17);
        org.joda.time.DurationField durationField20 = durationFieldType11.getField(chronology17);
        org.joda.time.DateTimeField dateTimeField21 = chronology17.yearOfEra();
        org.joda.time.DurationField durationField22 = chronology17.months();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 22 + "'", int5 == 22);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 7 + "'", int8 == 7);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(durationFieldType11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "days" + "'", str12, "days");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(durationField22);
    }

    @Test
    public void test10446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10446");
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology3 = localDateTime2.getChronology();
        org.joda.time.DurationField durationField4 = chronology3.weekyears();
        org.joda.time.DurationField durationField5 = chronology3.centuries();
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime((long) (byte) 0, chronology3);
        org.joda.time.DurationField durationField7 = chronology3.months();
        int int10 = durationField7.getValue(1645629441286L, 1645629360208L);
        long long13 = durationField7.add(1645629374258L, 673);
        boolean boolean14 = durationField7.isPrecise();
        boolean boolean15 = durationField7.isSupported();
        long long18 = durationField7.subtract((long) 11000, 356);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 625 + "'", int10 == 625);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 3415274174258L + "'", long13 == 3415274174258L);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-936316789000L) + "'", long18 == (-936316789000L));
    }

    @Test
    public void test10447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10447");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DurationField durationField3 = chronology2.hours();
        java.lang.String str4 = chronology2.toString();
        org.joda.time.DateTimeField dateTimeField5 = chronology2.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField6 = chronology2.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime();
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.LocalDateTime localDateTime10 = localDateTime7.withDurationAdded(readableDuration8, (int) '#');
        org.joda.time.LocalDateTime.Property property11 = localDateTime10.weekyear();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime10.minusMillis((-1));
        org.joda.time.LocalDateTime.Property property14 = localDateTime10.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime15 = property14.roundHalfFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str18 = dateTimeZone16.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime19 = org.joda.time.LocalDateTime.now(dateTimeZone16);
        org.joda.time.LocalDateTime.Property property20 = localDateTime19.millisOfDay();
        org.joda.time.DurationFieldType durationFieldType21 = org.joda.time.DurationFieldType.centuries();
        boolean boolean22 = localDateTime19.equals((java.lang.Object) durationFieldType21);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray23 = localDateTime19.getFieldTypes();
        java.lang.String str24 = localDateTime19.toString();
        org.joda.time.LocalDateTime localDateTime26 = localDateTime19.plusMillis(22);
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.secondOfDay();
        boolean boolean28 = localDateTime19.isSupported(dateTimeFieldType27);
        int int29 = localDateTime15.indexOf(dateTimeFieldType27);
        int[] intArray31 = chronology2.get((org.joda.time.ReadablePartial) localDateTime15, 1645629358650L);
        org.joda.time.DurationField durationField32 = chronology2.millis();
        org.joda.time.DurationField durationField33 = chronology2.halfdays();
        org.joda.time.LocalDateTime localDateTime34 = org.joda.time.LocalDateTime.now(chronology2);
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology37 = localDateTime36.getChronology();
        org.joda.time.DurationField durationField38 = chronology37.hours();
        java.lang.String str39 = chronology37.toString();
        org.joda.time.DateTimeField dateTimeField40 = chronology37.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField41 = chronology37.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime42 = new org.joda.time.LocalDateTime();
        org.joda.time.ReadableDuration readableDuration43 = null;
        org.joda.time.LocalDateTime localDateTime45 = localDateTime42.withDurationAdded(readableDuration43, (int) '#');
        org.joda.time.LocalDateTime.Property property46 = localDateTime45.weekyear();
        org.joda.time.LocalDateTime localDateTime48 = localDateTime45.minusMillis((-1));
        org.joda.time.LocalDateTime.Property property49 = localDateTime45.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime50 = property49.roundHalfFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str53 = dateTimeZone51.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime54 = org.joda.time.LocalDateTime.now(dateTimeZone51);
        org.joda.time.LocalDateTime.Property property55 = localDateTime54.millisOfDay();
        org.joda.time.DurationFieldType durationFieldType56 = org.joda.time.DurationFieldType.centuries();
        boolean boolean57 = localDateTime54.equals((java.lang.Object) durationFieldType56);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray58 = localDateTime54.getFieldTypes();
        java.lang.String str59 = localDateTime54.toString();
        org.joda.time.LocalDateTime localDateTime61 = localDateTime54.plusMillis(22);
        org.joda.time.DateTimeFieldType dateTimeFieldType62 = org.joda.time.DateTimeFieldType.secondOfDay();
        boolean boolean63 = localDateTime54.isSupported(dateTimeFieldType62);
        int int64 = localDateTime50.indexOf(dateTimeFieldType62);
        int[] intArray66 = chronology37.get((org.joda.time.ReadablePartial) localDateTime50, 1645629358650L);
        org.joda.time.LocalDateTime localDateTime68 = localDateTime50.plusWeeks(26149500);
        org.joda.time.LocalDateTime.Property property69 = localDateTime68.dayOfMonth();
        long long71 = chronology2.set((org.joda.time.ReadablePartial) localDateTime68, 1645629456271L);
        java.util.Date date72 = localDateTime68.toDate();
        org.joda.time.LocalDateTime localDateTime75 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology76 = localDateTime75.getChronology();
        org.joda.time.DurationField durationField77 = chronology76.weekyears();
        org.joda.time.DurationField durationField78 = chronology76.centuries();
        org.joda.time.LocalDateTime localDateTime79 = new org.joda.time.LocalDateTime((long) (byte) 0, chronology76);
        org.joda.time.DateTimeField dateTimeField80 = chronology76.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField81 = chronology76.clockhourOfHalfday();
        org.joda.time.LocalDateTime localDateTime83 = new org.joda.time.LocalDateTime(100L);
        org.joda.time.LocalDateTime localDateTime85 = localDateTime83.plusDays(0);
        long long87 = chronology76.set((org.joda.time.ReadablePartial) localDateTime85, (long) 24);
        org.joda.time.DateTimeField dateTimeField88 = chronology76.centuryOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType89 = dateTimeField88.getType();
        org.joda.time.LocalDateTime.Property property90 = localDateTime68.property(dateTimeFieldType89);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime92 = localDateTime68.withMonthOfYear(921);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 921 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "ISOChronology[UTC]" + "'", str4, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+00:00" + "'", str18, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(durationFieldType21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray23);
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "2022-02-22T07:23:34.315" + "'", str24, "2022-02-22T07:23:34.315");
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[2022, 2, 23, 54958650]");
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "ISOChronology[UTC]" + "'", str39, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "+00:00" + "'", str53, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(durationFieldType56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray58);
// flaky:         org.junit.Assert.assertEquals("'" + str59 + "' != '" + "2022-02-22T07:23:34.315" + "'", str59, "2022-02-22T07:23:34.315");
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertNotNull(dateTimeFieldType62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[2022, 2, 23, 54958650]");
        org.junit.Assert.assertNotNull(localDateTime68);
        org.junit.Assert.assertNotNull(property69);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 15816863088000000L + "'", long71 == 15816863088000000L);
        org.junit.Assert.assertNotNull(date72);
// flaky:         org.junit.Assert.assertEquals(date72.toString(), "Tue Jun 10 00:00:00 GMT+00:00 503186");
        org.junit.Assert.assertNotNull(chronology76);
        org.junit.Assert.assertNotNull(durationField77);
        org.junit.Assert.assertNotNull(durationField78);
        org.junit.Assert.assertNotNull(dateTimeField80);
        org.junit.Assert.assertNotNull(dateTimeField81);
        org.junit.Assert.assertNotNull(localDateTime85);
        org.junit.Assert.assertTrue("'" + long87 + "' != '" + 100L + "'", long87 == 100L);
        org.junit.Assert.assertNotNull(dateTimeField88);
        org.junit.Assert.assertNotNull(dateTimeFieldType89);
        org.junit.Assert.assertNotNull(property90);
    }

    @Test
    public void test10448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10448");
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology3 = localDateTime2.getChronology();
        org.joda.time.DurationField durationField4 = chronology3.weekyears();
        org.joda.time.DurationField durationField5 = chronology3.centuries();
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime((long) (byte) 0, chronology3);
        org.joda.time.DurationField durationField7 = chronology3.millis();
        org.joda.time.DurationField durationField8 = chronology3.weeks();
        org.joda.time.DurationField durationField9 = chronology3.minutes();
        java.lang.Class<?> wildcardClass10 = durationField9.getClass();
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test10449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10449");
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology3 = localDateTime2.getChronology();
        org.joda.time.DurationField durationField4 = chronology3.weekyears();
        org.joda.time.DurationField durationField5 = chronology3.centuries();
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime((long) (byte) 0, chronology3);
        org.joda.time.DateTimeField dateTimeField7 = chronology3.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField8 = chronology3.clockhourOfHalfday();
        org.joda.time.Chronology chronology9 = chronology3.withUTC();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.monthOfYear();
        org.joda.time.DateTimeField dateTimeField11 = chronology9.era();
        org.joda.time.DurationField durationField12 = chronology9.hours();
        org.joda.time.DateTimeField dateTimeField13 = chronology9.secondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str17 = dateTimeZone15.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime18 = org.joda.time.LocalDateTime.now(dateTimeZone15);
        org.joda.time.LocalDateTime.Property property19 = localDateTime18.millisOfDay();
        org.joda.time.DurationFieldType durationFieldType20 = org.joda.time.DurationFieldType.centuries();
        boolean boolean21 = localDateTime18.equals((java.lang.Object) durationFieldType20);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime18.withWeekOfWeekyear((int) (byte) 10);
        int int24 = localDateTime23.getDayOfYear();
        int int25 = localDateTime23.getWeekyear();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str28 = dateTimeZone26.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime29 = org.joda.time.LocalDateTime.now(dateTimeZone26);
        org.joda.time.LocalDateTime.Property property30 = localDateTime29.millisOfDay();
        long long31 = property30.remainder();
        org.joda.time.LocalDateTime localDateTime32 = property30.roundFloorCopy();
        java.lang.String str33 = property30.getAsShortText();
        java.lang.String str34 = property30.getAsString();
        int int35 = property30.getMaximumValueOverall();
        org.joda.time.DurationField durationField36 = property30.getLeapDurationField();
        org.joda.time.LocalDateTime localDateTime37 = property30.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime38 = localDateTime23.withFields((org.joda.time.ReadablePartial) localDateTime37);
        int int39 = localDateTime38.getMonthOfYear();
        org.joda.time.LocalDateTime.Property property40 = localDateTime38.year();
        org.joda.time.LocalDateTime.Property property41 = localDateTime38.hourOfDay();
        org.joda.time.LocalDateTime localDateTime43 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology44 = localDateTime43.getChronology();
        org.joda.time.DateTimeField dateTimeField45 = chronology44.halfdayOfDay();
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str48 = dateTimeZone46.getShortName((long) (short) 10);
        long long50 = dateTimeZone46.convertUTCToLocal((long) ' ');
        java.lang.String str51 = dateTimeZone46.toString();
        boolean boolean53 = dateTimeZone46.equals((java.lang.Object) (short) 100);
        java.util.Locale locale55 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str56 = dateTimeZone46.getShortName((long) (-1), locale55);
        int int57 = dateTimeField45.getMaximumShortTextLength(locale55);
        java.lang.String str58 = locale55.getCountry();
        java.lang.String str59 = property41.getAsText(locale55);
        java.lang.String str60 = dateTimeField13.getAsText(26253611, locale55);
        java.lang.String str62 = dateTimeField13.getAsText((long) 26438409);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+00:00" + "'", str17, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(durationFieldType20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 67 + "'", int24 == 67);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2022 + "'", int25 == 2022);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "+00:00" + "'", str28, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertNotNull(localDateTime32);
// flaky:         org.junit.Assert.assertEquals("'" + str33 + "' != '" + "26614349" + "'", str33, "26614349");
// flaky:         org.junit.Assert.assertEquals("'" + str34 + "' != '" + "26614349" + "'", str34, "26614349");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 86399999 + "'", int35 == 86399999);
        org.junit.Assert.assertNull(durationField36);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2 + "'", int39 == 2);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "+00:00" + "'", str48, "+00:00");
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 32L + "'", long50 == 32L);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "UTC" + "'", str51, "UTC");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "+00:00" + "'", str56, "+00:00");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 2 + "'", int57 == 2);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "CA" + "'", str58, "CA");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "23" + "'", str59, "23");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "26253611" + "'", str60, "26253611");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "38" + "'", str62, "38");
    }

    @Test
    public void test10450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10450");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeField dateTimeField2 = dateTimeFieldType0.getField(chronology1);
        java.util.Locale locale4 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale5 = locale4.stripExtensions();
        java.lang.String str6 = dateTimeField2.getAsShortText(100, locale5);
        int int8 = dateTimeField2.getLeapAmount((long) (short) 100);
        java.lang.String str9 = dateTimeField2.getName();
        long long12 = dateTimeField2.add((long) (short) 1, 0);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str15 = dateTimeZone13.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime16 = org.joda.time.LocalDateTime.now(dateTimeZone13);
        org.joda.time.LocalDateTime.Property property17 = localDateTime16.millisOfDay();
        org.joda.time.ReadableInstant readableInstant18 = null;
        long long19 = property17.getDifferenceAsLong(readableInstant18);
        org.joda.time.DurationField durationField20 = property17.getLeapDurationField();
        java.lang.String str21 = property17.getAsString();
        org.joda.time.LocalDateTime localDateTime22 = property17.roundFloorCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology27 = localDateTime26.getChronology();
        org.joda.time.DurationField durationField28 = chronology27.weekyears();
        boolean boolean29 = dateTimeFieldType24.isSupported(chronology27);
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime();
        java.lang.String str31 = localDateTime30.toString();
        int int32 = localDateTime30.getCenturyOfEra();
        org.joda.time.LocalDateTime localDateTime34 = localDateTime30.minusMonths(2);
        org.joda.time.LocalDateTime.Property property35 = localDateTime34.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str38 = dateTimeZone36.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime39 = org.joda.time.LocalDateTime.now(dateTimeZone36);
        org.joda.time.LocalDateTime.Property property40 = localDateTime39.millisOfDay();
        org.joda.time.LocalDateTime localDateTime42 = localDateTime39.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime44 = localDateTime39.plusHours((int) ' ');
        org.joda.time.ReadableInstant readableInstant45 = null;
        org.joda.time.DateTime dateTime46 = localDateTime44.toDateTime(readableInstant45);
        long long47 = dateTime46.getMillis();
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str50 = dateTimeZone48.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime51 = org.joda.time.LocalDateTime.now(dateTimeZone48);
        org.joda.time.DateTimeFieldType dateTimeFieldType53 = localDateTime51.getFieldType((int) (short) 0);
        boolean boolean54 = dateTime46.isSupported(dateTimeFieldType53);
        org.joda.time.DateTime dateTime55 = localDateTime34.toDateTime((org.joda.time.ReadableInstant) dateTime46);
        int[] intArray57 = chronology27.get((org.joda.time.ReadablePartial) localDateTime34, 11L);
        int[] intArray59 = dateTimeField2.add((org.joda.time.ReadablePartial) localDateTime22, (int) (short) 10, intArray57, (int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime61 = localDateTime22.minusMinutes(0);
        org.joda.time.LocalDateTime localDateTime63 = localDateTime61.plusYears(7);
        org.joda.time.DateTimeFieldType dateTimeFieldType64 = org.joda.time.DateTimeFieldType.hourOfDay();
        org.joda.time.LocalDateTime localDateTime66 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology67 = localDateTime66.getChronology();
        org.joda.time.DurationField durationField68 = chronology67.weekyears();
        org.joda.time.DurationField durationField69 = chronology67.centuries();
        org.joda.time.DurationField durationField70 = chronology67.minutes();
        org.joda.time.LocalDateTime localDateTime71 = new org.joda.time.LocalDateTime(chronology67);
        boolean boolean72 = dateTimeFieldType64.isSupported(chronology67);
        org.joda.time.DateTimeZone dateTimeZone73 = chronology67.getZone();
        org.joda.time.LocalDateTime localDateTime74 = org.joda.time.LocalDateTime.now(dateTimeZone73);
        org.joda.time.LocalDateTime localDateTime76 = localDateTime74.plusYears(421);
        org.joda.time.LocalDateTime localDateTime78 = localDateTime76.minusSeconds(71);
        int int79 = localDateTime63.compareTo((org.joda.time.ReadablePartial) localDateTime78);
        org.joda.time.LocalDateTime localDateTime81 = localDateTime78.minusWeeks(86399003);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime86 = localDateTime81.withTime(1940, 125, 55089292, (-19046));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1940 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "100" + "'", str6, "100");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "minuteOfDay" + "'", str9, "minuteOfDay");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+00:00" + "'", str15, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertNull(durationField20);
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "26614376" + "'", str21, "26614376");
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "2022-02-22T07:23:34.377" + "'", str31, "2022-02-22T07:23:34.377");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 20 + "'", int32 == 20);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "+00:00" + "'", str38, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(dateTime46);
// flaky:         org.junit.Assert.assertTrue("'" + long47 + "' != '" + 1645629814377L + "'", long47 == 1645629814377L);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "+00:00" + "'", str50, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(dateTimeFieldType53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[1970, 1, 1, 11]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[1970, 1, 1, 11]");
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNotNull(dateTimeFieldType64);
        org.junit.Assert.assertNotNull(chronology67);
        org.junit.Assert.assertNotNull(durationField68);
        org.junit.Assert.assertNotNull(durationField69);
        org.junit.Assert.assertNotNull(durationField70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(dateTimeZone73);
        org.junit.Assert.assertNotNull(localDateTime74);
        org.junit.Assert.assertNotNull(localDateTime76);
        org.junit.Assert.assertNotNull(localDateTime78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + (-1) + "'", int79 == (-1));
        org.junit.Assert.assertNotNull(localDateTime81);
    }

    @Test
    public void test10451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10451");
        org.joda.time.tz.NameProvider nameProvider0 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale.Category category1 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale2 = java.util.Locale.FRENCH;
        java.util.Locale.setDefault(category1, locale2);
        java.lang.String str4 = locale2.toLanguageTag();
        java.lang.String str5 = locale2.getLanguage();
        java.lang.String str8 = nameProvider0.getShortName(locale2, "days", "26149261");
        org.joda.time.DateTimeZone.setNameProvider(nameProvider0);
        org.joda.time.DateTimeZone.setNameProvider(nameProvider0);
        org.joda.time.DateTimeZone.setNameProvider(nameProvider0);
        org.joda.time.DateTimeZone.setNameProvider(nameProvider0);
        java.util.Locale locale16 = new java.util.Locale("Etc/UTC", "26151809", "26169002");
        java.lang.String str19 = nameProvider0.getName(locale16, "2022-02-22T07:16:53.570", "26162741");
        java.util.Locale.Category category20 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale21 = java.util.Locale.FRENCH;
        java.util.Locale.setDefault(category20, locale21);
        java.lang.String str23 = locale21.toLanguageTag();
        java.lang.String str24 = locale21.getLanguage();
        java.lang.String str25 = locale21.getVariant();
        java.lang.String str26 = locale21.getVariant();
        java.lang.String str28 = locale21.getExtension('a');
        java.lang.String str31 = nameProvider0.getName(locale21, "26180281", "2022-02-22T07:17:49.355");
        java.util.Locale.setDefault(locale21);
        java.lang.String str33 = locale21.getScript();
        org.junit.Assert.assertNotNull(nameProvider0);
        org.junit.Assert.assertTrue("'" + category1 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category1.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "fr" + "'", str4, "fr");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "fr" + "'", str5, "fr");
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertEquals(locale16.toString(), "etc/utc_26151809_26169002");
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertTrue("'" + category20 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category20.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "fr" + "'", str23, "fr");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "fr" + "'", str24, "fr");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
    }

    @Test
    public void test10452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10452");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.millisOfDay();
        int int5 = property4.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime7 = property4.setCopy((int) (byte) 1);
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.minus(readableDuration8);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime7.minusMinutes(26164);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str14 = dateTimeZone12.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime15 = org.joda.time.LocalDateTime.now(dateTimeZone12);
        org.joda.time.LocalDateTime.Property property16 = localDateTime15.millisOfDay();
        java.lang.String str17 = property16.getName();
        org.joda.time.LocalDateTime localDateTime18 = property16.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.minusYears(7);
        int int21 = localDateTime20.getEra();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str24 = dateTimeZone22.getShortName((long) (short) 10);
        long long26 = dateTimeZone22.convertUTCToLocal((long) ' ');
        java.lang.String str27 = dateTimeZone22.toString();
        java.lang.String str28 = dateTimeZone22.toString();
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime20, dateTimeZone22);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime20.withWeekyear((int) ' ');
        boolean boolean32 = localDateTime11.equals((java.lang.Object) localDateTime20);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime20.plusMonths(26283608);
        java.lang.String str36 = localDateTime20.toString("26571348");
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00" + "'", str2, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 86399999 + "'", int5 == 86399999);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+00:00" + "'", str14, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "millisOfDay" + "'", str17, "millisOfDay");
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "+00:00" + "'", str24, "+00:00");
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 32L + "'", long26 == 32L);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "UTC" + "'", str27, "UTC");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "UTC" + "'", str28, "UTC");
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "26571348" + "'", str36, "26571348");
    }

    @Test
    public void test10453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10453");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getShortName((long) (short) 10);
        long long4 = dateTimeZone0.convertUTCToLocal((long) ' ');
        java.lang.String str5 = dateTimeZone0.toString();
        long long7 = dateTimeZone0.previousTransition(32L);
        java.lang.String str8 = dateTimeZone0.toString();
        java.util.Locale.Category category10 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale11 = java.util.Locale.FRENCH;
        java.util.Locale.setDefault(category10, locale11);
        java.lang.String str13 = locale11.getDisplayName();
        boolean boolean14 = locale11.hasExtensions();
        java.lang.String str15 = dateTimeZone0.getShortName(86399084L, locale11);
        long long17 = dateTimeZone0.convertUTCToLocal(1645514371788L);
        boolean boolean19 = dateTimeZone0.equals((java.lang.Object) "52297603");
        int int21 = dateTimeZone0.getOffsetFromLocal(1645629576211L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00" + "'", str2, "+00:00");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 32L + "'", long4 == 32L);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "UTC" + "'", str5, "UTC");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 32L + "'", long7 == 32L);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "UTC" + "'", str8, "UTC");
        org.junit.Assert.assertTrue("'" + category10 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category10.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "fran\347ais" + "'", str13, "fran\347ais");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+00:00" + "'", str15, "+00:00");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1645514371788L + "'", long17 == 1645514371788L);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
    }

    @Test
    public void test10454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10454");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.millisOfDay();
        org.joda.time.DurationFieldType durationFieldType5 = org.joda.time.DurationFieldType.centuries();
        boolean boolean6 = localDateTime3.equals((java.lang.Object) durationFieldType5);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray7 = localDateTime3.getFieldTypes();
        java.lang.String str8 = localDateTime3.toString();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime3.plusMillis(22);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime3.withMillisOfSecond((int) (byte) 10);
        org.joda.time.Chronology chronology13 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField14 = chronology13.minutes();
        org.joda.time.DateTimeField dateTimeField15 = chronology13.weekyear();
        org.joda.time.DurationField durationField16 = chronology13.millis();
        org.joda.time.DateTimeField dateTimeField17 = chronology13.minuteOfDay();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00" + "'", str2, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(durationFieldType5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "2022-02-22T07:23:34.455" + "'", str8, "2022-02-22T07:23:34.455");
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
    }

    @Test
    public void test10455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10455");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.days();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology3 = localDateTime2.getChronology();
        org.joda.time.DurationField durationField4 = chronology3.hours();
        org.joda.time.DurationField durationField5 = durationFieldType0.getField(chronology3);
        org.joda.time.Chronology chronology6 = chronology3.withUTC();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField8 = chronology6.secondOfDay();
        int int10 = dateTimeField8.get(1645629543608L);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str13 = dateTimeZone11.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime14 = org.joda.time.LocalDateTime.now(dateTimeZone11);
        org.joda.time.LocalDateTime.Property property15 = localDateTime14.millisOfDay();
        java.lang.String str16 = property15.getName();
        int int17 = property15.getMaximumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = property15.getFieldType();
        org.joda.time.LocalDateTime localDateTime19 = property15.withMaximumValue();
        org.joda.time.LocalDateTime.Property property20 = localDateTime19.dayOfYear();
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.LocalDateTime localDateTime23 = localDateTime19.withPeriodAdded(readablePeriod21, 25830596);
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str26 = dateTimeZone24.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime27 = org.joda.time.LocalDateTime.now(dateTimeZone24);
        org.joda.time.LocalDateTime.Property property28 = localDateTime27.millisOfDay();
        org.joda.time.DurationFieldType durationFieldType29 = org.joda.time.DurationFieldType.centuries();
        boolean boolean30 = localDateTime27.equals((java.lang.Object) durationFieldType29);
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology33 = localDateTime32.getChronology();
        org.joda.time.DurationField durationField34 = chronology33.weekyears();
        org.joda.time.DateTimeField dateTimeField35 = chronology33.minuteOfDay();
        org.joda.time.DurationField durationField36 = durationFieldType29.getField(chronology33);
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology39 = localDateTime38.getChronology();
        org.joda.time.DurationField durationField40 = chronology39.weekyears();
        org.joda.time.DurationField durationField41 = chronology39.seconds();
        org.joda.time.DurationField durationField42 = durationFieldType29.getField(chronology39);
        org.joda.time.ReadablePeriod readablePeriod43 = null;
        long long46 = chronology39.add(readablePeriod43, 153L, (int) '4');
        org.joda.time.DateTimeField dateTimeField47 = chronology39.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str50 = dateTimeZone48.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime51 = org.joda.time.LocalDateTime.now(dateTimeZone48);
        org.joda.time.LocalDateTime.Property property52 = localDateTime51.millisOfDay();
        org.joda.time.LocalDateTime localDateTime54 = localDateTime51.withYear((int) (short) 100);
        org.joda.time.LocalDateTime.Property property55 = localDateTime54.minuteOfHour();
        int int56 = property55.get();
        org.joda.time.LocalDateTime localDateTime58 = property55.setCopy((int) (short) 10);
        org.joda.time.LocalDateTime.Property property59 = localDateTime58.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime61 = localDateTime58.withYearOfCentury(0);
        org.joda.time.DateTimeZone dateTimeZone62 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str64 = dateTimeZone62.getShortName((long) (short) 10);
        long long66 = dateTimeZone62.convertUTCToLocal((long) ' ');
        java.lang.String str67 = dateTimeZone62.toString();
        boolean boolean69 = dateTimeZone62.equals((java.lang.Object) (short) 100);
        java.util.Locale locale71 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str72 = dateTimeZone62.getShortName((long) (-1), locale71);
        org.joda.time.LocalDateTime localDateTime73 = new org.joda.time.LocalDateTime(dateTimeZone62);
        org.joda.time.DateTimeFieldType dateTimeFieldType74 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime76 = localDateTime73.withField(dateTimeFieldType74, (int) (short) 100);
        org.joda.time.LocalDateTime localDateTime78 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology79 = localDateTime78.getChronology();
        org.joda.time.DurationField durationField80 = chronology79.weekyears();
        org.joda.time.DurationField durationField81 = chronology79.centuries();
        org.joda.time.DateTimeField dateTimeField82 = chronology79.minuteOfDay();
        long long86 = chronology79.add((long) 2, (long) 21, (int) '4');
        boolean boolean87 = dateTimeFieldType74.isSupported(chronology79);
        org.joda.time.DateTimeZone dateTimeZone88 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str90 = dateTimeZone88.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime91 = org.joda.time.LocalDateTime.now(dateTimeZone88);
        org.joda.time.LocalDateTime.Property property92 = localDateTime91.millisOfDay();
        int int93 = property92.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime94 = property92.withMaximumValue();
        int[] intArray96 = chronology79.get((org.joda.time.ReadablePartial) localDateTime94, 5498195040L);
        chronology39.validate((org.joda.time.ReadablePartial) localDateTime58, intArray96);
        int int98 = dateTimeField8.getMinimumValue((org.joda.time.ReadablePartial) localDateTime19, intArray96);
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 55143 + "'", int10 == 55143);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+00:00" + "'", str13, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "millisOfDay" + "'", str16, "millisOfDay");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 86399999 + "'", int17 == 86399999);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "+00:00" + "'", str26, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(durationFieldType29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(durationField40);
        org.junit.Assert.assertNotNull(durationField41);
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 153L + "'", long46 == 153L);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "+00:00" + "'", str50, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(property55);
// flaky:         org.junit.Assert.assertTrue("'" + int56 + "' != '" + 23 + "'", int56 == 23);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertNotNull(dateTimeZone62);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "+00:00" + "'", str64, "+00:00");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 32L + "'", long66 == 32L);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "UTC" + "'", str67, "UTC");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "+00:00" + "'", str72, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeFieldType74);
        org.junit.Assert.assertNotNull(localDateTime76);
        org.junit.Assert.assertNotNull(chronology79);
        org.junit.Assert.assertNotNull(durationField80);
        org.junit.Assert.assertNotNull(durationField81);
        org.junit.Assert.assertNotNull(dateTimeField82);
        org.junit.Assert.assertTrue("'" + long86 + "' != '" + 1094L + "'", long86 == 1094L);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertNotNull(dateTimeZone88);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "+00:00" + "'", str90, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime91);
        org.junit.Assert.assertNotNull(property92);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 86399999 + "'", int93 == 86399999);
        org.junit.Assert.assertNotNull(localDateTime94);
        org.junit.Assert.assertNotNull(intArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray96), "[1970, 3, 5, 54995040]");
        org.junit.Assert.assertTrue("'" + int98 + "' != '" + 0 + "'", int98 == 0);
    }

    @Test
    public void test10456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10456");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DurationField durationField3 = chronology2.weekyears();
        org.joda.time.DurationField durationField4 = chronology2.centuries();
        org.joda.time.DurationField durationField5 = chronology2.hours();
        org.joda.time.DurationField durationField6 = chronology2.seconds();
        org.joda.time.DateTimeField dateTimeField7 = chronology2.secondOfDay();
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(chronology2);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.withHourOfDay(5);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str13 = dateTimeZone11.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime14 = org.joda.time.LocalDateTime.now(dateTimeZone11);
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = localDateTime14.getFieldType((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime14.minusMonths(0);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime8.withFields((org.joda.time.ReadablePartial) localDateTime18);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime21 = localDateTime19.plusYears(1645650859);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1645652881 for year must be in the range [-292275054,292278993]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+00:00" + "'", str13, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime19);
    }

    @Test
    public void test10457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10457");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DurationField durationField3 = chronology2.hours();
        java.lang.String str4 = chronology2.toString();
        org.joda.time.DateTimeField dateTimeField5 = chronology2.clockhourOfDay();
        int int7 = dateTimeField5.get(1645629354990L);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str10 = dateTimeZone8.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now(dateTimeZone8);
        org.joda.time.LocalDateTime.Property property12 = localDateTime11.millisOfDay();
        org.joda.time.DurationFieldType durationFieldType13 = org.joda.time.DurationFieldType.centuries();
        boolean boolean14 = localDateTime11.equals((java.lang.Object) durationFieldType13);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray15 = localDateTime11.getFieldTypes();
        java.lang.String str16 = localDateTime11.toString();
        java.util.Locale locale17 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str18 = dateTimeField5.getAsText((org.joda.time.ReadablePartial) localDateTime11, locale17);
        org.joda.time.Chronology chronology19 = localDateTime11.getChronology();
        java.util.Date date20 = localDateTime11.toDate();
        org.joda.time.LocalDateTime localDateTime21 = org.joda.time.LocalDateTime.fromDateFields(date20);
        org.joda.time.ReadableDuration readableDuration22 = null;
        org.joda.time.LocalDateTime localDateTime24 = localDateTime21.withDurationAdded(readableDuration22, 26371056);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "ISOChronology[UTC]" + "'", str4, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 15 + "'", int7 == 15);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+00:00" + "'", str10, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(durationFieldType13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray15);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "2022-02-22T07:23:34.521" + "'", str16, "2022-02-22T07:23:34.521");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "7" + "'", str18, "7");
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(date20);
// flaky:         org.junit.Assert.assertEquals(date20.toString(), "Tue Feb 22 07:23:35 GMT+00:00 2022");
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime24);
    }

    @Test
    public void test10458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10458");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        org.joda.time.LocalDateTime localDateTime3 = localDateTime0.withDurationAdded(readableDuration1, (int) '#');
        int int4 = localDateTime3.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime3.withMinuteOfHour(2);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime3.withMinuteOfHour(2);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str11 = dateTimeZone9.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime12 = org.joda.time.LocalDateTime.now(dateTimeZone9);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = localDateTime12.getFieldType((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime12.minusMonths(0);
        boolean boolean17 = localDateTime8.isBefore((org.joda.time.ReadablePartial) localDateTime12);
        int int18 = localDateTime8.getEra();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime8.withMinuteOfHour((int) (short) 10);
        int int21 = localDateTime20.getYearOfCentury();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2 + "'", int4 == 2);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+00:00" + "'", str11, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 22 + "'", int21 == 22);
    }

    @Test
    public void test10459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10459");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder2 = builder0.clear();
        java.util.Locale.Builder builder3 = builder2.clearExtensions();
        java.util.Locale.Builder builder4 = builder3.clearExtensions();
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
    }

    @Test
    public void test10460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10460");
        java.util.Locale locale0 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet1 = locale0.getUnicodeLocaleAttributes();
        java.lang.Object[] objArray2 = strSet1.toArray();
        java.util.Locale locale3 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet4 = locale3.getUnicodeLocaleAttributes();
        boolean boolean5 = strSet1.removeAll((java.util.Collection<java.lang.String>) strSet4);
        java.util.Locale locale6 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet7 = locale6.getUnicodeLocaleAttributes();
        org.joda.time.DurationFieldType durationFieldType8 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.DurationFieldType durationFieldType9 = org.joda.time.DurationFieldType.hours();
        org.joda.time.DurationFieldType[] durationFieldTypeArray10 = new org.joda.time.DurationFieldType[] { durationFieldType8, durationFieldType9 };
        org.joda.time.DurationFieldType[] durationFieldTypeArray11 = strSet7.toArray(durationFieldTypeArray10);
        boolean boolean12 = strSet1.containsAll((java.util.Collection<java.lang.String>) strSet7);
        java.util.Locale locale13 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet14 = locale13.getUnicodeLocaleAttributes();
        java.lang.Object[] objArray15 = strSet14.toArray();
        java.util.Locale locale16 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet17 = locale16.getUnicodeLocaleAttributes();
        boolean boolean18 = strSet14.removeAll((java.util.Collection<java.lang.String>) strSet17);
        java.util.Locale locale19 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet20 = locale19.getUnicodeLocaleAttributes();
        org.joda.time.DurationFieldType durationFieldType21 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.DurationFieldType durationFieldType22 = org.joda.time.DurationFieldType.hours();
        org.joda.time.DurationFieldType[] durationFieldTypeArray23 = new org.joda.time.DurationFieldType[] { durationFieldType21, durationFieldType22 };
        org.joda.time.DurationFieldType[] durationFieldTypeArray24 = strSet20.toArray(durationFieldTypeArray23);
        boolean boolean25 = strSet14.containsAll((java.util.Collection<java.lang.String>) strSet20);
        java.util.Locale locale26 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet27 = locale26.getUnicodeLocaleAttributes();
        java.lang.Object[] objArray28 = strSet27.toArray();
        boolean boolean29 = strSet14.addAll((java.util.Collection<java.lang.String>) strSet27);
        boolean boolean30 = strSet1.retainAll((java.util.Collection<java.lang.String>) strSet27);
        java.util.stream.Stream<java.lang.String> strStream31 = strSet27.stream();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "");
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNotNull(objArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray2), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray2), "[]");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "");
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "");
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertNotNull(durationFieldType8);
        org.junit.Assert.assertNotNull(durationFieldType9);
        org.junit.Assert.assertNotNull(durationFieldTypeArray10);
        org.junit.Assert.assertNotNull(durationFieldTypeArray11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "");
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[]");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "");
        org.junit.Assert.assertNotNull(strSet17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "");
        org.junit.Assert.assertNotNull(strSet20);
        org.junit.Assert.assertNotNull(durationFieldType21);
        org.junit.Assert.assertNotNull(durationFieldType22);
        org.junit.Assert.assertNotNull(durationFieldTypeArray23);
        org.junit.Assert.assertNotNull(durationFieldTypeArray24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "");
        org.junit.Assert.assertNotNull(strSet27);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(strStream31);
    }

    @Test
    public void test10461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10461");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        org.joda.time.LocalDateTime localDateTime3 = localDateTime0.withDurationAdded(readableDuration1, (int) '#');
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.weekyear();
        org.joda.time.DurationFieldType durationFieldType5 = org.joda.time.DurationFieldType.days();
        java.lang.String str6 = durationFieldType5.toString();
        org.joda.time.Chronology chronology7 = null;
        boolean boolean8 = durationFieldType5.isSupported(chronology7);
        java.lang.String str9 = durationFieldType5.toString();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime3.withFieldAdded(durationFieldType5, (-86340));
        org.joda.time.DurationFieldType durationFieldType12 = org.joda.time.DurationFieldType.days();
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology15 = localDateTime14.getChronology();
        org.joda.time.DurationField durationField16 = chronology15.hours();
        org.joda.time.DurationField durationField17 = durationFieldType12.getField(chronology15);
        org.joda.time.DateTimeField dateTimeField18 = chronology15.hourOfHalfday();
        boolean boolean19 = durationFieldType5.isSupported(chronology15);
        org.joda.time.DateTimeField dateTimeField20 = chronology15.year();
        // The following exception was thrown during execution in test generation
        try {
            long long28 = chronology15.getDateTimeMillis(94, 26610, 593, 26438409, 986, 26352, 81529084);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26438409 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(durationFieldType5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "days" + "'", str6, "days");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "days" + "'", str9, "days");
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(durationFieldType12);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(dateTimeField20);
    }

    @Test
    public void test10462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10462");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.millisOfDay();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime3.withYear((int) (short) 100);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.minuteOfHour();
        int int8 = property7.get();
        org.joda.time.LocalDateTime localDateTime10 = property7.setCopy((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime11 = property7.roundCeilingCopy();
        org.joda.time.DateTimeField[] dateTimeFieldArray12 = localDateTime11.getFields();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str15 = dateTimeZone13.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime16 = org.joda.time.LocalDateTime.now(dateTimeZone13);
        org.joda.time.LocalDateTime.Property property17 = localDateTime16.millisOfDay();
        org.joda.time.DurationFieldType durationFieldType18 = org.joda.time.DurationFieldType.centuries();
        boolean boolean19 = localDateTime16.equals((java.lang.Object) durationFieldType18);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray20 = localDateTime16.getFieldTypes();
        java.lang.String str21 = localDateTime16.toString();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime16.plusMillis(22);
        org.joda.time.LocalDateTime.Property property24 = localDateTime16.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str27 = dateTimeZone25.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime28 = org.joda.time.LocalDateTime.now(dateTimeZone25);
        org.joda.time.LocalDateTime.Property property29 = localDateTime28.millisOfDay();
        java.lang.String str30 = property29.getName();
        int int31 = property29.getMaximumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = property29.getFieldType();
        int int33 = localDateTime16.indexOf(dateTimeFieldType32);
        org.joda.time.LocalDateTime.Property property34 = localDateTime11.property(dateTimeFieldType32);
        org.joda.time.DurationFieldType durationFieldType35 = dateTimeFieldType32.getRangeDurationType();
        java.lang.String str36 = dateTimeFieldType32.toString();
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology39 = localDateTime38.getChronology();
        org.joda.time.DurationField durationField40 = chronology39.weekyears();
        org.joda.time.DurationField durationField41 = chronology39.centuries();
        org.joda.time.DurationField durationField42 = chronology39.hours();
        org.joda.time.DurationField durationField43 = chronology39.seconds();
        org.joda.time.DateTimeField dateTimeField44 = chronology39.secondOfDay();
        org.joda.time.DateTimeField dateTimeField45 = chronology39.yearOfEra();
        boolean boolean46 = dateTimeFieldType32.isSupported(chronology39);
        org.joda.time.DateTimeField dateTimeField47 = chronology39.era();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00" + "'", str2, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 23 + "'", int8 == 23);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTimeFieldArray12);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+00:00" + "'", str15, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(durationFieldType18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray20);
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "2022-02-22T07:23:34.677" + "'", str21, "2022-02-22T07:23:34.677");
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "+00:00" + "'", str27, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "millisOfDay" + "'", str30, "millisOfDay");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 86399999 + "'", int31 == 86399999);
        org.junit.Assert.assertNotNull(dateTimeFieldType32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 3 + "'", int33 == 3);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(durationFieldType35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "millisOfDay" + "'", str36, "millisOfDay");
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(durationField40);
        org.junit.Assert.assertNotNull(durationField41);
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertNotNull(durationField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(dateTimeField47);
    }

    @Test
    public void test10463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10463");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        java.lang.String str1 = localDateTime0.toString();
        org.joda.time.LocalDateTime localDateTime3 = localDateTime0.plusMonths((int) (short) -1);
        org.joda.time.LocalDateTime.Property property4 = localDateTime0.yearOfEra();
        org.joda.time.LocalDateTime localDateTime6 = property4.addToCopy(20);
        java.lang.String str7 = property4.getAsText();
        org.joda.time.DurationField durationField8 = property4.getRangeDurationField();
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "2022-02-22T07:23:34.708" + "'", str1, "2022-02-22T07:23:34.708");
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "2022" + "'", str7, "2022");
        org.junit.Assert.assertNull(durationField8);
    }

    @Test
    public void test10464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10464");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.millisOfDay();
        org.joda.time.ReadableInstant readableInstant5 = null;
        long long6 = property4.getDifferenceAsLong(readableInstant5);
        java.util.Locale locale7 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str8 = locale7.getISO3Language();
        java.lang.String str9 = property4.getAsShortText(locale7);
        org.joda.time.DurationField durationField10 = property4.getDurationField();
        long long13 = durationField10.add((long) 1, 10);
        boolean boolean14 = durationField10.isPrecise();
        int int16 = durationField10.getValue((long) 26149500);
        int int19 = durationField10.getValue((long) (short) 10, 0L);
        long long22 = durationField10.add((long) 'a', (long) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType23 = durationField10.getType();
        org.joda.time.DurationFieldType durationFieldType24 = org.joda.time.DurationFieldType.days();
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology27 = localDateTime26.getChronology();
        org.joda.time.DurationField durationField28 = chronology27.hours();
        org.joda.time.DurationField durationField29 = durationFieldType24.getField(chronology27);
        org.joda.time.DateTimeField dateTimeField30 = chronology27.hourOfHalfday();
        org.joda.time.DurationField durationField31 = chronology27.weeks();
        boolean boolean32 = durationFieldType23.isSupported(chronology27);
        org.joda.time.DateTimeField dateTimeField33 = chronology27.secondOfDay();
        java.lang.String str35 = dateTimeField33.getAsShortText((-457119L));
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime(100L);
        org.joda.time.LocalDateTime.Property property38 = localDateTime37.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime40 = localDateTime37.plusSeconds(9);
        org.joda.time.LocalDateTime.Property property41 = localDateTime37.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime43 = localDateTime37.withCenturyOfEra(2);
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.LocalDateTime.Property property45 = localDateTime43.property(dateTimeFieldType44);
        org.joda.time.LocalDateTime.Property property46 = localDateTime43.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime48 = property46.addToCopy((long) 26149500);
        org.joda.time.LocalDateTime localDateTime49 = property46.withMaximumValue();
        int int50 = dateTimeField33.getMaximumValue((org.joda.time.ReadablePartial) localDateTime49);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00" + "'", str2, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "fra" + "'", str8, "fra");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "26614718" + "'", str9, "26614718");
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 11L + "'", long13 == 11L);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 26149500 + "'", int16 == 26149500);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10 + "'", int19 == 10);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 197L + "'", long22 == 197L);
        org.junit.Assert.assertNotNull(durationFieldType23);
        org.junit.Assert.assertNotNull(durationFieldType24);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "85942" + "'", str35, "85942");
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(dateTimeFieldType44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 86399 + "'", int50 == 86399);
    }

    @Test
    public void test10465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10465");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("hours");
        java.lang.String str2 = languageRange1.getRange();
        java.util.Locale.LanguageRange[] languageRangeArray3 = new java.util.Locale.LanguageRange[] { languageRange1 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList4 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList4, languageRangeArray3);
        java.util.Locale.LanguageRange[] languageRangeArray6 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList7 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList7, languageRangeArray6);
        java.util.Locale locale9 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale10 = java.util.Locale.CANADA;
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str13 = dateTimeZone11.getShortName((long) (short) 10);
        long long15 = dateTimeZone11.convertUTCToLocal((long) ' ');
        java.lang.String str16 = dateTimeZone11.toString();
        boolean boolean18 = dateTimeZone11.equals((java.lang.Object) (short) 100);
        java.util.Locale locale20 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str21 = dateTimeZone11.getShortName((long) (-1), locale20);
        java.util.Locale locale22 = java.util.Locale.CANADA;
        java.util.Locale locale23 = java.util.Locale.FRENCH;
        java.util.Locale[] localeArray24 = new java.util.Locale[] { locale9, locale10, locale20, locale22, locale23 };
        java.util.ArrayList<java.util.Locale> localeList25 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList25, localeArray24);
        java.util.Locale locale27 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList7, (java.util.Collection<java.util.Locale>) localeList25);
        java.util.Locale locale28 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet29 = locale28.getUnicodeLocaleAttributes();
        java.lang.Object[] objArray30 = strSet29.toArray();
        java.util.List<java.lang.String> strList31 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList7, (java.util.Collection<java.lang.String>) strSet29);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap32 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList33 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList7, strMap32);
        java.util.Collection<java.lang.String> strCollection34 = null;
        java.util.Locale.FilteringMode filteringMode35 = java.util.Locale.FilteringMode.AUTOSELECT_FILTERING;
        java.util.List<java.lang.String> strList36 = java.util.Locale.filterTags(languageRangeList33, strCollection34, filteringMode35);
        java.util.List<java.lang.String> strList37 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList4, (java.util.Collection<java.lang.String>) strList36);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap38 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList39 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList4, strMap38);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap40 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList41 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList4, strMap40);
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str44 = dateTimeZone42.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime45 = org.joda.time.LocalDateTime.now(dateTimeZone42);
        org.joda.time.LocalDateTime.Property property46 = localDateTime45.millisOfDay();
        java.lang.String str47 = property46.getName();
        org.joda.time.LocalDateTime localDateTime48 = property46.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime50 = localDateTime48.minusHours(0);
        org.joda.time.LocalDateTime.Property property51 = localDateTime48.dayOfMonth();
        long long52 = property51.remainder();
        org.joda.time.LocalDateTime localDateTime53 = new org.joda.time.LocalDateTime();
        org.joda.time.ReadableDuration readableDuration54 = null;
        org.joda.time.LocalDateTime localDateTime56 = localDateTime53.withDurationAdded(readableDuration54, (int) '#');
        org.joda.time.LocalDateTime.Property property57 = localDateTime56.weekyear();
        int int58 = property57.getMaximumValue();
        org.joda.time.DateTimeField dateTimeField59 = property57.getField();
        org.joda.time.DateTimeZone dateTimeZone60 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str62 = dateTimeZone60.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime63 = org.joda.time.LocalDateTime.now(dateTimeZone60);
        org.joda.time.LocalDateTime.Property property64 = localDateTime63.millisOfDay();
        org.joda.time.LocalDateTime localDateTime66 = localDateTime63.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime68 = localDateTime63.plusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime70 = localDateTime68.minusHours((int) (short) 10);
        int int71 = dateTimeField59.getMinimumValue((org.joda.time.ReadablePartial) localDateTime70);
        java.lang.String str73 = dateTimeField59.getAsText((long) (-292275054));
        long long75 = dateTimeField59.roundHalfFloor(0L);
        java.util.Locale locale77 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale78 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str79 = locale77.getDisplayCountry(locale78);
        java.util.Locale locale80 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale81 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str82 = locale80.getDisplayCountry(locale81);
        java.lang.String str83 = locale77.getDisplayVariant(locale80);
        java.util.Locale locale84 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale85 = locale84.stripExtensions();
        java.lang.String str86 = locale77.getDisplayLanguage(locale85);
        java.lang.String str87 = dateTimeField59.getAsText((int) (byte) 1, locale77);
        java.lang.String str88 = locale77.getISO3Country();
        java.lang.String str89 = property51.getAsShortText(locale77);
        java.util.Set<java.lang.String> strSet90 = locale77.getUnicodeLocaleAttributes();
        java.util.List<java.lang.String> strList91 = java.util.Locale.filterTags(languageRangeList41, (java.util.Collection<java.lang.String>) strSet90);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hours" + "'", str2, "hours");
        org.junit.Assert.assertNotNull(languageRangeArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(languageRangeArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "en_CA");
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+00:00" + "'", str13, "+00:00");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 32L + "'", long15 == 32L);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "UTC" + "'", str16, "UTC");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "+00:00" + "'", str21, "+00:00");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "fr");
        org.junit.Assert.assertNotNull(localeArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNull(locale27);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "");
        org.junit.Assert.assertNotNull(strSet29);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[]");
        org.junit.Assert.assertNotNull(strList31);
        org.junit.Assert.assertNotNull(languageRangeList33);
        org.junit.Assert.assertTrue("'" + filteringMode35 + "' != '" + java.util.Locale.FilteringMode.AUTOSELECT_FILTERING + "'", filteringMode35.equals(java.util.Locale.FilteringMode.AUTOSELECT_FILTERING));
        org.junit.Assert.assertNotNull(strList36);
        org.junit.Assert.assertNotNull(strList37);
        org.junit.Assert.assertNotNull(languageRangeList39);
        org.junit.Assert.assertNotNull(languageRangeList41);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "+00:00" + "'", str44, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "millisOfDay" + "'", str47, "millisOfDay");
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(property51);
// flaky:         org.junit.Assert.assertTrue("'" + long52 + "' != '" + 26614742L + "'", long52 == 26614742L);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 292278993 + "'", int58 == 292278993);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(dateTimeZone60);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "+00:00" + "'", str62, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertNotNull(localDateTime68);
        org.junit.Assert.assertNotNull(localDateTime70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-292275054) + "'", int71 == (-292275054));
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "1969" + "'", str73, "1969");
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + (-259200000L) + "'", long75 == (-259200000L));
        org.junit.Assert.assertNotNull(locale77);
        org.junit.Assert.assertEquals(locale77.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale78);
        org.junit.Assert.assertEquals(locale78.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "Canada" + "'", str79, "Canada");
        org.junit.Assert.assertNotNull(locale80);
        org.junit.Assert.assertEquals(locale80.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale81);
        org.junit.Assert.assertEquals(locale81.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "Canada" + "'", str82, "Canada");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "" + "'", str83, "");
        org.junit.Assert.assertNotNull(locale84);
        org.junit.Assert.assertEquals(locale84.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale85);
        org.junit.Assert.assertEquals(locale85.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "fran\347ais" + "'", str86, "fran\347ais");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "1" + "'", str87, "1");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "CAN" + "'", str88, "CAN");
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "22" + "'", str89, "22");
        org.junit.Assert.assertNotNull(strSet90);
        org.junit.Assert.assertNotNull(strList91);
    }

    @Test
    public void test10466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10466");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        int int2 = timeZone0.getOffset((long) (short) 100);
        int int3 = timeZone0.getRawOffset();
        int int4 = timeZone0.getRawOffset();
        int int6 = timeZone0.getOffset(69L);
        int int8 = timeZone0.getOffset(1645629619348L);
        timeZone0.setID("2022-02-22T14:33:41.518");
        org.junit.Assert.assertNotNull(timeZone0);
// flaky:         org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "GMT+00:00");
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 3 + "'", int2 == 3);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 3 + "'", int3 == 3);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 3 + "'", int4 == 3);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 3 + "'", int6 == 3);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 3 + "'", int8 == 3);
    }

    @Test
    public void test10467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10467");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone0);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = localDateTime3.getFieldType((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime3.minusMonths(0);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime3.minusSeconds(55000019);
        int int10 = localDateTime9.getEra();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00" + "'", str2, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
    }

    @Test
    public void test10468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10468");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.millisOfDay();
        java.lang.String str5 = property4.getName();
        java.lang.String str6 = property4.toString();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00" + "'", str2, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "millisOfDay" + "'", str5, "millisOfDay");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Property[millisOfDay]" + "'", str6, "Property[millisOfDay]");
    }

    @Test
    public void test10469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10469");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Locale locale3 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale4 = java.util.Locale.CANADA;
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str7 = dateTimeZone5.getShortName((long) (short) 10);
        long long9 = dateTimeZone5.convertUTCToLocal((long) ' ');
        java.lang.String str10 = dateTimeZone5.toString();
        boolean boolean12 = dateTimeZone5.equals((java.lang.Object) (short) 100);
        java.util.Locale locale14 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str15 = dateTimeZone5.getShortName((long) (-1), locale14);
        java.util.Locale locale16 = java.util.Locale.CANADA;
        java.util.Locale locale17 = java.util.Locale.FRENCH;
        java.util.Locale[] localeArray18 = new java.util.Locale[] { locale3, locale4, locale14, locale16, locale17 };
        java.util.ArrayList<java.util.Locale> localeList19 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList19, localeArray18);
        java.util.Locale locale21 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.util.Locale>) localeList19);
        java.util.Locale locale22 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet23 = locale22.getUnicodeLocaleAttributes();
        java.lang.Object[] objArray24 = strSet23.toArray();
        java.util.List<java.lang.String> strList25 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet23);
        java.util.Locale locale26 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet27 = locale26.getUnicodeLocaleAttributes();
        java.lang.Object[] objArray28 = strSet27.toArray();
        java.util.Locale locale29 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet30 = locale29.getUnicodeLocaleAttributes();
        boolean boolean31 = strSet27.removeAll((java.util.Collection<java.lang.String>) strSet30);
        java.util.List<java.lang.String> strList32 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet27);
        java.util.Locale locale33 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet34 = locale33.getUnicodeLocaleAttributes();
        java.util.Set<java.lang.String> strSet35 = locale33.getUnicodeLocaleAttributes();
        boolean boolean36 = strSet27.retainAll((java.util.Collection<java.lang.String>) strSet35);
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.DateTimeField dateTimeField39 = dateTimeFieldType37.getField(chronology38);
        java.util.Locale locale41 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale42 = locale41.stripExtensions();
        java.lang.String str43 = dateTimeField39.getAsShortText(100, locale42);
        int int45 = dateTimeField39.getLeapAmount((long) (short) 100);
        org.joda.time.DurationField durationField46 = dateTimeField39.getRangeDurationField();
        boolean boolean47 = dateTimeField39.isLenient();
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = dateTimeField39.getType();
        int int50 = dateTimeField39.get(1645629354990L);
        boolean boolean51 = strSet27.contains((java.lang.Object) int50);
        java.util.Iterator<java.lang.String> strItor52 = strSet27.iterator();
        java.util.Locale locale53 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet54 = locale53.getUnicodeLocaleAttributes();
        java.lang.Object[] objArray55 = strSet54.toArray();
        boolean boolean57 = strSet54.remove((java.lang.Object) "en");
        boolean boolean58 = strSet27.addAll((java.util.Collection<java.lang.String>) strSet54);
        java.util.Locale locale59 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet60 = locale59.getUnicodeLocaleAttributes();
        java.lang.Object[] objArray61 = strSet60.toArray();
        java.util.Locale locale62 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet63 = locale62.getUnicodeLocaleAttributes();
        boolean boolean64 = strSet60.removeAll((java.util.Collection<java.lang.String>) strSet63);
        strSet60.clear();
        java.util.Locale locale66 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet67 = locale66.getUnicodeLocaleAttributes();
        org.joda.time.DurationFieldType durationFieldType68 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.DurationFieldType durationFieldType69 = org.joda.time.DurationFieldType.hours();
        org.joda.time.DurationFieldType[] durationFieldTypeArray70 = new org.joda.time.DurationFieldType[] { durationFieldType68, durationFieldType69 };
        org.joda.time.DurationFieldType[] durationFieldTypeArray71 = strSet67.toArray(durationFieldTypeArray70);
        boolean boolean72 = strSet60.addAll((java.util.Collection<java.lang.String>) strSet67);
        java.util.Spliterator<java.lang.String> strSpliterator73 = strSet60.spliterator();
        java.util.Locale locale74 = java.util.Locale.CANADA_FRENCH;
        java.util.Set<java.lang.String> strSet75 = locale74.getUnicodeLocaleKeys();
        int int76 = strSet75.size();
        strSet75.clear();
        java.util.stream.Stream<java.lang.String> strStream78 = strSet75.stream();
        boolean boolean79 = strSet60.retainAll((java.util.Collection<java.lang.String>) strSet75);
        boolean boolean80 = strSet75.isEmpty();
        java.lang.Object[] objArray81 = strSet75.toArray();
        boolean boolean82 = strSet27.retainAll((java.util.Collection<java.lang.String>) strSet75);
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en_CA");
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+00:00" + "'", str7, "+00:00");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 32L + "'", long9 == 32L);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "UTC" + "'", str10, "UTC");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+00:00" + "'", str15, "+00:00");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "fr");
        org.junit.Assert.assertNotNull(localeArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNull(locale21);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "");
        org.junit.Assert.assertNotNull(strSet23);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[]");
        org.junit.Assert.assertNotNull(strList25);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "");
        org.junit.Assert.assertNotNull(strSet27);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[]");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "");
        org.junit.Assert.assertNotNull(strSet30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(strList32);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "");
        org.junit.Assert.assertNotNull(strSet34);
        org.junit.Assert.assertNotNull(strSet35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "100" + "'", str43, "100");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(durationField46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType48);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 915 + "'", int50 == 915);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(strItor52);
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "");
        org.junit.Assert.assertNotNull(strSet54);
        org.junit.Assert.assertNotNull(objArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray55), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray55), "[]");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "");
        org.junit.Assert.assertNotNull(strSet60);
        org.junit.Assert.assertNotNull(objArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray61), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray61), "[]");
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "");
        org.junit.Assert.assertNotNull(strSet63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "");
        org.junit.Assert.assertNotNull(strSet67);
        org.junit.Assert.assertNotNull(durationFieldType68);
        org.junit.Assert.assertNotNull(durationFieldType69);
        org.junit.Assert.assertNotNull(durationFieldTypeArray70);
        org.junit.Assert.assertNotNull(durationFieldTypeArray71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(strSpliterator73);
        org.junit.Assert.assertNotNull(locale74);
        org.junit.Assert.assertEquals(locale74.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(strSet75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertNotNull(strStream78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertNotNull(objArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray81), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray81), "[]");
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
    }

    @Test
    public void test10470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10470");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.millisOfDay();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime3.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime3.plusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minusHours((int) (short) 10);
        int int11 = localDateTime8.getMinuteOfHour();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime8.minusMinutes(0);
        org.joda.time.DurationFieldType durationFieldType14 = org.joda.time.DurationFieldType.weekyears();
        java.lang.String str15 = durationFieldType14.toString();
        org.joda.time.DurationFieldType durationFieldType16 = org.joda.time.DurationFieldType.millis();
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology19 = localDateTime18.getChronology();
        org.joda.time.DurationField durationField20 = chronology19.weekyears();
        org.joda.time.DurationField durationField21 = chronology19.centuries();
        org.joda.time.DurationField durationField22 = durationFieldType16.getField(chronology19);
        boolean boolean23 = durationFieldType14.isSupported(chronology19);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime8.withFieldAdded(durationFieldType14, (-1));
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology28 = localDateTime27.getChronology();
        org.joda.time.DateTimeField dateTimeField29 = chronology28.dayOfYear();
        org.joda.time.DateTimeField dateTimeField30 = chronology28.weekOfWeekyear();
        boolean boolean31 = durationFieldType14.isSupported(chronology28);
        org.joda.time.DurationField durationField32 = chronology28.minutes();
        org.joda.time.DurationField durationField33 = chronology28.months();
        java.lang.String str34 = durationField33.getName();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00" + "'", str2, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 23 + "'", int11 == 23);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(durationFieldType14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "weekyears" + "'", str15, "weekyears");
        org.junit.Assert.assertNotNull(durationFieldType16);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "months" + "'", str34, "months");
    }

    @Test
    public void test10471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10471");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DurationField durationField3 = chronology2.hours();
        java.lang.String str4 = chronology2.toString();
        org.joda.time.DateTimeField dateTimeField5 = chronology2.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField6 = chronology2.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime();
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.LocalDateTime localDateTime10 = localDateTime7.withDurationAdded(readableDuration8, (int) '#');
        org.joda.time.LocalDateTime.Property property11 = localDateTime10.weekyear();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime10.minusMillis((-1));
        org.joda.time.LocalDateTime.Property property14 = localDateTime10.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime15 = property14.roundHalfFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str18 = dateTimeZone16.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime19 = org.joda.time.LocalDateTime.now(dateTimeZone16);
        org.joda.time.LocalDateTime.Property property20 = localDateTime19.millisOfDay();
        org.joda.time.DurationFieldType durationFieldType21 = org.joda.time.DurationFieldType.centuries();
        boolean boolean22 = localDateTime19.equals((java.lang.Object) durationFieldType21);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray23 = localDateTime19.getFieldTypes();
        java.lang.String str24 = localDateTime19.toString();
        org.joda.time.LocalDateTime localDateTime26 = localDateTime19.plusMillis(22);
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.secondOfDay();
        boolean boolean28 = localDateTime19.isSupported(dateTimeFieldType27);
        int int29 = localDateTime15.indexOf(dateTimeFieldType27);
        int[] intArray31 = chronology2.get((org.joda.time.ReadablePartial) localDateTime15, 1645629358650L);
        org.joda.time.DurationField durationField32 = chronology2.millis();
        org.joda.time.DurationField durationField33 = chronology2.halfdays();
        org.joda.time.DateTimeField dateTimeField34 = chronology2.secondOfDay();
        org.joda.time.DateTimeField dateTimeField35 = chronology2.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField36 = chronology2.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField37 = chronology2.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField38 = chronology2.era();
        org.joda.time.DurationField durationField39 = chronology2.millis();
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "ISOChronology[UTC]" + "'", str4, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+00:00" + "'", str18, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(durationFieldType21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray23);
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "2022-02-22T07:23:34.895" + "'", str24, "2022-02-22T07:23:34.895");
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[2022, 2, 23, 54958650]");
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(durationField39);
    }

    @Test
    public void test10472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10472");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.millisOfDay();
        org.joda.time.DurationFieldType durationFieldType5 = org.joda.time.DurationFieldType.centuries();
        boolean boolean6 = localDateTime3.equals((java.lang.Object) durationFieldType5);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime3.withWeekOfWeekyear((int) (byte) 10);
        org.joda.time.DateTimeField[] dateTimeFieldArray9 = localDateTime3.getFields();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime3.minusSeconds(805);
        org.joda.time.LocalDateTime.Property property12 = localDateTime3.era();
        org.joda.time.DurationField durationField13 = property12.getLeapDurationField();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00" + "'", str2, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(durationFieldType5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(dateTimeFieldArray9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNull(durationField13);
    }

    @Test
    public void test10473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10473");
        java.util.Locale locale0 = java.util.Locale.US;
        java.util.Set<java.lang.String> strSet1 = locale0.getUnicodeLocaleKeys();
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str4 = dateTimeZone2.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime5 = org.joda.time.LocalDateTime.now(dateTimeZone2);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = localDateTime5.getFieldType((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime5.minusMonths(0);
        boolean boolean10 = strSet1.equals((java.lang.Object) 0);
        java.util.Locale locale11 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet12 = locale11.getUnicodeLocaleAttributes();
        org.joda.time.DurationFieldType durationFieldType13 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.DurationFieldType durationFieldType14 = org.joda.time.DurationFieldType.hours();
        org.joda.time.DurationFieldType[] durationFieldTypeArray15 = new org.joda.time.DurationFieldType[] { durationFieldType13, durationFieldType14 };
        org.joda.time.DurationFieldType[] durationFieldTypeArray16 = strSet12.toArray(durationFieldTypeArray15);
        java.util.Locale.LanguageRange[] languageRangeArray17 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList18 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList18, languageRangeArray17);
        java.util.Locale locale20 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale21 = java.util.Locale.CANADA;
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str24 = dateTimeZone22.getShortName((long) (short) 10);
        long long26 = dateTimeZone22.convertUTCToLocal((long) ' ');
        java.lang.String str27 = dateTimeZone22.toString();
        boolean boolean29 = dateTimeZone22.equals((java.lang.Object) (short) 100);
        java.util.Locale locale31 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str32 = dateTimeZone22.getShortName((long) (-1), locale31);
        java.util.Locale locale33 = java.util.Locale.CANADA;
        java.util.Locale locale34 = java.util.Locale.FRENCH;
        java.util.Locale[] localeArray35 = new java.util.Locale[] { locale20, locale21, locale31, locale33, locale34 };
        java.util.ArrayList<java.util.Locale> localeList36 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList36, localeArray35);
        java.util.Locale locale38 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList18, (java.util.Collection<java.util.Locale>) localeList36);
        java.util.Locale locale39 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet40 = locale39.getUnicodeLocaleAttributes();
        java.lang.Object[] objArray41 = strSet40.toArray();
        java.util.List<java.lang.String> strList42 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList18, (java.util.Collection<java.lang.String>) strSet40);
        java.util.Locale locale43 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet44 = locale43.getUnicodeLocaleAttributes();
        java.lang.Object[] objArray45 = strSet44.toArray();
        java.util.Locale locale46 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet47 = locale46.getUnicodeLocaleAttributes();
        boolean boolean48 = strSet44.removeAll((java.util.Collection<java.lang.String>) strSet47);
        java.util.List<java.lang.String> strList49 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList18, (java.util.Collection<java.lang.String>) strSet44);
        java.util.Locale locale50 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet51 = locale50.getUnicodeLocaleAttributes();
        java.util.Set<java.lang.String> strSet52 = locale50.getUnicodeLocaleAttributes();
        boolean boolean53 = strSet44.retainAll((java.util.Collection<java.lang.String>) strSet52);
        boolean boolean54 = strSet12.containsAll((java.util.Collection<java.lang.String>) strSet52);
        boolean boolean55 = strSet1.addAll((java.util.Collection<java.lang.String>) strSet12);
        java.util.Spliterator<java.lang.String> strSpliterator56 = strSet1.spliterator();
        java.util.Locale.Category category57 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale58 = java.util.Locale.FRENCH;
        java.util.Locale.setDefault(category57, locale58);
        org.joda.time.DateTimeFieldType dateTimeFieldType60 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.DateTimeField dateTimeField62 = dateTimeFieldType60.getField(chronology61);
        java.util.Locale locale64 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale65 = locale64.stripExtensions();
        java.lang.String str66 = dateTimeField62.getAsShortText(100, locale65);
        java.util.Locale.setDefault(category57, locale65);
        org.joda.time.tz.NameProvider nameProvider68 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale69 = java.util.Locale.CANADA;
        java.lang.String str72 = nameProvider68.getShortName(locale69, "fran\347ais", "2022-02-22T07:15:48.066");
        java.util.Locale.setDefault(category57, locale69);
        java.util.Locale locale74 = null;
        java.lang.String str75 = locale69.getDisplayScript(locale74);
        java.util.Locale.Category category76 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale77 = java.util.Locale.getDefault();
        java.lang.String str78 = locale77.getISO3Language();
        java.util.Locale.setDefault(category76, locale77);
        java.util.Locale locale80 = java.util.Locale.getDefault(category76);
        java.util.Locale locale81 = java.util.Locale.getDefault(category76);
        java.util.Set<java.lang.String> strSet82 = locale81.getUnicodeLocaleAttributes();
        java.lang.String str83 = locale69.getDisplayCountry(locale81);
        java.util.Set<java.lang.String> strSet84 = locale69.getUnicodeLocaleAttributes();
        boolean boolean86 = strSet84.equals((java.lang.Object) "26194683");
        boolean boolean87 = strSet1.containsAll((java.util.Collection<java.lang.String>) strSet84);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_US");
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00" + "'", str4, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "");
        org.junit.Assert.assertNotNull(strSet12);
        org.junit.Assert.assertNotNull(durationFieldType13);
        org.junit.Assert.assertNotNull(durationFieldType14);
        org.junit.Assert.assertNotNull(durationFieldTypeArray15);
        org.junit.Assert.assertNotNull(durationFieldTypeArray16);
        org.junit.Assert.assertNotNull(languageRangeArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "en_CA");
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "+00:00" + "'", str24, "+00:00");
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 32L + "'", long26 == 32L);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "UTC" + "'", str27, "UTC");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "+00:00" + "'", str32, "+00:00");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "fr");
        org.junit.Assert.assertNotNull(localeArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNull(locale38);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "");
        org.junit.Assert.assertNotNull(strSet40);
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[]");
        org.junit.Assert.assertNotNull(strList42);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "");
        org.junit.Assert.assertNotNull(strSet44);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[]");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "");
        org.junit.Assert.assertNotNull(strSet47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(strList49);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "");
        org.junit.Assert.assertNotNull(strSet51);
        org.junit.Assert.assertNotNull(strSet52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(strSpliterator56);
        org.junit.Assert.assertTrue("'" + category57 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category57.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "fr");
        org.junit.Assert.assertNotNull(dateTimeFieldType60);
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "100" + "'", str66, "100");
        org.junit.Assert.assertNotNull(nameProvider68);
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "en_CA");
        org.junit.Assert.assertNull(str72);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "" + "'", str75, "");
        org.junit.Assert.assertTrue("'" + category76 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category76.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale77);
        org.junit.Assert.assertEquals(locale77.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "fra" + "'", str78, "fra");
        org.junit.Assert.assertNotNull(locale80);
        org.junit.Assert.assertEquals(locale80.toString(), "fr");
        org.junit.Assert.assertNotNull(locale81);
        org.junit.Assert.assertEquals(locale81.toString(), "fr");
        org.junit.Assert.assertNotNull(strSet82);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "Canada" + "'", str83, "Canada");
        org.junit.Assert.assertNotNull(strSet84);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
    }

    @Test
    public void test10474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10474");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.millisOfDay();
        org.joda.time.ReadableInstant readableInstant5 = null;
        long long6 = property4.getDifferenceAsLong(readableInstant5);
        org.joda.time.DurationField durationField7 = property4.getLeapDurationField();
        java.lang.String str8 = property4.getAsString();
        org.joda.time.LocalDateTime localDateTime10 = property4.addToCopy(7);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.plusHours(0);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.plusYears(55000019);
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = localDateTime12.getFieldType(0);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00" + "'", str2, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNull(durationField7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "26614978" + "'", str8, "26614978");
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
    }

    @Test
    public void test10475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10475");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DurationField durationField3 = chronology2.weekyears();
        org.joda.time.DurationField durationField4 = chronology2.seconds();
        org.joda.time.DurationField durationField5 = chronology2.seconds();
        org.joda.time.DateTimeField dateTimeField6 = chronology2.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone7 = chronology2.getZone();
        org.joda.time.DateTimeField dateTimeField8 = chronology2.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str12 = dateTimeZone10.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime13 = org.joda.time.LocalDateTime.now(dateTimeZone10);
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.millisOfDay();
        long long15 = property14.remainder();
        int int16 = property14.getMinimumValueOverall();
        java.util.Locale.Category category17 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale18 = java.util.Locale.FRENCH;
        java.util.Locale.setDefault(category17, locale18);
        java.lang.String str20 = locale18.getDisplayName();
        int int21 = property14.getMaximumShortTextLength(locale18);
        java.lang.String str22 = locale18.getDisplayLanguage();
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology25 = localDateTime24.getChronology();
        org.joda.time.DurationField durationField26 = chronology25.weekyears();
        org.joda.time.DurationField durationField27 = chronology25.centuries();
        org.joda.time.DurationField durationField28 = chronology25.minutes();
        org.joda.time.DateTimeField dateTimeField29 = chronology25.monthOfYear();
        org.joda.time.DateTimeField dateTimeField30 = chronology25.halfdayOfDay();
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime();
        org.joda.time.ReadableDuration readableDuration32 = null;
        org.joda.time.LocalDateTime localDateTime34 = localDateTime31.withDurationAdded(readableDuration32, (int) '#');
        org.joda.time.LocalDateTime.Property property35 = localDateTime34.weekyear();
        org.joda.time.LocalDateTime localDateTime37 = localDateTime34.minusMillis((-1));
        org.joda.time.LocalDateTime.Property property38 = localDateTime34.dayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str41 = dateTimeZone39.getShortName((long) (short) 10);
        long long43 = dateTimeZone39.convertUTCToLocal((long) ' ');
        java.util.Locale locale45 = java.util.Locale.ROOT;
        java.lang.String str46 = dateTimeZone39.getName((long) (short) 0, locale45);
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str49 = dateTimeZone47.getShortName((long) (short) 10);
        long long51 = dateTimeZone47.convertUTCToLocal((long) ' ');
        java.lang.String str52 = dateTimeZone47.toString();
        boolean boolean54 = dateTimeZone47.equals((java.lang.Object) (short) 100);
        java.util.Locale locale56 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str57 = dateTimeZone47.getShortName((long) (-1), locale56);
        java.lang.String str58 = locale45.getDisplayVariant(locale56);
        int int59 = property38.getMaximumShortTextLength(locale56);
        java.lang.String str60 = locale56.getLanguage();
        int int61 = dateTimeField30.getMaximumTextLength(locale56);
        java.lang.String str62 = locale56.getDisplayScript();
        java.lang.String str63 = locale18.getDisplayName(locale56);
        java.util.Locale.Category category64 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale65 = java.util.Locale.getDefault();
        java.lang.String str66 = locale65.getISO3Language();
        java.util.Locale.setDefault(category64, locale65);
        java.util.Locale locale68 = java.util.Locale.getDefault(category64);
        java.util.Locale locale69 = java.util.Locale.ENGLISH;
        java.util.Locale.setDefault(category64, locale69);
        java.lang.String str71 = locale69.getDisplayScript();
        java.lang.String str72 = locale56.getDisplayScript(locale69);
        java.lang.String str73 = dateTimeField8.getAsText(1645629665734L, locale56);
        boolean boolean75 = dateTimeField8.isLeap((long) 26564721);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00" + "'", str12, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + category17 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category17.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "fran\347ais" + "'", str20, "fran\347ais");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 8 + "'", int21 == 8);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "fran\347ais" + "'", str22, "fran\347ais");
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "+00:00" + "'", str41, "+00:00");
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 32L + "'", long43 == 32L);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "+00:00" + "'", str46, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "+00:00" + "'", str49, "+00:00");
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 32L + "'", long51 == 32L);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "UTC" + "'", str52, "UTC");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "+00:00" + "'", str57, "+00:00");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 2 + "'", int59 == 2);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "fr" + "'", str60, "fr");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 2 + "'", int61 == 2);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "fran\347ais" + "'", str63, "fran\347ais");
        org.junit.Assert.assertTrue("'" + category64 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category64.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "fra" + "'", str66, "fra");
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "fr");
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "en");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "55265" + "'", str73, "55265");
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
    }

    @Test
    public void test10476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10476");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str3 = dateTimeZone1.getShortName((long) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str6 = dateTimeZone4.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime7 = org.joda.time.LocalDateTime.now(dateTimeZone4);
        long long9 = dateTimeZone1.getMillisKeepLocal(dateTimeZone4, 1645629358939L);
        java.lang.Object obj10 = null;
        boolean boolean11 = dateTimeZone1.equals(obj10);
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime((long) 28, dateTimeZone1);
        long long14 = dateTimeZone1.previousTransition(1645514199918L);
        java.lang.String str15 = dateTimeZone1.getID();
        boolean boolean16 = dateTimeZone1.isFixed();
        long long18 = dateTimeZone1.nextTransition(82425600654L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+00:00" + "'", str3, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00" + "'", str6, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1645629358939L + "'", long9 == 1645629358939L);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1645514199918L + "'", long14 == 1645514199918L);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "UTC" + "'", str15, "UTC");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 82425600654L + "'", long18 == 82425600654L);
    }

    @Test
    public void test10477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10477");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getShortName((long) (short) 10);
        long long4 = dateTimeZone0.convertUTCToLocal((long) ' ');
        java.lang.String str5 = dateTimeZone0.toString();
        long long7 = dateTimeZone0.previousTransition(32L);
        java.lang.String str9 = dateTimeZone0.getName(1645629371478L);
        long long12 = dateTimeZone0.convertLocalToUTC(0L, true);
        org.joda.time.LocalDateTime localDateTime13 = org.joda.time.LocalDateTime.now(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.weekOfWeekyear();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00" + "'", str2, "+00:00");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 32L + "'", long4 == 32L);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "UTC" + "'", str5, "UTC");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 32L + "'", long7 == 32L);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00" + "'", str9, "+00:00");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
    }

    @Test
    public void test10478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10478");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours(20);
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str5 = dateTimeZone3.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime6 = org.joda.time.LocalDateTime.now(dateTimeZone3);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.millisOfDay();
        long long8 = property7.remainder();
        org.joda.time.LocalDateTime localDateTime9 = property7.roundFloorCopy();
        java.lang.String str10 = property7.getAsShortText();
        org.joda.time.DurationField durationField11 = property7.getRangeDurationField();
        java.lang.String str12 = property7.getName();
        org.joda.time.LocalDateTime localDateTime13 = property7.roundHalfEvenCopy();
        java.util.Locale locale15 = java.util.Locale.forLanguageTag("2015");
        java.util.Locale.setDefault(locale15);
        java.lang.String str17 = property7.getAsText(locale15);
        java.lang.String str18 = dateTimeZone1.getShortName((long) 181, locale15);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+00:00" + "'", str5, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(localDateTime9);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "26615068" + "'", str10, "26615068");
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "millisOfDay" + "'", str12, "millisOfDay");
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "");
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "26615068" + "'", str17, "26615068");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+20:00" + "'", str18, "+20:00");
    }

    @Test
    public void test10479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10479");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((-52));
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        java.lang.Class<?> wildcardClass4 = dateTimeZone1.getClass();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test10480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10480");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DurationField durationField3 = chronology2.weekyears();
        org.joda.time.DurationField durationField4 = chronology2.centuries();
        org.joda.time.DurationField durationField5 = chronology2.minutes();
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime(chronology2);
        org.joda.time.DateTimeField dateTimeField7 = chronology2.monthOfYear();
        int int9 = dateTimeField7.getMaximumValue((long) 86399999);
        boolean boolean10 = dateTimeField7.isLenient();
        java.lang.String str12 = dateTimeField7.getAsText(1645629488790L);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 12 + "'", int9 == 12);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "February" + "'", str12, "February");
    }

    @Test
    public void test10481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10481");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology3 = localDateTime2.getChronology();
        org.joda.time.DurationField durationField4 = chronology3.weekyears();
        org.joda.time.DurationField durationField5 = chronology3.centuries();
        org.joda.time.DurationField durationField6 = chronology3.hours();
        boolean boolean7 = durationFieldType0.isSupported(chronology3);
        org.joda.time.DateTimeField dateTimeField8 = chronology3.secondOfDay();
        org.joda.time.DurationField durationField9 = chronology3.minutes();
        org.joda.time.DateTimeField dateTimeField10 = chronology3.halfdayOfDay();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str13 = dateTimeZone11.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime14 = org.joda.time.LocalDateTime.now(dateTimeZone11);
        org.joda.time.LocalDateTime.Property property15 = localDateTime14.millisOfDay();
        org.joda.time.DurationFieldType durationFieldType16 = org.joda.time.DurationFieldType.centuries();
        boolean boolean17 = localDateTime14.equals((java.lang.Object) durationFieldType16);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray18 = localDateTime14.getFieldTypes();
        java.lang.String str19 = localDateTime14.toString();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime14.plusMillis(22);
        org.joda.time.LocalDateTime.Property property22 = localDateTime14.monthOfYear();
        int int23 = localDateTime14.getDayOfYear();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str27 = dateTimeZone25.getShortName((long) (short) 10);
        long long29 = dateTimeZone25.convertUTCToLocal((long) ' ');
        java.lang.String str30 = dateTimeZone25.toString();
        boolean boolean32 = dateTimeZone25.equals((java.lang.Object) (short) 100);
        java.util.Locale locale34 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str35 = dateTimeZone25.getShortName((long) (-1), locale34);
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime(dateTimeZone25);
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime39 = localDateTime36.withField(dateTimeFieldType37, (int) (short) 100);
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology42 = localDateTime41.getChronology();
        org.joda.time.DurationField durationField43 = chronology42.weekyears();
        org.joda.time.DurationField durationField44 = chronology42.centuries();
        org.joda.time.DateTimeField dateTimeField45 = chronology42.minuteOfDay();
        long long49 = chronology42.add((long) 2, (long) 21, (int) '4');
        boolean boolean50 = dateTimeFieldType37.isSupported(chronology42);
        org.joda.time.DateTimeField dateTimeField51 = chronology42.weekOfWeekyear();
        java.util.Locale locale53 = java.util.Locale.GERMANY;
        java.lang.String str54 = locale53.getCountry();
        java.lang.String str55 = locale53.toLanguageTag();
        java.lang.String str56 = dateTimeField51.getAsShortText(27427155, locale53);
        java.lang.String str57 = dateTimeField10.getAsText((org.joda.time.ReadablePartial) localDateTime14, 0, locale53);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType59 = localDateTime14.getFieldType(26224);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 26224");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+00:00" + "'", str13, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(durationFieldType16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray18);
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "2022-02-22T07:23:35.100" + "'", str19, "2022-02-22T07:23:35.100");
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 53 + "'", int23 == 53);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "+00:00" + "'", str27, "+00:00");
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 32L + "'", long29 == 32L);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "UTC" + "'", str30, "UTC");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "+00:00" + "'", str35, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(durationField43);
        org.junit.Assert.assertNotNull(durationField44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 1094L + "'", long49 == 1094L);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "DE" + "'", str54, "DE");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "de-DE" + "'", str55, "de-DE");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "27427155" + "'", str56, "27427155");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "AM" + "'", str57, "AM");
    }

    @Test
    public void test10482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10482");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeField dateTimeField2 = dateTimeFieldType0.getField(chronology1);
        long long4 = dateTimeField2.roundFloor((long) (-1));
        java.util.Locale.Builder builder5 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder7 = builder5.addUnicodeLocaleAttribute("und");
        java.util.Locale locale8 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale9 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str10 = locale8.getDisplayCountry(locale9);
        java.lang.String str11 = locale9.getDisplayName();
        java.util.Locale.Builder builder12 = builder7.setLocale(locale9);
        int int13 = dateTimeField2.getMaximumShortTextLength(locale9);
        int int15 = dateTimeField2.getLeapAmount((long) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateTimeField dateTimeField18 = dateTimeFieldType16.getField(chronology17);
        long long20 = dateTimeField18.roundFloor((long) (-1));
        java.util.Locale.Builder builder21 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder23 = builder21.addUnicodeLocaleAttribute("und");
        java.util.Locale locale24 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale25 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str26 = locale24.getDisplayCountry(locale25);
        java.lang.String str27 = locale25.getDisplayName();
        java.util.Locale.Builder builder28 = builder23.setLocale(locale25);
        int int29 = dateTimeField18.getMaximumShortTextLength(locale25);
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str32 = dateTimeZone30.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime33 = org.joda.time.LocalDateTime.now(dateTimeZone30);
        org.joda.time.LocalDateTime.Property property34 = localDateTime33.millisOfDay();
        org.joda.time.ReadableInstant readableInstant35 = null;
        long long36 = property34.getDifferenceAsLong(readableInstant35);
        org.joda.time.DurationField durationField37 = property34.getLeapDurationField();
        java.lang.String str38 = property34.getAsString();
        org.joda.time.LocalDateTime localDateTime39 = property34.roundFloorCopy();
        java.util.Locale locale40 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet41 = locale40.getUnicodeLocaleAttributes();
        java.util.Set<java.lang.String> strSet42 = locale40.getUnicodeLocaleAttributes();
        java.lang.String str43 = dateTimeField18.getAsShortText((org.joda.time.ReadablePartial) localDateTime39, locale40);
        int int44 = localDateTime39.getHourOfDay();
        int int45 = localDateTime39.getHourOfDay();
        java.util.Locale locale47 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale48 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str49 = locale47.getDisplayCountry(locale48);
        java.lang.String str50 = dateTimeField2.getAsShortText((org.joda.time.ReadablePartial) localDateTime39, 365, locale48);
        int int51 = localDateTime39.getDayOfMonth();
        org.joda.time.LocalDateTime.Property property52 = localDateTime39.monthOfYear();
        org.joda.time.ReadablePeriod readablePeriod53 = null;
        org.joda.time.LocalDateTime localDateTime55 = localDateTime39.withPeriodAdded(readablePeriod53, (int) (byte) 10);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-60000L) + "'", long4 == (-60000L));
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Canada" + "'", str10, "Canada");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "French (Canada)" + "'", str11, "French (Canada)");
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 4 + "'", int13 == 4);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-60000L) + "'", long20 == (-60000L));
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Canada" + "'", str26, "Canada");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "French (Canada)" + "'", str27, "French (Canada)");
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 4 + "'", int29 == 4);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "+00:00" + "'", str32, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertNull(durationField37);
// flaky:         org.junit.Assert.assertEquals("'" + str38 + "' != '" + "26615118" + "'", str38, "26615118");
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "");
        org.junit.Assert.assertNotNull(strSet41);
        org.junit.Assert.assertNotNull(strSet42);
// flaky:         org.junit.Assert.assertEquals("'" + str43 + "' != '" + "443" + "'", str43, "443");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 7 + "'", int44 == 7);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 7 + "'", int45 == 7);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "Canada" + "'", str49, "Canada");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "365" + "'", str50, "365");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 22 + "'", int51 == 22);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(localDateTime55);
    }

    @Test
    public void test10483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10483");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.millisOfDay();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime3.withYear((int) (short) 100);
        org.joda.time.LocalDateTime.Property property7 = localDateTime3.dayOfMonth();
        int int8 = localDateTime3.getSecondOfMinute();
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.LocalDateTime localDateTime11 = localDateTime3.withPeriodAdded(readablePeriod9, (int) (short) 100);
        org.joda.time.LocalDateTime.Property property12 = localDateTime11.centuryOfEra();
        boolean boolean13 = property12.isLeap();
        int int14 = property12.getMinimumValueOverall();
        java.util.Locale.Category category15 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale16 = java.util.Locale.FRENCH;
        java.util.Locale.setDefault(category15, locale16);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTimeField dateTimeField20 = dateTimeFieldType18.getField(chronology19);
        java.util.Locale locale22 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale23 = locale22.stripExtensions();
        java.lang.String str24 = dateTimeField20.getAsShortText(100, locale23);
        java.util.Locale.setDefault(category15, locale23);
        java.util.Locale locale26 = java.util.Locale.getDefault(category15);
        java.util.Set<java.lang.String> strSet27 = locale26.getUnicodeLocaleKeys();
        java.util.Set<java.lang.String> strSet28 = locale26.getUnicodeLocaleAttributes();
        int int29 = property12.getMaximumShortTextLength(locale26);
        java.lang.String str30 = locale26.getDisplayCountry();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00" + "'", str2, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 35 + "'", int8 == 35);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + category15 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category15.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "fr");
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "100" + "'", str24, "100");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(strSet27);
        org.junit.Assert.assertNotNull(strSet28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 7 + "'", int29 == 7);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Canada" + "'", str30, "Canada");
    }

    @Test
    public void test10484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10484");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.millisOfDay();
        long long5 = property4.remainder();
        org.joda.time.LocalDateTime localDateTime6 = property4.roundFloorCopy();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime();
        java.lang.String str8 = localDateTime7.toString();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime7.plusMonths((int) (short) -1);
        org.joda.time.LocalDateTime.Property property11 = localDateTime7.yearOfEra();
        int int12 = property4.compareTo((org.joda.time.ReadablePartial) localDateTime7);
        org.joda.time.LocalDateTime localDateTime14 = property4.setCopy(26151696);
        org.joda.time.LocalDateTime localDateTime15 = property4.roundHalfFloorCopy();
        int int16 = property4.getMaximumValueOverall();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00" + "'", str2, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertNotNull(localDateTime6);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "2022-02-22T07:23:35.151" + "'", str8, "2022-02-22T07:23:35.151");
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 86399999 + "'", int16 == 86399999);
    }

    @Test
    public void test10485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10485");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getShortName((long) (short) 10);
        long long4 = dateTimeZone0.convertUTCToLocal((long) ' ');
        java.lang.String str5 = dateTimeZone0.toString();
        long long8 = dateTimeZone0.adjustOffset((long) (short) 100, false);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime(dateTimeZone0);
        long long12 = dateTimeZone0.convertUTCToLocal((long) 0);
        long long15 = dateTimeZone0.convertLocalToUTC(1645629366715L, false);
        long long19 = dateTimeZone0.convertLocalToUTC((long) 81287455, true, 1645165151799L);
        java.util.TimeZone timeZone20 = dateTimeZone0.toTimeZone();
        int int21 = timeZone20.getDSTSavings();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00" + "'", str2, "+00:00");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 32L + "'", long4 == 32L);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "UTC" + "'", str5, "UTC");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 100L + "'", long8 == 100L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1645629366715L + "'", long15 == 1645629366715L);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 81287455L + "'", long19 == 81287455L);
        org.junit.Assert.assertNotNull(timeZone20);
        org.junit.Assert.assertEquals(timeZone20.getDisplayName(), "Temps universel coordonn\351");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
    }

    @Test
    public void test10486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10486");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DurationField durationField3 = chronology2.weekyears();
        org.joda.time.DateTimeField dateTimeField4 = chronology2.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField5 = chronology2.secondOfDay();
        org.joda.time.DurationField durationField6 = chronology2.hours();
        org.joda.time.DurationField durationField7 = chronology2.halfdays();
        org.joda.time.DateTimeField dateTimeField8 = chronology2.millisOfDay();
        org.joda.time.DateTimeField dateTimeField9 = chronology2.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField10 = chronology2.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str13 = dateTimeZone11.getShortName((long) (short) 10);
        long long15 = dateTimeZone11.convertUTCToLocal((long) ' ');
        java.lang.String str16 = dateTimeZone11.toString();
        long long18 = dateTimeZone11.previousTransition(32L);
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime(dateTimeZone11);
        int int21 = dateTimeZone11.getOffset((-1L));
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology25 = localDateTime24.getChronology();
        org.joda.time.DurationField durationField26 = chronology25.weekyears();
        org.joda.time.DurationField durationField27 = chronology25.centuries();
        org.joda.time.DurationField durationField28 = chronology25.hours();
        boolean boolean29 = dateTimeFieldType22.isSupported(chronology25);
        org.joda.time.DateTimeField dateTimeField30 = chronology25.weekOfWeekyear();
        org.joda.time.DurationField durationField31 = chronology25.days();
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime();
        java.lang.String str33 = localDateTime32.toString();
        int int34 = localDateTime32.getCenturyOfEra();
        org.joda.time.LocalDateTime localDateTime36 = localDateTime32.minusMonths(2);
        int[] intArray38 = chronology25.get((org.joda.time.ReadablePartial) localDateTime36, 86340010L);
        org.joda.time.DurationField durationField39 = chronology25.months();
        org.joda.time.LocalDateTime localDateTime40 = new org.joda.time.LocalDateTime((java.lang.Object) (-1L), chronology25);
        int int41 = localDateTime40.getMillisOfSecond();
        org.joda.time.LocalDateTime.Property property42 = localDateTime40.millisOfDay();
        java.util.Locale locale44 = null;
        java.lang.String str45 = dateTimeField10.getAsText((org.joda.time.ReadablePartial) localDateTime40, 60, locale44);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+00:00" + "'", str13, "+00:00");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 32L + "'", long15 == 32L);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "UTC" + "'", str16, "UTC");
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 32L + "'", long18 == 32L);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(durationField31);
// flaky:         org.junit.Assert.assertEquals("'" + str33 + "' != '" + "2022-02-22T07:23:35.180" + "'", str33, "2022-02-22T07:23:35.180");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 20 + "'", int34 == 20);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[1970, 1, 1, 86340010]");
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 999 + "'", int41 == 999);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "60" + "'", str45, "60");
    }

    @Test
    public void test10487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10487");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getShortName((long) (short) 10);
        long long4 = dateTimeZone0.convertUTCToLocal((long) ' ');
        java.lang.String str5 = dateTimeZone0.toString();
        boolean boolean7 = dateTimeZone0.equals((java.lang.Object) (short) 100);
        java.util.Locale locale9 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str10 = dateTimeZone0.getShortName((long) (-1), locale9);
        long long14 = dateTimeZone0.convertLocalToUTC((long) (short) 100, true, (-1209599395L));
        java.lang.String str15 = dateTimeZone0.toString();
        long long18 = dateTimeZone0.adjustOffset(0L, true);
        java.lang.String str20 = dateTimeZone0.getShortName(1645629489808L);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str23 = dateTimeZone21.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime24 = org.joda.time.LocalDateTime.now(dateTimeZone21);
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str27 = dateTimeZone25.getShortName((long) (short) 10);
        long long29 = dateTimeZone25.convertUTCToLocal((long) ' ');
        java.lang.String str30 = dateTimeZone25.toString();
        boolean boolean32 = dateTimeZone25.equals((java.lang.Object) (short) 100);
        java.util.Locale locale34 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str35 = dateTimeZone25.getShortName((long) (-1), locale34);
        long long37 = dateTimeZone21.getMillisKeepLocal(dateTimeZone25, (long) (byte) -1);
        java.util.Locale locale39 = java.util.Locale.US;
        java.lang.String str40 = dateTimeZone21.getShortName(1645629357666L, locale39);
        long long43 = dateTimeZone21.convertLocalToUTC(1645629471948L, true);
        long long45 = dateTimeZone0.getMillisKeepLocal(dateTimeZone21, 1645629375703L);
        java.lang.String str47 = dateTimeZone0.getName((-125970748789069L));
        java.lang.String str49 = dateTimeZone0.getNameKey(1646092800000L);
        boolean boolean51 = dateTimeZone0.isStandardOffset((long) 25);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00" + "'", str2, "+00:00");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 32L + "'", long4 == 32L);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "UTC" + "'", str5, "UTC");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+00:00" + "'", str10, "+00:00");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 100L + "'", long14 == 100L);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "UTC" + "'", str15, "UTC");
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+00:00" + "'", str20, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "+00:00" + "'", str23, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "+00:00" + "'", str27, "+00:00");
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 32L + "'", long29 == 32L);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "UTC" + "'", str30, "UTC");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "+00:00" + "'", str35, "+00:00");
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + (-1L) + "'", long37 == (-1L));
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "+00:00" + "'", str40, "+00:00");
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 1645629471948L + "'", long43 == 1645629471948L);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 1645629375703L + "'", long45 == 1645629375703L);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "+00:00" + "'", str47, "+00:00");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "UTC" + "'", str49, "UTC");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
    }

    @Test
    public void test10488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10488");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getShortName((long) (short) 10);
        long long4 = dateTimeZone0.convertUTCToLocal((long) ' ');
        java.lang.String str5 = dateTimeZone0.toString();
        boolean boolean7 = dateTimeZone0.equals((java.lang.Object) (short) 100);
        java.util.Locale locale9 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str10 = dateTimeZone0.getShortName((long) (-1), locale9);
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime11.withField(dateTimeFieldType12, (int) (short) 100);
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology17 = localDateTime16.getChronology();
        org.joda.time.DurationField durationField18 = chronology17.weekyears();
        org.joda.time.DurationField durationField19 = chronology17.centuries();
        org.joda.time.DateTimeField dateTimeField20 = chronology17.minuteOfDay();
        long long24 = chronology17.add((long) 2, (long) 21, (int) '4');
        boolean boolean25 = dateTimeFieldType12.isSupported(chronology17);
        org.joda.time.DateTimeField dateTimeField26 = chronology17.weekOfWeekyear();
        org.joda.time.DurationField durationField27 = chronology17.halfdays();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str30 = dateTimeZone28.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime31 = org.joda.time.LocalDateTime.now(dateTimeZone28);
        org.joda.time.LocalDateTime.Property property32 = localDateTime31.millisOfDay();
        org.joda.time.LocalDateTime localDateTime34 = localDateTime31.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime31.plusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime38 = localDateTime36.minusHours((int) (short) 10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray39 = localDateTime36.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime41 = localDateTime36.minusMillis(0);
        org.joda.time.LocalDateTime localDateTime43 = localDateTime41.withWeekyear(1970);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime43.plusDays(15);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter46 = null;
        java.lang.String str47 = localDateTime43.toString(dateTimeFormatter46);
        org.joda.time.LocalDateTime localDateTime49 = localDateTime43.withHourOfDay(15);
        org.joda.time.LocalDateTime localDateTime51 = localDateTime49.minusMillis(1645629378);
        long long53 = chronology17.set((org.joda.time.ReadablePartial) localDateTime49, 1645629417380L);
        org.joda.time.LocalDateTime localDateTime55 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology56 = localDateTime55.getChronology();
        org.joda.time.DateTimeField dateTimeField57 = chronology56.halfdayOfDay();
        org.joda.time.DurationField durationField58 = dateTimeField57.getRangeDurationField();
        org.joda.time.DateTimeZone dateTimeZone59 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str61 = dateTimeZone59.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime62 = org.joda.time.LocalDateTime.now(dateTimeZone59);
        org.joda.time.LocalDateTime.Property property63 = localDateTime62.millisOfDay();
        java.lang.String str64 = property63.getName();
        org.joda.time.LocalDateTime localDateTime65 = property63.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime67 = localDateTime65.plusYears((int) (short) -1);
        int[] intArray75 = new int[] { 'a', (-1), 10, 26151696, 4, (byte) 1 };
        int[] intArray77 = dateTimeField57.set((org.joda.time.ReadablePartial) localDateTime65, 0, intArray75, (int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone78 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str80 = dateTimeZone78.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime81 = org.joda.time.LocalDateTime.now(dateTimeZone78);
        org.joda.time.LocalDateTime.Property property82 = localDateTime81.millisOfDay();
        org.joda.time.LocalDateTime localDateTime84 = localDateTime81.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime86 = localDateTime81.plusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime88 = localDateTime86.minusHours((int) (short) 10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray89 = localDateTime86.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime91 = localDateTime86.withMillisOfDay((int) '4');
        boolean boolean92 = localDateTime65.isBefore((org.joda.time.ReadablePartial) localDateTime86);
        org.joda.time.LocalDateTime.Property property93 = localDateTime86.hourOfDay();
        org.joda.time.LocalDateTime localDateTime94 = property93.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime localDateTime95 = property93.roundHalfEvenCopy();
        long long97 = chronology17.set((org.joda.time.ReadablePartial) localDateTime95, (long) 948);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00" + "'", str2, "+00:00");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 32L + "'", long4 == 32L);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "UTC" + "'", str5, "UTC");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+00:00" + "'", str10, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 1094L + "'", long24 == 1094L);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "+00:00" + "'", str30, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray39);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(localDateTime45);
// flaky:         org.junit.Assert.assertEquals("'" + str47 + "' != '" + "1970-02-18T15:23:35.248" + "'", str47, "1970-02-18T15:23:35.248");
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(localDateTime51);
// flaky:         org.junit.Assert.assertTrue("'" + long53 + "' != '" + 4202615248L + "'", long53 == 4202615248L);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(durationField58);
        org.junit.Assert.assertNotNull(dateTimeZone59);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "+00:00" + "'", str61, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "millisOfDay" + "'", str64, "millisOfDay");
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[0, 1, 10, 26151696, 4, 1]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[0, 1, 10, 26151696, 4, 1]");
        org.junit.Assert.assertNotNull(dateTimeZone78);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "+00:00" + "'", str80, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime81);
        org.junit.Assert.assertNotNull(property82);
        org.junit.Assert.assertNotNull(localDateTime84);
        org.junit.Assert.assertNotNull(localDateTime86);
        org.junit.Assert.assertNotNull(localDateTime88);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray89);
        org.junit.Assert.assertNotNull(localDateTime91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertNotNull(property93);
        org.junit.Assert.assertNotNull(localDateTime94);
        org.junit.Assert.assertNotNull(localDateTime95);
// flaky:         org.junit.Assert.assertTrue("'" + long97 + "' != '" + 1645628400000L + "'", long97 == 1645628400000L);
    }

    @Test
    public void test10489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10489");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str3 = dateTimeZone1.getShortName((long) (short) 10);
        long long5 = dateTimeZone1.convertUTCToLocal((long) ' ');
        java.lang.String str6 = dateTimeZone1.toString();
        java.lang.String str7 = dateTimeZone1.toString();
        java.util.Locale locale9 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale10 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str11 = locale9.getDisplayCountry(locale10);
        java.util.Locale locale12 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale13 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str14 = locale12.getDisplayCountry(locale13);
        java.lang.String str15 = locale9.getDisplayVariant(locale12);
        java.util.Locale locale16 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale17 = locale16.stripExtensions();
        java.lang.String str18 = locale9.getDisplayLanguage(locale17);
        java.lang.String str19 = dateTimeZone1.getName((long) 67, locale17);
        java.lang.String str21 = dateTimeZone1.getName(1645629370103L);
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime((java.lang.Object) "26232281", dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str25 = dateTimeZone23.getShortName((long) (short) 10);
        long long27 = dateTimeZone23.convertUTCToLocal((long) ' ');
        java.lang.String str28 = dateTimeZone23.toString();
        boolean boolean30 = dateTimeZone23.equals((java.lang.Object) (short) 100);
        java.util.Locale locale32 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str33 = dateTimeZone23.getShortName((long) (-1), locale32);
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime(dateTimeZone23);
        int int36 = dateTimeZone23.getOffset((long) (short) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone23);
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forOffsetMillis((int) 'a');
        org.joda.time.LocalDateTime localDateTime40 = new org.joda.time.LocalDateTime(dateTimeZone39);
        long long42 = dateTimeZone23.getMillisKeepLocal(dateTimeZone39, (long) 43);
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(0, 0);
        long long48 = dateTimeZone45.adjustOffset((long) 'a', false);
        long long50 = dateTimeZone23.getMillisKeepLocal(dateTimeZone45, 1645629488000L);
        java.lang.String str51 = dateTimeZone23.getID();
        long long53 = dateTimeZone1.getMillisKeepLocal(dateTimeZone23, 1645629615087L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+00:00" + "'", str3, "+00:00");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 32L + "'", long5 == 32L);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "UTC" + "'", str6, "UTC");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "UTC" + "'", str7, "UTC");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Canada" + "'", str11, "Canada");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Canada" + "'", str14, "Canada");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "fran\347ais" + "'", str18, "fran\347ais");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "+00:00" + "'", str19, "+00:00");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "+00:00" + "'", str21, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "+00:00" + "'", str25, "+00:00");
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 32L + "'", long27 == 32L);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "UTC" + "'", str28, "UTC");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "+00:00" + "'", str33, "+00:00");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + (-54L) + "'", long42 == (-54L));
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 97L + "'", long48 == 97L);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 1645629488000L + "'", long50 == 1645629488000L);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "UTC" + "'", str51, "UTC");
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 1645629615087L + "'", long53 == 1645629615087L);
    }

    @Test
    public void test10490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10490");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.millisOfDay();
        org.joda.time.ReadableInstant readableInstant5 = null;
        long long6 = property4.getDifferenceAsLong(readableInstant5);
        java.util.Locale locale7 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str8 = locale7.getISO3Language();
        java.lang.String str9 = property4.getAsShortText(locale7);
        org.joda.time.DurationField durationField10 = property4.getDurationField();
        long long13 = durationField10.add((long) 1, 10);
        int int15 = durationField10.getValue((long) 0);
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str18 = dateTimeZone16.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime19 = org.joda.time.LocalDateTime.now(dateTimeZone16);
        org.joda.time.LocalDateTime.Property property20 = localDateTime19.millisOfDay();
        org.joda.time.ReadableInstant readableInstant21 = null;
        long long22 = property20.getDifferenceAsLong(readableInstant21);
        int int23 = property20.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime24 = property20.roundHalfEvenCopy();
        org.joda.time.DurationField durationField25 = property20.getRangeDurationField();
        int int26 = durationField10.compareTo(durationField25);
        long long28 = durationField25.getMillis(0L);
        long long30 = durationField25.getValueAsLong((-59990L));
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology33 = localDateTime32.getChronology();
        org.joda.time.DurationField durationField34 = chronology33.weekyears();
        int int35 = durationField25.compareTo(durationField34);
        int int38 = durationField25.getValue(1645629571788L, (-1010873801L));
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00" + "'", str2, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "fra" + "'", str8, "fra");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "26615310" + "'", str9, "26615310");
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 11L + "'", long13 == 11L);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+00:00" + "'", str18, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 86399999 + "'", int23 == 86399999);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 19046 + "'", int38 == 19046);
    }

    @Test
    public void test10491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10491");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.millisOfDay();
        java.lang.String str5 = property4.getName();
        org.joda.time.LocalDateTime localDateTime6 = property4.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.minusHours(0);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str12 = dateTimeZone10.getShortName((long) (short) 10);
        long long14 = dateTimeZone10.convertUTCToLocal((long) ' ');
        java.lang.String str15 = dateTimeZone10.toString();
        boolean boolean17 = dateTimeZone10.equals((java.lang.Object) (short) 100);
        java.util.Locale locale19 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str20 = dateTimeZone10.getShortName((long) (-1), locale19);
        long long23 = dateTimeZone10.convertLocalToUTC((long) (short) 10, true);
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime((long) 7, dateTimeZone10);
        org.joda.time.DateTime dateTime25 = localDateTime8.toDateTime(dateTimeZone10);
        int int26 = localDateTime8.getYear();
        org.joda.time.LocalDateTime localDateTime28 = localDateTime8.minusYears(26534042);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00" + "'", str2, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "millisOfDay" + "'", str5, "millisOfDay");
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00" + "'", str12, "+00:00");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 32L + "'", long14 == 32L);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "UTC" + "'", str15, "UTC");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+00:00" + "'", str20, "+00:00");
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 10L + "'", long23 == 10L);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2022 + "'", int26 == 2022);
        org.junit.Assert.assertNotNull(localDateTime28);
    }

    @Test
    public void test10492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10492");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        org.joda.time.LocalDateTime localDateTime3 = localDateTime0.withDurationAdded(readableDuration1, (int) '#');
        org.joda.time.LocalDateTime.Property property4 = localDateTime0.era();
        int int5 = localDateTime0.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime0.withWeekOfWeekyear((int) (byte) 1);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.monthOfYear();
        java.util.Locale locale9 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale locale10 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet11 = locale10.getUnicodeLocaleAttributes();
        java.lang.String str12 = locale9.getDisplayCountry(locale10);
        java.util.Locale locale13 = locale10.stripExtensions();
        int int14 = property8.getMaximumTextLength(locale13);
        org.joda.time.LocalDateTime localDateTime15 = property8.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.plusWeeks(0);
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.LocalDateTime localDateTime20 = localDateTime15.withDurationAdded(readableDuration18, 26409);
        // The following exception was thrown during execution in test generation
        try {
            int int22 = localDateTime20.getValue(14);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 14");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 22 + "'", int5 == 22);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "");
        org.junit.Assert.assertNotNull(strSet11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "China" + "'", str12, "China");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 9 + "'", int14 == 9);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime20);
    }

    @Test
    public void test10493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10493");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.millisOfDay();
        int int5 = property4.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime7 = property4.setCopy((int) (byte) 1);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.yearOfEra();
        int int9 = property8.getMaximumValueOverall();
        org.joda.time.LocalDateTime localDateTime10 = property8.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime();
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.LocalDateTime localDateTime14 = localDateTime11.withDurationAdded(readableDuration12, (int) '#');
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.withYear(0);
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.minus(readableDuration17);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime16.withDayOfYear(67);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.minusMillis(54976760);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.DurationFieldType durationFieldType24 = dateTimeFieldType23.getDurationType();
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology27 = localDateTime26.getChronology();
        org.joda.time.DurationField durationField28 = chronology27.weekyears();
        org.joda.time.DurationField durationField29 = chronology27.centuries();
        boolean boolean30 = durationFieldType24.isSupported(chronology27);
        org.joda.time.DurationField durationField31 = chronology27.halfdays();
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.Chronology chronology33 = chronology27.withZone(dateTimeZone32);
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str36 = dateTimeZone34.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime37 = org.joda.time.LocalDateTime.now(dateTimeZone34);
        org.joda.time.LocalDateTime.Property property38 = localDateTime37.millisOfDay();
        org.joda.time.LocalDateTime localDateTime40 = localDateTime37.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime37.plusHours((int) ' ');
        org.joda.time.ReadableInstant readableInstant43 = null;
        org.joda.time.DateTime dateTime44 = localDateTime42.toDateTime(readableInstant43);
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str47 = dateTimeZone45.getShortName((long) (short) 10);
        long long49 = dateTimeZone45.convertUTCToLocal((long) ' ');
        java.lang.String str50 = dateTimeZone45.toString();
        long long52 = dateTimeZone45.previousTransition(32L);
        long long55 = dateTimeZone45.convertLocalToUTC(97L, false);
        boolean boolean56 = dateTime44.equals((java.lang.Object) false);
        org.joda.time.DateTimeZone dateTimeZone57 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str59 = dateTimeZone57.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime60 = org.joda.time.LocalDateTime.now(dateTimeZone57);
        org.joda.time.LocalDateTime.Property property61 = localDateTime60.millisOfDay();
        org.joda.time.LocalDateTime localDateTime63 = localDateTime60.withYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime65 = localDateTime60.plusHours((int) ' ');
        org.joda.time.ReadableInstant readableInstant66 = null;
        org.joda.time.DateTime dateTime67 = localDateTime65.toDateTime(readableInstant66);
        long long68 = dateTime67.getMillis();
        org.joda.time.DateTimeZone dateTimeZone69 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str71 = dateTimeZone69.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime72 = org.joda.time.LocalDateTime.now(dateTimeZone69);
        org.joda.time.DateTimeFieldType dateTimeFieldType74 = localDateTime72.getFieldType((int) (short) 0);
        boolean boolean75 = dateTime67.isSupported(dateTimeFieldType74);
        boolean boolean76 = dateTime44.isAfter((org.joda.time.ReadableInstant) dateTime67);
        java.lang.String str77 = dateTime44.toString();
        boolean boolean79 = dateTime44.equals((java.lang.Object) (short) 1);
        int int80 = dateTimeZone32.getOffset((org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.LocalDateTime localDateTime81 = new org.joda.time.LocalDateTime(dateTimeZone32);
        int int83 = dateTimeZone32.getOffset((long) 67);
        org.joda.time.LocalDateTime localDateTime84 = new org.joda.time.LocalDateTime(dateTimeZone32);
        int int86 = dateTimeZone32.getOffset(0L);
        org.joda.time.LocalDateTime localDateTime87 = new org.joda.time.LocalDateTime(dateTimeZone32);
        org.joda.time.DateTime dateTime88 = localDateTime20.toDateTime(dateTimeZone32);
        long long89 = property8.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime88);
        org.joda.time.DateTimeZone dateTimeZone90 = dateTime88.getZone();
        java.lang.String str92 = dateTimeZone90.getNameKey((-62162699945711L));
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00" + "'", str2, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 86399999 + "'", int5 == 86399999);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 292278993 + "'", int9 == 292278993);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertNotNull(durationFieldType24);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "+00:00" + "'", str36, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "+00:00" + "'", str47, "+00:00");
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 32L + "'", long49 == 32L);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "UTC" + "'", str50, "UTC");
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 32L + "'", long52 == 32L);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 97L + "'", long55 == 97L);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(dateTimeZone57);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "+00:00" + "'", str59, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertNotNull(dateTime67);
// flaky:         org.junit.Assert.assertTrue("'" + long68 + "' != '" + 1645629815351L + "'", long68 == 1645629815351L);
        org.junit.Assert.assertNotNull(dateTimeZone69);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "+00:00" + "'", str71, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime72);
        org.junit.Assert.assertNotNull(dateTimeFieldType74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str77 + "' != '" + "2022-02-23T15:23:35.351Z" + "'", str77, "2022-02-23T15:23:35.351Z");
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertNotNull(dateTime88);
        org.junit.Assert.assertTrue("'" + long89 + "' != '" + 2021L + "'", long89 == 2021L);
        org.junit.Assert.assertNotNull(dateTimeZone90);
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "UTC" + "'", str92, "UTC");
    }

    @Test
    public void test10494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10494");
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology3 = localDateTime2.getChronology();
        org.joda.time.DurationField durationField4 = chronology3.weekyears();
        org.joda.time.DurationField durationField5 = chronology3.centuries();
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime((long) (byte) 0, chronology3);
        org.joda.time.DurationField durationField7 = chronology3.millis();
        org.joda.time.DateTimeField dateTimeField8 = chronology3.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField9 = chronology3.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField10 = chronology3.halfdayOfDay();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str13 = dateTimeZone11.getShortName((long) (short) 10);
        long long15 = dateTimeZone11.convertUTCToLocal((long) ' ');
        java.lang.String str16 = dateTimeZone11.toString();
        boolean boolean18 = dateTimeZone11.equals((java.lang.Object) (short) 100);
        java.util.Locale locale20 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str21 = dateTimeZone11.getShortName((long) (-1), locale20);
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime(dateTimeZone11);
        int int24 = dateTimeZone11.getOffset((long) (short) 10);
        boolean boolean25 = dateTimeZone11.isFixed();
        boolean boolean27 = dateTimeZone11.isStandardOffset((long) (byte) 1);
        java.lang.String str28 = dateTimeZone11.toString();
        org.joda.time.Chronology chronology29 = chronology3.withZone(dateTimeZone11);
        org.joda.time.DateTimeField dateTimeField30 = chronology29.weekOfWeekyear();
        org.joda.time.DurationField durationField31 = chronology29.millis();
        long long34 = durationField31.getMillis((-125970722779069L), 0L);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+00:00" + "'", str13, "+00:00");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 32L + "'", long15 == 32L);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "UTC" + "'", str16, "UTC");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "+00:00" + "'", str21, "+00:00");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "UTC" + "'", str28, "UTC");
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + (-125970722779069L) + "'", long34 == (-125970722779069L));
    }

    @Test
    public void test10495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10495");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.millisOfDay();
        long long5 = property4.remainder();
        org.joda.time.LocalDateTime localDateTime6 = property4.roundFloorCopy();
        java.lang.String str7 = property4.getAsShortText();
        java.lang.String str8 = property4.getAsString();
        java.lang.String str9 = property4.getAsText();
        java.lang.String str10 = property4.getAsText();
        org.joda.time.LocalDateTime localDateTime11 = property4.withMaximumValue();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00" + "'", str2, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertNotNull(localDateTime6);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "26615409" + "'", str7, "26615409");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "26615409" + "'", str8, "26615409");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "26615409" + "'", str9, "26615409");
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "26615409" + "'", str10, "26615409");
        org.junit.Assert.assertNotNull(localDateTime11);
    }

    @Test
    public void test10496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10496");
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology3 = localDateTime2.getChronology();
        org.joda.time.DurationField durationField4 = chronology3.weekyears();
        org.joda.time.DurationField durationField5 = chronology3.centuries();
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime((long) (byte) 0, chronology3);
        org.joda.time.DateTimeField dateTimeField7 = chronology3.halfdayOfDay();
        int int10 = dateTimeField7.getDifference(11L, 0L);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str13 = dateTimeZone11.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime14 = org.joda.time.LocalDateTime.now(dateTimeZone11);
        org.joda.time.LocalDateTime.Property property15 = localDateTime14.millisOfDay();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime14.withYear((int) (short) 100);
        org.joda.time.LocalDateTime.Property property18 = localDateTime17.minuteOfHour();
        int int19 = property18.get();
        org.joda.time.LocalDateTime localDateTime21 = property18.setCopy((int) (short) 10);
        org.joda.time.LocalDateTime.Property property22 = localDateTime21.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime24 = localDateTime21.withYearOfCentury(0);
        java.util.Locale locale26 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale27 = locale26.stripExtensions();
        java.lang.String str28 = locale26.getVariant();
        java.lang.String str29 = locale26.getLanguage();
        java.lang.String str30 = dateTimeField7.getAsShortText((org.joda.time.ReadablePartial) localDateTime24, 0, locale26);
        java.lang.String str31 = locale26.getVariant();
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.DateTimeField dateTimeField34 = dateTimeFieldType32.getField(chronology33);
        long long36 = dateTimeField34.roundFloor((long) (-1));
        java.util.Locale.Builder builder37 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder39 = builder37.addUnicodeLocaleAttribute("und");
        java.util.Locale locale40 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale41 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str42 = locale40.getDisplayCountry(locale41);
        java.lang.String str43 = locale41.getDisplayName();
        java.util.Locale.Builder builder44 = builder39.setLocale(locale41);
        int int45 = dateTimeField34.getMaximumShortTextLength(locale41);
        int int47 = dateTimeField34.getLeapAmount((long) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.DateTimeField dateTimeField50 = dateTimeFieldType48.getField(chronology49);
        long long52 = dateTimeField50.roundFloor((long) (-1));
        java.util.Locale.Builder builder53 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder55 = builder53.addUnicodeLocaleAttribute("und");
        java.util.Locale locale56 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale57 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str58 = locale56.getDisplayCountry(locale57);
        java.lang.String str59 = locale57.getDisplayName();
        java.util.Locale.Builder builder60 = builder55.setLocale(locale57);
        int int61 = dateTimeField50.getMaximumShortTextLength(locale57);
        org.joda.time.DateTimeZone dateTimeZone62 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str64 = dateTimeZone62.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime65 = org.joda.time.LocalDateTime.now(dateTimeZone62);
        org.joda.time.LocalDateTime.Property property66 = localDateTime65.millisOfDay();
        org.joda.time.ReadableInstant readableInstant67 = null;
        long long68 = property66.getDifferenceAsLong(readableInstant67);
        org.joda.time.DurationField durationField69 = property66.getLeapDurationField();
        java.lang.String str70 = property66.getAsString();
        org.joda.time.LocalDateTime localDateTime71 = property66.roundFloorCopy();
        java.util.Locale locale72 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet73 = locale72.getUnicodeLocaleAttributes();
        java.util.Set<java.lang.String> strSet74 = locale72.getUnicodeLocaleAttributes();
        java.lang.String str75 = dateTimeField50.getAsShortText((org.joda.time.ReadablePartial) localDateTime71, locale72);
        int int76 = localDateTime71.getHourOfDay();
        int int77 = localDateTime71.getHourOfDay();
        java.util.Locale locale79 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale80 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str81 = locale79.getDisplayCountry(locale80);
        java.lang.String str82 = dateTimeField34.getAsShortText((org.joda.time.ReadablePartial) localDateTime71, 365, locale80);
        java.util.Locale locale84 = java.util.Locale.JAPAN;
        java.lang.String str85 = dateTimeField34.getAsShortText(1645629479410L, locale84);
        java.lang.String str86 = locale84.getDisplayName();
        java.lang.String str87 = locale26.getDisplayLanguage(locale84);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+00:00" + "'", str13, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(property18);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 23 + "'", int19 == 23);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "fr" + "'", str29, "fr");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "AM" + "'", str30, "AM");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(dateTimeFieldType32);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + (-60000L) + "'", long36 == (-60000L));
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "Canada" + "'", str42, "Canada");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "fran\347ais (Canada)" + "'", str43, "fran\347ais (Canada)");
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 4 + "'", int45 == 4);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType48);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + (-60000L) + "'", long52 == (-60000L));
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "Canada" + "'", str58, "Canada");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "fran\347ais (Canada)" + "'", str59, "fran\347ais (Canada)");
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 4 + "'", int61 == 4);
        org.junit.Assert.assertNotNull(dateTimeZone62);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "+00:00" + "'", str64, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 0L + "'", long68 == 0L);
        org.junit.Assert.assertNull(durationField69);
// flaky:         org.junit.Assert.assertEquals("'" + str70 + "' != '" + "26615419" + "'", str70, "26615419");
        org.junit.Assert.assertNotNull(localDateTime71);
        org.junit.Assert.assertNotNull(locale72);
        org.junit.Assert.assertEquals(locale72.toString(), "");
        org.junit.Assert.assertNotNull(strSet73);
        org.junit.Assert.assertNotNull(strSet74);
// flaky:         org.junit.Assert.assertEquals("'" + str75 + "' != '" + "443" + "'", str75, "443");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 7 + "'", int76 == 7);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 7 + "'", int77 == 7);
        org.junit.Assert.assertNotNull(locale79);
        org.junit.Assert.assertEquals(locale79.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale80);
        org.junit.Assert.assertEquals(locale80.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "Canada" + "'", str81, "Canada");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "365" + "'", str82, "365");
        org.junit.Assert.assertNotNull(locale84);
        org.junit.Assert.assertEquals(locale84.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "917" + "'", str85, "917");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "japonais (Japon)" + "'", str86, "japonais (Japon)");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "\u30d5\u30e9\u30f3\u30b9\u8a9e" + "'", str87, "\u30d5\u30e9\u30f3\u30b9\u8a9e");
    }

    @Test
    public void test10497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10497");
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology3 = localDateTime2.getChronology();
        org.joda.time.DurationField durationField4 = chronology3.weekyears();
        org.joda.time.DurationField durationField5 = chronology3.centuries();
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime((long) (byte) 0, chronology3);
        org.joda.time.DurationField durationField7 = chronology3.millis();
        org.joda.time.DurationField durationField8 = chronology3.months();
        org.joda.time.DurationField durationField9 = chronology3.halfdays();
        org.joda.time.DateTimeField dateTimeField10 = chronology3.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField11 = chronology3.secondOfDay();
        org.joda.time.DateTimeField dateTimeField12 = chronology3.millisOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = dateTimeField12.getType();
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
    }

    @Test
    public void test10498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10498");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((java.lang.Object) "26278253");
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.yearOfEra();
        org.junit.Assert.assertNotNull(property2);
    }

    @Test
    public void test10499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10499");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DateTimeField dateTimeField3 = chronology2.dayOfYear();
        org.joda.time.DateTimeField dateTimeField4 = chronology2.millisOfDay();
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        long long8 = chronology2.add(readablePeriod5, 1645629361196L, (-997));
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str11 = dateTimeZone9.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime12 = org.joda.time.LocalDateTime.now(dateTimeZone9);
        org.joda.time.LocalDateTime.Property property13 = localDateTime12.millisOfDay();
        java.lang.String str14 = property13.getName();
        org.joda.time.LocalDateTime localDateTime15 = property13.roundHalfFloorCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        boolean boolean17 = localDateTime15.isSupported(dateTimeFieldType16);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str20 = dateTimeZone18.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime21 = org.joda.time.LocalDateTime.now(dateTimeZone18);
        org.joda.time.LocalDateTime.Property property22 = localDateTime21.millisOfDay();
        org.joda.time.DurationFieldType durationFieldType23 = org.joda.time.DurationFieldType.centuries();
        boolean boolean24 = localDateTime21.equals((java.lang.Object) durationFieldType23);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray25 = localDateTime21.getFieldTypes();
        java.lang.String str26 = localDateTime21.toString();
        org.joda.time.LocalDateTime localDateTime28 = localDateTime21.plusMillis(22);
        boolean boolean29 = localDateTime15.isBefore((org.joda.time.ReadablePartial) localDateTime28);
        org.joda.time.ReadableDuration readableDuration30 = null;
        org.joda.time.LocalDateTime localDateTime31 = localDateTime28.plus(readableDuration30);
        org.joda.time.LocalDateTime.Property property32 = localDateTime31.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime33 = property32.roundHalfEvenCopy();
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        org.joda.time.LocalDateTime localDateTime35 = localDateTime33.plus(readablePeriod34);
        org.joda.time.LocalDateTime.Property property36 = localDateTime33.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str40 = dateTimeZone38.getShortName((long) (short) 10);
        long long42 = dateTimeZone38.convertUTCToLocal((long) ' ');
        java.lang.String str43 = dateTimeZone38.toString();
        boolean boolean45 = dateTimeZone38.equals((java.lang.Object) (short) 100);
        java.util.Locale locale47 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str48 = dateTimeZone38.getShortName((long) (-1), locale47);
        org.joda.time.LocalDateTime localDateTime49 = new org.joda.time.LocalDateTime(dateTimeZone38);
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime52 = localDateTime49.withField(dateTimeFieldType50, (int) (short) 100);
        org.joda.time.LocalDateTime localDateTime54 = new org.joda.time.LocalDateTime((long) (byte) 100);
        org.joda.time.Chronology chronology55 = localDateTime54.getChronology();
        org.joda.time.DurationField durationField56 = chronology55.weekyears();
        org.joda.time.DurationField durationField57 = chronology55.centuries();
        org.joda.time.DateTimeField dateTimeField58 = chronology55.minuteOfDay();
        long long62 = chronology55.add((long) 2, (long) 21, (int) '4');
        boolean boolean63 = dateTimeFieldType50.isSupported(chronology55);
        org.joda.time.DateTimeZone dateTimeZone64 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str66 = dateTimeZone64.getShortName((long) (short) 10);
        long long68 = dateTimeZone64.convertUTCToLocal((long) ' ');
        java.lang.String str69 = dateTimeZone64.toString();
        long long71 = dateTimeZone64.previousTransition(32L);
        org.joda.time.LocalDateTime localDateTime72 = new org.joda.time.LocalDateTime(dateTimeZone64);
        org.joda.time.Chronology chronology73 = chronology55.withZone(dateTimeZone64);
        org.joda.time.DateTimeField dateTimeField74 = chronology73.clockhourOfDay();
        java.util.Locale locale75 = java.util.Locale.GERMANY;
        java.lang.String str76 = locale75.getCountry();
        java.lang.String str77 = locale75.toLanguageTag();
        int int78 = dateTimeField74.getMaximumShortTextLength(locale75);
        java.util.Locale locale79 = locale75.stripExtensions();
        org.joda.time.LocalDateTime localDateTime80 = property36.setCopy("30267", locale79);
        int[] intArray82 = chronology2.get((org.joda.time.ReadablePartial) localDateTime80, (-52477L));
        org.joda.time.LocalDateTime localDateTime84 = localDateTime80.plusDays(81);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1645629361196L + "'", long8 == 1645629361196L);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+00:00" + "'", str11, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "millisOfDay" + "'", str14, "millisOfDay");
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+00:00" + "'", str20, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(durationFieldType23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray25);
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "2022-02-22T07:23:35.483" + "'", str26, "2022-02-22T07:23:35.483");
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "+00:00" + "'", str40, "+00:00");
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 32L + "'", long42 == 32L);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "UTC" + "'", str43, "UTC");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "+00:00" + "'", str48, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeFieldType50);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(durationField56);
        org.junit.Assert.assertNotNull(durationField57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 1094L + "'", long62 == 1094L);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(dateTimeZone64);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "+00:00" + "'", str66, "+00:00");
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 32L + "'", long68 == 32L);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "UTC" + "'", str69, "UTC");
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 32L + "'", long71 == 32L);
        org.junit.Assert.assertNotNull(chronology73);
        org.junit.Assert.assertNotNull(dateTimeField74);
        org.junit.Assert.assertNotNull(locale75);
        org.junit.Assert.assertEquals(locale75.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "DE" + "'", str76, "DE");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "de-DE" + "'", str77, "de-DE");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 2 + "'", int78 == 2);
        org.junit.Assert.assertNotNull(locale79);
        org.junit.Assert.assertEquals(locale79.toString(), "de_DE");
        org.junit.Assert.assertNotNull(localDateTime80);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[1969, 12, 31, 86347523]");
        org.junit.Assert.assertNotNull(localDateTime84);
    }

    @Test
    public void test10500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10500");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getShortName((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.millisOfDay();
        java.lang.String str5 = property4.getName();
        org.joda.time.LocalDateTime localDateTime6 = property4.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime8 = property4.addToCopy(0L);
        java.lang.String str9 = property4.getAsString();
        org.joda.time.LocalDateTime localDateTime10 = property4.roundCeilingCopy();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.withWeekyear(56);
        int int13 = localDateTime10.getYearOfEra();
        org.joda.time.LocalDateTime.Property property14 = localDateTime10.millisOfSecond();
        org.joda.time.LocalDateTime.Property property15 = localDateTime10.year();
        org.joda.time.LocalDateTime localDateTime16 = property15.roundHalfEvenCopy();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00" + "'", str2, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "millisOfDay" + "'", str5, "millisOfDay");
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "26615517" + "'", str9, "26615517");
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2022 + "'", int13 == 2022);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDateTime16);
    }
}

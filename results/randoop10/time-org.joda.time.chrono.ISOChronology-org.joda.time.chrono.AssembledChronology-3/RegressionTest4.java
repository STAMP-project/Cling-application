import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest4 {

    public static boolean debug = false;

    @Test
    public void test02001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02001");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        java.util.Locale locale2 = builder1.build();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder4 = builder1.setScript("53270");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed script: 53270 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "");
    }

    @Test
    public void test02002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02002");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.centuryOfEra();
        org.joda.time.DurationField durationField3 = iSOChronology0.centuries();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.millisOfDay();
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        int int8 = dateTimeZone6.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime9 = org.joda.time.LocalDateTime.now(dateTimeZone6);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.DateTime dateTime11 = localDateTime9.toDateTime(readableInstant10);
        java.util.TimeZone timeZone12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone12);
        int int15 = dateTimeZone13.getOffset(100L);
        org.joda.time.DateTime dateTime16 = localDateTime9.toDateTime(dateTimeZone13);
        org.joda.time.LocalDateTime.Property property17 = localDateTime9.monthOfYear();
        java.util.TimeZone timeZone18 = null;
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forTimeZone(timeZone18);
        int int21 = dateTimeZone19.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime22 = org.joda.time.LocalDateTime.now(dateTimeZone19);
        int int23 = localDateTime22.getWeekyear();
        org.joda.time.LocalDateTime.Property property24 = localDateTime22.millisOfDay();
        java.util.TimeZone timeZone25 = null;
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forTimeZone(timeZone25);
        int int28 = dateTimeZone26.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime29 = org.joda.time.LocalDateTime.now(dateTimeZone26);
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.DateTime dateTime31 = localDateTime29.toDateTime(readableInstant30);
        java.util.TimeZone timeZone32 = null;
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forTimeZone(timeZone32);
        int int35 = dateTimeZone33.getOffset(100L);
        org.joda.time.DateTime dateTime36 = localDateTime29.toDateTime(dateTimeZone33);
        int int37 = property24.compareTo((org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.LocalDateTime localDateTime38 = property24.roundHalfEvenCopy();
        boolean boolean39 = localDateTime9.isAfter((org.joda.time.ReadablePartial) localDateTime38);
        java.util.Locale locale40 = java.util.Locale.UK;
        java.lang.String str41 = dateTimeField4.getAsText((org.joda.time.ReadablePartial) localDateTime38, locale40);
        org.joda.time.LocalDateTime localDateTime43 = localDateTime38.withYear((-38086));
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField45 = localDateTime38.getField(27424246);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 27424246");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2022 + "'", int23 == 2022);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "en_GB");
// flaky:         org.junit.Assert.assertEquals("'" + str41 + "' != '" + "53317422" + "'", str41, "53317422");
        org.junit.Assert.assertNotNull(localDateTime43);
    }

    @Test
    public void test02003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02003");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("147585-12-12T14:46:18.188");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=147585-12-12t14:46:18.188");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02004");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.yearOfEra();
        org.joda.time.DurationField durationField3 = iSOChronology0.minutes();
        org.joda.time.DurationField durationField4 = iSOChronology0.months();
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology0.era();
        org.joda.time.DateTimeField dateTimeField6 = iSOChronology0.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField7 = iSOChronology0.dayOfYear();
        org.joda.time.DurationField durationField8 = iSOChronology0.weeks();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
    }

    @Test
    public void test02005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02005");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours(631);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Offset is too large");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02006");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.centuryOfEra();
        org.joda.time.DurationField durationField3 = iSOChronology0.eras();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology0.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField6 = iSOChronology0.clockhourOfHalfday();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
    }

    @Test
    public void test02007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02007");
        org.joda.time.chrono.ISOChronology iSOChronology7 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField8 = iSOChronology7.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField9 = iSOChronology7.hourOfHalfday();
        java.util.TimeZone timeZone10 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        int int13 = dateTimeZone11.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime14 = org.joda.time.LocalDateTime.now(dateTimeZone11);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = localDateTime14.toDateTime(readableInstant15);
        java.util.TimeZone timeZone17 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forTimeZone(timeZone17);
        int int20 = dateTimeZone18.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime21 = org.joda.time.LocalDateTime.now(dateTimeZone18);
        org.joda.time.LocalDateTime localDateTime22 = org.joda.time.LocalDateTime.now(dateTimeZone18);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.minusYears(2022);
        org.joda.time.LocalDateTime.Property property25 = localDateTime24.era();
        int int26 = localDateTime14.compareTo((org.joda.time.ReadablePartial) localDateTime24);
        org.joda.time.chrono.ISOChronology iSOChronology27 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField28 = iSOChronology27.hourOfHalfday();
        java.lang.String str29 = iSOChronology27.toString();
        java.util.TimeZone timeZone30 = null;
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forTimeZone(timeZone30);
        int int33 = dateTimeZone31.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime34 = org.joda.time.LocalDateTime.now(dateTimeZone31);
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.DateTime dateTime36 = localDateTime34.toDateTime(readableInstant35);
        org.joda.time.Chronology chronology37 = dateTime36.getChronology();
        org.joda.time.DurationField durationField38 = chronology37.hours();
        org.joda.time.DurationField durationField39 = chronology37.months();
        org.joda.time.DateTimeField dateTimeField40 = chronology37.dayOfYear();
        java.util.TimeZone timeZone41 = null;
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forTimeZone(timeZone41);
        int int44 = dateTimeZone42.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime45 = org.joda.time.LocalDateTime.now(dateTimeZone42);
        int[] intArray48 = new int[] { (short) 0, (short) 0 };
        int int49 = dateTimeField40.getMinimumValue((org.joda.time.ReadablePartial) localDateTime45, intArray48);
        java.lang.String str51 = dateTimeField40.getAsShortText((long) 53166088);
        java.util.TimeZone timeZone52 = null;
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.forTimeZone(timeZone52);
        int int55 = dateTimeZone53.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime56 = org.joda.time.LocalDateTime.now(dateTimeZone53);
        int int57 = localDateTime56.getWeekyear();
        org.joda.time.DurationFieldType durationFieldType58 = org.joda.time.DurationFieldType.days();
        org.joda.time.LocalDateTime localDateTime60 = localDateTime56.withFieldAdded(durationFieldType58, 53166088);
        java.util.Locale locale61 = java.util.Locale.ROOT;
        java.lang.String str62 = dateTimeField40.getAsShortText((org.joda.time.ReadablePartial) localDateTime60, locale61);
        java.util.TimeZone timeZone63 = null;
        org.joda.time.DateTimeZone dateTimeZone64 = org.joda.time.DateTimeZone.forTimeZone(timeZone63);
        int int66 = dateTimeZone64.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime67 = org.joda.time.LocalDateTime.now(dateTimeZone64);
        int int68 = localDateTime67.getWeekyear();
        boolean boolean69 = localDateTime60.isEqual((org.joda.time.ReadablePartial) localDateTime67);
        int[] intArray71 = iSOChronology27.get((org.joda.time.ReadablePartial) localDateTime67, (long) 53166088);
        iSOChronology7.validate((org.joda.time.ReadablePartial) localDateTime14, intArray71);
        org.joda.time.chrono.ISOChronology iSOChronology73 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField74 = iSOChronology73.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField75 = iSOChronology73.yearOfEra();
        org.joda.time.DateTimeField dateTimeField76 = iSOChronology73.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField77 = iSOChronology73.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField78 = iSOChronology73.dayOfYear();
        java.util.TimeZone timeZone79 = null;
        org.joda.time.DateTimeZone dateTimeZone80 = org.joda.time.DateTimeZone.forTimeZone(timeZone79);
        java.lang.String str82 = dateTimeZone80.getName(31556995199999L);
        java.lang.String str83 = dateTimeZone80.getID();
        org.joda.time.Chronology chronology84 = iSOChronology73.withZone(dateTimeZone80);
        org.joda.time.Chronology chronology85 = iSOChronology7.withZone(dateTimeZone80);
        org.joda.time.DateTimeField dateTimeField86 = iSOChronology7.monthOfYear();
        org.joda.time.DateTimeField dateTimeField87 = iSOChronology7.year();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime88 = new org.joda.time.LocalDateTime(0, 53166088, 49687, 53266354, (int) '#', 2899250, 11, (org.joda.time.Chronology) iSOChronology7);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 53266354 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(iSOChronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(iSOChronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "ISOChronology[UTC]" + "'", str29, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[0, 0]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "1" + "'", str51, "1");
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 2022 + "'", int57 == 2022);
        org.junit.Assert.assertNotNull(durationFieldType58);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "346" + "'", str62, "346");
        org.junit.Assert.assertNotNull(dateTimeZone64);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 2022 + "'", int68 == 2022);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[1970, 1, 1, 53166088]");
        org.junit.Assert.assertNotNull(iSOChronology73);
        org.junit.Assert.assertNotNull(dateTimeField74);
        org.junit.Assert.assertNotNull(dateTimeField75);
        org.junit.Assert.assertNotNull(dateTimeField76);
        org.junit.Assert.assertNotNull(dateTimeField77);
        org.junit.Assert.assertNotNull(dateTimeField78);
        org.junit.Assert.assertNotNull(dateTimeZone80);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "+00:00" + "'", str82, "+00:00");
// flaky:         org.junit.Assert.assertEquals("'" + str83 + "' != '" + "UTC" + "'", str83, "UTC");
        org.junit.Assert.assertNotNull(chronology84);
        org.junit.Assert.assertNotNull(chronology85);
        org.junit.Assert.assertNotNull(dateTimeField86);
        org.junit.Assert.assertNotNull(dateTimeField87);
    }

    @Test
    public void test02008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02008");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.yearOfEra();
        org.joda.time.DurationField durationField3 = iSOChronology0.minutes();
        org.joda.time.DurationField durationField4 = iSOChronology0.months();
        org.joda.time.DurationField durationField5 = iSOChronology0.weekyears();
        org.joda.time.DateTimeField dateTimeField6 = iSOChronology0.hourOfDay();
        java.lang.String str8 = dateTimeField6.getAsShortText(79200000L);
        int int10 = dateTimeField6.getMaximumValue(0L);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "22" + "'", str8, "22");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 23 + "'", int10 == 23);
    }

    @Test
    public void test02009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02009");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.centuryOfEra();
        org.joda.time.DurationField durationField3 = iSOChronology0.centuries();
        org.joda.time.DurationField durationField4 = iSOChronology0.hours();
        org.joda.time.DurationField durationField5 = iSOChronology0.years();
        org.joda.time.DurationField durationField6 = iSOChronology0.halfdays();
        org.joda.time.DateTimeField dateTimeField7 = iSOChronology0.dayOfWeek();
        org.joda.time.DurationField durationField8 = iSOChronology0.weeks();
        org.joda.time.DurationField durationField9 = iSOChronology0.halfdays();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology0.dayOfMonth();
        java.util.TimeZone timeZone12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone12);
        int int15 = dateTimeZone13.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime16 = org.joda.time.LocalDateTime.now(dateTimeZone13);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray17 = localDateTime16.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.hourOfDay();
        int int19 = localDateTime16.get(dateTimeFieldType18);
        org.joda.time.LocalDateTime.Property property20 = localDateTime16.hourOfDay();
        int int21 = property20.getLeapAmount();
        java.util.Locale.Category category22 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale23 = java.util.Locale.JAPANESE;
        java.lang.String str24 = locale23.getDisplayLanguage();
        java.lang.String str25 = locale23.getISO3Language();
        java.util.Locale locale26 = java.util.Locale.CHINA;
        java.lang.String str27 = locale23.getDisplayLanguage(locale26);
        org.joda.time.tz.NameProvider nameProvider28 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale29 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet30 = locale29.getExtensionKeys();
        java.lang.String str33 = nameProvider28.getShortName(locale29, "Koordinierte Universalzeit", "+00:00");
        java.util.Locale locale34 = java.util.Locale.KOREAN;
        java.lang.String str35 = locale29.getDisplayName(locale34);
        java.lang.String str36 = locale26.getDisplayVariant(locale34);
        java.util.Locale locale37 = locale34.stripExtensions();
        java.util.Locale.setDefault(category22, locale34);
        java.util.TimeZone timeZone39 = null;
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forTimeZone(timeZone39);
        int int42 = dateTimeZone40.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime43 = org.joda.time.LocalDateTime.now(dateTimeZone40);
        org.joda.time.ReadableInstant readableInstant44 = null;
        org.joda.time.DateTime dateTime45 = localDateTime43.toDateTime(readableInstant44);
        org.joda.time.Chronology chronology46 = dateTime45.getChronology();
        org.joda.time.DurationField durationField47 = chronology46.hours();
        org.joda.time.DurationField durationField48 = chronology46.months();
        org.joda.time.DateTimeField dateTimeField49 = chronology46.dayOfYear();
        java.util.TimeZone timeZone50 = null;
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.forTimeZone(timeZone50);
        int int53 = dateTimeZone51.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime54 = org.joda.time.LocalDateTime.now(dateTimeZone51);
        int[] intArray57 = new int[] { (short) 0, (short) 0 };
        int int58 = dateTimeField49.getMinimumValue((org.joda.time.ReadablePartial) localDateTime54, intArray57);
        boolean boolean59 = dateTimeField49.isLenient();
        org.joda.time.LocalDateTime localDateTime60 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime62 = localDateTime60.minusMillis(52);
        java.util.Locale.Builder builder64 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder67 = builder64.setExtension('x', "jpn");
        java.util.Locale locale68 = builder64.build();
        java.util.Locale locale69 = builder64.build();
        java.lang.String str70 = dateTimeField49.getAsShortText((org.joda.time.ReadablePartial) localDateTime60, (int) 'a', locale69);
        boolean boolean71 = locale69.hasExtensions();
        java.util.Locale.setDefault(category22, locale69);
        int int73 = property20.getMaximumShortTextLength(locale69);
        java.util.Locale locale74 = java.util.Locale.JAPANESE;
        java.lang.String str75 = locale74.getDisplayLanguage();
        java.util.Set<java.lang.String> strSet76 = locale74.getUnicodeLocaleKeys();
        int int77 = property20.getMaximumShortTextLength(locale74);
        java.lang.String str78 = dateTimeField10.getAsText(7, locale74);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray17);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 14 + "'", int19 == 14);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + category22 + "' != '" + java.util.Locale.Category.FORMAT + "'", category22.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Japanese" + "'", str24, "Japanese");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "jpn" + "'", str25, "jpn");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "\u65e5\u6587" + "'", str27, "\u65e5\u6587");
        org.junit.Assert.assertNotNull(nameProvider28);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet30);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str35, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "ko");
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(durationField47);
        org.junit.Assert.assertNotNull(durationField48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[0, 0]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "");
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "97" + "'", str70, "97");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 2 + "'", int73 == 2);
        org.junit.Assert.assertNotNull(locale74);
        org.junit.Assert.assertEquals(locale74.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "Japanese" + "'", str75, "Japanese");
        org.junit.Assert.assertNotNull(strSet76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 2 + "'", int77 == 2);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "7" + "'", str78, "7");
    }

    @Test
    public void test02010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02010");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        int int5 = localDateTime4.getWeekyear();
        org.joda.time.LocalDateTime.Property property6 = localDateTime4.millisOfDay();
        java.util.TimeZone timeZone7 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forTimeZone(timeZone7);
        int int10 = dateTimeZone8.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now(dateTimeZone8);
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.DateTime dateTime13 = localDateTime11.toDateTime(readableInstant12);
        java.util.TimeZone timeZone14 = null;
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forTimeZone(timeZone14);
        int int17 = dateTimeZone15.getOffset(100L);
        org.joda.time.DateTime dateTime18 = localDateTime11.toDateTime(dateTimeZone15);
        int int19 = property6.compareTo((org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.LocalDateTime localDateTime20 = property6.roundHalfEvenCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.LocalDateTime.Property property22 = localDateTime20.property(dateTimeFieldType21);
        org.joda.time.DurationFieldType durationFieldType23 = org.joda.time.DurationFieldType.weekyears();
        org.joda.time.LocalDateTime localDateTime25 = localDateTime20.withFieldAdded(durationFieldType23, (int) 'a');
        org.joda.time.LocalDateTime localDateTime27 = localDateTime20.plusMonths(27424246);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime20.withYear(21);
        java.lang.String str31 = localDateTime29.toString("2835902");
        org.joda.time.ReadableDuration readableDuration32 = null;
        org.joda.time.LocalDateTime localDateTime34 = localDateTime29.withDurationAdded(readableDuration32, 49687275);
        int int35 = localDateTime34.getYearOfEra();
        int int36 = localDateTime34.getMillisOfDay();
        java.lang.String str37 = localDateTime34.toString();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2022 + "'", int5 == 2022);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(durationFieldType23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "2835902" + "'", str31, "2835902");
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 21 + "'", int35 == 21);
// flaky:         org.junit.Assert.assertTrue("'" + int36 + "' != '" + 53317594 + "'", int36 == 53317594);
// flaky:         org.junit.Assert.assertEquals("'" + str37 + "' != '" + "0021-02-21T14:48:37.594" + "'", str37, "0021-02-21T14:48:37.594");
    }

    @Test
    public void test02011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02011");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        boolean boolean4 = dateTimeZone1.isStandardOffset(1644850007935L);
        long long8 = dateTimeZone1.convertLocalToUTC(1644850114234L, false, 1644849985413L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1644814114234L + "'", long8 == 1644814114234L);
    }

    @Test
    public void test02012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02012");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.centuryOfEra();
        org.joda.time.DurationField durationField3 = iSOChronology0.seconds();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology0.yearOfEra();
        org.joda.time.LocalDateTime localDateTime6 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) iSOChronology0);
        org.joda.time.LocalDateTime localDateTime7 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) iSOChronology0);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withEra(47);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 47 for era must be in the range [0,1]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime7);
    }

    @Test
    public void test02013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02013");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.centuryOfEra();
        org.joda.time.DurationField durationField3 = iSOChronology0.seconds();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.clockhourOfDay();
        org.joda.time.Chronology chronology5 = iSOChronology0.withUTC();
        org.joda.time.Chronology chronology6 = iSOChronology0.withUTC();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField8 = chronology6.secondOfMinute();
        long long10 = dateTimeField8.roundHalfEven(49692780L);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 49693000L + "'", long10 == 49693000L);
    }

    @Test
    public void test02014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02014");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setExtension('x', "jpn");
        java.util.Locale locale4 = builder3.build();
        java.util.Locale.Builder builder5 = builder3.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder8 = builder3.setUnicodeLocaleKeyword("DateTimeField[year]", "6");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale keyword key: DateTimeField[year] [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertNotNull(builder5);
    }

    @Test
    public void test02015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02015");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.hourOfHalfday();
        java.lang.String str2 = iSOChronology0.toString();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.era();
        org.joda.time.DurationField durationField4 = iSOChronology0.centuries();
        org.joda.time.DurationField durationField5 = iSOChronology0.weeks();
        org.joda.time.DateTimeField dateTimeField6 = iSOChronology0.era();
        org.joda.time.DateTimeField dateTimeField7 = iSOChronology0.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField8 = iSOChronology0.centuryOfEra();
        org.joda.time.chrono.ISOChronology iSOChronology9 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology9.hourOfHalfday();
        java.lang.String str11 = iSOChronology9.toString();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology9.era();
        org.joda.time.DurationField durationField13 = iSOChronology9.centuries();
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        long long17 = iSOChronology9.add(readablePeriod14, (long) 2022, (int) (byte) 100);
        org.joda.time.DateTimeZone dateTimeZone18 = iSOChronology9.getZone();
        org.joda.time.Chronology chronology19 = iSOChronology0.withZone(dateTimeZone18);
        org.joda.time.DateTimeField dateTimeField20 = iSOChronology0.year();
        int int22 = dateTimeField20.getMinimumValue(1645454871127L);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ISOChronology[+10:00]" + "'", str2, "ISOChronology[+10:00]");
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(iSOChronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "ISOChronology[+10:00]" + "'", str11, "ISOChronology[+10:00]");
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 2022L + "'", long17 == 2022L);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-292275054) + "'", int22 == (-292275054));
    }

    @Test
    public void test02016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02016");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        java.util.TimeZone timeZone1 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        int int4 = dateTimeZone2.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime5 = org.joda.time.LocalDateTime.now(dateTimeZone2);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray6 = localDateTime5.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.hourOfDay();
        int int8 = localDateTime5.get(dateTimeFieldType7);
        org.joda.time.LocalDateTime.Property property9 = localDateTime5.dayOfWeek();
        boolean boolean10 = localDateTime0.isEqual((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.chrono.ISOChronology iSOChronology12 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField13 = iSOChronology12.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology12.centuryOfEra();
        org.joda.time.DurationField durationField15 = iSOChronology12.seconds();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology12.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology12.hourOfHalfday();
        java.util.TimeZone timeZone18 = null;
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forTimeZone(timeZone18);
        int int21 = dateTimeZone19.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime22 = org.joda.time.LocalDateTime.now(dateTimeZone19);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray23 = localDateTime22.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.hourOfDay();
        int int25 = localDateTime22.get(dateTimeFieldType24);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime22.minusWeeks(1);
        long long29 = iSOChronology12.set((org.joda.time.ReadablePartial) localDateTime27, (long) 0);
        boolean boolean30 = dateTimeFieldType11.isSupported((org.joda.time.Chronology) iSOChronology12);
        int int31 = localDateTime0.get(dateTimeFieldType11);
        java.util.TimeZone timeZone32 = null;
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forTimeZone(timeZone32);
        int int35 = dateTimeZone33.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime36 = org.joda.time.LocalDateTime.now(dateTimeZone33);
        int int37 = localDateTime36.getWeekyear();
        org.joda.time.LocalDateTime.Property property38 = localDateTime36.millisOfDay();
        java.util.Locale locale39 = java.util.Locale.GERMAN;
        java.util.Locale locale40 = java.util.Locale.GERMAN;
        java.lang.String str41 = locale39.getDisplayCountry(locale40);
        java.util.Locale locale42 = locale39.stripExtensions();
        int int43 = property38.getMaximumShortTextLength(locale39);
        org.joda.time.Interval interval44 = property38.toInterval();
        org.joda.time.LocalDateTime localDateTime45 = property38.getLocalDateTime();
        int int46 = localDateTime45.getYearOfEra();
        int int47 = localDateTime45.getCenturyOfEra();
        int int48 = localDateTime0.compareTo((org.joda.time.ReadablePartial) localDateTime45);
        int int49 = localDateTime0.getWeekOfWeekyear();
        // The following exception was thrown during execution in test generation
        try {
            int int51 = localDateTime0.getValue(2852);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 2852");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 36000000 + "'", int4 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(property9);
// flaky:         org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertNotNull(iSOChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 36000000 + "'", int21 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray23);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(localDateTime27);
// flaky:         org.junit.Assert.assertTrue("'" + long29 + "' != '" + 1644850117977L + "'", long29 == 1644850117977L);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2917 + "'", int31 == 2917);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 36000000 + "'", int35 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2022 + "'", int37 == 2022);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "de");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "de");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "de");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 8 + "'", int43 == 8);
        org.junit.Assert.assertNotNull(interval44);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2022 + "'", int46 == 2022);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 20 + "'", int47 == 20);
// flaky:         org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 8 + "'", int49 == 8);
    }

    @Test
    public void test02017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02017");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.weekOfWeekyear();
        java.util.TimeZone timeZone2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone2);
        java.lang.String str5 = dateTimeZone3.getName(31556995199999L);
        org.joda.time.Chronology chronology6 = iSOChronology0.withZone(dateTimeZone3);
        org.joda.time.DateTimeField dateTimeField7 = iSOChronology0.halfdayOfDay();
        org.joda.time.DurationField durationField8 = iSOChronology0.weeks();
        org.joda.time.DateTimeField dateTimeField9 = iSOChronology0.yearOfCentury();
        java.util.Locale locale11 = java.util.Locale.GERMAN;
        java.lang.String str12 = locale11.getDisplayScript();
        java.lang.String str13 = dateTimeField9.getAsText(2852321, locale11);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+10:00" + "'", str5, "+10:00");
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "de");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "2852321" + "'", str13, "2852321");
    }

    @Test
    public void test02018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02018");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.lang.String str1 = timeZone0.getID();
        int int3 = timeZone0.getOffset((long) (byte) 10);
        org.junit.Assert.assertNotNull(timeZone0);
        org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "Coordinated Universal Time");
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "UTC" + "'", str1, "UTC");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
    }

    @Test
    public void test02019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02019");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        int int5 = localDateTime4.getDayOfYear();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.withYearOfEra(2022);
        java.util.TimeZone timeZone8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        int int11 = dateTimeZone9.getOffset(100L);
        java.util.TimeZone timeZone12 = dateTimeZone9.toTimeZone();
        int int14 = dateTimeZone9.getStandardOffset((long) ' ');
        org.joda.time.DateTime dateTime15 = localDateTime7.toDateTime(dateTimeZone9);
        java.lang.String str17 = dateTimeZone9.getShortName(0L);
        java.lang.String str18 = dateTimeZone9.toString();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 36000000 + "'", int3 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 53 + "'", int5 == 53);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 36000000 + "'", int11 == 36000000);
        org.junit.Assert.assertNotNull(timeZone12);
        org.junit.Assert.assertEquals(timeZone12.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 36000000 + "'", int14 == 36000000);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+10:00" + "'", str17, "+10:00");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+10:00" + "'", str18, "+10:00");
    }

    @Test
    public void test02020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02020");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        java.util.TimeZone timeZone2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone2);
        int int5 = dateTimeZone3.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime6 = org.joda.time.LocalDateTime.now(dateTimeZone3);
        int int7 = localDateTime6.getWeekyear();
        org.joda.time.LocalDateTime.Property property8 = localDateTime6.minuteOfHour();
        long long9 = property8.remainder();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = property8.getFieldType();
        java.util.Locale.Builder builder11 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder14 = builder11.setExtension('x', "jpn");
        java.util.Locale locale15 = java.util.Locale.GERMAN;
        java.util.Locale locale16 = java.util.Locale.GERMAN;
        java.lang.String str17 = locale15.getDisplayCountry(locale16);
        java.util.Locale locale18 = locale15.stripExtensions();
        java.lang.String str19 = locale15.getDisplayName();
        java.util.Locale.Builder builder20 = builder14.setLocale(locale15);
        java.util.Locale.Builder builder23 = builder20.setUnicodeLocaleKeyword("22", "deu");
        java.util.Locale.Builder builder24 = builder20.clearExtensions();
        java.util.Locale.Builder builder26 = builder24.setVariant("2807744");
        java.util.Locale locale27 = builder26.build();
        int int28 = property8.getMaximumTextLength(locale27);
        java.util.Locale.Builder builder29 = builder1.setLocale(locale27);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder31 = builder1.setLanguageTag("31");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Invalid subtag: 31 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 36000000 + "'", int5 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2022 + "'", int7 == 2022);
        org.junit.Assert.assertNotNull(property8);
// flaky:         org.junit.Assert.assertTrue("'" + long9 + "' != '" + 38174L + "'", long9 == 38174L);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "de");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "de");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "de");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "German" + "'", str19, "German");
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "de__2807744");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertNotNull(builder29);
    }

    @Test
    public void test02021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02021");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("2969-12-31T00:00:02.801");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=2969-12-31t00:00:02.801");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02022");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime5 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.plusSeconds((int) (short) 10);
        int[] intArray8 = localDateTime5.getValues();
        int int9 = localDateTime5.getMinuteOfHour();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime5.plusMonths(22);
        int[] intArray12 = localDateTime11.getValues();
        java.lang.String str13 = localDateTime11.toString();
        org.joda.time.chrono.ISOChronology iSOChronology14 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology14.hourOfHalfday();
        java.lang.String str16 = iSOChronology14.toString();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology14.era();
        org.joda.time.DurationField durationField18 = iSOChronology14.centuries();
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        long long22 = iSOChronology14.add(readablePeriod19, (long) 2022, (int) (byte) 100);
        org.joda.time.DateTimeField dateTimeField23 = iSOChronology14.hourOfDay();
        org.joda.time.DateTimeField dateTimeField24 = iSOChronology14.minuteOfDay();
        java.util.TimeZone timeZone25 = null;
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forTimeZone(timeZone25);
        int int28 = dateTimeZone26.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime29 = org.joda.time.LocalDateTime.now(dateTimeZone26);
        org.joda.time.LocalDateTime localDateTime30 = org.joda.time.LocalDateTime.now(dateTimeZone26);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime30.minusMinutes((int) ' ');
        java.lang.String str33 = localDateTime30.toString();
        int int34 = localDateTime30.getDayOfMonth();
        java.util.TimeZone timeZone36 = null;
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forTimeZone(timeZone36);
        int int39 = dateTimeZone37.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime40 = org.joda.time.LocalDateTime.now(dateTimeZone37);
        org.joda.time.ReadableInstant readableInstant41 = null;
        org.joda.time.DateTime dateTime42 = localDateTime40.toDateTime(readableInstant41);
        org.joda.time.Chronology chronology43 = dateTime42.getChronology();
        org.joda.time.DurationField durationField44 = chronology43.hours();
        org.joda.time.DurationField durationField45 = chronology43.months();
        org.joda.time.DateTimeField dateTimeField46 = chronology43.dayOfYear();
        java.util.TimeZone timeZone47 = null;
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.forTimeZone(timeZone47);
        int int50 = dateTimeZone48.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime51 = org.joda.time.LocalDateTime.now(dateTimeZone48);
        int[] intArray54 = new int[] { (short) 0, (short) 0 };
        int int55 = dateTimeField46.getMinimumValue((org.joda.time.ReadablePartial) localDateTime51, intArray54);
        boolean boolean56 = dateTimeField46.isLenient();
        org.joda.time.LocalDateTime localDateTime57 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime59 = localDateTime57.minusMillis(52);
        java.util.Locale.Builder builder61 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder64 = builder61.setExtension('x', "jpn");
        java.util.Locale locale65 = builder61.build();
        java.util.Locale locale66 = builder61.build();
        java.lang.String str67 = dateTimeField46.getAsShortText((org.joda.time.ReadablePartial) localDateTime57, (int) 'a', locale66);
        boolean boolean68 = locale66.hasExtensions();
        java.lang.String str69 = dateTimeField24.getAsText((org.joda.time.ReadablePartial) localDateTime30, 1, locale66);
        org.joda.time.DateTimeFieldType dateTimeFieldType71 = localDateTime30.getFieldType(0);
        int int72 = localDateTime11.get(dateTimeFieldType71);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 36000000 + "'", int3 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(intArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[2022, 2, 22, 2918198]");
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 48 + "'", int9 == 48);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(intArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[2023, 12, 22, 2918198]");
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "2023-12-22T00:48:38.198" + "'", str13, "2023-12-22T00:48:38.198");
        org.junit.Assert.assertNotNull(iSOChronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "ISOChronology[+10:00]" + "'", str16, "ISOChronology[+10:00]");
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 2022L + "'", long22 == 2022L);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 36000000 + "'", int28 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime32);
// flaky:         org.junit.Assert.assertEquals("'" + str33 + "' != '" + "2022-02-22T00:48:38.198" + "'", str33, "2022-02-22T00:48:38.198");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 22 + "'", int34 == 22);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 36000000 + "'", int39 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(durationField44);
        org.junit.Assert.assertNotNull(durationField45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 36000000 + "'", int50 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[0, 0]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "");
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "97" + "'", str67, "97");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "1" + "'", str69, "1");
        org.junit.Assert.assertNotNull(dateTimeFieldType71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 2023 + "'", int72 == 2023);
    }

    @Test
    public void test02023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02023");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffset(100L);
        java.util.TimeZone timeZone4 = dateTimeZone1.toTimeZone();
        java.lang.String str5 = dateTimeZone1.getID();
        java.util.TimeZone timeZone6 = null;
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forTimeZone(timeZone6);
        int int9 = dateTimeZone7.getOffset(100L);
        long long11 = dateTimeZone7.nextTransition((long) (short) -1);
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime(dateTimeZone7);
        long long14 = dateTimeZone1.getMillisKeepLocal(dateTimeZone7, 0L);
        java.util.TimeZone timeZone15 = null;
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forTimeZone(timeZone15);
        int int18 = dateTimeZone16.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime19 = org.joda.time.LocalDateTime.now(dateTimeZone16);
        org.joda.time.LocalDateTime localDateTime20 = org.joda.time.LocalDateTime.now(dateTimeZone16);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.plusSeconds((int) (short) 10);
        org.joda.time.LocalDateTime.Property property23 = localDateTime22.hourOfDay();
        org.joda.time.LocalDateTime.Property property24 = localDateTime22.minuteOfHour();
        java.util.TimeZone timeZone25 = null;
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forTimeZone(timeZone25);
        int int28 = dateTimeZone26.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime29 = org.joda.time.LocalDateTime.now(dateTimeZone26);
        int int30 = localDateTime29.getWeekyear();
        org.joda.time.LocalDateTime.Property property31 = localDateTime29.millisOfDay();
        org.joda.time.LocalDateTime localDateTime32 = property31.roundCeilingCopy();
        java.util.TimeZone timeZone33 = null;
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forTimeZone(timeZone33);
        int int36 = dateTimeZone34.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime37 = org.joda.time.LocalDateTime.now(dateTimeZone34);
        org.joda.time.ReadableInstant readableInstant38 = null;
        org.joda.time.DateTime dateTime39 = localDateTime37.toDateTime(readableInstant38);
        org.joda.time.Instant instant40 = dateTime39.toInstant();
        java.lang.String str41 = instant40.toString();
        int int42 = property31.getDifference((org.joda.time.ReadableInstant) instant40);
        long long43 = instant40.getMillis();
        org.joda.time.DateTime dateTime44 = localDateTime22.toDateTime((org.joda.time.ReadableInstant) instant40);
        int int45 = dateTimeZone1.getOffset((org.joda.time.ReadableInstant) instant40);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 36000000 + "'", int3 == 36000000);
        org.junit.Assert.assertNotNull(timeZone4);
        org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+10:00" + "'", str5, "+10:00");
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 36000000 + "'", int9 == 36000000);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 36000000 + "'", int18 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 36000000 + "'", int28 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2022 + "'", int30 == 2022);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 36000000 + "'", int36 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(instant40);
// flaky:         org.junit.Assert.assertEquals("'" + str41 + "' != '" + "2022-02-21T14:48:38.274Z" + "'", str41, "2022-02-21T14:48:38.274Z");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 36000000 + "'", int42 == 36000000);
// flaky:         org.junit.Assert.assertTrue("'" + long43 + "' != '" + 1645454918274L + "'", long43 == 1645454918274L);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 36000000 + "'", int45 == 36000000);
    }

    @Test
    public void test02024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02024");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.centuryOfEra();
        org.joda.time.DurationField durationField3 = iSOChronology0.eras();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.year();
        long long7 = dateTimeField4.getDifferenceAsLong((long) 38089, 1645454893025L);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-52L) + "'", long7 == (-52L));
    }

    @Test
    public void test02025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02025");
        org.joda.time.tz.NameProvider nameProvider0 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet2 = locale1.getExtensionKeys();
        java.lang.String str5 = nameProvider0.getShortName(locale1, "Koordinierte Universalzeit", "+00:00");
        java.util.Locale.Builder builder6 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder9 = builder6.setExtension('x', "jpn");
        java.util.Locale locale10 = java.util.Locale.GERMAN;
        java.util.Locale locale11 = java.util.Locale.GERMAN;
        java.lang.String str12 = locale10.getDisplayCountry(locale11);
        java.util.Locale locale13 = locale10.stripExtensions();
        java.lang.String str14 = locale10.getDisplayName();
        java.util.Locale.Builder builder15 = builder9.setLocale(locale10);
        java.util.Locale locale16 = builder15.build();
        java.lang.String str17 = locale16.getScript();
        java.lang.String str20 = nameProvider0.getName(locale16, "hourOfDay", "");
        boolean boolean22 = locale16.equals((java.lang.Object) "53259528");
        org.junit.Assert.assertNotNull(nameProvider0);
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet2);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "de");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "de");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "de");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "German" + "'", str14, "German");
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "de");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test02026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02026");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        int int5 = localDateTime4.getDayOfWeek();
        java.util.TimeZone timeZone6 = null;
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forTimeZone(timeZone6);
        int int9 = dateTimeZone7.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime10 = org.joda.time.LocalDateTime.now(dateTimeZone7);
        int int11 = localDateTime10.getWeekyear();
        org.joda.time.LocalDateTime.Property property12 = localDateTime10.minuteOfHour();
        org.joda.time.LocalDateTime.Property property13 = localDateTime10.dayOfYear();
        java.util.TimeZone timeZone14 = null;
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forTimeZone(timeZone14);
        int int17 = dateTimeZone15.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime18 = org.joda.time.LocalDateTime.now(dateTimeZone15);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray19 = localDateTime18.getFieldTypes();
        int int20 = property13.compareTo((org.joda.time.ReadablePartial) localDateTime18);
        int int21 = localDateTime18.getCenturyOfEra();
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.LocalDateTime localDateTime23 = localDateTime18.plus(readablePeriod22);
        org.joda.time.LocalDateTime.Property property24 = localDateTime18.hourOfDay();
        org.joda.time.LocalDateTime localDateTime26 = localDateTime18.minusYears(2818);
        boolean boolean27 = localDateTime4.isEqual((org.joda.time.ReadablePartial) localDateTime26);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime26.plusMinutes(2805);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType31 = localDateTime29.getFieldType(49700025);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 49700025");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 36000000 + "'", int3 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2 + "'", int5 == 2);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 36000000 + "'", int9 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2022 + "'", int11 == 2022);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 36000000 + "'", int17 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 20 + "'", int21 == 20);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(localDateTime29);
    }

    @Test
    public void test02027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02027");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("n. Chr.");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
    }

    @Test
    public void test02028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02028");
        org.joda.time.tz.Provider provider0 = org.joda.time.DateTimeZone.getProvider();
        java.util.Set<java.lang.String> strSet1 = provider0.getAvailableIDs();
        org.joda.time.DateTimeZone.setProvider(provider0);
        org.joda.time.DateTimeZone dateTimeZone4 = provider0.getZone("53166807");
        org.joda.time.DateTimeZone dateTimeZone6 = provider0.getZone("2812140");
        org.joda.time.DateTimeZone dateTimeZone8 = provider0.getZone("2022-02-21T14:47:46.961");
        org.junit.Assert.assertNotNull(provider0);
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNull(dateTimeZone4);
        org.junit.Assert.assertNull(dateTimeZone6);
        org.junit.Assert.assertNull(dateTimeZone8);
    }

    @Test
    public void test02029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02029");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray5 = localDateTime4.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.plusWeeks(2022);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.LocalDateTime localDateTime10 = localDateTime4.withPeriodAdded(readablePeriod8, (-1));
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusYears(2839);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 36000000 + "'", int3 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
    }

    @Test
    public void test02030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02030");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.hourOfHalfday();
        org.joda.time.tz.NameProvider nameProvider2 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale3 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet4 = locale3.getExtensionKeys();
        java.lang.String str7 = nameProvider2.getShortName(locale3, "Koordinierte Universalzeit", "+00:00");
        java.util.Locale locale8 = java.util.Locale.GERMAN;
        java.lang.String str11 = nameProvider2.getShortName(locale8, "53167803", "jpn");
        int int12 = dateTimeField1.getMaximumTextLength(locale8);
        java.util.TimeZone timeZone13 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forTimeZone(timeZone13);
        int int16 = dateTimeZone14.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime17 = org.joda.time.LocalDateTime.now(dateTimeZone14);
        int int18 = localDateTime17.getWeekyear();
        org.joda.time.tz.NameProvider nameProvider20 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale21 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet22 = locale21.getExtensionKeys();
        java.lang.String str25 = nameProvider20.getShortName(locale21, "Koordinierte Universalzeit", "+00:00");
        java.util.Locale.Builder builder26 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder29 = builder26.setExtension('x', "jpn");
        java.util.Locale locale30 = java.util.Locale.GERMAN;
        java.util.Locale locale31 = java.util.Locale.GERMAN;
        java.lang.String str32 = locale30.getDisplayCountry(locale31);
        java.util.Locale locale33 = locale30.stripExtensions();
        java.lang.String str34 = locale30.getDisplayName();
        java.util.Locale.Builder builder35 = builder29.setLocale(locale30);
        java.util.Locale locale36 = builder35.build();
        java.lang.String str37 = locale36.getScript();
        java.lang.String str40 = nameProvider20.getName(locale36, "hourOfDay", "");
        java.lang.String str41 = dateTimeField1.getAsShortText((org.joda.time.ReadablePartial) localDateTime17, 22, locale36);
        java.util.TimeZone timeZone42 = null;
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forTimeZone(timeZone42);
        int int45 = dateTimeZone43.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime46 = org.joda.time.LocalDateTime.now(dateTimeZone43);
        int int47 = localDateTime46.getWeekyear();
        java.util.TimeZone timeZone48 = null;
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.forTimeZone(timeZone48);
        int int51 = dateTimeZone49.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime52 = org.joda.time.LocalDateTime.now(dateTimeZone49);
        org.joda.time.LocalDateTime localDateTime53 = org.joda.time.LocalDateTime.now(dateTimeZone49);
        org.joda.time.LocalDateTime localDateTime55 = localDateTime53.minusMinutes((int) ' ');
        org.joda.time.ReadablePeriod readablePeriod56 = null;
        org.joda.time.LocalDateTime localDateTime57 = localDateTime53.plus(readablePeriod56);
        int[] intArray58 = localDateTime57.getValues();
        int int59 = dateTimeField1.getMaximumValue((org.joda.time.ReadablePartial) localDateTime46, intArray58);
        org.joda.time.LocalDateTime.Property property60 = localDateTime46.weekyear();
        org.joda.time.LocalDateTime.Property property61 = localDateTime46.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime62 = property61.roundCeilingCopy();
        java.lang.String str63 = property61.toString();
        org.joda.time.LocalDateTime localDateTime64 = property61.withMaximumValue();
        java.util.Locale locale65 = java.util.Locale.GERMAN;
        java.util.Locale locale66 = java.util.Locale.GERMAN;
        java.lang.String str67 = locale65.getDisplayCountry(locale66);
        java.util.Locale locale68 = locale65.stripExtensions();
        java.lang.String str69 = locale68.getISO3Country();
        java.lang.String str70 = property61.getAsText(locale68);
        java.lang.String str71 = locale68.getDisplayScript();
        java.lang.String str72 = locale68.getDisplayCountry();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(nameProvider2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet4);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "de");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 36000000 + "'", int16 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2022 + "'", int18 == 2022);
        org.junit.Assert.assertNotNull(nameProvider20);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet22);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "de");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "de");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "de");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "German" + "'", str34, "German");
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "de");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "22" + "'", str41, "22");
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 36000000 + "'", int45 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2022 + "'", int47 == 2022);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 36000000 + "'", int51 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(intArray58);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[2022, 2, 22, 2918575]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 11 + "'", int59 == 11);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "Property[weekOfWeekyear]" + "'", str63, "Property[weekOfWeekyear]");
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "de");
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "de");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "de");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "8" + "'", str70, "8");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
    }

    @Test
    public void test02031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02031");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.yearOfEra();
        java.util.TimeZone timeZone3 = null;
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forTimeZone(timeZone3);
        int int6 = dateTimeZone4.getOffset(100L);
        java.util.TimeZone timeZone7 = dateTimeZone4.toTimeZone();
        int int9 = dateTimeZone4.getStandardOffset((long) ' ');
        org.joda.time.Chronology chronology10 = iSOChronology0.withZone(dateTimeZone4);
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology0.era();
        // The following exception was thrown during execution in test generation
        try {
            long long14 = dateTimeField11.set((long) 1456, 16);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 16 for era must be in the range [0,1]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 36000000 + "'", int6 == 36000000);
        org.junit.Assert.assertNotNull(timeZone7);
        org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 36000000 + "'", int9 == 36000000);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
    }

    @Test
    public void test02032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02032");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        int int5 = localDateTime4.getWeekyear();
        java.util.TimeZone timeZone6 = null;
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forTimeZone(timeZone6);
        int int9 = dateTimeZone7.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime10 = org.joda.time.LocalDateTime.now(dateTimeZone7);
        int int11 = localDateTime10.getWeekyear();
        org.joda.time.LocalDateTime.Property property12 = localDateTime10.millisOfDay();
        java.util.Locale locale13 = java.util.Locale.GERMAN;
        java.util.Locale locale14 = java.util.Locale.GERMAN;
        java.lang.String str15 = locale13.getDisplayCountry(locale14);
        java.util.Locale locale16 = locale13.stripExtensions();
        int int17 = property12.getMaximumShortTextLength(locale13);
        org.joda.time.Interval interval18 = property12.toInterval();
        org.joda.time.LocalDateTime localDateTime20 = property12.setCopy(1);
        org.joda.time.LocalDateTime.Property property21 = localDateTime20.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime20.withMillisOfDay((int) (byte) 10);
        int int24 = localDateTime23.getMinuteOfHour();
        org.joda.time.LocalDateTime localDateTime25 = localDateTime4.withFields((org.joda.time.ReadablePartial) localDateTime23);
        org.joda.time.LocalDateTime.Property property26 = localDateTime25.millisOfDay();
        org.joda.time.LocalDateTime localDateTime28 = localDateTime25.minusYears(2840946);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime25.minusMillis((int) ' ');
        int int31 = localDateTime30.size();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 36000000 + "'", int3 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2022 + "'", int5 == 2022);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 36000000 + "'", int9 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2022 + "'", int11 == 2022);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "de");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "de");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "de");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 8 + "'", int17 == 8);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 4 + "'", int31 == 4);
    }

    @Test
    public void test02033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02033");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime5 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.plusWeeks(27424246);
        java.util.TimeZone timeZone8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        int int11 = dateTimeZone9.getOffset(100L);
        long long13 = dateTimeZone9.nextTransition((long) (short) -1);
        org.joda.time.DateTime dateTime14 = localDateTime7.toDateTime(dateTimeZone9);
        long long16 = dateTimeZone9.convertUTCToLocal(0L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 36000000 + "'", int3 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 36000000 + "'", int11 == 36000000);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 36000000L + "'", long16 == 36000000L);
    }

    @Test
    public void test02034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02034");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        long long6 = iSOChronology0.add(readablePeriod3, (long) 100, 11);
        org.joda.time.DateTimeField dateTimeField7 = iSOChronology0.hourOfDay();
        org.joda.time.DurationField durationField8 = iSOChronology0.days();
        org.joda.time.DurationField durationField9 = iSOChronology0.minutes();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology0.clockhourOfDay();
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray14 = iSOChronology0.get(readablePeriod11, (long) 41, 31478L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 100L + "'", long6 == 100L);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
    }

    @Test
    public void test02035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02035");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("53", (double) (-29997195L));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: weight=-2.9997195E7");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02036");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setExtension('x', "jpn");
        java.util.Locale locale4 = builder3.build();
        java.util.Locale.Builder builder5 = builder3.clear();
        java.util.Locale locale6 = builder5.build();
        java.lang.String str7 = locale6.getScript();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
    }

    @Test
    public void test02037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02037");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.centuryOfEra();
        org.joda.time.DurationField durationField3 = iSOChronology0.seconds();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology0.hourOfHalfday();
        org.joda.time.DurationField durationField6 = iSOChronology0.minutes();
        org.joda.time.DurationField durationField7 = iSOChronology0.weekyears();
        org.joda.time.DurationField durationField8 = iSOChronology0.minutes();
        // The following exception was thrown during execution in test generation
        try {
            long long14 = iSOChronology0.getDateTimeMillis(1677722323680000100L, 2841311, (-3600000), 53266354, 35);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2841311 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(durationField8);
    }

    @Test
    public void test02038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02038");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        int int5 = localDateTime4.getWeekyear();
        org.joda.time.LocalDateTime.Property property6 = localDateTime4.millisOfDay();
        java.lang.String str7 = property6.getAsString();
        int int8 = property6.getLeapAmount();
        long long9 = property6.remainder();
        int int10 = property6.getMaximumValue();
        java.util.TimeZone timeZone11 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        int int14 = dateTimeZone12.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime15 = org.joda.time.LocalDateTime.now(dateTimeZone12);
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.DateTime dateTime17 = localDateTime15.toDateTime(readableInstant16);
        org.joda.time.Chronology chronology18 = dateTime17.getChronology();
        org.joda.time.DurationField durationField19 = chronology18.hours();
        org.joda.time.DurationField durationField20 = chronology18.months();
        org.joda.time.DateTimeField dateTimeField21 = chronology18.dayOfYear();
        java.util.TimeZone timeZone22 = null;
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        int int25 = dateTimeZone23.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime26 = org.joda.time.LocalDateTime.now(dateTimeZone23);
        int[] intArray29 = new int[] { (short) 0, (short) 0 };
        int int30 = dateTimeField21.getMinimumValue((org.joda.time.ReadablePartial) localDateTime26, intArray29);
        int int32 = dateTimeField21.getMinimumValue((long) 100);
        java.util.TimeZone timeZone33 = null;
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forTimeZone(timeZone33);
        int int36 = dateTimeZone34.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime37 = org.joda.time.LocalDateTime.now(dateTimeZone34);
        int int38 = localDateTime37.getWeekyear();
        org.joda.time.LocalDateTime.Property property39 = localDateTime37.minuteOfHour();
        int int40 = dateTimeField21.getMaximumValue((org.joda.time.ReadablePartial) localDateTime37);
        long long43 = dateTimeField21.getDifferenceAsLong(7870L, 0L);
        org.joda.time.tz.NameProvider nameProvider44 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale45 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet46 = locale45.getExtensionKeys();
        java.lang.String str49 = nameProvider44.getShortName(locale45, "Koordinierte Universalzeit", "+00:00");
        java.util.Locale locale50 = java.util.Locale.GERMAN;
        java.lang.String str53 = nameProvider44.getShortName(locale50, "53167803", "jpn");
        int int54 = dateTimeField21.getMaximumShortTextLength(locale50);
        java.util.Locale locale55 = java.util.Locale.PRC;
        java.lang.String str56 = locale50.getDisplayLanguage(locale55);
        java.util.Set<java.lang.Character> charSet57 = locale50.getExtensionKeys();
        int int58 = property6.getMaximumTextLength(locale50);
        org.joda.time.Interval interval59 = property6.toInterval();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 36000000 + "'", int3 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2022 + "'", int5 == 2022);
        org.junit.Assert.assertNotNull(property6);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "2919104" + "'", str7, "2919104");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 86399999 + "'", int10 == 86399999);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 36000000 + "'", int14 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 36000000 + "'", int25 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[0, 0]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 36000000 + "'", int36 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2022 + "'", int38 == 2022);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 365 + "'", int40 == 365);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
        org.junit.Assert.assertNotNull(nameProvider44);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet46);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "de");
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 3 + "'", int54 == 3);
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "\u5fb7\u6587" + "'", str56, "\u5fb7\u6587");
        org.junit.Assert.assertNotNull(charSet57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 8 + "'", int58 == 8);
        org.junit.Assert.assertNotNull(interval59);
    }

    @Test
    public void test02039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02039");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet1 = locale0.getExtensionKeys();
        java.util.Iterator<java.lang.Character> charItor2 = charSet1.iterator();
        java.util.ArrayList[] arrayListArray4 = new java.util.ArrayList[0];
        @SuppressWarnings("unchecked")
        java.util.ArrayList<java.util.Locale.LanguageRange>[] languageRangeListArray5 = (java.util.ArrayList<java.util.Locale.LanguageRange>[]) arrayListArray4;
        java.util.ArrayList<java.util.Locale.LanguageRange>[] languageRangeListArray6 = charSet1.toArray((java.util.ArrayList<java.util.Locale.LanguageRange>[]) arrayListArray4);
        java.util.TimeZone timeZone7 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forTimeZone(timeZone7);
        int int10 = dateTimeZone8.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now(dateTimeZone8);
        int int12 = localDateTime11.getWeekyear();
        org.joda.time.LocalDateTime.Property property13 = localDateTime11.millisOfDay();
        java.util.TimeZone timeZone14 = null;
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forTimeZone(timeZone14);
        int int17 = dateTimeZone15.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime18 = org.joda.time.LocalDateTime.now(dateTimeZone15);
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.DateTime dateTime20 = localDateTime18.toDateTime(readableInstant19);
        java.util.TimeZone timeZone21 = null;
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forTimeZone(timeZone21);
        int int24 = dateTimeZone22.getOffset(100L);
        org.joda.time.DateTime dateTime25 = localDateTime18.toDateTime(dateTimeZone22);
        int int26 = property13.compareTo((org.joda.time.ReadableInstant) dateTime25);
        boolean boolean27 = charSet1.equals((java.lang.Object) dateTime25);
        org.joda.time.DateTimeZone dateTimeZone28 = dateTime25.getZone();
        org.joda.time.chrono.ISOChronology iSOChronology29 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone28);
        org.joda.time.DateTimeField dateTimeField30 = iSOChronology29.minuteOfHour();
        org.joda.time.DurationField durationField31 = iSOChronology29.centuries();
        long long34 = durationField31.getValueAsLong((long) 49686371, 1644850109798L);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet1);
        org.junit.Assert.assertNotNull(charItor2);
        org.junit.Assert.assertNotNull(arrayListArray4);
        org.junit.Assert.assertNotNull(languageRangeListArray5);
        org.junit.Assert.assertNotNull(languageRangeListArray6);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 36000000 + "'", int10 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2022 + "'", int12 == 2022);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 36000000 + "'", int17 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 36000000 + "'", int24 == 36000000);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(iSOChronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
    }

    @Test
    public void test02040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02040");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(49681802, 2807077, 1645454839, 2808227, 53304655);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2808227 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02041");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setExtension('x', "jpn");
        java.util.Locale.Builder builder5 = builder0.removeUnicodeLocaleAttribute("53169126");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder7 = builder0.setRegion("53168129");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed region: 53168129 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
    }

    @Test
    public void test02042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02042");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.hourOfHalfday();
        java.util.TimeZone timeZone3 = null;
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forTimeZone(timeZone3);
        int int6 = dateTimeZone4.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime7 = org.joda.time.LocalDateTime.now(dateTimeZone4);
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.DateTime dateTime9 = localDateTime7.toDateTime(readableInstant8);
        java.util.TimeZone timeZone10 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        int int13 = dateTimeZone11.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime14 = org.joda.time.LocalDateTime.now(dateTimeZone11);
        org.joda.time.LocalDateTime localDateTime15 = org.joda.time.LocalDateTime.now(dateTimeZone11);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.minusYears(2022);
        org.joda.time.LocalDateTime.Property property18 = localDateTime17.era();
        int int19 = localDateTime7.compareTo((org.joda.time.ReadablePartial) localDateTime17);
        org.joda.time.chrono.ISOChronology iSOChronology20 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField21 = iSOChronology20.hourOfHalfday();
        java.lang.String str22 = iSOChronology20.toString();
        java.util.TimeZone timeZone23 = null;
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forTimeZone(timeZone23);
        int int26 = dateTimeZone24.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime27 = org.joda.time.LocalDateTime.now(dateTimeZone24);
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.DateTime dateTime29 = localDateTime27.toDateTime(readableInstant28);
        org.joda.time.Chronology chronology30 = dateTime29.getChronology();
        org.joda.time.DurationField durationField31 = chronology30.hours();
        org.joda.time.DurationField durationField32 = chronology30.months();
        org.joda.time.DateTimeField dateTimeField33 = chronology30.dayOfYear();
        java.util.TimeZone timeZone34 = null;
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forTimeZone(timeZone34);
        int int37 = dateTimeZone35.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime38 = org.joda.time.LocalDateTime.now(dateTimeZone35);
        int[] intArray41 = new int[] { (short) 0, (short) 0 };
        int int42 = dateTimeField33.getMinimumValue((org.joda.time.ReadablePartial) localDateTime38, intArray41);
        java.lang.String str44 = dateTimeField33.getAsShortText((long) 53166088);
        java.util.TimeZone timeZone45 = null;
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.forTimeZone(timeZone45);
        int int48 = dateTimeZone46.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime49 = org.joda.time.LocalDateTime.now(dateTimeZone46);
        int int50 = localDateTime49.getWeekyear();
        org.joda.time.DurationFieldType durationFieldType51 = org.joda.time.DurationFieldType.days();
        org.joda.time.LocalDateTime localDateTime53 = localDateTime49.withFieldAdded(durationFieldType51, 53166088);
        java.util.Locale locale54 = java.util.Locale.ROOT;
        java.lang.String str55 = dateTimeField33.getAsShortText((org.joda.time.ReadablePartial) localDateTime53, locale54);
        java.util.TimeZone timeZone56 = null;
        org.joda.time.DateTimeZone dateTimeZone57 = org.joda.time.DateTimeZone.forTimeZone(timeZone56);
        int int59 = dateTimeZone57.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime60 = org.joda.time.LocalDateTime.now(dateTimeZone57);
        int int61 = localDateTime60.getWeekyear();
        boolean boolean62 = localDateTime53.isEqual((org.joda.time.ReadablePartial) localDateTime60);
        int[] intArray64 = iSOChronology20.get((org.joda.time.ReadablePartial) localDateTime60, (long) 53166088);
        iSOChronology0.validate((org.joda.time.ReadablePartial) localDateTime7, intArray64);
        org.joda.time.DurationField durationField66 = iSOChronology0.minutes();
        java.util.TimeZone timeZone67 = null;
        org.joda.time.DateTimeZone dateTimeZone68 = org.joda.time.DateTimeZone.forTimeZone(timeZone67);
        int int70 = dateTimeZone68.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime71 = org.joda.time.LocalDateTime.now(dateTimeZone68);
        int int72 = localDateTime71.getDayOfYear();
        org.joda.time.LocalDateTime localDateTime74 = localDateTime71.withYearOfEra(2022);
        java.util.TimeZone timeZone75 = null;
        org.joda.time.DateTimeZone dateTimeZone76 = org.joda.time.DateTimeZone.forTimeZone(timeZone75);
        int int78 = dateTimeZone76.getOffset(100L);
        java.util.TimeZone timeZone79 = dateTimeZone76.toTimeZone();
        int int81 = dateTimeZone76.getStandardOffset((long) ' ');
        org.joda.time.DateTime dateTime82 = localDateTime74.toDateTime(dateTimeZone76);
        java.lang.String str84 = dateTimeZone76.getShortName(0L);
        long long86 = dateTimeZone76.convertUTCToLocal((long) 'u');
        org.joda.time.Chronology chronology87 = iSOChronology0.withZone(dateTimeZone76);
        org.joda.time.DateTimeField dateTimeField88 = iSOChronology0.centuryOfEra();
        org.joda.time.DurationField durationField89 = iSOChronology0.millis();
        org.joda.time.DateTimeField dateTimeField90 = iSOChronology0.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField91 = iSOChronology0.dayOfMonth();
        org.joda.time.DurationField durationField92 = iSOChronology0.weekyears();
        org.joda.time.DateTimeField dateTimeField93 = iSOChronology0.clockhourOfDay();
        long long95 = dateTimeField93.roundHalfFloor(53195994L);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 36000000 + "'", int6 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 36000000 + "'", int13 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(iSOChronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "ISOChronology[+10:00]" + "'", str22, "ISOChronology[+10:00]");
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 36000000 + "'", int26 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 36000000 + "'", int37 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[0, 0]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "2" + "'", str44, "2");
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 36000000 + "'", int48 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2022 + "'", int50 == 2022);
        org.junit.Assert.assertNotNull(durationFieldType51);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "347" + "'", str55, "347");
        org.junit.Assert.assertNotNull(dateTimeZone57);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 36000000 + "'", int59 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 2022 + "'", int61 == 2022);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[1970, 1, 2, 2766088]");
        org.junit.Assert.assertNotNull(durationField66);
        org.junit.Assert.assertNotNull(dateTimeZone68);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 36000000 + "'", int70 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 53 + "'", int72 == 53);
        org.junit.Assert.assertNotNull(localDateTime74);
        org.junit.Assert.assertNotNull(dateTimeZone76);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 36000000 + "'", int78 == 36000000);
        org.junit.Assert.assertNotNull(timeZone79);
        org.junit.Assert.assertEquals(timeZone79.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 36000000 + "'", int81 == 36000000);
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "+10:00" + "'", str84, "+10:00");
        org.junit.Assert.assertTrue("'" + long86 + "' != '" + 36000117L + "'", long86 == 36000117L);
        org.junit.Assert.assertNotNull(chronology87);
        org.junit.Assert.assertNotNull(dateTimeField88);
        org.junit.Assert.assertNotNull(durationField89);
        org.junit.Assert.assertNotNull(dateTimeField90);
        org.junit.Assert.assertNotNull(dateTimeField91);
        org.junit.Assert.assertNotNull(durationField92);
        org.junit.Assert.assertNotNull(dateTimeField93);
        org.junit.Assert.assertTrue("'" + long95 + "' != '" + 54000000L + "'", long95 == 54000000L);
    }

    @Test
    public void test02043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02043");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.millis();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.secondOfDay();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone4 = iSOChronology0.getZone();
        // The following exception was thrown during execution in test generation
        try {
            long long9 = iSOChronology0.getDateTimeMillis(49695213, 2839, (-191969722), 2841);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2839 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
    }

    @Test
    public void test02044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02044");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime5 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.plusSeconds((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.plusMinutes(3);
        org.joda.time.LocalDateTime.Property property10 = localDateTime7.hourOfDay();
        int int11 = localDateTime7.getHourOfDay();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 36000000 + "'", int3 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    public void test02045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02045");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.hourOfHalfday();
        java.lang.String str2 = iSOChronology0.toString();
        org.joda.time.DurationField durationField3 = iSOChronology0.weekyears();
        org.joda.time.DurationField durationField4 = iSOChronology0.weeks();
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology0.weekyear();
        java.lang.String str6 = dateTimeField5.toString();
        int int7 = dateTimeField5.getMaximumValue();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ISOChronology[+10:00]" + "'", str2, "ISOChronology[+10:00]");
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "DateTimeField[weekyear]" + "'", str6, "DateTimeField[weekyear]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 292278993 + "'", int7 == 292278993);
    }

    @Test
    public void test02046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02046");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffset(100L);
        java.util.TimeZone timeZone4 = dateTimeZone1.toTimeZone();
        java.lang.String str5 = dateTimeZone1.getID();
        java.util.TimeZone timeZone6 = dateTimeZone1.toTimeZone();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime(dateTimeZone1);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.plus(readablePeriod8);
        org.joda.time.chrono.ISOChronology iSOChronology10 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology10.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology10.centuryOfEra();
        org.joda.time.DurationField durationField13 = iSOChronology10.centuries();
        org.joda.time.DurationField durationField14 = iSOChronology10.hours();
        java.util.TimeZone timeZone15 = null;
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forTimeZone(timeZone15);
        int int18 = dateTimeZone16.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime19 = org.joda.time.LocalDateTime.now(dateTimeZone16);
        int int20 = localDateTime19.getDayOfYear();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime19.withYearOfEra(2022);
        long long24 = iSOChronology10.set((org.joda.time.ReadablePartial) localDateTime22, (long) 0);
        org.joda.time.DateTime dateTime25 = localDateTime22.toDateTime();
        boolean boolean26 = localDateTime7.isBefore((org.joda.time.ReadablePartial) localDateTime22);
        org.joda.time.LocalDateTime.Property property27 = localDateTime22.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField28 = property27.getField();
        org.joda.time.chrono.ISOChronology iSOChronology30 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField31 = iSOChronology30.hourOfHalfday();
        java.lang.String str32 = iSOChronology30.toString();
        org.joda.time.DateTimeField dateTimeField33 = iSOChronology30.era();
        org.joda.time.DurationField durationField34 = iSOChronology30.centuries();
        org.joda.time.ReadablePeriod readablePeriod35 = null;
        long long38 = iSOChronology30.add(readablePeriod35, (long) 2022, (int) (byte) 100);
        org.joda.time.DateTimeField dateTimeField39 = iSOChronology30.hourOfDay();
        org.joda.time.DateTimeField dateTimeField40 = iSOChronology30.minuteOfDay();
        java.util.TimeZone timeZone41 = null;
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forTimeZone(timeZone41);
        int int44 = dateTimeZone42.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime45 = org.joda.time.LocalDateTime.now(dateTimeZone42);
        org.joda.time.LocalDateTime localDateTime46 = org.joda.time.LocalDateTime.now(dateTimeZone42);
        org.joda.time.LocalDateTime localDateTime48 = localDateTime46.minusMinutes((int) ' ');
        java.lang.String str49 = localDateTime46.toString();
        int int50 = localDateTime46.getDayOfMonth();
        java.util.TimeZone timeZone52 = null;
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.forTimeZone(timeZone52);
        int int55 = dateTimeZone53.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime56 = org.joda.time.LocalDateTime.now(dateTimeZone53);
        org.joda.time.ReadableInstant readableInstant57 = null;
        org.joda.time.DateTime dateTime58 = localDateTime56.toDateTime(readableInstant57);
        org.joda.time.Chronology chronology59 = dateTime58.getChronology();
        org.joda.time.DurationField durationField60 = chronology59.hours();
        org.joda.time.DurationField durationField61 = chronology59.months();
        org.joda.time.DateTimeField dateTimeField62 = chronology59.dayOfYear();
        java.util.TimeZone timeZone63 = null;
        org.joda.time.DateTimeZone dateTimeZone64 = org.joda.time.DateTimeZone.forTimeZone(timeZone63);
        int int66 = dateTimeZone64.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime67 = org.joda.time.LocalDateTime.now(dateTimeZone64);
        int[] intArray70 = new int[] { (short) 0, (short) 0 };
        int int71 = dateTimeField62.getMinimumValue((org.joda.time.ReadablePartial) localDateTime67, intArray70);
        boolean boolean72 = dateTimeField62.isLenient();
        org.joda.time.LocalDateTime localDateTime73 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime75 = localDateTime73.minusMillis(52);
        java.util.Locale.Builder builder77 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder80 = builder77.setExtension('x', "jpn");
        java.util.Locale locale81 = builder77.build();
        java.util.Locale locale82 = builder77.build();
        java.lang.String str83 = dateTimeField62.getAsShortText((org.joda.time.ReadablePartial) localDateTime73, (int) 'a', locale82);
        boolean boolean84 = locale82.hasExtensions();
        java.lang.String str85 = dateTimeField40.getAsText((org.joda.time.ReadablePartial) localDateTime46, 1, locale82);
        java.lang.String str86 = locale82.getDisplayScript();
        java.lang.String str87 = dateTimeField28.getAsText(49691961, locale82);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 36000000 + "'", int3 == 36000000);
        org.junit.Assert.assertNotNull(timeZone4);
        org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+10:00" + "'", str5, "+10:00");
        org.junit.Assert.assertNotNull(timeZone6);
        org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(iSOChronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 36000000 + "'", int18 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 53 + "'", int20 == 53);
        org.junit.Assert.assertNotNull(localDateTime22);
// flaky:         org.junit.Assert.assertTrue("'" + long24 + "' != '" + 1645454919654L + "'", long24 == 1645454919654L);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(iSOChronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "ISOChronology[+10:00]" + "'", str32, "ISOChronology[+10:00]");
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 2022L + "'", long38 == 2022L);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 36000000 + "'", int44 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(localDateTime48);
// flaky:         org.junit.Assert.assertEquals("'" + str49 + "' != '" + "2022-02-22T00:48:39.654" + "'", str49, "2022-02-22T00:48:39.654");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 22 + "'", int50 == 22);
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 36000000 + "'", int55 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(durationField60);
        org.junit.Assert.assertNotNull(durationField61);
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertNotNull(dateTimeZone64);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 36000000 + "'", int66 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[0, 0]");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1 + "'", int71 == 1);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(localDateTime75);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(locale81);
        org.junit.Assert.assertEquals(locale81.toString(), "");
        org.junit.Assert.assertNotNull(locale82);
        org.junit.Assert.assertEquals(locale82.toString(), "");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "97" + "'", str83, "97");
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "1" + "'", str85, "1");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "" + "'", str86, "");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "49691961" + "'", str87, "49691961");
    }

    @Test
    public void test02047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02047");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("53311775");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=53311775");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02048");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setExtension('x', "jpn");
        java.util.Locale locale4 = builder0.build();
        java.util.Locale locale5 = builder0.build();
        java.util.Locale.Builder builder8 = builder0.setExtension('u', "52");
        java.util.TimeZone timeZone9 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        int int12 = dateTimeZone10.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime13 = org.joda.time.LocalDateTime.now(dateTimeZone10);
        int int14 = localDateTime13.getWeekyear();
        org.joda.time.LocalDateTime.Property property15 = localDateTime13.millisOfDay();
        java.util.Locale locale16 = java.util.Locale.GERMAN;
        java.util.Locale locale17 = java.util.Locale.GERMAN;
        java.lang.String str18 = locale16.getDisplayCountry(locale17);
        java.util.Locale locale19 = locale16.stripExtensions();
        int int20 = property15.getMaximumShortTextLength(locale16);
        org.joda.time.Interval interval21 = property15.toInterval();
        org.joda.time.LocalDateTime localDateTime23 = property15.setCopy(1);
        org.joda.time.LocalDateTime.Property property24 = localDateTime23.secondOfMinute();
        org.joda.time.chrono.ISOChronology iSOChronology25 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField26 = iSOChronology25.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField27 = iSOChronology25.yearOfEra();
        java.util.TimeZone timeZone28 = null;
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forTimeZone(timeZone28);
        int int31 = dateTimeZone29.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime32 = org.joda.time.LocalDateTime.now(dateTimeZone29);
        org.joda.time.LocalDateTime localDateTime33 = org.joda.time.LocalDateTime.now(dateTimeZone29);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime33.plusSeconds((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime33.minusWeeks((int) (byte) 10);
        java.util.TimeZone timeZone38 = null;
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forTimeZone(timeZone38);
        int int41 = dateTimeZone39.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime42 = org.joda.time.LocalDateTime.now(dateTimeZone39);
        org.joda.time.LocalDateTime localDateTime43 = org.joda.time.LocalDateTime.now(dateTimeZone39);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime43.plusSeconds((int) (short) 10);
        int int46 = localDateTime43.size();
        boolean boolean47 = localDateTime37.isBefore((org.joda.time.ReadablePartial) localDateTime43);
        org.joda.time.LocalDateTime localDateTime49 = localDateTime43.withMillisOfSecond(52);
        org.joda.time.LocalDateTime localDateTime51 = localDateTime49.plusMinutes(0);
        org.joda.time.LocalDateTime localDateTime53 = localDateTime49.plusDays(53166088);
        int int54 = localDateTime53.getDayOfYear();
        org.joda.time.chrono.ISOChronology iSOChronology55 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField56 = iSOChronology55.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField57 = iSOChronology55.yearOfEra();
        org.joda.time.DateTimeField dateTimeField58 = iSOChronology55.weekyearOfCentury();
        java.lang.String str59 = iSOChronology55.toString();
        org.joda.time.DateTimeField dateTimeField60 = iSOChronology55.clockhourOfHalfday();
        java.lang.String str61 = iSOChronology55.toString();
        org.joda.time.DateTimeField dateTimeField62 = iSOChronology55.dayOfMonth();
        java.util.Locale locale63 = java.util.Locale.KOREAN;
        java.lang.String str64 = locale63.getDisplayScript();
        int int65 = dateTimeField62.getMaximumShortTextLength(locale63);
        java.lang.String str66 = dateTimeField27.getAsShortText((org.joda.time.ReadablePartial) localDateTime53, locale63);
        int int67 = property24.compareTo((org.joda.time.ReadablePartial) localDateTime53);
        org.joda.time.chrono.ISOChronology iSOChronology68 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField69 = iSOChronology68.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField70 = iSOChronology68.centuryOfEra();
        org.joda.time.DurationField durationField71 = iSOChronology68.centuries();
        org.joda.time.DurationField durationField72 = iSOChronology68.hours();
        java.util.TimeZone timeZone73 = null;
        org.joda.time.DateTimeZone dateTimeZone74 = org.joda.time.DateTimeZone.forTimeZone(timeZone73);
        int int76 = dateTimeZone74.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime77 = org.joda.time.LocalDateTime.now(dateTimeZone74);
        int int78 = localDateTime77.getDayOfYear();
        org.joda.time.LocalDateTime localDateTime80 = localDateTime77.withYearOfEra(2022);
        long long82 = iSOChronology68.set((org.joda.time.ReadablePartial) localDateTime80, (long) 0);
        org.joda.time.DateTimeField dateTimeField83 = iSOChronology68.monthOfYear();
        org.joda.time.DateTimeField dateTimeField84 = iSOChronology68.clockhourOfDay();
        long long86 = dateTimeField84.roundFloor(3155695200000L);
        java.util.Locale locale88 = java.util.Locale.GERMAN;
        java.util.Locale locale89 = java.util.Locale.GERMAN;
        java.lang.String str90 = locale88.getDisplayCountry(locale89);
        java.util.Locale locale91 = locale88.stripExtensions();
        java.util.Locale.setDefault(locale88);
        java.lang.String str93 = dateTimeField84.getAsText(1644849991855L, locale88);
        int int94 = property24.getMaximumShortTextLength(locale88);
        java.util.Locale.Builder builder95 = builder8.setLocale(locale88);
        java.lang.String str96 = locale88.getDisplayScript();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 36000000 + "'", int12 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2022 + "'", int14 == 2022);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "de");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "de");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "de");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 8 + "'", int20 == 8);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(iSOChronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 36000000 + "'", int31 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 36000000 + "'", int41 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 4 + "'", int46 == 4);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 347 + "'", int54 == 347);
        org.junit.Assert.assertNotNull(iSOChronology55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "ISOChronology[+10:00]" + "'", str59, "ISOChronology[+10:00]");
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "ISOChronology[+10:00]" + "'", str61, "ISOChronology[+10:00]");
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 2 + "'", int65 == 2);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "147585" + "'", str66, "147585");
// flaky:         org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-1) + "'", int67 == (-1));
        org.junit.Assert.assertNotNull(iSOChronology68);
        org.junit.Assert.assertNotNull(dateTimeField69);
        org.junit.Assert.assertNotNull(dateTimeField70);
        org.junit.Assert.assertNotNull(durationField71);
        org.junit.Assert.assertNotNull(durationField72);
        org.junit.Assert.assertNotNull(dateTimeZone74);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 36000000 + "'", int76 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 53 + "'", int78 == 53);
        org.junit.Assert.assertNotNull(localDateTime80);
// flaky:         org.junit.Assert.assertTrue("'" + long82 + "' != '" + 1645454919755L + "'", long82 == 1645454919755L);
        org.junit.Assert.assertNotNull(dateTimeField83);
        org.junit.Assert.assertNotNull(dateTimeField84);
        org.junit.Assert.assertTrue("'" + long86 + "' != '" + 3155695200000L + "'", long86 == 3155695200000L);
        org.junit.Assert.assertNotNull(locale88);
        org.junit.Assert.assertEquals(locale88.toString(), "de");
        org.junit.Assert.assertNotNull(locale89);
        org.junit.Assert.assertEquals(locale89.toString(), "de");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "" + "'", str90, "");
        org.junit.Assert.assertNotNull(locale91);
        org.junit.Assert.assertEquals(locale91.toString(), "de");
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "24" + "'", str93, "24");
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 2 + "'", int94 == 2);
        org.junit.Assert.assertNotNull(builder95);
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "" + "'", str96, "");
    }

    @Test
    public void test02049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02049");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray5 = localDateTime4.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.hourOfDay();
        int int7 = localDateTime4.get(dateTimeFieldType6);
        org.joda.time.LocalDateTime.Property property8 = localDateTime4.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime4.minusHours(20);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = localDateTime4.getFieldType((int) (byte) 1);
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.LocalDateTime localDateTime14 = localDateTime4.minus(readableDuration13);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 36000000 + "'", int3 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray5);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(localDateTime14);
    }

    @Test
    public void test02050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02050");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        int int5 = localDateTime4.getWeekyear();
        org.joda.time.LocalDateTime.Property property6 = localDateTime4.millisOfDay();
        java.util.TimeZone timeZone7 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forTimeZone(timeZone7);
        int int10 = dateTimeZone8.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now(dateTimeZone8);
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.DateTime dateTime13 = localDateTime11.toDateTime(readableInstant12);
        java.util.TimeZone timeZone14 = null;
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forTimeZone(timeZone14);
        int int17 = dateTimeZone15.getOffset(100L);
        org.joda.time.DateTime dateTime18 = localDateTime11.toDateTime(dateTimeZone15);
        int int19 = property6.compareTo((org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.LocalDateTime localDateTime20 = property6.roundHalfEvenCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.LocalDateTime.Property property22 = localDateTime20.property(dateTimeFieldType21);
        int int23 = localDateTime20.size();
        int int24 = localDateTime20.size();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 36000000 + "'", int3 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2022 + "'", int5 == 2022);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 36000000 + "'", int10 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 36000000 + "'", int17 == 36000000);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 4 + "'", int23 == 4);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 4 + "'", int24 == 4);
    }

    @Test
    public void test02051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02051");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        int int5 = localDateTime4.getWeekyear();
        org.joda.time.LocalDateTime.Property property6 = localDateTime4.millisOfDay();
        java.lang.String str7 = property6.getAsString();
        int int8 = property6.getLeapAmount();
        org.joda.time.DurationField durationField9 = property6.getLeapDurationField();
        org.joda.time.LocalDateTime localDateTime11 = property6.addWrapFieldToCopy(20);
        java.util.Locale locale14 = new java.util.Locale("allemand", "53195209");
        java.util.TimeZone timeZone15 = null;
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forTimeZone(timeZone15);
        int int18 = dateTimeZone16.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime19 = org.joda.time.LocalDateTime.now(dateTimeZone16);
        int int20 = localDateTime19.getWeekyear();
        org.joda.time.LocalDateTime.Property property21 = localDateTime19.minuteOfHour();
        org.joda.time.LocalDateTime.Property property22 = localDateTime19.dayOfYear();
        java.util.TimeZone timeZone23 = null;
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forTimeZone(timeZone23);
        int int26 = dateTimeZone24.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime27 = org.joda.time.LocalDateTime.now(dateTimeZone24);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray28 = localDateTime27.getFieldTypes();
        int int29 = property22.compareTo((org.joda.time.ReadablePartial) localDateTime27);
        java.util.Locale locale30 = java.util.Locale.SIMPLIFIED_CHINESE;
        boolean boolean31 = localDateTime27.equals((java.lang.Object) locale30);
        java.lang.String str32 = locale14.getDisplayLanguage(locale30);
        int int33 = property6.getMaximumShortTextLength(locale30);
        org.joda.time.DateTimeField dateTimeField34 = property6.getField();
        int int35 = property6.getMaximumValueOverall();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 36000000 + "'", int3 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2022 + "'", int5 == 2022);
        org.junit.Assert.assertNotNull(property6);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "2919901" + "'", str7, "2919901");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNull(durationField9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertEquals(locale14.toString(), "allemand_53195209");
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 36000000 + "'", int18 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2022 + "'", int20 == 2022);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 36000000 + "'", int26 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "zh_CN");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "allemand" + "'", str32, "allemand");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 8 + "'", int33 == 8);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 86399999 + "'", int35 == 86399999);
    }

    @Test
    public void test02052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02052");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.chrono.ISOChronology iSOChronology1 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology1.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology1.centuryOfEra();
        org.joda.time.DurationField durationField4 = iSOChronology1.seconds();
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology1.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField6 = iSOChronology1.yearOfEra();
        org.joda.time.DateTimeField dateTimeField7 = iSOChronology1.monthOfYear();
        boolean boolean8 = dateTimeFieldType0.isSupported((org.joda.time.Chronology) iSOChronology1);
        org.joda.time.chrono.ISOChronology iSOChronology9 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology9.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology9.yearOfEra();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology9.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField13 = iSOChronology9.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology9.dayOfYear();
        java.util.TimeZone timeZone15 = null;
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forTimeZone(timeZone15);
        java.lang.String str18 = dateTimeZone16.getName(31556995199999L);
        java.lang.String str19 = dateTimeZone16.getID();
        org.joda.time.Chronology chronology20 = iSOChronology9.withZone(dateTimeZone16);
        org.joda.time.DurationField durationField21 = iSOChronology9.weeks();
        boolean boolean22 = dateTimeFieldType0.isSupported((org.joda.time.Chronology) iSOChronology9);
        org.joda.time.DateTimeField dateTimeField23 = iSOChronology9.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField24 = iSOChronology9.dayOfWeek();
        // The following exception was thrown during execution in test generation
        try {
            long long29 = iSOChronology9.getDateTimeMillis(2812640, 2898742, 2720, 0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2898742 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(iSOChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(iSOChronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+10:00" + "'", str18, "+10:00");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "+10:00" + "'", str19, "+10:00");
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
    }

    @Test
    public void test02053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02053");
        java.util.TimeZone timeZone1 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        int int4 = dateTimeZone2.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime5 = org.joda.time.LocalDateTime.now(dateTimeZone2);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.DateTime dateTime7 = localDateTime5.toDateTime(readableInstant6);
        org.joda.time.Chronology chronology8 = dateTime7.getChronology();
        org.joda.time.DurationField durationField9 = chronology8.hours();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((long) 52, chronology8);
        org.joda.time.DateTimeField dateTimeField11 = chronology8.weekOfWeekyear();
        java.lang.String str13 = dateTimeField11.getAsText((long) 35999999);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 36000000 + "'", int4 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "1" + "'", str13, "1");
    }

    @Test
    public void test02054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02054");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime5 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusMinutes((int) ' ');
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.LocalDateTime localDateTime9 = localDateTime5.plus(readablePeriod8);
        org.joda.time.LocalDateTime.Property property10 = localDateTime5.dayOfMonth();
        boolean boolean11 = property10.isLeap();
        java.util.TimeZone timeZone12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone12);
        int int15 = dateTimeZone13.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime16 = org.joda.time.LocalDateTime.now(dateTimeZone13);
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.DateTime dateTime18 = localDateTime16.toDateTime(readableInstant17);
        org.joda.time.Chronology chronology19 = dateTime18.getChronology();
        org.joda.time.DurationField durationField20 = chronology19.hours();
        org.joda.time.DurationField durationField21 = chronology19.months();
        org.joda.time.DateTimeField dateTimeField22 = chronology19.dayOfYear();
        java.util.TimeZone timeZone23 = null;
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forTimeZone(timeZone23);
        int int26 = dateTimeZone24.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime27 = org.joda.time.LocalDateTime.now(dateTimeZone24);
        int[] intArray30 = new int[] { (short) 0, (short) 0 };
        int int31 = dateTimeField22.getMinimumValue((org.joda.time.ReadablePartial) localDateTime27, intArray30);
        java.lang.String str33 = dateTimeField22.getAsShortText((long) 53166088);
        java.util.Locale locale35 = java.util.Locale.JAPANESE;
        java.lang.String str36 = locale35.getDisplayLanguage();
        java.util.Locale locale37 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet38 = locale37.getExtensionKeys();
        java.lang.String str39 = locale35.getDisplayLanguage(locale37);
        java.lang.String str40 = dateTimeField22.getAsText(0L, locale37);
        java.lang.String str41 = property10.getAsText(locale37);
        org.joda.time.LocalDateTime localDateTime42 = property10.getLocalDateTime();
        java.util.TimeZone timeZone43 = null;
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forTimeZone(timeZone43);
        int int46 = dateTimeZone44.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime47 = org.joda.time.LocalDateTime.now(dateTimeZone44);
        org.joda.time.LocalDateTime localDateTime48 = org.joda.time.LocalDateTime.now(dateTimeZone44);
        org.joda.time.LocalDateTime localDateTime50 = localDateTime48.plusSeconds((int) (short) 10);
        int int51 = localDateTime48.size();
        org.joda.time.DateTime dateTime52 = localDateTime48.toDateTime();
        int int53 = property10.getDifference((org.joda.time.ReadableInstant) dateTime52);
        java.util.TimeZone timeZone54 = null;
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.forTimeZone(timeZone54);
        int int57 = dateTimeZone55.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime58 = org.joda.time.LocalDateTime.now(dateTimeZone55);
        int int59 = localDateTime58.getDayOfYear();
        org.joda.time.LocalDateTime localDateTime61 = localDateTime58.withYearOfEra(2022);
        java.util.TimeZone timeZone62 = null;
        org.joda.time.DateTimeZone dateTimeZone63 = org.joda.time.DateTimeZone.forTimeZone(timeZone62);
        int int65 = dateTimeZone63.getOffset(100L);
        java.util.TimeZone timeZone66 = dateTimeZone63.toTimeZone();
        int int68 = dateTimeZone63.getStandardOffset((long) ' ');
        org.joda.time.DateTime dateTime69 = localDateTime61.toDateTime(dateTimeZone63);
        java.util.TimeZone timeZone70 = null;
        org.joda.time.DateTimeZone dateTimeZone71 = org.joda.time.DateTimeZone.forTimeZone(timeZone70);
        int int73 = dateTimeZone71.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime74 = org.joda.time.LocalDateTime.now(dateTimeZone71);
        int int75 = localDateTime74.getWeekyear();
        org.joda.time.LocalDateTime.Property property76 = localDateTime74.minuteOfHour();
        org.joda.time.LocalDateTime.Property property77 = localDateTime74.dayOfYear();
        java.util.TimeZone timeZone78 = null;
        org.joda.time.DateTimeZone dateTimeZone79 = org.joda.time.DateTimeZone.forTimeZone(timeZone78);
        int int81 = dateTimeZone79.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime82 = org.joda.time.LocalDateTime.now(dateTimeZone79);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray83 = localDateTime82.getFieldTypes();
        int int84 = property77.compareTo((org.joda.time.ReadablePartial) localDateTime82);
        int int85 = localDateTime82.getYearOfCentury();
        org.joda.time.DateTime dateTime86 = localDateTime82.toDateTime();
        int int87 = dateTimeZone63.getOffset((org.joda.time.ReadableInstant) dateTime86);
        boolean boolean88 = dateTime52.isEqual((org.joda.time.ReadableInstant) dateTime86);
        org.joda.time.DateTimeFieldType dateTimeFieldType89 = org.joda.time.DateTimeFieldType.minuteOfDay();
        boolean boolean90 = dateTime52.isSupported(dateTimeFieldType89);
        long long91 = dateTime52.getMillis();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 36000000 + "'", int3 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 36000000 + "'", int15 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 36000000 + "'", int26 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[0, 0]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "2" + "'", str33, "2");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Japanisch" + "'", str36, "Japanisch");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "\uc77c\ubcf8\uc5b4" + "'", str39, "\uc77c\ubcf8\uc5b4");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "1" + "'", str40, "1");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "22" + "'", str41, "22");
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 36000000 + "'", int46 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 4 + "'", int51 == 4);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone55);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 36000000 + "'", int57 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 53 + "'", int59 == 53);
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertNotNull(dateTimeZone63);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 36000000 + "'", int65 == 36000000);
        org.junit.Assert.assertNotNull(timeZone66);
        org.junit.Assert.assertEquals(timeZone66.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 36000000 + "'", int68 == 36000000);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(dateTimeZone71);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 36000000 + "'", int73 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 2022 + "'", int75 == 2022);
        org.junit.Assert.assertNotNull(property76);
        org.junit.Assert.assertNotNull(property77);
        org.junit.Assert.assertNotNull(dateTimeZone79);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 36000000 + "'", int81 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime82);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray83);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 22 + "'", int85 == 22);
        org.junit.Assert.assertNotNull(dateTime86);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 36000000 + "'", int87 == 36000000);
// flaky:         org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
// flaky:         org.junit.Assert.assertTrue("'" + long91 + "' != '" + 1645454920009L + "'", long91 == 1645454920009L);
    }

    @Test
    public void test02055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02055");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet1 = locale0.getExtensionKeys();
        java.util.Iterator<java.lang.Character> charItor2 = charSet1.iterator();
        java.util.ArrayList[] arrayListArray4 = new java.util.ArrayList[0];
        @SuppressWarnings("unchecked")
        java.util.ArrayList<java.util.Locale.LanguageRange>[] languageRangeListArray5 = (java.util.ArrayList<java.util.Locale.LanguageRange>[]) arrayListArray4;
        java.util.ArrayList<java.util.Locale.LanguageRange>[] languageRangeListArray6 = charSet1.toArray((java.util.ArrayList<java.util.Locale.LanguageRange>[]) arrayListArray4);
        java.util.TimeZone timeZone7 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forTimeZone(timeZone7);
        int int10 = dateTimeZone8.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now(dateTimeZone8);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray12 = localDateTime11.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.hourOfDay();
        int int14 = localDateTime11.get(dateTimeFieldType13);
        org.joda.time.LocalDateTime.Property property15 = localDateTime11.dayOfWeek();
        org.joda.time.LocalDateTime.Property property16 = localDateTime11.weekOfWeekyear();
        boolean boolean17 = charSet1.remove((java.lang.Object) localDateTime11);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean19 = charSet1.add((java.lang.Character) 'x');
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet1);
        org.junit.Assert.assertNotNull(charItor2);
        org.junit.Assert.assertNotNull(arrayListArray4);
        org.junit.Assert.assertNotNull(languageRangeListArray5);
        org.junit.Assert.assertNotNull(languageRangeListArray6);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 36000000 + "'", int10 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray12);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test02056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02056");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.chrono.ISOChronology iSOChronology1 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology1.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology1.centuryOfEra();
        org.joda.time.DurationField durationField4 = iSOChronology1.seconds();
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology1.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField6 = iSOChronology1.hourOfHalfday();
        java.util.TimeZone timeZone7 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forTimeZone(timeZone7);
        int int10 = dateTimeZone8.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now(dateTimeZone8);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray12 = localDateTime11.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.hourOfDay();
        int int14 = localDateTime11.get(dateTimeFieldType13);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime11.minusWeeks(1);
        long long18 = iSOChronology1.set((org.joda.time.ReadablePartial) localDateTime16, (long) 0);
        boolean boolean19 = dateTimeFieldType0.isSupported((org.joda.time.Chronology) iSOChronology1);
        org.joda.time.DateTimeField dateTimeField20 = iSOChronology1.weekyear();
        java.lang.String str21 = dateTimeField20.toString();
        java.util.Locale locale23 = java.util.Locale.GERMAN;
        java.util.Locale locale24 = java.util.Locale.GERMAN;
        java.lang.String str25 = locale23.getDisplayCountry(locale24);
        java.util.Locale locale26 = locale23.stripExtensions();
        java.util.Locale.setDefault(locale23);
        java.util.Locale locale28 = locale23.stripExtensions();
        java.lang.String str29 = dateTimeField20.getAsShortText((-62135596800000L), locale23);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(iSOChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 36000000 + "'", int10 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray12);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(localDateTime16);
// flaky:         org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1644850120104L + "'", long18 == 1644850120104L);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "DateTimeField[weekyear]" + "'", str21, "DateTimeField[weekyear]");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "de");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "de");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "de");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "de");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "1" + "'", str29, "1");
    }

    @Test
    public void test02057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02057");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.hourOfHalfday();
        java.lang.String str2 = iSOChronology0.toString();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.era();
        org.joda.time.DurationField durationField4 = iSOChronology0.centuries();
        org.joda.time.DurationField durationField5 = iSOChronology0.weeks();
        org.joda.time.DateTimeField dateTimeField6 = iSOChronology0.era();
        org.joda.time.DateTimeField dateTimeField7 = iSOChronology0.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField8 = iSOChronology0.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField9 = iSOChronology0.millisOfDay();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ISOChronology[+10:00]" + "'", str2, "ISOChronology[+10:00]");
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
    }

    @Test
    public void test02058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02058");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.yearOfEra();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.weekyearOfCentury();
        org.joda.time.chrono.ISOChronology iSOChronology5 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField6 = iSOChronology5.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField7 = iSOChronology5.centuryOfEra();
        java.util.TimeZone timeZone8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        int int11 = dateTimeZone9.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime12 = org.joda.time.LocalDateTime.now(dateTimeZone9);
        int int13 = localDateTime12.getWeekyear();
        org.joda.time.LocalDateTime.Property property14 = localDateTime12.millisOfDay();
        long long16 = iSOChronology5.set((org.joda.time.ReadablePartial) localDateTime12, (long) '4');
        org.joda.time.chrono.ISOChronology iSOChronology17 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology17.hourOfHalfday();
        org.joda.time.tz.NameProvider nameProvider19 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale20 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet21 = locale20.getExtensionKeys();
        java.lang.String str24 = nameProvider19.getShortName(locale20, "Koordinierte Universalzeit", "+00:00");
        java.util.Locale locale25 = java.util.Locale.GERMAN;
        java.lang.String str28 = nameProvider19.getShortName(locale25, "53167803", "jpn");
        int int29 = dateTimeField18.getMaximumTextLength(locale25);
        java.util.TimeZone timeZone30 = null;
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forTimeZone(timeZone30);
        int int33 = dateTimeZone31.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime34 = org.joda.time.LocalDateTime.now(dateTimeZone31);
        int int35 = localDateTime34.getWeekyear();
        org.joda.time.tz.NameProvider nameProvider37 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale38 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet39 = locale38.getExtensionKeys();
        java.lang.String str42 = nameProvider37.getShortName(locale38, "Koordinierte Universalzeit", "+00:00");
        java.util.Locale.Builder builder43 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder46 = builder43.setExtension('x', "jpn");
        java.util.Locale locale47 = java.util.Locale.GERMAN;
        java.util.Locale locale48 = java.util.Locale.GERMAN;
        java.lang.String str49 = locale47.getDisplayCountry(locale48);
        java.util.Locale locale50 = locale47.stripExtensions();
        java.lang.String str51 = locale47.getDisplayName();
        java.util.Locale.Builder builder52 = builder46.setLocale(locale47);
        java.util.Locale locale53 = builder52.build();
        java.lang.String str54 = locale53.getScript();
        java.lang.String str57 = nameProvider37.getName(locale53, "hourOfDay", "");
        java.lang.String str58 = dateTimeField18.getAsShortText((org.joda.time.ReadablePartial) localDateTime34, 22, locale53);
        java.util.TimeZone timeZone59 = null;
        org.joda.time.DateTimeZone dateTimeZone60 = org.joda.time.DateTimeZone.forTimeZone(timeZone59);
        int int62 = dateTimeZone60.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime63 = org.joda.time.LocalDateTime.now(dateTimeZone60);
        int int64 = localDateTime63.getWeekyear();
        java.util.TimeZone timeZone65 = null;
        org.joda.time.DateTimeZone dateTimeZone66 = org.joda.time.DateTimeZone.forTimeZone(timeZone65);
        int int68 = dateTimeZone66.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime69 = org.joda.time.LocalDateTime.now(dateTimeZone66);
        org.joda.time.LocalDateTime localDateTime70 = org.joda.time.LocalDateTime.now(dateTimeZone66);
        org.joda.time.LocalDateTime localDateTime72 = localDateTime70.minusMinutes((int) ' ');
        org.joda.time.ReadablePeriod readablePeriod73 = null;
        org.joda.time.LocalDateTime localDateTime74 = localDateTime70.plus(readablePeriod73);
        int[] intArray75 = localDateTime74.getValues();
        int int76 = dateTimeField18.getMaximumValue((org.joda.time.ReadablePartial) localDateTime63, intArray75);
        int int77 = dateTimeField4.getMaximumValue((org.joda.time.ReadablePartial) localDateTime12, intArray75);
        int int79 = dateTimeField4.getMaximumValue(79200000L);
        java.util.TimeZone timeZone80 = null;
        org.joda.time.DateTimeZone dateTimeZone81 = org.joda.time.DateTimeZone.forTimeZone(timeZone80);
        int int83 = dateTimeZone81.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime84 = org.joda.time.LocalDateTime.now(dateTimeZone81);
        int int85 = localDateTime84.getWeekyear();
        org.joda.time.DurationFieldType durationFieldType86 = org.joda.time.DurationFieldType.centuries();
        java.lang.String str87 = durationFieldType86.getName();
        boolean boolean88 = localDateTime84.isSupported(durationFieldType86);
        int int89 = localDateTime84.getHourOfDay();
        int int90 = dateTimeField4.getMaximumValue((org.joda.time.ReadablePartial) localDateTime84);
        // The following exception was thrown during execution in test generation
        try {
            int int92 = localDateTime84.getValue((int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 100");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(iSOChronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 36000000 + "'", int11 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2022 + "'", int13 == 2022);
        org.junit.Assert.assertNotNull(property14);
// flaky:         org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1645454920207L + "'", long16 == 1645454920207L);
        org.junit.Assert.assertNotNull(iSOChronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(nameProvider19);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet21);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "de");
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2 + "'", int29 == 2);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 36000000 + "'", int33 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2022 + "'", int35 == 2022);
        org.junit.Assert.assertNotNull(nameProvider37);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet39);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "de");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "de");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "de");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "Deutsch" + "'", str51, "Deutsch");
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "de");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "22" + "'", str58, "22");
        org.junit.Assert.assertNotNull(dateTimeZone60);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 36000000 + "'", int62 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 2022 + "'", int64 == 2022);
        org.junit.Assert.assertNotNull(dateTimeZone66);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 36000000 + "'", int68 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime69);
        org.junit.Assert.assertNotNull(localDateTime70);
        org.junit.Assert.assertNotNull(localDateTime72);
        org.junit.Assert.assertNotNull(localDateTime74);
        org.junit.Assert.assertNotNull(intArray75);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[2022, 2, 22, 2920207]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 11 + "'", int76 == 11);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 99 + "'", int77 == 99);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 99 + "'", int79 == 99);
        org.junit.Assert.assertNotNull(dateTimeZone81);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 36000000 + "'", int83 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime84);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 2022 + "'", int85 == 2022);
        org.junit.Assert.assertNotNull(durationFieldType86);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "centuries" + "'", str87, "centuries");
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 99 + "'", int90 == 99);
    }

    @Test
    public void test02059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02059");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.hourOfHalfday();
        java.lang.String str2 = iSOChronology0.toString();
        org.joda.time.DurationField durationField3 = iSOChronology0.eras();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.yearOfCentury();
        long long8 = iSOChronology0.add((long) 53195125, 1645454791872L, 31);
        org.joda.time.DateTimeField dateTimeField9 = iSOChronology0.minuteOfDay();
        java.lang.String str10 = iSOChronology0.toString();
        org.joda.time.Chronology chronology11 = iSOChronology0.withUTC();
        org.joda.time.DateTimeField dateTimeField12 = chronology11.dayOfYear();
        int int14 = dateTimeField12.getLeapAmount((-62162759538412L));
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ISOChronology[+10:00]" + "'", str2, "ISOChronology[+10:00]");
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 51009151743157L + "'", long8 == 51009151743157L);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "ISOChronology[+10:00]" + "'", str10, "ISOChronology[+10:00]");
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    }

    @Test
    public void test02060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02060");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        java.util.TimeZone timeZone1 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        int int4 = dateTimeZone2.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime5 = org.joda.time.LocalDateTime.now(dateTimeZone2);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray6 = localDateTime5.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.hourOfDay();
        int int8 = localDateTime5.get(dateTimeFieldType7);
        org.joda.time.LocalDateTime.Property property9 = localDateTime5.dayOfWeek();
        boolean boolean10 = localDateTime0.isEqual((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.LocalDateTime.Property property11 = localDateTime5.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime12 = property11.roundHalfCeilingCopy();
        java.util.TimeZone timeZone13 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forTimeZone(timeZone13);
        int int16 = dateTimeZone14.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime17 = org.joda.time.LocalDateTime.now(dateTimeZone14);
        org.joda.time.LocalDateTime localDateTime18 = org.joda.time.LocalDateTime.now(dateTimeZone14);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.minusMinutes((int) ' ');
        int int21 = property11.compareTo((org.joda.time.ReadablePartial) localDateTime20);
        int int22 = property11.getMaximumValueOverall();
        java.lang.String str23 = property11.getAsText();
        org.joda.time.LocalDateTime localDateTime24 = property11.roundFloorCopy();
        org.joda.time.Interval interval25 = property11.toInterval();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 36000000 + "'", int4 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 36000000 + "'", int16 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 31 + "'", int22 == 31);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "22" + "'", str23, "22");
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(interval25);
    }

    @Test
    public void test02061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02061");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.centuryOfEra();
        org.joda.time.DurationField durationField3 = iSOChronology0.eras();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology0.year();
        org.joda.time.DurationField durationField6 = iSOChronology0.eras();
        org.joda.time.DurationFieldType durationFieldType7 = durationField6.getType();
        java.lang.String str8 = durationFieldType7.getName();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "eras" + "'", str8, "eras");
    }

    @Test
    public void test02062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02062");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("2022-02-21T14:47:09.780Z");
        java.util.Set<java.lang.String> strSet2 = locale1.getUnicodeLocaleKeys();
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertNotNull(strSet2);
    }

    @Test
    public void test02063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02063");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("anglais", (double) 2837756L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: weight=2837756.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02064");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime5 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.plusSeconds((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime5.minusWeeks((int) (byte) 10);
        java.util.TimeZone timeZone10 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        int int13 = dateTimeZone11.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime14 = org.joda.time.LocalDateTime.now(dateTimeZone11);
        org.joda.time.LocalDateTime localDateTime15 = org.joda.time.LocalDateTime.now(dateTimeZone11);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.plusSeconds((int) (short) 10);
        int int18 = localDateTime15.size();
        boolean boolean19 = localDateTime9.isBefore((org.joda.time.ReadablePartial) localDateTime15);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime21 = localDateTime9.withMonthOfYear(2827402);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2827402 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 36000000 + "'", int3 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 36000000 + "'", int13 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 4 + "'", int18 == 4);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
    }

    @Test
    public void test02065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02065");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray5 = localDateTime4.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.hourOfDay();
        int int7 = localDateTime4.get(dateTimeFieldType6);
        org.joda.time.LocalDateTime.Property property8 = localDateTime4.dayOfWeek();
        boolean boolean9 = property8.isLeap();
        long long10 = property8.remainder();
        org.joda.time.LocalDateTime localDateTime11 = property8.getLocalDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime11.withField(dateTimeFieldType12, (int) (short) 10);
        org.joda.time.LocalDateTime.Property property15 = localDateTime14.hourOfDay();
        int int16 = localDateTime14.size();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 36000000 + "'", int3 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray5);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long10 + "' != '" + 2920584L + "'", long10 == 2920584L);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 4 + "'", int16 == 4);
    }

    @Test
    public void test02066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02066");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        java.util.TimeZone timeZone1 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        int int4 = dateTimeZone2.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime5 = org.joda.time.LocalDateTime.now(dateTimeZone2);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray6 = localDateTime5.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.hourOfDay();
        int int8 = localDateTime5.get(dateTimeFieldType7);
        org.joda.time.LocalDateTime.Property property9 = localDateTime5.dayOfWeek();
        boolean boolean10 = localDateTime0.isEqual((org.joda.time.ReadablePartial) localDateTime5);
        int int11 = localDateTime5.getYearOfCentury();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType13 = localDateTime5.getFieldType(46);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 46");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 36000000 + "'", int4 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 22 + "'", int11 == 22);
    }

    @Test
    public void test02067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02067");
        java.util.TimeZone timeZone1 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        int int4 = dateTimeZone2.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime5 = org.joda.time.LocalDateTime.now(dateTimeZone2);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.DateTime dateTime7 = localDateTime5.toDateTime(readableInstant6);
        org.joda.time.Chronology chronology8 = dateTime7.getChronology();
        org.joda.time.DurationField durationField9 = chronology8.hours();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((long) 52, chronology8);
        int int11 = localDateTime10.getSecondOfMinute();
        java.util.TimeZone timeZone12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone12);
        int int15 = dateTimeZone13.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime16 = org.joda.time.LocalDateTime.now(dateTimeZone13);
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.DateTime dateTime18 = localDateTime16.toDateTime(readableInstant17);
        java.util.TimeZone timeZone19 = null;
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forTimeZone(timeZone19);
        int int22 = dateTimeZone20.getOffset(100L);
        org.joda.time.DateTime dateTime23 = localDateTime16.toDateTime(dateTimeZone20);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime16.withYear(52);
        org.joda.time.Chronology chronology26 = localDateTime25.getChronology();
        org.joda.time.LocalDateTime localDateTime28 = localDateTime25.withYear((int) (short) 1);
        boolean boolean29 = localDateTime10.equals((java.lang.Object) localDateTime25);
        org.joda.time.LocalDateTime.Property property30 = localDateTime25.millisOfDay();
        org.joda.time.LocalDateTime localDateTime32 = localDateTime25.minusMonths(53271023);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 36000000 + "'", int4 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 36000000 + "'", int15 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 36000000 + "'", int22 == 36000000);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(localDateTime32);
    }

    @Test
    public void test02068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02068");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.DateTime dateTime6 = localDateTime4.toDateTime(readableInstant5);
        java.util.TimeZone timeZone7 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forTimeZone(timeZone7);
        int int10 = dateTimeZone8.getOffset(100L);
        org.joda.time.DateTime dateTime11 = localDateTime4.toDateTime(dateTimeZone8);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime4.plusMinutes((-1));
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.hourOfDay();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime13.plusSeconds((int) (byte) -1);
        java.util.TimeZone timeZone17 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forTimeZone(timeZone17);
        int int20 = dateTimeZone18.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime21 = org.joda.time.LocalDateTime.now(dateTimeZone18);
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.DateTime dateTime23 = localDateTime21.toDateTime(readableInstant22);
        org.joda.time.Chronology chronology24 = dateTime23.getChronology();
        org.joda.time.DurationField durationField25 = chronology24.hours();
        org.joda.time.DurationField durationField26 = chronology24.months();
        org.joda.time.DateTimeField dateTimeField27 = chronology24.dayOfYear();
        java.util.TimeZone timeZone28 = null;
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forTimeZone(timeZone28);
        int int31 = dateTimeZone29.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime32 = org.joda.time.LocalDateTime.now(dateTimeZone29);
        int[] intArray35 = new int[] { (short) 0, (short) 0 };
        int int36 = dateTimeField27.getMinimumValue((org.joda.time.ReadablePartial) localDateTime32, intArray35);
        boolean boolean37 = dateTimeField27.isLenient();
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime40 = localDateTime38.minusMillis(52);
        java.util.Locale.Builder builder42 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder45 = builder42.setExtension('x', "jpn");
        java.util.Locale locale46 = builder42.build();
        java.util.Locale locale47 = builder42.build();
        java.lang.String str48 = dateTimeField27.getAsShortText((org.joda.time.ReadablePartial) localDateTime38, (int) 'a', locale47);
        boolean boolean49 = localDateTime16.equals((java.lang.Object) localDateTime38);
        org.joda.time.LocalDateTime localDateTime50 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray51 = localDateTime50.getFieldTypes();
        java.util.TimeZone timeZone52 = null;
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.forTimeZone(timeZone52);
        int int55 = dateTimeZone53.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime56 = org.joda.time.LocalDateTime.now(dateTimeZone53);
        int int57 = localDateTime56.getWeekyear();
        org.joda.time.LocalDateTime.Property property58 = localDateTime56.millisOfDay();
        java.util.TimeZone timeZone59 = null;
        org.joda.time.DateTimeZone dateTimeZone60 = org.joda.time.DateTimeZone.forTimeZone(timeZone59);
        int int62 = dateTimeZone60.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime63 = org.joda.time.LocalDateTime.now(dateTimeZone60);
        org.joda.time.ReadableInstant readableInstant64 = null;
        org.joda.time.DateTime dateTime65 = localDateTime63.toDateTime(readableInstant64);
        java.util.TimeZone timeZone66 = null;
        org.joda.time.DateTimeZone dateTimeZone67 = org.joda.time.DateTimeZone.forTimeZone(timeZone66);
        int int69 = dateTimeZone67.getOffset(100L);
        org.joda.time.DateTime dateTime70 = localDateTime63.toDateTime(dateTimeZone67);
        int int71 = property58.compareTo((org.joda.time.ReadableInstant) dateTime70);
        java.util.TimeZone timeZone72 = null;
        org.joda.time.DateTimeZone dateTimeZone73 = org.joda.time.DateTimeZone.forTimeZone(timeZone72);
        int int75 = dateTimeZone73.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime76 = org.joda.time.LocalDateTime.now(dateTimeZone73);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray77 = localDateTime76.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType78 = org.joda.time.DateTimeFieldType.hourOfDay();
        int int79 = localDateTime76.get(dateTimeFieldType78);
        boolean boolean80 = dateTime70.isSupported(dateTimeFieldType78);
        int int81 = localDateTime50.indexOf(dateTimeFieldType78);
        boolean boolean82 = localDateTime38.isSupported(dateTimeFieldType78);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 36000000 + "'", int3 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 36000000 + "'", int10 == 36000000);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 36000000 + "'", int20 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 36000000 + "'", int31 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[0, 0]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "97" + "'", str48, "97");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray51);
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 36000000 + "'", int55 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 2022 + "'", int57 == 2022);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNotNull(dateTimeZone60);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 36000000 + "'", int62 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(dateTimeZone67);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 36000000 + "'", int69 == 36000000);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone73);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 36000000 + "'", int75 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime76);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray77);
        org.junit.Assert.assertNotNull(dateTimeFieldType78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + (-1) + "'", int81 == (-1));
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
    }

    @Test
    public void test02069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02069");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime(346, 935, 2807, 309, 2027, 0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 309 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02070");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.yearOfEra();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.weekyearOfCentury();
        java.lang.String str4 = iSOChronology0.toString();
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology0.clockhourOfHalfday();
        java.lang.String str6 = iSOChronology0.toString();
        org.joda.time.DateTimeField dateTimeField7 = iSOChronology0.dayOfMonth();
        org.joda.time.DurationField durationField8 = iSOChronology0.minutes();
        org.joda.time.DurationFieldType durationFieldType9 = durationField8.getType();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "ISOChronology[+10:00]" + "'", str4, "ISOChronology[+10:00]");
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "ISOChronology[+10:00]" + "'", str6, "ISOChronology[+10:00]");
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(durationFieldType9);
    }

    @Test
    public void test02071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02071");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray5 = localDateTime4.getFieldTypes();
        java.lang.String str6 = localDateTime4.toString();
        java.util.TimeZone timeZone7 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forTimeZone(timeZone7);
        int int10 = dateTimeZone8.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now(dateTimeZone8);
        org.joda.time.LocalDateTime localDateTime12 = org.joda.time.LocalDateTime.now(dateTimeZone8);
        int int13 = localDateTime12.getWeekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = localDateTime12.getFieldType(0);
        org.joda.time.chrono.ISOChronology iSOChronology16 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology16.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology16.centuryOfEra();
        org.joda.time.DurationField durationField19 = iSOChronology16.eras();
        org.joda.time.DateTimeField dateTimeField20 = iSOChronology16.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField21 = iSOChronology16.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField22 = iSOChronology16.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField23 = dateTimeFieldType15.getField((org.joda.time.Chronology) iSOChronology16);
        int int24 = localDateTime4.get(dateTimeFieldType15);
        int int25 = localDateTime4.getDayOfMonth();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 36000000 + "'", int3 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray5);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "2022-02-22T00:48:40.753" + "'", str6, "2022-02-22T00:48:40.753");
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 36000000 + "'", int10 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2022 + "'", int13 == 2022);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(iSOChronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2022 + "'", int24 == 2022);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 22 + "'", int25 == 22);
    }

    @Test
    public void test02072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02072");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.centuryOfEra();
        java.util.TimeZone timeZone3 = null;
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forTimeZone(timeZone3);
        int int6 = dateTimeZone4.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime7 = org.joda.time.LocalDateTime.now(dateTimeZone4);
        int int8 = localDateTime7.getWeekyear();
        org.joda.time.LocalDateTime.Property property9 = localDateTime7.millisOfDay();
        long long11 = iSOChronology0.set((org.joda.time.ReadablePartial) localDateTime7, (long) '4');
        org.joda.time.DurationField durationField12 = iSOChronology0.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology13.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.yearOfEra();
        java.util.TimeZone timeZone16 = null;
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forTimeZone(timeZone16);
        int int19 = dateTimeZone17.getOffset(100L);
        java.util.TimeZone timeZone20 = dateTimeZone17.toTimeZone();
        int int22 = dateTimeZone17.getStandardOffset((long) ' ');
        org.joda.time.Chronology chronology23 = iSOChronology13.withZone(dateTimeZone17);
        org.joda.time.Chronology chronology24 = iSOChronology0.withZone(dateTimeZone17);
        int int26 = dateTimeZone17.getStandardOffset((long) 2841472);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 36000000 + "'", int6 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2022 + "'", int8 == 2022);
        org.junit.Assert.assertNotNull(property9);
// flaky:         org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1645454920826L + "'", long11 == 1645454920826L);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 36000000 + "'", int19 == 36000000);
        org.junit.Assert.assertNotNull(timeZone20);
        org.junit.Assert.assertEquals(timeZone20.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 36000000 + "'", int22 == 36000000);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 36000000 + "'", int26 == 36000000);
    }

    @Test
    public void test02073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02073");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray5 = localDateTime4.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.hourOfDay();
        int int7 = localDateTime4.get(dateTimeFieldType6);
        org.joda.time.LocalDateTime.Property property8 = localDateTime4.dayOfWeek();
        java.lang.String str9 = property8.getName();
        java.util.TimeZone timeZone10 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        int int13 = dateTimeZone11.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime14 = org.joda.time.LocalDateTime.now(dateTimeZone11);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = localDateTime14.toDateTime(readableInstant15);
        org.joda.time.Chronology chronology17 = dateTime16.getChronology();
        org.joda.time.DurationField durationField18 = chronology17.hours();
        org.joda.time.DurationField durationField19 = chronology17.months();
        org.joda.time.DateTimeField dateTimeField20 = chronology17.dayOfYear();
        java.util.TimeZone timeZone21 = null;
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forTimeZone(timeZone21);
        int int24 = dateTimeZone22.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime25 = org.joda.time.LocalDateTime.now(dateTimeZone22);
        int[] intArray28 = new int[] { (short) 0, (short) 0 };
        int int29 = dateTimeField20.getMinimumValue((org.joda.time.ReadablePartial) localDateTime25, intArray28);
        int int31 = dateTimeField20.getMinimumValue((long) 100);
        java.util.TimeZone timeZone32 = null;
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forTimeZone(timeZone32);
        int int35 = dateTimeZone33.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime36 = org.joda.time.LocalDateTime.now(dateTimeZone33);
        int int37 = localDateTime36.getWeekyear();
        org.joda.time.LocalDateTime.Property property38 = localDateTime36.minuteOfHour();
        int int39 = dateTimeField20.getMaximumValue((org.joda.time.ReadablePartial) localDateTime36);
        long long42 = dateTimeField20.getDifferenceAsLong(7870L, 0L);
        org.joda.time.tz.NameProvider nameProvider43 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale44 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet45 = locale44.getExtensionKeys();
        java.lang.String str48 = nameProvider43.getShortName(locale44, "Koordinierte Universalzeit", "+00:00");
        java.util.Locale locale49 = java.util.Locale.GERMAN;
        java.lang.String str52 = nameProvider43.getShortName(locale49, "53167803", "jpn");
        int int53 = dateTimeField20.getMaximumShortTextLength(locale49);
        int int54 = property8.getMaximumTextLength(locale49);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 36000000 + "'", int3 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray5);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "dayOfWeek" + "'", str9, "dayOfWeek");
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 36000000 + "'", int13 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 36000000 + "'", int24 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[0, 0]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 36000000 + "'", int35 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2022 + "'", int37 == 2022);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 365 + "'", int39 == 365);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertNotNull(nameProvider43);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet45);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "de");
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 3 + "'", int53 == 3);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 10 + "'", int54 == 10);
    }

    @Test
    public void test02074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02074");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime5 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusMinutes((int) ' ');
        org.joda.time.LocalDateTime localDateTime9 = localDateTime5.withYear(53166088);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.plusMinutes(0);
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.LocalDateTime localDateTime14 = localDateTime9.withDurationAdded(readableDuration12, (int) (short) 1);
        int int15 = localDateTime14.getDayOfMonth();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 36000000 + "'", int3 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 22 + "'", int15 == 22);
    }

    @Test
    public void test02075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02075");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours(99);
        long long3 = dateTimeZone1.convertUTCToLocal(1677930450220800003L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1677930450577200003L + "'", long3 == 1677930450577200003L);
    }

    @Test
    public void test02076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02076");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.centuryOfEra();
        org.joda.time.DurationField durationField3 = iSOChronology0.eras();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.year();
        java.util.Locale locale6 = java.util.Locale.GERMAN;
        java.lang.String str7 = locale6.getDisplayScript();
        java.lang.String str9 = locale6.getExtension('x');
        java.util.Set<java.lang.Character> charSet10 = locale6.getExtensionKeys();
        java.lang.String str11 = dateTimeField4.getAsText(1645454774909L, locale6);
        boolean boolean12 = locale6.hasExtensions();
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology13.hourOfHalfday();
        org.joda.time.tz.NameProvider nameProvider15 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale16 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet17 = locale16.getExtensionKeys();
        java.lang.String str20 = nameProvider15.getShortName(locale16, "Koordinierte Universalzeit", "+00:00");
        java.util.Locale locale21 = java.util.Locale.GERMAN;
        java.lang.String str24 = nameProvider15.getShortName(locale21, "53167803", "jpn");
        int int25 = dateTimeField14.getMaximumTextLength(locale21);
        java.util.TimeZone timeZone26 = null;
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forTimeZone(timeZone26);
        int int29 = dateTimeZone27.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime30 = org.joda.time.LocalDateTime.now(dateTimeZone27);
        int int31 = localDateTime30.getWeekyear();
        org.joda.time.tz.NameProvider nameProvider33 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale34 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet35 = locale34.getExtensionKeys();
        java.lang.String str38 = nameProvider33.getShortName(locale34, "Koordinierte Universalzeit", "+00:00");
        java.util.Locale.Builder builder39 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder42 = builder39.setExtension('x', "jpn");
        java.util.Locale locale43 = java.util.Locale.GERMAN;
        java.util.Locale locale44 = java.util.Locale.GERMAN;
        java.lang.String str45 = locale43.getDisplayCountry(locale44);
        java.util.Locale locale46 = locale43.stripExtensions();
        java.lang.String str47 = locale43.getDisplayName();
        java.util.Locale.Builder builder48 = builder42.setLocale(locale43);
        java.util.Locale locale49 = builder48.build();
        java.lang.String str50 = locale49.getScript();
        java.lang.String str53 = nameProvider33.getName(locale49, "hourOfDay", "");
        java.lang.String str54 = dateTimeField14.getAsShortText((org.joda.time.ReadablePartial) localDateTime30, 22, locale49);
        java.util.Locale locale55 = java.util.Locale.JAPANESE;
        java.lang.String str56 = locale55.getDisplayLanguage();
        java.lang.String str57 = locale55.getISO3Language();
        java.util.Locale locale58 = java.util.Locale.CHINA;
        java.lang.String str59 = locale55.getDisplayLanguage(locale58);
        java.lang.String str60 = locale49.getDisplayVariant(locale58);
        java.lang.String str61 = locale6.getDisplayCountry(locale58);
        java.util.Set<java.lang.String> strSet62 = locale6.getUnicodeLocaleAttributes();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "de");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(charSet10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "2022" + "'", str11, "2022");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(nameProvider15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet17);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "de");
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2 + "'", int25 == 2);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 356400000 + "'", int29 == 356400000);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2022 + "'", int31 == 2022);
        org.junit.Assert.assertNotNull(nameProvider33);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet35);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "de");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "de");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "de");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Deutsch" + "'", str47, "Deutsch");
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "de");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "22" + "'", str54, "22");
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "Japanisch" + "'", str56, "Japanisch");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "jpn" + "'", str57, "jpn");
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "\u65e5\u6587" + "'", str59, "\u65e5\u6587");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertNotNull(strSet62);
    }

    @Test
    public void test02077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02077");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        int int5 = localDateTime4.getWeekyear();
        org.joda.time.LocalDateTime.Property property6 = localDateTime4.minuteOfHour();
        org.joda.time.LocalDateTime.Property property7 = localDateTime4.dayOfYear();
        java.util.TimeZone timeZone8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        int int11 = dateTimeZone9.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime12 = org.joda.time.LocalDateTime.now(dateTimeZone9);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray13 = localDateTime12.getFieldTypes();
        int int14 = property7.compareTo((org.joda.time.ReadablePartial) localDateTime12);
        int int15 = localDateTime12.getYearOfCentury();
        org.joda.time.LocalDateTime.Property property16 = localDateTime12.millisOfDay();
        org.joda.time.DurationField durationField17 = property16.getDurationField();
        long long19 = durationField17.getMillis(51);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 356400000 + "'", int3 == 356400000);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2022 + "'", int5 == 2022);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 356400000 + "'", int11 == 356400000);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 22 + "'", int15 == 22);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 51L + "'", long19 == 51L);
    }

    @Test
    public void test02078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02078");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.hourOfHalfday();
        java.lang.String str2 = iSOChronology0.toString();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.era();
        org.joda.time.DurationField durationField4 = iSOChronology0.centuries();
        org.joda.time.DurationField durationField5 = iSOChronology0.weeks();
        org.joda.time.DateTimeField dateTimeField6 = iSOChronology0.era();
        org.joda.time.DateTimeField dateTimeField7 = iSOChronology0.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField8 = iSOChronology0.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField9 = iSOChronology0.yearOfCentury();
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        long long13 = iSOChronology0.add(readablePeriod10, (-31556908800000L), 2);
        // The following exception was thrown during execution in test generation
        try {
            long long19 = iSOChronology0.getDateTimeMillis(1645454802193L, 1970, 2841646, 49681464, 2846360);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1970 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ISOChronology[+99:00]" + "'", str2, "ISOChronology[+99:00]");
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-31556908800000L) + "'", long13 == (-31556908800000L));
    }

    @Test
    public void test02079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02079");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.hourOfHalfday();
        java.lang.String str2 = iSOChronology0.toString();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.era();
        org.joda.time.DurationField durationField4 = iSOChronology0.centuries();
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        long long8 = iSOChronology0.add(readablePeriod5, (long) 2022, (int) (byte) 100);
        org.joda.time.DateTimeField dateTimeField9 = iSOChronology0.hourOfDay();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology0.weekyear();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology0.monthOfYear();
        // The following exception was thrown during execution in test generation
        try {
            long long14 = dateTimeField11.set(1645454806777L, 49694897);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 49694897 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ISOChronology[+99:00]" + "'", str2, "ISOChronology[+99:00]");
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 2022L + "'", long8 == 2022L);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
    }

    @Test
    public void test02080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02080");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        int int5 = localDateTime4.getWeekyear();
        org.joda.time.LocalDateTime.Property property6 = localDateTime4.millisOfDay();
        java.util.Locale locale7 = java.util.Locale.KOREAN;
        int int8 = property6.getMaximumTextLength(locale7);
        java.util.Locale locale9 = java.util.Locale.JAPANESE;
        java.lang.String str10 = locale9.getDisplayLanguage();
        java.util.Locale locale11 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet12 = locale11.getExtensionKeys();
        java.lang.String str13 = locale9.getDisplayLanguage(locale11);
        java.lang.String str14 = property6.getAsShortText(locale11);
        org.joda.time.ReadableInstant readableInstant15 = null;
        int int16 = property6.getDifference(readableInstant15);
        org.joda.time.LocalDateTime localDateTime18 = property6.addToCopy(1645454806391L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 356400000 + "'", int3 == 356400000);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2022 + "'", int5 == 2022);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ko");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 8 + "'", int8 == 8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Japanisch" + "'", str10, "Japanisch");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "\uc77c\ubcf8\uc5b4" + "'", str13, "\uc77c\ubcf8\uc5b4");
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "64121388" + "'", str14, "64121388");
// flaky:         org.junit.Assert.assertTrue("'" + int16 + "' != '" + 356399999 + "'", int16 == 356399999);
        org.junit.Assert.assertNotNull(localDateTime18);
    }

    @Test
    public void test02081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02081");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("2021");
        int int3 = timeZone1.getOffset(20995200000L);
        java.lang.Object obj4 = timeZone1.clone();
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Greenwich Zeit");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(obj4);
        org.junit.Assert.assertEquals(obj4.toString(), "sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj4), "sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj4), "sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null]");
    }

    @Test
    public void test02082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02082");
        java.util.TimeZone timeZone1 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        int int4 = dateTimeZone2.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime5 = org.joda.time.LocalDateTime.now(dateTimeZone2);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.DateTime dateTime7 = localDateTime5.toDateTime(readableInstant6);
        org.joda.time.Chronology chronology8 = dateTime7.getChronology();
        org.joda.time.DurationField durationField9 = chronology8.hours();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((long) 52, chronology8);
        org.joda.time.DateTimeField dateTimeField11 = chronology8.secondOfDay();
        java.lang.String str12 = dateTimeField11.toString();
        long long14 = dateTimeField11.roundHalfEven((long) (byte) 0);
        long long16 = dateTimeField11.roundHalfCeiling(1644849993533L);
        java.util.TimeZone timeZone17 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forTimeZone(timeZone17);
        int int20 = dateTimeZone18.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime21 = org.joda.time.LocalDateTime.now(dateTimeZone18);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray22 = localDateTime21.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.hourOfDay();
        int int24 = localDateTime21.get(dateTimeFieldType23);
        org.joda.time.LocalDateTime.Property property25 = localDateTime21.dayOfWeek();
        org.joda.time.LocalDateTime.Property property26 = localDateTime21.weekOfWeekyear();
        java.util.TimeZone timeZone27 = null;
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forTimeZone(timeZone27);
        int int30 = dateTimeZone28.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime31 = org.joda.time.LocalDateTime.now(dateTimeZone28);
        int int32 = localDateTime31.getWeekyear();
        org.joda.time.LocalDateTime.Property property33 = localDateTime31.minuteOfHour();
        int int34 = localDateTime31.getHourOfDay();
        org.joda.time.LocalDateTime.Property property35 = localDateTime31.dayOfWeek();
        java.util.TimeZone timeZone36 = null;
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forTimeZone(timeZone36);
        int int39 = dateTimeZone37.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime40 = org.joda.time.LocalDateTime.now(dateTimeZone37);
        org.joda.time.ReadableInstant readableInstant41 = null;
        org.joda.time.DateTime dateTime42 = localDateTime40.toDateTime(readableInstant41);
        java.util.TimeZone timeZone43 = null;
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forTimeZone(timeZone43);
        int int46 = dateTimeZone44.getOffset(100L);
        org.joda.time.DateTime dateTime47 = localDateTime40.toDateTime(dateTimeZone44);
        org.joda.time.LocalDateTime.Property property48 = localDateTime40.monthOfYear();
        java.util.TimeZone timeZone49 = null;
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.forTimeZone(timeZone49);
        int int52 = dateTimeZone50.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime53 = org.joda.time.LocalDateTime.now(dateTimeZone50);
        int int54 = localDateTime53.getWeekyear();
        org.joda.time.LocalDateTime.Property property55 = localDateTime53.millisOfDay();
        java.util.TimeZone timeZone56 = null;
        org.joda.time.DateTimeZone dateTimeZone57 = org.joda.time.DateTimeZone.forTimeZone(timeZone56);
        int int59 = dateTimeZone57.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime60 = org.joda.time.LocalDateTime.now(dateTimeZone57);
        org.joda.time.ReadableInstant readableInstant61 = null;
        org.joda.time.DateTime dateTime62 = localDateTime60.toDateTime(readableInstant61);
        java.util.TimeZone timeZone63 = null;
        org.joda.time.DateTimeZone dateTimeZone64 = org.joda.time.DateTimeZone.forTimeZone(timeZone63);
        int int66 = dateTimeZone64.getOffset(100L);
        org.joda.time.DateTime dateTime67 = localDateTime60.toDateTime(dateTimeZone64);
        int int68 = property55.compareTo((org.joda.time.ReadableInstant) dateTime67);
        org.joda.time.LocalDateTime localDateTime69 = property55.roundHalfEvenCopy();
        boolean boolean70 = localDateTime40.isAfter((org.joda.time.ReadablePartial) localDateTime69);
        org.joda.time.ReadableDuration readableDuration71 = null;
        org.joda.time.LocalDateTime localDateTime72 = localDateTime69.minus(readableDuration71);
        org.joda.time.LocalDateTime localDateTime73 = localDateTime31.withFields((org.joda.time.ReadablePartial) localDateTime69);
        int int74 = localDateTime21.compareTo((org.joda.time.ReadablePartial) localDateTime73);
        java.util.TimeZone timeZone75 = null;
        org.joda.time.DateTimeZone dateTimeZone76 = org.joda.time.DateTimeZone.forTimeZone(timeZone75);
        int int78 = dateTimeZone76.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime79 = org.joda.time.LocalDateTime.now(dateTimeZone76);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray80 = localDateTime79.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime82 = localDateTime79.plusWeeks(2022);
        org.joda.time.ReadablePeriod readablePeriod83 = null;
        org.joda.time.LocalDateTime localDateTime85 = localDateTime79.withPeriodAdded(readablePeriod83, (-1));
        int[] intArray86 = localDateTime85.getValues();
        int int87 = dateTimeField11.getMaximumValue((org.joda.time.ReadablePartial) localDateTime73, intArray86);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 356400000 + "'", int4 == 356400000);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "DateTimeField[secondOfDay]" + "'", str12, "DateTimeField[secondOfDay]");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1644849994000L + "'", long16 == 1644849994000L);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 356400000 + "'", int20 == 356400000);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray22);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 17 + "'", int24 == 17);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 356400000 + "'", int30 == 356400000);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2022 + "'", int32 == 2022);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 17 + "'", int34 == 17);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 356400000 + "'", int39 == 356400000);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 356400000 + "'", int46 == 356400000);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 356400000 + "'", int52 == 356400000);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 2022 + "'", int54 == 2022);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(dateTimeZone57);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 356400000 + "'", int59 == 356400000);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTimeZone64);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 356400000 + "'", int66 == 356400000);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(localDateTime69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(localDateTime72);
        org.junit.Assert.assertNotNull(localDateTime73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone76);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 356400000 + "'", int78 == 356400000);
        org.junit.Assert.assertNotNull(localDateTime79);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray80);
        org.junit.Assert.assertNotNull(localDateTime82);
        org.junit.Assert.assertNotNull(localDateTime85);
        org.junit.Assert.assertNotNull(intArray86);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[2022, 2, 25, 64121431]");
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 86399 + "'", int87 == 86399);
    }

    @Test
    public void test02083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02083");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.hourOfHalfday();
        java.lang.String str2 = iSOChronology0.toString();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.year();
        org.joda.time.DurationField durationField4 = iSOChronology0.eras();
        // The following exception was thrown during execution in test generation
        try {
            int int7 = durationField4.getDifference((long) 2810, 243422150400000L);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: eras field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ISOChronology[+99:00]" + "'", str2, "ISOChronology[+99:00]");
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
    }

    @Test
    public void test02084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02084");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        int int5 = localDateTime4.getWeekyear();
        org.joda.time.LocalDateTime.Property property6 = localDateTime4.millisOfDay();
        java.util.Locale locale7 = java.util.Locale.GERMAN;
        java.util.Locale locale8 = java.util.Locale.GERMAN;
        java.lang.String str9 = locale7.getDisplayCountry(locale8);
        java.util.Locale locale10 = locale7.stripExtensions();
        int int11 = property6.getMaximumShortTextLength(locale7);
        org.joda.time.Interval interval12 = property6.toInterval();
        org.joda.time.LocalDateTime localDateTime14 = property6.setCopy(1);
        org.joda.time.LocalDateTime.Property property15 = localDateTime14.secondOfMinute();
        int int16 = property15.getMinimumValue();
        org.joda.time.LocalDateTime localDateTime17 = property15.roundCeilingCopy();
        org.joda.time.DateTime dateTime18 = localDateTime17.toDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.dayOfYear();
        java.lang.String str20 = dateTimeFieldType19.getName();
        int int21 = localDateTime17.indexOf(dateTimeFieldType19);
        int int22 = localDateTime17.getMinuteOfHour();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime24 = localDateTime17.withHourOfDay(2804241);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2804241 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 356400000 + "'", int3 == 356400000);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2022 + "'", int5 == 2022);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "de");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "de");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "de");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 8 + "'", int11 == 8);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "dayOfYear" + "'", str20, "dayOfYear");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
    }

    @Test
    public void test02085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02085");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffset(100L);
        java.util.TimeZone timeZone4 = dateTimeZone1.toTimeZone();
        java.lang.String str5 = dateTimeZone1.getID();
        java.util.TimeZone timeZone6 = dateTimeZone1.toTimeZone();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime(dateTimeZone1);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.plus(readablePeriod8);
        org.joda.time.chrono.ISOChronology iSOChronology10 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology10.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology10.centuryOfEra();
        org.joda.time.DurationField durationField13 = iSOChronology10.centuries();
        org.joda.time.DurationField durationField14 = iSOChronology10.hours();
        java.util.TimeZone timeZone15 = null;
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forTimeZone(timeZone15);
        int int18 = dateTimeZone16.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime19 = org.joda.time.LocalDateTime.now(dateTimeZone16);
        int int20 = localDateTime19.getDayOfYear();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime19.withYearOfEra(2022);
        long long24 = iSOChronology10.set((org.joda.time.ReadablePartial) localDateTime22, (long) 0);
        org.joda.time.DateTime dateTime25 = localDateTime22.toDateTime();
        boolean boolean26 = localDateTime7.isBefore((org.joda.time.ReadablePartial) localDateTime22);
        org.joda.time.LocalDateTime.Property property27 = localDateTime22.dayOfMonth();
        org.joda.time.DurationField durationField28 = property27.getDurationField();
        org.joda.time.DateTimeField dateTimeField29 = property27.getField();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 356400000 + "'", int3 == 356400000);
        org.junit.Assert.assertNotNull(timeZone4);
        org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "Greenwich Zeit");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+99:00" + "'", str5, "+99:00");
        org.junit.Assert.assertNotNull(timeZone6);
        org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "Greenwich Zeit");
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(iSOChronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 356400000 + "'", int18 == 356400000);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 56 + "'", int20 == 56);
        org.junit.Assert.assertNotNull(localDateTime22);
// flaky:         org.junit.Assert.assertTrue("'" + long24 + "' != '" + 1645454921502L + "'", long24 == 1645454921502L);
        org.junit.Assert.assertNotNull(dateTime25);
// flaky:         org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
    }

    @Test
    public void test02086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02086");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.DateTime dateTime6 = localDateTime4.toDateTime(readableInstant5);
        org.joda.time.Chronology chronology7 = dateTime6.getChronology();
        org.joda.time.DurationField durationField8 = chronology7.hours();
        org.joda.time.DateTimeField dateTimeField9 = chronology7.hourOfDay();
        org.joda.time.LocalDateTime localDateTime10 = org.joda.time.LocalDateTime.now();
        java.util.TimeZone timeZone11 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        int int14 = dateTimeZone12.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime15 = org.joda.time.LocalDateTime.now(dateTimeZone12);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray16 = localDateTime15.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.hourOfDay();
        int int18 = localDateTime15.get(dateTimeFieldType17);
        org.joda.time.LocalDateTime.Property property19 = localDateTime15.dayOfWeek();
        boolean boolean20 = localDateTime10.isEqual((org.joda.time.ReadablePartial) localDateTime15);
        org.joda.time.LocalDateTime.Property property21 = localDateTime15.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime22 = property21.roundHalfCeilingCopy();
        java.util.TimeZone timeZone23 = null;
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forTimeZone(timeZone23);
        int int26 = dateTimeZone24.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime27 = org.joda.time.LocalDateTime.now(dateTimeZone24);
        org.joda.time.LocalDateTime localDateTime28 = org.joda.time.LocalDateTime.now(dateTimeZone24);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.minusMinutes((int) ' ');
        int int31 = property21.compareTo((org.joda.time.ReadablePartial) localDateTime30);
        java.util.TimeZone timeZone32 = null;
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forTimeZone(timeZone32);
        int int35 = dateTimeZone33.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime36 = org.joda.time.LocalDateTime.now(dateTimeZone33);
        org.joda.time.LocalDateTime localDateTime37 = org.joda.time.LocalDateTime.now(dateTimeZone33);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime37.plusSeconds((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime41 = localDateTime37.minusWeeks((int) (byte) 10);
        java.util.TimeZone timeZone42 = null;
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forTimeZone(timeZone42);
        int int45 = dateTimeZone43.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime46 = org.joda.time.LocalDateTime.now(dateTimeZone43);
        org.joda.time.LocalDateTime localDateTime47 = org.joda.time.LocalDateTime.now(dateTimeZone43);
        org.joda.time.LocalDateTime localDateTime49 = localDateTime47.plusSeconds((int) (short) 10);
        int int50 = localDateTime47.size();
        boolean boolean51 = localDateTime41.isBefore((org.joda.time.ReadablePartial) localDateTime47);
        org.joda.time.LocalDateTime.Property property52 = localDateTime47.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime53 = localDateTime30.withFields((org.joda.time.ReadablePartial) localDateTime47);
        java.util.Locale locale55 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str56 = dateTimeField9.getAsShortText((org.joda.time.ReadablePartial) localDateTime53, 631, locale55);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 356400000 + "'", int3 == 356400000);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 356400000 + "'", int14 == 356400000);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray16);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 17 + "'", int18 == 17);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 356400000 + "'", int26 == 356400000);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 356400000 + "'", int35 == 356400000);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 356400000 + "'", int45 == 356400000);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 4 + "'", int50 == 4);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "631" + "'", str56, "631");
    }

    @Test
    public void test02087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02087");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.centuryOfEra();
        org.joda.time.DurationField durationField3 = iSOChronology0.centuries();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.millisOfDay();
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        int int8 = dateTimeZone6.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime9 = org.joda.time.LocalDateTime.now(dateTimeZone6);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.DateTime dateTime11 = localDateTime9.toDateTime(readableInstant10);
        java.util.TimeZone timeZone12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone12);
        int int15 = dateTimeZone13.getOffset(100L);
        org.joda.time.DateTime dateTime16 = localDateTime9.toDateTime(dateTimeZone13);
        org.joda.time.LocalDateTime.Property property17 = localDateTime9.monthOfYear();
        java.util.TimeZone timeZone18 = null;
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forTimeZone(timeZone18);
        int int21 = dateTimeZone19.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime22 = org.joda.time.LocalDateTime.now(dateTimeZone19);
        int int23 = localDateTime22.getWeekyear();
        org.joda.time.LocalDateTime.Property property24 = localDateTime22.millisOfDay();
        java.util.TimeZone timeZone25 = null;
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forTimeZone(timeZone25);
        int int28 = dateTimeZone26.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime29 = org.joda.time.LocalDateTime.now(dateTimeZone26);
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.DateTime dateTime31 = localDateTime29.toDateTime(readableInstant30);
        java.util.TimeZone timeZone32 = null;
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forTimeZone(timeZone32);
        int int35 = dateTimeZone33.getOffset(100L);
        org.joda.time.DateTime dateTime36 = localDateTime29.toDateTime(dateTimeZone33);
        int int37 = property24.compareTo((org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.LocalDateTime localDateTime38 = property24.roundHalfEvenCopy();
        boolean boolean39 = localDateTime9.isAfter((org.joda.time.ReadablePartial) localDateTime38);
        java.util.Locale locale40 = java.util.Locale.UK;
        java.lang.String str41 = dateTimeField4.getAsText((org.joda.time.ReadablePartial) localDateTime38, locale40);
        org.joda.time.LocalDateTime localDateTime43 = localDateTime38.minusMonths((int) (short) 100);
        org.joda.time.LocalDateTime.Property property44 = localDateTime38.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime45 = property44.roundFloorCopy();
        org.joda.time.LocalDateTime localDateTime47 = localDateTime45.minusYears(53186052);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.LocalDateTime localDateTime50 = new org.joda.time.LocalDateTime((java.lang.Object) (-139813307279999990L), chronology49);
        org.joda.time.LocalDateTime localDateTime52 = localDateTime50.withYearOfEra((int) 'x');
        int int53 = localDateTime45.compareTo((org.joda.time.ReadablePartial) localDateTime50);
        org.joda.time.LocalDateTime.Property property54 = localDateTime50.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField55 = property54.getField();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 356400000 + "'", int8 == 356400000);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 356400000 + "'", int15 == 356400000);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 356400000 + "'", int21 == 356400000);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2022 + "'", int23 == 2022);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 356400000 + "'", int28 == 356400000);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 356400000 + "'", int35 == 356400000);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "en_GB");
// flaky:         org.junit.Assert.assertEquals("'" + str41 + "' != '" + "64121633" + "'", str41, "64121633");
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(dateTimeField55);
    }

    @Test
    public void test02088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02088");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("2022-02-21T14:46:09.691Z");
        // The following exception was thrown during execution in test generation
        try {
            int int8 = timeZone1.getOffset(5861, 97, 99, 26, 38089, 53262345);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Greenwich Zeit");
    }

    @Test
    public void test02089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02089");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.hourOfHalfday();
        long long7 = iSOChronology0.getDateTimeMillis((-1), 8, 3, 365);
        org.joda.time.DurationField durationField8 = iSOChronology0.seconds();
        long long12 = iSOChronology0.add(1645454774909L, (long) 53178951, 53166088);
        org.joda.time.DateTimeField dateTimeField13 = iSOChronology0.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology0.dayOfYear();
        org.joda.time.DurationField durationField15 = iSOChronology0.millis();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology0.era();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology0.clockhourOfHalfday();
        long long20 = dateTimeField17.getDifferenceAsLong((long) 49677, 2842120L);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-62180621999635L) + "'", long7 == (-62180621999635L));
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 2828962243388597L + "'", long12 == 2828962243388597L);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
    }

    @Test
    public void test02090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02090");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.DateTime dateTime6 = localDateTime4.toDateTime(readableInstant5);
        java.util.TimeZone timeZone7 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forTimeZone(timeZone7);
        int int10 = dateTimeZone8.getOffset(100L);
        org.joda.time.DateTime dateTime11 = localDateTime4.toDateTime(dateTimeZone8);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime4.plusMinutes((-1));
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.hourOfDay();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime13.plusSeconds((int) (byte) -1);
        org.joda.time.LocalDateTime.Property property17 = localDateTime16.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField18 = property17.getField();
        java.util.TimeZone timeZone20 = null;
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forTimeZone(timeZone20);
        int int23 = dateTimeZone21.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime24 = org.joda.time.LocalDateTime.now(dateTimeZone21);
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.DateTime dateTime26 = localDateTime24.toDateTime(readableInstant25);
        org.joda.time.Chronology chronology27 = dateTime26.getChronology();
        org.joda.time.DurationField durationField28 = chronology27.hours();
        org.joda.time.DurationField durationField29 = chronology27.months();
        org.joda.time.DateTimeField dateTimeField30 = chronology27.dayOfYear();
        java.util.TimeZone timeZone31 = null;
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forTimeZone(timeZone31);
        int int34 = dateTimeZone32.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime35 = org.joda.time.LocalDateTime.now(dateTimeZone32);
        int[] intArray38 = new int[] { (short) 0, (short) 0 };
        int int39 = dateTimeField30.getMinimumValue((org.joda.time.ReadablePartial) localDateTime35, intArray38);
        int int41 = dateTimeField30.getMinimumValue((long) 100);
        java.util.TimeZone timeZone42 = null;
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forTimeZone(timeZone42);
        int int45 = dateTimeZone43.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime46 = org.joda.time.LocalDateTime.now(dateTimeZone43);
        int int47 = localDateTime46.getWeekyear();
        org.joda.time.LocalDateTime.Property property48 = localDateTime46.minuteOfHour();
        int int49 = dateTimeField30.getMaximumValue((org.joda.time.ReadablePartial) localDateTime46);
        long long52 = dateTimeField30.getDifferenceAsLong(7870L, 0L);
        org.joda.time.tz.NameProvider nameProvider53 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale54 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet55 = locale54.getExtensionKeys();
        java.lang.String str58 = nameProvider53.getShortName(locale54, "Koordinierte Universalzeit", "+00:00");
        java.util.Locale locale59 = java.util.Locale.GERMAN;
        java.lang.String str62 = nameProvider53.getShortName(locale59, "53167803", "jpn");
        int int63 = dateTimeField30.getMaximumShortTextLength(locale59);
        java.util.Locale locale64 = java.util.Locale.PRC;
        java.lang.String str65 = locale59.getDisplayLanguage(locale64);
        java.lang.String str66 = locale59.getVariant();
        java.lang.String str67 = dateTimeField18.getAsShortText((long) 110, locale59);
        long long70 = dateTimeField18.getDifferenceAsLong((long) (-292275054), (long) 2841311);
        java.util.Locale locale74 = new java.util.Locale("dayOfYear", "20", "");
        int int75 = dateTimeField18.getMaximumShortTextLength(locale74);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 356400000 + "'", int3 == 356400000);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 356400000 + "'", int10 == 356400000);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 356400000 + "'", int23 == 356400000);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 356400000 + "'", int34 == 356400000);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[0, 0]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 356400000 + "'", int45 == 356400000);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2022 + "'", int47 == 2022);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 365 + "'", int49 == 365);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertNotNull(nameProvider53);
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet55);
        org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "de");
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 3 + "'", int63 == 3);
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "\u5fb7\u6587" + "'", str65, "\u5fb7\u6587");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "19" + "'", str67, "19");
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 0L + "'", long70 == 0L);
        org.junit.Assert.assertEquals(locale74.toString(), "dayofyear_20");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 7 + "'", int75 == 7);
    }

    @Test
    public void test02091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02091");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.hourOfHalfday();
        java.lang.String str2 = iSOChronology0.toString();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.era();
        org.joda.time.DurationField durationField4 = iSOChronology0.centuries();
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        long long8 = iSOChronology0.add(readablePeriod5, (long) 2022, (int) (byte) 100);
        org.joda.time.DateTimeField dateTimeField9 = iSOChronology0.dayOfYear();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology0.yearOfEra();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology0.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField13 = iSOChronology0.clockhourOfHalfday();
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray17 = iSOChronology0.get(readablePeriod14, 1645454834328L, (long) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ISOChronology[+99:00]" + "'", str2, "ISOChronology[+99:00]");
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 2022L + "'", long8 == 2022L);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
    }

    @Test
    public void test02092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02092");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray5 = localDateTime4.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.hourOfDay();
        int int7 = localDateTime4.get(dateTimeFieldType6);
        org.joda.time.LocalDateTime.Property property8 = localDateTime4.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime4.minusHours(20);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = localDateTime4.getFieldType((int) (byte) 1);
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.LocalDateTime localDateTime15 = localDateTime4.withDurationAdded(readableDuration13, 46);
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.weekyear();
        boolean boolean17 = localDateTime4.isSupported(dateTimeFieldType16);
        int int18 = localDateTime4.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime4.plusSeconds(0);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 356400000 + "'", int3 == 356400000);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray5);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 17 + "'", int7 == 17);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 17 + "'", int18 == 17);
        org.junit.Assert.assertNotNull(localDateTime20);
    }

    @Test
    public void test02093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02093");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.hourOfHalfday();
        org.joda.time.tz.NameProvider nameProvider2 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale3 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet4 = locale3.getExtensionKeys();
        java.lang.String str7 = nameProvider2.getShortName(locale3, "Koordinierte Universalzeit", "+00:00");
        java.util.Locale locale8 = java.util.Locale.GERMAN;
        java.lang.String str11 = nameProvider2.getShortName(locale8, "53167803", "jpn");
        int int12 = dateTimeField1.getMaximumTextLength(locale8);
        java.util.TimeZone timeZone13 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forTimeZone(timeZone13);
        int int16 = dateTimeZone14.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime17 = org.joda.time.LocalDateTime.now(dateTimeZone14);
        int int18 = localDateTime17.getWeekyear();
        org.joda.time.tz.NameProvider nameProvider20 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale21 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet22 = locale21.getExtensionKeys();
        java.lang.String str25 = nameProvider20.getShortName(locale21, "Koordinierte Universalzeit", "+00:00");
        java.util.Locale.Builder builder26 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder29 = builder26.setExtension('x', "jpn");
        java.util.Locale locale30 = java.util.Locale.GERMAN;
        java.util.Locale locale31 = java.util.Locale.GERMAN;
        java.lang.String str32 = locale30.getDisplayCountry(locale31);
        java.util.Locale locale33 = locale30.stripExtensions();
        java.lang.String str34 = locale30.getDisplayName();
        java.util.Locale.Builder builder35 = builder29.setLocale(locale30);
        java.util.Locale locale36 = builder35.build();
        java.lang.String str37 = locale36.getScript();
        java.lang.String str40 = nameProvider20.getName(locale36, "hourOfDay", "");
        java.lang.String str41 = dateTimeField1.getAsShortText((org.joda.time.ReadablePartial) localDateTime17, 22, locale36);
        boolean boolean43 = dateTimeField1.isLeap(1645454771211L);
        java.util.Locale locale44 = java.util.Locale.GERMAN;
        java.util.Locale locale45 = java.util.Locale.GERMAN;
        java.lang.String str46 = locale44.getDisplayCountry(locale45);
        java.util.Locale locale47 = locale44.stripExtensions();
        java.lang.String str48 = locale44.getDisplayName();
        int int49 = dateTimeField1.getMaximumShortTextLength(locale44);
        int int50 = dateTimeField1.getMaximumValue();
        long long53 = dateTimeField1.getDifferenceAsLong(36000117L, 1645454810244L);
        int int54 = dateTimeField1.getMaximumValue();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(nameProvider2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet4);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "de");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 356400000 + "'", int16 == 356400000);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2022 + "'", int18 == 2022);
        org.junit.Assert.assertNotNull(nameProvider20);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet22);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "de");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "de");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "de");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Deutsch" + "'", str34, "Deutsch");
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "de");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "22" + "'", str41, "22");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "de");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "de");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "de");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "Deutsch" + "'", str48, "Deutsch");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 2 + "'", int49 == 2);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 11 + "'", int50 == 11);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + (-457060L) + "'", long53 == (-457060L));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 11 + "'", int54 == 11);
    }

    @Test
    public void test02094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02094");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.yearOfEra();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.secondOfMinute();
        java.lang.String str4 = iSOChronology0.toString();
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology0.hourOfHalfday();
        long long9 = iSOChronology0.add((long) 53178951, (long) (short) 10, (int) (byte) -1);
        org.joda.time.DurationField durationField10 = iSOChronology0.millis();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology0.weekyear();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone13 = iSOChronology0.getZone();
        // The following exception was thrown during execution in test generation
        try {
            long long18 = iSOChronology0.getDateTimeMillis(49677, 524, 53308413, 0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 524 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "ISOChronology[+99:00]" + "'", str4, "ISOChronology[+99:00]");
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 53178941L + "'", long9 == 53178941L);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeZone13);
    }

    @Test
    public void test02095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02095");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.centuryOfEra();
        org.joda.time.DurationField durationField3 = iSOChronology0.seconds();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology0.hourOfHalfday();
        long long9 = iSOChronology0.add((long) (short) 100, 1644849973425L, 2720);
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology0.minuteOfDay();
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray13 = iSOChronology0.get(readablePeriod11, 1644850023472L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 4473991927716100L + "'", long9 == 4473991927716100L);
        org.junit.Assert.assertNotNull(dateTimeField10);
    }

    @Test
    public void test02096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02096");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        int int5 = localDateTime4.getWeekyear();
        org.joda.time.LocalDateTime.Property property6 = localDateTime4.minuteOfHour();
        int int7 = localDateTime4.getHourOfDay();
        java.util.Locale.LanguageRange[] languageRangeArray8 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList9 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList9, languageRangeArray8);
        java.util.Locale locale11 = java.util.Locale.KOREAN;
        java.util.Locale locale12 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet13 = locale12.getExtensionKeys();
        java.util.Locale locale14 = java.util.Locale.GERMAN;
        java.util.Locale locale15 = java.util.Locale.GERMAN;
        java.lang.String str16 = locale14.getDisplayCountry(locale15);
        java.util.Locale locale17 = locale14.stripExtensions();
        java.util.Locale locale18 = java.util.Locale.JAPANESE;
        java.util.Locale locale19 = java.util.Locale.JAPANESE;
        java.util.Locale locale20 = java.util.Locale.GERMAN;
        java.util.Locale[] localeArray21 = new java.util.Locale[] { locale11, locale12, locale17, locale18, locale19, locale20 };
        java.util.ArrayList<java.util.Locale> localeList22 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList22, localeArray21);
        java.util.Locale locale24 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList9, (java.util.Collection<java.util.Locale>) localeList22);
        java.util.Locale.LanguageRange[] languageRangeArray25 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList26 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList26, languageRangeArray25);
        java.util.Locale locale28 = java.util.Locale.KOREAN;
        java.util.Locale locale29 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet30 = locale29.getExtensionKeys();
        java.util.Locale locale31 = java.util.Locale.GERMAN;
        java.util.Locale locale32 = java.util.Locale.GERMAN;
        java.lang.String str33 = locale31.getDisplayCountry(locale32);
        java.util.Locale locale34 = locale31.stripExtensions();
        java.util.Locale locale35 = java.util.Locale.JAPANESE;
        java.util.Locale locale36 = java.util.Locale.JAPANESE;
        java.util.Locale locale37 = java.util.Locale.GERMAN;
        java.util.Locale[] localeArray38 = new java.util.Locale[] { locale28, locale29, locale34, locale35, locale36, locale37 };
        java.util.ArrayList<java.util.Locale> localeList39 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList39, localeArray38);
        java.util.Locale locale41 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList26, (java.util.Collection<java.util.Locale>) localeList39);
        java.util.Locale locale42 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList9, (java.util.Collection<java.util.Locale>) localeList39);
        boolean boolean43 = localDateTime4.equals((java.lang.Object) languageRangeList9);
        int int44 = localDateTime4.getMillisOfDay();
        int int45 = localDateTime4.getDayOfYear();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 356400000 + "'", int3 == 356400000);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2022 + "'", int5 == 2022);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 17 + "'", int7 == 17);
        org.junit.Assert.assertNotNull(languageRangeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ko");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "de");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "de");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "de");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "ja");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "ja");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "de");
        org.junit.Assert.assertNotNull(localeArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNull(locale24);
        org.junit.Assert.assertNotNull(languageRangeArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "ko");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet30);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "de");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "de");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "de");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "ja");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "ja");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "de");
        org.junit.Assert.assertNotNull(localeArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNull(locale41);
        org.junit.Assert.assertNull(locale42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int44 + "' != '" + 64122170 + "'", int44 == 64122170);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 56 + "'", int45 == 56);
    }

    @Test
    public void test02097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02097");
        org.joda.time.tz.NameProvider nameProvider0 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale.Builder builder1 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder4 = builder1.setExtension('x', "jpn");
        java.util.Locale locale5 = java.util.Locale.GERMAN;
        java.util.Locale locale6 = java.util.Locale.GERMAN;
        java.lang.String str7 = locale5.getDisplayCountry(locale6);
        java.util.Locale locale8 = locale5.stripExtensions();
        java.lang.String str9 = locale5.getDisplayName();
        java.util.Locale.Builder builder10 = builder4.setLocale(locale5);
        java.lang.String str13 = nameProvider0.getName(locale5, "Japanese", "UTC");
        org.joda.time.LocalDateTime localDateTime14 = org.joda.time.LocalDateTime.now();
        java.util.TimeZone timeZone15 = null;
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forTimeZone(timeZone15);
        int int18 = dateTimeZone16.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime19 = org.joda.time.LocalDateTime.now(dateTimeZone16);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray20 = localDateTime19.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.hourOfDay();
        int int22 = localDateTime19.get(dateTimeFieldType21);
        org.joda.time.LocalDateTime.Property property23 = localDateTime19.dayOfWeek();
        boolean boolean24 = localDateTime14.isEqual((org.joda.time.ReadablePartial) localDateTime19);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime19.withSecondOfMinute(52);
        int int27 = localDateTime19.getDayOfMonth();
        org.joda.time.LocalDateTime.Property property28 = localDateTime19.millisOfSecond();
        org.joda.time.chrono.ISOChronology iSOChronology29 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField30 = iSOChronology29.hourOfHalfday();
        org.joda.time.tz.NameProvider nameProvider31 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale32 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet33 = locale32.getExtensionKeys();
        java.lang.String str36 = nameProvider31.getShortName(locale32, "Koordinierte Universalzeit", "+00:00");
        java.util.Locale locale37 = java.util.Locale.GERMAN;
        java.lang.String str40 = nameProvider31.getShortName(locale37, "53167803", "jpn");
        int int41 = dateTimeField30.getMaximumTextLength(locale37);
        java.util.TimeZone timeZone42 = null;
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forTimeZone(timeZone42);
        int int45 = dateTimeZone43.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime46 = org.joda.time.LocalDateTime.now(dateTimeZone43);
        int int47 = localDateTime46.getWeekyear();
        org.joda.time.tz.NameProvider nameProvider49 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale50 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet51 = locale50.getExtensionKeys();
        java.lang.String str54 = nameProvider49.getShortName(locale50, "Koordinierte Universalzeit", "+00:00");
        java.util.Locale.Builder builder55 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder58 = builder55.setExtension('x', "jpn");
        java.util.Locale locale59 = java.util.Locale.GERMAN;
        java.util.Locale locale60 = java.util.Locale.GERMAN;
        java.lang.String str61 = locale59.getDisplayCountry(locale60);
        java.util.Locale locale62 = locale59.stripExtensions();
        java.lang.String str63 = locale59.getDisplayName();
        java.util.Locale.Builder builder64 = builder58.setLocale(locale59);
        java.util.Locale locale65 = builder64.build();
        java.lang.String str66 = locale65.getScript();
        java.lang.String str69 = nameProvider49.getName(locale65, "hourOfDay", "");
        java.lang.String str70 = dateTimeField30.getAsShortText((org.joda.time.ReadablePartial) localDateTime46, 22, locale65);
        java.util.Locale locale71 = java.util.Locale.JAPANESE;
        java.lang.String str72 = locale71.getDisplayLanguage();
        java.lang.String str73 = locale71.getISO3Language();
        java.util.Locale locale74 = java.util.Locale.CHINA;
        java.lang.String str75 = locale71.getDisplayLanguage(locale74);
        java.lang.String str76 = locale65.getDisplayVariant(locale74);
        int int77 = property28.getMaximumTextLength(locale74);
        java.lang.String str78 = locale5.getDisplayName(locale74);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str80 = locale74.getUnicodeLocaleType("");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed Unicode locale key: ");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nameProvider0);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "de");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "de");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\u30c9\u30a4\u30c4\u8a9e" + "'", str9, "\u30c9\u30a4\u30c4\u8a9e");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 356400000 + "'", int18 == 356400000);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray20);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 17 + "'", int22 == 17);
        org.junit.Assert.assertNotNull(property23);
// flaky:         org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 25 + "'", int27 == 25);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(iSOChronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(nameProvider31);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet33);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "de");
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 2 + "'", int41 == 2);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 356400000 + "'", int45 == 356400000);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2022 + "'", int47 == 2022);
        org.junit.Assert.assertNotNull(nameProvider49);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet51);
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "de");
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "de");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "de");
// flaky:         org.junit.Assert.assertEquals("'" + str63 + "' != '" + "\u30c9\u30a4\u30c4\u8a9e" + "'", str63, "\u30c9\u30a4\u30c4\u8a9e");
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "de");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertNull(str69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "22" + "'", str70, "22");
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "ja");
// flaky:         org.junit.Assert.assertEquals("'" + str72 + "' != '" + "\u65e5\u672c\u8a9e" + "'", str72, "\u65e5\u672c\u8a9e");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "jpn" + "'", str73, "jpn");
        org.junit.Assert.assertNotNull(locale74);
        org.junit.Assert.assertEquals(locale74.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "\u65e5\u6587" + "'", str75, "\u65e5\u6587");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "" + "'", str76, "");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 3 + "'", int77 == 3);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "\u5fb7\u6587" + "'", str78, "\u5fb7\u6587");
    }

    @Test
    public void test02098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02098");
        org.joda.time.chrono.ISOChronology iSOChronology1 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology1.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology1.centuryOfEra();
        org.joda.time.DurationField durationField4 = iSOChronology1.seconds();
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology1.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField6 = iSOChronology1.hourOfHalfday();
        long long10 = iSOChronology1.add((long) (short) 100, 1644849973425L, 2720);
        java.lang.String str11 = iSOChronology1.toString();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology1.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField13 = iSOChronology1.dayOfWeek();
        org.joda.time.Chronology chronology14 = iSOChronology1.withUTC();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime((java.lang.Object) 53166088, chronology14);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: java.lang.Integer");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(iSOChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 4473991927716100L + "'", long10 == 4473991927716100L);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "ISOChronology[+99:00]" + "'", str11, "ISOChronology[+99:00]");
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(chronology14);
    }

    @Test
    public void test02099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02099");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.millis();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.secondOfDay();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.era();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
    }

    @Test
    public void test02100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02100");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.centuryOfEra();
        org.joda.time.DurationField durationField3 = iSOChronology0.seconds();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology0.hourOfHalfday();
        long long9 = iSOChronology0.add((long) (short) 100, 1644849973425L, 2720);
        java.lang.String str10 = iSOChronology0.toString();
        java.lang.String str11 = iSOChronology0.toString();
        org.joda.time.DurationField durationField12 = iSOChronology0.weeks();
        java.util.TimeZone timeZone13 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forTimeZone(timeZone13);
        int int16 = dateTimeZone14.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime17 = org.joda.time.LocalDateTime.now(dateTimeZone14);
        org.joda.time.LocalDateTime localDateTime18 = org.joda.time.LocalDateTime.now(dateTimeZone14);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.plusSeconds((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime18.minusWeeks((int) (byte) 10);
        java.util.TimeZone timeZone23 = null;
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forTimeZone(timeZone23);
        int int26 = dateTimeZone24.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime27 = org.joda.time.LocalDateTime.now(dateTimeZone24);
        org.joda.time.LocalDateTime localDateTime28 = org.joda.time.LocalDateTime.now(dateTimeZone24);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.plusSeconds((int) (short) 10);
        int int31 = localDateTime28.size();
        boolean boolean32 = localDateTime22.isBefore((org.joda.time.ReadablePartial) localDateTime28);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime28.withMillisOfSecond(52);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime34.plusMinutes(0);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime34.plusDays(53166088);
        int int39 = localDateTime38.getDayOfYear();
        org.joda.time.LocalDateTime.Property property40 = localDateTime38.era();
        long long42 = iSOChronology0.set((org.joda.time.ReadablePartial) localDateTime38, (-139813307279999990L));
        org.joda.time.LocalDateTime localDateTime44 = localDateTime38.minusDays(4);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime46 = localDateTime38.withDayOfWeek((int) '#');
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 4473991927716100L + "'", long9 == 4473991927716100L);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "ISOChronology[+99:00]" + "'", str10, "ISOChronology[+99:00]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "ISOChronology[+99:00]" + "'", str11, "ISOChronology[+99:00]");
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 356400000 + "'", int16 == 356400000);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 356400000 + "'", int26 == 356400000);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 4 + "'", int31 == 4);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 350 + "'", int39 == 350);
        org.junit.Assert.assertNotNull(property40);
// flaky:         org.junit.Assert.assertTrue("'" + long42 + "' != '" + 4595195458122052L + "'", long42 == 4595195458122052L);
        org.junit.Assert.assertNotNull(localDateTime44);
    }

    @Test
    public void test02101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02101");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        int int5 = localDateTime4.getWeekyear();
        org.joda.time.LocalDateTime.Property property6 = localDateTime4.millisOfDay();
        java.lang.String str7 = property6.toString();
        org.joda.time.LocalDateTime localDateTime8 = property6.getLocalDateTime();
        org.joda.time.LocalDateTime.Property property9 = localDateTime8.dayOfWeek();
        int int10 = localDateTime8.getDayOfMonth();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 356400000 + "'", int3 == 356400000);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2022 + "'", int5 == 2022);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Property[millisOfDay]" + "'", str7, "Property[millisOfDay]");
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 25 + "'", int10 == 25);
    }

    @Test
    public void test02102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02102");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.centuryOfEra();
        org.joda.time.DurationField durationField3 = iSOChronology0.seconds();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.monthOfYear();
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology0.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField6 = iSOChronology0.dayOfYear();
        org.joda.time.tz.NameProvider nameProvider8 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale9 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet10 = locale9.getExtensionKeys();
        java.lang.String str13 = nameProvider8.getShortName(locale9, "Koordinierte Universalzeit", "+00:00");
        java.util.Locale locale14 = java.util.Locale.KOREAN;
        java.lang.String str15 = locale9.getDisplayName(locale14);
        java.lang.String str16 = dateTimeField6.getAsText((long) 2837601, locale14);
        java.util.TimeZone timeZone17 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forTimeZone(timeZone17);
        int int20 = dateTimeZone18.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime21 = org.joda.time.LocalDateTime.now(dateTimeZone18);
        org.joda.time.LocalDateTime localDateTime22 = org.joda.time.LocalDateTime.now(dateTimeZone18);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.minusMinutes((int) ' ');
        java.lang.String str25 = localDateTime22.toString();
        int int26 = localDateTime22.getDayOfMonth();
        int int27 = localDateTime22.getDayOfMonth();
        int int28 = localDateTime22.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime30 = localDateTime22.plusMillis(53193);
        org.joda.time.DateTimeField[] dateTimeFieldArray31 = localDateTime22.getFields();
        boolean boolean32 = locale14.equals((java.lang.Object) dateTimeFieldArray31);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(nameProvider8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet10);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str15, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "5" + "'", str16, "5");
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 356400000 + "'", int20 == 356400000);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "2022-02-25T17:48:42.702" + "'", str25, "2022-02-25T17:48:42.702");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 25 + "'", int26 == 25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 25 + "'", int27 == 25);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 22 + "'", int28 == 22);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(dateTimeFieldArray31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test02103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02103");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.centuryOfEra();
        org.joda.time.DurationField durationField3 = iSOChronology0.seconds();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology0.hourOfHalfday();
        long long9 = iSOChronology0.add((long) (short) 100, 1644849973425L, 2720);
        org.joda.time.DurationField durationField10 = iSOChronology0.days();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology0.millisOfSecond();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 4473991927716100L + "'", long9 == 4473991927716100L);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
    }

    @Test
    public void test02104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02104");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.weekOfWeekyear();
        java.util.TimeZone timeZone2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone2);
        java.lang.String str5 = dateTimeZone3.getName(31556995199999L);
        org.joda.time.Chronology chronology6 = iSOChronology0.withZone(dateTimeZone3);
        org.joda.time.DateTimeField dateTimeField7 = iSOChronology0.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField8 = iSOChronology0.monthOfYear();
        org.joda.time.DateTimeField dateTimeField9 = iSOChronology0.clockhourOfHalfday();
        org.joda.time.DurationField durationField10 = iSOChronology0.seconds();
        org.joda.time.DurationField durationField11 = iSOChronology0.millis();
        // The following exception was thrown during execution in test generation
        try {
            long long17 = iSOChronology0.getDateTimeMillis((long) 49711931, 53184, 53266667, 0, 18);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 53184 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+99:00" + "'", str5, "+99:00");
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(durationField11);
    }

    @Test
    public void test02105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02105");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.DateTime dateTime6 = localDateTime4.toDateTime(readableInstant5);
        org.joda.time.Chronology chronology7 = dateTime6.getChronology();
        org.joda.time.DurationField durationField8 = chronology7.hours();
        org.joda.time.DurationField durationField9 = chronology7.months();
        org.joda.time.DateTimeField dateTimeField10 = chronology7.dayOfYear();
        java.util.TimeZone timeZone11 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        int int14 = dateTimeZone12.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime15 = org.joda.time.LocalDateTime.now(dateTimeZone12);
        int[] intArray18 = new int[] { (short) 0, (short) 0 };
        int int19 = dateTimeField10.getMinimumValue((org.joda.time.ReadablePartial) localDateTime15, intArray18);
        java.lang.String str21 = dateTimeField10.getAsShortText((long) 53166088);
        java.util.TimeZone timeZone22 = null;
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        int int25 = dateTimeZone23.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime26 = org.joda.time.LocalDateTime.now(dateTimeZone23);
        int int27 = localDateTime26.getWeekyear();
        org.joda.time.DurationFieldType durationFieldType28 = org.joda.time.DurationFieldType.days();
        org.joda.time.LocalDateTime localDateTime30 = localDateTime26.withFieldAdded(durationFieldType28, 53166088);
        java.util.Locale locale31 = java.util.Locale.ROOT;
        java.lang.String str32 = dateTimeField10.getAsShortText((org.joda.time.ReadablePartial) localDateTime30, locale31);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter33 = null;
        java.lang.String str34 = localDateTime30.toString(dateTimeFormatter33);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime30.minusWeeks(2817386);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime36.minusYears(8);
        org.joda.time.LocalDateTime.Property property39 = localDateTime38.dayOfWeek();
        java.util.TimeZone timeZone40 = null;
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forTimeZone(timeZone40);
        int int43 = dateTimeZone41.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime44 = org.joda.time.LocalDateTime.now(dateTimeZone41);
        int int45 = localDateTime44.getWeekyear();
        org.joda.time.LocalDateTime.Property property46 = localDateTime44.millisOfDay();
        java.util.TimeZone timeZone47 = null;
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.forTimeZone(timeZone47);
        int int50 = dateTimeZone48.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime51 = org.joda.time.LocalDateTime.now(dateTimeZone48);
        org.joda.time.ReadableInstant readableInstant52 = null;
        org.joda.time.DateTime dateTime53 = localDateTime51.toDateTime(readableInstant52);
        java.util.TimeZone timeZone54 = null;
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.forTimeZone(timeZone54);
        int int57 = dateTimeZone55.getOffset(100L);
        org.joda.time.DateTime dateTime58 = localDateTime51.toDateTime(dateTimeZone55);
        int int59 = property46.compareTo((org.joda.time.ReadableInstant) dateTime58);
        int int60 = property46.get();
        org.joda.time.LocalDateTime localDateTime62 = property46.addWrapFieldToCopy(454550);
        int int63 = localDateTime38.compareTo((org.joda.time.ReadablePartial) localDateTime62);
        int int64 = localDateTime38.getDayOfWeek();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 356400000 + "'", int3 == 356400000);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 356400000 + "'", int14 == 356400000);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[0, 0]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "5" + "'", str21, "5");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 356400000 + "'", int25 == 356400000);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2022 + "'", int27 == 2022);
        org.junit.Assert.assertNotNull(durationFieldType28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "350" + "'", str32, "350");
// flaky:         org.junit.Assert.assertEquals("'" + str34 + "' != '" + "147585-12-16T17:48:42.942" + "'", str34, "147585-12-16T17:48:42.942");
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 356400000 + "'", int43 == 356400000);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2022 + "'", int45 == 2022);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 356400000 + "'", int50 == 356400000);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTimeZone55);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 356400000 + "'", int57 == 356400000);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int60 + "' != '" + 64122942 + "'", int60 == 64122942);
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 5 + "'", int64 == 5);
    }

    @Test
    public void test02106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02106");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.hourOfHalfday();
        java.lang.String str2 = iSOChronology0.toString();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.era();
        org.joda.time.DurationField durationField4 = iSOChronology0.centuries();
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        long long8 = iSOChronology0.add(readablePeriod5, (long) 2022, (int) (byte) 100);
        org.joda.time.DateTimeField dateTimeField9 = iSOChronology0.yearOfEra();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology0.era();
        long long12 = dateTimeField10.roundHalfEven((long) 2852990);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ISOChronology[+99:00]" + "'", str2, "ISOChronology[+99:00]");
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 2022L + "'", long8 == 2022L);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-62135953200000L) + "'", long12 == (-62135953200000L));
    }

    @Test
    public void test02107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02107");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.DateTime dateTime6 = localDateTime4.toDateTime(readableInstant5);
        java.util.TimeZone timeZone7 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forTimeZone(timeZone7);
        int int10 = dateTimeZone8.getOffset(100L);
        org.joda.time.DateTime dateTime11 = localDateTime4.toDateTime(dateTimeZone8);
        org.joda.time.LocalDateTime.Property property12 = localDateTime4.monthOfYear();
        java.util.TimeZone timeZone13 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forTimeZone(timeZone13);
        int int16 = dateTimeZone14.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime17 = org.joda.time.LocalDateTime.now(dateTimeZone14);
        int int18 = localDateTime17.getWeekyear();
        org.joda.time.LocalDateTime.Property property19 = localDateTime17.millisOfDay();
        java.util.TimeZone timeZone20 = null;
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forTimeZone(timeZone20);
        int int23 = dateTimeZone21.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime24 = org.joda.time.LocalDateTime.now(dateTimeZone21);
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.DateTime dateTime26 = localDateTime24.toDateTime(readableInstant25);
        java.util.TimeZone timeZone27 = null;
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forTimeZone(timeZone27);
        int int30 = dateTimeZone28.getOffset(100L);
        org.joda.time.DateTime dateTime31 = localDateTime24.toDateTime(dateTimeZone28);
        int int32 = property19.compareTo((org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.LocalDateTime localDateTime33 = property19.roundHalfEvenCopy();
        boolean boolean34 = localDateTime4.isAfter((org.joda.time.ReadablePartial) localDateTime33);
        java.util.Date date35 = localDateTime4.toDate();
        org.joda.time.LocalDateTime localDateTime36 = org.joda.time.LocalDateTime.fromDateFields(date35);
        java.util.TimeZone timeZone37 = null;
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forTimeZone(timeZone37);
        int int40 = dateTimeZone38.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime41 = org.joda.time.LocalDateTime.now(dateTimeZone38);
        org.joda.time.ReadableInstant readableInstant42 = null;
        org.joda.time.DateTime dateTime43 = localDateTime41.toDateTime(readableInstant42);
        java.util.TimeZone timeZone44 = null;
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forTimeZone(timeZone44);
        int int47 = dateTimeZone45.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime48 = org.joda.time.LocalDateTime.now(dateTimeZone45);
        org.joda.time.LocalDateTime localDateTime49 = org.joda.time.LocalDateTime.now(dateTimeZone45);
        org.joda.time.LocalDateTime localDateTime51 = localDateTime49.minusYears(2022);
        org.joda.time.LocalDateTime.Property property52 = localDateTime51.era();
        int int53 = localDateTime41.compareTo((org.joda.time.ReadablePartial) localDateTime51);
        org.joda.time.DateTimeFieldType dateTimeFieldType54 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int55 = localDateTime41.get(dateTimeFieldType54);
        org.joda.time.LocalDateTime localDateTime57 = localDateTime41.plusSeconds(2805);
        org.joda.time.ReadablePeriod readablePeriod58 = null;
        org.joda.time.LocalDateTime localDateTime59 = localDateTime57.plus(readablePeriod58);
        boolean boolean60 = localDateTime36.isBefore((org.joda.time.ReadablePartial) localDateTime57);
        java.util.TimeZone timeZone61 = null;
        org.joda.time.DateTimeZone dateTimeZone62 = org.joda.time.DateTimeZone.forTimeZone(timeZone61);
        int int64 = dateTimeZone62.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime65 = org.joda.time.LocalDateTime.now(dateTimeZone62);
        org.joda.time.LocalDateTime localDateTime66 = org.joda.time.LocalDateTime.now(dateTimeZone62);
        int int67 = localDateTime36.compareTo((org.joda.time.ReadablePartial) localDateTime66);
        org.joda.time.LocalDateTime.Property property68 = localDateTime66.dayOfMonth();
        org.joda.time.Interval interval69 = property68.toInterval();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 356400000 + "'", int3 == 356400000);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 356400000 + "'", int10 == 356400000);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 356400000 + "'", int16 == 356400000);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2022 + "'", int18 == 2022);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 356400000 + "'", int23 == 356400000);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 356400000 + "'", int30 == 356400000);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(date35);
// flaky:         org.junit.Assert.assertEquals(date35.toString(), "Fri Feb 25 17:48:44 GMT+10:00 2022");
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 356400000 + "'", int40 == 356400000);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 356400000 + "'", int47 == 356400000);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType54);
// flaky:         org.junit.Assert.assertTrue("'" + int55 + "' != '" + 64123034 + "'", int55 == 64123034);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(dateTimeZone62);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 356400000 + "'", int64 == 356400000);
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertNotNull(localDateTime66);
// flaky:         org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
        org.junit.Assert.assertNotNull(property68);
        org.junit.Assert.assertNotNull(interval69);
    }

    @Test
    public void test02108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02108");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray5 = localDateTime4.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.plusWeeks(2022);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime4.plusHours((int) '4');
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.plus(readableDuration10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray12 = localDateTime11.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime11.withCenturyOfEra(2843364);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.dayOfYear();
        int int16 = localDateTime14.get(dateTimeFieldType15);
        java.lang.String str17 = dateTimeFieldType15.toString();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 356400000 + "'", int3 == 356400000);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 58 + "'", int16 == 58);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "dayOfYear" + "'", str17, "dayOfYear");
    }

    @Test
    public void test02109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02109");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.yearOfEra();
        org.joda.time.DurationField durationField3 = iSOChronology0.minutes();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.weekyear();
        org.joda.time.DurationField durationField5 = iSOChronology0.centuries();
        org.joda.time.DateTimeField dateTimeField6 = iSOChronology0.centuryOfEra();
        org.joda.time.DurationField durationField7 = iSOChronology0.minutes();
        org.joda.time.DateTimeField dateTimeField8 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField9 = iSOChronology0.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology0.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology0.clockhourOfHalfday();
        org.joda.time.DurationField durationField12 = iSOChronology0.days();
        // The following exception was thrown during execution in test generation
        try {
            long long18 = iSOChronology0.getDateTimeMillis(259200000L, 53269, 2850, 2023, 53264153);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 53269 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
    }

    @Test
    public void test02110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02110");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffset(100L);
        java.util.TimeZone timeZone4 = dateTimeZone1.toTimeZone();
        timeZone4.setID("Property[weekOfWeekyear]");
        boolean boolean7 = timeZone4.observesDaylightTime();
        java.util.TimeZone timeZone8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        int int11 = dateTimeZone9.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime12 = org.joda.time.LocalDateTime.now(dateTimeZone9);
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.DateTime dateTime14 = localDateTime12.toDateTime(readableInstant13);
        java.util.TimeZone timeZone15 = null;
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forTimeZone(timeZone15);
        int int18 = dateTimeZone16.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime19 = org.joda.time.LocalDateTime.now(dateTimeZone16);
        org.joda.time.LocalDateTime localDateTime20 = org.joda.time.LocalDateTime.now(dateTimeZone16);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.minusYears(2022);
        org.joda.time.LocalDateTime.Property property23 = localDateTime22.era();
        int int24 = localDateTime12.compareTo((org.joda.time.ReadablePartial) localDateTime22);
        org.joda.time.DateTimeField[] dateTimeFieldArray25 = localDateTime12.getFields();
        int int26 = localDateTime12.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime28 = localDateTime12.plusDays(2841311);
        java.util.Date date29 = localDateTime28.toDate();
        boolean boolean30 = timeZone4.inDaylightTime(date29);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 356400000 + "'", int3 == 356400000);
        org.junit.Assert.assertNotNull(timeZone4);
        org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 356400000 + "'", int11 == 356400000);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 356400000 + "'", int18 == 356400000);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldArray25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 17 + "'", int26 == 17);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(date29);
// flaky:         org.junit.Assert.assertEquals(date29.toString(), "Tue May 26 17:48:44 GMT+10:00 9801");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test02111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02111");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("24");
        org.junit.Assert.assertNotNull(timeZone1);
// flaky:         org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
    }

    @Test
    public void test02112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02112");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.DateTime dateTime6 = localDateTime4.toDateTime(readableInstant5);
        org.joda.time.Chronology chronology7 = dateTime6.getChronology();
        org.joda.time.DurationField durationField8 = chronology7.hours();
        org.joda.time.DurationField durationField9 = chronology7.months();
        org.joda.time.DateTimeField dateTimeField10 = chronology7.dayOfYear();
        java.util.TimeZone timeZone11 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        int int14 = dateTimeZone12.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime15 = org.joda.time.LocalDateTime.now(dateTimeZone12);
        int[] intArray18 = new int[] { (short) 0, (short) 0 };
        int int19 = dateTimeField10.getMinimumValue((org.joda.time.ReadablePartial) localDateTime15, intArray18);
        int int21 = dateTimeField10.getMinimumValue((long) 100);
        java.util.TimeZone timeZone22 = null;
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        int int25 = dateTimeZone23.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime26 = org.joda.time.LocalDateTime.now(dateTimeZone23);
        int int27 = localDateTime26.getWeekyear();
        org.joda.time.LocalDateTime.Property property28 = localDateTime26.minuteOfHour();
        int int29 = dateTimeField10.getMaximumValue((org.joda.time.ReadablePartial) localDateTime26);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime26.withCenturyOfEra(1);
        org.joda.time.LocalDateTime.Property property32 = localDateTime26.weekyear();
        org.joda.time.LocalDateTime localDateTime34 = property32.setCopy("53166874");
        org.joda.time.LocalDateTime.Property property35 = localDateTime34.hourOfDay();
        org.joda.time.LocalDateTime localDateTime36 = property35.withMaximumValue();
        java.util.TimeZone timeZone37 = null;
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forTimeZone(timeZone37);
        int int40 = dateTimeZone38.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime41 = org.joda.time.LocalDateTime.now(dateTimeZone38);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray42 = localDateTime41.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = org.joda.time.DateTimeFieldType.hourOfDay();
        int int44 = localDateTime41.get(dateTimeFieldType43);
        org.joda.time.LocalDateTime.Property property45 = localDateTime41.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime47 = localDateTime41.minusHours(20);
        org.joda.time.LocalDateTime localDateTime49 = localDateTime47.withWeekOfWeekyear(31);
        int int50 = property35.compareTo((org.joda.time.ReadablePartial) localDateTime49);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime52 = localDateTime49.withHourOfDay(2841472);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2841472 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 356400000 + "'", int3 == 356400000);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 356400000 + "'", int14 == 356400000);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[0, 0]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 356400000 + "'", int25 == 356400000);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2022 + "'", int27 == 2022);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 365 + "'", int29 == 365);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 356400000 + "'", int40 == 356400000);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray42);
        org.junit.Assert.assertNotNull(dateTimeFieldType43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 17 + "'", int44 == 17);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
    }

    @Test
    public void test02113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02113");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime5 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusYears(2022);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.era();
        int int9 = localDateTime7.getYearOfCentury();
        int int10 = localDateTime7.size();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 356400000 + "'", int3 == 356400000);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 4 + "'", int10 == 4);
    }

    @Test
    public void test02114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02114");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.centuryOfEra();
        org.joda.time.DurationField durationField3 = iSOChronology0.seconds();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.weekyearOfCentury();
        org.joda.time.DurationField durationField5 = dateTimeField4.getDurationField();
        java.util.TimeZone timeZone6 = null;
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forTimeZone(timeZone6);
        int int9 = dateTimeZone7.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime10 = org.joda.time.LocalDateTime.now(dateTimeZone7);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray11 = localDateTime10.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.hourOfDay();
        int int13 = localDateTime10.get(dateTimeFieldType12);
        org.joda.time.LocalDateTime.Property property14 = localDateTime10.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime10.minusHours(20);
        java.util.Locale locale17 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet18 = locale17.getExtensionKeys();
        java.util.Iterator<java.lang.Character> charItor19 = charSet18.iterator();
        java.util.ArrayList[] arrayListArray21 = new java.util.ArrayList[0];
        @SuppressWarnings("unchecked")
        java.util.ArrayList<java.util.Locale.LanguageRange>[] languageRangeListArray22 = (java.util.ArrayList<java.util.Locale.LanguageRange>[]) arrayListArray21;
        java.util.ArrayList<java.util.Locale.LanguageRange>[] languageRangeListArray23 = charSet18.toArray((java.util.ArrayList<java.util.Locale.LanguageRange>[]) arrayListArray21);
        java.util.TimeZone timeZone24 = null;
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forTimeZone(timeZone24);
        int int27 = dateTimeZone25.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime28 = org.joda.time.LocalDateTime.now(dateTimeZone25);
        int int29 = localDateTime28.getWeekyear();
        org.joda.time.LocalDateTime.Property property30 = localDateTime28.millisOfDay();
        java.util.TimeZone timeZone31 = null;
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forTimeZone(timeZone31);
        int int34 = dateTimeZone32.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime35 = org.joda.time.LocalDateTime.now(dateTimeZone32);
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.DateTime dateTime37 = localDateTime35.toDateTime(readableInstant36);
        java.util.TimeZone timeZone38 = null;
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forTimeZone(timeZone38);
        int int41 = dateTimeZone39.getOffset(100L);
        org.joda.time.DateTime dateTime42 = localDateTime35.toDateTime(dateTimeZone39);
        int int43 = property30.compareTo((org.joda.time.ReadableInstant) dateTime42);
        boolean boolean44 = charSet18.equals((java.lang.Object) dateTime42);
        org.joda.time.DateTime dateTime45 = localDateTime16.toDateTime((org.joda.time.ReadableInstant) dateTime42);
        int int46 = localDateTime16.getYear();
        java.util.Locale.Builder builder48 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder51 = builder48.setExtension('x', "jpn");
        java.util.Locale locale52 = java.util.Locale.GERMAN;
        java.util.Locale locale53 = java.util.Locale.GERMAN;
        java.lang.String str54 = locale52.getDisplayCountry(locale53);
        java.util.Locale locale55 = locale52.stripExtensions();
        java.lang.String str56 = locale52.getDisplayName();
        java.util.Locale.Builder builder57 = builder51.setLocale(locale52);
        java.util.Locale locale58 = builder51.build();
        java.lang.String str59 = dateTimeField4.getAsShortText((org.joda.time.ReadablePartial) localDateTime16, 21, locale58);
        java.lang.String str60 = localDateTime16.toString();
        org.joda.time.ReadableDuration readableDuration61 = null;
        org.joda.time.LocalDateTime localDateTime63 = localDateTime16.withDurationAdded(readableDuration61, 0);
        org.joda.time.LocalDateTime.Property property64 = localDateTime63.year();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 356400000 + "'", int9 == 356400000);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray11);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 17 + "'", int13 == 17);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet18);
        org.junit.Assert.assertNotNull(charItor19);
        org.junit.Assert.assertNotNull(arrayListArray21);
        org.junit.Assert.assertNotNull(languageRangeListArray22);
        org.junit.Assert.assertNotNull(languageRangeListArray23);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 356400000 + "'", int27 == 356400000);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2022 + "'", int29 == 2022);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 356400000 + "'", int34 == 356400000);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 356400000 + "'", int41 == 356400000);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2022 + "'", int46 == 2022);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "de");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "de");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "de");
// flaky:         org.junit.Assert.assertEquals("'" + str56 + "' != '" + "\u30c9\u30a4\u30c4\u8a9e" + "'", str56, "\u30c9\u30a4\u30c4\u8a9e");
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "de");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "21" + "'", str59, "21");
// flaky:         org.junit.Assert.assertEquals("'" + str60 + "' != '" + "2022-02-24T21:48:43.320" + "'", str60, "2022-02-24T21:48:43.320");
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNotNull(property64);
    }

    @Test
    public void test02115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02115");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.DateTime dateTime6 = localDateTime4.toDateTime(readableInstant5);
        org.joda.time.Chronology chronology7 = dateTime6.getChronology();
        org.joda.time.DurationField durationField8 = chronology7.hours();
        org.joda.time.DateTimeField dateTimeField9 = chronology7.hourOfDay();
        org.joda.time.DurationField durationField10 = chronology7.weeks();
        org.joda.time.DateTimeField dateTimeField11 = chronology7.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField12 = chronology7.minuteOfDay();
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        long long16 = chronology7.add(readablePeriod13, 1644849984588L, 22);
        org.joda.time.DateTimeField dateTimeField17 = chronology7.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField18 = chronology7.millisOfSecond();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 356400000 + "'", int3 == 356400000);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1644849984588L + "'", long16 == 1644849984588L);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
    }

    @Test
    public void test02116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02116");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.DateTime dateTime6 = localDateTime4.toDateTime(readableInstant5);
        org.joda.time.Chronology chronology7 = dateTime6.getChronology();
        org.joda.time.DurationField durationField8 = chronology7.hours();
        org.joda.time.DateTimeField dateTimeField9 = chronology7.hourOfDay();
        org.joda.time.DurationField durationField10 = chronology7.weeks();
        java.util.TimeZone timeZone11 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        int int14 = dateTimeZone12.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime15 = org.joda.time.LocalDateTime.now(dateTimeZone12);
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.DateTime dateTime17 = localDateTime15.toDateTime(readableInstant16);
        org.joda.time.Chronology chronology18 = dateTime17.getChronology();
        org.joda.time.DurationField durationField19 = chronology18.hours();
        long long21 = durationField19.getMillis(0L);
        boolean boolean22 = durationField19.isSupported();
        long long23 = durationField19.getUnitMillis();
        int int24 = durationField10.compareTo(durationField19);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 356400000 + "'", int3 == 356400000);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 356400000 + "'", int14 == 356400000);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 3600000L + "'", long23 == 3600000L);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
    }

    @Test
    public void test02117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02117");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet1 = locale0.getExtensionKeys();
        java.util.stream.Stream<java.lang.Character> charStream2 = charSet1.parallelStream();
        java.util.Locale locale3 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet4 = locale3.getExtensionKeys();
        java.util.Iterator<java.lang.Character> charItor5 = charSet4.iterator();
        boolean boolean6 = charSet1.removeAll((java.util.Collection<java.lang.Character>) charSet4);
        int int7 = charSet4.size();
        java.util.TimeZone timeZone8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        int int11 = dateTimeZone9.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime12 = org.joda.time.LocalDateTime.now(dateTimeZone9);
        int int13 = localDateTime12.getWeekyear();
        org.joda.time.LocalDateTime.Property property14 = localDateTime12.millisOfDay();
        java.util.TimeZone timeZone15 = null;
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forTimeZone(timeZone15);
        int int18 = dateTimeZone16.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime19 = org.joda.time.LocalDateTime.now(dateTimeZone16);
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.DateTime dateTime21 = localDateTime19.toDateTime(readableInstant20);
        java.util.TimeZone timeZone22 = null;
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        int int25 = dateTimeZone23.getOffset(100L);
        org.joda.time.DateTime dateTime26 = localDateTime19.toDateTime(dateTimeZone23);
        int int27 = property14.compareTo((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.LocalDateTime localDateTime28 = property14.roundHalfEvenCopy();
        org.joda.time.LocalDateTime.Property property29 = localDateTime28.monthOfYear();
        java.util.TimeZone timeZone30 = null;
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forTimeZone(timeZone30);
        int int33 = dateTimeZone31.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime34 = org.joda.time.LocalDateTime.now(dateTimeZone31);
        int int35 = localDateTime34.getWeekyear();
        org.joda.time.LocalDateTime.Property property36 = localDateTime34.millisOfDay();
        java.util.TimeZone timeZone37 = null;
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forTimeZone(timeZone37);
        int int40 = dateTimeZone38.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime41 = org.joda.time.LocalDateTime.now(dateTimeZone38);
        org.joda.time.ReadableInstant readableInstant42 = null;
        org.joda.time.DateTime dateTime43 = localDateTime41.toDateTime(readableInstant42);
        java.util.TimeZone timeZone44 = null;
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forTimeZone(timeZone44);
        int int47 = dateTimeZone45.getOffset(100L);
        org.joda.time.DateTime dateTime48 = localDateTime41.toDateTime(dateTimeZone45);
        int int49 = property36.compareTo((org.joda.time.ReadableInstant) dateTime48);
        org.joda.time.LocalDateTime localDateTime50 = property36.roundHalfEvenCopy();
        org.joda.time.LocalDateTime.Property property51 = localDateTime50.monthOfYear();
        java.util.TimeZone timeZone52 = null;
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.forTimeZone(timeZone52);
        int int55 = dateTimeZone53.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime56 = org.joda.time.LocalDateTime.now(dateTimeZone53);
        org.joda.time.ReadableInstant readableInstant57 = null;
        org.joda.time.DateTime dateTime58 = localDateTime56.toDateTime(readableInstant57);
        java.util.TimeZone timeZone59 = null;
        org.joda.time.DateTimeZone dateTimeZone60 = org.joda.time.DateTimeZone.forTimeZone(timeZone59);
        int int62 = dateTimeZone60.getOffset(100L);
        org.joda.time.DateTime dateTime63 = localDateTime56.toDateTime(dateTimeZone60);
        org.joda.time.LocalDateTime localDateTime65 = localDateTime56.plusMinutes((-1));
        org.joda.time.LocalDateTime.Property property66 = localDateTime65.hourOfDay();
        org.joda.time.LocalDateTime localDateTime67 = property66.roundCeilingCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType68 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.LocalDateTime.Property property69 = localDateTime67.property(dateTimeFieldType68);
        org.joda.time.LocalDateTime.Property property70 = localDateTime67.minuteOfHour();
        java.util.TimeZone timeZone71 = null;
        org.joda.time.DateTimeZone dateTimeZone72 = org.joda.time.DateTimeZone.forTimeZone(timeZone71);
        int int74 = dateTimeZone72.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime75 = org.joda.time.LocalDateTime.now(dateTimeZone72);
        int int76 = localDateTime75.getWeekyear();
        org.joda.time.LocalDateTime.Property property77 = localDateTime75.millisOfDay();
        java.util.TimeZone timeZone78 = null;
        org.joda.time.DateTimeZone dateTimeZone79 = org.joda.time.DateTimeZone.forTimeZone(timeZone78);
        int int81 = dateTimeZone79.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime82 = org.joda.time.LocalDateTime.now(dateTimeZone79);
        org.joda.time.ReadableInstant readableInstant83 = null;
        org.joda.time.DateTime dateTime84 = localDateTime82.toDateTime(readableInstant83);
        java.util.TimeZone timeZone85 = null;
        org.joda.time.DateTimeZone dateTimeZone86 = org.joda.time.DateTimeZone.forTimeZone(timeZone85);
        int int88 = dateTimeZone86.getOffset(100L);
        org.joda.time.DateTime dateTime89 = localDateTime82.toDateTime(dateTimeZone86);
        int int90 = property77.compareTo((org.joda.time.ReadableInstant) dateTime89);
        org.joda.time.LocalDateTime localDateTime91 = property77.roundHalfEvenCopy();
        org.joda.time.LocalDateTime.Property property92 = localDateTime91.monthOfYear();
        org.joda.time.LocalDateTime.Property[] propertyArray93 = new org.joda.time.LocalDateTime.Property[] { property29, property51, property70, property92 };
        org.joda.time.LocalDateTime.Property[] propertyArray94 = charSet4.toArray(propertyArray93);
        java.util.Locale locale95 = java.util.Locale.ENGLISH;
        java.lang.String str96 = locale95.getDisplayCountry();
        java.util.Locale.setDefault(locale95);
        java.util.Set<java.lang.Character> charSet98 = locale95.getExtensionKeys();
        boolean boolean99 = charSet4.equals((java.lang.Object) charSet98);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet1);
        org.junit.Assert.assertNotNull(charStream2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet4);
        org.junit.Assert.assertNotNull(charItor5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 356400000 + "'", int11 == 356400000);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2022 + "'", int13 == 2022);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 356400000 + "'", int18 == 356400000);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 356400000 + "'", int25 == 356400000);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 356400000 + "'", int33 == 356400000);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2022 + "'", int35 == 2022);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 356400000 + "'", int40 == 356400000);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 356400000 + "'", int47 == 356400000);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 356400000 + "'", int55 == 356400000);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTimeZone60);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 356400000 + "'", int62 == 356400000);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertNotNull(dateTimeFieldType68);
        org.junit.Assert.assertNotNull(property69);
        org.junit.Assert.assertNotNull(property70);
        org.junit.Assert.assertNotNull(dateTimeZone72);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 356400000 + "'", int74 == 356400000);
        org.junit.Assert.assertNotNull(localDateTime75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 2022 + "'", int76 == 2022);
        org.junit.Assert.assertNotNull(property77);
        org.junit.Assert.assertNotNull(dateTimeZone79);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 356400000 + "'", int81 == 356400000);
        org.junit.Assert.assertNotNull(localDateTime82);
        org.junit.Assert.assertNotNull(dateTime84);
        org.junit.Assert.assertNotNull(dateTimeZone86);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 356400000 + "'", int88 == 356400000);
        org.junit.Assert.assertNotNull(dateTime89);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
        org.junit.Assert.assertNotNull(localDateTime91);
        org.junit.Assert.assertNotNull(property92);
        org.junit.Assert.assertNotNull(propertyArray93);
        org.junit.Assert.assertNotNull(propertyArray94);
        org.junit.Assert.assertNotNull(locale95);
        org.junit.Assert.assertEquals(locale95.toString(), "en");
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "" + "'", str96, "");
        org.junit.Assert.assertNotNull(charSet98);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + true + "'", boolean99 == true);
    }

    @Test
    public void test02118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02118");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.hourOfHalfday();
        java.lang.String str2 = iSOChronology0.toString();
        org.joda.time.DurationField durationField3 = iSOChronology0.eras();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.yearOfCentury();
        long long8 = iSOChronology0.add((long) 53195125, 1645454791872L, 31);
        org.joda.time.DateTimeField dateTimeField9 = iSOChronology0.minuteOfDay();
        long long11 = dateTimeField9.roundCeiling(1645454827000L);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ISOChronology[+99:00]" + "'", str2, "ISOChronology[+99:00]");
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 51009151743157L + "'", long8 == 51009151743157L);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1645454880000L + "'", long11 == 1645454880000L);
    }

    @Test
    public void test02119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02119");
        org.joda.time.chrono.ISOChronology iSOChronology1 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology1.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology1.hourOfHalfday();
        java.util.TimeZone timeZone4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forTimeZone(timeZone4);
        int int7 = dateTimeZone5.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime8 = org.joda.time.LocalDateTime.now(dateTimeZone5);
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.DateTime dateTime10 = localDateTime8.toDateTime(readableInstant9);
        java.util.TimeZone timeZone11 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        int int14 = dateTimeZone12.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime15 = org.joda.time.LocalDateTime.now(dateTimeZone12);
        org.joda.time.LocalDateTime localDateTime16 = org.joda.time.LocalDateTime.now(dateTimeZone12);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.minusYears(2022);
        org.joda.time.LocalDateTime.Property property19 = localDateTime18.era();
        int int20 = localDateTime8.compareTo((org.joda.time.ReadablePartial) localDateTime18);
        org.joda.time.chrono.ISOChronology iSOChronology21 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField22 = iSOChronology21.hourOfHalfday();
        java.lang.String str23 = iSOChronology21.toString();
        java.util.TimeZone timeZone24 = null;
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forTimeZone(timeZone24);
        int int27 = dateTimeZone25.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime28 = org.joda.time.LocalDateTime.now(dateTimeZone25);
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.DateTime dateTime30 = localDateTime28.toDateTime(readableInstant29);
        org.joda.time.Chronology chronology31 = dateTime30.getChronology();
        org.joda.time.DurationField durationField32 = chronology31.hours();
        org.joda.time.DurationField durationField33 = chronology31.months();
        org.joda.time.DateTimeField dateTimeField34 = chronology31.dayOfYear();
        java.util.TimeZone timeZone35 = null;
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forTimeZone(timeZone35);
        int int38 = dateTimeZone36.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime39 = org.joda.time.LocalDateTime.now(dateTimeZone36);
        int[] intArray42 = new int[] { (short) 0, (short) 0 };
        int int43 = dateTimeField34.getMinimumValue((org.joda.time.ReadablePartial) localDateTime39, intArray42);
        java.lang.String str45 = dateTimeField34.getAsShortText((long) 53166088);
        java.util.TimeZone timeZone46 = null;
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.forTimeZone(timeZone46);
        int int49 = dateTimeZone47.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime50 = org.joda.time.LocalDateTime.now(dateTimeZone47);
        int int51 = localDateTime50.getWeekyear();
        org.joda.time.DurationFieldType durationFieldType52 = org.joda.time.DurationFieldType.days();
        org.joda.time.LocalDateTime localDateTime54 = localDateTime50.withFieldAdded(durationFieldType52, 53166088);
        java.util.Locale locale55 = java.util.Locale.ROOT;
        java.lang.String str56 = dateTimeField34.getAsShortText((org.joda.time.ReadablePartial) localDateTime54, locale55);
        java.util.TimeZone timeZone57 = null;
        org.joda.time.DateTimeZone dateTimeZone58 = org.joda.time.DateTimeZone.forTimeZone(timeZone57);
        int int60 = dateTimeZone58.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime61 = org.joda.time.LocalDateTime.now(dateTimeZone58);
        int int62 = localDateTime61.getWeekyear();
        boolean boolean63 = localDateTime54.isEqual((org.joda.time.ReadablePartial) localDateTime61);
        int[] intArray65 = iSOChronology21.get((org.joda.time.ReadablePartial) localDateTime61, (long) 53166088);
        iSOChronology1.validate((org.joda.time.ReadablePartial) localDateTime8, intArray65);
        org.joda.time.DurationField durationField67 = iSOChronology1.minutes();
        java.util.TimeZone timeZone68 = null;
        org.joda.time.DateTimeZone dateTimeZone69 = org.joda.time.DateTimeZone.forTimeZone(timeZone68);
        int int71 = dateTimeZone69.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime72 = org.joda.time.LocalDateTime.now(dateTimeZone69);
        int int73 = localDateTime72.getDayOfYear();
        org.joda.time.LocalDateTime localDateTime75 = localDateTime72.withYearOfEra(2022);
        java.util.TimeZone timeZone76 = null;
        org.joda.time.DateTimeZone dateTimeZone77 = org.joda.time.DateTimeZone.forTimeZone(timeZone76);
        int int79 = dateTimeZone77.getOffset(100L);
        java.util.TimeZone timeZone80 = dateTimeZone77.toTimeZone();
        int int82 = dateTimeZone77.getStandardOffset((long) ' ');
        org.joda.time.DateTime dateTime83 = localDateTime75.toDateTime(dateTimeZone77);
        java.lang.String str85 = dateTimeZone77.getShortName(0L);
        long long87 = dateTimeZone77.convertUTCToLocal((long) 'u');
        org.joda.time.Chronology chronology88 = iSOChronology1.withZone(dateTimeZone77);
        org.joda.time.LocalDateTime localDateTime89 = new org.joda.time.LocalDateTime(39273173176349L, chronology88);
        java.lang.Class<?> wildcardClass90 = chronology88.getClass();
        org.junit.Assert.assertNotNull(iSOChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 356400000 + "'", int7 == 356400000);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 356400000 + "'", int14 == 356400000);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(iSOChronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "ISOChronology[+99:00]" + "'", str23, "ISOChronology[+99:00]");
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 356400000 + "'", int27 == 356400000);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 356400000 + "'", int38 == 356400000);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[0, 0]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "5" + "'", str45, "5");
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 356400000 + "'", int49 == 356400000);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 2022 + "'", int51 == 2022);
        org.junit.Assert.assertNotNull(durationFieldType52);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "350" + "'", str56, "350");
        org.junit.Assert.assertNotNull(dateTimeZone58);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 356400000 + "'", int60 == 356400000);
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 2022 + "'", int62 == 2022);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[1970, 1, 5, 63966088]");
        org.junit.Assert.assertNotNull(durationField67);
        org.junit.Assert.assertNotNull(dateTimeZone69);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 356400000 + "'", int71 == 356400000);
        org.junit.Assert.assertNotNull(localDateTime72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 56 + "'", int73 == 56);
        org.junit.Assert.assertNotNull(localDateTime75);
        org.junit.Assert.assertNotNull(dateTimeZone77);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 356400000 + "'", int79 == 356400000);
        org.junit.Assert.assertNotNull(timeZone80);
        org.junit.Assert.assertEquals(timeZone80.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 356400000 + "'", int82 == 356400000);
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "+99:00" + "'", str85, "+99:00");
        org.junit.Assert.assertTrue("'" + long87 + "' != '" + 356400117L + "'", long87 == 356400117L);
        org.junit.Assert.assertNotNull(chronology88);
        org.junit.Assert.assertNotNull(wildcardClass90);
    }

    @Test
    public void test02120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02120");
        org.joda.time.tz.NameProvider nameProvider0 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.TimeZone timeZone1 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        int int4 = dateTimeZone2.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime5 = org.joda.time.LocalDateTime.now(dateTimeZone2);
        int int6 = localDateTime5.getWeekyear();
        org.joda.time.LocalDateTime.Property property7 = localDateTime5.millisOfDay();
        java.util.Locale locale8 = java.util.Locale.KOREAN;
        int int9 = property7.getMaximumTextLength(locale8);
        java.lang.String str10 = locale8.getVariant();
        java.lang.String str13 = nameProvider0.getName(locale8, "2022-02-21T14:46:31.592", "");
        java.util.TimeZone timeZone14 = null;
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forTimeZone(timeZone14);
        int int17 = dateTimeZone15.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime18 = org.joda.time.LocalDateTime.now(dateTimeZone15);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray19 = localDateTime18.getFieldTypes();
        int int20 = localDateTime18.getCenturyOfEra();
        org.joda.time.LocalDateTime.Property property21 = localDateTime18.year();
        java.util.Locale locale22 = java.util.Locale.KOREAN;
        java.lang.String str23 = property21.getAsShortText(locale22);
        java.lang.String str26 = nameProvider0.getName(locale22, "53195776", "minuteOfHour");
        java.util.Locale locale27 = null;
        java.lang.String str30 = nameProvider0.getShortName(locale27, "53167803", "100");
        java.util.Locale.Builder builder31 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder34 = builder31.setExtension('x', "jpn");
        java.util.Locale locale35 = java.util.Locale.GERMAN;
        java.util.Locale locale36 = java.util.Locale.GERMAN;
        java.lang.String str37 = locale35.getDisplayCountry(locale36);
        java.util.Locale locale38 = locale35.stripExtensions();
        java.lang.String str39 = locale35.getDisplayName();
        java.util.Locale.Builder builder40 = builder34.setLocale(locale35);
        java.util.Locale.Builder builder43 = builder40.setUnicodeLocaleKeyword("22", "deu");
        java.util.Locale.Builder builder44 = builder40.clear();
        java.util.Locale.Builder builder45 = builder40.clear();
        java.util.Locale locale46 = builder40.build();
        java.lang.String str49 = nameProvider0.getShortName(locale46, "85631", "147585-12-12T14:47:53.692");
        java.lang.String str50 = locale46.getCountry();
        org.junit.Assert.assertNotNull(nameProvider0);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 356400000 + "'", int4 == 356400000);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2022 + "'", int6 == 2022);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "ko");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8 + "'", int9 == 8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 356400000 + "'", int17 == 356400000);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 20 + "'", int20 == 20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "2022" + "'", str23, "2022");
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "de");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "de");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "de");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "German" + "'", str39, "German");
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "");
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
    }

    @Test
    public void test02121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02121");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.hourOfHalfday();
        java.lang.String str2 = iSOChronology0.toString();
        org.joda.time.DurationField durationField3 = iSOChronology0.eras();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.year();
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology0.hourOfDay();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((java.lang.Object) 31556952000000L);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.minusSeconds((-292275054));
        org.joda.time.LocalDateTime localDateTime11 = localDateTime7.minusMonths((int) (short) 100);
        org.joda.time.chrono.ISOChronology iSOChronology12 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField13 = iSOChronology12.hourOfHalfday();
        org.joda.time.tz.NameProvider nameProvider14 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale15 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet16 = locale15.getExtensionKeys();
        java.lang.String str19 = nameProvider14.getShortName(locale15, "Koordinierte Universalzeit", "+00:00");
        java.util.Locale locale20 = java.util.Locale.GERMAN;
        java.lang.String str23 = nameProvider14.getShortName(locale20, "53167803", "jpn");
        int int24 = dateTimeField13.getMaximumTextLength(locale20);
        java.util.TimeZone timeZone25 = null;
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forTimeZone(timeZone25);
        int int28 = dateTimeZone26.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime29 = org.joda.time.LocalDateTime.now(dateTimeZone26);
        int int30 = localDateTime29.getWeekyear();
        org.joda.time.tz.NameProvider nameProvider32 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale33 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet34 = locale33.getExtensionKeys();
        java.lang.String str37 = nameProvider32.getShortName(locale33, "Koordinierte Universalzeit", "+00:00");
        java.util.Locale.Builder builder38 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder41 = builder38.setExtension('x', "jpn");
        java.util.Locale locale42 = java.util.Locale.GERMAN;
        java.util.Locale locale43 = java.util.Locale.GERMAN;
        java.lang.String str44 = locale42.getDisplayCountry(locale43);
        java.util.Locale locale45 = locale42.stripExtensions();
        java.lang.String str46 = locale42.getDisplayName();
        java.util.Locale.Builder builder47 = builder41.setLocale(locale42);
        java.util.Locale locale48 = builder47.build();
        java.lang.String str49 = locale48.getScript();
        java.lang.String str52 = nameProvider32.getName(locale48, "hourOfDay", "");
        java.lang.String str53 = dateTimeField13.getAsShortText((org.joda.time.ReadablePartial) localDateTime29, 22, locale48);
        java.util.TimeZone timeZone54 = null;
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.forTimeZone(timeZone54);
        int int57 = dateTimeZone55.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime58 = org.joda.time.LocalDateTime.now(dateTimeZone55);
        int int59 = localDateTime58.getWeekyear();
        java.util.TimeZone timeZone60 = null;
        org.joda.time.DateTimeZone dateTimeZone61 = org.joda.time.DateTimeZone.forTimeZone(timeZone60);
        int int63 = dateTimeZone61.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime64 = org.joda.time.LocalDateTime.now(dateTimeZone61);
        org.joda.time.LocalDateTime localDateTime65 = org.joda.time.LocalDateTime.now(dateTimeZone61);
        org.joda.time.LocalDateTime localDateTime67 = localDateTime65.minusMinutes((int) ' ');
        org.joda.time.ReadablePeriod readablePeriod68 = null;
        org.joda.time.LocalDateTime localDateTime69 = localDateTime65.plus(readablePeriod68);
        int[] intArray70 = localDateTime69.getValues();
        int int71 = dateTimeField13.getMaximumValue((org.joda.time.ReadablePartial) localDateTime58, intArray70);
        iSOChronology0.validate((org.joda.time.ReadablePartial) localDateTime7, intArray70);
        org.joda.time.LocalDateTime.Property property73 = localDateTime7.centuryOfEra();
        java.lang.String str74 = property73.getAsShortText();
        org.joda.time.LocalDateTime localDateTime75 = property73.roundFloorCopy();
        org.joda.time.LocalDateTime localDateTime76 = property73.withMaximumValue();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ISOChronology[UTC]" + "'", str2, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(iSOChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(nameProvider14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet16);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "de");
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
        org.junit.Assert.assertNotNull(dateTimeZone26);
// flaky:         org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2022 + "'", int30 == 2022);
        org.junit.Assert.assertNotNull(nameProvider32);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet34);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "de");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "de");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "de");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "German" + "'", str46, "German");
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "de");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "22" + "'", str53, "22");
        org.junit.Assert.assertNotNull(dateTimeZone55);
// flaky:         org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 2022 + "'", int59 == 2022);
        org.junit.Assert.assertNotNull(dateTimeZone61);
// flaky:         org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertNotNull(localDateTime69);
        org.junit.Assert.assertNotNull(intArray70);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[2022, 2, 21, 53323656]");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 11 + "'", int71 == 11);
        org.junit.Assert.assertNotNull(property73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "29" + "'", str74, "29");
        org.junit.Assert.assertNotNull(localDateTime75);
        org.junit.Assert.assertNotNull(localDateTime76);
    }

    @Test
    public void test02122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02122");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.millis();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone3 = iSOChronology0.getZone();
        java.lang.String str4 = dateTimeZone3.toString();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeZone3);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "UTC" + "'", str4, "UTC");
    }

    @Test
    public void test02123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02123");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.centuryOfEra();
        org.joda.time.DurationField durationField3 = iSOChronology0.centuries();
        org.joda.time.DurationField durationField4 = iSOChronology0.halfdays();
        org.joda.time.chrono.ISOChronology iSOChronology5 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField6 = iSOChronology5.hourOfHalfday();
        java.lang.String str7 = iSOChronology5.toString();
        org.joda.time.DurationField durationField8 = iSOChronology5.centuries();
        int int9 = durationField4.compareTo(durationField8);
        long long12 = durationField8.getMillis(2806, 1645454871609L);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(iSOChronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "ISOChronology[UTC]" + "'", str7, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 8854880688000000L + "'", long12 == 8854880688000000L);
    }

    @Test
    public void test02124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02124");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.yearOfEra();
        org.joda.time.DurationField durationField3 = iSOChronology0.minutes();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.weekyear();
        org.joda.time.DurationField durationField5 = iSOChronology0.centuries();
        org.joda.time.DateTimeField dateTimeField6 = iSOChronology0.centuryOfEra();
        java.util.TimeZone timeZone7 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forTimeZone(timeZone7);
        java.lang.String str10 = dateTimeZone8.getName(31556995199999L);
        org.joda.time.Chronology chronology11 = iSOChronology0.withZone(dateTimeZone8);
        java.util.TimeZone timeZone13 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forTimeZone(timeZone13);
        int int16 = dateTimeZone14.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime17 = org.joda.time.LocalDateTime.now(dateTimeZone14);
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.DateTime dateTime19 = localDateTime17.toDateTime(readableInstant18);
        org.joda.time.Chronology chronology20 = dateTime19.getChronology();
        org.joda.time.DurationField durationField21 = chronology20.hours();
        org.joda.time.DurationField durationField22 = chronology20.months();
        org.joda.time.DateTimeField dateTimeField23 = chronology20.dayOfYear();
        java.util.TimeZone timeZone24 = null;
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forTimeZone(timeZone24);
        int int27 = dateTimeZone25.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime28 = org.joda.time.LocalDateTime.now(dateTimeZone25);
        int[] intArray31 = new int[] { (short) 0, (short) 0 };
        int int32 = dateTimeField23.getMinimumValue((org.joda.time.ReadablePartial) localDateTime28, intArray31);
        int int34 = dateTimeField23.getMinimumValue((long) 100);
        java.util.TimeZone timeZone35 = null;
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forTimeZone(timeZone35);
        int int38 = dateTimeZone36.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime39 = org.joda.time.LocalDateTime.now(dateTimeZone36);
        int int40 = localDateTime39.getWeekyear();
        org.joda.time.LocalDateTime.Property property41 = localDateTime39.minuteOfHour();
        int int42 = dateTimeField23.getMaximumValue((org.joda.time.ReadablePartial) localDateTime39);
        long long45 = dateTimeField23.getDifferenceAsLong(7870L, 0L);
        org.joda.time.tz.NameProvider nameProvider46 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale47 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet48 = locale47.getExtensionKeys();
        java.lang.String str51 = nameProvider46.getShortName(locale47, "Koordinierte Universalzeit", "+00:00");
        java.util.Locale locale52 = java.util.Locale.GERMAN;
        java.lang.String str55 = nameProvider46.getShortName(locale52, "53167803", "jpn");
        int int56 = dateTimeField23.getMaximumShortTextLength(locale52);
        java.lang.String str57 = dateTimeZone8.getName((long) 2, locale52);
        int int59 = dateTimeZone8.getOffset(1644850004097L);
        long long61 = dateTimeZone8.convertUTCToLocal(1644850097308L);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeZone8);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+00:00" + "'", str10, "+00:00");
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeZone14);
// flaky:         org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeZone25);
// flaky:         org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[0, 0]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(dateTimeZone36);
// flaky:         org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 2022 + "'", int40 == 2022);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 365 + "'", int42 == 365);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertNotNull(nameProvider46);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet48);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "de");
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 3 + "'", int56 == 3);
// flaky:         org.junit.Assert.assertEquals("'" + str57 + "' != '" + "+00:00" + "'", str57, "+00:00");
// flaky:         org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + long61 + "' != '" + 1644850097308L + "'", long61 == 1644850097308L);
    }

    @Test
    public void test02125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02125");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DurationField durationField2 = durationFieldType0.getField(chronology1);
        long long5 = durationField2.add((-1L), (long) (byte) 10);
        boolean boolean6 = durationField2.isSupported();
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 31556995199999L + "'", long5 == 31556995199999L);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
    }

    @Test
    public void test02126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02126");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(1645454865084L);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withMonthOfYear(53262638);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 53262638 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02127");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str3 = dateTimeZone1.getName(31556995199999L);
        java.lang.String str4 = dateTimeZone1.getID();
        java.util.TimeZone timeZone5 = dateTimeZone1.toTimeZone();
        java.util.TimeZone timeZone6 = null;
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forTimeZone(timeZone6);
        int int9 = dateTimeZone7.getOffset(100L);
        java.util.TimeZone timeZone10 = dateTimeZone7.toTimeZone();
        int int12 = dateTimeZone7.getOffset((-36000001L));
        java.util.TimeZone timeZone13 = dateTimeZone7.toTimeZone();
        int int14 = timeZone13.getRawOffset();
        java.util.TimeZone timeZone15 = null;
        boolean boolean16 = timeZone13.hasSameRules(timeZone15);
        timeZone13.setID("weekyear");
        boolean boolean19 = timeZone5.hasSameRules(timeZone13);
        int int20 = timeZone13.getRawOffset();
        // The following exception was thrown during execution in test generation
        try {
            int int27 = timeZone13.getOffset(2898742, 46, 346, 19037, 53307053, 356399999);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal era 2898742");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+00:00" + "'", str3, "+00:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "UTC" + "'", str4, "UTC");
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone7);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(timeZone10);
// flaky:         org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "Coordinated Universal Time");
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(timeZone13);
        org.junit.Assert.assertEquals(timeZone13.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
    }

    @Test
    public void test02128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02128");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffset(100L);
        java.util.TimeZone timeZone4 = dateTimeZone1.toTimeZone();
        int int6 = dateTimeZone1.getStandardOffset((long) ' ');
        boolean boolean8 = dateTimeZone1.isStandardOffset((long) '4');
        long long10 = dateTimeZone1.nextTransition(88619084644104000L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(timeZone4);
// flaky:         org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "Coordinated Universal Time");
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 88619084644104000L + "'", long10 == 88619084644104000L);
    }

    @Test
    public void test02129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02129");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("53315454");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=53315454");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02130");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.yearOfEra();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.secondOfMinute();
        java.lang.String str4 = iSOChronology0.toString();
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology0.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField6 = iSOChronology0.dayOfYear();
        org.joda.time.DateTimeField dateTimeField7 = iSOChronology0.weekyear();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "ISOChronology[UTC]" + "'", str4, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
    }

    @Test
    public void test02131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02131");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        int int5 = localDateTime4.getDayOfYear();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.withYearOfEra(2022);
        java.util.TimeZone timeZone8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        int int11 = dateTimeZone9.getOffset(100L);
        java.util.TimeZone timeZone12 = dateTimeZone9.toTimeZone();
        int int14 = dateTimeZone9.getStandardOffset((long) ' ');
        org.joda.time.DateTime dateTime15 = localDateTime7.toDateTime(dateTimeZone9);
        java.util.TimeZone timeZone16 = null;
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forTimeZone(timeZone16);
        int int19 = dateTimeZone17.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime20 = org.joda.time.LocalDateTime.now(dateTimeZone17);
        int int21 = localDateTime20.getWeekyear();
        org.joda.time.LocalDateTime.Property property22 = localDateTime20.minuteOfHour();
        org.joda.time.LocalDateTime.Property property23 = localDateTime20.dayOfYear();
        java.util.TimeZone timeZone24 = null;
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forTimeZone(timeZone24);
        int int27 = dateTimeZone25.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime28 = org.joda.time.LocalDateTime.now(dateTimeZone25);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray29 = localDateTime28.getFieldTypes();
        int int30 = property23.compareTo((org.joda.time.ReadablePartial) localDateTime28);
        int int31 = localDateTime28.getYearOfCentury();
        org.joda.time.DateTime dateTime32 = localDateTime28.toDateTime();
        int int33 = dateTimeZone9.getOffset((org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.chrono.ISOChronology iSOChronology34 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone9);
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime(dateTimeZone9);
        // The following exception was thrown during execution in test generation
        try {
            int int37 = localDateTime35.getValue(46);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 46");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(localDateTime4);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 52 + "'", int5 == 52);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(dateTimeZone9);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(timeZone12);
// flaky:         org.junit.Assert.assertEquals(timeZone12.getDisplayName(), "\uc138\uacc4\ud45c\uc900\uc2dc");
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTimeZone17);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2022 + "'", int21 == 2022);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTimeZone25);
// flaky:         org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 22 + "'", int31 == 22);
        org.junit.Assert.assertNotNull(dateTime32);
// flaky:         org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(iSOChronology34);
    }

    @Test
    public void test02132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02132");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        java.util.TimeZone timeZone1 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        int int4 = dateTimeZone2.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime5 = org.joda.time.LocalDateTime.now(dateTimeZone2);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray6 = localDateTime5.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.hourOfDay();
        int int8 = localDateTime5.get(dateTimeFieldType7);
        org.joda.time.LocalDateTime.Property property9 = localDateTime5.dayOfWeek();
        boolean boolean10 = localDateTime0.isEqual((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.LocalDateTime.Property property11 = localDateTime5.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime12 = property11.roundHalfCeilingCopy();
        java.util.TimeZone timeZone13 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forTimeZone(timeZone13);
        int int16 = dateTimeZone14.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime17 = org.joda.time.LocalDateTime.now(dateTimeZone14);
        org.joda.time.LocalDateTime localDateTime18 = org.joda.time.LocalDateTime.now(dateTimeZone14);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.minusMinutes((int) ' ');
        int int21 = property11.compareTo((org.joda.time.ReadablePartial) localDateTime20);
        int int22 = property11.getMaximumValueOverall();
        java.lang.String str23 = property11.getAsText();
        org.joda.time.LocalDateTime localDateTime24 = property11.roundFloorCopy();
        org.joda.time.LocalDateTime.Property property25 = localDateTime24.hourOfDay();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime24.withDayOfWeek(6);
        org.joda.time.DateTimeField[] dateTimeFieldArray28 = localDateTime27.getFields();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(dateTimeZone2);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 14 + "'", int8 == 14);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
// flaky:         org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 31 + "'", int22 == 31);
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "21" + "'", str23, "21");
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(dateTimeFieldArray28);
    }

    @Test
    public void test02133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02133");
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02134");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffset(100L);
        java.util.TimeZone timeZone4 = dateTimeZone1.toTimeZone();
        int int6 = dateTimeZone1.getStandardOffset((long) ' ');
        boolean boolean8 = dateTimeZone1.isStandardOffset((long) '4');
        boolean boolean9 = dateTimeZone1.isFixed();
        java.util.TimeZone timeZone10 = dateTimeZone1.toTimeZone();
        java.util.TimeZone timeZone11 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        int int14 = dateTimeZone12.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime15 = org.joda.time.LocalDateTime.now(dateTimeZone12);
        int int16 = localDateTime15.getWeekyear();
        org.joda.time.LocalDateTime.Property property17 = localDateTime15.minuteOfHour();
        int int18 = localDateTime15.getHourOfDay();
        org.joda.time.LocalDateTime.Property property19 = localDateTime15.dayOfWeek();
        boolean boolean20 = dateTimeZone1.isLocalDateTimeGap(localDateTime15);
        java.util.TimeZone timeZone21 = dateTimeZone1.toTimeZone();
        timeZone21.setID("");
        // The following exception was thrown during execution in test generation
        try {
            int int30 = timeZone21.getOffset(49682709, 0, 49696269, 8, 49687, 53266354);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal era 49682709");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(timeZone4);
// flaky:         org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "\uc138\uacc4\ud45c\uc900\uc2dc");
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(timeZone10);
// flaky:         org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "\uc138\uacc4\ud45c\uc900\uc2dc");
        org.junit.Assert.assertNotNull(dateTimeZone12);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2022 + "'", int16 == 2022);
        org.junit.Assert.assertNotNull(property17);
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + 14 + "'", int18 == 14);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(timeZone21);
        org.junit.Assert.assertEquals(timeZone21.getDisplayName(), "GMT+00:00");
    }

    @Test
    public void test02135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02135");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str3 = dateTimeZone1.getShortName(100L);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        java.util.TimeZone timeZone5 = dateTimeZone1.toTimeZone();
        java.util.Locale locale6 = java.util.Locale.GERMAN;
        java.lang.String str7 = locale6.getDisplayScript();
        java.util.Set<java.lang.String> strSet8 = locale6.getUnicodeLocaleAttributes();
        java.lang.String str9 = timeZone5.getDisplayName(locale6);
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+00:00" + "'", str3, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "\uc138\uacc4\ud45c\uc900\uc2dc");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "de");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(strSet8);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Koordinierte Universalzeit" + "'", str9, "Koordinierte Universalzeit");
    }

    @Test
    public void test02136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02136");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.DateTime dateTime6 = localDateTime4.toDateTime(readableInstant5);
        org.joda.time.Chronology chronology7 = dateTime6.getChronology();
        org.joda.time.DurationField durationField8 = chronology7.hours();
        org.joda.time.DurationField durationField9 = chronology7.months();
        org.joda.time.DateTimeField dateTimeField10 = chronology7.dayOfYear();
        java.lang.String str11 = dateTimeField10.toString();
        long long13 = dateTimeField10.remainder(1645454873750L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "DateTimeField[dayOfYear]" + "'", str11, "DateTimeField[dayOfYear]");
// flaky:         org.junit.Assert.assertTrue("'" + long13 + "' != '" + 53273750L + "'", long13 == 53273750L);
    }

    @Test
    public void test02137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02137");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray5 = localDateTime4.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.hourOfDay();
        int int7 = localDateTime4.get(dateTimeFieldType6);
        org.joda.time.LocalDateTime.Property property8 = localDateTime4.hourOfDay();
        org.joda.time.LocalDateTime localDateTime9 = org.joda.time.LocalDateTime.now();
        java.util.TimeZone timeZone10 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        int int13 = dateTimeZone11.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime14 = org.joda.time.LocalDateTime.now(dateTimeZone11);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray15 = localDateTime14.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.hourOfDay();
        int int17 = localDateTime14.get(dateTimeFieldType16);
        org.joda.time.LocalDateTime.Property property18 = localDateTime14.dayOfWeek();
        boolean boolean19 = localDateTime9.isEqual((org.joda.time.ReadablePartial) localDateTime14);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.LocalDateTime localDateTime22 = localDateTime9.withPeriodAdded(readablePeriod20, (int) (short) -1);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.withYear(53189779);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.withYearOfEra(32);
        java.util.TimeZone timeZone27 = null;
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forTimeZone(timeZone27);
        int int30 = dateTimeZone28.getOffset(100L);
        java.util.TimeZone timeZone31 = dateTimeZone28.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forTimeZone(timeZone31);
        java.lang.String str34 = dateTimeZone32.getNameKey((long) '4');
        java.lang.String str36 = dateTimeZone32.getNameKey(1645454784654L);
        org.joda.time.DateTime dateTime37 = localDateTime24.toDateTime(dateTimeZone32);
        int int38 = property8.compareTo((org.joda.time.ReadableInstant) dateTime37);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime40 = property8.setCopy("2802443");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2802443 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray5);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 14 + "'", int7 == 14);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone11);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray15);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
// flaky:         org.junit.Assert.assertTrue("'" + int17 + "' != '" + 14 + "'", int17 == 14);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(dateTimeZone28);
// flaky:         org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(timeZone31);
// flaky:         org.junit.Assert.assertEquals(timeZone31.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "UTC" + "'", str34, "UTC");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "UTC" + "'", str36, "UTC");
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
    }

    @Test
    public void test02138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02138");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forID("48");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The datetime zone id '48' is not recognised");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02139");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.hourOfHalfday();
        java.lang.String str2 = iSOChronology0.toString();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.era();
        org.joda.time.DurationField durationField4 = iSOChronology0.centuries();
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        long long8 = iSOChronology0.add(readablePeriod5, (long) 2022, (int) (byte) 100);
        org.joda.time.DateTimeField dateTimeField9 = iSOChronology0.dayOfYear();
        org.joda.time.DurationField durationField10 = iSOChronology0.months();
        // The following exception was thrown during execution in test generation
        try {
            long long13 = durationField10.subtract(1644850057735L, 1645454871609L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Magnitude of add amount is too large: -1645454871609");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ISOChronology[UTC]" + "'", str2, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 2022L + "'", long8 == 2022L);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
    }

    @Test
    public void test02140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02140");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        java.util.TimeZone timeZone1 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        int int4 = dateTimeZone2.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime5 = org.joda.time.LocalDateTime.now(dateTimeZone2);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray6 = localDateTime5.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.hourOfDay();
        int int8 = localDateTime5.get(dateTimeFieldType7);
        org.joda.time.LocalDateTime.Property property9 = localDateTime5.dayOfWeek();
        boolean boolean10 = localDateTime0.isEqual((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.chrono.ISOChronology iSOChronology12 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField13 = iSOChronology12.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology12.centuryOfEra();
        org.joda.time.DurationField durationField15 = iSOChronology12.seconds();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology12.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology12.hourOfHalfday();
        java.util.TimeZone timeZone18 = null;
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forTimeZone(timeZone18);
        int int21 = dateTimeZone19.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime22 = org.joda.time.LocalDateTime.now(dateTimeZone19);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray23 = localDateTime22.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.hourOfDay();
        int int25 = localDateTime22.get(dateTimeFieldType24);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime22.minusWeeks(1);
        long long29 = iSOChronology12.set((org.joda.time.ReadablePartial) localDateTime27, (long) 0);
        boolean boolean30 = dateTimeFieldType11.isSupported((org.joda.time.Chronology) iSOChronology12);
        int int31 = localDateTime0.get(dateTimeFieldType11);
        java.util.TimeZone timeZone32 = null;
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forTimeZone(timeZone32);
        int int35 = dateTimeZone33.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime36 = org.joda.time.LocalDateTime.now(dateTimeZone33);
        int int37 = localDateTime36.getWeekyear();
        org.joda.time.LocalDateTime.Property property38 = localDateTime36.millisOfDay();
        java.util.Locale locale39 = java.util.Locale.GERMAN;
        java.util.Locale locale40 = java.util.Locale.GERMAN;
        java.lang.String str41 = locale39.getDisplayCountry(locale40);
        java.util.Locale locale42 = locale39.stripExtensions();
        int int43 = property38.getMaximumShortTextLength(locale39);
        org.joda.time.Interval interval44 = property38.toInterval();
        org.joda.time.LocalDateTime localDateTime45 = property38.getLocalDateTime();
        int int46 = localDateTime45.getYearOfEra();
        int int47 = localDateTime45.getCenturyOfEra();
        int int48 = localDateTime0.compareTo((org.joda.time.ReadablePartial) localDateTime45);
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.LocalDateTime.Property property50 = localDateTime0.property(dateTimeFieldType49);
        org.joda.time.LocalDateTime localDateTime52 = property50.addToCopy(0L);
        int int53 = property50.getMaximumValue();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(dateTimeZone2);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 14 + "'", int8 == 14);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertNotNull(iSOChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeZone19);
// flaky:         org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray23);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
// flaky:         org.junit.Assert.assertTrue("'" + int25 + "' != '" + 14 + "'", int25 == 14);
        org.junit.Assert.assertNotNull(localDateTime27);
// flaky:         org.junit.Assert.assertTrue("'" + long29 + "' != '" + 1644850124735L + "'", long29 == 1644850124735L);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int31 + "' != '" + 53324 + "'", int31 == 53324);
        org.junit.Assert.assertNotNull(dateTimeZone33);
// flaky:         org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2022 + "'", int37 == 2022);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "de");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "de");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "de");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 8 + "'", int43 == 8);
        org.junit.Assert.assertNotNull(interval44);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2022 + "'", int46 == 2022);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 20 + "'", int47 == 20);
// flaky:         org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertNotNull(dateTimeFieldType49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 12 + "'", int53 == 12);
    }

    @Test
    public void test02141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02141");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.yearOfEra();
        org.joda.time.DurationField durationField3 = iSOChronology0.minutes();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.weekyear();
        org.joda.time.DurationField durationField5 = iSOChronology0.centuries();
        org.joda.time.DateTimeField dateTimeField6 = iSOChronology0.centuryOfEra();
        org.joda.time.DurationField durationField7 = iSOChronology0.minutes();
        org.joda.time.DateTimeField dateTimeField8 = iSOChronology0.minuteOfDay();
        org.joda.time.DurationField durationField9 = iSOChronology0.days();
        org.joda.time.DurationField durationField10 = iSOChronology0.days();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology0.secondOfDay();
        org.joda.time.DurationField durationField12 = iSOChronology0.weekyears();
        org.joda.time.DurationField durationField13 = iSOChronology0.millis();
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology0.millisOfSecond();
        int int16 = dateTimeField14.getMaximumValue(3472L);
        int int19 = dateTimeField14.getDifference(46L, (long) 53263427);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 999 + "'", int16 == 999);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-53263381) + "'", int19 == (-53263381));
    }

    @Test
    public void test02142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02142");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.yearOfEra();
        org.joda.time.DurationField durationField3 = iSOChronology0.minutes();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.weekyear();
        org.joda.time.DurationField durationField5 = iSOChronology0.centuries();
        org.joda.time.DateTimeField dateTimeField6 = iSOChronology0.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone7 = iSOChronology0.getZone();
        org.joda.time.DateTimeField dateTimeField8 = iSOChronology0.weekyear();
        org.joda.time.DateTimeField dateTimeField9 = iSOChronology0.minuteOfHour();
        java.lang.String str10 = iSOChronology0.toString();
        // The following exception was thrown during execution in test generation
        try {
            long long16 = iSOChronology0.getDateTimeMillis((-2209024800000L), 64122321, 110, 999, 2833465);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 64122321 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "ISOChronology[UTC]" + "'", str10, "ISOChronology[UTC]");
    }

    @Test
    public void test02143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02143");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.weekOfWeekyear();
        java.util.TimeZone timeZone2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone2);
        java.lang.String str5 = dateTimeZone3.getName(31556995199999L);
        org.joda.time.Chronology chronology6 = iSOChronology0.withZone(dateTimeZone3);
        org.joda.time.DateTimeField dateTimeField7 = iSOChronology0.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField8 = iSOChronology0.monthOfYear();
        org.joda.time.DateTimeField dateTimeField9 = iSOChronology0.clockhourOfHalfday();
        org.joda.time.DurationField durationField10 = iSOChronology0.seconds();
        // The following exception was thrown during execution in test generation
        try {
            int int13 = durationField10.getValue(1677930450220800003L, 0L);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Value cannot fit in an int: 1677930450220800");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeZone3);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+00:00" + "'", str5, "+00:00");
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
    }

    @Test
    public void test02144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02144");
        java.util.Locale locale0 = java.util.Locale.JAPANESE;
        java.lang.String str1 = locale0.getDisplayLanguage();
        java.lang.String str2 = locale0.getISO3Language();
        java.lang.String str3 = locale0.getISO3Language();
        java.lang.String str4 = locale0.getDisplayVariant();
        java.util.Locale locale5 = java.util.Locale.GERMAN;
        java.util.Locale locale6 = java.util.Locale.GERMAN;
        java.lang.String str7 = locale5.getDisplayCountry(locale6);
        java.lang.String str8 = locale0.getDisplayCountry(locale6);
        java.lang.Object obj9 = locale6.clone();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Japanese" + "'", str1, "Japanese");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "jpn" + "'", str2, "jpn");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "jpn" + "'", str3, "jpn");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "de");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertEquals(obj9.toString(), "de");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj9), "de");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj9), "de");
    }

    @Test
    public void test02145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02145");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setExtension('x', "jpn");
        java.util.Locale locale4 = java.util.Locale.GERMAN;
        java.util.Locale locale5 = java.util.Locale.GERMAN;
        java.lang.String str6 = locale4.getDisplayCountry(locale5);
        java.util.Locale locale7 = locale4.stripExtensions();
        java.lang.String str8 = locale4.getDisplayName();
        java.util.Locale.Builder builder9 = builder3.setLocale(locale4);
        java.util.Locale.Builder builder10 = builder9.clearExtensions();
        java.util.Locale locale11 = java.util.Locale.GERMAN;
        java.util.Locale locale12 = java.util.Locale.GERMAN;
        java.lang.String str13 = locale11.getDisplayCountry(locale12);
        java.util.Locale locale14 = locale11.stripExtensions();
        java.lang.String str15 = locale11.getDisplayName();
        java.util.Locale.Builder builder16 = builder10.setLocale(locale11);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder18 = builder10.setRegion("2840641");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed region: 2840641 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "de");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "de");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "German" + "'", str8, "German");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "de");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "de");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "de");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "German" + "'", str15, "German");
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test02146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02146");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        int int5 = localDateTime4.getWeekyear();
        org.joda.time.LocalDateTime.Property property6 = localDateTime4.millisOfDay();
        java.util.Locale locale7 = java.util.Locale.GERMAN;
        java.util.Locale locale8 = java.util.Locale.GERMAN;
        java.lang.String str9 = locale7.getDisplayCountry(locale8);
        java.util.Locale locale10 = locale7.stripExtensions();
        int int11 = property6.getMaximumShortTextLength(locale7);
        org.joda.time.Interval interval12 = property6.toInterval();
        org.joda.time.LocalDateTime localDateTime14 = property6.setCopy(1);
        org.joda.time.LocalDateTime.Property property15 = localDateTime14.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime14.withMillisOfDay((int) (byte) 10);
        int int18 = localDateTime14.getYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = null;
        java.lang.String str20 = localDateTime14.toString(dateTimeFormatter19);
        org.joda.time.chrono.ISOChronology iSOChronology21 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField22 = iSOChronology21.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField23 = iSOChronology21.centuryOfEra();
        org.joda.time.DurationField durationField24 = iSOChronology21.seconds();
        org.joda.time.DateTimeField dateTimeField25 = iSOChronology21.dayOfYear();
        org.joda.time.DateTimeField dateTimeField26 = iSOChronology21.hourOfHalfday();
        java.util.TimeZone timeZone27 = null;
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forTimeZone(timeZone27);
        int int30 = dateTimeZone28.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime31 = org.joda.time.LocalDateTime.now(dateTimeZone28);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray32 = localDateTime31.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime34 = localDateTime31.plusWeeks(2022);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime31.plusHours((int) '4');
        java.util.Locale locale37 = null;
        java.lang.String str38 = dateTimeField26.getAsText((org.joda.time.ReadablePartial) localDateTime36, locale37);
        boolean boolean39 = localDateTime14.isEqual((org.joda.time.ReadablePartial) localDateTime36);
        int int40 = localDateTime36.getCenturyOfEra();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2022 + "'", int5 == 2022);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "de");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "de");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "de");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 8 + "'", int11 == 8);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2022 + "'", int18 == 2022);
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "2022-02-21T00:00:00.001" + "'", str20, "2022-02-21T00:00:00.001");
        org.junit.Assert.assertNotNull(iSOChronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeZone28);
// flaky:         org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(localDateTime36);
// flaky:         org.junit.Assert.assertEquals("'" + str38 + "' != '" + "6" + "'", str38, "6");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 20 + "'", int40 == 20);
    }

    @Test
    public void test02147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02147");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray5 = localDateTime4.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.plusWeeks(2022);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime4.plusHours((int) '4');
        org.joda.time.LocalDateTime.Property property10 = localDateTime4.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int12 = localDateTime4.get(dateTimeFieldType11);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The DateTimeFieldType must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property10);
    }

    @Test
    public void test02148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02148");
        org.joda.time.chrono.ISOChronology iSOChronology1 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology1.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology1.centuryOfEra();
        org.joda.time.DurationField durationField4 = iSOChronology1.seconds();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology1);
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime(1645454858395L, (org.joda.time.Chronology) iSOChronology1);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime8 = localDateTime6.withDayOfMonth(53266667);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 53266667 for dayOfMonth must be in the range [1,28]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(iSOChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
    }

    @Test
    public void test02149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02149");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime5 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusMinutes((int) ' ');
        org.joda.time.LocalDateTime localDateTime9 = localDateTime5.withYear(53166088);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.plusMinutes(0);
        int int12 = localDateTime9.size();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime9.minusMinutes(36);
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.LocalDateTime localDateTime16 = localDateTime9.minus(readableDuration15);
        int int17 = localDateTime9.getDayOfWeek();
        int int18 = localDateTime9.getYearOfCentury();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4 + "'", int12 == 4);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
// flaky:         org.junit.Assert.assertTrue("'" + int17 + "' != '" + 6 + "'", int17 == 6);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 88 + "'", int18 == 88);
    }

    @Test
    public void test02150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02150");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.hourOfHalfday();
        org.joda.time.tz.NameProvider nameProvider2 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale3 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet4 = locale3.getExtensionKeys();
        java.lang.String str7 = nameProvider2.getShortName(locale3, "Koordinierte Universalzeit", "+00:00");
        java.util.Locale locale8 = java.util.Locale.GERMAN;
        java.lang.String str11 = nameProvider2.getShortName(locale8, "53167803", "jpn");
        int int12 = dateTimeField1.getMaximumTextLength(locale8);
        java.util.TimeZone timeZone13 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forTimeZone(timeZone13);
        int int16 = dateTimeZone14.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime17 = org.joda.time.LocalDateTime.now(dateTimeZone14);
        int int18 = localDateTime17.getWeekyear();
        org.joda.time.tz.NameProvider nameProvider20 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale21 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet22 = locale21.getExtensionKeys();
        java.lang.String str25 = nameProvider20.getShortName(locale21, "Koordinierte Universalzeit", "+00:00");
        java.util.Locale.Builder builder26 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder29 = builder26.setExtension('x', "jpn");
        java.util.Locale locale30 = java.util.Locale.GERMAN;
        java.util.Locale locale31 = java.util.Locale.GERMAN;
        java.lang.String str32 = locale30.getDisplayCountry(locale31);
        java.util.Locale locale33 = locale30.stripExtensions();
        java.lang.String str34 = locale30.getDisplayName();
        java.util.Locale.Builder builder35 = builder29.setLocale(locale30);
        java.util.Locale locale36 = builder35.build();
        java.lang.String str37 = locale36.getScript();
        java.lang.String str40 = nameProvider20.getName(locale36, "hourOfDay", "");
        java.lang.String str41 = dateTimeField1.getAsShortText((org.joda.time.ReadablePartial) localDateTime17, 22, locale36);
        java.util.TimeZone timeZone42 = null;
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forTimeZone(timeZone42);
        int int45 = dateTimeZone43.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime46 = org.joda.time.LocalDateTime.now(dateTimeZone43);
        int int47 = localDateTime46.getWeekyear();
        java.util.TimeZone timeZone48 = null;
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.forTimeZone(timeZone48);
        int int51 = dateTimeZone49.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime52 = org.joda.time.LocalDateTime.now(dateTimeZone49);
        org.joda.time.LocalDateTime localDateTime53 = org.joda.time.LocalDateTime.now(dateTimeZone49);
        org.joda.time.LocalDateTime localDateTime55 = localDateTime53.minusMinutes((int) ' ');
        org.joda.time.ReadablePeriod readablePeriod56 = null;
        org.joda.time.LocalDateTime localDateTime57 = localDateTime53.plus(readablePeriod56);
        int[] intArray58 = localDateTime57.getValues();
        int int59 = dateTimeField1.getMaximumValue((org.joda.time.ReadablePartial) localDateTime46, intArray58);
        org.joda.time.LocalDateTime localDateTime61 = localDateTime46.plusMillis((int) ' ');
        org.joda.time.DateTimeZone dateTimeZone63 = org.joda.time.DateTimeZone.forOffsetMillis(50);
        org.joda.time.LocalDateTime localDateTime64 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime61, dateTimeZone63);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime66 = localDateTime61.withMillisOfSecond(53324);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 53324 for millisOfSecond must be in the range [0,999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(nameProvider2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet4);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "de");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertNotNull(dateTimeZone14);
// flaky:         org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2022 + "'", int18 == 2022);
        org.junit.Assert.assertNotNull(nameProvider20);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet22);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "de");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "de");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "de");
// flaky:         org.junit.Assert.assertEquals("'" + str34 + "' != '" + "allemand" + "'", str34, "allemand");
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "de");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "22" + "'", str41, "22");
        org.junit.Assert.assertNotNull(dateTimeZone43);
// flaky:         org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2022 + "'", int47 == 2022);
        org.junit.Assert.assertNotNull(dateTimeZone49);
// flaky:         org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(intArray58);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[2022, 2, 21, 53324989]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 11 + "'", int59 == 11);
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertNotNull(dateTimeZone63);
    }

    @Test
    public void test02151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02151");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.centuryOfEra();
        org.joda.time.DurationField durationField3 = iSOChronology0.seconds();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.dayOfYear();
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology0.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) -1);
        long long10 = dateTimeZone8.convertUTCToLocal((long) 4);
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime(1645454771211L, dateTimeZone8);
        org.joda.time.chrono.ISOChronology iSOChronology12 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField13 = iSOChronology12.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology12.hourOfHalfday();
        java.util.TimeZone timeZone15 = null;
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forTimeZone(timeZone15);
        int int18 = dateTimeZone16.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime19 = org.joda.time.LocalDateTime.now(dateTimeZone16);
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.DateTime dateTime21 = localDateTime19.toDateTime(readableInstant20);
        java.util.TimeZone timeZone22 = null;
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        int int25 = dateTimeZone23.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime26 = org.joda.time.LocalDateTime.now(dateTimeZone23);
        org.joda.time.LocalDateTime localDateTime27 = org.joda.time.LocalDateTime.now(dateTimeZone23);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.minusYears(2022);
        org.joda.time.LocalDateTime.Property property30 = localDateTime29.era();
        int int31 = localDateTime19.compareTo((org.joda.time.ReadablePartial) localDateTime29);
        org.joda.time.chrono.ISOChronology iSOChronology32 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField33 = iSOChronology32.hourOfHalfday();
        java.lang.String str34 = iSOChronology32.toString();
        java.util.TimeZone timeZone35 = null;
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forTimeZone(timeZone35);
        int int38 = dateTimeZone36.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime39 = org.joda.time.LocalDateTime.now(dateTimeZone36);
        org.joda.time.ReadableInstant readableInstant40 = null;
        org.joda.time.DateTime dateTime41 = localDateTime39.toDateTime(readableInstant40);
        org.joda.time.Chronology chronology42 = dateTime41.getChronology();
        org.joda.time.DurationField durationField43 = chronology42.hours();
        org.joda.time.DurationField durationField44 = chronology42.months();
        org.joda.time.DateTimeField dateTimeField45 = chronology42.dayOfYear();
        java.util.TimeZone timeZone46 = null;
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.forTimeZone(timeZone46);
        int int49 = dateTimeZone47.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime50 = org.joda.time.LocalDateTime.now(dateTimeZone47);
        int[] intArray53 = new int[] { (short) 0, (short) 0 };
        int int54 = dateTimeField45.getMinimumValue((org.joda.time.ReadablePartial) localDateTime50, intArray53);
        java.lang.String str56 = dateTimeField45.getAsShortText((long) 53166088);
        java.util.TimeZone timeZone57 = null;
        org.joda.time.DateTimeZone dateTimeZone58 = org.joda.time.DateTimeZone.forTimeZone(timeZone57);
        int int60 = dateTimeZone58.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime61 = org.joda.time.LocalDateTime.now(dateTimeZone58);
        int int62 = localDateTime61.getWeekyear();
        org.joda.time.DurationFieldType durationFieldType63 = org.joda.time.DurationFieldType.days();
        org.joda.time.LocalDateTime localDateTime65 = localDateTime61.withFieldAdded(durationFieldType63, 53166088);
        java.util.Locale locale66 = java.util.Locale.ROOT;
        java.lang.String str67 = dateTimeField45.getAsShortText((org.joda.time.ReadablePartial) localDateTime65, locale66);
        java.util.TimeZone timeZone68 = null;
        org.joda.time.DateTimeZone dateTimeZone69 = org.joda.time.DateTimeZone.forTimeZone(timeZone68);
        int int71 = dateTimeZone69.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime72 = org.joda.time.LocalDateTime.now(dateTimeZone69);
        int int73 = localDateTime72.getWeekyear();
        boolean boolean74 = localDateTime65.isEqual((org.joda.time.ReadablePartial) localDateTime72);
        int[] intArray76 = iSOChronology32.get((org.joda.time.ReadablePartial) localDateTime72, (long) 53166088);
        iSOChronology12.validate((org.joda.time.ReadablePartial) localDateTime19, intArray76);
        int[] intArray78 = localDateTime19.getValues();
        int int79 = dateTimeField5.getMinimumValue((org.joda.time.ReadablePartial) localDateTime11, intArray78);
        int int80 = localDateTime11.getHourOfDay();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-3599996L) + "'", long10 == (-3599996L));
        org.junit.Assert.assertNotNull(iSOChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeZone16);
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTimeZone23);
// flaky:         org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(iSOChronology32);
        org.junit.Assert.assertNotNull(dateTimeField33);
// flaky:         org.junit.Assert.assertEquals("'" + str34 + "' != '" + "ISOChronology[UTC]" + "'", str34, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeZone36);
// flaky:         org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(durationField43);
        org.junit.Assert.assertNotNull(durationField44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(dateTimeZone47);
// flaky:         org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[0, 0]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
// flaky:         org.junit.Assert.assertEquals("'" + str56 + "' != '" + "1" + "'", str56, "1");
        org.junit.Assert.assertNotNull(dateTimeZone58);
// flaky:         org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 2022 + "'", int62 == 2022);
        org.junit.Assert.assertNotNull(durationFieldType63);
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "");
// flaky:         org.junit.Assert.assertEquals("'" + str67 + "' != '" + "346" + "'", str67, "346");
        org.junit.Assert.assertNotNull(dateTimeZone69);
// flaky:         org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(localDateTime72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 2022 + "'", int73 == 2022);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(intArray76);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[1970, 1, 1, 53166088]");
        org.junit.Assert.assertNotNull(intArray78);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[2022, 2, 21, 53325031]");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 13 + "'", int80 == 13);
    }

    @Test
    public void test02152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02152");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray5 = localDateTime4.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.hourOfDay();
        int int7 = localDateTime4.get(dateTimeFieldType6);
        org.joda.time.LocalDateTime.Property property8 = localDateTime4.hourOfDay();
        int int9 = property8.getLeapAmount();
        java.util.TimeZone timeZone10 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        int int13 = dateTimeZone11.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime14 = org.joda.time.LocalDateTime.now(dateTimeZone11);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = localDateTime14.toDateTime(readableInstant15);
        java.util.TimeZone timeZone17 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forTimeZone(timeZone17);
        int int20 = dateTimeZone18.getOffset(100L);
        org.joda.time.DateTime dateTime21 = localDateTime14.toDateTime(dateTimeZone18);
        int int22 = property8.compareTo((org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.LocalDateTime localDateTime23 = property8.roundHalfCeilingCopy();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray5);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 14 + "'", int7 == 14);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone11);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTimeZone18);
// flaky:         org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(localDateTime23);
    }

    @Test
    public void test02153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02153");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.yearOfEra();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.hourOfDay();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.year();
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology0.dayOfYear();
        int int6 = dateTimeField5.getMinimumValue();
        java.util.Locale.Builder builder8 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder11 = builder8.setExtension('x', "jpn");
        java.util.Locale locale12 = java.util.Locale.GERMAN;
        java.util.Locale locale13 = java.util.Locale.GERMAN;
        java.lang.String str14 = locale12.getDisplayCountry(locale13);
        java.util.Locale locale15 = locale12.stripExtensions();
        java.lang.String str16 = locale12.getDisplayName();
        java.util.Locale.Builder builder17 = builder11.setLocale(locale12);
        java.lang.String str18 = dateTimeField5.getAsText(0L, locale12);
        org.joda.time.chrono.ISOChronology iSOChronology19 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField20 = iSOChronology19.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField21 = iSOChronology19.yearOfEra();
        org.joda.time.DateTimeField dateTimeField22 = iSOChronology19.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField23 = iSOChronology19.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField24 = iSOChronology19.dayOfYear();
        java.util.TimeZone timeZone25 = null;
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forTimeZone(timeZone25);
        int int28 = dateTimeZone26.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime29 = org.joda.time.LocalDateTime.now(dateTimeZone26);
        int int30 = localDateTime29.getDayOfYear();
        org.joda.time.LocalDateTime localDateTime32 = localDateTime29.withYearOfEra(2022);
        java.util.Locale locale34 = java.util.Locale.JAPANESE;
        java.lang.String str35 = locale34.getDisplayLanguage();
        java.lang.String str36 = locale34.getISO3Language();
        java.lang.String str37 = dateTimeField24.getAsShortText((org.joda.time.ReadablePartial) localDateTime32, (int) (short) 100, locale34);
        org.joda.time.Chronology chronology38 = localDateTime32.getChronology();
        org.joda.time.LocalDateTime.Property property39 = localDateTime32.dayOfMonth();
        int int40 = dateTimeField5.getMinimumValue((org.joda.time.ReadablePartial) localDateTime32);
        java.lang.String str42 = dateTimeField5.getAsText(1645454864302L);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "de");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "de");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "de");
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "allemand" + "'", str16, "allemand");
        org.junit.Assert.assertNotNull(builder17);
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "1" + "'", str18, "1");
        org.junit.Assert.assertNotNull(iSOChronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeZone26);
// flaky:         org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(localDateTime29);
// flaky:         org.junit.Assert.assertTrue("'" + int30 + "' != '" + 52 + "'", int30 == 52);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "ja");
// flaky:         org.junit.Assert.assertEquals("'" + str35 + "' != '" + "japonais" + "'", str35, "japonais");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "jpn" + "'", str36, "jpn");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "100" + "'", str37, "100");
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
// flaky:         org.junit.Assert.assertEquals("'" + str42 + "' != '" + "52" + "'", str42, "52");
    }

    @Test
    public void test02154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02154");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.centuryOfEra();
        org.joda.time.DurationField durationField3 = iSOChronology0.centuries();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.millisOfDay();
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology0.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField6 = iSOChronology0.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField7 = iSOChronology0.weekyearOfCentury();
        java.util.TimeZone timeZone8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        int int11 = dateTimeZone9.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime12 = org.joda.time.LocalDateTime.now(dateTimeZone9);
        int int13 = localDateTime12.getWeekyear();
        org.joda.time.LocalDateTime.Property property14 = localDateTime12.minuteOfHour();
        org.joda.time.chrono.ISOChronology iSOChronology15 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology15.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology15.centuryOfEra();
        org.joda.time.DurationField durationField18 = iSOChronology15.seconds();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology15.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField20 = iSOChronology15.hourOfHalfday();
        java.util.TimeZone timeZone21 = null;
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forTimeZone(timeZone21);
        int int24 = dateTimeZone22.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime25 = org.joda.time.LocalDateTime.now(dateTimeZone22);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray26 = localDateTime25.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.hourOfDay();
        int int28 = localDateTime25.get(dateTimeFieldType27);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime25.minusWeeks(1);
        long long32 = iSOChronology15.set((org.joda.time.ReadablePartial) localDateTime30, (long) 0);
        boolean boolean33 = localDateTime12.isAfter((org.joda.time.ReadablePartial) localDateTime30);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime12.withSecondOfMinute(20);
        org.joda.time.LocalDateTime localDateTime36 = org.joda.time.LocalDateTime.now();
        java.util.TimeZone timeZone37 = null;
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forTimeZone(timeZone37);
        int int40 = dateTimeZone38.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime41 = org.joda.time.LocalDateTime.now(dateTimeZone38);
        int int42 = localDateTime41.getWeekyear();
        org.joda.time.LocalDateTime.Property property43 = localDateTime41.millisOfDay();
        java.util.TimeZone timeZone44 = null;
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forTimeZone(timeZone44);
        int int47 = dateTimeZone45.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime48 = org.joda.time.LocalDateTime.now(dateTimeZone45);
        org.joda.time.ReadableInstant readableInstant49 = null;
        org.joda.time.DateTime dateTime50 = localDateTime48.toDateTime(readableInstant49);
        java.util.TimeZone timeZone51 = null;
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.forTimeZone(timeZone51);
        int int54 = dateTimeZone52.getOffset(100L);
        org.joda.time.DateTime dateTime55 = localDateTime48.toDateTime(dateTimeZone52);
        int int56 = property43.compareTo((org.joda.time.ReadableInstant) dateTime55);
        org.joda.time.LocalDateTime localDateTime57 = property43.roundHalfEvenCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType58 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.LocalDateTime.Property property59 = localDateTime57.property(dateTimeFieldType58);
        org.joda.time.DateTimeFieldType dateTimeFieldType60 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.Chronology chronology61 = null;
        boolean boolean62 = dateTimeFieldType60.isSupported(chronology61);
        boolean boolean63 = localDateTime57.isSupported(dateTimeFieldType60);
        int int64 = localDateTime36.get(dateTimeFieldType60);
        org.joda.time.ReadablePeriod readablePeriod65 = null;
        org.joda.time.LocalDateTime localDateTime66 = localDateTime36.minus(readablePeriod65);
        int int67 = localDateTime12.compareTo((org.joda.time.ReadablePartial) localDateTime66);
        org.joda.time.chrono.ISOChronology iSOChronology68 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField69 = iSOChronology68.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField70 = iSOChronology68.centuryOfEra();
        int int73 = dateTimeField70.getDifference((long) 'x', (long) (short) 10);
        int int75 = dateTimeField70.getMaximumValue(53176349L);
        org.joda.time.DateTimeFieldType dateTimeFieldType76 = dateTimeField70.getType();
        org.joda.time.LocalDateTime localDateTime78 = localDateTime12.withField(dateTimeFieldType76, 2801);
        java.util.Locale locale80 = null;
        java.lang.String str81 = dateTimeField7.getAsText((org.joda.time.ReadablePartial) localDateTime78, 896, locale80);
        long long84 = dateTimeField7.addWrapField(1645454877586L, 29);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeZone9);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2022 + "'", int13 == 2022);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(iSOChronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeZone22);
// flaky:         org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray26);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
// flaky:         org.junit.Assert.assertTrue("'" + int28 + "' != '" + 14 + "'", int28 == 14);
        org.junit.Assert.assertNotNull(localDateTime30);
// flaky:         org.junit.Assert.assertTrue("'" + long32 + "' != '" + 1644850125103L + "'", long32 == 1644850125103L);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(dateTimeZone38);
// flaky:         org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2022 + "'", int42 == 2022);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(dateTimeZone45);
// flaky:         org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTimeZone52);
// flaky:         org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(dateTimeFieldType58);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(dateTimeFieldType60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int64 + "' != '" + 52 + "'", int64 == 52);
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(iSOChronology68);
        org.junit.Assert.assertNotNull(dateTimeField69);
        org.junit.Assert.assertNotNull(dateTimeField70);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 2922789 + "'", int75 == 2922789);
        org.junit.Assert.assertNotNull(dateTimeFieldType76);
        org.junit.Assert.assertNotNull(localDateTime78);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "896" + "'", str81, "896");
        org.junit.Assert.assertTrue("'" + long84 + "' != '" + 2560603677586L + "'", long84 == 2560603677586L);
    }

    @Test
    public void test02155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02155");
        java.util.Locale locale0 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale.setDefault(locale0);
        java.lang.String str2 = locale0.getScript();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
    }

    @Test
    public void test02156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02156");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime5 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusMinutes((int) ' ');
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withYearOfCentury((int) (byte) 10);
        java.util.TimeZone timeZone10 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        int int13 = dateTimeZone11.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime14 = org.joda.time.LocalDateTime.now(dateTimeZone11);
        org.joda.time.LocalDateTime localDateTime15 = org.joda.time.LocalDateTime.now(dateTimeZone11);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.withMillisOfSecond((int) '4');
        org.joda.time.LocalDateTime localDateTime18 = localDateTime9.withFields((org.joda.time.ReadablePartial) localDateTime15);
        org.joda.time.DurationFieldType durationFieldType19 = org.joda.time.DurationFieldType.weekyears();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime9.withFieldAdded(durationFieldType19, 4);
        int int22 = localDateTime21.getMillisOfSecond();
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.LocalDateTime localDateTime24 = localDateTime21.minus(readablePeriod23);
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone11);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(durationFieldType19);
        org.junit.Assert.assertNotNull(localDateTime21);
// flaky:         org.junit.Assert.assertTrue("'" + int22 + "' != '" + 188 + "'", int22 == 188);
        org.junit.Assert.assertNotNull(localDateTime24);
    }

    @Test
    public void test02157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02157");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        java.util.TimeZone timeZone1 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        int int4 = dateTimeZone2.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime5 = org.joda.time.LocalDateTime.now(dateTimeZone2);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray6 = localDateTime5.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.hourOfDay();
        int int8 = localDateTime5.get(dateTimeFieldType7);
        org.joda.time.LocalDateTime.Property property9 = localDateTime5.dayOfWeek();
        boolean boolean10 = localDateTime0.isEqual((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.LocalDateTime localDateTime13 = localDateTime0.withPeriodAdded(readablePeriod11, (int) (short) -1);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withYear(53189779);
        int int16 = localDateTime13.getCenturyOfEra();
        org.joda.time.LocalDateTime.Property property17 = localDateTime13.dayOfMonth();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(dateTimeZone2);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 14 + "'", int8 == 14);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 20 + "'", int16 == 20);
        org.junit.Assert.assertNotNull(property17);
    }

    @Test
    public void test02158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02158");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray5 = localDateTime4.getFieldTypes();
        int int6 = localDateTime4.getMonthOfYear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType8 = localDateTime4.getFieldType(13);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 13");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
    }

    @Test
    public void test02159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02159");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        int int5 = localDateTime4.getWeekyear();
        org.joda.time.LocalDateTime.Property property6 = localDateTime4.millisOfDay();
        java.util.TimeZone timeZone7 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forTimeZone(timeZone7);
        int int10 = dateTimeZone8.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now(dateTimeZone8);
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.DateTime dateTime13 = localDateTime11.toDateTime(readableInstant12);
        java.util.TimeZone timeZone14 = null;
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forTimeZone(timeZone14);
        int int17 = dateTimeZone15.getOffset(100L);
        org.joda.time.DateTime dateTime18 = localDateTime11.toDateTime(dateTimeZone15);
        int int19 = property6.compareTo((org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.LocalDateTime localDateTime20 = property6.roundHalfEvenCopy();
        org.joda.time.LocalDateTime.Property property21 = localDateTime20.monthOfYear();
        int int22 = localDateTime20.getDayOfYear();
        org.joda.time.chrono.ISOChronology iSOChronology23 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField24 = iSOChronology23.hourOfHalfday();
        java.lang.String str25 = iSOChronology23.toString();
        org.joda.time.DateTimeField dateTimeField26 = iSOChronology23.era();
        org.joda.time.DurationField durationField27 = iSOChronology23.centuries();
        org.joda.time.DurationField durationField28 = iSOChronology23.weeks();
        org.joda.time.DateTimeField dateTimeField29 = iSOChronology23.era();
        org.joda.time.DateTimeField dateTimeField30 = iSOChronology23.year();
        boolean boolean31 = localDateTime20.equals((java.lang.Object) dateTimeField30);
        long long33 = dateTimeField30.roundHalfEven(1644850108465L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2022 + "'", int5 == 2022);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTimeZone8);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
// flaky:         org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(property21);
// flaky:         org.junit.Assert.assertTrue("'" + int22 + "' != '" + 52 + "'", int22 == 52);
        org.junit.Assert.assertNotNull(iSOChronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "ISOChronology[UTC]" + "'", str25, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long33 + "' != '" + 1640995200000L + "'", long33 == 1640995200000L);
    }

    @Test
    public void test02160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02160");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.weekOfWeekyear();
        java.util.TimeZone timeZone2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone2);
        java.lang.String str5 = dateTimeZone3.getName(31556995199999L);
        org.joda.time.Chronology chronology6 = iSOChronology0.withZone(dateTimeZone3);
        org.joda.time.DateTimeField dateTimeField7 = iSOChronology0.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField8 = iSOChronology0.monthOfYear();
        org.joda.time.DateTimeField dateTimeField9 = iSOChronology0.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology0.halfdayOfDay();
        // The following exception was thrown during execution in test generation
        try {
            long long15 = iSOChronology0.getDateTimeMillis(2798859, 53284, (int) '4', 2805);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 53284 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeZone3);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+00:00" + "'", str5, "+00:00");
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
    }

    @Test
    public void test02161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02161");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        int int5 = localDateTime4.getWeekyear();
        org.joda.time.LocalDateTime.Property property6 = localDateTime4.millisOfDay();
        java.lang.String str7 = property6.getAsString();
        int int8 = property6.getLeapAmount();
        org.joda.time.LocalDateTime localDateTime10 = property6.addToCopy((int) (short) 1);
        org.joda.time.Interval interval11 = property6.toInterval();
        org.joda.time.LocalDateTime localDateTime13 = property6.addWrapFieldToCopy(9);
        org.joda.time.DurationFieldType durationFieldType14 = org.joda.time.DurationFieldType.eras();
        org.joda.time.chrono.ISOChronology iSOChronology15 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology15.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology15.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        long long21 = iSOChronology15.add(readablePeriod18, (long) 100, 11);
        org.joda.time.Chronology chronology22 = iSOChronology15.withUTC();
        boolean boolean23 = durationFieldType14.isSupported(chronology22);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime25 = localDateTime13.withFieldAdded(durationFieldType14, 2852990);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: eras field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2022 + "'", int5 == 2022);
        org.junit.Assert.assertNotNull(property6);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "53325367" + "'", str7, "53325367");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(durationFieldType14);
        org.junit.Assert.assertNotNull(iSOChronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 100L + "'", long21 == 100L);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test02162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02162");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.minuteOfHour();
        org.joda.time.Chronology chronology4 = iSOChronology0.withUTC();
        org.joda.time.DurationField durationField5 = iSOChronology0.eras();
        java.util.TimeZone timeZone6 = null;
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forTimeZone(timeZone6);
        int int9 = dateTimeZone7.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime10 = org.joda.time.LocalDateTime.now(dateTimeZone7);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray11 = localDateTime10.getFieldTypes();
        int int12 = localDateTime10.getCenturyOfEra();
        org.joda.time.LocalDateTime.Property property13 = localDateTime10.year();
        int[] intArray15 = iSOChronology0.get((org.joda.time.ReadablePartial) localDateTime10, 1645454769600L);
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology0.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology0.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology0.minuteOfDay();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeZone7);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 20 + "'", int12 == 20);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(intArray15);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[2022, 2, 21, 53169600]");
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
    }

    @Test
    public void test02163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02163");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours(27424260);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Offset is too large");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02164");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.DateTime dateTime6 = localDateTime4.toDateTime(readableInstant5);
        java.util.TimeZone timeZone7 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forTimeZone(timeZone7);
        int int10 = dateTimeZone8.getOffset(100L);
        org.joda.time.DateTime dateTime11 = localDateTime4.toDateTime(dateTimeZone8);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime4.withYear(52);
        int int14 = localDateTime13.getWeekOfWeekyear();
        int int15 = localDateTime13.getWeekOfWeekyear();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTimeZone8);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 8 + "'", int14 == 8);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 8 + "'", int15 == 8);
    }

    @Test
    public void test02165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02165");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffset(100L);
        java.util.TimeZone timeZone4 = dateTimeZone1.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forTimeZone(timeZone4);
        java.lang.String str6 = timeZone4.getID();
        // The following exception was thrown during execution in test generation
        try {
            int int13 = timeZone4.getOffset(97, 2837601, 2899250, 2855302, 49687275, 49680496);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal era 97");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(timeZone4);
// flaky:         org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "Temps universel coordonn\351");
        org.junit.Assert.assertNotNull(dateTimeZone5);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "UTC" + "'", str6, "UTC");
    }

    @Test
    public void test02166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02166");
        java.util.TimeZone timeZone1 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        int int4 = dateTimeZone2.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime5 = org.joda.time.LocalDateTime.now(dateTimeZone2);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.DateTime dateTime7 = localDateTime5.toDateTime(readableInstant6);
        org.joda.time.Chronology chronology8 = dateTime7.getChronology();
        org.joda.time.DurationField durationField9 = chronology8.hours();
        org.joda.time.DurationField durationField10 = chronology8.months();
        org.joda.time.DateTimeField dateTimeField11 = chronology8.dayOfYear();
        java.util.TimeZone timeZone12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone12);
        int int15 = dateTimeZone13.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime16 = org.joda.time.LocalDateTime.now(dateTimeZone13);
        int[] intArray19 = new int[] { (short) 0, (short) 0 };
        int int20 = dateTimeField11.getMinimumValue((org.joda.time.ReadablePartial) localDateTime16, intArray19);
        java.lang.String str22 = dateTimeField11.getAsShortText((long) 53166088);
        java.util.Locale locale24 = java.util.Locale.JAPANESE;
        java.lang.String str25 = locale24.getDisplayLanguage();
        java.util.Locale locale26 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet27 = locale26.getExtensionKeys();
        java.lang.String str28 = locale24.getDisplayLanguage(locale26);
        java.lang.String str29 = dateTimeField11.getAsText(0L, locale26);
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime();
        java.util.TimeZone timeZone31 = null;
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forTimeZone(timeZone31);
        int int34 = dateTimeZone32.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime35 = org.joda.time.LocalDateTime.now(dateTimeZone32);
        org.joda.time.LocalDateTime localDateTime36 = org.joda.time.LocalDateTime.now(dateTimeZone32);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime36.plusSeconds((int) (short) 10);
        int[] intArray39 = localDateTime36.getValues();
        int int40 = dateTimeField11.getMaximumValue((org.joda.time.ReadablePartial) localDateTime30, intArray39);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime30.plusWeeks(70922);
        org.joda.time.chrono.ISOChronology iSOChronology43 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField44 = iSOChronology43.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField45 = iSOChronology43.centuryOfEra();
        org.joda.time.DurationField durationField46 = iSOChronology43.centuries();
        org.joda.time.DurationField durationField47 = iSOChronology43.hours();
        org.joda.time.DurationField durationField48 = iSOChronology43.years();
        org.joda.time.DurationField durationField49 = iSOChronology43.halfdays();
        org.joda.time.DateTimeField dateTimeField50 = iSOChronology43.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone51 = iSOChronology43.getZone();
        org.joda.time.LocalDateTime localDateTime52 = org.joda.time.LocalDateTime.now();
        java.util.TimeZone timeZone53 = null;
        org.joda.time.DateTimeZone dateTimeZone54 = org.joda.time.DateTimeZone.forTimeZone(timeZone53);
        int int56 = dateTimeZone54.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime57 = org.joda.time.LocalDateTime.now(dateTimeZone54);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray58 = localDateTime57.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType59 = org.joda.time.DateTimeFieldType.hourOfDay();
        int int60 = localDateTime57.get(dateTimeFieldType59);
        org.joda.time.LocalDateTime.Property property61 = localDateTime57.dayOfWeek();
        boolean boolean62 = localDateTime52.isEqual((org.joda.time.ReadablePartial) localDateTime57);
        org.joda.time.LocalDateTime.Property property63 = localDateTime57.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime65 = localDateTime57.withYearOfEra((int) (byte) 10);
        boolean boolean66 = dateTimeZone51.equals((java.lang.Object) localDateTime65);
        org.joda.time.LocalDateTime localDateTime68 = localDateTime65.withYearOfCentury((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime70 = localDateTime65.plusHours(49623);
        org.joda.time.chrono.ISOChronology iSOChronology71 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField72 = iSOChronology71.hourOfHalfday();
        java.lang.String str73 = iSOChronology71.toString();
        org.joda.time.DateTimeField dateTimeField74 = iSOChronology71.era();
        org.joda.time.DateTimeZone dateTimeZone75 = iSOChronology71.getZone();
        long long78 = dateTimeZone75.convertLocalToUTC(1645454771211L, false);
        org.joda.time.DateTime dateTime79 = localDateTime70.toDateTime(dateTimeZone75);
        org.joda.time.DateTime dateTime80 = localDateTime42.toDateTime(dateTimeZone75);
        org.joda.time.LocalDateTime localDateTime81 = new org.joda.time.LocalDateTime(1645454821203L, dateTimeZone75);
        org.junit.Assert.assertNotNull(dateTimeZone2);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeZone13);
// flaky:         org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[0, 0]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "1" + "'", str22, "1");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "japonais" + "'", str25, "japonais");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "\uc77c\ubcf8\uc5b4" + "'", str28, "\uc77c\ubcf8\uc5b4");
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "1" + "'", str29, "1");
        org.junit.Assert.assertNotNull(dateTimeZone32);
// flaky:         org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(intArray39);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[2022, 2, 21, 53325649]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 365 + "'", int40 == 365);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(iSOChronology43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(durationField46);
        org.junit.Assert.assertNotNull(durationField47);
        org.junit.Assert.assertNotNull(durationField48);
        org.junit.Assert.assertNotNull(durationField49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(dateTimeZone54);
// flaky:         org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray58);
        org.junit.Assert.assertNotNull(dateTimeFieldType59);
// flaky:         org.junit.Assert.assertTrue("'" + int60 + "' != '" + 14 + "'", int60 == 14);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(localDateTime68);
        org.junit.Assert.assertNotNull(localDateTime70);
        org.junit.Assert.assertNotNull(iSOChronology71);
        org.junit.Assert.assertNotNull(dateTimeField72);
// flaky:         org.junit.Assert.assertEquals("'" + str73 + "' != '" + "ISOChronology[UTC]" + "'", str73, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField74);
        org.junit.Assert.assertNotNull(dateTimeZone75);
// flaky:         org.junit.Assert.assertTrue("'" + long78 + "' != '" + 1645454771211L + "'", long78 == 1645454771211L);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertNotNull(dateTime80);
    }

    @Test
    public void test02167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02167");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet1 = locale0.getExtensionKeys();
        java.util.Iterator<java.lang.Character> charItor2 = charSet1.iterator();
        java.util.Locale locale3 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet4 = locale3.getExtensionKeys();
        java.util.Iterator<java.lang.Character> charItor5 = charSet4.iterator();
        boolean boolean6 = charSet1.containsAll((java.util.Collection<java.lang.Character>) charSet4);
        java.util.Locale.LanguageRange[] languageRangeArray7 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList8 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList8, languageRangeArray7);
        java.util.Locale.LanguageRange[] languageRangeArray10 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList11 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList11, languageRangeArray10);
        java.util.Locale locale13 = java.util.Locale.KOREAN;
        java.util.Locale locale14 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet15 = locale14.getExtensionKeys();
        java.util.Locale locale16 = java.util.Locale.GERMAN;
        java.util.Locale locale17 = java.util.Locale.GERMAN;
        java.lang.String str18 = locale16.getDisplayCountry(locale17);
        java.util.Locale locale19 = locale16.stripExtensions();
        java.util.Locale locale20 = java.util.Locale.JAPANESE;
        java.util.Locale locale21 = java.util.Locale.JAPANESE;
        java.util.Locale locale22 = java.util.Locale.GERMAN;
        java.util.Locale[] localeArray23 = new java.util.Locale[] { locale13, locale14, locale19, locale20, locale21, locale22 };
        java.util.ArrayList<java.util.Locale> localeList24 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList24, localeArray23);
        java.util.Locale locale26 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList11, (java.util.Collection<java.util.Locale>) localeList24);
        java.util.List<java.util.Locale> localeList27 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList8, (java.util.Collection<java.util.Locale>) localeList24);
        java.util.Locale.LanguageRange[] languageRangeArray28 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList29 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList29, languageRangeArray28);
        java.lang.String[] strArray35 = new java.lang.String[] { "jpn", "+00:00", "+00:00", "\uc77c\ubcf8\uc5b4" };
        java.util.ArrayList<java.lang.String> strList36 = new java.util.ArrayList<java.lang.String>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList36, strArray35);
        java.lang.String str38 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList29, (java.util.Collection<java.lang.String>) strList36);
        java.util.AbstractList[] abstractListArray40 = new java.util.AbstractList[2];
        @SuppressWarnings("unchecked")
        java.util.AbstractList<java.util.Locale.LanguageRange>[] languageRangeListArray41 = (java.util.AbstractList<java.util.Locale.LanguageRange>[]) abstractListArray40;
        languageRangeListArray41[0] = languageRangeList8;
        languageRangeListArray41[1] = languageRangeList29;
        java.util.AbstractList<java.util.Locale.LanguageRange>[] languageRangeListArray46 = charSet1.toArray(languageRangeListArray41);
        java.util.Locale locale47 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet48 = locale47.getExtensionKeys();
        java.util.Locale locale49 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet50 = locale49.getExtensionKeys();
        java.util.Iterator<java.lang.Character> charItor51 = charSet50.iterator();
        java.util.Locale locale52 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet53 = locale52.getExtensionKeys();
        java.util.Iterator<java.lang.Character> charItor54 = charSet53.iterator();
        boolean boolean55 = charSet50.containsAll((java.util.Collection<java.lang.Character>) charSet53);
        java.util.TimeZone timeZone56 = null;
        org.joda.time.DateTimeZone dateTimeZone57 = org.joda.time.DateTimeZone.forTimeZone(timeZone56);
        int int59 = dateTimeZone57.getOffset(100L);
        java.util.TimeZone timeZone60 = dateTimeZone57.toTimeZone();
        org.joda.time.DateTimeZone[] dateTimeZoneArray61 = new org.joda.time.DateTimeZone[] { dateTimeZone57 };
        org.joda.time.DateTimeZone[] dateTimeZoneArray62 = charSet53.toArray(dateTimeZoneArray61);
        java.util.Locale locale63 = java.util.Locale.GERMAN;
        java.lang.String str64 = locale63.getDisplayScript();
        java.lang.String str66 = locale63.getExtension('x');
        java.util.Set<java.lang.Character> charSet67 = locale63.getExtensionKeys();
        boolean boolean68 = charSet53.retainAll((java.util.Collection<java.lang.Character>) charSet67);
        java.util.Locale locale69 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet70 = locale69.getExtensionKeys();
        java.util.Iterator<java.lang.Character> charItor71 = charSet70.iterator();
        java.util.ArrayList[] arrayListArray73 = new java.util.ArrayList[0];
        @SuppressWarnings("unchecked")
        java.util.ArrayList<java.util.Locale.LanguageRange>[] languageRangeListArray74 = (java.util.ArrayList<java.util.Locale.LanguageRange>[]) arrayListArray73;
        java.util.ArrayList<java.util.Locale.LanguageRange>[] languageRangeListArray75 = charSet70.toArray((java.util.ArrayList<java.util.Locale.LanguageRange>[]) arrayListArray73);
        java.util.stream.Stream<java.lang.Character> charStream76 = charSet70.stream();
        boolean boolean78 = charSet70.contains((java.lang.Object) "\uc77c\ubcf8\uc5b4");
        boolean boolean79 = charSet53.removeAll((java.util.Collection<java.lang.Character>) charSet70);
        boolean boolean80 = charSet48.retainAll((java.util.Collection<java.lang.Character>) charSet70);
        boolean boolean81 = charSet1.containsAll((java.util.Collection<java.lang.Character>) charSet70);
        int int82 = charSet70.size();
        int int83 = charSet70.size();
        java.util.Iterator<java.lang.Character> charItor84 = charSet70.iterator();
        java.util.stream.Stream<java.lang.Character> charStream85 = charSet70.stream();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet1);
        org.junit.Assert.assertNotNull(charItor2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet4);
        org.junit.Assert.assertNotNull(charItor5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(languageRangeArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(languageRangeArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ko");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "de");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "de");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "de");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ja");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "ja");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "de");
        org.junit.Assert.assertNotNull(localeArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNull(locale26);
        org.junit.Assert.assertNotNull(localeList27);
        org.junit.Assert.assertNotNull(languageRangeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNotNull(abstractListArray40);
        org.junit.Assert.assertNotNull(languageRangeListArray41);
        org.junit.Assert.assertNotNull(languageRangeListArray46);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet48);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet50);
        org.junit.Assert.assertNotNull(charItor51);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet53);
        org.junit.Assert.assertNotNull(charItor54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(dateTimeZone57);
// flaky:         org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(timeZone60);
// flaky:         org.junit.Assert.assertEquals(timeZone60.getDisplayName(), "Temps universel coordonn\351");
        org.junit.Assert.assertNotNull(dateTimeZoneArray61);
        org.junit.Assert.assertNotNull(dateTimeZoneArray62);
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "de");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertNotNull(charSet67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet70);
        org.junit.Assert.assertNotNull(charItor71);
        org.junit.Assert.assertNotNull(arrayListArray73);
        org.junit.Assert.assertNotNull(languageRangeListArray74);
        org.junit.Assert.assertNotNull(languageRangeListArray75);
        org.junit.Assert.assertNotNull(charStream76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertNotNull(charItor84);
        org.junit.Assert.assertNotNull(charStream85);
    }

    @Test
    public void test02168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02168");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setExtension('x', "jpn");
        java.util.Locale locale4 = java.util.Locale.GERMAN;
        java.util.Locale locale5 = java.util.Locale.GERMAN;
        java.lang.String str6 = locale4.getDisplayCountry(locale5);
        java.util.Locale locale7 = locale4.stripExtensions();
        java.lang.String str8 = locale4.getDisplayName();
        java.util.Locale.Builder builder9 = builder3.setLocale(locale4);
        java.util.Locale.Builder builder10 = builder9.clearExtensions();
        java.util.Locale locale11 = java.util.Locale.GERMAN;
        java.util.Locale locale12 = java.util.Locale.GERMAN;
        java.lang.String str13 = locale11.getDisplayCountry(locale12);
        java.util.Locale locale14 = locale11.stripExtensions();
        java.lang.String str15 = locale11.getDisplayName();
        java.util.Locale.Builder builder16 = builder10.setLocale(locale11);
        java.util.Locale locale17 = builder16.build();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "de");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "de");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "allemand" + "'", str8, "allemand");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "de");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "de");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "de");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "allemand" + "'", str15, "allemand");
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "de");
    }

    @Test
    public void test02169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02169");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffset(100L);
        java.util.TimeZone timeZone4 = dateTimeZone1.toTimeZone();
        int int6 = dateTimeZone1.getOffset((-36000001L));
        java.util.TimeZone timeZone7 = dateTimeZone1.toTimeZone();
        long long11 = dateTimeZone1.convertLocalToUTC((long) 'a', false, (long) 12);
        java.util.TimeZone timeZone12 = dateTimeZone1.toTimeZone();
        // The following exception was thrown during execution in test generation
        try {
            int int19 = timeZone12.getOffset(2844904, 12, 49690454, 2810419, 19, 2815922);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal era 2844904");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(timeZone4);
// flaky:         org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "Temps universel coordonn\351");
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(timeZone7);
// flaky:         org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "Temps universel coordonn\351");
// flaky:         org.junit.Assert.assertTrue("'" + long11 + "' != '" + 97L + "'", long11 == 97L);
        org.junit.Assert.assertNotNull(timeZone12);
// flaky:         org.junit.Assert.assertEquals(timeZone12.getDisplayName(), "Temps universel coordonn\351");
    }

    @Test
    public void test02170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02170");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.DateTime dateTime6 = localDateTime4.toDateTime(readableInstant5);
        java.util.TimeZone timeZone7 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forTimeZone(timeZone7);
        int int10 = dateTimeZone8.getOffset(100L);
        org.joda.time.DateTime dateTime11 = localDateTime4.toDateTime(dateTimeZone8);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = null;
        boolean boolean13 = dateTime11.isSupported(dateTimeFieldType12);
        java.lang.String str14 = dateTime11.toString();
        java.util.TimeZone timeZone15 = null;
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forTimeZone(timeZone15);
        int int18 = dateTimeZone16.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime19 = org.joda.time.LocalDateTime.now(dateTimeZone16);
        int int20 = localDateTime19.getWeekyear();
        org.joda.time.LocalDateTime.Property property21 = localDateTime19.millisOfDay();
        java.util.Locale locale22 = java.util.Locale.GERMAN;
        java.util.Locale locale23 = java.util.Locale.GERMAN;
        java.lang.String str24 = locale22.getDisplayCountry(locale23);
        java.util.Locale locale25 = locale22.stripExtensions();
        int int26 = property21.getMaximumShortTextLength(locale22);
        org.joda.time.Interval interval27 = property21.toInterval();
        org.joda.time.LocalDateTime localDateTime29 = property21.setCopy(1);
        org.joda.time.LocalDateTime.Property property30 = localDateTime29.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime32 = localDateTime29.withMillisOfDay((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime32.withYear((-292275054));
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime36 = localDateTime32.toDateTime(dateTimeZone35);
        boolean boolean37 = dateTime11.isAfter((org.joda.time.ReadableInstant) dateTime36);
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTimeZone8);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "2022-02-21T14:48:45.821Z" + "'", str14, "2022-02-21T14:48:45.821Z");
        org.junit.Assert.assertNotNull(dateTimeZone16);
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2022 + "'", int20 == 2022);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "de");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "de");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "de");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 8 + "'", int26 == 8);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(dateTime36);
// flaky:         org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
    }

    @Test
    public void test02171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02171");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.minuteOfHour();
        org.joda.time.Chronology chronology4 = iSOChronology0.withUTC();
        org.joda.time.DurationField durationField5 = iSOChronology0.eras();
        java.util.TimeZone timeZone6 = null;
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forTimeZone(timeZone6);
        int int9 = dateTimeZone7.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime10 = org.joda.time.LocalDateTime.now(dateTimeZone7);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray11 = localDateTime10.getFieldTypes();
        int int12 = localDateTime10.getCenturyOfEra();
        org.joda.time.LocalDateTime.Property property13 = localDateTime10.year();
        int[] intArray15 = iSOChronology0.get((org.joda.time.ReadablePartial) localDateTime10, 1645454769600L);
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology0.millisOfSecond();
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = dateTimeField16.getType();
        java.lang.String str18 = dateTimeFieldType17.getName();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeZone7);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 20 + "'", int12 == 20);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(intArray15);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[2022, 2, 21, 53169600]");
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "millisOfSecond" + "'", str18, "millisOfSecond");
    }

    @Test
    public void test02172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02172");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setExtension('x', "jpn");
        java.util.Locale locale4 = java.util.Locale.GERMAN;
        java.util.Locale locale5 = java.util.Locale.GERMAN;
        java.lang.String str6 = locale4.getDisplayCountry(locale5);
        java.util.Locale locale7 = locale4.stripExtensions();
        java.lang.String str8 = locale4.getDisplayName();
        java.util.Locale.Builder builder9 = builder3.setLocale(locale4);
        java.util.Locale.Builder builder12 = builder9.setUnicodeLocaleKeyword("22", "deu");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder14 = builder9.setRegion("53305003");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed region: 53305003 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "de");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "de");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Deutsch" + "'", str8, "Deutsch");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test02173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02173");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("2812140");
        java.util.TimeZone.setDefault(timeZone1);
        org.junit.Assert.assertNotNull(timeZone1);
// flaky:         org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Greenwich Zeit");
    }

    @Test
    public void test02174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02174");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.hourOfHalfday();
        java.util.TimeZone timeZone3 = null;
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forTimeZone(timeZone3);
        int int6 = dateTimeZone4.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime7 = org.joda.time.LocalDateTime.now(dateTimeZone4);
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.DateTime dateTime9 = localDateTime7.toDateTime(readableInstant8);
        java.util.TimeZone timeZone10 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        int int13 = dateTimeZone11.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime14 = org.joda.time.LocalDateTime.now(dateTimeZone11);
        org.joda.time.LocalDateTime localDateTime15 = org.joda.time.LocalDateTime.now(dateTimeZone11);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.minusYears(2022);
        org.joda.time.LocalDateTime.Property property18 = localDateTime17.era();
        int int19 = localDateTime7.compareTo((org.joda.time.ReadablePartial) localDateTime17);
        org.joda.time.chrono.ISOChronology iSOChronology20 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField21 = iSOChronology20.hourOfHalfday();
        java.lang.String str22 = iSOChronology20.toString();
        java.util.TimeZone timeZone23 = null;
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forTimeZone(timeZone23);
        int int26 = dateTimeZone24.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime27 = org.joda.time.LocalDateTime.now(dateTimeZone24);
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.DateTime dateTime29 = localDateTime27.toDateTime(readableInstant28);
        org.joda.time.Chronology chronology30 = dateTime29.getChronology();
        org.joda.time.DurationField durationField31 = chronology30.hours();
        org.joda.time.DurationField durationField32 = chronology30.months();
        org.joda.time.DateTimeField dateTimeField33 = chronology30.dayOfYear();
        java.util.TimeZone timeZone34 = null;
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forTimeZone(timeZone34);
        int int37 = dateTimeZone35.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime38 = org.joda.time.LocalDateTime.now(dateTimeZone35);
        int[] intArray41 = new int[] { (short) 0, (short) 0 };
        int int42 = dateTimeField33.getMinimumValue((org.joda.time.ReadablePartial) localDateTime38, intArray41);
        java.lang.String str44 = dateTimeField33.getAsShortText((long) 53166088);
        java.util.TimeZone timeZone45 = null;
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.forTimeZone(timeZone45);
        int int48 = dateTimeZone46.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime49 = org.joda.time.LocalDateTime.now(dateTimeZone46);
        int int50 = localDateTime49.getWeekyear();
        org.joda.time.DurationFieldType durationFieldType51 = org.joda.time.DurationFieldType.days();
        org.joda.time.LocalDateTime localDateTime53 = localDateTime49.withFieldAdded(durationFieldType51, 53166088);
        java.util.Locale locale54 = java.util.Locale.ROOT;
        java.lang.String str55 = dateTimeField33.getAsShortText((org.joda.time.ReadablePartial) localDateTime53, locale54);
        java.util.TimeZone timeZone56 = null;
        org.joda.time.DateTimeZone dateTimeZone57 = org.joda.time.DateTimeZone.forTimeZone(timeZone56);
        int int59 = dateTimeZone57.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime60 = org.joda.time.LocalDateTime.now(dateTimeZone57);
        int int61 = localDateTime60.getWeekyear();
        boolean boolean62 = localDateTime53.isEqual((org.joda.time.ReadablePartial) localDateTime60);
        int[] intArray64 = iSOChronology20.get((org.joda.time.ReadablePartial) localDateTime60, (long) 53166088);
        iSOChronology0.validate((org.joda.time.ReadablePartial) localDateTime7, intArray64);
        org.joda.time.DateTimeField dateTimeField66 = iSOChronology0.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone67 = iSOChronology0.getZone();
        org.joda.time.DateTimeField dateTimeField68 = iSOChronology0.minuteOfDay();
        org.joda.time.DurationField durationField69 = iSOChronology0.months();
        // The following exception was thrown during execution in test generation
        try {
            long long74 = iSOChronology0.getDateTimeMillis(49681464, 49696526, 53307, 190);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 49696526 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeZone4);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone11);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(iSOChronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "ISOChronology[UTC]" + "'", str22, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeZone24);
// flaky:         org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeZone35);
// flaky:         org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[0, 0]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
// flaky:         org.junit.Assert.assertEquals("'" + str44 + "' != '" + "1" + "'", str44, "1");
        org.junit.Assert.assertNotNull(dateTimeZone46);
// flaky:         org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2022 + "'", int50 == 2022);
        org.junit.Assert.assertNotNull(durationFieldType51);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "");
// flaky:         org.junit.Assert.assertEquals("'" + str55 + "' != '" + "346" + "'", str55, "346");
        org.junit.Assert.assertNotNull(dateTimeZone57);
// flaky:         org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 2022 + "'", int61 == 2022);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(intArray64);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[1970, 1, 1, 53166088]");
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertNotNull(dateTimeZone67);
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertNotNull(durationField69);
    }

    @Test
    public void test02175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02175");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.hourOfHalfday();
        java.lang.String str2 = iSOChronology0.toString();
        org.joda.time.DurationField durationField3 = iSOChronology0.centuries();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.halfdayOfDay();
        long long8 = iSOChronology0.add((long) 53166088, (long) 22, 36);
        org.joda.time.DateTimeField dateTimeField9 = iSOChronology0.minuteOfHour();
        int int10 = dateTimeField9.getMaximumValue();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ISOChronology[UTC]" + "'", str2, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 53166880L + "'", long8 == 53166880L);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 59 + "'", int10 == 59);
    }

    @Test
    public void test02176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02176");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.hourOfHalfday();
        long long7 = iSOChronology0.getDateTimeMillis((-1), 8, 3, 365);
        org.joda.time.DurationField durationField8 = iSOChronology0.months();
        org.joda.time.DateTimeField dateTimeField9 = iSOChronology0.yearOfEra();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology0.dayOfWeek();
        java.util.TimeZone timeZone11 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        int int14 = dateTimeZone12.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime15 = org.joda.time.LocalDateTime.now(dateTimeZone12);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray16 = localDateTime15.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.hourOfDay();
        int int18 = localDateTime15.get(dateTimeFieldType17);
        org.joda.time.LocalDateTime.Property property19 = localDateTime15.dayOfWeek();
        org.joda.time.LocalDateTime.Property property20 = localDateTime15.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime21 = property20.getLocalDateTime();
        java.util.TimeZone timeZone23 = null;
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forTimeZone(timeZone23);
        int int26 = dateTimeZone24.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime27 = org.joda.time.LocalDateTime.now(dateTimeZone24);
        org.joda.time.LocalDateTime localDateTime28 = org.joda.time.LocalDateTime.now(dateTimeZone24);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.plusSeconds((int) (short) 10);
        int[] intArray31 = localDateTime28.getValues();
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray33 = dateTimeField10.addWrapPartial((org.joda.time.ReadablePartial) localDateTime21, 27, intArray31, 2027);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 27");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
// flaky:         org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-62180301599635L) + "'", long7 == (-62180301599635L));
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeZone12);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 36000000 + "'", int14 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray16);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(dateTimeZone24);
// flaky:         org.junit.Assert.assertTrue("'" + int26 + "' != '" + 36000000 + "'", int26 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(intArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[2022, 2, 22, 2926191]");
    }

    @Test
    public void test02177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02177");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(64122284, 67, 53307053, 2719, 53267);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2719 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02178");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.yearOfEra();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology0.dayOfYear();
        java.util.TimeZone timeZone6 = null;
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forTimeZone(timeZone6);
        java.lang.String str9 = dateTimeZone7.getName(31556995199999L);
        java.lang.String str10 = dateTimeZone7.getID();
        org.joda.time.Chronology chronology11 = iSOChronology0.withZone(dateTimeZone7);
        org.joda.time.DurationField durationField12 = iSOChronology0.years();
        long long14 = durationField12.getValueAsLong(1644850052966L);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeZone7);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+10:00" + "'", str9, "+10:00");
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+10:00" + "'", str10, "+10:00");
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 52L + "'", long14 == 52L);
    }

    @Test
    public void test02179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02179");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("\uae30\uc6d0\uc804");
        timeZone1.setRawOffset(292278993);
        timeZone1.setID("");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str8 = timeZone1.getDisplayName(true, 53308413);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal style: 53308413");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "GMT+81:11");
    }

    @Test
    public void test02180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02180");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.minuteOfDay();
        org.joda.time.DurationField durationField2 = iSOChronology0.hours();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.era();
        org.joda.time.ReadablePartial readablePartial5 = null;
        java.util.TimeZone timeZone7 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forTimeZone(timeZone7);
        int int10 = dateTimeZone8.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now(dateTimeZone8);
        int int12 = localDateTime11.getWeekyear();
        org.joda.time.LocalDateTime.Property property13 = localDateTime11.millisOfDay();
        java.lang.String str14 = property13.getAsString();
        int int15 = property13.getLeapAmount();
        org.joda.time.DurationField durationField16 = property13.getLeapDurationField();
        org.joda.time.LocalDateTime localDateTime18 = property13.addWrapFieldToCopy(20);
        java.util.Locale locale19 = java.util.Locale.TAIWAN;
        java.lang.String str20 = property13.getAsText(locale19);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str21 = dateTimeField4.getAsText(readablePartial5, 67, locale19);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 67");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeZone8);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 36000000 + "'", int10 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2022 + "'", int12 == 2022);
        org.junit.Assert.assertNotNull(property13);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "2926552" + "'", str14, "2926552");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNull(durationField16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "zh_TW");
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "2926552" + "'", str20, "2926552");
    }

    @Test
    public void test02181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02181");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.hourOfHalfday();
        java.lang.String str2 = iSOChronology0.toString();
        org.joda.time.DurationField durationField3 = iSOChronology0.eras();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.year();
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology0.hourOfDay();
        org.joda.time.DateTimeField dateTimeField6 = iSOChronology0.millisOfDay();
        org.joda.time.DateTimeField dateTimeField7 = iSOChronology0.dayOfYear();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ISOChronology[+10:00]" + "'", str2, "ISOChronology[+10:00]");
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
    }

    @Test
    public void test02182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02182");
        org.joda.time.chrono.ISOChronology iSOChronology7 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField8 = iSOChronology7.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField9 = iSOChronology7.centuryOfEra();
        java.lang.String str10 = iSOChronology7.toString();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology7.yearOfEra();
        org.joda.time.DurationField durationField12 = iSOChronology7.eras();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((int) (short) 0, 49682709, 36000000, 41, 845, 5, 2807052, (org.joda.time.Chronology) iSOChronology7);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 41 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(iSOChronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "ISOChronology[+10:00]" + "'", str10, "ISOChronology[+10:00]");
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
    }

    @Test
    public void test02183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02183");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        int int5 = localDateTime4.getWeekyear();
        org.joda.time.LocalDateTime.Property property6 = localDateTime4.minuteOfHour();
        int int7 = localDateTime4.getHourOfDay();
        java.util.TimeZone timeZone8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        int int11 = dateTimeZone9.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime12 = org.joda.time.LocalDateTime.now(dateTimeZone9);
        int int13 = localDateTime12.getWeekyear();
        org.joda.time.LocalDateTime.Property property14 = localDateTime12.millisOfDay();
        java.util.TimeZone timeZone15 = null;
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forTimeZone(timeZone15);
        int int18 = dateTimeZone16.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime19 = org.joda.time.LocalDateTime.now(dateTimeZone16);
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.DateTime dateTime21 = localDateTime19.toDateTime(readableInstant20);
        java.util.TimeZone timeZone22 = null;
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        int int25 = dateTimeZone23.getOffset(100L);
        org.joda.time.DateTime dateTime26 = localDateTime19.toDateTime(dateTimeZone23);
        int int27 = property14.compareTo((org.joda.time.ReadableInstant) dateTime26);
        int int28 = property14.get();
        org.joda.time.LocalDateTime localDateTime30 = property14.addWrapFieldToCopy(454550);
        org.joda.time.LocalDateTime localDateTime32 = property14.addToCopy(380328273986263L);
        org.joda.time.LocalDateTime localDateTime33 = property14.roundHalfEvenCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = property14.getFieldType();
        org.joda.time.LocalDateTime.Property property35 = localDateTime4.property(dateTimeFieldType34);
        org.joda.time.ReadableInstant readableInstant36 = null;
        int int37 = property35.getDifference(readableInstant36);
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 36000000 + "'", int3 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2022 + "'", int5 == 2022);
        org.junit.Assert.assertNotNull(property6);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone9);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 36000000 + "'", int11 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2022 + "'", int13 == 2022);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTimeZone16);
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + 36000000 + "'", int18 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTimeZone23);
// flaky:         org.junit.Assert.assertTrue("'" + int25 + "' != '" + 36000000 + "'", int25 == 36000000);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2926669 + "'", int28 == 2926669);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertNotNull(property35);
// flaky:         org.junit.Assert.assertTrue("'" + int37 + "' != '" + 36000000 + "'", int37 == 36000000);
    }

    @Test
    public void test02184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02184");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.centuryOfEra();
        org.joda.time.DurationField durationField3 = iSOChronology0.centuries();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.millisOfDay();
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology0.hourOfDay();
        java.lang.Class<?> wildcardClass6 = iSOChronology0.getClass();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test02185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02185");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        int int5 = localDateTime4.getDayOfWeek();
        java.util.TimeZone timeZone6 = null;
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forTimeZone(timeZone6);
        int int9 = dateTimeZone7.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime10 = org.joda.time.LocalDateTime.now(dateTimeZone7);
        int int11 = localDateTime10.getWeekyear();
        org.joda.time.LocalDateTime.Property property12 = localDateTime10.minuteOfHour();
        org.joda.time.LocalDateTime.Property property13 = localDateTime10.dayOfYear();
        java.util.TimeZone timeZone14 = null;
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forTimeZone(timeZone14);
        int int17 = dateTimeZone15.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime18 = org.joda.time.LocalDateTime.now(dateTimeZone15);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray19 = localDateTime18.getFieldTypes();
        int int20 = property13.compareTo((org.joda.time.ReadablePartial) localDateTime18);
        int int21 = localDateTime18.getCenturyOfEra();
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.LocalDateTime localDateTime23 = localDateTime18.plus(readablePeriod22);
        org.joda.time.LocalDateTime.Property property24 = localDateTime18.hourOfDay();
        org.joda.time.LocalDateTime localDateTime26 = localDateTime18.minusYears(2818);
        boolean boolean27 = localDateTime4.isEqual((org.joda.time.ReadablePartial) localDateTime26);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime26.plusMinutes(2805);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime26.plusHours(97);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime33 = localDateTime31.withCenturyOfEra(280424122);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 280424122 for centuryOfEra must be in the range [0,2922789]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 36000000 + "'", int3 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime4);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2 + "'", int5 == 2);
        org.junit.Assert.assertNotNull(dateTimeZone7);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 36000000 + "'", int9 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2022 + "'", int11 == 2022);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
// flaky:         org.junit.Assert.assertTrue("'" + int17 + "' != '" + 36000000 + "'", int17 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 20 + "'", int21 == 20);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
    }

    @Test
    public void test02186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02186");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray5 = localDateTime4.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.hourOfDay();
        int int7 = localDateTime4.get(dateTimeFieldType6);
        org.joda.time.LocalDateTime.Property property8 = localDateTime4.dayOfWeek();
        boolean boolean9 = property8.isLeap();
        long long10 = property8.remainder();
        org.joda.time.LocalDateTime localDateTime11 = property8.getLocalDateTime();
        org.joda.time.Chronology chronology12 = localDateTime11.getChronology();
        java.util.TimeZone timeZone13 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forTimeZone(timeZone13);
        int int16 = dateTimeZone14.getOffset(100L);
        java.util.TimeZone timeZone17 = dateTimeZone14.toTimeZone();
        java.lang.String str18 = dateTimeZone14.getID();
        java.util.TimeZone timeZone19 = dateTimeZone14.toTimeZone();
        long long21 = dateTimeZone14.nextTransition((long) 100);
        java.lang.String str23 = dateTimeZone14.getNameKey(1645454778469L);
        org.joda.time.DateTime dateTime24 = localDateTime11.toDateTime(dateTimeZone14);
        java.lang.String str25 = dateTimeZone14.getID();
        java.lang.String str26 = dateTimeZone14.toString();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 36000000 + "'", int3 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray5);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long10 + "' != '" + 2926963L + "'", long10 == 2926963L);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
// flaky:         org.junit.Assert.assertTrue("'" + int16 + "' != '" + 36000000 + "'", int16 == 36000000);
        org.junit.Assert.assertNotNull(timeZone17);
// flaky:         org.junit.Assert.assertEquals(timeZone17.getDisplayName(), "GMT+10:00");
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+10:00" + "'", str18, "+10:00");
        org.junit.Assert.assertNotNull(timeZone19);
// flaky:         org.junit.Assert.assertEquals(timeZone19.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 100L + "'", long21 == 100L);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(dateTime24);
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "+10:00" + "'", str25, "+10:00");
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "+10:00" + "'", str26, "+10:00");
    }

    @Test
    public void test02187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02187");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        int int5 = localDateTime4.getWeekyear();
        org.joda.time.LocalDateTime.Property property6 = localDateTime4.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime4.minusMillis(2022);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.plus(readablePeriod9);
        org.joda.time.LocalDateTime.Property property11 = localDateTime10.era();
        java.lang.String str12 = property11.getAsString();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 36000000 + "'", int3 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2022 + "'", int5 == 2022);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "1" + "'", str12, "1");
    }

    @Test
    public void test02188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02188");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.centuryOfEra();
        org.joda.time.DurationField durationField3 = iSOChronology0.seconds();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology0.hourOfHalfday();
        java.util.TimeZone timeZone6 = null;
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forTimeZone(timeZone6);
        int int9 = dateTimeZone7.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime10 = org.joda.time.LocalDateTime.now(dateTimeZone7);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray11 = localDateTime10.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.hourOfDay();
        int int13 = localDateTime10.get(dateTimeFieldType12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime10.minusWeeks(1);
        long long17 = iSOChronology0.set((org.joda.time.ReadablePartial) localDateTime15, (long) 0);
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology0.secondOfDay();
        java.util.TimeZone timeZone19 = null;
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forTimeZone(timeZone19);
        int int22 = dateTimeZone20.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime23 = org.joda.time.LocalDateTime.now(dateTimeZone20);
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.DateTime dateTime25 = localDateTime23.toDateTime(readableInstant24);
        org.joda.time.Chronology chronology26 = dateTime25.getChronology();
        org.joda.time.DurationField durationField27 = chronology26.hours();
        org.joda.time.DurationField durationField28 = chronology26.months();
        org.joda.time.DateTimeField dateTimeField29 = chronology26.dayOfYear();
        java.util.TimeZone timeZone30 = null;
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forTimeZone(timeZone30);
        int int33 = dateTimeZone31.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime34 = org.joda.time.LocalDateTime.now(dateTimeZone31);
        int[] intArray37 = new int[] { (short) 0, (short) 0 };
        int int38 = dateTimeField29.getMinimumValue((org.joda.time.ReadablePartial) localDateTime34, intArray37);
        int int40 = dateTimeField29.getMinimumValue((long) 100);
        java.util.TimeZone timeZone41 = null;
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forTimeZone(timeZone41);
        int int44 = dateTimeZone42.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime45 = org.joda.time.LocalDateTime.now(dateTimeZone42);
        int int46 = localDateTime45.getWeekyear();
        org.joda.time.LocalDateTime.Property property47 = localDateTime45.minuteOfHour();
        int int48 = dateTimeField29.getMaximumValue((org.joda.time.ReadablePartial) localDateTime45);
        org.joda.time.LocalDateTime localDateTime50 = localDateTime45.withCenturyOfEra(1);
        org.joda.time.LocalDateTime.Property property51 = localDateTime45.weekyear();
        java.util.TimeZone timeZone52 = null;
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.forTimeZone(timeZone52);
        int int55 = dateTimeZone53.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime56 = org.joda.time.LocalDateTime.now(dateTimeZone53);
        org.joda.time.ReadableInstant readableInstant57 = null;
        org.joda.time.DateTime dateTime58 = localDateTime56.toDateTime(readableInstant57);
        java.util.TimeZone timeZone59 = null;
        org.joda.time.DateTimeZone dateTimeZone60 = org.joda.time.DateTimeZone.forTimeZone(timeZone59);
        int int62 = dateTimeZone60.getOffset(100L);
        org.joda.time.DateTime dateTime63 = localDateTime56.toDateTime(dateTimeZone60);
        org.joda.time.LocalDateTime.Property property64 = localDateTime56.monthOfYear();
        java.lang.String str65 = property64.getAsText();
        org.joda.time.LocalDateTime localDateTime66 = property64.roundCeilingCopy();
        int int67 = localDateTime45.compareTo((org.joda.time.ReadablePartial) localDateTime66);
        java.util.Locale.Builder builder68 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder71 = builder68.setExtension('x', "jpn");
        java.util.Locale locale72 = builder71.build();
        java.util.Locale.Builder builder73 = builder71.clear();
        java.util.Locale locale74 = builder73.build();
        java.util.Locale.Builder builder75 = builder73.clearExtensions();
        java.util.Locale.Category category76 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale77 = java.util.Locale.getDefault(category76);
        java.util.Locale.Builder builder78 = builder73.setLocale(locale77);
        java.lang.String str79 = dateTimeField18.getAsShortText((org.joda.time.ReadablePartial) localDateTime66, locale77);
        org.joda.time.LocalDateTime.Property property80 = localDateTime66.hourOfDay();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeZone7);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 36000000 + "'", int9 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray11);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(localDateTime15);
// flaky:         org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1644850127096L + "'", long17 == 1644850127096L);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeZone20);
// flaky:         org.junit.Assert.assertTrue("'" + int22 + "' != '" + 36000000 + "'", int22 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeZone31);
// flaky:         org.junit.Assert.assertTrue("'" + int33 + "' != '" + 36000000 + "'", int33 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[0, 0]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(dateTimeZone42);
// flaky:         org.junit.Assert.assertTrue("'" + int44 + "' != '" + 36000000 + "'", int44 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2022 + "'", int46 == 2022);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 365 + "'", int48 == 365);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(dateTimeZone53);
// flaky:         org.junit.Assert.assertTrue("'" + int55 + "' != '" + 36000000 + "'", int55 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTimeZone60);
// flaky:         org.junit.Assert.assertTrue("'" + int62 + "' != '" + 36000000 + "'", int62 == 36000000);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(property64);
// flaky:         org.junit.Assert.assertEquals("'" + str65 + "' != '" + "February" + "'", str65, "February");
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-1) + "'", int67 == (-1));
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(locale72);
        org.junit.Assert.assertEquals(locale72.toString(), "");
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(locale74);
        org.junit.Assert.assertEquals(locale74.toString(), "");
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertTrue("'" + category76 + "' != '" + java.util.Locale.Category.FORMAT + "'", category76.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale77);
// flaky:         org.junit.Assert.assertEquals(locale77.toString(), "en");
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "0" + "'", str79, "0");
        org.junit.Assert.assertNotNull(property80);
    }

    @Test
    public void test02189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02189");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.yearOfEra();
        org.joda.time.DurationField durationField3 = iSOChronology0.minutes();
        org.joda.time.DurationField durationField4 = iSOChronology0.months();
        org.joda.time.DurationField durationField5 = iSOChronology0.weekyears();
        org.joda.time.DateTimeField dateTimeField6 = iSOChronology0.hourOfDay();
        org.joda.time.DurationField durationField7 = iSOChronology0.minutes();
        org.joda.time.DateTimeField dateTimeField8 = iSOChronology0.secondOfDay();
        org.joda.time.DateTimeField dateTimeField9 = iSOChronology0.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone10 = iSOChronology0.getZone();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology0.minuteOfHour();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTimeField11);
    }

    @Test
    public void test02190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02190");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.centuryOfEra();
        org.joda.time.DurationField durationField3 = iSOChronology0.centuries();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.millisOfDay();
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology0.hourOfDay();
        org.joda.time.DateTimeField dateTimeField6 = iSOChronology0.secondOfMinute();
        org.joda.time.ReadablePartial readablePartial7 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray9 = iSOChronology0.get(readablePartial7, (long) 50);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
    }

    @Test
    public void test02191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02191");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        int int5 = localDateTime4.getDayOfYear();
        java.util.TimeZone timeZone6 = null;
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forTimeZone(timeZone6);
        int int9 = dateTimeZone7.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime10 = org.joda.time.LocalDateTime.now(dateTimeZone7);
        int int11 = localDateTime10.getWeekyear();
        org.joda.time.LocalDateTime.Property property12 = localDateTime10.minuteOfHour();
        org.joda.time.LocalDateTime.Property property13 = localDateTime10.dayOfYear();
        java.util.TimeZone timeZone14 = null;
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forTimeZone(timeZone14);
        int int17 = dateTimeZone15.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime18 = org.joda.time.LocalDateTime.now(dateTimeZone15);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray19 = localDateTime18.getFieldTypes();
        int int20 = property13.compareTo((org.joda.time.ReadablePartial) localDateTime18);
        int int21 = localDateTime18.getYearOfCentury();
        org.joda.time.LocalDateTime.Property property22 = localDateTime18.millisOfDay();
        org.joda.time.LocalDateTime.Property property23 = localDateTime18.era();
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = property23.getFieldType();
        boolean boolean25 = localDateTime4.isSupported(dateTimeFieldType24);
        org.joda.time.chrono.ISOChronology iSOChronology26 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField27 = iSOChronology26.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField28 = iSOChronology26.centuryOfEra();
        org.joda.time.DurationField durationField29 = iSOChronology26.seconds();
        org.joda.time.DateTimeField dateTimeField30 = dateTimeFieldType24.getField((org.joda.time.Chronology) iSOChronology26);
        int int32 = dateTimeField30.getLeapAmount((long) 53271023);
        java.util.Locale locale35 = java.util.Locale.JAPANESE;
        java.lang.String str36 = locale35.getDisplayLanguage();
        java.lang.String str37 = locale35.getISO3Language();
        java.lang.String str38 = locale35.getDisplayVariant();
        // The following exception was thrown during execution in test generation
        try {
            long long39 = dateTimeField30.set(1645454880000L, "2919901", locale35);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2919901\" for era is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 36000000 + "'", int3 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime4);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 53 + "'", int5 == 53);
        org.junit.Assert.assertNotNull(dateTimeZone7);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 36000000 + "'", int9 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2022 + "'", int11 == 2022);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
// flaky:         org.junit.Assert.assertTrue("'" + int17 + "' != '" + 36000000 + "'", int17 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 22 + "'", int21 == 22);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(iSOChronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "ja");
// flaky:         org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Japanese" + "'", str36, "Japanese");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "jpn" + "'", str37, "jpn");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
    }

    @Test
    public void test02192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02192");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setExtension('x', "jpn");
        java.util.Locale locale4 = builder0.build();
        java.util.Locale locale5 = builder0.build();
        java.util.Locale.Builder builder8 = builder0.setExtension('u', "52");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder11 = builder0.setExtension('u', "2022-02-21t13:47:02.229 (2843303)");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed extension value: 21t13:47:02.229 (2843303) [at index 8]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "");
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test02193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02193");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        int int5 = localDateTime4.getWeekyear();
        org.joda.time.LocalDateTime.Property property6 = localDateTime4.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime4.minusMillis(2022);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.plus(readablePeriod9);
        org.joda.time.LocalDateTime.Property property11 = localDateTime10.era();
        java.lang.String str12 = property11.getAsText();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 36000000 + "'", int3 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2022 + "'", int5 == 2022);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "AD" + "'", str12, "AD");
    }

    @Test
    public void test02194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02194");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.yearOfEra();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology0.yearOfEra();
        org.joda.time.DateTimeField dateTimeField6 = iSOChronology0.clockhourOfDay();
        long long9 = dateTimeField6.getDifferenceAsLong((-457060L), (long) 631);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
    }

    @Test
    public void test02195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02195");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime(49696526, 64122321, 53195994, 2837601, 280424122, (int) (short) -1, 935);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2837601 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02196");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.DateTime dateTime6 = localDateTime4.toDateTime(readableInstant5);
        org.joda.time.Chronology chronology7 = dateTime6.getChronology();
        org.joda.time.DurationField durationField8 = chronology7.hours();
        org.joda.time.DurationField durationField9 = chronology7.months();
        org.joda.time.DateTimeField dateTimeField10 = chronology7.dayOfYear();
        java.util.TimeZone timeZone11 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        int int14 = dateTimeZone12.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime15 = org.joda.time.LocalDateTime.now(dateTimeZone12);
        int[] intArray18 = new int[] { (short) 0, (short) 0 };
        int int19 = dateTimeField10.getMinimumValue((org.joda.time.ReadablePartial) localDateTime15, intArray18);
        java.lang.String str21 = dateTimeField10.getAsShortText((long) 53166088);
        java.util.TimeZone timeZone22 = null;
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        int int25 = dateTimeZone23.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime26 = org.joda.time.LocalDateTime.now(dateTimeZone23);
        int int27 = localDateTime26.getWeekyear();
        org.joda.time.DurationFieldType durationFieldType28 = org.joda.time.DurationFieldType.days();
        org.joda.time.LocalDateTime localDateTime30 = localDateTime26.withFieldAdded(durationFieldType28, 53166088);
        java.util.Locale locale31 = java.util.Locale.ROOT;
        java.lang.String str32 = dateTimeField10.getAsShortText((org.joda.time.ReadablePartial) localDateTime30, locale31);
        java.util.TimeZone timeZone33 = null;
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forTimeZone(timeZone33);
        int int36 = dateTimeZone34.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime37 = org.joda.time.LocalDateTime.now(dateTimeZone34);
        int int38 = localDateTime37.getWeekyear();
        boolean boolean39 = localDateTime30.isEqual((org.joda.time.ReadablePartial) localDateTime37);
        org.joda.time.LocalDateTime localDateTime41 = localDateTime30.plusDays(11);
        org.joda.time.LocalDateTime localDateTime43 = localDateTime30.plusMonths(817);
        int int44 = localDateTime30.getMinuteOfHour();
        java.util.TimeZone timeZone45 = null;
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.forTimeZone(timeZone45);
        int int48 = dateTimeZone46.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime49 = org.joda.time.LocalDateTime.now(dateTimeZone46);
        org.joda.time.ReadableInstant readableInstant50 = null;
        org.joda.time.DateTime dateTime51 = localDateTime49.toDateTime(readableInstant50);
        org.joda.time.Chronology chronology52 = dateTime51.getChronology();
        org.joda.time.DurationField durationField53 = chronology52.hours();
        org.joda.time.DurationField durationField54 = chronology52.months();
        org.joda.time.DateTimeField dateTimeField55 = chronology52.dayOfYear();
        java.util.TimeZone timeZone56 = null;
        org.joda.time.DateTimeZone dateTimeZone57 = org.joda.time.DateTimeZone.forTimeZone(timeZone56);
        int int59 = dateTimeZone57.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime60 = org.joda.time.LocalDateTime.now(dateTimeZone57);
        int[] intArray63 = new int[] { (short) 0, (short) 0 };
        int int64 = dateTimeField55.getMinimumValue((org.joda.time.ReadablePartial) localDateTime60, intArray63);
        int int66 = dateTimeField55.getMinimumValue((long) 100);
        java.util.TimeZone timeZone67 = null;
        org.joda.time.DateTimeZone dateTimeZone68 = org.joda.time.DateTimeZone.forTimeZone(timeZone67);
        int int70 = dateTimeZone68.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime71 = org.joda.time.LocalDateTime.now(dateTimeZone68);
        int int72 = localDateTime71.getWeekyear();
        org.joda.time.LocalDateTime.Property property73 = localDateTime71.minuteOfHour();
        int int74 = dateTimeField55.getMaximumValue((org.joda.time.ReadablePartial) localDateTime71);
        org.joda.time.LocalDateTime localDateTime76 = localDateTime71.withCenturyOfEra(1);
        org.joda.time.LocalDateTime.Property property77 = localDateTime76.hourOfDay();
        org.joda.time.ReadableDuration readableDuration78 = null;
        org.joda.time.LocalDateTime localDateTime79 = localDateTime76.plus(readableDuration78);
        boolean boolean80 = localDateTime30.isEqual((org.joda.time.ReadablePartial) localDateTime79);
        org.joda.time.LocalDateTime.Property property81 = localDateTime30.year();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 36000000 + "'", int3 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeZone12);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 36000000 + "'", int14 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[0, 0]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "2" + "'", str21, "2");
        org.junit.Assert.assertNotNull(dateTimeZone23);
// flaky:         org.junit.Assert.assertTrue("'" + int25 + "' != '" + 36000000 + "'", int25 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2022 + "'", int27 == 2022);
        org.junit.Assert.assertNotNull(durationFieldType28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "");
// flaky:         org.junit.Assert.assertEquals("'" + str32 + "' != '" + "347" + "'", str32, "347");
        org.junit.Assert.assertNotNull(dateTimeZone34);
// flaky:         org.junit.Assert.assertTrue("'" + int36 + "' != '" + 36000000 + "'", int36 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2022 + "'", int38 == 2022);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(localDateTime43);
// flaky:         org.junit.Assert.assertTrue("'" + int44 + "' != '" + 48 + "'", int44 == 48);
        org.junit.Assert.assertNotNull(dateTimeZone46);
// flaky:         org.junit.Assert.assertTrue("'" + int48 + "' != '" + 36000000 + "'", int48 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(durationField53);
        org.junit.Assert.assertNotNull(durationField54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(dateTimeZone57);
// flaky:         org.junit.Assert.assertTrue("'" + int59 + "' != '" + 36000000 + "'", int59 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[0, 0]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertNotNull(dateTimeZone68);
// flaky:         org.junit.Assert.assertTrue("'" + int70 + "' != '" + 36000000 + "'", int70 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 2022 + "'", int72 == 2022);
        org.junit.Assert.assertNotNull(property73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 365 + "'", int74 == 365);
        org.junit.Assert.assertNotNull(localDateTime76);
        org.junit.Assert.assertNotNull(property77);
        org.junit.Assert.assertNotNull(localDateTime79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(property81);
    }

    @Test
    public void test02197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02197");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.weekOfWeekyear();
        java.util.TimeZone timeZone2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone2);
        java.lang.String str5 = dateTimeZone3.getName(31556995199999L);
        org.joda.time.Chronology chronology6 = iSOChronology0.withZone(dateTimeZone3);
        org.joda.time.DateTimeField dateTimeField7 = iSOChronology0.halfdayOfDay();
        org.joda.time.DurationField durationField8 = iSOChronology0.weeks();
        org.joda.time.DateTimeField dateTimeField9 = iSOChronology0.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology0.minuteOfHour();
        org.joda.time.DurationField durationField11 = iSOChronology0.weekyears();
        // The following exception was thrown during execution in test generation
        try {
            long long14 = durationField11.subtract(1644850026259L, 1644850090105L);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Value cannot fit in an int: -1644850090105");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeZone3);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+10:00" + "'", str5, "+10:00");
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
    }

    @Test
    public void test02198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02198");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.chrono.ISOChronology iSOChronology1 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology1.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology1.centuryOfEra();
        org.joda.time.DurationField durationField4 = iSOChronology1.seconds();
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology1.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField6 = iSOChronology1.yearOfEra();
        org.joda.time.DateTimeField dateTimeField7 = iSOChronology1.monthOfYear();
        boolean boolean8 = dateTimeFieldType0.isSupported((org.joda.time.Chronology) iSOChronology1);
        org.joda.time.chrono.ISOChronology iSOChronology9 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology9.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology9.yearOfEra();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology9.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField13 = iSOChronology9.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology9.dayOfYear();
        java.util.TimeZone timeZone15 = null;
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forTimeZone(timeZone15);
        java.lang.String str18 = dateTimeZone16.getName(31556995199999L);
        java.lang.String str19 = dateTimeZone16.getID();
        org.joda.time.Chronology chronology20 = iSOChronology9.withZone(dateTimeZone16);
        org.joda.time.DurationField durationField21 = iSOChronology9.weeks();
        boolean boolean22 = dateTimeFieldType0.isSupported((org.joda.time.Chronology) iSOChronology9);
        org.joda.time.DateTimeField dateTimeField23 = iSOChronology9.clockhourOfHalfday();
        // The following exception was thrown during execution in test generation
        try {
            int int26 = dateTimeField23.getDifference(44931427056000000L, 1645454919518L);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Value cannot fit in an int: 12480494889");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(iSOChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(iSOChronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeZone16);
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+10:00" + "'", str18, "+10:00");
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "+10:00" + "'", str19, "+10:00");
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(dateTimeField23);
    }

    @Test
    public void test02199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02199");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(360, 99);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minutes out of range: 99");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02200");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime(49624656, 53324, 42, 49678046, 845, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 49678046 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02201");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.centuryOfEra();
        org.joda.time.DurationField durationField3 = iSOChronology0.seconds();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology0.hourOfHalfday();
        long long9 = iSOChronology0.add((long) (short) 100, 1644849973425L, 2720);
        java.lang.String str10 = iSOChronology0.toString();
        java.lang.String str11 = iSOChronology0.toString();
        org.joda.time.DurationField durationField12 = iSOChronology0.weeks();
        java.util.TimeZone timeZone13 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forTimeZone(timeZone13);
        int int16 = dateTimeZone14.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime17 = org.joda.time.LocalDateTime.now(dateTimeZone14);
        org.joda.time.LocalDateTime localDateTime18 = org.joda.time.LocalDateTime.now(dateTimeZone14);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.plusSeconds((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime18.minusWeeks((int) (byte) 10);
        java.util.TimeZone timeZone23 = null;
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forTimeZone(timeZone23);
        int int26 = dateTimeZone24.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime27 = org.joda.time.LocalDateTime.now(dateTimeZone24);
        org.joda.time.LocalDateTime localDateTime28 = org.joda.time.LocalDateTime.now(dateTimeZone24);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.plusSeconds((int) (short) 10);
        int int31 = localDateTime28.size();
        boolean boolean32 = localDateTime22.isBefore((org.joda.time.ReadablePartial) localDateTime28);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime28.withMillisOfSecond(52);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime34.plusMinutes(0);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime34.plusDays(53166088);
        int int39 = localDateTime38.getDayOfYear();
        org.joda.time.LocalDateTime.Property property40 = localDateTime38.era();
        long long42 = iSOChronology0.set((org.joda.time.ReadablePartial) localDateTime38, (-139813307279999990L));
        org.joda.time.DateTimeField dateTimeField43 = iSOChronology0.hourOfHalfday();
        // The following exception was thrown during execution in test generation
        try {
            long long47 = iSOChronology0.add((-62180621999635L), 1645454895458L, 53284647);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows a long: 1645454895458 * 53284647");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 4473991927716100L + "'", long9 == 4473991927716100L);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "ISOChronology[+10:00]" + "'", str10, "ISOChronology[+10:00]");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "ISOChronology[+10:00]" + "'", str11, "ISOChronology[+10:00]");
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
// flaky:         org.junit.Assert.assertTrue("'" + int16 + "' != '" + 36000000 + "'", int16 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(dateTimeZone24);
// flaky:         org.junit.Assert.assertTrue("'" + int26 + "' != '" + 36000000 + "'", int26 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 4 + "'", int31 == 4);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(localDateTime38);
// flaky:         org.junit.Assert.assertTrue("'" + int39 + "' != '" + 347 + "'", int39 == 347);
        org.junit.Assert.assertNotNull(property40);
// flaky:         org.junit.Assert.assertTrue("'" + long42 + "' != '" + 4595195458127052L + "'", long42 == 4595195458127052L);
        org.junit.Assert.assertNotNull(dateTimeField43);
    }

    @Test
    public void test02202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02202");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setExtension('x', "jpn");
        java.util.Locale locale4 = java.util.Locale.GERMAN;
        java.util.Locale locale5 = java.util.Locale.GERMAN;
        java.lang.String str6 = locale4.getDisplayCountry(locale5);
        java.util.Locale locale7 = locale4.stripExtensions();
        java.lang.String str8 = locale4.getDisplayName();
        java.util.Locale.Builder builder9 = builder3.setLocale(locale4);
        java.util.Locale.Builder builder10 = builder9.clearExtensions();
        java.util.Locale locale11 = builder9.build();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder13 = builder9.setLanguage("49690226");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed language: 49690226 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "de");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "de");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "German" + "'", str8, "German");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "de");
    }

    @Test
    public void test02203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02203");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.yearOfEra();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology0.dayOfYear();
        org.joda.time.DurationField durationField6 = iSOChronology0.centuries();
        java.util.Locale.Builder builder7 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder10 = builder7.setExtension('x', "jpn");
        java.util.Locale locale11 = builder7.build();
        java.util.Locale locale12 = builder7.build();
        java.util.Locale.Builder builder13 = builder7.clearExtensions();
        java.util.Locale.Builder builder14 = builder13.clearExtensions();
        java.util.Locale.Builder builder15 = builder14.clear();
        boolean boolean16 = iSOChronology0.equals((java.lang.Object) builder14);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder18 = builder14.setRegion("n. Chr.");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed region: n. Chr. [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "");
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test02204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02204");
        org.joda.time.tz.NameProvider nameProvider0 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.DateTimeZone.setNameProvider(nameProvider0);
        org.joda.time.chrono.ISOChronology iSOChronology2 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology2.hourOfHalfday();
        org.joda.time.tz.NameProvider nameProvider4 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale5 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet6 = locale5.getExtensionKeys();
        java.lang.String str9 = nameProvider4.getShortName(locale5, "Koordinierte Universalzeit", "+00:00");
        java.util.Locale locale10 = java.util.Locale.GERMAN;
        java.lang.String str13 = nameProvider4.getShortName(locale10, "53167803", "jpn");
        int int14 = dateTimeField3.getMaximumTextLength(locale10);
        java.util.TimeZone timeZone15 = null;
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forTimeZone(timeZone15);
        int int18 = dateTimeZone16.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime19 = org.joda.time.LocalDateTime.now(dateTimeZone16);
        int int20 = localDateTime19.getWeekyear();
        org.joda.time.tz.NameProvider nameProvider22 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale23 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet24 = locale23.getExtensionKeys();
        java.lang.String str27 = nameProvider22.getShortName(locale23, "Koordinierte Universalzeit", "+00:00");
        java.util.Locale.Builder builder28 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder31 = builder28.setExtension('x', "jpn");
        java.util.Locale locale32 = java.util.Locale.GERMAN;
        java.util.Locale locale33 = java.util.Locale.GERMAN;
        java.lang.String str34 = locale32.getDisplayCountry(locale33);
        java.util.Locale locale35 = locale32.stripExtensions();
        java.lang.String str36 = locale32.getDisplayName();
        java.util.Locale.Builder builder37 = builder31.setLocale(locale32);
        java.util.Locale locale38 = builder37.build();
        java.lang.String str39 = locale38.getScript();
        java.lang.String str42 = nameProvider22.getName(locale38, "hourOfDay", "");
        java.lang.String str43 = dateTimeField3.getAsShortText((org.joda.time.ReadablePartial) localDateTime19, 22, locale38);
        boolean boolean45 = dateTimeField3.isLeap(1645454771211L);
        java.util.Locale locale46 = java.util.Locale.GERMAN;
        java.util.Locale locale47 = java.util.Locale.GERMAN;
        java.lang.String str48 = locale46.getDisplayCountry(locale47);
        java.util.Locale locale49 = locale46.stripExtensions();
        java.lang.String str50 = locale46.getDisplayName();
        int int51 = dateTimeField3.getMaximumShortTextLength(locale46);
        int int52 = dateTimeField3.getMaximumValue();
        long long55 = dateTimeField3.getDifferenceAsLong(36000117L, 1645454810244L);
        org.joda.time.tz.NameProvider nameProvider57 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale58 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet59 = locale58.getExtensionKeys();
        java.lang.String str62 = nameProvider57.getShortName(locale58, "Koordinierte Universalzeit", "+00:00");
        java.util.Locale.Builder builder63 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder66 = builder63.setExtension('x', "jpn");
        java.util.Locale locale67 = java.util.Locale.GERMAN;
        java.util.Locale locale68 = java.util.Locale.GERMAN;
        java.lang.String str69 = locale67.getDisplayCountry(locale68);
        java.util.Locale locale70 = locale67.stripExtensions();
        java.lang.String str71 = locale67.getDisplayName();
        java.util.Locale.Builder builder72 = builder66.setLocale(locale67);
        java.util.Locale locale73 = builder72.build();
        java.lang.String str74 = locale73.getScript();
        java.lang.String str77 = nameProvider57.getName(locale73, "hourOfDay", "");
        java.lang.String str78 = locale73.getDisplayCountry();
        java.util.Locale locale79 = locale73.stripExtensions();
        java.lang.String str80 = dateTimeField3.getAsText(2833465, locale79);
        java.lang.String str83 = nameProvider0.getName(locale79, "\u897f\u66a6", "53195831");
        java.util.Locale locale84 = null;
        java.lang.String str87 = nameProvider0.getName(locale84, "2022-02-22T00:46:53.514", "2022-02-21T14:48:26.154");
        org.junit.Assert.assertNotNull(nameProvider0);
        org.junit.Assert.assertNotNull(iSOChronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(nameProvider4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet6);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "de");
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertNotNull(dateTimeZone16);
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + 36000000 + "'", int18 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2022 + "'", int20 == 2022);
        org.junit.Assert.assertNotNull(nameProvider22);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet24);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "de");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "de");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "de");
// flaky:         org.junit.Assert.assertEquals("'" + str36 + "' != '" + "German" + "'", str36, "German");
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "de");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "22" + "'", str43, "22");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "de");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "de");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "de");
// flaky:         org.junit.Assert.assertEquals("'" + str50 + "' != '" + "German" + "'", str50, "German");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 2 + "'", int51 == 2);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 11 + "'", int52 == 11);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + (-457060L) + "'", long55 == (-457060L));
        org.junit.Assert.assertNotNull(nameProvider57);
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet59);
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "de");
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "de");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "de");
// flaky:         org.junit.Assert.assertEquals("'" + str71 + "' != '" + "German" + "'", str71, "German");
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "de");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
        org.junit.Assert.assertNull(str77);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "" + "'", str78, "");
        org.junit.Assert.assertNotNull(locale79);
        org.junit.Assert.assertEquals(locale79.toString(), "de");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "2833465" + "'", str80, "2833465");
        org.junit.Assert.assertNull(str83);
        org.junit.Assert.assertNull(str87);
    }

    @Test
    public void test02205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02205");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.hourOfHalfday();
        org.joda.time.tz.NameProvider nameProvider2 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale3 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet4 = locale3.getExtensionKeys();
        java.lang.String str7 = nameProvider2.getShortName(locale3, "Koordinierte Universalzeit", "+00:00");
        java.util.Locale locale8 = java.util.Locale.GERMAN;
        java.lang.String str11 = nameProvider2.getShortName(locale8, "53167803", "jpn");
        int int12 = dateTimeField1.getMaximumTextLength(locale8);
        java.util.TimeZone timeZone13 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forTimeZone(timeZone13);
        int int16 = dateTimeZone14.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime17 = org.joda.time.LocalDateTime.now(dateTimeZone14);
        int int18 = localDateTime17.getWeekyear();
        org.joda.time.tz.NameProvider nameProvider20 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale21 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet22 = locale21.getExtensionKeys();
        java.lang.String str25 = nameProvider20.getShortName(locale21, "Koordinierte Universalzeit", "+00:00");
        java.util.Locale.Builder builder26 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder29 = builder26.setExtension('x', "jpn");
        java.util.Locale locale30 = java.util.Locale.GERMAN;
        java.util.Locale locale31 = java.util.Locale.GERMAN;
        java.lang.String str32 = locale30.getDisplayCountry(locale31);
        java.util.Locale locale33 = locale30.stripExtensions();
        java.lang.String str34 = locale30.getDisplayName();
        java.util.Locale.Builder builder35 = builder29.setLocale(locale30);
        java.util.Locale locale36 = builder35.build();
        java.lang.String str37 = locale36.getScript();
        java.lang.String str40 = nameProvider20.getName(locale36, "hourOfDay", "");
        java.lang.String str41 = dateTimeField1.getAsShortText((org.joda.time.ReadablePartial) localDateTime17, 22, locale36);
        boolean boolean43 = dateTimeField1.isLeap(1645454771211L);
        java.util.Locale locale44 = java.util.Locale.GERMAN;
        java.util.Locale locale45 = java.util.Locale.GERMAN;
        java.lang.String str46 = locale44.getDisplayCountry(locale45);
        java.util.Locale locale47 = locale44.stripExtensions();
        java.lang.String str48 = locale44.getDisplayName();
        int int49 = dateTimeField1.getMaximumShortTextLength(locale44);
        int int50 = dateTimeField1.getMaximumValue();
        int int52 = dateTimeField1.getLeapAmount((long) (byte) 10);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(nameProvider2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet4);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "de");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertNotNull(dateTimeZone14);
// flaky:         org.junit.Assert.assertTrue("'" + int16 + "' != '" + 36000000 + "'", int16 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2022 + "'", int18 == 2022);
        org.junit.Assert.assertNotNull(nameProvider20);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet22);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "de");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "de");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "de");
// flaky:         org.junit.Assert.assertEquals("'" + str34 + "' != '" + "German" + "'", str34, "German");
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "de");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "22" + "'", str41, "22");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "de");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "de");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "de");
// flaky:         org.junit.Assert.assertEquals("'" + str48 + "' != '" + "German" + "'", str48, "German");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 2 + "'", int49 == 2);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 11 + "'", int50 == 11);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
    }

    @Test
    public void test02206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02206");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffset(100L);
        java.util.TimeZone timeZone4 = dateTimeZone1.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forTimeZone(timeZone4);
        java.lang.String str7 = dateTimeZone5.getNameKey((long) '4');
        boolean boolean9 = dateTimeZone5.isStandardOffset((long) 52);
        java.util.TimeZone timeZone10 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        int int13 = dateTimeZone11.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime14 = org.joda.time.LocalDateTime.now(dateTimeZone11);
        int int15 = localDateTime14.getWeekyear();
        org.joda.time.LocalDateTime.Property property16 = localDateTime14.millisOfDay();
        java.util.TimeZone timeZone17 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forTimeZone(timeZone17);
        int int20 = dateTimeZone18.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime21 = org.joda.time.LocalDateTime.now(dateTimeZone18);
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.DateTime dateTime23 = localDateTime21.toDateTime(readableInstant22);
        java.util.TimeZone timeZone24 = null;
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forTimeZone(timeZone24);
        int int27 = dateTimeZone25.getOffset(100L);
        org.joda.time.DateTime dateTime28 = localDateTime21.toDateTime(dateTimeZone25);
        int int29 = property16.compareTo((org.joda.time.ReadableInstant) dateTime28);
        java.lang.String str30 = dateTime28.toString();
        int int31 = dateTimeZone5.getOffset((org.joda.time.ReadableInstant) dateTime28);
        java.lang.Class<?> wildcardClass32 = dateTime28.getClass();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 36000000 + "'", int3 == 36000000);
        org.junit.Assert.assertNotNull(timeZone4);
// flaky:         org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertNotNull(dateTimeZone5);
// flaky:         org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(dateTimeZone11);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 36000000 + "'", int13 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2022 + "'", int15 == 2022);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTimeZone18);
// flaky:         org.junit.Assert.assertTrue("'" + int20 + "' != '" + 36000000 + "'", int20 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTimeZone25);
// flaky:         org.junit.Assert.assertTrue("'" + int27 + "' != '" + 36000000 + "'", int27 == 36000000);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
// flaky:         org.junit.Assert.assertEquals("'" + str30 + "' != '" + "2022-02-22T00:48:48.049+10:00" + "'", str30, "2022-02-22T00:48:48.049+10:00");
// flaky:         org.junit.Assert.assertTrue("'" + int31 + "' != '" + 36000000 + "'", int31 == 36000000);
        org.junit.Assert.assertNotNull(wildcardClass32);
    }

    @Test
    public void test02207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02207");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        java.util.TimeZone timeZone1 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        int int4 = dateTimeZone2.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime5 = org.joda.time.LocalDateTime.now(dateTimeZone2);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray6 = localDateTime5.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.hourOfDay();
        int int8 = localDateTime5.get(dateTimeFieldType7);
        org.joda.time.LocalDateTime.Property property9 = localDateTime5.dayOfWeek();
        boolean boolean10 = localDateTime0.isEqual((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.LocalDateTime.Property property11 = localDateTime5.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime12 = property11.roundHalfCeilingCopy();
        java.util.TimeZone timeZone13 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forTimeZone(timeZone13);
        int int16 = dateTimeZone14.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime17 = org.joda.time.LocalDateTime.now(dateTimeZone14);
        org.joda.time.LocalDateTime localDateTime18 = org.joda.time.LocalDateTime.now(dateTimeZone14);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.minusMinutes((int) ' ');
        int int21 = property11.compareTo((org.joda.time.ReadablePartial) localDateTime20);
        int int22 = property11.getMaximumValueOverall();
        java.lang.String str23 = property11.getAsText();
        org.joda.time.LocalDateTime localDateTime24 = property11.roundFloorCopy();
        org.joda.time.LocalDateTime.Property property25 = localDateTime24.hourOfDay();
        org.joda.time.LocalDateTime localDateTime27 = property25.addToCopy(2809);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime29 = localDateTime27.withHourOfDay(26);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(dateTimeZone2);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 36000000 + "'", int4 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
// flaky:         org.junit.Assert.assertTrue("'" + int16 + "' != '" + 36000000 + "'", int16 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 31 + "'", int22 == 31);
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "22" + "'", str23, "22");
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(localDateTime27);
    }

    @Test
    public void test02208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02208");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((java.lang.Object) 31556952000000L);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusSeconds((-292275054));
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.minusMonths((int) (short) 100);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.LocalDateTime localDateTime8 = localDateTime5.withPeriodAdded(readablePeriod6, 53184);
        org.joda.time.LocalDateTime.Property property9 = localDateTime8.monthOfYear();
        java.lang.String str10 = property9.getName();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "monthOfYear" + "'", str10, "monthOfYear");
    }

    @Test
    public void test02209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02209");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.yearOfEra();
        org.joda.time.DurationField durationField3 = iSOChronology0.minutes();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.weekyear();
        org.joda.time.DurationField durationField5 = iSOChronology0.centuries();
        org.joda.time.DateTimeField dateTimeField6 = iSOChronology0.centuryOfEra();
        java.util.TimeZone timeZone7 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forTimeZone(timeZone7);
        java.lang.String str10 = dateTimeZone8.getName(31556995199999L);
        org.joda.time.Chronology chronology11 = iSOChronology0.withZone(dateTimeZone8);
        java.util.TimeZone timeZone13 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forTimeZone(timeZone13);
        int int16 = dateTimeZone14.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime17 = org.joda.time.LocalDateTime.now(dateTimeZone14);
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.DateTime dateTime19 = localDateTime17.toDateTime(readableInstant18);
        org.joda.time.Chronology chronology20 = dateTime19.getChronology();
        org.joda.time.DurationField durationField21 = chronology20.hours();
        org.joda.time.DurationField durationField22 = chronology20.months();
        org.joda.time.DateTimeField dateTimeField23 = chronology20.dayOfYear();
        java.util.TimeZone timeZone24 = null;
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forTimeZone(timeZone24);
        int int27 = dateTimeZone25.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime28 = org.joda.time.LocalDateTime.now(dateTimeZone25);
        int[] intArray31 = new int[] { (short) 0, (short) 0 };
        int int32 = dateTimeField23.getMinimumValue((org.joda.time.ReadablePartial) localDateTime28, intArray31);
        int int34 = dateTimeField23.getMinimumValue((long) 100);
        java.util.TimeZone timeZone35 = null;
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forTimeZone(timeZone35);
        int int38 = dateTimeZone36.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime39 = org.joda.time.LocalDateTime.now(dateTimeZone36);
        int int40 = localDateTime39.getWeekyear();
        org.joda.time.LocalDateTime.Property property41 = localDateTime39.minuteOfHour();
        int int42 = dateTimeField23.getMaximumValue((org.joda.time.ReadablePartial) localDateTime39);
        long long45 = dateTimeField23.getDifferenceAsLong(7870L, 0L);
        org.joda.time.tz.NameProvider nameProvider46 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale47 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet48 = locale47.getExtensionKeys();
        java.lang.String str51 = nameProvider46.getShortName(locale47, "Koordinierte Universalzeit", "+00:00");
        java.util.Locale locale52 = java.util.Locale.GERMAN;
        java.lang.String str55 = nameProvider46.getShortName(locale52, "53167803", "jpn");
        int int56 = dateTimeField23.getMaximumShortTextLength(locale52);
        java.lang.String str57 = dateTimeZone8.getName((long) 2, locale52);
        java.lang.String str58 = locale52.getDisplayVariant();
        java.lang.String str59 = locale52.getDisplayName();
        java.lang.String str61 = locale52.getExtension('x');
        java.lang.String str62 = locale52.getDisplayScript();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeZone8);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+10:00" + "'", str10, "+10:00");
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeZone14);
// flaky:         org.junit.Assert.assertTrue("'" + int16 + "' != '" + 36000000 + "'", int16 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeZone25);
// flaky:         org.junit.Assert.assertTrue("'" + int27 + "' != '" + 36000000 + "'", int27 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[0, 0]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(dateTimeZone36);
// flaky:         org.junit.Assert.assertTrue("'" + int38 + "' != '" + 36000000 + "'", int38 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 2022 + "'", int40 == 2022);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 365 + "'", int42 == 365);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertNotNull(nameProvider46);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet48);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "de");
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 3 + "'", int56 == 3);
// flaky:         org.junit.Assert.assertEquals("'" + str57 + "' != '" + "+10:00" + "'", str57, "+10:00");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
// flaky:         org.junit.Assert.assertEquals("'" + str59 + "' != '" + "German" + "'", str59, "German");
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
    }

    @Test
    public void test02210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02210");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.DateTime dateTime6 = localDateTime4.toDateTime(readableInstant5);
        java.util.TimeZone timeZone7 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forTimeZone(timeZone7);
        int int10 = dateTimeZone8.getOffset(100L);
        org.joda.time.DateTime dateTime11 = localDateTime4.toDateTime(dateTimeZone8);
        org.joda.time.LocalDateTime.Property property12 = localDateTime4.monthOfYear();
        java.util.TimeZone timeZone13 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forTimeZone(timeZone13);
        int int16 = dateTimeZone14.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime17 = org.joda.time.LocalDateTime.now(dateTimeZone14);
        int int18 = localDateTime17.getWeekyear();
        org.joda.time.LocalDateTime.Property property19 = localDateTime17.millisOfDay();
        java.util.TimeZone timeZone20 = null;
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forTimeZone(timeZone20);
        int int23 = dateTimeZone21.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime24 = org.joda.time.LocalDateTime.now(dateTimeZone21);
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.DateTime dateTime26 = localDateTime24.toDateTime(readableInstant25);
        java.util.TimeZone timeZone27 = null;
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forTimeZone(timeZone27);
        int int30 = dateTimeZone28.getOffset(100L);
        org.joda.time.DateTime dateTime31 = localDateTime24.toDateTime(dateTimeZone28);
        int int32 = property19.compareTo((org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.LocalDateTime localDateTime33 = property19.roundHalfEvenCopy();
        boolean boolean34 = localDateTime4.isAfter((org.joda.time.ReadablePartial) localDateTime33);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime36 = localDateTime33.withWeekOfWeekyear(0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 36000000 + "'", int3 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTimeZone8);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 36000000 + "'", int10 == 36000000);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
// flaky:         org.junit.Assert.assertTrue("'" + int16 + "' != '" + 36000000 + "'", int16 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2022 + "'", int18 == 2022);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTimeZone21);
// flaky:         org.junit.Assert.assertTrue("'" + int23 + "' != '" + 36000000 + "'", int23 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTimeZone28);
// flaky:         org.junit.Assert.assertTrue("'" + int30 + "' != '" + 36000000 + "'", int30 == 36000000);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test02211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02211");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        int int5 = localDateTime4.getWeekyear();
        org.joda.time.LocalDateTime.Property property6 = localDateTime4.millisOfDay();
        java.lang.String str7 = property6.toString();
        org.joda.time.LocalDateTime localDateTime8 = property6.getLocalDateTime();
        java.lang.String str9 = property6.toString();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 36000000 + "'", int3 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2022 + "'", int5 == 2022);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Property[millisOfDay]" + "'", str7, "Property[millisOfDay]");
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Property[millisOfDay]" + "'", str9, "Property[millisOfDay]");
    }

    @Test
    public void test02212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02212");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet1 = locale0.getExtensionKeys();
        java.util.Iterator<java.lang.Character> charItor2 = charSet1.iterator();
        java.util.Locale locale3 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet4 = locale3.getExtensionKeys();
        java.util.Iterator<java.lang.Character> charItor5 = charSet4.iterator();
        boolean boolean6 = charSet1.containsAll((java.util.Collection<java.lang.Character>) charSet4);
        java.util.Locale.LanguageRange[] languageRangeArray7 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList8 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList8, languageRangeArray7);
        java.util.Locale.LanguageRange[] languageRangeArray10 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList11 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList11, languageRangeArray10);
        java.util.Locale locale13 = java.util.Locale.KOREAN;
        java.util.Locale locale14 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet15 = locale14.getExtensionKeys();
        java.util.Locale locale16 = java.util.Locale.GERMAN;
        java.util.Locale locale17 = java.util.Locale.GERMAN;
        java.lang.String str18 = locale16.getDisplayCountry(locale17);
        java.util.Locale locale19 = locale16.stripExtensions();
        java.util.Locale locale20 = java.util.Locale.JAPANESE;
        java.util.Locale locale21 = java.util.Locale.JAPANESE;
        java.util.Locale locale22 = java.util.Locale.GERMAN;
        java.util.Locale[] localeArray23 = new java.util.Locale[] { locale13, locale14, locale19, locale20, locale21, locale22 };
        java.util.ArrayList<java.util.Locale> localeList24 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList24, localeArray23);
        java.util.Locale locale26 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList11, (java.util.Collection<java.util.Locale>) localeList24);
        java.util.List<java.util.Locale> localeList27 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList8, (java.util.Collection<java.util.Locale>) localeList24);
        java.util.Locale.LanguageRange[] languageRangeArray28 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList29 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList29, languageRangeArray28);
        java.lang.String[] strArray35 = new java.lang.String[] { "jpn", "+00:00", "+00:00", "\uc77c\ubcf8\uc5b4" };
        java.util.ArrayList<java.lang.String> strList36 = new java.util.ArrayList<java.lang.String>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList36, strArray35);
        java.lang.String str38 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList29, (java.util.Collection<java.lang.String>) strList36);
        java.util.AbstractList[] abstractListArray40 = new java.util.AbstractList[2];
        @SuppressWarnings("unchecked")
        java.util.AbstractList<java.util.Locale.LanguageRange>[] languageRangeListArray41 = (java.util.AbstractList<java.util.Locale.LanguageRange>[]) abstractListArray40;
        languageRangeListArray41[0] = languageRangeList8;
        languageRangeListArray41[1] = languageRangeList29;
        java.util.AbstractList<java.util.Locale.LanguageRange>[] languageRangeListArray46 = charSet1.toArray(languageRangeListArray41);
        java.util.Locale locale47 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet48 = locale47.getExtensionKeys();
        java.util.Locale locale49 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet50 = locale49.getExtensionKeys();
        java.util.Iterator<java.lang.Character> charItor51 = charSet50.iterator();
        java.util.Locale locale52 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet53 = locale52.getExtensionKeys();
        java.util.Iterator<java.lang.Character> charItor54 = charSet53.iterator();
        boolean boolean55 = charSet50.containsAll((java.util.Collection<java.lang.Character>) charSet53);
        java.util.TimeZone timeZone56 = null;
        org.joda.time.DateTimeZone dateTimeZone57 = org.joda.time.DateTimeZone.forTimeZone(timeZone56);
        int int59 = dateTimeZone57.getOffset(100L);
        java.util.TimeZone timeZone60 = dateTimeZone57.toTimeZone();
        org.joda.time.DateTimeZone[] dateTimeZoneArray61 = new org.joda.time.DateTimeZone[] { dateTimeZone57 };
        org.joda.time.DateTimeZone[] dateTimeZoneArray62 = charSet53.toArray(dateTimeZoneArray61);
        java.util.Locale locale63 = java.util.Locale.GERMAN;
        java.lang.String str64 = locale63.getDisplayScript();
        java.lang.String str66 = locale63.getExtension('x');
        java.util.Set<java.lang.Character> charSet67 = locale63.getExtensionKeys();
        boolean boolean68 = charSet53.retainAll((java.util.Collection<java.lang.Character>) charSet67);
        java.util.Locale locale69 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet70 = locale69.getExtensionKeys();
        java.util.Iterator<java.lang.Character> charItor71 = charSet70.iterator();
        java.util.ArrayList[] arrayListArray73 = new java.util.ArrayList[0];
        @SuppressWarnings("unchecked")
        java.util.ArrayList<java.util.Locale.LanguageRange>[] languageRangeListArray74 = (java.util.ArrayList<java.util.Locale.LanguageRange>[]) arrayListArray73;
        java.util.ArrayList<java.util.Locale.LanguageRange>[] languageRangeListArray75 = charSet70.toArray((java.util.ArrayList<java.util.Locale.LanguageRange>[]) arrayListArray73);
        java.util.stream.Stream<java.lang.Character> charStream76 = charSet70.stream();
        boolean boolean78 = charSet70.contains((java.lang.Object) "\uc77c\ubcf8\uc5b4");
        boolean boolean79 = charSet53.removeAll((java.util.Collection<java.lang.Character>) charSet70);
        boolean boolean80 = charSet48.retainAll((java.util.Collection<java.lang.Character>) charSet70);
        boolean boolean81 = charSet1.containsAll((java.util.Collection<java.lang.Character>) charSet70);
        int int82 = charSet70.size();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean84 = charSet70.add((java.lang.Character) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet1);
        org.junit.Assert.assertNotNull(charItor2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet4);
        org.junit.Assert.assertNotNull(charItor5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(languageRangeArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(languageRangeArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ko");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "de");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "de");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "de");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ja");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "ja");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "de");
        org.junit.Assert.assertNotNull(localeArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNull(locale26);
        org.junit.Assert.assertNotNull(localeList27);
        org.junit.Assert.assertNotNull(languageRangeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNotNull(abstractListArray40);
        org.junit.Assert.assertNotNull(languageRangeListArray41);
        org.junit.Assert.assertNotNull(languageRangeListArray46);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet48);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet50);
        org.junit.Assert.assertNotNull(charItor51);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet53);
        org.junit.Assert.assertNotNull(charItor54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(dateTimeZone57);
// flaky:         org.junit.Assert.assertTrue("'" + int59 + "' != '" + 36000000 + "'", int59 == 36000000);
        org.junit.Assert.assertNotNull(timeZone60);
// flaky:         org.junit.Assert.assertEquals(timeZone60.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertNotNull(dateTimeZoneArray61);
        org.junit.Assert.assertNotNull(dateTimeZoneArray62);
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "de");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertNotNull(charSet67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet70);
        org.junit.Assert.assertNotNull(charItor71);
        org.junit.Assert.assertNotNull(arrayListArray73);
        org.junit.Assert.assertNotNull(languageRangeListArray74);
        org.junit.Assert.assertNotNull(languageRangeListArray75);
        org.junit.Assert.assertNotNull(charStream76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
    }

    @Test
    public void test02213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02213");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.hourOfHalfday();
        long long7 = iSOChronology0.getDateTimeMillis((-1), 8, 3, 365);
        org.joda.time.DurationField durationField8 = iSOChronology0.seconds();
        long long12 = iSOChronology0.add(1645454774909L, (long) 53178951, 53166088);
        org.joda.time.DateTimeField dateTimeField13 = iSOChronology0.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology0.dayOfYear();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology0.yearOfCentury();
        org.joda.time.DurationField durationField16 = iSOChronology0.days();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
// flaky:         org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-62180301599635L) + "'", long7 == (-62180301599635L));
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 2828962243388597L + "'", long12 == 2828962243388597L);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
    }

    @Test
    public void test02214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02214");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.hourOfHalfday();
        java.lang.String str2 = iSOChronology0.toString();
        org.joda.time.DurationField durationField3 = iSOChronology0.centuries();
        org.joda.time.Chronology chronology4 = iSOChronology0.withUTC();
        org.joda.time.DurationField durationField5 = iSOChronology0.years();
        org.joda.time.DurationField durationField6 = iSOChronology0.years();
        org.joda.time.DurationField durationField7 = iSOChronology0.days();
        long long10 = durationField7.add((-51477978L), 49682284L);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ISOChronology[+10:00]" + "'", str2, "ISOChronology[+10:00]");
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 4292549286122022L + "'", long10 == 4292549286122022L);
    }

    @Test
    public void test02215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02215");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffset(100L);
        long long6 = dateTimeZone1.convertLocalToUTC(1644850016295L, true);
        long long8 = dateTimeZone1.nextTransition(53166880L);
        boolean boolean10 = dateTimeZone1.isStandardOffset((long) 53271023);
        java.lang.String str12 = dateTimeZone1.getNameKey((long) 410);
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 36000000 + "'", int3 == 36000000);
// flaky:         org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1644814016295L + "'", long6 == 1644814016295L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 53166880L + "'", long8 == 53166880L);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(str12);
    }

    @Test
    public void test02216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02216");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.parse("dayOfYear");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"dayOfYear\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02217");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.centuries();
        java.util.TimeZone timeZone2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone2);
        int int5 = dateTimeZone3.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime6 = org.joda.time.LocalDateTime.now(dateTimeZone3);
        int int7 = localDateTime6.getWeekyear();
        org.joda.time.LocalDateTime.Property property8 = localDateTime6.millisOfDay();
        java.util.TimeZone timeZone9 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        int int12 = dateTimeZone10.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime13 = org.joda.time.LocalDateTime.now(dateTimeZone10);
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.DateTime dateTime15 = localDateTime13.toDateTime(readableInstant14);
        java.util.TimeZone timeZone16 = null;
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forTimeZone(timeZone16);
        int int19 = dateTimeZone17.getOffset(100L);
        org.joda.time.DateTime dateTime20 = localDateTime13.toDateTime(dateTimeZone17);
        int int21 = property8.compareTo((org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.chrono.ISOChronology iSOChronology22 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField23 = iSOChronology22.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField24 = iSOChronology22.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField25 = iSOChronology22.yearOfEra();
        boolean boolean26 = dateTime20.equals((java.lang.Object) iSOChronology22);
        org.joda.time.DurationField durationField27 = iSOChronology22.eras();
        int int28 = durationField1.compareTo(durationField27);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeZone3);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 36000000 + "'", int5 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2022 + "'", int7 == 2022);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTimeZone10);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 36000000 + "'", int12 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTimeZone17);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 36000000 + "'", int19 == 36000000);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(iSOChronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
    }

    @Test
    public void test02218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02218");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime5 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusMinutes((int) ' ');
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.minusMillis(99);
        int int10 = localDateTime9.size();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 36000000 + "'", int3 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 4 + "'", int10 == 4);
    }

    @Test
    public void test02219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02219");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffset(100L);
        java.util.TimeZone timeZone4 = dateTimeZone1.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forTimeZone(timeZone4);
        java.util.TimeZone.setDefault(timeZone4);
        java.util.TimeZone timeZone7 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forTimeZone(timeZone7);
        int int10 = dateTimeZone8.getOffset(100L);
        java.util.TimeZone timeZone11 = dateTimeZone8.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        java.util.TimeZone.setDefault(timeZone11);
        boolean boolean14 = timeZone4.hasSameRules(timeZone11);
        java.time.ZoneId zoneId15 = timeZone11.toZoneId();
        java.util.TimeZone timeZone16 = java.util.TimeZone.getTimeZone(zoneId15);
        java.util.TimeZone timeZone17 = java.util.TimeZone.getTimeZone(zoneId15);
        int int18 = timeZone17.getRawOffset();
        java.lang.Object obj19 = timeZone17.clone();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 36000000 + "'", int3 == 36000000);
        org.junit.Assert.assertNotNull(timeZone4);
// flaky:         org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTimeZone8);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 36000000 + "'", int10 == 36000000);
        org.junit.Assert.assertNotNull(timeZone11);
// flaky:         org.junit.Assert.assertEquals(timeZone11.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(zoneId15);
        org.junit.Assert.assertNotNull(timeZone16);
// flaky:         org.junit.Assert.assertEquals(timeZone16.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertNotNull(timeZone17);
// flaky:         org.junit.Assert.assertEquals(timeZone17.getDisplayName(), "GMT+10:00");
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + 36000000 + "'", int18 == 36000000);
        org.junit.Assert.assertNotNull(obj19);
// flaky:         org.junit.Assert.assertEquals(obj19.toString(), "sun.util.calendar.ZoneInfo[id=\"GMT+10:00\",offset=36000000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null]");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj19), "sun.util.calendar.ZoneInfo[id=\"GMT+10:00\",offset=36000000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null]");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj19), "sun.util.calendar.ZoneInfo[id=\"GMT+10:00\",offset=36000000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null]");
    }

    @Test
    public void test02220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02220");
        java.util.Locale locale0 = java.util.Locale.JAPANESE;
        java.lang.String str1 = locale0.getDisplayLanguage();
        java.lang.String str2 = locale0.getISO3Language();
        java.util.Set<java.lang.String> strSet3 = locale0.getUnicodeLocaleAttributes();
        java.util.Set<java.lang.Character> charSet4 = locale0.getExtensionKeys();
        java.lang.Object[] objArray5 = charSet4.toArray();
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet7 = locale6.getExtensionKeys();
        java.util.Iterator<java.lang.Character> charItor8 = charSet7.iterator();
        java.util.ArrayList[] arrayListArray10 = new java.util.ArrayList[0];
        @SuppressWarnings("unchecked")
        java.util.ArrayList<java.util.Locale.LanguageRange>[] languageRangeListArray11 = (java.util.ArrayList<java.util.Locale.LanguageRange>[]) arrayListArray10;
        java.util.ArrayList<java.util.Locale.LanguageRange>[] languageRangeListArray12 = charSet7.toArray((java.util.ArrayList<java.util.Locale.LanguageRange>[]) arrayListArray10);
        java.util.stream.Stream<java.lang.Character> charStream13 = charSet7.stream();
        java.util.Locale locale14 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet15 = locale14.getExtensionKeys();
        java.util.Iterator<java.lang.Character> charItor16 = charSet15.iterator();
        java.util.ArrayList[] arrayListArray18 = new java.util.ArrayList[0];
        @SuppressWarnings("unchecked")
        java.util.ArrayList<java.util.Locale.LanguageRange>[] languageRangeListArray19 = (java.util.ArrayList<java.util.Locale.LanguageRange>[]) arrayListArray18;
        java.util.ArrayList<java.util.Locale.LanguageRange>[] languageRangeListArray20 = charSet15.toArray((java.util.ArrayList<java.util.Locale.LanguageRange>[]) arrayListArray18);
        java.util.stream.Stream<java.lang.Character> charStream21 = charSet15.stream();
        java.util.Locale locale22 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet23 = locale22.getExtensionKeys();
        java.util.Iterator<java.lang.Character> charItor24 = charSet23.iterator();
        java.util.Locale locale25 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet26 = locale25.getExtensionKeys();
        java.util.Iterator<java.lang.Character> charItor27 = charSet26.iterator();
        boolean boolean28 = charSet23.containsAll((java.util.Collection<java.lang.Character>) charSet26);
        java.util.TimeZone timeZone29 = null;
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forTimeZone(timeZone29);
        int int32 = dateTimeZone30.getOffset(100L);
        java.util.TimeZone timeZone33 = dateTimeZone30.toTimeZone();
        org.joda.time.DateTimeZone[] dateTimeZoneArray34 = new org.joda.time.DateTimeZone[] { dateTimeZone30 };
        org.joda.time.DateTimeZone[] dateTimeZoneArray35 = charSet26.toArray(dateTimeZoneArray34);
        java.util.Locale locale36 = java.util.Locale.GERMAN;
        java.lang.String str37 = locale36.getDisplayScript();
        java.lang.String str39 = locale36.getExtension('x');
        java.util.Set<java.lang.Character> charSet40 = locale36.getExtensionKeys();
        boolean boolean41 = charSet26.retainAll((java.util.Collection<java.lang.Character>) charSet40);
        boolean boolean42 = charSet15.addAll((java.util.Collection<java.lang.Character>) charSet40);
        org.joda.time.chrono.ISOChronology iSOChronology43 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField44 = iSOChronology43.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField45 = iSOChronology43.yearOfEra();
        org.joda.time.DateTimeField dateTimeField46 = iSOChronology43.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField47 = iSOChronology43.weekOfWeekyear();
        org.joda.time.chrono.ISOChronology iSOChronology48 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField49 = iSOChronology48.hourOfHalfday();
        org.joda.time.tz.NameProvider nameProvider50 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale51 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet52 = locale51.getExtensionKeys();
        java.lang.String str55 = nameProvider50.getShortName(locale51, "Koordinierte Universalzeit", "+00:00");
        java.util.Locale locale56 = java.util.Locale.GERMAN;
        java.lang.String str59 = nameProvider50.getShortName(locale56, "53167803", "jpn");
        int int60 = dateTimeField49.getMaximumTextLength(locale56);
        int int61 = dateTimeField47.getMaximumTextLength(locale56);
        java.util.Set<java.lang.Character> charSet62 = locale56.getExtensionKeys();
        boolean boolean63 = charSet40.removeAll((java.util.Collection<java.lang.Character>) charSet62);
        java.util.Locale locale64 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet65 = locale64.getExtensionKeys();
        java.util.Iterator<java.lang.Character> charItor66 = charSet65.iterator();
        boolean boolean67 = charSet65.isEmpty();
        boolean boolean68 = charSet62.addAll((java.util.Collection<java.lang.Character>) charSet65);
        java.util.stream.Stream<java.lang.Character> charStream69 = charSet65.parallelStream();
        java.util.Iterator<java.lang.Character> charItor70 = charSet65.iterator();
        java.util.Spliterator<java.lang.Character> charSpliterator71 = charSet65.spliterator();
        boolean boolean72 = charSet7.retainAll((java.util.Collection<java.lang.Character>) charSet65);
        boolean boolean73 = charSet4.addAll((java.util.Collection<java.lang.Character>) charSet7);
        java.util.Spliterator<java.lang.Character> charSpliterator74 = charSet7.spliterator();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ja");
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Japanese" + "'", str1, "Japanese");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "jpn" + "'", str2, "jpn");
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNotNull(charSet4);
        org.junit.Assert.assertNotNull(objArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray5), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray5), "[]");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet7);
        org.junit.Assert.assertNotNull(charItor8);
        org.junit.Assert.assertNotNull(arrayListArray10);
        org.junit.Assert.assertNotNull(languageRangeListArray11);
        org.junit.Assert.assertNotNull(languageRangeListArray12);
        org.junit.Assert.assertNotNull(charStream13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet15);
        org.junit.Assert.assertNotNull(charItor16);
        org.junit.Assert.assertNotNull(arrayListArray18);
        org.junit.Assert.assertNotNull(languageRangeListArray19);
        org.junit.Assert.assertNotNull(languageRangeListArray20);
        org.junit.Assert.assertNotNull(charStream21);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet23);
        org.junit.Assert.assertNotNull(charItor24);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet26);
        org.junit.Assert.assertNotNull(charItor27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(dateTimeZone30);
// flaky:         org.junit.Assert.assertTrue("'" + int32 + "' != '" + 36000000 + "'", int32 == 36000000);
        org.junit.Assert.assertNotNull(timeZone33);
// flaky:         org.junit.Assert.assertEquals(timeZone33.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertNotNull(dateTimeZoneArray34);
        org.junit.Assert.assertNotNull(dateTimeZoneArray35);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "de");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNotNull(charSet40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(iSOChronology43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(iSOChronology48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(nameProvider50);
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet52);
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "de");
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 2 + "'", int60 == 2);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 2 + "'", int61 == 2);
        org.junit.Assert.assertNotNull(charSet62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet65);
        org.junit.Assert.assertNotNull(charItor66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(charStream69);
        org.junit.Assert.assertNotNull(charItor70);
        org.junit.Assert.assertNotNull(charSpliterator71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(charSpliterator74);
    }

    @Test
    public void test02221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02221");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.yearOfEra();
        org.joda.time.DurationField durationField3 = iSOChronology0.minutes();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.weekyear();
        org.joda.time.Chronology chronology5 = iSOChronology0.withUTC();
        org.joda.time.DurationField durationField6 = chronology5.centuries();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        long long10 = chronology5.add(readablePeriod7, 2800411L, 2926596);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 2800411L + "'", long10 == 2800411L);
    }

    @Test
    public void test02222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02222");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffset(100L);
        java.lang.String str4 = dateTimeZone1.getID();
        java.util.Locale locale6 = java.util.Locale.ENGLISH;
        java.lang.String str7 = dateTimeZone1.getName(31556952000000L, locale6);
        long long11 = dateTimeZone1.convertLocalToUTC(1644850021241L, false, (long) 53195994);
        long long15 = dateTimeZone1.convertLocalToUTC(1644850006651L, false, 1645454900196L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 36000000 + "'", int3 == 36000000);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+10:00" + "'", str4, "+10:00");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+10:00" + "'", str7, "+10:00");
// flaky:         org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1644814021241L + "'", long11 == 1644814021241L);
// flaky:         org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1644814006651L + "'", long15 == 1644814006651L);
    }

    @Test
    public void test02223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02223");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DurationField durationField2 = durationFieldType0.getField(chronology1);
        long long5 = durationField2.subtract(10L, (int) (short) 0);
        long long8 = durationField2.getMillis((int) (byte) 100, 120L);
        long long11 = durationField2.getMillis(2744400L, 0L);
        long long12 = durationField2.getUnitMillis();
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 10L + "'", long5 == 10L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 315569520000000L + "'", long8 == 315569520000000L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 8660489906880000000L + "'", long11 == 8660489906880000000L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 3155695200000L + "'", long12 == 3155695200000L);
    }

    @Test
    public void test02224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02224");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet1 = locale0.getExtensionKeys();
        java.util.stream.Stream<java.lang.Character> charStream2 = charSet1.parallelStream();
        boolean boolean4 = charSet1.equals((java.lang.Object) 2022);
        int int5 = charSet1.size();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet1);
        org.junit.Assert.assertNotNull(charStream2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
    }

    @Test
    public void test02225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02225");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("en");
        double double2 = languageRange1.getWeight();
        org.joda.time.chrono.ISOChronology iSOChronology3 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology3.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology3.yearOfEra();
        org.joda.time.DurationField durationField6 = iSOChronology3.minutes();
        org.joda.time.DateTimeField dateTimeField7 = iSOChronology3.weekyear();
        org.joda.time.DurationField durationField8 = iSOChronology3.centuries();
        org.joda.time.DateTimeField dateTimeField9 = iSOChronology3.centuryOfEra();
        java.util.TimeZone timeZone10 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        java.lang.String str13 = dateTimeZone11.getName(31556995199999L);
        org.joda.time.Chronology chronology14 = iSOChronology3.withZone(dateTimeZone11);
        org.joda.time.DurationField durationField15 = iSOChronology3.weekyears();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology3.dayOfWeek();
        org.joda.time.DurationField durationField17 = iSOChronology3.seconds();
        boolean boolean18 = languageRange1.equals((java.lang.Object) iSOChronology3);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.0d + "'", double2 == 1.0d);
        org.junit.Assert.assertNotNull(iSOChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeZone11);
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+10:00" + "'", str13, "+10:00");
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test02226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02226");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        int int5 = localDateTime4.getWeekyear();
        org.joda.time.LocalDateTime.Property property6 = localDateTime4.millisOfDay();
        java.util.TimeZone timeZone7 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forTimeZone(timeZone7);
        int int10 = dateTimeZone8.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now(dateTimeZone8);
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.DateTime dateTime13 = localDateTime11.toDateTime(readableInstant12);
        java.util.TimeZone timeZone14 = null;
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forTimeZone(timeZone14);
        int int17 = dateTimeZone15.getOffset(100L);
        org.joda.time.DateTime dateTime18 = localDateTime11.toDateTime(dateTimeZone15);
        int int19 = property6.compareTo((org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.LocalDateTime localDateTime20 = property6.roundHalfEvenCopy();
        java.util.TimeZone timeZone21 = null;
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forTimeZone(timeZone21);
        int int24 = dateTimeZone22.getOffset(100L);
        java.lang.String str25 = dateTimeZone22.getID();
        java.util.Locale locale27 = java.util.Locale.ENGLISH;
        java.lang.String str28 = dateTimeZone22.getName(31556952000000L, locale27);
        java.lang.String str29 = property6.getAsText(locale27);
        org.joda.time.LocalDateTime localDateTime31 = property6.addToCopy(8);
        org.joda.time.DurationField durationField32 = property6.getLeapDurationField();
        org.joda.time.Interval interval33 = property6.toInterval();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 36000000 + "'", int3 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2022 + "'", int5 == 2022);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTimeZone8);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 36000000 + "'", int10 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
// flaky:         org.junit.Assert.assertTrue("'" + int17 + "' != '" + 36000000 + "'", int17 == 36000000);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(dateTimeZone22);
// flaky:         org.junit.Assert.assertTrue("'" + int24 + "' != '" + 36000000 + "'", int24 == 36000000);
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "+10:00" + "'", str25, "+10:00");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str28 + "' != '" + "+10:00" + "'", str28, "+10:00");
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "2928848" + "'", str29, "2928848");
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNull(durationField32);
        org.junit.Assert.assertNotNull(interval33);
    }

    @Test
    public void test02227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02227");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.centuryOfEra();
        org.joda.time.DurationField durationField3 = iSOChronology0.seconds();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology0.hourOfHalfday();
        long long9 = iSOChronology0.add((long) (short) 100, 1644849973425L, 2720);
        org.joda.time.DurationField durationField10 = iSOChronology0.weekyears();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology0.yearOfEra();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology0.clockhourOfDay();
        // The following exception was thrown during execution in test generation
        try {
            long long15 = dateTimeField12.set((long) 17, "2022-02-21T13:47:57.052");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2022-02-21T13:47:57.052\" for clockhourOfDay is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 4473991927716100L + "'", long9 == 4473991927716100L);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
    }

    @Test
    public void test02228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02228");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        java.util.TimeZone timeZone1 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        int int4 = dateTimeZone2.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime5 = org.joda.time.LocalDateTime.now(dateTimeZone2);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray6 = localDateTime5.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.hourOfDay();
        int int8 = localDateTime5.get(dateTimeFieldType7);
        org.joda.time.LocalDateTime.Property property9 = localDateTime5.dayOfWeek();
        boolean boolean10 = localDateTime0.isEqual((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.LocalDateTime.Property property11 = localDateTime5.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime12 = property11.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.withSecondOfMinute((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime12.plusMonths(23);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.minusMonths(49695458);
        org.joda.time.tz.NameProvider nameProvider20 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale21 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet22 = locale21.getExtensionKeys();
        java.lang.String str25 = nameProvider20.getShortName(locale21, "Koordinierte Universalzeit", "+00:00");
        java.util.Locale locale26 = java.util.Locale.GERMAN;
        java.lang.String str29 = nameProvider20.getShortName(locale26, "53167803", "jpn");
        java.util.Locale locale30 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.String> strSet31 = locale30.getUnicodeLocaleKeys();
        java.util.Set<java.lang.Character> charSet32 = locale30.getExtensionKeys();
        java.lang.String str35 = nameProvider20.getShortName(locale30, "weekyears", "2022-02-22T00:46:50.059+10:00");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str36 = localDateTime18.toString("2022-02-21T14:47:52.373Z", locale30);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: T");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(dateTimeZone2);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 36000000 + "'", int4 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(nameProvider20);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet22);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "de");
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "ko");
        org.junit.Assert.assertNotNull(strSet31);
        org.junit.Assert.assertNotNull(charSet32);
        org.junit.Assert.assertNull(str35);
    }

    @Test
    public void test02229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02229");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.centuryOfEra();
        org.joda.time.DurationField durationField3 = iSOChronology0.centuries();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.millisOfDay();
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology0.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetMillis(346);
        boolean boolean8 = iSOChronology0.equals((java.lang.Object) dateTimeZone7);
        org.joda.time.DateTimeZone dateTimeZone9 = iSOChronology0.getZone();
        // The following exception was thrown during execution in test generation
        try {
            long long17 = iSOChronology0.getDateTimeMillis(46, 29, 2827402, 2810, 2846360, (int) (short) 0, 2855123);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2810 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(dateTimeZone9);
    }

    @Test
    public void test02230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02230");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime5 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.plusSeconds((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime5.minusWeeks((int) (byte) 10);
        java.util.TimeZone timeZone10 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        int int13 = dateTimeZone11.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime14 = org.joda.time.LocalDateTime.now(dateTimeZone11);
        org.joda.time.LocalDateTime localDateTime15 = org.joda.time.LocalDateTime.now(dateTimeZone11);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.plusSeconds((int) (short) 10);
        int int18 = localDateTime15.size();
        boolean boolean19 = localDateTime9.isBefore((org.joda.time.ReadablePartial) localDateTime15);
        org.joda.time.LocalDateTime.Property property20 = localDateTime15.millisOfSecond();
        java.lang.String str21 = property20.getAsString();
        org.joda.time.Interval interval22 = property20.toInterval();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 36000000 + "'", int3 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone11);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 36000000 + "'", int13 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 4 + "'", int18 == 4);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(property20);
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "956" + "'", str21, "956");
        org.junit.Assert.assertNotNull(interval22);
    }

    @Test
    public void test02231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02231");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(882, 316, 316, 5861, 53309858);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 5861 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02232");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.DateTime dateTime6 = localDateTime4.toDateTime(readableInstant5);
        org.joda.time.Chronology chronology7 = dateTime6.getChronology();
        org.joda.time.DurationField durationField8 = chronology7.hours();
        org.joda.time.DurationField durationField9 = chronology7.months();
        org.joda.time.DateTimeField dateTimeField10 = chronology7.dayOfYear();
        java.util.TimeZone timeZone11 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        int int14 = dateTimeZone12.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime15 = org.joda.time.LocalDateTime.now(dateTimeZone12);
        int[] intArray18 = new int[] { (short) 0, (short) 0 };
        int int19 = dateTimeField10.getMinimumValue((org.joda.time.ReadablePartial) localDateTime15, intArray18);
        int int21 = dateTimeField10.getMinimumValue((long) 100);
        java.util.TimeZone timeZone22 = null;
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        int int25 = dateTimeZone23.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime26 = org.joda.time.LocalDateTime.now(dateTimeZone23);
        int int27 = localDateTime26.getWeekyear();
        org.joda.time.LocalDateTime.Property property28 = localDateTime26.minuteOfHour();
        int int29 = dateTimeField10.getMaximumValue((org.joda.time.ReadablePartial) localDateTime26);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime26.withCenturyOfEra(1);
        org.joda.time.LocalDateTime.Property property32 = localDateTime31.hourOfDay();
        java.util.TimeZone timeZone33 = null;
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forTimeZone(timeZone33);
        int int36 = dateTimeZone34.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime37 = org.joda.time.LocalDateTime.now(dateTimeZone34);
        org.joda.time.LocalDateTime localDateTime38 = org.joda.time.LocalDateTime.now(dateTimeZone34);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime38.plusSeconds((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime38.minusWeeks((int) (byte) 10);
        java.util.TimeZone timeZone43 = null;
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forTimeZone(timeZone43);
        int int46 = dateTimeZone44.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime47 = org.joda.time.LocalDateTime.now(dateTimeZone44);
        org.joda.time.LocalDateTime localDateTime48 = org.joda.time.LocalDateTime.now(dateTimeZone44);
        org.joda.time.LocalDateTime localDateTime50 = localDateTime48.plusSeconds((int) (short) 10);
        int int51 = localDateTime48.size();
        boolean boolean52 = localDateTime42.isBefore((org.joda.time.ReadablePartial) localDateTime48);
        org.joda.time.LocalDateTime localDateTime54 = localDateTime48.withMillisOfSecond(52);
        org.joda.time.LocalDateTime localDateTime56 = localDateTime54.plusMinutes(0);
        boolean boolean57 = property32.equals((java.lang.Object) localDateTime54);
        int int58 = localDateTime54.size();
        org.joda.time.LocalDateTime localDateTime60 = localDateTime54.plusMillis((int) (short) 100);
        int[] intArray61 = localDateTime54.getValues();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 36000000 + "'", int3 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeZone12);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 36000000 + "'", int14 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[0, 0]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(dateTimeZone23);
// flaky:         org.junit.Assert.assertTrue("'" + int25 + "' != '" + 36000000 + "'", int25 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2022 + "'", int27 == 2022);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 365 + "'", int29 == 365);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(dateTimeZone34);
// flaky:         org.junit.Assert.assertTrue("'" + int36 + "' != '" + 36000000 + "'", int36 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(dateTimeZone44);
// flaky:         org.junit.Assert.assertTrue("'" + int46 + "' != '" + 36000000 + "'", int46 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 4 + "'", int51 == 4);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 4 + "'", int58 == 4);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(intArray61);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[2022, 2, 22, 2929052]");
    }

    @Test
    public void test02233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02233");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.hourOfHalfday();
        long long7 = iSOChronology0.getDateTimeMillis((-1), 8, 3, 365);
        org.joda.time.DurationField durationField8 = iSOChronology0.seconds();
        long long12 = iSOChronology0.add(1645454774909L, (long) 53178951, 53166088);
        org.joda.time.DateTimeField dateTimeField13 = iSOChronology0.dayOfWeek();
        org.joda.time.DurationField durationField14 = dateTimeField13.getDurationField();
        java.lang.String str15 = durationField14.toString();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
// flaky:         org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-62180301599635L) + "'", long7 == (-62180301599635L));
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 2828962243388597L + "'", long12 == 2828962243388597L);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "DurationField[days]" + "'", str15, "DurationField[days]");
    }

    @Test
    public void test02234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02234");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray5 = localDateTime4.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.plusWeeks(2022);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime4.plusHours((int) '4');
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.plus(readableDuration10);
        org.joda.time.Chronology chronology12 = localDateTime9.getChronology();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 36000000 + "'", int3 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(chronology12);
    }

    @Test
    public void test02235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02235");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray5 = localDateTime4.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.hourOfDay();
        int int7 = localDateTime4.get(dateTimeFieldType6);
        org.joda.time.LocalDateTime.Property property8 = localDateTime4.hourOfDay();
        int int9 = property8.getLeapAmount();
        org.joda.time.LocalDateTime localDateTime11 = property8.addToCopy(0L);
        int int12 = localDateTime11.getDayOfWeek();
        int int13 = localDateTime11.getMinuteOfHour();
        org.joda.time.LocalDateTime.Property property14 = localDateTime11.weekyear();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 36000000 + "'", int3 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray5);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(localDateTime11);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 48 + "'", int13 == 48);
        org.junit.Assert.assertNotNull(property14);
    }

    @Test
    public void test02236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02236");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setExtension('x', "jpn");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder5 = builder0.setRegion("deu");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed region: deu [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
    }

    @Test
    public void test02237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02237");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.centuryOfEra();
        org.joda.time.DurationField durationField3 = iSOChronology0.centuries();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.millisOfDay();
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        int int8 = dateTimeZone6.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime9 = org.joda.time.LocalDateTime.now(dateTimeZone6);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.DateTime dateTime11 = localDateTime9.toDateTime(readableInstant10);
        java.util.TimeZone timeZone12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone12);
        int int15 = dateTimeZone13.getOffset(100L);
        org.joda.time.DateTime dateTime16 = localDateTime9.toDateTime(dateTimeZone13);
        org.joda.time.LocalDateTime.Property property17 = localDateTime9.monthOfYear();
        java.util.TimeZone timeZone18 = null;
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forTimeZone(timeZone18);
        int int21 = dateTimeZone19.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime22 = org.joda.time.LocalDateTime.now(dateTimeZone19);
        int int23 = localDateTime22.getWeekyear();
        org.joda.time.LocalDateTime.Property property24 = localDateTime22.millisOfDay();
        java.util.TimeZone timeZone25 = null;
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forTimeZone(timeZone25);
        int int28 = dateTimeZone26.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime29 = org.joda.time.LocalDateTime.now(dateTimeZone26);
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.DateTime dateTime31 = localDateTime29.toDateTime(readableInstant30);
        java.util.TimeZone timeZone32 = null;
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forTimeZone(timeZone32);
        int int35 = dateTimeZone33.getOffset(100L);
        org.joda.time.DateTime dateTime36 = localDateTime29.toDateTime(dateTimeZone33);
        int int37 = property24.compareTo((org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.LocalDateTime localDateTime38 = property24.roundHalfEvenCopy();
        boolean boolean39 = localDateTime9.isAfter((org.joda.time.ReadablePartial) localDateTime38);
        java.util.Locale locale40 = java.util.Locale.UK;
        java.lang.String str41 = dateTimeField4.getAsText((org.joda.time.ReadablePartial) localDateTime38, locale40);
        org.joda.time.LocalDateTime localDateTime43 = localDateTime38.minusMonths((int) (short) 100);
        org.joda.time.LocalDateTime.Property property44 = localDateTime38.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime45 = property44.roundFloorCopy();
        org.joda.time.DurationField durationField46 = property44.getDurationField();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 36000000 + "'", int8 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTimeZone13);
// flaky:         org.junit.Assert.assertTrue("'" + int15 + "' != '" + 36000000 + "'", int15 == 36000000);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTimeZone19);
// flaky:         org.junit.Assert.assertTrue("'" + int21 + "' != '" + 36000000 + "'", int21 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2022 + "'", int23 == 2022);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTimeZone26);
// flaky:         org.junit.Assert.assertTrue("'" + int28 + "' != '" + 36000000 + "'", int28 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTimeZone33);
// flaky:         org.junit.Assert.assertTrue("'" + int35 + "' != '" + 36000000 + "'", int35 == 36000000);
        org.junit.Assert.assertNotNull(dateTime36);
// flaky:         org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "en_GB");
// flaky:         org.junit.Assert.assertEquals("'" + str41 + "' != '" + "2929361" + "'", str41, "2929361");
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(durationField46);
    }

    @Test
    public void test02238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02238");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.DateTime dateTime6 = localDateTime4.toDateTime(readableInstant5);
        java.util.TimeZone timeZone7 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forTimeZone(timeZone7);
        int int10 = dateTimeZone8.getOffset(100L);
        org.joda.time.DateTime dateTime11 = localDateTime4.toDateTime(dateTimeZone8);
        org.joda.time.LocalDateTime.Property property12 = localDateTime4.monthOfYear();
        java.util.TimeZone timeZone13 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forTimeZone(timeZone13);
        int int16 = dateTimeZone14.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime17 = org.joda.time.LocalDateTime.now(dateTimeZone14);
        int int18 = localDateTime17.getWeekyear();
        org.joda.time.LocalDateTime.Property property19 = localDateTime17.millisOfDay();
        java.util.TimeZone timeZone20 = null;
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forTimeZone(timeZone20);
        int int23 = dateTimeZone21.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime24 = org.joda.time.LocalDateTime.now(dateTimeZone21);
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.DateTime dateTime26 = localDateTime24.toDateTime(readableInstant25);
        java.util.TimeZone timeZone27 = null;
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forTimeZone(timeZone27);
        int int30 = dateTimeZone28.getOffset(100L);
        org.joda.time.DateTime dateTime31 = localDateTime24.toDateTime(dateTimeZone28);
        int int32 = property19.compareTo((org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.LocalDateTime localDateTime33 = property19.roundHalfEvenCopy();
        boolean boolean34 = localDateTime4.isAfter((org.joda.time.ReadablePartial) localDateTime33);
        org.joda.time.ReadableDuration readableDuration35 = null;
        org.joda.time.LocalDateTime localDateTime36 = localDateTime33.minus(readableDuration35);
        int int37 = localDateTime33.getDayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod38 = null;
        org.joda.time.LocalDateTime localDateTime39 = localDateTime33.minus(readablePeriod38);
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 36000000 + "'", int3 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTimeZone8);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 36000000 + "'", int10 == 36000000);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
// flaky:         org.junit.Assert.assertTrue("'" + int16 + "' != '" + 36000000 + "'", int16 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2022 + "'", int18 == 2022);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTimeZone21);
// flaky:         org.junit.Assert.assertTrue("'" + int23 + "' != '" + 36000000 + "'", int23 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTimeZone28);
// flaky:         org.junit.Assert.assertTrue("'" + int30 + "' != '" + 36000000 + "'", int30 == 36000000);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(localDateTime36);
// flaky:         org.junit.Assert.assertTrue("'" + int37 + "' != '" + 22 + "'", int37 == 22);
        org.junit.Assert.assertNotNull(localDateTime39);
    }

    @Test
    public void test02239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02239");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        int int5 = localDateTime4.getDayOfWeek();
        java.lang.String str6 = localDateTime4.toString();
        org.joda.time.LocalDateTime.Property property7 = localDateTime4.hourOfDay();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 36000000 + "'", int3 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime4);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2 + "'", int5 == 2);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "2022-02-22T00:48:49.566" + "'", str6, "2022-02-22T00:48:49.566");
        org.junit.Assert.assertNotNull(property7);
    }

    @Test
    public void test02240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02240");
        org.joda.time.chrono.ISOChronology iSOChronology1 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology1.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology1.clockhourOfHalfday();
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime(1645454809947L, (org.joda.time.Chronology) iSOChronology1);
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology1.year();
        org.joda.time.DateTimeField dateTimeField6 = iSOChronology1.weekOfWeekyear();
        org.junit.Assert.assertNotNull(iSOChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
    }

    @Test
    public void test02241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02241");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.DateTime dateTime6 = localDateTime4.toDateTime(readableInstant5);
        java.util.TimeZone timeZone7 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forTimeZone(timeZone7);
        int int10 = dateTimeZone8.getOffset(100L);
        org.joda.time.DateTime dateTime11 = localDateTime4.toDateTime(dateTimeZone8);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime4.plusMinutes((-1));
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.hourOfDay();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime13.plusSeconds((int) (byte) -1);
        org.joda.time.LocalDateTime.Property property17 = localDateTime16.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField18 = property17.getField();
        int int20 = dateTimeField18.getMaximumValue((long) 53269383);
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 36000000 + "'", int3 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTimeZone8);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 36000000 + "'", int10 == 36000000);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2922789 + "'", int20 == 2922789);
    }

    @Test
    public void test02242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02242");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.yearOfEra();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.hourOfDay();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.year();
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology0.dayOfYear();
        int int6 = dateTimeField5.getMinimumValue();
        java.util.TimeZone timeZone7 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forTimeZone(timeZone7);
        int int10 = dateTimeZone8.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now(dateTimeZone8);
        int int12 = localDateTime11.getWeekyear();
        org.joda.time.DurationFieldType durationFieldType13 = org.joda.time.DurationFieldType.centuries();
        java.lang.String str14 = durationFieldType13.getName();
        boolean boolean15 = localDateTime11.isSupported(durationFieldType13);
        int int16 = localDateTime11.getHourOfDay();
        java.util.Locale locale17 = null;
        java.lang.String str18 = dateTimeField5.getAsText((org.joda.time.ReadablePartial) localDateTime11, locale17);
        org.joda.time.ReadableDuration readableDuration19 = null;
        org.joda.time.LocalDateTime localDateTime20 = localDateTime11.minus(readableDuration19);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime11.minusDays(53183117);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(dateTimeZone8);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 36000000 + "'", int10 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2022 + "'", int12 == 2022);
        org.junit.Assert.assertNotNull(durationFieldType13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "centuries" + "'", str14, "centuries");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "53" + "'", str18, "53");
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
    }

    @Test
    public void test02243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02243");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.centuryOfEra();
        org.joda.time.DurationField durationField3 = iSOChronology0.seconds();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology0.minuteOfDay();
        // The following exception was thrown during execution in test generation
        try {
            long long13 = iSOChronology0.getDateTimeMillis((int) (byte) 0, 2820478, 2841311, 49687275, 2804241, 2810, 53308413);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 49687275 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
    }

    @Test
    public void test02244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02244");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.yearOfEra();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.weekyearOfCentury();
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray8 = iSOChronology0.get(readablePeriod5, 1645454861411L, 1645454923797L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
    }

    @Test
    public void test02245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02245");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setExtension('x', "jpn");
        java.util.Locale locale4 = java.util.Locale.GERMAN;
        java.util.Locale locale5 = java.util.Locale.GERMAN;
        java.lang.String str6 = locale4.getDisplayCountry(locale5);
        java.util.Locale locale7 = locale4.stripExtensions();
        java.lang.String str8 = locale4.getDisplayName();
        java.util.Locale.Builder builder9 = builder3.setLocale(locale4);
        java.util.Locale.Builder builder12 = builder9.setUnicodeLocaleKeyword("22", "deu");
        java.util.Locale locale13 = builder9.build();
        java.util.Locale.Builder builder14 = builder9.clear();
        java.util.Locale.Builder builder15 = builder9.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder17 = builder15.setLanguage("2022-02-21T14:48:08.238Z");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed language: 2022-02-21T14:48:08.238Z [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "de");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "de");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "German" + "'", str8, "German");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "de__#u-22-deu");
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder15);
    }

    @Test
    public void test02246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02246");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setExtension('x', "jpn");
        java.util.Locale.Builder builder5 = builder0.removeUnicodeLocaleAttribute("53169126");
        java.util.Locale.Builder builder7 = builder5.addUnicodeLocaleAttribute("German");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder9 = builder7.setScript("53196078");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed script: 53196078 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test02247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02247");
        java.util.Locale locale0 = java.util.Locale.GERMAN;
        java.lang.String str1 = locale0.getDisplayScript();
        java.lang.String str3 = locale0.getExtension('x');
        java.util.Set<java.lang.Character> charSet4 = locale0.getExtensionKeys();
        java.util.Locale locale5 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet6 = locale5.getExtensionKeys();
        java.util.Iterator<java.lang.Character> charItor7 = charSet6.iterator();
        java.util.Locale locale8 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet9 = locale8.getExtensionKeys();
        java.util.Iterator<java.lang.Character> charItor10 = charSet9.iterator();
        boolean boolean11 = charSet6.containsAll((java.util.Collection<java.lang.Character>) charSet9);
        java.util.TimeZone timeZone12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone12);
        int int15 = dateTimeZone13.getOffset(100L);
        java.util.TimeZone timeZone16 = dateTimeZone13.toTimeZone();
        org.joda.time.DateTimeZone[] dateTimeZoneArray17 = new org.joda.time.DateTimeZone[] { dateTimeZone13 };
        org.joda.time.DateTimeZone[] dateTimeZoneArray18 = charSet9.toArray(dateTimeZoneArray17);
        java.util.Locale locale19 = java.util.Locale.GERMAN;
        java.lang.String str20 = locale19.getDisplayScript();
        java.lang.String str22 = locale19.getExtension('x');
        java.util.Set<java.lang.Character> charSet23 = locale19.getExtensionKeys();
        boolean boolean24 = charSet9.retainAll((java.util.Collection<java.lang.Character>) charSet23);
        boolean boolean25 = charSet4.addAll((java.util.Collection<java.lang.Character>) charSet23);
        int int26 = charSet4.size();
        java.util.Locale locale27 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet28 = locale27.getExtensionKeys();
        java.util.Iterator<java.lang.Character> charItor29 = charSet28.iterator();
        java.util.Locale locale30 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet31 = locale30.getExtensionKeys();
        java.util.Iterator<java.lang.Character> charItor32 = charSet31.iterator();
        boolean boolean33 = charSet28.containsAll((java.util.Collection<java.lang.Character>) charSet31);
        int int34 = charSet31.size();
        java.util.Spliterator<java.lang.Character> charSpliterator35 = charSet31.spliterator();
        boolean boolean36 = charSet4.containsAll((java.util.Collection<java.lang.Character>) charSet31);
        java.util.stream.Stream<java.lang.Character> charStream37 = charSet31.stream();
        java.util.Iterator<java.lang.Character> charItor38 = charSet31.iterator();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "de");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(charSet4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet6);
        org.junit.Assert.assertNotNull(charItor7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet9);
        org.junit.Assert.assertNotNull(charItor10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(dateTimeZone13);
// flaky:         org.junit.Assert.assertTrue("'" + int15 + "' != '" + 36000000 + "'", int15 == 36000000);
        org.junit.Assert.assertNotNull(timeZone16);
// flaky:         org.junit.Assert.assertEquals(timeZone16.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertNotNull(dateTimeZoneArray17);
        org.junit.Assert.assertNotNull(dateTimeZoneArray18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "de");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(charSet23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet28);
        org.junit.Assert.assertNotNull(charItor29);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet31);
        org.junit.Assert.assertNotNull(charItor32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(charSpliterator35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(charStream37);
        org.junit.Assert.assertNotNull(charItor38);
    }

    @Test
    public void test02248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02248");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.centuryOfEra();
        org.joda.time.DurationField durationField3 = iSOChronology0.eras();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology0.dayOfWeek();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
    }

    @Test
    public void test02249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02249");
        java.lang.String[] strArray1 = java.util.TimeZone.getAvailableIDs(1645454839);
        org.junit.Assert.assertNotNull(strArray1);
    }

    @Test
    public void test02250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02250");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((java.lang.Object) 31556952000000L);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusSeconds((-292275054));
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.minusMonths((int) (short) 100);
        int int6 = localDateTime1.getYearOfCentury();
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField9 = iSOChronology8.hourOfHalfday();
        org.joda.time.tz.NameProvider nameProvider10 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale11 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet12 = locale11.getExtensionKeys();
        java.lang.String str15 = nameProvider10.getShortName(locale11, "Koordinierte Universalzeit", "+00:00");
        java.util.Locale locale16 = java.util.Locale.GERMAN;
        java.lang.String str19 = nameProvider10.getShortName(locale16, "53167803", "jpn");
        int int20 = dateTimeField9.getMaximumTextLength(locale16);
        java.util.TimeZone timeZone21 = null;
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forTimeZone(timeZone21);
        int int24 = dateTimeZone22.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime25 = org.joda.time.LocalDateTime.now(dateTimeZone22);
        int int26 = localDateTime25.getWeekyear();
        org.joda.time.tz.NameProvider nameProvider28 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale29 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet30 = locale29.getExtensionKeys();
        java.lang.String str33 = nameProvider28.getShortName(locale29, "Koordinierte Universalzeit", "+00:00");
        java.util.Locale.Builder builder34 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder37 = builder34.setExtension('x', "jpn");
        java.util.Locale locale38 = java.util.Locale.GERMAN;
        java.util.Locale locale39 = java.util.Locale.GERMAN;
        java.lang.String str40 = locale38.getDisplayCountry(locale39);
        java.util.Locale locale41 = locale38.stripExtensions();
        java.lang.String str42 = locale38.getDisplayName();
        java.util.Locale.Builder builder43 = builder37.setLocale(locale38);
        java.util.Locale locale44 = builder43.build();
        java.lang.String str45 = locale44.getScript();
        java.lang.String str48 = nameProvider28.getName(locale44, "hourOfDay", "");
        java.lang.String str49 = dateTimeField9.getAsShortText((org.joda.time.ReadablePartial) localDateTime25, 22, locale44);
        boolean boolean51 = dateTimeField9.isLeap(1645454771211L);
        long long54 = dateTimeField9.getDifferenceAsLong(1644849985413L, 1645454775635L);
        org.joda.time.DurationField durationField55 = dateTimeField9.getDurationField();
        java.util.TimeZone timeZone56 = null;
        org.joda.time.DateTimeZone dateTimeZone57 = org.joda.time.DateTimeZone.forTimeZone(timeZone56);
        int int59 = dateTimeZone57.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime60 = org.joda.time.LocalDateTime.now(dateTimeZone57);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray61 = localDateTime60.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType62 = org.joda.time.DateTimeFieldType.hourOfDay();
        int int63 = localDateTime60.get(dateTimeFieldType62);
        org.joda.time.LocalDateTime localDateTime65 = localDateTime60.minusWeeks(1);
        int int66 = localDateTime60.getCenturyOfEra();
        java.util.Locale locale68 = java.util.Locale.JAPANESE;
        java.lang.String str69 = locale68.getDisplayLanguage();
        java.util.Set<java.lang.Character> charSet70 = locale68.getExtensionKeys();
        java.lang.String str71 = dateTimeField9.getAsText((org.joda.time.ReadablePartial) localDateTime60, 2719, locale68);
        java.lang.String str72 = localDateTime1.toString("2928886", locale68);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 69 + "'", int6 == 69);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(nameProvider10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet12);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "de");
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2 + "'", int20 == 2);
        org.junit.Assert.assertNotNull(dateTimeZone22);
// flaky:         org.junit.Assert.assertTrue("'" + int24 + "' != '" + 36000000 + "'", int24 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2022 + "'", int26 == 2022);
        org.junit.Assert.assertNotNull(nameProvider28);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet30);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "de");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "de");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "de");
// flaky:         org.junit.Assert.assertEquals("'" + str42 + "' != '" + "German" + "'", str42, "German");
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "de");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "22" + "'", str49, "22");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + (-167L) + "'", long54 == (-167L));
        org.junit.Assert.assertNotNull(durationField55);
        org.junit.Assert.assertNotNull(dateTimeZone57);
// flaky:         org.junit.Assert.assertTrue("'" + int59 + "' != '" + 36000000 + "'", int59 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray61);
        org.junit.Assert.assertNotNull(dateTimeFieldType62);
// flaky:         org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 20 + "'", int66 == 20);
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "ja");
// flaky:         org.junit.Assert.assertEquals("'" + str69 + "' != '" + "Japanese" + "'", str69, "Japanese");
        org.junit.Assert.assertNotNull(charSet70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "2719" + "'", str71, "2719");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "2928886" + "'", str72, "2928886");
    }

    @Test
    public void test02251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02251");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("53194330", strMap1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=53194330");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02252");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        java.util.TimeZone timeZone1 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        int int4 = dateTimeZone2.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime5 = org.joda.time.LocalDateTime.now(dateTimeZone2);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray6 = localDateTime5.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.hourOfDay();
        int int8 = localDateTime5.get(dateTimeFieldType7);
        org.joda.time.LocalDateTime.Property property9 = localDateTime5.dayOfWeek();
        boolean boolean10 = localDateTime0.isEqual((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.LocalDateTime.Property property11 = localDateTime5.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime12 = property11.roundHalfCeilingCopy();
        java.util.TimeZone timeZone13 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forTimeZone(timeZone13);
        int int16 = dateTimeZone14.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime17 = org.joda.time.LocalDateTime.now(dateTimeZone14);
        org.joda.time.LocalDateTime localDateTime18 = org.joda.time.LocalDateTime.now(dateTimeZone14);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.minusMinutes((int) ' ');
        int int21 = property11.compareTo((org.joda.time.ReadablePartial) localDateTime20);
        int int22 = property11.getMaximumValueOverall();
        org.joda.time.LocalDateTime localDateTime23 = property11.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.minusWeeks(12);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.withYear(7);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.withCenturyOfEra(2804241);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(dateTimeZone2);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 36000000 + "'", int4 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(property9);
// flaky:         org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
// flaky:         org.junit.Assert.assertTrue("'" + int16 + "' != '" + 36000000 + "'", int16 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 31 + "'", int22 == 31);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
    }

    @Test
    public void test02253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02253");
        org.joda.time.chrono.ISOChronology iSOChronology1 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology1.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology1.clockhourOfHalfday();
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime(1645454809947L, (org.joda.time.Chronology) iSOChronology1);
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology1.year();
        // The following exception was thrown during execution in test generation
        try {
            long long13 = iSOChronology1.getDateTimeMillis((-292275054), 49624656, 49680496, 23, 356399999, 2810, 44);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 356399999 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(iSOChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField5);
    }

    @Test
    public void test02254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02254");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        java.util.TimeZone timeZone1 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        int int4 = dateTimeZone2.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime5 = org.joda.time.LocalDateTime.now(dateTimeZone2);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray6 = localDateTime5.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.hourOfDay();
        int int8 = localDateTime5.get(dateTimeFieldType7);
        org.joda.time.LocalDateTime.Property property9 = localDateTime5.dayOfWeek();
        boolean boolean10 = localDateTime0.isEqual((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.LocalDateTime.Property property11 = localDateTime5.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime12 = property11.roundHalfCeilingCopy();
        java.util.TimeZone timeZone13 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forTimeZone(timeZone13);
        int int16 = dateTimeZone14.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime17 = org.joda.time.LocalDateTime.now(dateTimeZone14);
        org.joda.time.LocalDateTime localDateTime18 = org.joda.time.LocalDateTime.now(dateTimeZone14);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.minusMinutes((int) ' ');
        int int21 = property11.compareTo((org.joda.time.ReadablePartial) localDateTime20);
        int int22 = property11.getMaximumValueOverall();
        java.lang.String str23 = property11.getAsText();
        org.joda.time.LocalDateTime localDateTime24 = property11.roundFloorCopy();
        org.joda.time.LocalDateTime.Property property25 = localDateTime24.hourOfDay();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime24.minusYears(12);
        java.util.Locale locale28 = java.util.Locale.JAPANESE;
        java.lang.String str29 = locale28.getDisplayLanguage();
        java.lang.String str30 = locale28.getLanguage();
        java.lang.String str31 = locale28.getDisplayVariant();
        java.util.Locale locale32 = java.util.Locale.GERMAN;
        java.util.Locale locale33 = java.util.Locale.GERMAN;
        java.lang.String str34 = locale32.getDisplayCountry(locale33);
        java.util.Locale locale35 = locale32.stripExtensions();
        java.lang.String str36 = locale32.getDisplayName();
        java.util.Locale locale37 = java.util.Locale.PRC;
        java.lang.String str38 = locale32.getDisplayScript(locale37);
        java.util.TimeZone timeZone39 = null;
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forTimeZone(timeZone39);
        int int42 = dateTimeZone40.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime43 = org.joda.time.LocalDateTime.now(dateTimeZone40);
        int int44 = localDateTime43.getWeekyear();
        org.joda.time.LocalDateTime.Property property45 = localDateTime43.millisOfDay();
        java.util.Locale locale46 = java.util.Locale.GERMAN;
        java.util.Locale locale47 = java.util.Locale.GERMAN;
        java.lang.String str48 = locale46.getDisplayCountry(locale47);
        java.util.Locale locale49 = locale46.stripExtensions();
        int int50 = property45.getMaximumShortTextLength(locale46);
        java.lang.String str51 = locale46.getDisplayVariant();
        java.lang.String str52 = locale37.getDisplayScript(locale46);
        java.util.Locale.setDefault(locale46);
        java.lang.String str54 = locale28.getDisplayName(locale46);
        boolean boolean55 = localDateTime27.equals((java.lang.Object) str54);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(dateTimeZone2);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 36000000 + "'", int4 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
// flaky:         org.junit.Assert.assertTrue("'" + int16 + "' != '" + 36000000 + "'", int16 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 31 + "'", int22 == 31);
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "22" + "'", str23, "22");
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "ja");
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Japanisch" + "'", str29, "Japanisch");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "ja" + "'", str30, "ja");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "de");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "de");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "de");
// flaky:         org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Deutsch" + "'", str36, "Deutsch");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(dateTimeZone40);
// flaky:         org.junit.Assert.assertTrue("'" + int42 + "' != '" + 36000000 + "'", int42 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2022 + "'", int44 == 2022);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "de");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "de");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "de");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 8 + "'", int50 == 8);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "Japanisch" + "'", str54, "Japanisch");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
    }

    @Test
    public void test02255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02255");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.weekOfWeekyear();
        java.util.TimeZone timeZone2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone2);
        java.lang.String str5 = dateTimeZone3.getName(31556995199999L);
        org.joda.time.Chronology chronology6 = iSOChronology0.withZone(dateTimeZone3);
        org.joda.time.DurationField durationField7 = iSOChronology0.hours();
        org.joda.time.DateTimeField dateTimeField8 = iSOChronology0.hourOfHalfday();
        long long10 = dateTimeField8.roundFloor(1644850006442L);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeZone3);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+10:00" + "'", str5, "+10:00");
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1644847200000L + "'", long10 == 1644847200000L);
    }

    @Test
    public void test02256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02256");
        java.lang.String[] strArray1 = java.util.TimeZone.getAvailableIDs(49714);
        org.junit.Assert.assertNotNull(strArray1);
    }

    @Test
    public void test02257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02257");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.centuryOfEra();
        org.joda.time.DurationField durationField3 = iSOChronology0.seconds();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology0.hourOfHalfday();
        long long9 = iSOChronology0.add((long) (short) 100, 1644849973425L, 2720);
        java.lang.String str10 = iSOChronology0.toString();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology0.hourOfHalfday();
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        long long15 = iSOChronology0.add(readablePeriod12, (long) 7, 53195125);
        java.util.TimeZone timeZone16 = null;
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forTimeZone(timeZone16);
        int int19 = dateTimeZone17.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime20 = org.joda.time.LocalDateTime.now(dateTimeZone17);
        int int21 = localDateTime20.getWeekyear();
        org.joda.time.LocalDateTime.Property property22 = localDateTime20.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime24 = localDateTime20.minusMillis(2022);
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.plus(readablePeriod25);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.withCenturyOfEra((int) (byte) 1);
        long long30 = iSOChronology0.set((org.joda.time.ReadablePartial) localDateTime28, 0L);
        org.joda.time.DurationField durationField31 = iSOChronology0.weeks();
        long long34 = durationField31.getMillis(53260460, 53267L);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 4473991927716100L + "'", long9 == 4473991927716100L);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "ISOChronology[+10:00]" + "'", str10, "ISOChronology[+10:00]");
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 7L + "'", long15 == 7L);
        org.junit.Assert.assertNotNull(dateTimeZone17);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 36000000 + "'", int19 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2022 + "'", int21 == 2022);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
// flaky:         org.junit.Assert.assertTrue("'" + long30 + "' != '" + (-58312775471564L) + "'", long30 == (-58312775471564L));
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 32211926208000000L + "'", long34 == 32211926208000000L);
    }

    @Test
    public void test02258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02258");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str3 = dateTimeZone1.getName(31556995199999L);
        java.lang.String str4 = dateTimeZone1.getID();
        java.util.TimeZone timeZone5 = dateTimeZone1.toTimeZone();
        timeZone5.setRawOffset(339);
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+10:00" + "'", str3, "+10:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+10:00" + "'", str4, "+10:00");
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "GMT+10:00");
    }

    @Test
    public void test02259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02259");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.yearOfEra();
        org.joda.time.DurationField durationField3 = iSOChronology0.minutes();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.weekyear();
        org.joda.time.DurationField durationField5 = iSOChronology0.centuries();
        org.joda.time.DateTimeField dateTimeField6 = iSOChronology0.centuryOfEra();
        org.joda.time.DurationField durationField7 = iSOChronology0.minutes();
        org.joda.time.DateTimeField dateTimeField8 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField9 = iSOChronology0.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology0.year();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology0.monthOfYear();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology0.minuteOfHour();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
    }

    @Test
    public void test02260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02260");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.centuryOfEra();
        org.joda.time.DurationField durationField3 = iSOChronology0.centuries();
        org.joda.time.DurationField durationField4 = iSOChronology0.hours();
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        int int8 = dateTimeZone6.getOffset(100L);
        long long10 = dateTimeZone6.nextTransition((long) (short) -1);
        org.joda.time.Chronology chronology11 = iSOChronology0.withZone(dateTimeZone6);
        org.joda.time.DurationField durationField12 = chronology11.centuries();
        boolean boolean13 = durationField12.isPrecise();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 36000000 + "'", int8 == 36000000);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test02261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02261");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.hourOfHalfday();
        java.lang.String str2 = iSOChronology0.toString();
        java.util.TimeZone timeZone3 = null;
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forTimeZone(timeZone3);
        int int6 = dateTimeZone4.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime7 = org.joda.time.LocalDateTime.now(dateTimeZone4);
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.DateTime dateTime9 = localDateTime7.toDateTime(readableInstant8);
        org.joda.time.Chronology chronology10 = dateTime9.getChronology();
        org.joda.time.DurationField durationField11 = chronology10.hours();
        org.joda.time.DurationField durationField12 = chronology10.months();
        org.joda.time.DateTimeField dateTimeField13 = chronology10.dayOfYear();
        java.util.TimeZone timeZone14 = null;
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forTimeZone(timeZone14);
        int int17 = dateTimeZone15.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime18 = org.joda.time.LocalDateTime.now(dateTimeZone15);
        int[] intArray21 = new int[] { (short) 0, (short) 0 };
        int int22 = dateTimeField13.getMinimumValue((org.joda.time.ReadablePartial) localDateTime18, intArray21);
        java.lang.String str24 = dateTimeField13.getAsShortText((long) 53166088);
        java.util.TimeZone timeZone25 = null;
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forTimeZone(timeZone25);
        int int28 = dateTimeZone26.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime29 = org.joda.time.LocalDateTime.now(dateTimeZone26);
        int int30 = localDateTime29.getWeekyear();
        org.joda.time.DurationFieldType durationFieldType31 = org.joda.time.DurationFieldType.days();
        org.joda.time.LocalDateTime localDateTime33 = localDateTime29.withFieldAdded(durationFieldType31, 53166088);
        java.util.Locale locale34 = java.util.Locale.ROOT;
        java.lang.String str35 = dateTimeField13.getAsShortText((org.joda.time.ReadablePartial) localDateTime33, locale34);
        java.util.TimeZone timeZone36 = null;
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forTimeZone(timeZone36);
        int int39 = dateTimeZone37.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime40 = org.joda.time.LocalDateTime.now(dateTimeZone37);
        int int41 = localDateTime40.getWeekyear();
        boolean boolean42 = localDateTime33.isEqual((org.joda.time.ReadablePartial) localDateTime40);
        int[] intArray44 = iSOChronology0.get((org.joda.time.ReadablePartial) localDateTime40, (long) 53166088);
        org.joda.time.DateTimeField dateTimeField45 = iSOChronology0.hourOfHalfday();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ISOChronology[+10:00]" + "'", str2, "ISOChronology[+10:00]");
        org.junit.Assert.assertNotNull(dateTimeZone4);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 36000000 + "'", int6 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
// flaky:         org.junit.Assert.assertTrue("'" + int17 + "' != '" + 36000000 + "'", int17 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[0, 0]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "2" + "'", str24, "2");
        org.junit.Assert.assertNotNull(dateTimeZone26);
// flaky:         org.junit.Assert.assertTrue("'" + int28 + "' != '" + 36000000 + "'", int28 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2022 + "'", int30 == 2022);
        org.junit.Assert.assertNotNull(durationFieldType31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "");
// flaky:         org.junit.Assert.assertEquals("'" + str35 + "' != '" + "347" + "'", str35, "347");
        org.junit.Assert.assertNotNull(dateTimeZone37);
// flaky:         org.junit.Assert.assertTrue("'" + int39 + "' != '" + 36000000 + "'", int39 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 2022 + "'", int41 == 2022);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(intArray44);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[1970, 1, 2, 2766088]");
        org.junit.Assert.assertNotNull(dateTimeField45);
    }

    @Test
    public void test02262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02262");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forID("2831323");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The datetime zone id '2831323' is not recognised");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02263");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.hourOfHalfday();
        java.lang.String str2 = iSOChronology0.toString();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.era();
        org.joda.time.DurationField durationField4 = iSOChronology0.centuries();
        org.joda.time.DurationField durationField5 = iSOChronology0.weeks();
        org.joda.time.DateTimeField dateTimeField6 = iSOChronology0.era();
        org.joda.time.DateTimeField dateTimeField7 = iSOChronology0.dayOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = dateTimeField7.getType();
        java.lang.String str9 = dateTimeFieldType8.getName();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ISOChronology[+10:00]" + "'", str2, "ISOChronology[+10:00]");
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "dayOfYear" + "'", str9, "dayOfYear");
    }

    @Test
    public void test02264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02264");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.centuryOfEra();
        org.joda.time.DurationField durationField3 = iSOChronology0.eras();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.year();
        java.util.Locale locale6 = java.util.Locale.GERMAN;
        java.lang.String str7 = locale6.getDisplayScript();
        java.lang.String str9 = locale6.getExtension('x');
        java.util.Set<java.lang.Character> charSet10 = locale6.getExtensionKeys();
        java.lang.String str11 = dateTimeField4.getAsText(1645454774909L, locale6);
        boolean boolean12 = locale6.hasExtensions();
        java.util.Locale locale13 = java.util.Locale.JAPANESE;
        java.lang.String str14 = locale13.getDisplayLanguage();
        java.lang.String str15 = locale13.getISO3Language();
        java.lang.String str16 = locale13.getISO3Language();
        java.lang.String str17 = locale13.getDisplayVariant();
        java.util.Locale locale18 = java.util.Locale.GERMAN;
        java.util.Locale locale19 = java.util.Locale.GERMAN;
        java.lang.String str20 = locale18.getDisplayCountry(locale19);
        java.lang.String str21 = locale13.getDisplayCountry(locale19);
        java.lang.String str22 = locale6.getDisplayCountry(locale19);
        java.lang.String str23 = locale19.getISO3Language();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "de");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(charSet10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "2022" + "'", str11, "2022");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Japanisch" + "'", str14, "Japanisch");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "jpn" + "'", str15, "jpn");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "jpn" + "'", str16, "jpn");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "de");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "de");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "deu" + "'", str23, "deu");
    }

    @Test
    public void test02265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02265");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.DateTime dateTime6 = localDateTime4.toDateTime(readableInstant5);
        java.util.TimeZone timeZone7 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forTimeZone(timeZone7);
        int int10 = dateTimeZone8.getOffset(100L);
        org.joda.time.DateTime dateTime11 = localDateTime4.toDateTime(dateTimeZone8);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime4.withYear(52);
        org.joda.time.Chronology chronology14 = localDateTime13.getChronology();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime13.withYear((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime13.minusSeconds(2827402);
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime18);
        java.util.TimeZone timeZone20 = null;
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forTimeZone(timeZone20);
        int int23 = dateTimeZone21.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime24 = org.joda.time.LocalDateTime.now(dateTimeZone21);
        int int25 = localDateTime24.getWeekyear();
        org.joda.time.LocalDateTime.Property property26 = localDateTime24.minuteOfHour();
        org.joda.time.LocalDateTime.Property property27 = localDateTime24.dayOfYear();
        java.util.TimeZone timeZone28 = null;
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forTimeZone(timeZone28);
        int int31 = dateTimeZone29.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime32 = org.joda.time.LocalDateTime.now(dateTimeZone29);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray33 = localDateTime32.getFieldTypes();
        int int34 = property27.compareTo((org.joda.time.ReadablePartial) localDateTime32);
        int int35 = localDateTime32.getYearOfCentury();
        org.joda.time.DateTime dateTime36 = localDateTime32.toDateTime();
        int int37 = localDateTime32.getYear();
        org.joda.time.DateTime dateTime38 = localDateTime32.toDateTime();
        org.joda.time.DateTime dateTime39 = localDateTime18.toDateTime((org.joda.time.ReadableInstant) dateTime38);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime41 = localDateTime18.withMillisOfSecond(2846870);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2846870 for millisOfSecond must be in the range [0,999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 36000000 + "'", int3 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTimeZone8);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 36000000 + "'", int10 == 36000000);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(dateTimeZone21);
// flaky:         org.junit.Assert.assertTrue("'" + int23 + "' != '" + 36000000 + "'", int23 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2022 + "'", int25 == 2022);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateTimeZone29);
// flaky:         org.junit.Assert.assertTrue("'" + int31 + "' != '" + 36000000 + "'", int31 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 22 + "'", int35 == 22);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2022 + "'", int37 == 2022);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime39);
    }

    @Test
    public void test02266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02266");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime5 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusMinutes((int) ' ');
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withYearOfCentury((int) (byte) 10);
        java.util.TimeZone timeZone10 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        int int13 = dateTimeZone11.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime14 = org.joda.time.LocalDateTime.now(dateTimeZone11);
        org.joda.time.LocalDateTime localDateTime15 = org.joda.time.LocalDateTime.now(dateTimeZone11);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.withMillisOfSecond((int) '4');
        org.joda.time.LocalDateTime localDateTime18 = localDateTime9.withFields((org.joda.time.ReadablePartial) localDateTime15);
        org.joda.time.DurationFieldType durationFieldType19 = org.joda.time.DurationFieldType.weekyears();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime9.withFieldAdded(durationFieldType19, 4);
        org.joda.time.LocalDateTime.Property property22 = localDateTime9.yearOfCentury();
        java.lang.String str23 = property22.getName();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 36000000 + "'", int3 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone11);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 36000000 + "'", int13 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(durationFieldType19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "yearOfCentury" + "'", str23, "yearOfCentury");
    }

    @Test
    public void test02267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02267");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.DateTime dateTime6 = localDateTime4.toDateTime(readableInstant5);
        org.joda.time.Chronology chronology7 = dateTime6.getChronology();
        org.joda.time.DurationField durationField8 = chronology7.hours();
        org.joda.time.DurationField durationField9 = chronology7.months();
        org.joda.time.DateTimeField dateTimeField10 = chronology7.dayOfYear();
        java.util.TimeZone timeZone11 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        int int14 = dateTimeZone12.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime15 = org.joda.time.LocalDateTime.now(dateTimeZone12);
        int[] intArray18 = new int[] { (short) 0, (short) 0 };
        int int19 = dateTimeField10.getMinimumValue((org.joda.time.ReadablePartial) localDateTime15, intArray18);
        boolean boolean20 = dateTimeField10.isLenient();
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.minusMillis(52);
        java.util.Locale.Builder builder25 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder28 = builder25.setExtension('x', "jpn");
        java.util.Locale locale29 = builder25.build();
        java.util.Locale locale30 = builder25.build();
        java.lang.String str31 = dateTimeField10.getAsShortText((org.joda.time.ReadablePartial) localDateTime21, (int) 'a', locale30);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime21.withYear(2798859);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime21.withYearOfEra(53186052);
        int int36 = localDateTime21.getHourOfDay();
        org.joda.time.LocalDateTime.Property property37 = localDateTime21.era();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 36000000 + "'", int3 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeZone12);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 36000000 + "'", int14 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[0, 0]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "97" + "'", str31, "97");
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime35);
// flaky:         org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(property37);
    }

    @Test
    public void test02268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02268");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.DateTime dateTime6 = localDateTime4.toDateTime(readableInstant5);
        java.util.TimeZone timeZone7 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forTimeZone(timeZone7);
        int int10 = dateTimeZone8.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now(dateTimeZone8);
        org.joda.time.LocalDateTime localDateTime12 = org.joda.time.LocalDateTime.now(dateTimeZone8);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.minusYears(2022);
        org.joda.time.LocalDateTime.Property property15 = localDateTime14.era();
        int int16 = localDateTime4.compareTo((org.joda.time.ReadablePartial) localDateTime14);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = localDateTime4.getFieldType(1);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        int int20 = localDateTime4.indexOf(dateTimeFieldType19);
        org.joda.time.LocalDateTime.Property property21 = localDateTime4.dayOfMonth();
        int int22 = property21.get();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 36000000 + "'", int3 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTimeZone8);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 36000000 + "'", int10 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(property21);
// flaky:         org.junit.Assert.assertTrue("'" + int22 + "' != '" + 22 + "'", int22 == 22);
    }

    @Test
    public void test02269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02269");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime5 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusMinutes((int) ' ');
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.LocalDateTime localDateTime9 = localDateTime5.plus(readablePeriod8);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime11 = localDateTime9.withDayOfMonth(53269515);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 53269515 for dayOfMonth must be in the range [1,28]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 36000000 + "'", int3 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
    }

    @Test
    public void test02270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02270");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.hourOfHalfday();
        java.lang.String str2 = iSOChronology0.toString();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.era();
        org.joda.time.DurationField durationField4 = iSOChronology0.centuries();
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        long long8 = iSOChronology0.add(readablePeriod5, (long) 2022, (int) (byte) 100);
        org.joda.time.DateTimeField dateTimeField9 = iSOChronology0.dayOfYear();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology0.yearOfEra();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology0.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField13 = iSOChronology0.clockhourOfHalfday();
        org.joda.time.DurationField durationField14 = dateTimeField13.getDurationField();
        int int16 = durationField14.getValue(1645454796128L);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ISOChronology[+10:00]" + "'", str2, "ISOChronology[+10:00]");
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 2022L + "'", long8 == 2022L);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 457070 + "'", int16 == 457070);
    }

    @Test
    public void test02271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02271");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet1 = locale0.getExtensionKeys();
        java.util.Iterator<java.lang.Character> charItor2 = charSet1.iterator();
        java.util.ArrayList[] arrayListArray4 = new java.util.ArrayList[0];
        @SuppressWarnings("unchecked")
        java.util.ArrayList<java.util.Locale.LanguageRange>[] languageRangeListArray5 = (java.util.ArrayList<java.util.Locale.LanguageRange>[]) arrayListArray4;
        java.util.ArrayList<java.util.Locale.LanguageRange>[] languageRangeListArray6 = charSet1.toArray((java.util.ArrayList<java.util.Locale.LanguageRange>[]) arrayListArray4);
        java.util.TimeZone timeZone7 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forTimeZone(timeZone7);
        int int10 = dateTimeZone8.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now(dateTimeZone8);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray12 = localDateTime11.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.hourOfDay();
        int int14 = localDateTime11.get(dateTimeFieldType13);
        org.joda.time.LocalDateTime.Property property15 = localDateTime11.dayOfWeek();
        org.joda.time.LocalDateTime.Property property16 = localDateTime11.weekOfWeekyear();
        boolean boolean17 = charSet1.remove((java.lang.Object) localDateTime11);
        java.lang.Object[] objArray18 = charSet1.toArray();
        java.lang.reflect.GenericDeclaration[] genericDeclarationArray19 = new java.lang.reflect.GenericDeclaration[] {};
        java.lang.reflect.GenericDeclaration[] genericDeclarationArray20 = charSet1.toArray(genericDeclarationArray19);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet1);
        org.junit.Assert.assertNotNull(charItor2);
        org.junit.Assert.assertNotNull(arrayListArray4);
        org.junit.Assert.assertNotNull(languageRangeListArray5);
        org.junit.Assert.assertNotNull(languageRangeListArray6);
        org.junit.Assert.assertNotNull(dateTimeZone8);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 36000000 + "'", int10 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray12);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[]");
        org.junit.Assert.assertNotNull(genericDeclarationArray19);
        org.junit.Assert.assertNotNull(genericDeclarationArray20);
    }

    @Test
    public void test02272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02272");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.yearOfEra();
        org.joda.time.DurationField durationField3 = iSOChronology0.weeks();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology0.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField6 = iSOChronology0.minuteOfHour();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
    }

    @Test
    public void test02273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02273");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        int int5 = localDateTime4.getWeekyear();
        org.joda.time.DurationFieldType durationFieldType6 = org.joda.time.DurationFieldType.days();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime4.withFieldAdded(durationFieldType6, 53166088);
        org.joda.time.chrono.ISOChronology iSOChronology9 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology9.hourOfHalfday();
        java.lang.String str11 = iSOChronology9.toString();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology9.era();
        org.joda.time.DurationField durationField13 = iSOChronology9.centuries();
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        long long17 = iSOChronology9.add(readablePeriod14, (long) 2022, (int) (byte) 100);
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology9.dayOfYear();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology9.year();
        boolean boolean20 = durationFieldType6.isSupported((org.joda.time.Chronology) iSOChronology9);
        org.joda.time.DurationField durationField21 = iSOChronology9.centuries();
        long long24 = durationField21.getDifferenceAsLong(1645454774909L, 12626282332800031L);
        boolean boolean25 = durationField21.isPrecise();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 36000000 + "'", int3 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2022 + "'", int5 == 2022);
        org.junit.Assert.assertNotNull(durationFieldType6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(iSOChronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "ISOChronology[+10:00]" + "'", str11, "ISOChronology[+10:00]");
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 2022L + "'", long17 == 2022L);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-4000L) + "'", long24 == (-4000L));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test02274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02274");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.centuryOfEra();
        org.joda.time.DurationField durationField3 = iSOChronology0.seconds();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.clockhourOfDay();
        org.joda.time.Chronology chronology5 = iSOChronology0.withUTC();
        org.joda.time.DurationField durationField6 = iSOChronology0.days();
        org.joda.time.DurationField durationField7 = iSOChronology0.millis();
        org.joda.time.DurationField durationField8 = iSOChronology0.millis();
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        long long12 = iSOChronology0.add(readablePeriod9, (long) 46, 817);
        // The following exception was thrown during execution in test generation
        try {
            long long17 = iSOChronology0.getDateTimeMillis(2827556, 49678853, 2929, 2841311);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 49678853 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 46L + "'", long12 == 46L);
    }

    @Test
    public void test02275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02275");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.hourOfHalfday();
        long long7 = iSOChronology0.getDateTimeMillis((-1), 8, 3, 365);
        org.joda.time.DurationField durationField8 = iSOChronology0.seconds();
        java.lang.String str9 = iSOChronology0.toString();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology0.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology0.yearOfEra();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
// flaky:         org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-62180301599635L) + "'", long7 == (-62180301599635L));
        org.junit.Assert.assertNotNull(durationField8);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "ISOChronology[+10:00]" + "'", str9, "ISOChronology[+10:00]");
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
    }

    @Test
    public void test02276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02276");
        java.util.Locale locale0 = java.util.Locale.GERMAN;
        java.util.Locale locale1 = java.util.Locale.GERMAN;
        java.lang.String str2 = locale0.getDisplayCountry(locale1);
        java.util.Locale locale3 = locale0.stripExtensions();
        java.lang.String str4 = locale0.getDisplayName();
        java.util.Locale locale5 = java.util.Locale.PRC;
        java.lang.String str6 = locale0.getDisplayScript(locale5);
        java.util.TimeZone timeZone7 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forTimeZone(timeZone7);
        int int10 = dateTimeZone8.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now(dateTimeZone8);
        int int12 = localDateTime11.getWeekyear();
        org.joda.time.LocalDateTime.Property property13 = localDateTime11.millisOfDay();
        java.util.Locale locale14 = java.util.Locale.GERMAN;
        java.util.Locale locale15 = java.util.Locale.GERMAN;
        java.lang.String str16 = locale14.getDisplayCountry(locale15);
        java.util.Locale locale17 = locale14.stripExtensions();
        int int18 = property13.getMaximumShortTextLength(locale14);
        java.lang.String str19 = locale14.getDisplayVariant();
        java.lang.String str20 = locale5.getDisplayScript(locale14);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str22 = locale5.getExtension('#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed extension key: #");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "de");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "de");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "de");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Deutsch" + "'", str4, "Deutsch");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(dateTimeZone8);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 36000000 + "'", int10 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2022 + "'", int12 == 2022);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "de");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "de");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "de");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 8 + "'", int18 == 8);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
    }

    @Test
    public void test02277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02277");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setExtension('x', "jpn");
        java.util.Locale locale4 = java.util.Locale.GERMAN;
        java.util.Locale locale5 = java.util.Locale.GERMAN;
        java.lang.String str6 = locale4.getDisplayCountry(locale5);
        java.util.Locale locale7 = locale4.stripExtensions();
        java.lang.String str8 = locale4.getDisplayName();
        java.util.Locale.Builder builder9 = builder3.setLocale(locale4);
        java.util.Locale.Builder builder12 = builder9.setUnicodeLocaleKeyword("22", "deu");
        java.util.Locale.Builder builder13 = builder9.clear();
        java.util.Locale.Builder builder14 = builder9.clear();
        java.util.Locale.Builder builder16 = builder14.setVariant("2812140");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "de");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "de");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Deutsch" + "'", str8, "Deutsch");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test02278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02278");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.centuryOfEra();
        org.joda.time.DurationField durationField3 = iSOChronology0.seconds();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology0.hourOfHalfday();
        long long9 = iSOChronology0.add((long) (short) 100, 1644849973425L, 2720);
        java.lang.String str10 = iSOChronology0.toString();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology0.hourOfHalfday();
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        long long15 = iSOChronology0.add(readablePeriod12, (long) 7, 53195125);
        java.util.TimeZone timeZone16 = null;
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forTimeZone(timeZone16);
        int int19 = dateTimeZone17.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime20 = org.joda.time.LocalDateTime.now(dateTimeZone17);
        int int21 = localDateTime20.getWeekyear();
        org.joda.time.LocalDateTime.Property property22 = localDateTime20.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime24 = localDateTime20.minusMillis(2022);
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.plus(readablePeriod25);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.withCenturyOfEra((int) (byte) 1);
        long long30 = iSOChronology0.set((org.joda.time.ReadablePartial) localDateTime28, 0L);
        org.joda.time.DurationField durationField31 = iSOChronology0.weeks();
        boolean boolean32 = durationField31.isSupported();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 4473991927716100L + "'", long9 == 4473991927716100L);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "ISOChronology[+10:00]" + "'", str10, "ISOChronology[+10:00]");
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 7L + "'", long15 == 7L);
        org.junit.Assert.assertNotNull(dateTimeZone17);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 36000000 + "'", int19 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2022 + "'", int21 == 2022);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
// flaky:         org.junit.Assert.assertTrue("'" + long30 + "' != '" + (-58312775470614L) + "'", long30 == (-58312775470614L));
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
    }

    @Test
    public void test02279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02279");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DurationField durationField2 = durationFieldType0.getField(chronology1);
        long long5 = durationField2.subtract(10L, (int) (short) 0);
        long long7 = durationField2.getValueAsLong((long) 1);
        long long10 = durationField2.getValueAsLong(100L, (long) (short) -1);
        java.lang.String str11 = durationField2.toString();
        java.lang.String str12 = durationField2.getName();
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 10L + "'", long5 == 10L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "DurationField[centuries]" + "'", str11, "DurationField[centuries]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "centuries" + "'", str12, "centuries");
    }

    @Test
    public void test02280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02280");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(28800008L);
        int int2 = localDateTime1.getMonthOfYear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType4 = localDateTime1.getFieldType((int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 100");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
    }

    @Test
    public void test02281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02281");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        int int5 = localDateTime4.getWeekyear();
        org.joda.time.LocalDateTime.Property property6 = localDateTime4.minuteOfHour();
        org.joda.time.LocalDateTime.Property property7 = localDateTime4.dayOfYear();
        java.util.TimeZone timeZone8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        int int11 = dateTimeZone9.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime12 = org.joda.time.LocalDateTime.now(dateTimeZone9);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray13 = localDateTime12.getFieldTypes();
        int int14 = property7.compareTo((org.joda.time.ReadablePartial) localDateTime12);
        int int15 = localDateTime12.getCenturyOfEra();
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.LocalDateTime localDateTime17 = localDateTime12.plus(readablePeriod16);
        org.joda.time.LocalDateTime.Property property18 = localDateTime12.hourOfDay();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime12.minusYears(2818);
        java.util.TimeZone timeZone21 = null;
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forTimeZone(timeZone21);
        int int24 = dateTimeZone22.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime25 = org.joda.time.LocalDateTime.now(dateTimeZone22);
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.DateTime dateTime27 = localDateTime25.toDateTime(readableInstant26);
        java.util.TimeZone timeZone28 = null;
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forTimeZone(timeZone28);
        int int31 = dateTimeZone29.getOffset(100L);
        org.joda.time.DateTime dateTime32 = localDateTime25.toDateTime(dateTimeZone29);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime25.withYear(52);
        java.util.Locale locale36 = java.util.Locale.ITALIAN;
        java.lang.String str37 = localDateTime34.toString("1", locale36);
        org.joda.time.chrono.ISOChronology iSOChronology38 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField39 = iSOChronology38.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField40 = iSOChronology38.yearOfEra();
        org.joda.time.DateTimeField dateTimeField41 = iSOChronology38.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField42 = iSOChronology38.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField43 = iSOChronology38.dayOfYear();
        java.util.TimeZone timeZone44 = null;
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forTimeZone(timeZone44);
        java.lang.String str47 = dateTimeZone45.getName(31556995199999L);
        java.lang.String str48 = dateTimeZone45.getID();
        org.joda.time.Chronology chronology49 = iSOChronology38.withZone(dateTimeZone45);
        org.joda.time.DateTime dateTime50 = localDateTime34.toDateTime(dateTimeZone45);
        org.joda.time.Chronology chronology51 = localDateTime34.getChronology();
        int int52 = localDateTime20.compareTo((org.joda.time.ReadablePartial) localDateTime34);
        org.joda.time.Chronology chronology53 = localDateTime20.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            int int55 = localDateTime20.getValue(49678853);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 49678853");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 36000000 + "'", int3 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2022 + "'", int5 == 2022);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTimeZone9);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 36000000 + "'", int11 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 20 + "'", int15 == 20);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(dateTimeZone22);
// flaky:         org.junit.Assert.assertTrue("'" + int24 + "' != '" + 36000000 + "'", int24 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTimeZone29);
// flaky:         org.junit.Assert.assertTrue("'" + int31 + "' != '" + 36000000 + "'", int31 == 36000000);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "it");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "1" + "'", str37, "1");
        org.junit.Assert.assertNotNull(iSOChronology38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTimeZone45);
// flaky:         org.junit.Assert.assertEquals("'" + str47 + "' != '" + "+10:00" + "'", str47, "+10:00");
// flaky:         org.junit.Assert.assertEquals("'" + str48 + "' != '" + "+10:00" + "'", str48, "+10:00");
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertNotNull(chronology53);
    }

    @Test
    public void test02282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02282");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.yearOfEra();
        org.joda.time.DurationField durationField3 = iSOChronology0.minutes();
        org.joda.time.DurationField durationField4 = iSOChronology0.months();
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology0.era();
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        long long9 = iSOChronology0.add(readablePeriod6, 1645454873203L, (int) '4');
        // The following exception was thrown during execution in test generation
        try {
            long long14 = iSOChronology0.getDateTimeMillis(49681802, 53324, 2814286, 1456);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 53324 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1645454873203L + "'", long9 == 1645454873203L);
    }

    @Test
    public void test02283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02283");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime(53269277, 2814286, 16060, 188, 49687252, 4550, 53310009);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 188 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02284");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet1 = locale0.getExtensionKeys();
        java.util.Iterator<java.lang.Character> charItor2 = charSet1.iterator();
        java.util.Locale locale3 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet4 = locale3.getExtensionKeys();
        java.util.Iterator<java.lang.Character> charItor5 = charSet4.iterator();
        boolean boolean6 = charSet1.containsAll((java.util.Collection<java.lang.Character>) charSet4);
        java.util.Locale.Builder builder7 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder10 = builder7.setExtension('x', "jpn");
        java.util.Locale locale11 = java.util.Locale.GERMAN;
        java.util.Locale locale12 = java.util.Locale.GERMAN;
        java.lang.String str13 = locale11.getDisplayCountry(locale12);
        java.util.Locale locale14 = locale11.stripExtensions();
        java.lang.String str15 = locale11.getDisplayName();
        java.util.Locale.Builder builder16 = builder10.setLocale(locale11);
        java.util.Locale.Builder builder18 = builder16.setLanguageTag("Februar");
        boolean boolean19 = charSet4.remove((java.lang.Object) builder18);
        java.util.Locale.Builder builder20 = builder18.clear();
        java.util.Locale.Builder builder22 = builder20.setVariant("2803637");
        java.util.Locale.Builder builder23 = builder20.clearExtensions();
        org.joda.time.chrono.ISOChronology iSOChronology24 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField25 = iSOChronology24.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField26 = iSOChronology24.yearOfEra();
        org.joda.time.DurationField durationField27 = iSOChronology24.minutes();
        org.joda.time.DateTimeField dateTimeField28 = iSOChronology24.weekyear();
        org.joda.time.DurationField durationField29 = iSOChronology24.centuries();
        org.joda.time.DateTimeField dateTimeField30 = iSOChronology24.centuryOfEra();
        org.joda.time.DurationField durationField31 = iSOChronology24.minutes();
        org.joda.time.DateTimeField dateTimeField32 = iSOChronology24.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField33 = iSOChronology24.centuryOfEra();
        org.joda.time.DurationField durationField34 = iSOChronology24.months();
        org.joda.time.Chronology chronology35 = iSOChronology24.withUTC();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime((java.lang.Object) builder23, chronology35);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: java.util.Locale$Builder");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet1);
        org.junit.Assert.assertNotNull(charItor2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet4);
        org.junit.Assert.assertNotNull(charItor5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "de");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "de");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "de");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Deutsch" + "'", str15, "Deutsch");
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(iSOChronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(chronology35);
    }

    @Test
    public void test02285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02285");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.centuryOfEra();
        org.joda.time.DurationField durationField3 = iSOChronology0.seconds();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology0.hourOfHalfday();
        java.util.TimeZone timeZone6 = null;
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forTimeZone(timeZone6);
        int int9 = dateTimeZone7.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime10 = org.joda.time.LocalDateTime.now(dateTimeZone7);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray11 = localDateTime10.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.hourOfDay();
        int int13 = localDateTime10.get(dateTimeFieldType12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime10.minusWeeks(1);
        long long17 = iSOChronology0.set((org.joda.time.ReadablePartial) localDateTime15, (long) 0);
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology0.secondOfDay();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology0.yearOfEra();
        org.joda.time.DurationField durationField20 = iSOChronology0.months();
        org.joda.time.DurationField durationField21 = iSOChronology0.millis();
        org.joda.time.DateTimeField dateTimeField22 = iSOChronology0.hourOfHalfday();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeZone7);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 36000000 + "'", int9 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray11);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(localDateTime15);
// flaky:         org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1644850131714L + "'", long17 == 1644850131714L);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
    }

    @Test
    public void test02286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02286");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.yearOfEra();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.weekOfWeekyear();
        org.joda.time.DurationField durationField5 = iSOChronology0.weekyears();
        org.joda.time.Chronology chronology6 = iSOChronology0.withUTC();
        org.joda.time.DateTimeField dateTimeField7 = iSOChronology0.halfdayOfDay();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
    }

    @Test
    public void test02287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02287");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setExtension('x', "jpn");
        java.util.Locale locale4 = builder3.build();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder6 = builder3.addUnicodeLocaleAttribute("GMT-01:00");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: GMT-01:00 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
    }

    @Test
    public void test02288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02288");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.yearOfEra();
        org.joda.time.DurationField durationField3 = iSOChronology0.minutes();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.weekyear();
        org.joda.time.DurationField durationField5 = iSOChronology0.centuries();
        org.joda.time.DateTimeField dateTimeField6 = iSOChronology0.centuryOfEra();
        java.util.TimeZone timeZone7 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forTimeZone(timeZone7);
        java.lang.String str10 = dateTimeZone8.getName(31556995199999L);
        org.joda.time.Chronology chronology11 = iSOChronology0.withZone(dateTimeZone8);
        org.joda.time.DurationField durationField12 = iSOChronology0.weekyears();
        org.joda.time.DateTimeField dateTimeField13 = iSOChronology0.dayOfWeek();
        org.joda.time.DurationField durationField14 = iSOChronology0.seconds();
        org.joda.time.chrono.ISOChronology iSOChronology15 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology15.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology15.centuryOfEra();
        org.joda.time.DurationField durationField18 = iSOChronology15.seconds();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology15.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField20 = iSOChronology15.hourOfHalfday();
        java.util.TimeZone timeZone21 = null;
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forTimeZone(timeZone21);
        int int24 = dateTimeZone22.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime25 = org.joda.time.LocalDateTime.now(dateTimeZone22);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray26 = localDateTime25.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.hourOfDay();
        int int28 = localDateTime25.get(dateTimeFieldType27);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime25.minusWeeks(1);
        long long32 = iSOChronology15.set((org.joda.time.ReadablePartial) localDateTime30, (long) 0);
        org.joda.time.DateTimeField dateTimeField33 = iSOChronology15.secondOfDay();
        org.joda.time.DateTimeField dateTimeField34 = iSOChronology15.yearOfEra();
        org.joda.time.DateTimeField dateTimeField35 = iSOChronology15.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField36 = iSOChronology15.year();
        org.joda.time.DurationField durationField37 = iSOChronology15.weeks();
        int int38 = durationField14.compareTo(durationField37);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeZone8);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+10:00" + "'", str10, "+10:00");
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(iSOChronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeZone22);
// flaky:         org.junit.Assert.assertTrue("'" + int24 + "' != '" + 36000000 + "'", int24 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray26);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
// flaky:         org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(localDateTime30);
// flaky:         org.junit.Assert.assertTrue("'" + long32 + "' != '" + 1644850131745L + "'", long32 == 1644850131745L);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
    }

    @Test
    public void test02289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02289");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.minuteOfHour();
        org.joda.time.Chronology chronology4 = iSOChronology0.withUTC();
        org.joda.time.DurationField durationField5 = iSOChronology0.eras();
        java.util.TimeZone timeZone6 = null;
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forTimeZone(timeZone6);
        int int9 = dateTimeZone7.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime10 = org.joda.time.LocalDateTime.now(dateTimeZone7);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray11 = localDateTime10.getFieldTypes();
        int int12 = localDateTime10.getCenturyOfEra();
        org.joda.time.LocalDateTime.Property property13 = localDateTime10.year();
        int[] intArray15 = iSOChronology0.get((org.joda.time.ReadablePartial) localDateTime10, 1645454769600L);
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology0.dayOfWeek();
        // The following exception was thrown during execution in test generation
        try {
            long long22 = iSOChronology0.getDateTimeMillis(1644850023172L, 49682284, 2835142, 37, 2815922);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 49682284 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeZone7);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 36000000 + "'", int9 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 20 + "'", int12 == 20);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(intArray15);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[2022, 2, 22, 2769600]");
        org.junit.Assert.assertNotNull(dateTimeField16);
    }

    @Test
    public void test02290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02290");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        int int5 = localDateTime4.getWeekyear();
        org.joda.time.LocalDateTime.Property property6 = localDateTime4.millisOfDay();
        java.util.TimeZone timeZone7 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forTimeZone(timeZone7);
        int int10 = dateTimeZone8.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now(dateTimeZone8);
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.DateTime dateTime13 = localDateTime11.toDateTime(readableInstant12);
        java.util.TimeZone timeZone14 = null;
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forTimeZone(timeZone14);
        int int17 = dateTimeZone15.getOffset(100L);
        org.joda.time.DateTime dateTime18 = localDateTime11.toDateTime(dateTimeZone15);
        int int19 = property6.compareTo((org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.LocalDateTime localDateTime20 = property6.roundHalfEvenCopy();
        org.joda.time.LocalDateTime.Property property21 = localDateTime20.centuryOfEra();
        int int22 = property21.get();
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = property21.getFieldType();
        java.util.TimeZone timeZone25 = null;
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forTimeZone(timeZone25);
        int int28 = dateTimeZone26.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime29 = org.joda.time.LocalDateTime.now(dateTimeZone26);
        org.joda.time.LocalDateTime localDateTime30 = org.joda.time.LocalDateTime.now(dateTimeZone26);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime30.minusMinutes((int) ' ');
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        org.joda.time.LocalDateTime localDateTime34 = localDateTime30.plus(readablePeriod33);
        org.joda.time.LocalDateTime.Property property35 = localDateTime30.dayOfMonth();
        boolean boolean36 = property35.isLeap();
        java.util.TimeZone timeZone37 = null;
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forTimeZone(timeZone37);
        int int40 = dateTimeZone38.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime41 = org.joda.time.LocalDateTime.now(dateTimeZone38);
        org.joda.time.ReadableInstant readableInstant42 = null;
        org.joda.time.DateTime dateTime43 = localDateTime41.toDateTime(readableInstant42);
        org.joda.time.Chronology chronology44 = dateTime43.getChronology();
        org.joda.time.DurationField durationField45 = chronology44.hours();
        org.joda.time.DurationField durationField46 = chronology44.months();
        org.joda.time.DateTimeField dateTimeField47 = chronology44.dayOfYear();
        java.util.TimeZone timeZone48 = null;
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.forTimeZone(timeZone48);
        int int51 = dateTimeZone49.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime52 = org.joda.time.LocalDateTime.now(dateTimeZone49);
        int[] intArray55 = new int[] { (short) 0, (short) 0 };
        int int56 = dateTimeField47.getMinimumValue((org.joda.time.ReadablePartial) localDateTime52, intArray55);
        java.lang.String str58 = dateTimeField47.getAsShortText((long) 53166088);
        java.util.Locale locale60 = java.util.Locale.JAPANESE;
        java.lang.String str61 = locale60.getDisplayLanguage();
        java.util.Locale locale62 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet63 = locale62.getExtensionKeys();
        java.lang.String str64 = locale60.getDisplayLanguage(locale62);
        java.lang.String str65 = dateTimeField47.getAsText(0L, locale62);
        java.lang.String str66 = property35.getAsText(locale62);
        org.joda.time.tz.NameProvider nameProvider67 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale68 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet69 = locale68.getExtensionKeys();
        java.lang.String str72 = nameProvider67.getShortName(locale68, "Koordinierte Universalzeit", "+00:00");
        java.util.Locale locale73 = java.util.Locale.GERMAN;
        java.lang.String str76 = nameProvider67.getShortName(locale73, "53167803", "jpn");
        java.util.Locale locale77 = null;
        java.lang.String str78 = locale73.getDisplayCountry(locale77);
        java.lang.String str79 = locale62.getDisplayVariant(locale73);
        org.joda.time.LocalDateTime localDateTime80 = property21.setCopy("53270", locale62);
        int int81 = property21.getMaximumValue();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 36000000 + "'", int3 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2022 + "'", int5 == 2022);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTimeZone8);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 36000000 + "'", int10 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
// flaky:         org.junit.Assert.assertTrue("'" + int17 + "' != '" + 36000000 + "'", int17 == 36000000);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 20 + "'", int22 == 20);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertNotNull(dateTimeZone26);
// flaky:         org.junit.Assert.assertTrue("'" + int28 + "' != '" + 36000000 + "'", int28 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(dateTimeZone38);
// flaky:         org.junit.Assert.assertTrue("'" + int40 + "' != '" + 36000000 + "'", int40 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(durationField45);
        org.junit.Assert.assertNotNull(durationField46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(dateTimeZone49);
// flaky:         org.junit.Assert.assertTrue("'" + int51 + "' != '" + 36000000 + "'", int51 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[0, 0]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
// flaky:         org.junit.Assert.assertEquals("'" + str58 + "' != '" + "2" + "'", str58, "2");
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "Japanisch" + "'", str61, "Japanisch");
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "\uc77c\ubcf8\uc5b4" + "'", str64, "\uc77c\ubcf8\uc5b4");
// flaky:         org.junit.Assert.assertEquals("'" + str65 + "' != '" + "1" + "'", str65, "1");
// flaky:         org.junit.Assert.assertEquals("'" + str66 + "' != '" + "22" + "'", str66, "22");
        org.junit.Assert.assertNotNull(nameProvider67);
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet69);
        org.junit.Assert.assertNull(str72);
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "de");
        org.junit.Assert.assertNull(str76);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "" + "'", str78, "");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "" + "'", str79, "");
        org.junit.Assert.assertNotNull(localDateTime80);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 2922789 + "'", int81 == 2922789);
    }

    @Test
    public void test02291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02291");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.yearOfEra();
        java.util.TimeZone timeZone3 = null;
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forTimeZone(timeZone3);
        int int6 = dateTimeZone4.getOffset(100L);
        java.util.TimeZone timeZone7 = dateTimeZone4.toTimeZone();
        int int9 = dateTimeZone4.getStandardOffset((long) ' ');
        org.joda.time.Chronology chronology10 = iSOChronology0.withZone(dateTimeZone4);
        long long12 = dateTimeZone4.convertUTCToLocal(38469L);
        int int14 = dateTimeZone4.getOffsetFromLocal(1645454809947L);
        org.joda.time.chrono.ISOChronology iSOChronology16 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology16.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology16.yearOfEra();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology16.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField20 = iSOChronology16.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField21 = iSOChronology16.dayOfYear();
        java.util.TimeZone timeZone22 = null;
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        int int25 = dateTimeZone23.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime26 = org.joda.time.LocalDateTime.now(dateTimeZone23);
        int int27 = localDateTime26.getDayOfYear();
        org.joda.time.LocalDateTime localDateTime29 = localDateTime26.withYearOfEra(2022);
        java.util.Locale locale31 = java.util.Locale.JAPANESE;
        java.lang.String str32 = locale31.getDisplayLanguage();
        java.lang.String str33 = locale31.getISO3Language();
        java.lang.String str34 = dateTimeField21.getAsShortText((org.joda.time.ReadablePartial) localDateTime29, (int) (short) 100, locale31);
        java.lang.String str35 = locale31.getCountry();
        java.lang.String str36 = dateTimeZone4.getName((long) 24, locale31);
        java.lang.String str37 = locale31.getDisplayCountry();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeZone4);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 36000000 + "'", int6 == 36000000);
        org.junit.Assert.assertNotNull(timeZone7);
// flaky:         org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "GMT+10:00");
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 36000000 + "'", int9 == 36000000);
        org.junit.Assert.assertNotNull(chronology10);
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + 36038469L + "'", long12 == 36038469L);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 36000000 + "'", int14 == 36000000);
        org.junit.Assert.assertNotNull(iSOChronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeZone23);
// flaky:         org.junit.Assert.assertTrue("'" + int25 + "' != '" + 36000000 + "'", int25 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime26);
// flaky:         org.junit.Assert.assertTrue("'" + int27 + "' != '" + 53 + "'", int27 == 53);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Japanisch" + "'", str32, "Japanisch");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "jpn" + "'", str33, "jpn");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "100" + "'", str34, "100");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
// flaky:         org.junit.Assert.assertEquals("'" + str36 + "' != '" + "+10:00" + "'", str36, "+10:00");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
    }

    @Test
    public void test02292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02292");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        int int5 = localDateTime4.getWeekyear();
        org.joda.time.LocalDateTime.Property property6 = localDateTime4.millisOfDay();
        java.util.TimeZone timeZone7 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forTimeZone(timeZone7);
        int int10 = dateTimeZone8.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now(dateTimeZone8);
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.DateTime dateTime13 = localDateTime11.toDateTime(readableInstant12);
        java.util.TimeZone timeZone14 = null;
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forTimeZone(timeZone14);
        int int17 = dateTimeZone15.getOffset(100L);
        org.joda.time.DateTime dateTime18 = localDateTime11.toDateTime(dateTimeZone15);
        int int19 = property6.compareTo((org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.LocalDateTime localDateTime20 = property6.roundHalfEvenCopy();
        org.joda.time.Interval interval21 = property6.toInterval();
        org.joda.time.LocalDateTime localDateTime22 = property6.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime23 = property6.roundHalfCeilingCopy();
        int int24 = localDateTime23.getSecondOfMinute();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 36000000 + "'", int3 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2022 + "'", int5 == 2022);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTimeZone8);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 36000000 + "'", int10 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
// flaky:         org.junit.Assert.assertTrue("'" + int17 + "' != '" + 36000000 + "'", int17 == 36000000);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime23);
// flaky:         org.junit.Assert.assertTrue("'" + int24 + "' != '" + 52 + "'", int24 == 52);
    }

    @Test
    public void test02293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02293");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.yearOfEra();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.secondOfMinute();
        java.lang.String str4 = iSOChronology0.toString();
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology0.yearOfCentury();
        java.util.TimeZone timeZone6 = null;
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forTimeZone(timeZone6);
        int int9 = dateTimeZone7.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime10 = org.joda.time.LocalDateTime.now(dateTimeZone7);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray11 = localDateTime10.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.hourOfDay();
        int int13 = localDateTime10.get(dateTimeFieldType12);
        org.joda.time.LocalDateTime.Property property14 = localDateTime10.dayOfWeek();
        boolean boolean15 = property14.isLeap();
        long long16 = property14.remainder();
        org.joda.time.LocalDateTime localDateTime17 = property14.getLocalDateTime();
        org.joda.time.LocalDateTime.Property property18 = localDateTime17.dayOfYear();
        int int19 = dateTimeField5.getMaximumValue((org.joda.time.ReadablePartial) localDateTime17);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime21 = localDateTime17.withDayOfYear((-3600001));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -3600001 for dayOfYear must be in the range [1,365]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "ISOChronology[+10:00]" + "'", str4, "ISOChronology[+10:00]");
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeZone7);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 36000000 + "'", int9 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray11);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long16 + "' != '" + 2932076L + "'", long16 == 2932076L);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 99 + "'", int19 == 99);
    }

    @Test
    public void test02294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02294");
        java.util.TimeZone timeZone1 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        int int4 = dateTimeZone2.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime5 = org.joda.time.LocalDateTime.now(dateTimeZone2);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.DateTime dateTime7 = localDateTime5.toDateTime(readableInstant6);
        org.joda.time.Chronology chronology8 = dateTime7.getChronology();
        org.joda.time.DurationField durationField9 = chronology8.hours();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((long) 52, chronology8);
        org.joda.time.DateTimeField[] dateTimeFieldArray11 = localDateTime10.getFields();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime10.withMillisOfDay(31);
        java.util.TimeZone timeZone14 = null;
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forTimeZone(timeZone14);
        int int17 = dateTimeZone15.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime18 = org.joda.time.LocalDateTime.now(dateTimeZone15);
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.DateTime dateTime20 = localDateTime18.toDateTime(readableInstant19);
        org.joda.time.Chronology chronology21 = dateTime20.getChronology();
        org.joda.time.DurationField durationField22 = chronology21.hours();
        org.joda.time.DurationField durationField23 = chronology21.months();
        org.joda.time.DateTimeField dateTimeField24 = chronology21.dayOfYear();
        java.util.TimeZone timeZone25 = null;
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forTimeZone(timeZone25);
        int int28 = dateTimeZone26.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime29 = org.joda.time.LocalDateTime.now(dateTimeZone26);
        int[] intArray32 = new int[] { (short) 0, (short) 0 };
        int int33 = dateTimeField24.getMinimumValue((org.joda.time.ReadablePartial) localDateTime29, intArray32);
        java.lang.String str35 = dateTimeField24.getAsShortText((long) 53166088);
        java.util.Locale locale37 = java.util.Locale.JAPANESE;
        java.lang.String str38 = locale37.getDisplayLanguage();
        java.util.Locale locale39 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet40 = locale39.getExtensionKeys();
        java.lang.String str41 = locale37.getDisplayLanguage(locale39);
        java.lang.String str42 = dateTimeField24.getAsText(0L, locale39);
        org.joda.time.LocalDateTime localDateTime43 = new org.joda.time.LocalDateTime();
        java.util.TimeZone timeZone44 = null;
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forTimeZone(timeZone44);
        int int47 = dateTimeZone45.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime48 = org.joda.time.LocalDateTime.now(dateTimeZone45);
        org.joda.time.LocalDateTime localDateTime49 = org.joda.time.LocalDateTime.now(dateTimeZone45);
        org.joda.time.LocalDateTime localDateTime51 = localDateTime49.plusSeconds((int) (short) 10);
        int[] intArray52 = localDateTime49.getValues();
        int int53 = dateTimeField24.getMaximumValue((org.joda.time.ReadablePartial) localDateTime43, intArray52);
        org.joda.time.LocalDateTime localDateTime55 = localDateTime43.plusWeeks(70922);
        org.joda.time.LocalDateTime localDateTime57 = localDateTime43.withHourOfDay(0);
        boolean boolean58 = localDateTime13.equals((java.lang.Object) localDateTime57);
        org.joda.time.LocalDateTime localDateTime60 = localDateTime13.plusWeeks(2807052);
        org.joda.time.LocalDateTime.Property property61 = localDateTime13.yearOfEra();
        org.joda.time.ReadableDuration readableDuration62 = null;
        org.joda.time.LocalDateTime localDateTime64 = localDateTime13.withDurationAdded(readableDuration62, 2843603);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime66 = localDateTime64.withDayOfYear(145599);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 145599 for dayOfYear must be in the range [1,365]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 36000000 + "'", int4 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeFieldArray11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
// flaky:         org.junit.Assert.assertTrue("'" + int17 + "' != '" + 36000000 + "'", int17 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeZone26);
// flaky:         org.junit.Assert.assertTrue("'" + int28 + "' != '" + 36000000 + "'", int28 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[0, 0]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
// flaky:         org.junit.Assert.assertEquals("'" + str35 + "' != '" + "2" + "'", str35, "2");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Japanisch" + "'", str38, "Japanisch");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "\uc77c\ubcf8\uc5b4" + "'", str41, "\uc77c\ubcf8\uc5b4");
// flaky:         org.junit.Assert.assertEquals("'" + str42 + "' != '" + "1" + "'", str42, "1");
        org.junit.Assert.assertNotNull(dateTimeZone45);
// flaky:         org.junit.Assert.assertTrue("'" + int47 + "' != '" + 36000000 + "'", int47 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(intArray52);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[2022, 2, 22, 2932107]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 365 + "'", int53 == 365);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertNotNull(localDateTime64);
    }

    @Test
    public void test02295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02295");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.yearOfEra();
        org.joda.time.DurationField durationField3 = iSOChronology0.minutes();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.weekyear();
        org.joda.time.DurationField durationField5 = iSOChronology0.centuries();
        org.joda.time.DateTimeField dateTimeField6 = iSOChronology0.centuryOfEra();
        org.joda.time.DurationField durationField7 = iSOChronology0.minutes();
        org.joda.time.DateTimeField dateTimeField8 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField9 = iSOChronology0.minuteOfHour();
        org.joda.time.chrono.ISOChronology iSOChronology10 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology10.hourOfHalfday();
        java.lang.String str12 = iSOChronology10.toString();
        org.joda.time.DateTimeField dateTimeField13 = iSOChronology10.era();
        org.joda.time.DurationField durationField14 = iSOChronology10.centuries();
        org.joda.time.DurationField durationField15 = iSOChronology10.weeks();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology10.dayOfYear();
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology10);
        int[] intArray18 = localDateTime17.getValues();
        long long20 = iSOChronology0.set((org.joda.time.ReadablePartial) localDateTime17, 0L);
        org.joda.time.DateTimeField dateTimeField21 = iSOChronology0.year();
        org.joda.time.DurationField durationField22 = iSOChronology0.years();
        org.joda.time.DateTimeField dateTimeField23 = iSOChronology0.era();
        boolean boolean25 = dateTimeField23.isLeap((long) 2821);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(iSOChronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "ISOChronology[+10:00]" + "'", str12, "ISOChronology[+10:00]");
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(intArray18);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[2022, 2, 22, 2932271]");
// flaky:         org.junit.Assert.assertTrue("'" + long20 + "' != '" + 1645454932271L + "'", long20 == 1645454932271L);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test02296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02296");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime5 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.plusSeconds((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime5.minusWeeks((int) (byte) 10);
        java.util.TimeZone timeZone10 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        int int13 = dateTimeZone11.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime14 = org.joda.time.LocalDateTime.now(dateTimeZone11);
        org.joda.time.LocalDateTime localDateTime15 = org.joda.time.LocalDateTime.now(dateTimeZone11);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.plusSeconds((int) (short) 10);
        int int18 = localDateTime15.size();
        boolean boolean19 = localDateTime9.isBefore((org.joda.time.ReadablePartial) localDateTime15);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime15.withMillisOfSecond(52);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.plusMinutes(0);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime21.plusDays(53166088);
        int int26 = localDateTime25.size();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime28 = localDateTime25.withDayOfMonth(64123034);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 64123034 for dayOfMonth must be in the range [1,31]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 36000000 + "'", int3 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone11);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 36000000 + "'", int13 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 4 + "'", int18 == 4);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 4 + "'", int26 == 4);
    }

    @Test
    public void test02297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02297");
        java.lang.String[] strArray1 = java.util.TimeZone.getAvailableIDs(2841472);
        org.junit.Assert.assertNotNull(strArray1);
    }

    @Test
    public void test02298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02298");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        int int5 = localDateTime4.getWeekyear();
        java.util.TimeZone timeZone6 = null;
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forTimeZone(timeZone6);
        int int9 = dateTimeZone7.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime10 = org.joda.time.LocalDateTime.now(dateTimeZone7);
        int int11 = localDateTime10.getWeekyear();
        org.joda.time.LocalDateTime.Property property12 = localDateTime10.millisOfDay();
        java.util.Locale locale13 = java.util.Locale.GERMAN;
        java.util.Locale locale14 = java.util.Locale.GERMAN;
        java.lang.String str15 = locale13.getDisplayCountry(locale14);
        java.util.Locale locale16 = locale13.stripExtensions();
        int int17 = property12.getMaximumShortTextLength(locale13);
        org.joda.time.Interval interval18 = property12.toInterval();
        org.joda.time.LocalDateTime localDateTime20 = property12.setCopy(1);
        org.joda.time.LocalDateTime.Property property21 = localDateTime20.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime20.withMillisOfDay((int) (byte) 10);
        int int24 = localDateTime23.getMinuteOfHour();
        org.joda.time.LocalDateTime localDateTime25 = localDateTime4.withFields((org.joda.time.ReadablePartial) localDateTime23);
        org.joda.time.LocalDateTime.Property property26 = localDateTime25.millisOfDay();
        org.joda.time.LocalDateTime localDateTime28 = localDateTime25.minusYears(2840946);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime25.minusMillis((int) ' ');
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime32 = localDateTime30.withWeekOfWeekyear(49622381);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 49622381 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 36000000 + "'", int3 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2022 + "'", int5 == 2022);
        org.junit.Assert.assertNotNull(dateTimeZone7);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 36000000 + "'", int9 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2022 + "'", int11 == 2022);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "de");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "de");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "de");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 8 + "'", int17 == 8);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime30);
    }

    @Test
    public void test02299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02299");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.yearOfEra();
        org.joda.time.DurationField durationField3 = iSOChronology0.minutes();
        org.joda.time.DurationField durationField4 = iSOChronology0.months();
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology0.era();
        java.lang.String str7 = dateTimeField5.getAsShortText((-139813307279999990L));
        org.joda.time.tz.NameProvider nameProvider8 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale9 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet10 = locale9.getExtensionKeys();
        java.lang.String str13 = nameProvider8.getShortName(locale9, "Koordinierte Universalzeit", "+00:00");
        java.util.Locale locale14 = java.util.Locale.KOREAN;
        java.lang.String str15 = locale9.getDisplayName(locale14);
        int int16 = dateTimeField5.getMaximumShortTextLength(locale9);
        java.util.TimeZone timeZone17 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forTimeZone(timeZone17);
        int int20 = dateTimeZone18.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime21 = org.joda.time.LocalDateTime.now(dateTimeZone18);
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.DateTime dateTime23 = localDateTime21.toDateTime(readableInstant22);
        java.util.TimeZone timeZone24 = null;
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forTimeZone(timeZone24);
        int int27 = dateTimeZone25.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime28 = org.joda.time.LocalDateTime.now(dateTimeZone25);
        org.joda.time.LocalDateTime localDateTime29 = org.joda.time.LocalDateTime.now(dateTimeZone25);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.minusYears(2022);
        org.joda.time.LocalDateTime.Property property32 = localDateTime31.era();
        int int33 = localDateTime21.compareTo((org.joda.time.ReadablePartial) localDateTime31);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int35 = localDateTime21.get(dateTimeFieldType34);
        org.joda.time.chrono.ISOChronology iSOChronology37 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField38 = iSOChronology37.weekOfWeekyear();
        java.util.TimeZone timeZone39 = null;
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forTimeZone(timeZone39);
        java.lang.String str42 = dateTimeZone40.getName(31556995199999L);
        org.joda.time.Chronology chronology43 = iSOChronology37.withZone(dateTimeZone40);
        org.joda.time.DateTimeField dateTimeField44 = iSOChronology37.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField45 = iSOChronology37.dayOfWeek();
        java.util.TimeZone timeZone47 = null;
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.forTimeZone(timeZone47);
        int int50 = dateTimeZone48.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime51 = org.joda.time.LocalDateTime.now(dateTimeZone48);
        org.joda.time.ReadableInstant readableInstant52 = null;
        org.joda.time.DateTime dateTime53 = localDateTime51.toDateTime(readableInstant52);
        org.joda.time.Chronology chronology54 = dateTime53.getChronology();
        org.joda.time.DurationField durationField55 = chronology54.hours();
        org.joda.time.LocalDateTime localDateTime56 = new org.joda.time.LocalDateTime((long) 52, chronology54);
        int int57 = localDateTime56.getSecondOfMinute();
        java.util.TimeZone timeZone58 = null;
        org.joda.time.DateTimeZone dateTimeZone59 = org.joda.time.DateTimeZone.forTimeZone(timeZone58);
        int int61 = dateTimeZone59.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime62 = org.joda.time.LocalDateTime.now(dateTimeZone59);
        org.joda.time.ReadableInstant readableInstant63 = null;
        org.joda.time.DateTime dateTime64 = localDateTime62.toDateTime(readableInstant63);
        java.util.TimeZone timeZone65 = null;
        org.joda.time.DateTimeZone dateTimeZone66 = org.joda.time.DateTimeZone.forTimeZone(timeZone65);
        int int68 = dateTimeZone66.getOffset(100L);
        org.joda.time.DateTime dateTime69 = localDateTime62.toDateTime(dateTimeZone66);
        org.joda.time.LocalDateTime localDateTime71 = localDateTime62.withYear(52);
        org.joda.time.Chronology chronology72 = localDateTime71.getChronology();
        org.joda.time.LocalDateTime localDateTime74 = localDateTime71.withYear((int) (short) 1);
        boolean boolean75 = localDateTime56.equals((java.lang.Object) localDateTime71);
        int[] intArray77 = iSOChronology37.get((org.joda.time.ReadablePartial) localDateTime71, 1645454801920L);
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray79 = dateTimeField5.addWrapPartial((org.joda.time.ReadablePartial) localDateTime21, 53272134, intArray77, 29);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 53272134");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "v. Chr." + "'", str7, "v. Chr.");
        org.junit.Assert.assertNotNull(nameProvider8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet10);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str15, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 3 + "'", int16 == 3);
        org.junit.Assert.assertNotNull(dateTimeZone18);
// flaky:         org.junit.Assert.assertTrue("'" + int20 + "' != '" + 36000000 + "'", int20 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTimeZone25);
// flaky:         org.junit.Assert.assertTrue("'" + int27 + "' != '" + 36000000 + "'", int27 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
// flaky:         org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2932515 + "'", int35 == 2932515);
        org.junit.Assert.assertNotNull(iSOChronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeZone40);
// flaky:         org.junit.Assert.assertEquals("'" + str42 + "' != '" + "+10:00" + "'", str42, "+10:00");
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(dateTimeZone48);
// flaky:         org.junit.Assert.assertTrue("'" + int50 + "' != '" + 36000000 + "'", int50 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(durationField55);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone59);
// flaky:         org.junit.Assert.assertTrue("'" + int61 + "' != '" + 36000000 + "'", int61 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(dateTimeZone66);
// flaky:         org.junit.Assert.assertTrue("'" + int68 + "' != '" + 36000000 + "'", int68 == 36000000);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(localDateTime71);
        org.junit.Assert.assertNotNull(chronology72);
        org.junit.Assert.assertNotNull(localDateTime74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(intArray77);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[2022, 2, 22, 2801920]");
    }

    @Test
    public void test02300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02300");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.chrono.ISOChronology iSOChronology1 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology1.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology1.centuryOfEra();
        org.joda.time.DurationField durationField4 = iSOChronology1.seconds();
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology1.clockhourOfDay();
        org.joda.time.Chronology chronology6 = iSOChronology1.withUTC();
        org.joda.time.DateTimeField dateTimeField7 = iSOChronology1.halfdayOfDay();
        org.joda.time.DurationField durationField8 = durationFieldType0.getField((org.joda.time.Chronology) iSOChronology1);
        org.joda.time.DateTimeField dateTimeField9 = iSOChronology1.millisOfSecond();
        java.lang.String str10 = dateTimeField9.getName();
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(iSOChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "millisOfSecond" + "'", str10, "millisOfSecond");
    }

    @Test
    public void test02301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02301");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.yearOfEra();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.hourOfDay();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.millisOfSecond();
        int int6 = dateTimeField4.getLeapAmount(1645454785821L);
        java.util.Locale locale10 = new java.util.Locale("\uae30\uc6d0\uc804", "ko", "Etc/UTC");
        java.lang.String str11 = locale10.getDisplayLanguage();
        int int12 = dateTimeField4.getMaximumTextLength(locale10);
        long long15 = dateTimeField4.addWrapField(1645454899056L, 53308);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertEquals(locale10.toString(), "\uae30\uc6d0\uc804_KO_Etc/UTC");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\uae30\uc6d0\uc804" + "'", str11, "\uae30\uc6d0\uc804");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 3 + "'", int12 == 3);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1645454899364L + "'", long15 == 1645454899364L);
    }

    @Test
    public void test02302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02302");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.yearOfEra();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.weekyearOfCentury();
        java.lang.String str4 = iSOChronology0.toString();
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology0.clockhourOfHalfday();
        java.lang.String str6 = iSOChronology0.toString();
        org.joda.time.DateTimeField dateTimeField7 = iSOChronology0.monthOfYear();
        org.joda.time.DateTimeField dateTimeField8 = iSOChronology0.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField9 = iSOChronology0.secondOfDay();
        org.joda.time.DurationField durationField10 = iSOChronology0.eras();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "ISOChronology[+10:00]" + "'", str4, "ISOChronology[+10:00]");
        org.junit.Assert.assertNotNull(dateTimeField5);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "ISOChronology[+10:00]" + "'", str6, "ISOChronology[+10:00]");
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
    }

    @Test
    public void test02303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02303");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.hourOfHalfday();
        org.joda.time.tz.NameProvider nameProvider2 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale3 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet4 = locale3.getExtensionKeys();
        java.lang.String str7 = nameProvider2.getShortName(locale3, "Koordinierte Universalzeit", "+00:00");
        java.util.Locale locale8 = java.util.Locale.GERMAN;
        java.lang.String str11 = nameProvider2.getShortName(locale8, "53167803", "jpn");
        int int12 = dateTimeField1.getMaximumTextLength(locale8);
        java.util.TimeZone timeZone13 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forTimeZone(timeZone13);
        int int16 = dateTimeZone14.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime17 = org.joda.time.LocalDateTime.now(dateTimeZone14);
        int int18 = localDateTime17.getWeekyear();
        org.joda.time.tz.NameProvider nameProvider20 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale21 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet22 = locale21.getExtensionKeys();
        java.lang.String str25 = nameProvider20.getShortName(locale21, "Koordinierte Universalzeit", "+00:00");
        java.util.Locale.Builder builder26 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder29 = builder26.setExtension('x', "jpn");
        java.util.Locale locale30 = java.util.Locale.GERMAN;
        java.util.Locale locale31 = java.util.Locale.GERMAN;
        java.lang.String str32 = locale30.getDisplayCountry(locale31);
        java.util.Locale locale33 = locale30.stripExtensions();
        java.lang.String str34 = locale30.getDisplayName();
        java.util.Locale.Builder builder35 = builder29.setLocale(locale30);
        java.util.Locale locale36 = builder35.build();
        java.lang.String str37 = locale36.getScript();
        java.lang.String str40 = nameProvider20.getName(locale36, "hourOfDay", "");
        java.lang.String str41 = dateTimeField1.getAsShortText((org.joda.time.ReadablePartial) localDateTime17, 22, locale36);
        org.joda.time.DateTime dateTime42 = localDateTime17.toDateTime();
        org.joda.time.LocalDateTime localDateTime44 = localDateTime17.plusMinutes(2831323);
        org.joda.time.LocalDateTime localDateTime46 = localDateTime44.withCenturyOfEra(845);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(nameProvider2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet4);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "de");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertNotNull(dateTimeZone14);
// flaky:         org.junit.Assert.assertTrue("'" + int16 + "' != '" + 36000000 + "'", int16 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2022 + "'", int18 == 2022);
        org.junit.Assert.assertNotNull(nameProvider20);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet22);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "de");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "de");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "de");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Deutsch" + "'", str34, "Deutsch");
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "de");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "22" + "'", str41, "22");
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(localDateTime46);
    }

    @Test
    public void test02304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02304");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffset(100L);
        java.util.TimeZone timeZone4 = dateTimeZone1.toTimeZone();
        int int6 = dateTimeZone1.getStandardOffset((long) ' ');
        boolean boolean8 = dateTimeZone1.isStandardOffset((long) '4');
        int int10 = dateTimeZone1.getStandardOffset((-255600000L));
        boolean boolean11 = dateTimeZone1.isFixed();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 36000000 + "'", int3 == 36000000);
        org.junit.Assert.assertNotNull(timeZone4);
// flaky:         org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "GMT+10:00");
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 36000000 + "'", int6 == 36000000);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 36000000 + "'", int10 == 36000000);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    }

    @Test
    public void test02305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02305");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.hourOfHalfday();
        java.lang.String str2 = iSOChronology0.toString();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.era();
        org.joda.time.DurationField durationField4 = iSOChronology0.centuries();
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        long long8 = iSOChronology0.add(readablePeriod5, (long) 2022, (int) (byte) 100);
        org.joda.time.DateTimeZone dateTimeZone9 = iSOChronology0.getZone();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology0.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology0.clockhourOfDay();
        // The following exception was thrown during execution in test generation
        try {
            long long19 = iSOChronology0.getDateTimeMillis(53270, 42, 99, 37, 28, 2798859, 2917759);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 37 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ISOChronology[+10:00]" + "'", str2, "ISOChronology[+10:00]");
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 2022L + "'", long8 == 2022L);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
    }

    @Test
    public void test02306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02306");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("53175149");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=53175149");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02307");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        int int5 = localDateTime4.getDayOfWeek();
        java.lang.String str6 = localDateTime4.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime8 = localDateTime4.withDayOfMonth(53309346);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 53309346 for dayOfMonth must be in the range [1,28]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 36000000 + "'", int3 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime4);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2 + "'", int5 == 2);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "2022-02-22T00:48:53.007" + "'", str6, "2022-02-22T00:48:53.007");
    }

    @Test
    public void test02308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02308");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str3 = dateTimeZone1.getName(31556995199999L);
        java.lang.String str4 = dateTimeZone1.getID();
        boolean boolean6 = dateTimeZone1.isStandardOffset((long) 2821);
        java.util.TimeZone timeZone8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        int int11 = dateTimeZone9.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime12 = org.joda.time.LocalDateTime.now(dateTimeZone9);
        int int13 = localDateTime12.getWeekyear();
        org.joda.time.LocalDateTime.Property property14 = localDateTime12.millisOfDay();
        java.util.Locale locale15 = java.util.Locale.GERMAN;
        java.util.Locale locale16 = java.util.Locale.GERMAN;
        java.lang.String str17 = locale15.getDisplayCountry(locale16);
        java.util.Locale locale18 = locale15.stripExtensions();
        int int19 = property14.getMaximumShortTextLength(locale15);
        java.lang.String str20 = locale15.getDisplayScript();
        java.util.Locale locale21 = locale15.stripExtensions();
        java.lang.String str22 = dateTimeZone1.getShortName(3538910881347L, locale21);
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+10:00" + "'", str3, "+10:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+10:00" + "'", str4, "+10:00");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(dateTimeZone9);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 36000000 + "'", int11 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2022 + "'", int13 == 2022);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "de");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "de");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "de");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 8 + "'", int19 == 8);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "de");
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+10:00" + "'", str22, "+10:00");
    }

    @Test
    public void test02309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02309");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime5 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.plusSeconds((int) (short) 10);
        org.joda.time.DurationFieldType durationFieldType8 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DurationField durationField10 = durationFieldType8.getField(chronology9);
        boolean boolean11 = localDateTime7.isSupported(durationFieldType8);
        org.joda.time.chrono.ISOChronology iSOChronology12 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField13 = iSOChronology12.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology12.yearOfEra();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology12.secondOfMinute();
        java.lang.String str16 = iSOChronology12.toString();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology12.hourOfHalfday();
        org.joda.time.DurationField durationField18 = iSOChronology12.seconds();
        boolean boolean19 = localDateTime7.equals((java.lang.Object) iSOChronology12);
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 36000000 + "'", int3 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(durationFieldType8);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(iSOChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "ISOChronology[+10:00]" + "'", str16, "ISOChronology[+10:00]");
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test02310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02310");
        org.joda.time.tz.NameProvider nameProvider0 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet2 = locale1.getExtensionKeys();
        java.lang.String str5 = nameProvider0.getShortName(locale1, "Koordinierte Universalzeit", "+00:00");
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.lang.String str7 = locale1.getDisplayName(locale6);
        java.util.Locale locale8 = locale6.stripExtensions();
        org.joda.time.chrono.ISOChronology iSOChronology9 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology9.hourOfHalfday();
        java.lang.String str11 = iSOChronology9.toString();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology9.era();
        org.joda.time.DurationField durationField13 = iSOChronology9.centuries();
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        long long17 = iSOChronology9.add(readablePeriod14, (long) 2022, (int) (byte) 100);
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology9.hourOfDay();
        org.joda.time.tz.NameProvider nameProvider19 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale20 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet21 = locale20.getExtensionKeys();
        java.lang.String str24 = nameProvider19.getShortName(locale20, "Koordinierte Universalzeit", "+00:00");
        int int25 = dateTimeField18.getMaximumTextLength(locale20);
        java.lang.String str26 = locale20.getISO3Country();
        org.joda.time.chrono.ISOChronology iSOChronology27 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField28 = iSOChronology27.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField29 = iSOChronology27.centuryOfEra();
        org.joda.time.DurationField durationField30 = iSOChronology27.centuries();
        org.joda.time.DurationField durationField31 = iSOChronology27.hours();
        java.util.TimeZone timeZone32 = null;
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forTimeZone(timeZone32);
        int int35 = dateTimeZone33.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime36 = org.joda.time.LocalDateTime.now(dateTimeZone33);
        int int37 = localDateTime36.getDayOfYear();
        org.joda.time.LocalDateTime localDateTime39 = localDateTime36.withYearOfEra(2022);
        long long41 = iSOChronology27.set((org.joda.time.ReadablePartial) localDateTime39, (long) 0);
        org.joda.time.DateTimeField dateTimeField42 = iSOChronology27.monthOfYear();
        org.joda.time.DateTimeField dateTimeField43 = iSOChronology27.clockhourOfDay();
        long long45 = dateTimeField43.roundFloor(3155695200000L);
        java.util.Locale locale47 = java.util.Locale.GERMAN;
        java.util.Locale locale48 = java.util.Locale.GERMAN;
        java.lang.String str49 = locale47.getDisplayCountry(locale48);
        java.util.Locale locale50 = locale47.stripExtensions();
        java.util.Locale.setDefault(locale47);
        java.lang.String str52 = dateTimeField43.getAsText(1644849991855L, locale47);
        java.lang.String str53 = locale20.getDisplayScript(locale47);
        java.lang.String str54 = locale6.getDisplayLanguage(locale47);
        boolean boolean55 = locale47.hasExtensions();
        org.junit.Assert.assertNotNull(nameProvider0);
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet2);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str7, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "ko");
        org.junit.Assert.assertNotNull(iSOChronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "ISOChronology[+10:00]" + "'", str11, "ISOChronology[+10:00]");
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 2022L + "'", long17 == 2022L);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(nameProvider19);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet21);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2 + "'", int25 == 2);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(iSOChronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(dateTimeZone33);
// flaky:         org.junit.Assert.assertTrue("'" + int35 + "' != '" + 36000000 + "'", int35 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime36);
// flaky:         org.junit.Assert.assertTrue("'" + int37 + "' != '" + 53 + "'", int37 == 53);
        org.junit.Assert.assertNotNull(localDateTime39);
// flaky:         org.junit.Assert.assertTrue("'" + long41 + "' != '" + 1645454933205L + "'", long41 == 1645454933205L);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 3155695200000L + "'", long45 == 3155695200000L);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "de");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "de");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "de");
// flaky:         org.junit.Assert.assertEquals("'" + str52 + "' != '" + "24" + "'", str52, "24");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "Koreanisch" + "'", str54, "Koreanisch");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
    }

    @Test
    public void test02311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02311");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.hourOfHalfday();
        java.lang.String str2 = iSOChronology0.toString();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.era();
        java.util.TimeZone timeZone4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forTimeZone(timeZone4);
        int int7 = dateTimeZone5.getOffset(100L);
        java.util.TimeZone timeZone8 = dateTimeZone5.toTimeZone();
        java.lang.String str9 = dateTimeZone5.toString();
        org.joda.time.Chronology chronology10 = iSOChronology0.withZone(dateTimeZone5);
        java.util.Locale locale11 = java.util.Locale.JAPANESE;
        java.lang.String str12 = locale11.getDisplayLanguage();
        java.lang.String str13 = locale11.getISO3Language();
        java.util.Locale locale14 = java.util.Locale.CHINA;
        java.lang.String str15 = locale11.getDisplayLanguage(locale14);
        org.joda.time.tz.NameProvider nameProvider16 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale17 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet18 = locale17.getExtensionKeys();
        java.lang.String str21 = nameProvider16.getShortName(locale17, "Koordinierte Universalzeit", "+00:00");
        java.util.Locale locale22 = java.util.Locale.KOREAN;
        java.lang.String str23 = locale17.getDisplayName(locale22);
        java.lang.String str24 = locale14.getDisplayVariant(locale22);
        org.joda.time.chrono.ISOChronology iSOChronology25 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField26 = iSOChronology25.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField27 = iSOChronology25.yearOfEra();
        java.util.TimeZone timeZone28 = null;
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forTimeZone(timeZone28);
        int int31 = dateTimeZone29.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime32 = org.joda.time.LocalDateTime.now(dateTimeZone29);
        org.joda.time.LocalDateTime localDateTime33 = org.joda.time.LocalDateTime.now(dateTimeZone29);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime33.plusSeconds((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime33.minusWeeks((int) (byte) 10);
        java.util.TimeZone timeZone38 = null;
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forTimeZone(timeZone38);
        int int41 = dateTimeZone39.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime42 = org.joda.time.LocalDateTime.now(dateTimeZone39);
        org.joda.time.LocalDateTime localDateTime43 = org.joda.time.LocalDateTime.now(dateTimeZone39);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime43.plusSeconds((int) (short) 10);
        int int46 = localDateTime43.size();
        boolean boolean47 = localDateTime37.isBefore((org.joda.time.ReadablePartial) localDateTime43);
        org.joda.time.LocalDateTime localDateTime49 = localDateTime43.withMillisOfSecond(52);
        org.joda.time.LocalDateTime localDateTime51 = localDateTime49.plusMinutes(0);
        org.joda.time.LocalDateTime localDateTime53 = localDateTime49.plusDays(53166088);
        int int54 = localDateTime53.getDayOfYear();
        org.joda.time.chrono.ISOChronology iSOChronology55 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField56 = iSOChronology55.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField57 = iSOChronology55.yearOfEra();
        org.joda.time.DateTimeField dateTimeField58 = iSOChronology55.weekyearOfCentury();
        java.lang.String str59 = iSOChronology55.toString();
        org.joda.time.DateTimeField dateTimeField60 = iSOChronology55.clockhourOfHalfday();
        java.lang.String str61 = iSOChronology55.toString();
        org.joda.time.DateTimeField dateTimeField62 = iSOChronology55.dayOfMonth();
        java.util.Locale locale63 = java.util.Locale.KOREAN;
        java.lang.String str64 = locale63.getDisplayScript();
        int int65 = dateTimeField62.getMaximumShortTextLength(locale63);
        java.lang.String str66 = dateTimeField27.getAsShortText((org.joda.time.ReadablePartial) localDateTime53, locale63);
        java.lang.String str67 = locale22.getDisplayLanguage(locale63);
        boolean boolean68 = iSOChronology0.equals((java.lang.Object) str67);
        org.joda.time.DateTimeField dateTimeField69 = iSOChronology0.era();
        long long73 = iSOChronology0.add(3155695200000L, (-259200000L), (int) 'u');
        org.joda.time.DateTimeZone dateTimeZone74 = iSOChronology0.getZone();
        java.util.Locale.Builder builder76 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder79 = builder76.setExtension('x', "jpn");
        java.util.Locale locale80 = java.util.Locale.GERMAN;
        java.util.Locale locale81 = java.util.Locale.GERMAN;
        java.lang.String str82 = locale80.getDisplayCountry(locale81);
        java.util.Locale locale83 = locale80.stripExtensions();
        java.lang.String str84 = locale80.getDisplayName();
        java.util.Locale.Builder builder85 = builder79.setLocale(locale80);
        java.util.Locale locale86 = builder79.build();
        java.lang.String str87 = dateTimeZone74.getShortName((long) 31, locale86);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ISOChronology[+10:00]" + "'", str2, "ISOChronology[+10:00]");
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeZone5);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 36000000 + "'", int7 == 36000000);
        org.junit.Assert.assertNotNull(timeZone8);
// flaky:         org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "GMT+10:00");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+10:00" + "'", str9, "+10:00");
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Japanisch" + "'", str12, "Japanisch");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "jpn" + "'", str13, "jpn");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "\u65e5\u6587" + "'", str15, "\u65e5\u6587");
        org.junit.Assert.assertNotNull(nameProvider16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet18);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str23, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(iSOChronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeZone29);
// flaky:         org.junit.Assert.assertTrue("'" + int31 + "' != '" + 36000000 + "'", int31 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(dateTimeZone39);
// flaky:         org.junit.Assert.assertTrue("'" + int41 + "' != '" + 36000000 + "'", int41 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 4 + "'", int46 == 4);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(localDateTime53);
// flaky:         org.junit.Assert.assertTrue("'" + int54 + "' != '" + 347 + "'", int54 == 347);
        org.junit.Assert.assertNotNull(iSOChronology55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(dateTimeField58);
// flaky:         org.junit.Assert.assertEquals("'" + str59 + "' != '" + "ISOChronology[+10:00]" + "'", str59, "ISOChronology[+10:00]");
        org.junit.Assert.assertNotNull(dateTimeField60);
// flaky:         org.junit.Assert.assertEquals("'" + str61 + "' != '" + "ISOChronology[+10:00]" + "'", str61, "ISOChronology[+10:00]");
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 2 + "'", int65 == 2);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "147585" + "'", str66, "147585");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str67, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(dateTimeField69);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 3125368800000L + "'", long73 == 3125368800000L);
        org.junit.Assert.assertNotNull(dateTimeZone74);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(locale80);
        org.junit.Assert.assertEquals(locale80.toString(), "de");
        org.junit.Assert.assertNotNull(locale81);
        org.junit.Assert.assertEquals(locale81.toString(), "de");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "" + "'", str82, "");
        org.junit.Assert.assertNotNull(locale83);
        org.junit.Assert.assertEquals(locale83.toString(), "de");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "Deutsch" + "'", str84, "Deutsch");
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNotNull(locale86);
        org.junit.Assert.assertEquals(locale86.toString(), "de");
// flaky:         org.junit.Assert.assertEquals("'" + str87 + "' != '" + "+10:00" + "'", str87, "+10:00");
    }

    @Test
    public void test02312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02312");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        java.util.TimeZone timeZone2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone2);
        int int5 = dateTimeZone3.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime6 = org.joda.time.LocalDateTime.now(dateTimeZone3);
        int int7 = localDateTime6.getWeekyear();
        org.joda.time.LocalDateTime.Property property8 = localDateTime6.minuteOfHour();
        long long9 = property8.remainder();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = property8.getFieldType();
        java.util.Locale.Builder builder11 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder14 = builder11.setExtension('x', "jpn");
        java.util.Locale locale15 = java.util.Locale.GERMAN;
        java.util.Locale locale16 = java.util.Locale.GERMAN;
        java.lang.String str17 = locale15.getDisplayCountry(locale16);
        java.util.Locale locale18 = locale15.stripExtensions();
        java.lang.String str19 = locale15.getDisplayName();
        java.util.Locale.Builder builder20 = builder14.setLocale(locale15);
        java.util.Locale.Builder builder23 = builder20.setUnicodeLocaleKeyword("22", "deu");
        java.util.Locale.Builder builder24 = builder20.clearExtensions();
        java.util.Locale.Builder builder26 = builder24.setVariant("2807744");
        java.util.Locale locale27 = builder26.build();
        int int28 = property8.getMaximumTextLength(locale27);
        java.util.Locale.Builder builder29 = builder1.setLocale(locale27);
        java.util.Locale.Builder builder30 = builder29.clear();
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(dateTimeZone3);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 36000000 + "'", int5 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2022 + "'", int7 == 2022);
        org.junit.Assert.assertNotNull(property8);
// flaky:         org.junit.Assert.assertTrue("'" + long9 + "' != '" + 53358L + "'", long9 == 53358L);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "de");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "de");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "de");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Deutsch" + "'", str19, "Deutsch");
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "de__2807744");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder30);
    }

    @Test
    public void test02313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02313");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 53308413);
    }

    @Test
    public void test02314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02314");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.DateTime dateTime6 = localDateTime4.toDateTime(readableInstant5);
        java.util.TimeZone timeZone7 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forTimeZone(timeZone7);
        int int10 = dateTimeZone8.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now(dateTimeZone8);
        org.joda.time.LocalDateTime localDateTime12 = org.joda.time.LocalDateTime.now(dateTimeZone8);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.minusYears(2022);
        org.joda.time.LocalDateTime.Property property15 = localDateTime14.era();
        int int16 = localDateTime4.compareTo((org.joda.time.ReadablePartial) localDateTime14);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = localDateTime4.getFieldType(1);
        org.joda.time.LocalDateTime localDateTime19 = org.joda.time.LocalDateTime.now();
        java.util.TimeZone timeZone20 = null;
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forTimeZone(timeZone20);
        int int23 = dateTimeZone21.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime24 = org.joda.time.LocalDateTime.now(dateTimeZone21);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray25 = localDateTime24.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.hourOfDay();
        int int27 = localDateTime24.get(dateTimeFieldType26);
        org.joda.time.LocalDateTime.Property property28 = localDateTime24.dayOfWeek();
        boolean boolean29 = localDateTime19.isEqual((org.joda.time.ReadablePartial) localDateTime24);
        org.joda.time.LocalDateTime.Property property30 = localDateTime24.dayOfMonth();
        boolean boolean31 = localDateTime4.isEqual((org.joda.time.ReadablePartial) localDateTime24);
        int int32 = localDateTime24.getCenturyOfEra();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime34 = localDateTime24.withSecondOfMinute(99);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 99 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 36000000 + "'", int3 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTimeZone8);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 36000000 + "'", int10 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(dateTimeZone21);
// flaky:         org.junit.Assert.assertTrue("'" + int23 + "' != '" + 36000000 + "'", int23 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray25);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
// flaky:         org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 20 + "'", int32 == 20);
    }

    @Test
    public void test02315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02315");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.parse("2804930", dateTimeFormatter1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02316");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime5 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.plusSeconds((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime5.minusWeeks((int) (byte) 10);
        java.util.TimeZone timeZone10 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        int int13 = dateTimeZone11.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime14 = org.joda.time.LocalDateTime.now(dateTimeZone11);
        org.joda.time.LocalDateTime localDateTime15 = org.joda.time.LocalDateTime.now(dateTimeZone11);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.plusSeconds((int) (short) 10);
        int int18 = localDateTime15.size();
        boolean boolean19 = localDateTime9.isBefore((org.joda.time.ReadablePartial) localDateTime15);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime15.withMillisOfSecond(52);
        org.joda.time.Chronology chronology22 = localDateTime15.getChronology();
        org.joda.time.LocalDateTime.Property property23 = localDateTime15.minuteOfHour();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField25 = localDateTime15.getField(2917759);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 2917759");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 36000000 + "'", int3 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone11);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 36000000 + "'", int13 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 4 + "'", int18 == 4);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(property23);
    }

    @Test
    public void test02317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02317");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.DateTime dateTime6 = localDateTime4.toDateTime(readableInstant5);
        org.joda.time.Chronology chronology7 = dateTime6.getChronology();
        org.joda.time.DurationField durationField8 = chronology7.hours();
        org.joda.time.DurationField durationField9 = chronology7.months();
        org.joda.time.DateTimeField dateTimeField10 = chronology7.dayOfYear();
        java.util.TimeZone timeZone11 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        int int14 = dateTimeZone12.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime15 = org.joda.time.LocalDateTime.now(dateTimeZone12);
        int[] intArray18 = new int[] { (short) 0, (short) 0 };
        int int19 = dateTimeField10.getMinimumValue((org.joda.time.ReadablePartial) localDateTime15, intArray18);
        int int21 = dateTimeField10.getMinimumValue((long) 100);
        java.util.TimeZone timeZone22 = null;
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        int int25 = dateTimeZone23.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime26 = org.joda.time.LocalDateTime.now(dateTimeZone23);
        int int27 = localDateTime26.getWeekyear();
        org.joda.time.LocalDateTime.Property property28 = localDateTime26.minuteOfHour();
        int int29 = dateTimeField10.getMaximumValue((org.joda.time.ReadablePartial) localDateTime26);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime26.withCenturyOfEra(1);
        org.joda.time.LocalDateTime.Property property32 = localDateTime26.weekyear();
        org.joda.time.LocalDateTime localDateTime34 = property32.setCopy("53166874");
        org.joda.time.LocalDateTime.Property property35 = localDateTime34.hourOfDay();
        org.joda.time.LocalDateTime localDateTime36 = property35.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime37 = property35.roundCeilingCopy();
        org.joda.time.DurationField durationField38 = property35.getDurationField();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 36000000 + "'", int3 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeZone12);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 36000000 + "'", int14 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[0, 0]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(dateTimeZone23);
// flaky:         org.junit.Assert.assertTrue("'" + int25 + "' != '" + 36000000 + "'", int25 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2022 + "'", int27 == 2022);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 365 + "'", int29 == 365);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(durationField38);
    }

    @Test
    public void test02318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02318");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.hourOfHalfday();
        org.joda.time.tz.NameProvider nameProvider2 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale3 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet4 = locale3.getExtensionKeys();
        java.lang.String str7 = nameProvider2.getShortName(locale3, "Koordinierte Universalzeit", "+00:00");
        java.util.Locale locale8 = java.util.Locale.GERMAN;
        java.lang.String str11 = nameProvider2.getShortName(locale8, "53167803", "jpn");
        int int12 = dateTimeField1.getMaximumTextLength(locale8);
        java.util.TimeZone timeZone13 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forTimeZone(timeZone13);
        int int16 = dateTimeZone14.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime17 = org.joda.time.LocalDateTime.now(dateTimeZone14);
        int int18 = localDateTime17.getWeekyear();
        org.joda.time.tz.NameProvider nameProvider20 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale21 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet22 = locale21.getExtensionKeys();
        java.lang.String str25 = nameProvider20.getShortName(locale21, "Koordinierte Universalzeit", "+00:00");
        java.util.Locale.Builder builder26 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder29 = builder26.setExtension('x', "jpn");
        java.util.Locale locale30 = java.util.Locale.GERMAN;
        java.util.Locale locale31 = java.util.Locale.GERMAN;
        java.lang.String str32 = locale30.getDisplayCountry(locale31);
        java.util.Locale locale33 = locale30.stripExtensions();
        java.lang.String str34 = locale30.getDisplayName();
        java.util.Locale.Builder builder35 = builder29.setLocale(locale30);
        java.util.Locale locale36 = builder35.build();
        java.lang.String str37 = locale36.getScript();
        java.lang.String str40 = nameProvider20.getName(locale36, "hourOfDay", "");
        java.lang.String str41 = dateTimeField1.getAsShortText((org.joda.time.ReadablePartial) localDateTime17, 22, locale36);
        java.util.TimeZone timeZone42 = null;
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forTimeZone(timeZone42);
        int int45 = dateTimeZone43.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime46 = org.joda.time.LocalDateTime.now(dateTimeZone43);
        int int47 = localDateTime46.getWeekyear();
        java.util.TimeZone timeZone48 = null;
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.forTimeZone(timeZone48);
        int int51 = dateTimeZone49.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime52 = org.joda.time.LocalDateTime.now(dateTimeZone49);
        org.joda.time.LocalDateTime localDateTime53 = org.joda.time.LocalDateTime.now(dateTimeZone49);
        org.joda.time.LocalDateTime localDateTime55 = localDateTime53.minusMinutes((int) ' ');
        org.joda.time.ReadablePeriod readablePeriod56 = null;
        org.joda.time.LocalDateTime localDateTime57 = localDateTime53.plus(readablePeriod56);
        int[] intArray58 = localDateTime57.getValues();
        int int59 = dateTimeField1.getMaximumValue((org.joda.time.ReadablePartial) localDateTime46, intArray58);
        int int60 = localDateTime46.getSecondOfMinute();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(nameProvider2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet4);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "de");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertNotNull(dateTimeZone14);
// flaky:         org.junit.Assert.assertTrue("'" + int16 + "' != '" + 36000000 + "'", int16 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2022 + "'", int18 == 2022);
        org.junit.Assert.assertNotNull(nameProvider20);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet22);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "de");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "de");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "de");
// flaky:         org.junit.Assert.assertEquals("'" + str34 + "' != '" + "German" + "'", str34, "German");
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "de");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "22" + "'", str41, "22");
        org.junit.Assert.assertNotNull(dateTimeZone43);
// flaky:         org.junit.Assert.assertTrue("'" + int45 + "' != '" + 36000000 + "'", int45 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2022 + "'", int47 == 2022);
        org.junit.Assert.assertNotNull(dateTimeZone49);
// flaky:         org.junit.Assert.assertTrue("'" + int51 + "' != '" + 36000000 + "'", int51 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(intArray58);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[2022, 2, 22, 2933853]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 11 + "'", int59 == 11);
// flaky:         org.junit.Assert.assertTrue("'" + int60 + "' != '" + 53 + "'", int60 == 53);
    }

    @Test
    public void test02319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02319");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.yearOfEra();
        org.joda.time.DurationField durationField3 = iSOChronology0.minutes();
        org.joda.time.DurationField durationField4 = iSOChronology0.months();
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology0.era();
        org.joda.time.DurationField durationField6 = dateTimeField5.getRangeDurationField();
        java.util.Locale locale8 = java.util.Locale.JAPANESE;
        java.lang.String str9 = locale8.getDisplayLanguage();
        java.lang.String str10 = locale8.getISO3Language();
        java.lang.String str11 = locale8.getISO3Language();
        java.lang.String str12 = locale8.getDisplayVariant();
        java.lang.String str13 = dateTimeField5.getAsShortText(0L, locale8);
        java.lang.String str14 = locale8.getCountry();
        java.lang.String str15 = locale8.getISO3Country();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNull(durationField6);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "ja");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Japanese" + "'", str9, "Japanese");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "jpn" + "'", str10, "jpn");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "jpn" + "'", str11, "jpn");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "\u897f\u66a6" + "'", str13, "\u897f\u66a6");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
    }

    @Test
    public void test02320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02320");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.yearOfEra();
        org.joda.time.DurationField durationField3 = iSOChronology0.minutes();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.weekyear();
        org.joda.time.DurationField durationField5 = iSOChronology0.centuries();
        org.joda.time.DateTimeField dateTimeField6 = iSOChronology0.centuryOfEra();
        java.util.TimeZone timeZone7 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forTimeZone(timeZone7);
        java.lang.String str10 = dateTimeZone8.getName(31556995199999L);
        org.joda.time.Chronology chronology11 = iSOChronology0.withZone(dateTimeZone8);
        org.joda.time.DurationField durationField12 = iSOChronology0.hours();
        org.joda.time.DurationField durationField13 = iSOChronology0.minutes();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeZone8);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+10:00" + "'", str10, "+10:00");
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(durationField13);
    }

    @Test
    public void test02321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02321");
        org.joda.time.chrono.ISOChronology iSOChronology7 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField8 = iSOChronology7.weekOfWeekyear();
        java.util.TimeZone timeZone9 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        java.lang.String str12 = dateTimeZone10.getName(31556995199999L);
        org.joda.time.Chronology chronology13 = iSOChronology7.withZone(dateTimeZone10);
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology7.halfdayOfDay();
        org.joda.time.DurationField durationField15 = iSOChronology7.weeks();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology7.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology7.clockhourOfHalfday();
        org.joda.time.chrono.ISOChronology iSOChronology18 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology18.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField20 = iSOChronology18.centuryOfEra();
        org.joda.time.DurationField durationField21 = iSOChronology18.centuries();
        org.joda.time.DurationField durationField22 = iSOChronology18.hours();
        java.util.TimeZone timeZone23 = null;
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forTimeZone(timeZone23);
        int int26 = dateTimeZone24.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime27 = org.joda.time.LocalDateTime.now(dateTimeZone24);
        int int28 = localDateTime27.getDayOfYear();
        org.joda.time.LocalDateTime localDateTime30 = localDateTime27.withYearOfEra(2022);
        long long32 = iSOChronology18.set((org.joda.time.ReadablePartial) localDateTime30, (long) 0);
        org.joda.time.DateTimeField dateTimeField33 = iSOChronology18.hourOfHalfday();
        java.util.TimeZone timeZone34 = null;
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forTimeZone(timeZone34);
        int int37 = dateTimeZone35.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime38 = org.joda.time.LocalDateTime.now(dateTimeZone35);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray39 = localDateTime38.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = org.joda.time.DateTimeFieldType.hourOfDay();
        int int41 = localDateTime38.get(dateTimeFieldType40);
        org.joda.time.LocalDateTime.Property property42 = localDateTime38.dayOfWeek();
        boolean boolean43 = property42.isLeap();
        long long44 = property42.remainder();
        org.joda.time.LocalDateTime localDateTime45 = property42.getLocalDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.LocalDateTime localDateTime48 = localDateTime45.withField(dateTimeFieldType46, (int) (short) 10);
        org.joda.time.chrono.ISOChronology iSOChronology49 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField50 = iSOChronology49.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField51 = iSOChronology49.yearOfEra();
        java.util.TimeZone timeZone52 = null;
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.forTimeZone(timeZone52);
        int int55 = dateTimeZone53.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime56 = org.joda.time.LocalDateTime.now(dateTimeZone53);
        org.joda.time.LocalDateTime localDateTime57 = org.joda.time.LocalDateTime.now(dateTimeZone53);
        org.joda.time.LocalDateTime localDateTime59 = localDateTime57.plusSeconds((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime61 = localDateTime57.minusWeeks((int) (byte) 10);
        java.util.TimeZone timeZone62 = null;
        org.joda.time.DateTimeZone dateTimeZone63 = org.joda.time.DateTimeZone.forTimeZone(timeZone62);
        int int65 = dateTimeZone63.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime66 = org.joda.time.LocalDateTime.now(dateTimeZone63);
        org.joda.time.LocalDateTime localDateTime67 = org.joda.time.LocalDateTime.now(dateTimeZone63);
        org.joda.time.LocalDateTime localDateTime69 = localDateTime67.plusSeconds((int) (short) 10);
        int int70 = localDateTime67.size();
        boolean boolean71 = localDateTime61.isBefore((org.joda.time.ReadablePartial) localDateTime67);
        org.joda.time.LocalDateTime localDateTime73 = localDateTime67.withMillisOfSecond(52);
        org.joda.time.LocalDateTime localDateTime75 = localDateTime73.plusMinutes(0);
        org.joda.time.LocalDateTime localDateTime77 = localDateTime73.plusDays(53166088);
        int int78 = localDateTime77.getDayOfYear();
        org.joda.time.chrono.ISOChronology iSOChronology79 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField80 = iSOChronology79.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField81 = iSOChronology79.yearOfEra();
        org.joda.time.DateTimeField dateTimeField82 = iSOChronology79.weekyearOfCentury();
        java.lang.String str83 = iSOChronology79.toString();
        org.joda.time.DateTimeField dateTimeField84 = iSOChronology79.clockhourOfHalfday();
        java.lang.String str85 = iSOChronology79.toString();
        org.joda.time.DateTimeField dateTimeField86 = iSOChronology79.dayOfMonth();
        java.util.Locale locale87 = java.util.Locale.KOREAN;
        java.lang.String str88 = locale87.getDisplayScript();
        int int89 = dateTimeField86.getMaximumShortTextLength(locale87);
        java.lang.String str90 = dateTimeField51.getAsShortText((org.joda.time.ReadablePartial) localDateTime77, locale87);
        java.lang.String str91 = locale87.getDisplayScript();
        java.lang.String str92 = dateTimeField33.getAsShortText((org.joda.time.ReadablePartial) localDateTime48, locale87);
        long long94 = iSOChronology7.set((org.joda.time.ReadablePartial) localDateTime48, (long) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime95 = new org.joda.time.LocalDateTime(2833465, 145599, 49674679, 53284, 2833465, 25, 53268301, (org.joda.time.Chronology) iSOChronology7);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 53284 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(iSOChronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeZone10);
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+10:00" + "'", str12, "+10:00");
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(iSOChronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateTimeZone24);
// flaky:         org.junit.Assert.assertTrue("'" + int26 + "' != '" + 36000000 + "'", int26 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime27);
// flaky:         org.junit.Assert.assertTrue("'" + int28 + "' != '" + 53 + "'", int28 == 53);
        org.junit.Assert.assertNotNull(localDateTime30);
// flaky:         org.junit.Assert.assertTrue("'" + long32 + "' != '" + 1645454934059L + "'", long32 == 1645454934059L);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeZone35);
// flaky:         org.junit.Assert.assertTrue("'" + int37 + "' != '" + 36000000 + "'", int37 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray39);
        org.junit.Assert.assertNotNull(dateTimeFieldType40);
// flaky:         org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long44 + "' != '" + 2934059L + "'", long44 == 2934059L);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(dateTimeFieldType46);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(iSOChronology49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(dateTimeZone53);
// flaky:         org.junit.Assert.assertTrue("'" + int55 + "' != '" + 36000000 + "'", int55 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertNotNull(dateTimeZone63);
// flaky:         org.junit.Assert.assertTrue("'" + int65 + "' != '" + 36000000 + "'", int65 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertNotNull(localDateTime69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 4 + "'", int70 == 4);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(localDateTime73);
        org.junit.Assert.assertNotNull(localDateTime75);
        org.junit.Assert.assertNotNull(localDateTime77);
// flaky:         org.junit.Assert.assertTrue("'" + int78 + "' != '" + 347 + "'", int78 == 347);
        org.junit.Assert.assertNotNull(iSOChronology79);
        org.junit.Assert.assertNotNull(dateTimeField80);
        org.junit.Assert.assertNotNull(dateTimeField81);
        org.junit.Assert.assertNotNull(dateTimeField82);
// flaky:         org.junit.Assert.assertEquals("'" + str83 + "' != '" + "ISOChronology[+10:00]" + "'", str83, "ISOChronology[+10:00]");
        org.junit.Assert.assertNotNull(dateTimeField84);
// flaky:         org.junit.Assert.assertEquals("'" + str85 + "' != '" + "ISOChronology[+10:00]" + "'", str85, "ISOChronology[+10:00]");
        org.junit.Assert.assertNotNull(dateTimeField86);
        org.junit.Assert.assertNotNull(locale87);
        org.junit.Assert.assertEquals(locale87.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "" + "'", str88, "");
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 2 + "'", int89 == 2);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "147585" + "'", str90, "147585");
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "" + "'", str91, "");
// flaky:         org.junit.Assert.assertEquals("'" + str92 + "' != '" + "0" + "'", str92, "0");
// flaky:         org.junit.Assert.assertTrue("'" + long94 + "' != '" + 1666363734059L + "'", long94 == 1666363734059L);
    }

    @Test
    public void test02322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02322");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.yearOfEra();
        org.joda.time.DurationField durationField3 = iSOChronology0.minutes();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.weekyear();
        org.joda.time.DurationField durationField5 = iSOChronology0.centuries();
        org.joda.time.DateTimeField dateTimeField6 = iSOChronology0.centuryOfEra();
        org.joda.time.DurationField durationField7 = iSOChronology0.minutes();
        org.joda.time.DateTimeField dateTimeField8 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField9 = iSOChronology0.clockhourOfHalfday();
        org.joda.time.DurationField durationField10 = iSOChronology0.weekyears();
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray14 = iSOChronology0.get(readablePeriod11, (long) 53267393, 1644849984588L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
    }

    @Test
    public void test02323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02323");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.hourOfHalfday();
        java.lang.String str2 = iSOChronology0.toString();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.era();
        org.joda.time.DurationField durationField4 = iSOChronology0.centuries();
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        long long8 = iSOChronology0.add(readablePeriod5, (long) 2022, (int) (byte) 100);
        org.joda.time.DateTimeField dateTimeField9 = iSOChronology0.dayOfYear();
        org.joda.time.DurationField durationField10 = iSOChronology0.months();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology0.era();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ISOChronology[+10:00]" + "'", str2, "ISOChronology[+10:00]");
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 2022L + "'", long8 == 2022L);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
    }

    @Test
    public void test02324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02324");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.yearOfEra();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.secondOfMinute();
        java.lang.String str4 = iSOChronology0.toString();
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology0.hourOfHalfday();
        org.joda.time.DurationField durationField6 = iSOChronology0.seconds();
        long long9 = durationField6.subtract(1644850026858L, 49687252);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "ISOChronology[+10:00]" + "'", str4, "ISOChronology[+10:00]");
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1595162774858L + "'", long9 == 1595162774858L);
    }

    @Test
    public void test02325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02325");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.DateTime dateTime6 = localDateTime4.toDateTime(readableInstant5);
        java.util.TimeZone timeZone7 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forTimeZone(timeZone7);
        int int10 = dateTimeZone8.getOffset(100L);
        org.joda.time.DateTime dateTime11 = localDateTime4.toDateTime(dateTimeZone8);
        org.joda.time.LocalDateTime.Property property12 = localDateTime4.monthOfYear();
        java.util.TimeZone timeZone13 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forTimeZone(timeZone13);
        int int16 = dateTimeZone14.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime17 = org.joda.time.LocalDateTime.now(dateTimeZone14);
        int int18 = localDateTime17.getWeekyear();
        org.joda.time.LocalDateTime.Property property19 = localDateTime17.millisOfDay();
        java.util.TimeZone timeZone20 = null;
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forTimeZone(timeZone20);
        int int23 = dateTimeZone21.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime24 = org.joda.time.LocalDateTime.now(dateTimeZone21);
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.DateTime dateTime26 = localDateTime24.toDateTime(readableInstant25);
        java.util.TimeZone timeZone27 = null;
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forTimeZone(timeZone27);
        int int30 = dateTimeZone28.getOffset(100L);
        org.joda.time.DateTime dateTime31 = localDateTime24.toDateTime(dateTimeZone28);
        int int32 = property19.compareTo((org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.LocalDateTime localDateTime33 = property19.roundHalfEvenCopy();
        boolean boolean34 = localDateTime4.isAfter((org.joda.time.ReadablePartial) localDateTime33);
        java.util.Date date35 = localDateTime4.toDate();
        int int36 = localDateTime4.getMonthOfYear();
        int int37 = localDateTime4.getWeekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime39 = localDateTime4.minusMinutes(454550);
        int int40 = localDateTime4.getWeekOfWeekyear();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 36000000 + "'", int3 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTimeZone8);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 36000000 + "'", int10 == 36000000);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
// flaky:         org.junit.Assert.assertTrue("'" + int16 + "' != '" + 36000000 + "'", int16 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2022 + "'", int18 == 2022);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTimeZone21);
// flaky:         org.junit.Assert.assertTrue("'" + int23 + "' != '" + 36000000 + "'", int23 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTimeZone28);
// flaky:         org.junit.Assert.assertTrue("'" + int30 + "' != '" + 36000000 + "'", int30 == 36000000);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(date35);
// flaky:         org.junit.Assert.assertEquals(date35.toString(), "Tue Feb 22 00:48:54 GMT+10:00 2022");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2 + "'", int36 == 2);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 8 + "'", int37 == 8);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 8 + "'", int40 == 8);
    }

    @Test
    public void test02326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02326");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.centuryOfEra();
        org.joda.time.DurationField durationField3 = iSOChronology0.eras();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology0.year();
        java.util.TimeZone timeZone6 = null;
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forTimeZone(timeZone6);
        int int9 = dateTimeZone7.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime10 = org.joda.time.LocalDateTime.now(dateTimeZone7);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray11 = localDateTime10.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.hourOfDay();
        int int13 = localDateTime10.get(dateTimeFieldType12);
        org.joda.time.LocalDateTime.Property property14 = localDateTime10.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime10.minusHours(20);
        int[] intArray18 = iSOChronology0.get((org.joda.time.ReadablePartial) localDateTime16, (long) 21);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.LocalDateTime localDateTime20 = localDateTime16.minus(readablePeriod19);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        org.joda.time.LocalDateTime.Property property22 = localDateTime16.property(dateTimeFieldType21);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str24 = localDateTime16.toString("2022-02-21T14:46:29.052");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: T");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeZone7);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 36000000 + "'", int9 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray11);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(intArray18);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[1970, 1, 1, 36000021]");
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertNotNull(property22);
    }

    @Test
    public void test02327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02327");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        int int5 = localDateTime4.getWeekyear();
        org.joda.time.LocalDateTime.Property property6 = localDateTime4.millisOfDay();
        java.lang.String str7 = property6.getAsString();
        int int8 = property6.getLeapAmount();
        org.joda.time.LocalDateTime localDateTime10 = property6.addToCopy((int) (short) 1);
        org.joda.time.Interval interval11 = property6.toInterval();
        org.joda.time.LocalDateTime localDateTime13 = property6.addWrapFieldToCopy(9);
        org.joda.time.tz.NameProvider nameProvider15 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale.Builder builder16 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder19 = builder16.setExtension('x', "jpn");
        java.util.Locale locale20 = java.util.Locale.GERMAN;
        java.util.Locale locale21 = java.util.Locale.GERMAN;
        java.lang.String str22 = locale20.getDisplayCountry(locale21);
        java.util.Locale locale23 = locale20.stripExtensions();
        java.lang.String str24 = locale20.getDisplayName();
        java.util.Locale.Builder builder25 = builder19.setLocale(locale20);
        java.lang.String str28 = nameProvider15.getName(locale20, "Japanese", "UTC");
        java.util.Locale.Builder builder29 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder32 = builder29.setExtension('x', "jpn");
        java.util.Locale locale33 = builder29.build();
        java.lang.String str36 = nameProvider15.getName(locale33, "1", "Japanisch");
        java.util.Locale.setDefault(locale33);
        java.lang.String str38 = locale33.getVariant();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime39 = property6.setCopy("2022-02-22T00:47:11.229", locale33);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2022-02-22T00:47:11.229\" for millisOfDay is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 36000000 + "'", int3 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2022 + "'", int5 == 2022);
        org.junit.Assert.assertNotNull(property6);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "2934345" + "'", str7, "2934345");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(nameProvider15);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "de");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "de");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "de");
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "German" + "'", str24, "German");
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "");
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
    }

    @Test
    public void test02328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02328");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffset(100L);
        java.util.TimeZone timeZone4 = dateTimeZone1.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forTimeZone(timeZone4);
        java.util.TimeZone.setDefault(timeZone4);
        java.util.TimeZone timeZone7 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forTimeZone(timeZone7);
        int int10 = dateTimeZone8.getOffset(100L);
        java.util.TimeZone timeZone11 = dateTimeZone8.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        java.util.TimeZone.setDefault(timeZone11);
        boolean boolean14 = timeZone4.hasSameRules(timeZone11);
        java.time.ZoneId zoneId15 = timeZone11.toZoneId();
        java.util.TimeZone timeZone16 = java.util.TimeZone.getTimeZone(zoneId15);
        // The following exception was thrown during execution in test generation
        try {
            int int23 = timeZone16.getOffset(53271064, 2840356, 2855123, 31, 41, 49674890);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 36000000 + "'", int3 == 36000000);
        org.junit.Assert.assertNotNull(timeZone4);
// flaky:         org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTimeZone8);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 36000000 + "'", int10 == 36000000);
        org.junit.Assert.assertNotNull(timeZone11);
// flaky:         org.junit.Assert.assertEquals(timeZone11.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(zoneId15);
        org.junit.Assert.assertNotNull(timeZone16);
// flaky:         org.junit.Assert.assertEquals(timeZone16.getDisplayName(), "GMT+10:00");
    }

    @Test
    public void test02329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02329");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.yearOfEra();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.hourOfDay();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.year();
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology0.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField6 = iSOChronology0.hourOfHalfday();
        org.joda.time.DurationField durationField7 = iSOChronology0.years();
        org.joda.time.DurationField durationField8 = iSOChronology0.hours();
        long long11 = durationField8.add(1644849998618L, 1645454858395L);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 5923639135071998618L + "'", long11 == 5923639135071998618L);
    }

    @Test
    public void test02330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02330");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.centuryOfEra();
        org.joda.time.DurationField durationField3 = iSOChronology0.seconds();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology0.hourOfHalfday();
        java.util.TimeZone timeZone6 = null;
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forTimeZone(timeZone6);
        int int9 = dateTimeZone7.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime10 = org.joda.time.LocalDateTime.now(dateTimeZone7);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray11 = localDateTime10.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.hourOfDay();
        int int13 = localDateTime10.get(dateTimeFieldType12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime10.minusWeeks(1);
        long long17 = iSOChronology0.set((org.joda.time.ReadablePartial) localDateTime15, (long) 0);
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology0.secondOfDay();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology0.yearOfEra();
        org.joda.time.DateTimeField dateTimeField20 = iSOChronology0.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField21 = iSOChronology0.year();
        // The following exception was thrown during execution in test generation
        try {
            long long27 = iSOChronology0.getDateTimeMillis(1645454830957L, 43, 27424260, 2842, 2827556);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 43 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeZone7);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 36000000 + "'", int9 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray11);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(localDateTime15);
// flaky:         org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1644850134441L + "'", long17 == 1644850134441L);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
    }

    @Test
    public void test02331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02331");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.DateTime dateTime6 = localDateTime4.toDateTime(readableInstant5);
        java.util.TimeZone timeZone7 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forTimeZone(timeZone7);
        int int10 = dateTimeZone8.getOffset(100L);
        org.joda.time.DateTime dateTime11 = localDateTime4.toDateTime(dateTimeZone8);
        org.joda.time.LocalDateTime.Property property12 = localDateTime4.monthOfYear();
        java.lang.String str13 = property12.getAsText();
        org.joda.time.chrono.ISOChronology iSOChronology14 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology14.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology14.centuryOfEra();
        org.joda.time.DurationField durationField17 = iSOChronology14.centuries();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology14.millisOfDay();
        java.util.TimeZone timeZone19 = null;
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forTimeZone(timeZone19);
        int int22 = dateTimeZone20.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime23 = org.joda.time.LocalDateTime.now(dateTimeZone20);
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.DateTime dateTime25 = localDateTime23.toDateTime(readableInstant24);
        java.util.TimeZone timeZone26 = null;
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forTimeZone(timeZone26);
        int int29 = dateTimeZone27.getOffset(100L);
        org.joda.time.DateTime dateTime30 = localDateTime23.toDateTime(dateTimeZone27);
        org.joda.time.LocalDateTime.Property property31 = localDateTime23.monthOfYear();
        java.util.TimeZone timeZone32 = null;
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forTimeZone(timeZone32);
        int int35 = dateTimeZone33.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime36 = org.joda.time.LocalDateTime.now(dateTimeZone33);
        int int37 = localDateTime36.getWeekyear();
        org.joda.time.LocalDateTime.Property property38 = localDateTime36.millisOfDay();
        java.util.TimeZone timeZone39 = null;
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forTimeZone(timeZone39);
        int int42 = dateTimeZone40.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime43 = org.joda.time.LocalDateTime.now(dateTimeZone40);
        org.joda.time.ReadableInstant readableInstant44 = null;
        org.joda.time.DateTime dateTime45 = localDateTime43.toDateTime(readableInstant44);
        java.util.TimeZone timeZone46 = null;
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.forTimeZone(timeZone46);
        int int49 = dateTimeZone47.getOffset(100L);
        org.joda.time.DateTime dateTime50 = localDateTime43.toDateTime(dateTimeZone47);
        int int51 = property38.compareTo((org.joda.time.ReadableInstant) dateTime50);
        org.joda.time.LocalDateTime localDateTime52 = property38.roundHalfEvenCopy();
        boolean boolean53 = localDateTime23.isAfter((org.joda.time.ReadablePartial) localDateTime52);
        java.util.Locale locale54 = java.util.Locale.UK;
        java.lang.String str55 = dateTimeField18.getAsText((org.joda.time.ReadablePartial) localDateTime52, locale54);
        int int56 = property12.compareTo((org.joda.time.ReadablePartial) localDateTime52);
        long long57 = property12.remainder();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 36000000 + "'", int3 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTimeZone8);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 36000000 + "'", int10 == 36000000);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "February" + "'", str13, "February");
        org.junit.Assert.assertNotNull(iSOChronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeZone20);
// flaky:         org.junit.Assert.assertTrue("'" + int22 + "' != '" + 36000000 + "'", int22 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTimeZone27);
// flaky:         org.junit.Assert.assertTrue("'" + int29 + "' != '" + 36000000 + "'", int29 == 36000000);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(dateTimeZone33);
// flaky:         org.junit.Assert.assertTrue("'" + int35 + "' != '" + 36000000 + "'", int35 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2022 + "'", int37 == 2022);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(dateTimeZone40);
// flaky:         org.junit.Assert.assertTrue("'" + int42 + "' != '" + 36000000 + "'", int42 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTimeZone47);
// flaky:         org.junit.Assert.assertTrue("'" + int49 + "' != '" + 36000000 + "'", int49 == 36000000);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "en_GB");
// flaky:         org.junit.Assert.assertEquals("'" + str55 + "' != '" + "2934581" + "'", str55, "2934581");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + long57 + "' != '" + 1817334581L + "'", long57 == 1817334581L);
    }

    @Test
    public void test02332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02332");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.DateTime dateTime6 = localDateTime4.toDateTime(readableInstant5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.Chronology chronology8 = null;
        boolean boolean9 = dateTimeFieldType7.isSupported(chronology8);
        org.joda.time.LocalDateTime.Property property10 = localDateTime4.property(dateTimeFieldType7);
        org.joda.time.LocalDateTime localDateTime11 = property10.withMinimumValue();
        long long12 = property10.remainder();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 36000000 + "'", int3 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDateTime11);
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + 2934748L + "'", long12 == 2934748L);
    }

    @Test
    public void test02333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02333");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.DateTime dateTime6 = localDateTime4.toDateTime(readableInstant5);
        java.util.TimeZone timeZone7 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forTimeZone(timeZone7);
        int int10 = dateTimeZone8.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now(dateTimeZone8);
        org.joda.time.LocalDateTime localDateTime12 = org.joda.time.LocalDateTime.now(dateTimeZone8);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.minusYears(2022);
        org.joda.time.LocalDateTime.Property property15 = localDateTime14.era();
        int int16 = localDateTime4.compareTo((org.joda.time.ReadablePartial) localDateTime14);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = localDateTime4.getFieldType(1);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime4.plusMillis(49686371);
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 36000000 + "'", int3 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTimeZone8);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 36000000 + "'", int10 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(localDateTime20);
    }

    @Test
    public void test02334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02334");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet1 = locale0.getExtensionKeys();
        java.util.Iterator<java.lang.Character> charItor2 = charSet1.iterator();
        java.util.Locale locale3 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet4 = locale3.getExtensionKeys();
        java.util.Iterator<java.lang.Character> charItor5 = charSet4.iterator();
        boolean boolean6 = charSet1.containsAll((java.util.Collection<java.lang.Character>) charSet4);
        java.util.Locale.LanguageRange[] languageRangeArray7 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList8 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList8, languageRangeArray7);
        java.util.Locale.LanguageRange[] languageRangeArray10 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList11 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList11, languageRangeArray10);
        java.util.Locale locale13 = java.util.Locale.KOREAN;
        java.util.Locale locale14 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet15 = locale14.getExtensionKeys();
        java.util.Locale locale16 = java.util.Locale.GERMAN;
        java.util.Locale locale17 = java.util.Locale.GERMAN;
        java.lang.String str18 = locale16.getDisplayCountry(locale17);
        java.util.Locale locale19 = locale16.stripExtensions();
        java.util.Locale locale20 = java.util.Locale.JAPANESE;
        java.util.Locale locale21 = java.util.Locale.JAPANESE;
        java.util.Locale locale22 = java.util.Locale.GERMAN;
        java.util.Locale[] localeArray23 = new java.util.Locale[] { locale13, locale14, locale19, locale20, locale21, locale22 };
        java.util.ArrayList<java.util.Locale> localeList24 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList24, localeArray23);
        java.util.Locale locale26 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList11, (java.util.Collection<java.util.Locale>) localeList24);
        java.util.List<java.util.Locale> localeList27 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList8, (java.util.Collection<java.util.Locale>) localeList24);
        java.util.Locale.LanguageRange[] languageRangeArray28 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList29 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList29, languageRangeArray28);
        java.lang.String[] strArray35 = new java.lang.String[] { "jpn", "+00:00", "+00:00", "\uc77c\ubcf8\uc5b4" };
        java.util.ArrayList<java.lang.String> strList36 = new java.util.ArrayList<java.lang.String>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList36, strArray35);
        java.lang.String str38 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList29, (java.util.Collection<java.lang.String>) strList36);
        java.util.AbstractList[] abstractListArray40 = new java.util.AbstractList[2];
        @SuppressWarnings("unchecked")
        java.util.AbstractList<java.util.Locale.LanguageRange>[] languageRangeListArray41 = (java.util.AbstractList<java.util.Locale.LanguageRange>[]) abstractListArray40;
        languageRangeListArray41[0] = languageRangeList8;
        languageRangeListArray41[1] = languageRangeList29;
        java.util.AbstractList<java.util.Locale.LanguageRange>[] languageRangeListArray46 = charSet1.toArray(languageRangeListArray41);
        java.util.Locale locale47 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet48 = locale47.getExtensionKeys();
        java.util.Locale locale49 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet50 = locale49.getExtensionKeys();
        java.util.Iterator<java.lang.Character> charItor51 = charSet50.iterator();
        java.util.Locale locale52 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet53 = locale52.getExtensionKeys();
        java.util.Iterator<java.lang.Character> charItor54 = charSet53.iterator();
        boolean boolean55 = charSet50.containsAll((java.util.Collection<java.lang.Character>) charSet53);
        java.util.TimeZone timeZone56 = null;
        org.joda.time.DateTimeZone dateTimeZone57 = org.joda.time.DateTimeZone.forTimeZone(timeZone56);
        int int59 = dateTimeZone57.getOffset(100L);
        java.util.TimeZone timeZone60 = dateTimeZone57.toTimeZone();
        org.joda.time.DateTimeZone[] dateTimeZoneArray61 = new org.joda.time.DateTimeZone[] { dateTimeZone57 };
        org.joda.time.DateTimeZone[] dateTimeZoneArray62 = charSet53.toArray(dateTimeZoneArray61);
        java.util.Locale locale63 = java.util.Locale.GERMAN;
        java.lang.String str64 = locale63.getDisplayScript();
        java.lang.String str66 = locale63.getExtension('x');
        java.util.Set<java.lang.Character> charSet67 = locale63.getExtensionKeys();
        boolean boolean68 = charSet53.retainAll((java.util.Collection<java.lang.Character>) charSet67);
        java.util.Locale locale69 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet70 = locale69.getExtensionKeys();
        java.util.Iterator<java.lang.Character> charItor71 = charSet70.iterator();
        java.util.ArrayList[] arrayListArray73 = new java.util.ArrayList[0];
        @SuppressWarnings("unchecked")
        java.util.ArrayList<java.util.Locale.LanguageRange>[] languageRangeListArray74 = (java.util.ArrayList<java.util.Locale.LanguageRange>[]) arrayListArray73;
        java.util.ArrayList<java.util.Locale.LanguageRange>[] languageRangeListArray75 = charSet70.toArray((java.util.ArrayList<java.util.Locale.LanguageRange>[]) arrayListArray73);
        java.util.stream.Stream<java.lang.Character> charStream76 = charSet70.stream();
        boolean boolean78 = charSet70.contains((java.lang.Object) "\uc77c\ubcf8\uc5b4");
        boolean boolean79 = charSet53.removeAll((java.util.Collection<java.lang.Character>) charSet70);
        boolean boolean80 = charSet48.retainAll((java.util.Collection<java.lang.Character>) charSet70);
        boolean boolean81 = charSet1.containsAll((java.util.Collection<java.lang.Character>) charSet70);
        int int82 = charSet70.size();
        int int83 = charSet70.size();
        java.util.Iterator<java.lang.Character> charItor84 = charSet70.iterator();
        java.util.TimeZone timeZone85 = null;
        org.joda.time.DateTimeZone dateTimeZone86 = org.joda.time.DateTimeZone.forTimeZone(timeZone85);
        int int88 = dateTimeZone86.getOffset(100L);
        java.util.TimeZone timeZone89 = dateTimeZone86.toTimeZone();
        int int91 = dateTimeZone86.getStandardOffset((long) ' ');
        boolean boolean93 = dateTimeZone86.isStandardOffset((long) '4');
        org.joda.time.chrono.ISOChronology iSOChronology94 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone86);
        org.joda.time.DateTimeField dateTimeField95 = iSOChronology94.dayOfMonth();
        org.joda.time.DurationField durationField96 = iSOChronology94.millis();
        boolean boolean97 = charSet70.remove((java.lang.Object) durationField96);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet1);
        org.junit.Assert.assertNotNull(charItor2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet4);
        org.junit.Assert.assertNotNull(charItor5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(languageRangeArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(languageRangeArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ko");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "de");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "de");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "de");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ja");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "ja");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "de");
        org.junit.Assert.assertNotNull(localeArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNull(locale26);
        org.junit.Assert.assertNotNull(localeList27);
        org.junit.Assert.assertNotNull(languageRangeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNotNull(abstractListArray40);
        org.junit.Assert.assertNotNull(languageRangeListArray41);
        org.junit.Assert.assertNotNull(languageRangeListArray46);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet48);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet50);
        org.junit.Assert.assertNotNull(charItor51);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet53);
        org.junit.Assert.assertNotNull(charItor54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(dateTimeZone57);
// flaky:         org.junit.Assert.assertTrue("'" + int59 + "' != '" + 36000000 + "'", int59 == 36000000);
        org.junit.Assert.assertNotNull(timeZone60);
// flaky:         org.junit.Assert.assertEquals(timeZone60.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertNotNull(dateTimeZoneArray61);
        org.junit.Assert.assertNotNull(dateTimeZoneArray62);
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "de");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertNotNull(charSet67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet70);
        org.junit.Assert.assertNotNull(charItor71);
        org.junit.Assert.assertNotNull(arrayListArray73);
        org.junit.Assert.assertNotNull(languageRangeListArray74);
        org.junit.Assert.assertNotNull(languageRangeListArray75);
        org.junit.Assert.assertNotNull(charStream76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertNotNull(charItor84);
        org.junit.Assert.assertNotNull(dateTimeZone86);
// flaky:         org.junit.Assert.assertTrue("'" + int88 + "' != '" + 36000000 + "'", int88 == 36000000);
        org.junit.Assert.assertNotNull(timeZone89);
// flaky:         org.junit.Assert.assertEquals(timeZone89.getDisplayName(), "GMT+10:00");
// flaky:         org.junit.Assert.assertTrue("'" + int91 + "' != '" + 36000000 + "'", int91 == 36000000);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
        org.junit.Assert.assertNotNull(iSOChronology94);
        org.junit.Assert.assertNotNull(dateTimeField95);
        org.junit.Assert.assertNotNull(durationField96);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
    }

    @Test
    public void test02335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02335");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.minuteOfDay();
        org.joda.time.DurationField durationField2 = iSOChronology0.hours();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.minuteOfDay();
        boolean boolean5 = dateTimeField3.isLeap((-1567654643548816L));
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test02336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02336");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.hourOfHalfday();
        java.lang.String str2 = iSOChronology0.toString();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.era();
        org.joda.time.DurationField durationField4 = iSOChronology0.centuries();
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        long long8 = iSOChronology0.add(readablePeriod5, (long) 2022, (int) (byte) 100);
        org.joda.time.DateTimeField dateTimeField9 = iSOChronology0.yearOfEra();
        java.util.TimeZone timeZone10 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        int int13 = dateTimeZone11.getOffset(100L);
        java.util.TimeZone timeZone15 = null;
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forTimeZone(timeZone15);
        int int18 = dateTimeZone16.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime19 = org.joda.time.LocalDateTime.now(dateTimeZone16);
        int int20 = localDateTime19.getWeekyear();
        org.joda.time.LocalDateTime.Property property21 = localDateTime19.millisOfDay();
        java.util.Locale locale22 = java.util.Locale.GERMAN;
        java.util.Locale locale23 = java.util.Locale.GERMAN;
        java.lang.String str24 = locale22.getDisplayCountry(locale23);
        java.util.Locale locale25 = locale22.stripExtensions();
        int int26 = property21.getMaximumShortTextLength(locale22);
        java.lang.String str27 = locale22.getDisplayScript();
        java.lang.String str28 = dateTimeZone11.getShortName((long) 0, locale22);
        java.lang.String str29 = locale22.getVariant();
        int int30 = dateTimeField9.getMaximumTextLength(locale22);
        java.util.Locale.Category category31 = java.util.Locale.Category.DISPLAY;
        org.joda.time.tz.NameProvider nameProvider32 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale33 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet34 = locale33.getExtensionKeys();
        java.lang.String str37 = nameProvider32.getShortName(locale33, "Koordinierte Universalzeit", "+00:00");
        java.lang.String str38 = locale33.toLanguageTag();
        java.util.Locale.setDefault(category31, locale33);
        java.util.Locale locale40 = java.util.Locale.GERMAN;
        java.util.Locale locale41 = java.util.Locale.GERMAN;
        java.lang.String str42 = locale40.getDisplayCountry(locale41);
        java.util.Locale locale43 = locale40.stripExtensions();
        java.lang.String str44 = locale40.getDisplayName();
        java.lang.String str45 = locale40.getVariant();
        java.util.Set<java.lang.String> strSet46 = locale40.getUnicodeLocaleKeys();
        java.util.Locale.setDefault(category31, locale40);
        java.util.Locale locale48 = java.util.Locale.JAPANESE;
        java.lang.String str49 = locale48.getDisplayLanguage();
        java.util.Locale locale50 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet51 = locale50.getExtensionKeys();
        java.lang.String str52 = locale48.getDisplayLanguage(locale50);
        java.lang.String str54 = locale48.getExtension('a');
        java.util.Locale.setDefault(category31, locale48);
        java.util.Locale locale56 = java.util.Locale.getDefault(category31);
        java.lang.String str57 = locale22.getDisplayScript(locale56);
        java.lang.String str58 = locale22.getISO3Country();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ISOChronology[+10:00]" + "'", str2, "ISOChronology[+10:00]");
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 2022L + "'", long8 == 2022L);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeZone11);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 36000000 + "'", int13 == 36000000);
        org.junit.Assert.assertNotNull(dateTimeZone16);
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + 36000000 + "'", int18 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2022 + "'", int20 == 2022);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "de");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "de");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "de");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 8 + "'", int26 == 8);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
// flaky:         org.junit.Assert.assertEquals("'" + str28 + "' != '" + "+10:00" + "'", str28, "+10:00");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 9 + "'", int30 == 9);
        org.junit.Assert.assertTrue("'" + category31 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category31.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(nameProvider32);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet34);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "ko" + "'", str38, "ko");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "de");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "de");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "de");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "\ub3c5\uc77c\uc5b4" + "'", str44, "\ub3c5\uc77c\uc5b4");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(strSet46);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "Japanisch" + "'", str49, "Japanisch");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "\uc77c\ubcf8\uc5b4" + "'", str52, "\uc77c\ubcf8\uc5b4");
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
    }

    @Test
    public void test02337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02337");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.yearOfEra();
        org.joda.time.DurationField durationField3 = iSOChronology0.minutes();
        org.joda.time.DurationField durationField4 = iSOChronology0.weekyears();
        java.lang.String str5 = durationField4.getName();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "weekyears" + "'", str5, "weekyears");
    }

    @Test
    public void test02338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02338");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime5 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.plusSeconds((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime5.minusWeeks((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime10 = org.joda.time.LocalDateTime.now();
        java.util.TimeZone timeZone11 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        int int14 = dateTimeZone12.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime15 = org.joda.time.LocalDateTime.now(dateTimeZone12);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray16 = localDateTime15.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.hourOfDay();
        int int18 = localDateTime15.get(dateTimeFieldType17);
        org.joda.time.LocalDateTime.Property property19 = localDateTime15.dayOfWeek();
        boolean boolean20 = localDateTime10.isEqual((org.joda.time.ReadablePartial) localDateTime15);
        org.joda.time.Chronology chronology21 = localDateTime15.getChronology();
        int int22 = localDateTime5.compareTo((org.joda.time.ReadablePartial) localDateTime15);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType24 = localDateTime5.getFieldType(53);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 53");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 36000000 + "'", int3 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(dateTimeZone12);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 36000000 + "'", int14 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray16);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
    }

    @Test
    public void test02339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02339");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 10, dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withYear(817);
        org.junit.Assert.assertNotNull(localDateTime4);
    }

    @Test
    public void test02340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02340");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.yearOfEra();
        org.joda.time.DurationField durationField3 = iSOChronology0.minutes();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.weekyear();
        org.joda.time.DurationField durationField5 = iSOChronology0.centuries();
        org.joda.time.DateTimeField dateTimeField6 = iSOChronology0.centuryOfEra();
        org.joda.time.DurationField durationField7 = iSOChronology0.minutes();
        org.joda.time.DateTimeField dateTimeField8 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField9 = iSOChronology0.minuteOfHour();
        org.joda.time.chrono.ISOChronology iSOChronology10 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology10.hourOfHalfday();
        java.lang.String str12 = iSOChronology10.toString();
        org.joda.time.DateTimeField dateTimeField13 = iSOChronology10.era();
        org.joda.time.DurationField durationField14 = iSOChronology10.centuries();
        org.joda.time.DurationField durationField15 = iSOChronology10.weeks();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology10.dayOfYear();
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology10);
        int[] intArray18 = localDateTime17.getValues();
        long long20 = iSOChronology0.set((org.joda.time.ReadablePartial) localDateTime17, 0L);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime17.plusYears((-292275054));
        java.lang.String str23 = localDateTime17.toString();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(iSOChronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "ISOChronology[+10:00]" + "'", str12, "ISOChronology[+10:00]");
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(intArray18);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[2022, 2, 22, 2935325]");
// flaky:         org.junit.Assert.assertTrue("'" + long20 + "' != '" + 1645454935325L + "'", long20 == 1645454935325L);
        org.junit.Assert.assertNotNull(localDateTime22);
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "2022-02-22T00:48:55.325" + "'", str23, "2022-02-22T00:48:55.325");
    }

    @Test
    public void test02341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02341");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.centuryOfEra();
        org.joda.time.DurationField durationField3 = iSOChronology0.centuries();
        org.joda.time.DurationField durationField4 = iSOChronology0.centuries();
        org.joda.time.DurationField durationField5 = iSOChronology0.halfdays();
        long long8 = durationField5.add((long) 2929, 49674679);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 2145946132802929L + "'", long8 == 2145946132802929L);
    }

    @Test
    public void test02342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02342");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forID("DateTimeField[dayOfMonth]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The datetime zone id 'DateTimeField[dayOfMonth]' is not recognised");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02343");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setExtension('x', "jpn");
        java.util.Locale locale4 = java.util.Locale.GERMAN;
        java.util.Locale locale5 = java.util.Locale.GERMAN;
        java.lang.String str6 = locale4.getDisplayCountry(locale5);
        java.util.Locale locale7 = locale4.stripExtensions();
        java.lang.String str8 = locale4.getDisplayName();
        java.util.Locale.Builder builder9 = builder3.setLocale(locale4);
        java.util.Locale.Builder builder12 = builder9.setUnicodeLocaleKeyword("22", "deu");
        java.util.Locale.Builder builder13 = builder9.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder16 = builder13.setExtension('u', "2022-02-21T14:48:26.154");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed extension value: 21T14:48:26.154 [at index 8]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "de");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "de");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\u30c9\u30a4\u30c4\u8a9e" + "'", str8, "\u30c9\u30a4\u30c4\u8a9e");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
    }

    @Test
    public void test02344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02344");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray5 = localDateTime4.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.hourOfDay();
        int int7 = localDateTime4.get(dateTimeFieldType6);
        org.joda.time.LocalDateTime.Property property8 = localDateTime4.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime4.minusHours(20);
        java.util.Locale locale11 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet12 = locale11.getExtensionKeys();
        java.util.Iterator<java.lang.Character> charItor13 = charSet12.iterator();
        java.util.ArrayList[] arrayListArray15 = new java.util.ArrayList[0];
        @SuppressWarnings("unchecked")
        java.util.ArrayList<java.util.Locale.LanguageRange>[] languageRangeListArray16 = (java.util.ArrayList<java.util.Locale.LanguageRange>[]) arrayListArray15;
        java.util.ArrayList<java.util.Locale.LanguageRange>[] languageRangeListArray17 = charSet12.toArray((java.util.ArrayList<java.util.Locale.LanguageRange>[]) arrayListArray15);
        java.util.TimeZone timeZone18 = null;
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forTimeZone(timeZone18);
        int int21 = dateTimeZone19.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime22 = org.joda.time.LocalDateTime.now(dateTimeZone19);
        int int23 = localDateTime22.getWeekyear();
        org.joda.time.LocalDateTime.Property property24 = localDateTime22.millisOfDay();
        java.util.TimeZone timeZone25 = null;
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forTimeZone(timeZone25);
        int int28 = dateTimeZone26.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime29 = org.joda.time.LocalDateTime.now(dateTimeZone26);
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.DateTime dateTime31 = localDateTime29.toDateTime(readableInstant30);
        java.util.TimeZone timeZone32 = null;
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forTimeZone(timeZone32);
        int int35 = dateTimeZone33.getOffset(100L);
        org.joda.time.DateTime dateTime36 = localDateTime29.toDateTime(dateTimeZone33);
        int int37 = property24.compareTo((org.joda.time.ReadableInstant) dateTime36);
        boolean boolean38 = charSet12.equals((java.lang.Object) dateTime36);
        org.joda.time.DateTime dateTime39 = localDateTime10.toDateTime((org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.LocalDateTime localDateTime40 = org.joda.time.LocalDateTime.now();
        java.util.TimeZone timeZone41 = null;
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forTimeZone(timeZone41);
        int int44 = dateTimeZone42.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime45 = org.joda.time.LocalDateTime.now(dateTimeZone42);
        int int46 = localDateTime45.getWeekyear();
        org.joda.time.LocalDateTime.Property property47 = localDateTime45.millisOfDay();
        java.util.TimeZone timeZone48 = null;
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.forTimeZone(timeZone48);
        int int51 = dateTimeZone49.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime52 = org.joda.time.LocalDateTime.now(dateTimeZone49);
        org.joda.time.ReadableInstant readableInstant53 = null;
        org.joda.time.DateTime dateTime54 = localDateTime52.toDateTime(readableInstant53);
        java.util.TimeZone timeZone55 = null;
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.forTimeZone(timeZone55);
        int int58 = dateTimeZone56.getOffset(100L);
        org.joda.time.DateTime dateTime59 = localDateTime52.toDateTime(dateTimeZone56);
        int int60 = property47.compareTo((org.joda.time.ReadableInstant) dateTime59);
        org.joda.time.LocalDateTime localDateTime61 = property47.roundHalfEvenCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType62 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.LocalDateTime.Property property63 = localDateTime61.property(dateTimeFieldType62);
        org.joda.time.DateTimeFieldType dateTimeFieldType64 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.Chronology chronology65 = null;
        boolean boolean66 = dateTimeFieldType64.isSupported(chronology65);
        boolean boolean67 = localDateTime61.isSupported(dateTimeFieldType64);
        int int68 = localDateTime40.get(dateTimeFieldType64);
        org.joda.time.LocalDateTime.Property property69 = localDateTime40.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime70 = org.joda.time.LocalDateTime.now();
        java.util.TimeZone timeZone71 = null;
        org.joda.time.DateTimeZone dateTimeZone72 = org.joda.time.DateTimeZone.forTimeZone(timeZone71);
        int int74 = dateTimeZone72.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime75 = org.joda.time.LocalDateTime.now(dateTimeZone72);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray76 = localDateTime75.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType77 = org.joda.time.DateTimeFieldType.hourOfDay();
        int int78 = localDateTime75.get(dateTimeFieldType77);
        org.joda.time.LocalDateTime.Property property79 = localDateTime75.dayOfWeek();
        boolean boolean80 = localDateTime70.isEqual((org.joda.time.ReadablePartial) localDateTime75);
        org.joda.time.ReadablePeriod readablePeriod81 = null;
        org.joda.time.LocalDateTime localDateTime83 = localDateTime70.withPeriodAdded(readablePeriod81, (int) (short) -1);
        org.joda.time.LocalDateTime localDateTime84 = localDateTime40.withFields((org.joda.time.ReadablePartial) localDateTime70);
        org.joda.time.DateTime dateTime85 = localDateTime70.toDateTime();
        boolean boolean86 = dateTime36.isAfter((org.joda.time.ReadableInstant) dateTime85);
        long long87 = dateTime36.getMillis();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 36000000 + "'", int3 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray5);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet12);
        org.junit.Assert.assertNotNull(charItor13);
        org.junit.Assert.assertNotNull(arrayListArray15);
        org.junit.Assert.assertNotNull(languageRangeListArray16);
        org.junit.Assert.assertNotNull(languageRangeListArray17);
        org.junit.Assert.assertNotNull(dateTimeZone19);
// flaky:         org.junit.Assert.assertTrue("'" + int21 + "' != '" + 36000000 + "'", int21 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2022 + "'", int23 == 2022);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTimeZone26);
// flaky:         org.junit.Assert.assertTrue("'" + int28 + "' != '" + 36000000 + "'", int28 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTimeZone33);
// flaky:         org.junit.Assert.assertTrue("'" + int35 + "' != '" + 36000000 + "'", int35 == 36000000);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(dateTimeZone42);
// flaky:         org.junit.Assert.assertTrue("'" + int44 + "' != '" + 36000000 + "'", int44 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2022 + "'", int46 == 2022);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(dateTimeZone49);
// flaky:         org.junit.Assert.assertTrue("'" + int51 + "' != '" + 36000000 + "'", int51 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTimeZone56);
// flaky:         org.junit.Assert.assertTrue("'" + int58 + "' != '" + 36000000 + "'", int58 == 36000000);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertNotNull(dateTimeFieldType62);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertNotNull(dateTimeFieldType64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int68 + "' != '" + 53 + "'", int68 == 53);
        org.junit.Assert.assertNotNull(property69);
        org.junit.Assert.assertNotNull(localDateTime70);
        org.junit.Assert.assertNotNull(dateTimeZone72);
// flaky:         org.junit.Assert.assertTrue("'" + int74 + "' != '" + 36000000 + "'", int74 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime75);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray76);
        org.junit.Assert.assertNotNull(dateTimeFieldType77);
// flaky:         org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertNotNull(property79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertNotNull(localDateTime83);
        org.junit.Assert.assertNotNull(localDateTime84);
        org.junit.Assert.assertNotNull(dateTime85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long87 + "' != '" + 1645454935712L + "'", long87 == 1645454935712L);
    }

    @Test
    public void test02345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02345");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffset(100L);
        java.util.TimeZone timeZone4 = dateTimeZone1.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forTimeZone(timeZone4);
        java.util.TimeZone.setDefault(timeZone4);
        java.lang.String str7 = timeZone4.getID();
        int int8 = timeZone4.getRawOffset();
        timeZone4.setID("2022-02-21T13:46:58.935");
        java.util.TimeZone timeZone11 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        int int14 = dateTimeZone12.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime15 = org.joda.time.LocalDateTime.now(dateTimeZone12);
        int int16 = localDateTime15.getWeekyear();
        org.joda.time.LocalDateTime.Property property17 = localDateTime15.millisOfDay();
        java.util.TimeZone timeZone18 = null;
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forTimeZone(timeZone18);
        int int21 = dateTimeZone19.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime22 = org.joda.time.LocalDateTime.now(dateTimeZone19);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.DateTime dateTime24 = localDateTime22.toDateTime(readableInstant23);
        java.util.TimeZone timeZone25 = null;
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forTimeZone(timeZone25);
        int int28 = dateTimeZone26.getOffset(100L);
        org.joda.time.DateTime dateTime29 = localDateTime22.toDateTime(dateTimeZone26);
        int int30 = property17.compareTo((org.joda.time.ReadableInstant) dateTime29);
        int int31 = property17.get();
        org.joda.time.LocalDateTime localDateTime33 = property17.addWrapFieldToCopy(454550);
        org.joda.time.LocalDateTime localDateTime35 = property17.addToCopy(380328273986263L);
        java.util.Date date36 = localDateTime35.toDate();
        org.joda.time.LocalDateTime localDateTime37 = org.joda.time.LocalDateTime.fromDateFields(date36);
        org.joda.time.LocalDateTime localDateTime38 = org.joda.time.LocalDateTime.fromDateFields(date36);
        boolean boolean39 = timeZone4.inDaylightTime(date36);
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 36000000 + "'", int3 == 36000000);
        org.junit.Assert.assertNotNull(timeZone4);
// flaky:         org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertNotNull(dateTimeZone5);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "GMT+10:00" + "'", str7, "GMT+10:00");
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 36000000 + "'", int8 == 36000000);
        org.junit.Assert.assertNotNull(dateTimeZone12);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 36000000 + "'", int14 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2022 + "'", int16 == 2022);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTimeZone19);
// flaky:         org.junit.Assert.assertTrue("'" + int21 + "' != '" + 36000000 + "'", int21 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTimeZone26);
// flaky:         org.junit.Assert.assertTrue("'" + int28 + "' != '" + 36000000 + "'", int28 == 36000000);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2935755 + "'", int31 == 2935755);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(date36);
// flaky:         org.junit.Assert.assertEquals(date36.toString(), "Sat Apr 07 15:35:22 GMT+10:00 14074");
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test02346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02346");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.DateTime dateTime6 = localDateTime4.toDateTime(readableInstant5);
        org.joda.time.Chronology chronology7 = dateTime6.getChronology();
        org.joda.time.DurationField durationField8 = chronology7.hours();
        org.joda.time.DurationField durationField9 = chronology7.months();
        org.joda.time.DateTimeField dateTimeField10 = chronology7.dayOfYear();
        java.util.TimeZone timeZone11 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        int int14 = dateTimeZone12.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime15 = org.joda.time.LocalDateTime.now(dateTimeZone12);
        int[] intArray18 = new int[] { (short) 0, (short) 0 };
        int int19 = dateTimeField10.getMinimumValue((org.joda.time.ReadablePartial) localDateTime15, intArray18);
        int int21 = dateTimeField10.getMinimumValue((long) 100);
        java.util.TimeZone timeZone22 = null;
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        int int25 = dateTimeZone23.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime26 = org.joda.time.LocalDateTime.now(dateTimeZone23);
        int int27 = localDateTime26.getWeekyear();
        org.joda.time.LocalDateTime.Property property28 = localDateTime26.minuteOfHour();
        int int29 = dateTimeField10.getMaximumValue((org.joda.time.ReadablePartial) localDateTime26);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime26.withCenturyOfEra(1);
        org.joda.time.LocalDateTime.Property property32 = localDateTime26.weekyear();
        org.joda.time.LocalDateTime localDateTime34 = property32.setCopy("53166874");
        org.joda.time.LocalDateTime.Property property35 = localDateTime34.hourOfDay();
        org.joda.time.LocalDateTime localDateTime36 = property35.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime37 = property35.roundCeilingCopy();
        org.joda.time.DateTimeField[] dateTimeFieldArray38 = localDateTime37.getFields();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 36000000 + "'", int3 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeZone12);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 36000000 + "'", int14 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[0, 0]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(dateTimeZone23);
// flaky:         org.junit.Assert.assertTrue("'" + int25 + "' != '" + 36000000 + "'", int25 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2022 + "'", int27 == 2022);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 365 + "'", int29 == 365);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(dateTimeFieldArray38);
    }

    @Test
    public void test02347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02347");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.centuryOfEra();
        org.joda.time.DurationField durationField3 = iSOChronology0.seconds();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology0.hourOfHalfday();
        // The following exception was thrown during execution in test generation
        try {
            long long13 = iSOChronology0.getDateTimeMillis(17, (int) (byte) 10, 2719, 2804241, (int) '#', 0, 915);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2804241 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
    }

    @Test
    public void test02348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02348");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.hourOfHalfday();
        java.lang.String str2 = iSOChronology0.toString();
        org.joda.time.DurationField durationField3 = iSOChronology0.eras();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology0.year();
        // The following exception was thrown during execution in test generation
        try {
            long long10 = iSOChronology0.getDateTimeMillis(2928569, 49674890, 2855302, 2841472);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 49674890 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ISOChronology[+10:00]" + "'", str2, "ISOChronology[+10:00]");
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
    }

    @Test
    public void test02349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02349");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        int int5 = localDateTime4.getWeekyear();
        org.joda.time.LocalDateTime.Property property6 = localDateTime4.millisOfDay();
        java.util.TimeZone timeZone7 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forTimeZone(timeZone7);
        int int10 = dateTimeZone8.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now(dateTimeZone8);
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.DateTime dateTime13 = localDateTime11.toDateTime(readableInstant12);
        java.util.TimeZone timeZone14 = null;
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forTimeZone(timeZone14);
        int int17 = dateTimeZone15.getOffset(100L);
        org.joda.time.DateTime dateTime18 = localDateTime11.toDateTime(dateTimeZone15);
        int int19 = property6.compareTo((org.joda.time.ReadableInstant) dateTime18);
        java.lang.String str20 = dateTime18.toString();
        java.util.TimeZone timeZone21 = null;
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forTimeZone(timeZone21);
        int int24 = dateTimeZone22.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime25 = org.joda.time.LocalDateTime.now(dateTimeZone22);
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.DateTime dateTime27 = localDateTime25.toDateTime(readableInstant26);
        java.util.TimeZone timeZone28 = null;
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forTimeZone(timeZone28);
        int int31 = dateTimeZone29.getOffset(100L);
        java.util.TimeZone timeZone32 = dateTimeZone29.toTimeZone();
        int int34 = dateTimeZone29.getStandardOffset((long) ' ');
        boolean boolean36 = dateTimeZone29.isStandardOffset((long) '4');
        boolean boolean37 = dateTimeZone29.isFixed();
        long long39 = dateTimeZone29.convertUTCToLocal(0L);
        boolean boolean40 = dateTimeZone29.isFixed();
        org.joda.time.DateTime dateTime41 = localDateTime25.toDateTime(dateTimeZone29);
        java.util.TimeZone timeZone42 = null;
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forTimeZone(timeZone42);
        int int45 = dateTimeZone43.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime46 = org.joda.time.LocalDateTime.now(dateTimeZone43);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray47 = localDateTime46.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = org.joda.time.DateTimeFieldType.hourOfDay();
        int int49 = localDateTime46.get(dateTimeFieldType48);
        org.joda.time.LocalDateTime.Property property50 = localDateTime46.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime52 = localDateTime46.minusHours(20);
        java.util.Locale locale53 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet54 = locale53.getExtensionKeys();
        java.util.Iterator<java.lang.Character> charItor55 = charSet54.iterator();
        java.util.ArrayList[] arrayListArray57 = new java.util.ArrayList[0];
        @SuppressWarnings("unchecked")
        java.util.ArrayList<java.util.Locale.LanguageRange>[] languageRangeListArray58 = (java.util.ArrayList<java.util.Locale.LanguageRange>[]) arrayListArray57;
        java.util.ArrayList<java.util.Locale.LanguageRange>[] languageRangeListArray59 = charSet54.toArray((java.util.ArrayList<java.util.Locale.LanguageRange>[]) arrayListArray57);
        java.util.TimeZone timeZone60 = null;
        org.joda.time.DateTimeZone dateTimeZone61 = org.joda.time.DateTimeZone.forTimeZone(timeZone60);
        int int63 = dateTimeZone61.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime64 = org.joda.time.LocalDateTime.now(dateTimeZone61);
        int int65 = localDateTime64.getWeekyear();
        org.joda.time.LocalDateTime.Property property66 = localDateTime64.millisOfDay();
        java.util.TimeZone timeZone67 = null;
        org.joda.time.DateTimeZone dateTimeZone68 = org.joda.time.DateTimeZone.forTimeZone(timeZone67);
        int int70 = dateTimeZone68.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime71 = org.joda.time.LocalDateTime.now(dateTimeZone68);
        org.joda.time.ReadableInstant readableInstant72 = null;
        org.joda.time.DateTime dateTime73 = localDateTime71.toDateTime(readableInstant72);
        java.util.TimeZone timeZone74 = null;
        org.joda.time.DateTimeZone dateTimeZone75 = org.joda.time.DateTimeZone.forTimeZone(timeZone74);
        int int77 = dateTimeZone75.getOffset(100L);
        org.joda.time.DateTime dateTime78 = localDateTime71.toDateTime(dateTimeZone75);
        int int79 = property66.compareTo((org.joda.time.ReadableInstant) dateTime78);
        boolean boolean80 = charSet54.equals((java.lang.Object) dateTime78);
        org.joda.time.DateTime dateTime81 = localDateTime52.toDateTime((org.joda.time.ReadableInstant) dateTime78);
        java.util.TimeZone timeZone82 = null;
        org.joda.time.DateTimeZone dateTimeZone83 = org.joda.time.DateTimeZone.forTimeZone(timeZone82);
        int int85 = dateTimeZone83.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime86 = org.joda.time.LocalDateTime.now(dateTimeZone83);
        org.joda.time.ReadableInstant readableInstant87 = null;
        org.joda.time.DateTime dateTime88 = localDateTime86.toDateTime(readableInstant87);
        long long89 = dateTime88.getMillis();
        boolean boolean90 = dateTime81.isBefore((org.joda.time.ReadableInstant) dateTime88);
        boolean boolean91 = dateTime41.isEqual((org.joda.time.ReadableInstant) dateTime81);
        long long92 = dateTime41.getMillis();
        int int93 = dateTime18.compareTo((org.joda.time.ReadableInstant) dateTime41);
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 36000000 + "'", int3 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2022 + "'", int5 == 2022);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTimeZone8);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 36000000 + "'", int10 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
// flaky:         org.junit.Assert.assertTrue("'" + int17 + "' != '" + 36000000 + "'", int17 == 36000000);
        org.junit.Assert.assertNotNull(dateTime18);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "2022-02-22T00:48:56.003+10:00" + "'", str20, "2022-02-22T00:48:56.003+10:00");
        org.junit.Assert.assertNotNull(dateTimeZone22);
// flaky:         org.junit.Assert.assertTrue("'" + int24 + "' != '" + 36000000 + "'", int24 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTimeZone29);
// flaky:         org.junit.Assert.assertTrue("'" + int31 + "' != '" + 36000000 + "'", int31 == 36000000);
        org.junit.Assert.assertNotNull(timeZone32);
// flaky:         org.junit.Assert.assertEquals(timeZone32.getDisplayName(), "GMT+10:00");
// flaky:         org.junit.Assert.assertTrue("'" + int34 + "' != '" + 36000000 + "'", int34 == 36000000);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
// flaky:         org.junit.Assert.assertTrue("'" + long39 + "' != '" + 36000000L + "'", long39 == 36000000L);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTimeZone43);
// flaky:         org.junit.Assert.assertTrue("'" + int45 + "' != '" + 36000000 + "'", int45 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray47);
        org.junit.Assert.assertNotNull(dateTimeFieldType48);
// flaky:         org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet54);
        org.junit.Assert.assertNotNull(charItor55);
        org.junit.Assert.assertNotNull(arrayListArray57);
        org.junit.Assert.assertNotNull(languageRangeListArray58);
        org.junit.Assert.assertNotNull(languageRangeListArray59);
        org.junit.Assert.assertNotNull(dateTimeZone61);
// flaky:         org.junit.Assert.assertTrue("'" + int63 + "' != '" + 36000000 + "'", int63 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 2022 + "'", int65 == 2022);
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertNotNull(dateTimeZone68);
// flaky:         org.junit.Assert.assertTrue("'" + int70 + "' != '" + 36000000 + "'", int70 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime71);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(dateTimeZone75);
// flaky:         org.junit.Assert.assertTrue("'" + int77 + "' != '" + 36000000 + "'", int77 == 36000000);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertNotNull(dateTimeZone83);
// flaky:         org.junit.Assert.assertTrue("'" + int85 + "' != '" + 36000000 + "'", int85 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime86);
        org.junit.Assert.assertNotNull(dateTime88);
// flaky:         org.junit.Assert.assertTrue("'" + long89 + "' != '" + 1645454936003L + "'", long89 == 1645454936003L);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long92 + "' != '" + 1645454936003L + "'", long92 == 1645454936003L);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 0 + "'", int93 == 0);
    }

    @Test
    public void test02350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02350");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        org.joda.time.DurationFieldType durationFieldType1 = dateTimeFieldType0.getDurationType();
        java.lang.String str2 = durationFieldType1.toString();
        org.joda.time.chrono.ISOChronology iSOChronology3 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology3.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology3.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        long long9 = iSOChronology3.add(readablePeriod6, (long) 100, 11);
        org.joda.time.Chronology chronology10 = iSOChronology3.withUTC();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology3.millisOfSecond();
        org.joda.time.DurationField durationField12 = durationFieldType1.getField((org.joda.time.Chronology) iSOChronology3);
        // The following exception was thrown during execution in test generation
        try {
            long long18 = iSOChronology3.getDateTimeMillis(116L, (-1), 2846870, 0, 2852990);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -1 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(durationFieldType1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hours" + "'", str2, "hours");
        org.junit.Assert.assertNotNull(iSOChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 100L + "'", long9 == 100L);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
    }

    @Test
    public void test02351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02351");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        int int5 = localDateTime4.getWeekyear();
        org.joda.time.LocalDateTime.Property property6 = localDateTime4.minuteOfHour();
        org.joda.time.LocalDateTime.Property property7 = localDateTime4.dayOfYear();
        java.util.TimeZone timeZone8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        int int11 = dateTimeZone9.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime12 = org.joda.time.LocalDateTime.now(dateTimeZone9);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray13 = localDateTime12.getFieldTypes();
        int int14 = property7.compareTo((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.chrono.ISOChronology iSOChronology15 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology15.hourOfHalfday();
        java.lang.String str17 = iSOChronology15.toString();
        org.joda.time.DurationField durationField18 = iSOChronology15.eras();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology15.year();
        org.joda.time.DateTimeField dateTimeField20 = iSOChronology15.hourOfDay();
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime((java.lang.Object) 31556952000000L);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.minusSeconds((-292275054));
        org.joda.time.LocalDateTime localDateTime26 = localDateTime22.minusMonths((int) (short) 100);
        org.joda.time.chrono.ISOChronology iSOChronology27 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField28 = iSOChronology27.hourOfHalfday();
        org.joda.time.tz.NameProvider nameProvider29 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale30 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet31 = locale30.getExtensionKeys();
        java.lang.String str34 = nameProvider29.getShortName(locale30, "Koordinierte Universalzeit", "+00:00");
        java.util.Locale locale35 = java.util.Locale.GERMAN;
        java.lang.String str38 = nameProvider29.getShortName(locale35, "53167803", "jpn");
        int int39 = dateTimeField28.getMaximumTextLength(locale35);
        java.util.TimeZone timeZone40 = null;
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forTimeZone(timeZone40);
        int int43 = dateTimeZone41.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime44 = org.joda.time.LocalDateTime.now(dateTimeZone41);
        int int45 = localDateTime44.getWeekyear();
        org.joda.time.tz.NameProvider nameProvider47 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale48 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet49 = locale48.getExtensionKeys();
        java.lang.String str52 = nameProvider47.getShortName(locale48, "Koordinierte Universalzeit", "+00:00");
        java.util.Locale.Builder builder53 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder56 = builder53.setExtension('x', "jpn");
        java.util.Locale locale57 = java.util.Locale.GERMAN;
        java.util.Locale locale58 = java.util.Locale.GERMAN;
        java.lang.String str59 = locale57.getDisplayCountry(locale58);
        java.util.Locale locale60 = locale57.stripExtensions();
        java.lang.String str61 = locale57.getDisplayName();
        java.util.Locale.Builder builder62 = builder56.setLocale(locale57);
        java.util.Locale locale63 = builder62.build();
        java.lang.String str64 = locale63.getScript();
        java.lang.String str67 = nameProvider47.getName(locale63, "hourOfDay", "");
        java.lang.String str68 = dateTimeField28.getAsShortText((org.joda.time.ReadablePartial) localDateTime44, 22, locale63);
        java.util.TimeZone timeZone69 = null;
        org.joda.time.DateTimeZone dateTimeZone70 = org.joda.time.DateTimeZone.forTimeZone(timeZone69);
        int int72 = dateTimeZone70.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime73 = org.joda.time.LocalDateTime.now(dateTimeZone70);
        int int74 = localDateTime73.getWeekyear();
        java.util.TimeZone timeZone75 = null;
        org.joda.time.DateTimeZone dateTimeZone76 = org.joda.time.DateTimeZone.forTimeZone(timeZone75);
        int int78 = dateTimeZone76.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime79 = org.joda.time.LocalDateTime.now(dateTimeZone76);
        org.joda.time.LocalDateTime localDateTime80 = org.joda.time.LocalDateTime.now(dateTimeZone76);
        org.joda.time.LocalDateTime localDateTime82 = localDateTime80.minusMinutes((int) ' ');
        org.joda.time.ReadablePeriod readablePeriod83 = null;
        org.joda.time.LocalDateTime localDateTime84 = localDateTime80.plus(readablePeriod83);
        int[] intArray85 = localDateTime84.getValues();
        int int86 = dateTimeField28.getMaximumValue((org.joda.time.ReadablePartial) localDateTime73, intArray85);
        iSOChronology15.validate((org.joda.time.ReadablePartial) localDateTime22, intArray85);
        int int88 = property7.compareTo((org.joda.time.ReadablePartial) localDateTime22);
        org.joda.time.DateTimeField dateTimeField89 = property7.getField();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime91 = property7.setCopy("2848516");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2848516 for dayOfYear must be in the range [1,365]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 36000000 + "'", int3 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2022 + "'", int5 == 2022);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTimeZone9);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 36000000 + "'", int11 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(iSOChronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "ISOChronology[+10:00]" + "'", str17, "ISOChronology[+10:00]");
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(iSOChronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(nameProvider29);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet31);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "de");
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2 + "'", int39 == 2);
        org.junit.Assert.assertNotNull(dateTimeZone41);
// flaky:         org.junit.Assert.assertTrue("'" + int43 + "' != '" + 36000000 + "'", int43 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2022 + "'", int45 == 2022);
        org.junit.Assert.assertNotNull(nameProvider47);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet49);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "de");
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "de");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "de");
// flaky:         org.junit.Assert.assertEquals("'" + str61 + "' != '" + "German" + "'", str61, "German");
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "de");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertNull(str67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "22" + "'", str68, "22");
        org.junit.Assert.assertNotNull(dateTimeZone70);
// flaky:         org.junit.Assert.assertTrue("'" + int72 + "' != '" + 36000000 + "'", int72 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 2022 + "'", int74 == 2022);
        org.junit.Assert.assertNotNull(dateTimeZone76);
// flaky:         org.junit.Assert.assertTrue("'" + int78 + "' != '" + 36000000 + "'", int78 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime79);
        org.junit.Assert.assertNotNull(localDateTime80);
        org.junit.Assert.assertNotNull(localDateTime82);
        org.junit.Assert.assertNotNull(localDateTime84);
        org.junit.Assert.assertNotNull(intArray85);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[2022, 2, 22, 2936365]");
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 11 + "'", int86 == 11);
// flaky:         org.junit.Assert.assertTrue("'" + int88 + "' != '" + (-1) + "'", int88 == (-1));
        org.junit.Assert.assertNotNull(dateTimeField89);
    }

    @Test
    public void test02352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02352");
        org.joda.time.tz.NameProvider nameProvider0 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.TimeZone timeZone1 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        int int4 = dateTimeZone2.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime5 = org.joda.time.LocalDateTime.now(dateTimeZone2);
        int int6 = localDateTime5.getWeekyear();
        org.joda.time.LocalDateTime.Property property7 = localDateTime5.millisOfDay();
        java.util.Locale locale8 = java.util.Locale.KOREAN;
        int int9 = property7.getMaximumTextLength(locale8);
        java.lang.String str10 = locale8.getVariant();
        java.lang.String str13 = nameProvider0.getName(locale8, "2022-02-21T14:46:31.592", "");
        org.joda.time.DateTimeZone.setNameProvider(nameProvider0);
        java.util.Locale locale15 = java.util.Locale.JAPANESE;
        java.lang.String str16 = locale15.getDisplayLanguage();
        java.lang.String str17 = locale15.getLanguage();
        java.lang.String str20 = nameProvider0.getShortName(locale15, "147585-12-13T00:47:31.267", "ISOChronology[+10:00]");
        java.lang.String str21 = locale15.getCountry();
        org.junit.Assert.assertNotNull(nameProvider0);
        org.junit.Assert.assertNotNull(dateTimeZone2);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 36000000 + "'", int4 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2022 + "'", int6 == 2022);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "ko");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8 + "'", int9 == 8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ja");
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Japanese" + "'", str16, "Japanese");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "ja" + "'", str17, "ja");
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
    }

    @Test
    public void test02353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02353");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        int int5 = localDateTime4.getWeekyear();
        org.joda.time.DurationFieldType durationFieldType6 = org.joda.time.DurationFieldType.days();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime4.withFieldAdded(durationFieldType6, 53166088);
        org.joda.time.chrono.ISOChronology iSOChronology9 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology9.hourOfHalfday();
        java.lang.String str11 = iSOChronology9.toString();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology9.era();
        org.joda.time.DurationField durationField13 = iSOChronology9.centuries();
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        long long17 = iSOChronology9.add(readablePeriod14, (long) 2022, (int) (byte) 100);
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology9.dayOfYear();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology9.year();
        boolean boolean20 = durationFieldType6.isSupported((org.joda.time.Chronology) iSOChronology9);
        org.joda.time.DurationField durationField21 = iSOChronology9.centuries();
        org.joda.time.DurationField durationField22 = iSOChronology9.weekyears();
        org.joda.time.DurationField durationField23 = iSOChronology9.seconds();
        int int26 = durationField23.getValue(1644850077229L, 0L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 36000000 + "'", int3 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2022 + "'", int5 == 2022);
        org.junit.Assert.assertNotNull(durationFieldType6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(iSOChronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "ISOChronology[+10:00]" + "'", str11, "ISOChronology[+10:00]");
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 2022L + "'", long17 == 2022L);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1644850077 + "'", int26 == 1644850077);
    }

    @Test
    public void test02354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02354");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.hours();
        org.joda.time.chrono.ISOChronology iSOChronology1 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology1.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology1.centuryOfEra();
        org.joda.time.DurationField durationField4 = iSOChronology1.centuries();
        org.joda.time.DurationField durationField5 = iSOChronology1.hours();
        org.joda.time.DurationField durationField6 = iSOChronology1.years();
        boolean boolean7 = durationFieldType0.isSupported((org.joda.time.Chronology) iSOChronology1);
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField9 = iSOChronology8.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology8.yearOfEra();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology8.hourOfDay();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology8.dayOfMonth();
        org.joda.time.DurationField durationField13 = iSOChronology8.centuries();
        org.joda.time.DurationField durationField14 = durationFieldType0.getField((org.joda.time.Chronology) iSOChronology8);
        java.util.TimeZone timeZone15 = null;
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forTimeZone(timeZone15);
        int int18 = dateTimeZone16.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime19 = org.joda.time.LocalDateTime.now(dateTimeZone16);
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.DateTime dateTime21 = localDateTime19.toDateTime(readableInstant20);
        org.joda.time.Chronology chronology22 = dateTime21.getChronology();
        org.joda.time.DurationField durationField23 = chronology22.hours();
        org.joda.time.DateTimeField dateTimeField24 = chronology22.hourOfDay();
        org.joda.time.DurationField durationField25 = chronology22.weeks();
        org.joda.time.DurationField durationField26 = durationFieldType0.getField(chronology22);
        org.joda.time.DurationField durationField27 = chronology22.years();
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(iSOChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeZone16);
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + 36000000 + "'", int18 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(durationField27);
    }

    @Test
    public void test02355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02355");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.hourOfHalfday();
        org.joda.time.DurationField durationField3 = iSOChronology0.weeks();
        org.joda.time.DurationField durationField4 = iSOChronology0.weekyears();
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology0.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone6 = iSOChronology0.getZone();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone6);
        long long9 = dateTimeZone6.nextTransition(1645454771211L);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1645454771211L + "'", long9 == 1645454771211L);
    }

    @Test
    public void test02356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02356");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Locale locale3 = java.util.Locale.KOREAN;
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet5 = locale4.getExtensionKeys();
        java.util.Locale locale6 = java.util.Locale.GERMAN;
        java.util.Locale locale7 = java.util.Locale.GERMAN;
        java.lang.String str8 = locale6.getDisplayCountry(locale7);
        java.util.Locale locale9 = locale6.stripExtensions();
        java.util.Locale locale10 = java.util.Locale.JAPANESE;
        java.util.Locale locale11 = java.util.Locale.JAPANESE;
        java.util.Locale locale12 = java.util.Locale.GERMAN;
        java.util.Locale[] localeArray13 = new java.util.Locale[] { locale3, locale4, locale9, locale10, locale11, locale12 };
        java.util.ArrayList<java.util.Locale> localeList14 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList14, localeArray13);
        java.util.Locale locale16 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.util.Locale>) localeList14);
        java.util.Locale.LanguageRange[] languageRangeArray17 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList18 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList18, languageRangeArray17);
        java.util.Locale locale20 = java.util.Locale.KOREAN;
        java.util.Locale locale21 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet22 = locale21.getExtensionKeys();
        java.util.Locale locale23 = java.util.Locale.GERMAN;
        java.util.Locale locale24 = java.util.Locale.GERMAN;
        java.lang.String str25 = locale23.getDisplayCountry(locale24);
        java.util.Locale locale26 = locale23.stripExtensions();
        java.util.Locale locale27 = java.util.Locale.JAPANESE;
        java.util.Locale locale28 = java.util.Locale.JAPANESE;
        java.util.Locale locale29 = java.util.Locale.GERMAN;
        java.util.Locale[] localeArray30 = new java.util.Locale[] { locale20, locale21, locale26, locale27, locale28, locale29 };
        java.util.ArrayList<java.util.Locale> localeList31 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList31, localeArray30);
        java.util.Locale locale33 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList18, (java.util.Collection<java.util.Locale>) localeList31);
        java.util.Locale locale34 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.util.Locale>) localeList31);
        java.util.Locale.LanguageRange[] languageRangeArray35 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList36 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList36, languageRangeArray35);
        java.util.Locale locale38 = java.util.Locale.GERMAN;
        java.util.Locale locale39 = java.util.Locale.GERMAN;
        java.lang.String str40 = locale38.getDisplayCountry(locale39);
        java.util.Locale locale41 = locale38.stripExtensions();
        java.lang.String str42 = locale38.getDisplayName();
        java.lang.String str43 = locale38.getVariant();
        java.util.Set<java.lang.String> strSet44 = locale38.getUnicodeLocaleKeys();
        java.util.Locale.FilteringMode filteringMode45 = java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList46 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList36, (java.util.Collection<java.lang.String>) strSet44, filteringMode45);
        java.util.List<java.lang.String> strList47 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strList46);
        java.util.Locale.LanguageRange[] languageRangeArray48 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList49 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList49, languageRangeArray48);
        java.util.Locale locale51 = java.util.Locale.GERMAN;
        java.util.Locale locale52 = java.util.Locale.GERMAN;
        java.lang.String str53 = locale51.getDisplayCountry(locale52);
        java.util.Locale locale54 = locale51.stripExtensions();
        java.lang.String str55 = locale51.getDisplayName();
        java.lang.String str56 = locale51.getVariant();
        java.util.Set<java.lang.String> strSet57 = locale51.getUnicodeLocaleKeys();
        java.util.Locale.FilteringMode filteringMode58 = java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList59 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList49, (java.util.Collection<java.lang.String>) strSet57, filteringMode58);
        java.lang.String str60 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet57);
        java.util.Locale.LanguageRange[] languageRangeArray61 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList62 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList62, languageRangeArray61);
        java.util.Locale locale64 = java.util.Locale.GERMAN;
        java.util.Locale locale65 = java.util.Locale.GERMAN;
        java.lang.String str66 = locale64.getDisplayCountry(locale65);
        java.util.Locale locale67 = locale64.stripExtensions();
        java.lang.String str68 = locale64.getDisplayName();
        java.lang.String str69 = locale64.getVariant();
        java.util.Set<java.lang.String> strSet70 = locale64.getUnicodeLocaleKeys();
        java.util.Locale.FilteringMode filteringMode71 = java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList72 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList62, (java.util.Collection<java.lang.String>) strSet70, filteringMode71);
        java.util.List<java.lang.String> strList73 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet70);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap74 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList75 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strMap74);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap76 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList77 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strMap76);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap78 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList79 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList77, strMap78);
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ko");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "de");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "de");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "de");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ja");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ja");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "de");
        org.junit.Assert.assertNotNull(localeArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNull(locale16);
        org.junit.Assert.assertNotNull(languageRangeArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ko");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet22);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "de");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "de");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "de");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "ja");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "ja");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "de");
        org.junit.Assert.assertNotNull(localeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNull(locale33);
        org.junit.Assert.assertNull(locale34);
        org.junit.Assert.assertNotNull(languageRangeArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "de");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "de");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "de");
// flaky:         org.junit.Assert.assertEquals("'" + str42 + "' != '" + "German" + "'", str42, "German");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(strSet44);
        org.junit.Assert.assertTrue("'" + filteringMode45 + "' != '" + java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES + "'", filteringMode45.equals(java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList46);
        org.junit.Assert.assertNotNull(strList47);
        org.junit.Assert.assertNotNull(languageRangeArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "de");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "de");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "de");
// flaky:         org.junit.Assert.assertEquals("'" + str55 + "' != '" + "German" + "'", str55, "German");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNotNull(strSet57);
        org.junit.Assert.assertTrue("'" + filteringMode58 + "' != '" + java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES + "'", filteringMode58.equals(java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList59);
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertNotNull(languageRangeArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "de");
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "de");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "de");
// flaky:         org.junit.Assert.assertEquals("'" + str68 + "' != '" + "German" + "'", str68, "German");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertNotNull(strSet70);
        org.junit.Assert.assertTrue("'" + filteringMode71 + "' != '" + java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES + "'", filteringMode71.equals(java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList72);
        org.junit.Assert.assertNotNull(strList73);
        org.junit.Assert.assertNotNull(languageRangeList75);
        org.junit.Assert.assertNotNull(languageRangeList77);
        org.junit.Assert.assertNotNull(languageRangeList79);
    }

    @Test
    public void test02357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02357");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime5 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusMinutes((int) ' ');
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withYearOfCentury((int) (byte) 10);
        java.util.TimeZone timeZone10 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        int int13 = dateTimeZone11.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime14 = org.joda.time.LocalDateTime.now(dateTimeZone11);
        org.joda.time.LocalDateTime localDateTime15 = org.joda.time.LocalDateTime.now(dateTimeZone11);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.withMillisOfSecond((int) '4');
        org.joda.time.LocalDateTime localDateTime18 = localDateTime9.withFields((org.joda.time.ReadablePartial) localDateTime15);
        org.joda.time.LocalDateTime.Property property19 = localDateTime15.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime15.minusMillis(2022);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.withYear(53304259);
        java.lang.String str24 = localDateTime23.toString();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 36000000 + "'", int3 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone11);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 36000000 + "'", int13 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "53304259-02-22T00:48:54.645" + "'", str24, "53304259-02-22T00:48:54.645");
    }

    @Test
    public void test02358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02358");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.yearOfEra();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.weekyearOfCentury();
        org.joda.time.DurationField durationField4 = iSOChronology0.weeks();
        org.joda.time.DurationField durationField5 = iSOChronology0.millis();
        org.joda.time.DateTimeField dateTimeField6 = iSOChronology0.dayOfYear();
        org.joda.time.DateTimeField dateTimeField7 = iSOChronology0.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime8 = org.joda.time.LocalDateTime.now();
        java.util.TimeZone timeZone9 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        int int12 = dateTimeZone10.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime13 = org.joda.time.LocalDateTime.now(dateTimeZone10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray14 = localDateTime13.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.hourOfDay();
        int int16 = localDateTime13.get(dateTimeFieldType15);
        org.joda.time.LocalDateTime.Property property17 = localDateTime13.dayOfWeek();
        boolean boolean18 = localDateTime8.isEqual((org.joda.time.ReadablePartial) localDateTime13);
        org.joda.time.LocalDateTime.Property property19 = localDateTime13.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime20 = property19.roundHalfCeilingCopy();
        java.util.TimeZone timeZone21 = null;
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forTimeZone(timeZone21);
        int int24 = dateTimeZone22.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime25 = org.joda.time.LocalDateTime.now(dateTimeZone22);
        org.joda.time.LocalDateTime localDateTime26 = org.joda.time.LocalDateTime.now(dateTimeZone22);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.minusMinutes((int) ' ');
        int int29 = property19.compareTo((org.joda.time.ReadablePartial) localDateTime28);
        java.util.TimeZone timeZone30 = null;
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forTimeZone(timeZone30);
        int int33 = dateTimeZone31.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime34 = org.joda.time.LocalDateTime.now(dateTimeZone31);
        org.joda.time.LocalDateTime localDateTime35 = org.joda.time.LocalDateTime.now(dateTimeZone31);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime35.plusSeconds((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime35.minusWeeks((int) (byte) 10);
        java.util.TimeZone timeZone40 = null;
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forTimeZone(timeZone40);
        int int43 = dateTimeZone41.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime44 = org.joda.time.LocalDateTime.now(dateTimeZone41);
        org.joda.time.LocalDateTime localDateTime45 = org.joda.time.LocalDateTime.now(dateTimeZone41);
        org.joda.time.LocalDateTime localDateTime47 = localDateTime45.plusSeconds((int) (short) 10);
        int int48 = localDateTime45.size();
        boolean boolean49 = localDateTime39.isBefore((org.joda.time.ReadablePartial) localDateTime45);
        org.joda.time.LocalDateTime.Property property50 = localDateTime45.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime51 = localDateTime28.withFields((org.joda.time.ReadablePartial) localDateTime45);
        java.util.Locale locale53 = java.util.Locale.US;
        java.lang.String str54 = dateTimeField7.getAsShortText((org.joda.time.ReadablePartial) localDateTime45, 2852321, locale53);
        java.util.Locale locale58 = new java.util.Locale("German");
        // The following exception was thrown during execution in test generation
        try {
            long long59 = dateTimeField7.set(604800000L, "", locale58);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"\" for yearOfCentury is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(dateTimeZone10);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 36000000 + "'", int12 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray14);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
// flaky:         org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(dateTimeZone22);
// flaky:         org.junit.Assert.assertTrue("'" + int24 + "' != '" + 36000000 + "'", int24 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone31);
// flaky:         org.junit.Assert.assertTrue("'" + int33 + "' != '" + 36000000 + "'", int33 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(dateTimeZone41);
// flaky:         org.junit.Assert.assertTrue("'" + int43 + "' != '" + 36000000 + "'", int43 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 4 + "'", int48 == 4);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "2852321" + "'", str54, "2852321");
        org.junit.Assert.assertEquals(locale58.toString(), "german");
    }

    @Test
    public void test02359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02359");
        java.lang.String[] strArray1 = java.util.TimeZone.getAvailableIDs(11);
        org.junit.Assert.assertNotNull(strArray1);
    }

    @Test
    public void test02360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02360");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        int int5 = localDateTime4.getWeekyear();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.withSecondOfMinute((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.minusMillis((-292275054));
        org.joda.time.chrono.ISOChronology iSOChronology10 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology10.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology10.centuryOfEra();
        org.joda.time.DurationField durationField13 = iSOChronology10.centuries();
        org.joda.time.DurationField durationField14 = iSOChronology10.hours();
        java.util.TimeZone timeZone15 = null;
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forTimeZone(timeZone15);
        int int18 = dateTimeZone16.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime19 = org.joda.time.LocalDateTime.now(dateTimeZone16);
        int int20 = localDateTime19.getDayOfYear();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime19.withYearOfEra(2022);
        long long24 = iSOChronology10.set((org.joda.time.ReadablePartial) localDateTime22, (long) 0);
        org.joda.time.DateTimeField dateTimeField25 = iSOChronology10.monthOfYear();
        org.joda.time.DateTimeField dateTimeField26 = iSOChronology10.clockhourOfDay();
        org.joda.time.Chronology chronology27 = iSOChronology10.withUTC();
        org.joda.time.DateTimeZone dateTimeZone28 = iSOChronology10.getZone();
        org.joda.time.DateTime dateTime29 = localDateTime7.toDateTime(dateTimeZone28);
        int int30 = localDateTime7.getMillisOfSecond();
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.LocalDateTime localDateTime32 = localDateTime7.minus(readablePeriod31);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime32.plusSeconds(53308);
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 36000000 + "'", int3 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2022 + "'", int5 == 2022);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(iSOChronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeZone16);
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + 36000000 + "'", int18 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime19);
// flaky:         org.junit.Assert.assertTrue("'" + int20 + "' != '" + 53 + "'", int20 == 53);
        org.junit.Assert.assertNotNull(localDateTime22);
// flaky:         org.junit.Assert.assertTrue("'" + long24 + "' != '" + 1645454936990L + "'", long24 == 1645454936990L);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(dateTime29);
// flaky:         org.junit.Assert.assertTrue("'" + int30 + "' != '" + 990 + "'", int30 == 990);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(localDateTime34);
    }

    @Test
    public void test02361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02361");
        org.joda.time.chrono.ISOChronology iSOChronology7 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField8 = iSOChronology7.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField9 = iSOChronology7.yearOfEra();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology7.year();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology7.yearOfCentury();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime(33, 53262345, 0, 19037, 0, 339, 0, (org.joda.time.Chronology) iSOChronology7);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 19037 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(iSOChronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
    }

    @Test
    public void test02362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02362");
        java.util.TimeZone timeZone1 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        int int4 = dateTimeZone2.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime5 = org.joda.time.LocalDateTime.now(dateTimeZone2);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.DateTime dateTime7 = localDateTime5.toDateTime(readableInstant6);
        org.joda.time.Chronology chronology8 = dateTime7.getChronology();
        org.joda.time.DurationField durationField9 = chronology8.hours();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((long) 52, chronology8);
        org.joda.time.DateTimeField dateTimeField11 = chronology8.secondOfDay();
        org.joda.time.DurationField durationField12 = chronology8.years();
        org.junit.Assert.assertNotNull(dateTimeZone2);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 36000000 + "'", int4 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
    }

    @Test
    public void test02363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02363");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.hourOfHalfday();
        java.lang.String str2 = iSOChronology0.toString();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.era();
        org.joda.time.DurationField durationField4 = iSOChronology0.centuries();
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        long long8 = iSOChronology0.add(readablePeriod5, (long) 2022, (int) (byte) 100);
        org.joda.time.DateTimeField dateTimeField9 = iSOChronology0.dayOfYear();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology0.yearOfEra();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology0.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology0.minuteOfDay();
        org.joda.time.DurationField durationField13 = iSOChronology0.millis();
        org.joda.time.DurationField durationField14 = iSOChronology0.weeks();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ISOChronology[+10:00]" + "'", str2, "ISOChronology[+10:00]");
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 2022L + "'", long8 == 2022L);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(durationField14);
    }

    @Test
    public void test02364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02364");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.centuryOfEra();
        org.joda.time.DurationField durationField3 = iSOChronology0.seconds();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.clockhourOfDay();
        org.joda.time.Chronology chronology5 = iSOChronology0.withUTC();
        org.joda.time.DurationField durationField6 = iSOChronology0.days();
        org.joda.time.DurationField durationField7 = iSOChronology0.millis();
        org.joda.time.DurationField durationField8 = iSOChronology0.millis();
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        long long12 = iSOChronology0.add(readablePeriod9, (long) 46, 817);
        org.joda.time.DateTimeField dateTimeField13 = iSOChronology0.weekyear();
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology0.halfdayOfDay();
        // The following exception was thrown during execution in test generation
        try {
            long long22 = iSOChronology0.getDateTimeMillis(53317594, 53305104, 7, 2932992, (-1), 86399, 49678046);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2932992 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 46L + "'", long12 == 46L);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
    }

    @Test
    public void test02365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02365");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        int int5 = localDateTime4.getWeekyear();
        org.joda.time.LocalDateTime.Property property6 = localDateTime4.millisOfDay();
        java.util.TimeZone timeZone7 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forTimeZone(timeZone7);
        int int10 = dateTimeZone8.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now(dateTimeZone8);
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.DateTime dateTime13 = localDateTime11.toDateTime(readableInstant12);
        java.util.TimeZone timeZone14 = null;
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forTimeZone(timeZone14);
        int int17 = dateTimeZone15.getOffset(100L);
        org.joda.time.DateTime dateTime18 = localDateTime11.toDateTime(dateTimeZone15);
        int int19 = property6.compareTo((org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.LocalDateTime localDateTime20 = property6.roundHalfEvenCopy();
        org.joda.time.Interval interval21 = property6.toInterval();
        org.joda.time.LocalDateTime localDateTime22 = property6.roundHalfFloorCopy();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime24 = localDateTime22.withDayOfWeek(53195125);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 53195125 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 36000000 + "'", int3 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2022 + "'", int5 == 2022);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTimeZone8);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 36000000 + "'", int10 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
// flaky:         org.junit.Assert.assertTrue("'" + int17 + "' != '" + 36000000 + "'", int17 == 36000000);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(localDateTime22);
    }

    @Test
    public void test02366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02366");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        int int5 = localDateTime4.getWeekyear();
        org.joda.time.LocalDateTime.Property property6 = localDateTime4.millisOfDay();
        java.util.Locale locale7 = java.util.Locale.GERMAN;
        java.util.Locale locale8 = java.util.Locale.GERMAN;
        java.lang.String str9 = locale7.getDisplayCountry(locale8);
        java.util.Locale locale10 = locale7.stripExtensions();
        int int11 = property6.getMaximumShortTextLength(locale7);
        int int12 = property6.getMinimumValueOverall();
        org.joda.time.DurationField durationField13 = property6.getRangeDurationField();
        java.lang.String str14 = property6.getName();
        org.joda.time.LocalDateTime localDateTime15 = property6.roundHalfEvenCopy();
        int int16 = localDateTime15.getMonthOfYear();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 36000000 + "'", int3 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2022 + "'", int5 == 2022);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "de");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "de");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "de");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 8 + "'", int11 == 8);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "millisOfDay" + "'", str14, "millisOfDay");
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2 + "'", int16 == 2);
    }

    @Test
    public void test02367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02367");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        int int5 = localDateTime4.getWeekyear();
        org.joda.time.LocalDateTime.Property property6 = localDateTime4.minuteOfHour();
        org.joda.time.chrono.ISOChronology iSOChronology7 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField8 = iSOChronology7.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField9 = iSOChronology7.centuryOfEra();
        org.joda.time.DurationField durationField10 = iSOChronology7.seconds();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology7.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology7.hourOfHalfday();
        java.util.TimeZone timeZone13 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forTimeZone(timeZone13);
        int int16 = dateTimeZone14.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime17 = org.joda.time.LocalDateTime.now(dateTimeZone14);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray18 = localDateTime17.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.hourOfDay();
        int int20 = localDateTime17.get(dateTimeFieldType19);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime17.minusWeeks(1);
        long long24 = iSOChronology7.set((org.joda.time.ReadablePartial) localDateTime22, (long) 0);
        boolean boolean25 = localDateTime4.isAfter((org.joda.time.ReadablePartial) localDateTime22);
        org.joda.time.ReadableDuration readableDuration26 = null;
        org.joda.time.LocalDateTime localDateTime28 = localDateTime4.withDurationAdded(readableDuration26, 53195994);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.plusSeconds(29);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime28.minusMillis(49674890);
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 36000000 + "'", int3 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2022 + "'", int5 == 2022);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(iSOChronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
// flaky:         org.junit.Assert.assertTrue("'" + int16 + "' != '" + 36000000 + "'", int16 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray18);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
// flaky:         org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(localDateTime22);
// flaky:         org.junit.Assert.assertTrue("'" + long24 + "' != '" + 1644850137571L + "'", long24 == 1644850137571L);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime32);
    }

    @Test
    public void test02368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02368");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.minuteOfDay();
        org.joda.time.DurationField durationField2 = iSOChronology0.hours();
        long long3 = durationField2.getUnitMillis();
        long long6 = durationField2.getMillis(53194727L, 1645454882155L);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 3600000L + "'", long3 == 3600000L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 191501017200000L + "'", long6 == 191501017200000L);
    }

    @Test
    public void test02369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02369");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.hourOfHalfday();
        java.lang.String str2 = iSOChronology0.toString();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.era();
        org.joda.time.DurationField durationField4 = iSOChronology0.centuries();
        org.joda.time.DurationField durationField5 = iSOChronology0.weeks();
        org.joda.time.DateTimeField dateTimeField6 = iSOChronology0.era();
        org.joda.time.DateTimeField dateTimeField7 = iSOChronology0.secondOfDay();
        boolean boolean8 = dateTimeField7.isSupported();
        long long11 = dateTimeField7.add((-259200000L), 7);
        boolean boolean12 = dateTimeField7.isSupported();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ISOChronology[+10:00]" + "'", str2, "ISOChronology[+10:00]");
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-259193000L) + "'", long11 == (-259193000L));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test02370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02370");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.yearOfEra();
        java.util.TimeZone timeZone3 = null;
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forTimeZone(timeZone3);
        int int6 = dateTimeZone4.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime7 = org.joda.time.LocalDateTime.now(dateTimeZone4);
        org.joda.time.LocalDateTime localDateTime8 = org.joda.time.LocalDateTime.now(dateTimeZone4);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.plusSeconds((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime8.minusWeeks((int) (byte) 10);
        java.util.TimeZone timeZone13 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forTimeZone(timeZone13);
        int int16 = dateTimeZone14.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime17 = org.joda.time.LocalDateTime.now(dateTimeZone14);
        org.joda.time.LocalDateTime localDateTime18 = org.joda.time.LocalDateTime.now(dateTimeZone14);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.plusSeconds((int) (short) 10);
        int int21 = localDateTime18.size();
        boolean boolean22 = localDateTime12.isBefore((org.joda.time.ReadablePartial) localDateTime18);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime18.withMillisOfSecond(52);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.plusMinutes(0);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime24.plusDays(53166088);
        int int29 = localDateTime28.getDayOfYear();
        org.joda.time.chrono.ISOChronology iSOChronology30 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField31 = iSOChronology30.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField32 = iSOChronology30.yearOfEra();
        org.joda.time.DateTimeField dateTimeField33 = iSOChronology30.weekyearOfCentury();
        java.lang.String str34 = iSOChronology30.toString();
        org.joda.time.DateTimeField dateTimeField35 = iSOChronology30.clockhourOfHalfday();
        java.lang.String str36 = iSOChronology30.toString();
        org.joda.time.DateTimeField dateTimeField37 = iSOChronology30.dayOfMonth();
        java.util.Locale locale38 = java.util.Locale.KOREAN;
        java.lang.String str39 = locale38.getDisplayScript();
        int int40 = dateTimeField37.getMaximumShortTextLength(locale38);
        java.lang.String str41 = dateTimeField2.getAsShortText((org.joda.time.ReadablePartial) localDateTime28, locale38);
        long long43 = dateTimeField2.roundHalfFloor((-148668187967999990L));
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeZone4);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 36000000 + "'", int6 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
// flaky:         org.junit.Assert.assertTrue("'" + int16 + "' != '" + 36000000 + "'", int16 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 4 + "'", int21 == 4);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
// flaky:         org.junit.Assert.assertTrue("'" + int29 + "' != '" + 347 + "'", int29 == 347);
        org.junit.Assert.assertNotNull(iSOChronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
// flaky:         org.junit.Assert.assertEquals("'" + str34 + "' != '" + "ISOChronology[+10:00]" + "'", str34, "ISOChronology[+10:00]");
        org.junit.Assert.assertNotNull(dateTimeField35);
// flaky:         org.junit.Assert.assertEquals("'" + str36 + "' != '" + "ISOChronology[+10:00]" + "'", str36, "ISOChronology[+10:00]");
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 2 + "'", int40 == 2);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "147585" + "'", str41, "147585");
// flaky:         org.junit.Assert.assertTrue("'" + long43 + "' != '" + (-148668177463200000L) + "'", long43 == (-148668177463200000L));
    }

    @Test
    public void test02371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02371");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.centuryOfEra();
        org.joda.time.DurationField durationField3 = iSOChronology0.seconds();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.clockhourOfDay();
        org.joda.time.Chronology chronology5 = iSOChronology0.withUTC();
        org.joda.time.DateTimeField dateTimeField6 = iSOChronology0.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField7 = iSOChronology0.year();
        org.joda.time.DurationField durationField8 = iSOChronology0.seconds();
        org.joda.time.DateTimeField dateTimeField9 = iSOChronology0.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology0.monthOfYear();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
    }

    @Test
    public void test02372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02372");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("allemand");
        org.junit.Assert.assertNotNull(timeZone1);
// flaky:         org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Greenwich Zeit");
    }

    @Test
    public void test02373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02373");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.hourOfHalfday();
        org.joda.time.tz.NameProvider nameProvider2 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale3 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet4 = locale3.getExtensionKeys();
        java.lang.String str7 = nameProvider2.getShortName(locale3, "Koordinierte Universalzeit", "+00:00");
        java.util.Locale locale8 = java.util.Locale.GERMAN;
        java.lang.String str11 = nameProvider2.getShortName(locale8, "53167803", "jpn");
        int int12 = dateTimeField1.getMaximumTextLength(locale8);
        java.util.TimeZone timeZone13 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forTimeZone(timeZone13);
        int int16 = dateTimeZone14.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime17 = org.joda.time.LocalDateTime.now(dateTimeZone14);
        int int18 = localDateTime17.getWeekyear();
        org.joda.time.tz.NameProvider nameProvider20 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale21 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet22 = locale21.getExtensionKeys();
        java.lang.String str25 = nameProvider20.getShortName(locale21, "Koordinierte Universalzeit", "+00:00");
        java.util.Locale.Builder builder26 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder29 = builder26.setExtension('x', "jpn");
        java.util.Locale locale30 = java.util.Locale.GERMAN;
        java.util.Locale locale31 = java.util.Locale.GERMAN;
        java.lang.String str32 = locale30.getDisplayCountry(locale31);
        java.util.Locale locale33 = locale30.stripExtensions();
        java.lang.String str34 = locale30.getDisplayName();
        java.util.Locale.Builder builder35 = builder29.setLocale(locale30);
        java.util.Locale locale36 = builder35.build();
        java.lang.String str37 = locale36.getScript();
        java.lang.String str40 = nameProvider20.getName(locale36, "hourOfDay", "");
        java.lang.String str41 = dateTimeField1.getAsShortText((org.joda.time.ReadablePartial) localDateTime17, 22, locale36);
        java.util.TimeZone timeZone42 = null;
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forTimeZone(timeZone42);
        int int45 = dateTimeZone43.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime46 = org.joda.time.LocalDateTime.now(dateTimeZone43);
        int int47 = localDateTime46.getWeekyear();
        java.util.TimeZone timeZone48 = null;
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.forTimeZone(timeZone48);
        int int51 = dateTimeZone49.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime52 = org.joda.time.LocalDateTime.now(dateTimeZone49);
        org.joda.time.LocalDateTime localDateTime53 = org.joda.time.LocalDateTime.now(dateTimeZone49);
        org.joda.time.LocalDateTime localDateTime55 = localDateTime53.minusMinutes((int) ' ');
        org.joda.time.ReadablePeriod readablePeriod56 = null;
        org.joda.time.LocalDateTime localDateTime57 = localDateTime53.plus(readablePeriod56);
        int[] intArray58 = localDateTime57.getValues();
        int int59 = dateTimeField1.getMaximumValue((org.joda.time.ReadablePartial) localDateTime46, intArray58);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime64 = localDateTime46.withTime(49712063, 43, (int) 'a', 56);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 49712063 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(nameProvider2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet4);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "de");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertNotNull(dateTimeZone14);
// flaky:         org.junit.Assert.assertTrue("'" + int16 + "' != '" + 36000000 + "'", int16 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2022 + "'", int18 == 2022);
        org.junit.Assert.assertNotNull(nameProvider20);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet22);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "de");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "de");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "de");
// flaky:         org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Deutsch" + "'", str34, "Deutsch");
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "de");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "22" + "'", str41, "22");
        org.junit.Assert.assertNotNull(dateTimeZone43);
// flaky:         org.junit.Assert.assertTrue("'" + int45 + "' != '" + 36000000 + "'", int45 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2022 + "'", int47 == 2022);
        org.junit.Assert.assertNotNull(dateTimeZone49);
// flaky:         org.junit.Assert.assertTrue("'" + int51 + "' != '" + 36000000 + "'", int51 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(intArray58);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[2022, 2, 22, 2937972]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 11 + "'", int59 == 11);
    }

    @Test
    public void test02374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02374");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.hourOfHalfday();
        long long7 = iSOChronology0.getDateTimeMillis((-1), 8, 3, 365);
        org.joda.time.DurationField durationField8 = iSOChronology0.seconds();
        long long12 = iSOChronology0.add(1645454774909L, (long) 53178951, 53166088);
        org.joda.time.DateTimeField dateTimeField13 = iSOChronology0.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology0.dayOfYear();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology0.yearOfCentury();
        // The following exception was thrown during execution in test generation
        try {
            long long18 = dateTimeField15.add(7435349078400000L, 191770254000000L);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Value cannot fit in an int: 191770254000000");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
// flaky:         org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-62180301599635L) + "'", long7 == (-62180301599635L));
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 2828962243388597L + "'", long12 == 2828962243388597L);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
    }

    @Test
    public void test02375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02375");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.hourOfHalfday();
        java.lang.String str2 = iSOChronology0.toString();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.era();
        org.joda.time.DurationField durationField4 = iSOChronology0.centuries();
        org.joda.time.DurationField durationField5 = iSOChronology0.weeks();
        org.joda.time.DateTimeField dateTimeField6 = iSOChronology0.era();
        org.joda.time.DateTimeField dateTimeField7 = iSOChronology0.secondOfDay();
        boolean boolean8 = dateTimeField7.isSupported();
        long long11 = dateTimeField7.add((-259200000L), 7);
        java.util.TimeZone timeZone12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone12);
        int int15 = dateTimeZone13.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime16 = org.joda.time.LocalDateTime.now(dateTimeZone13);
        int int17 = localDateTime16.getWeekyear();
        org.joda.time.LocalDateTime.Property property18 = localDateTime16.minuteOfHour();
        int int19 = localDateTime16.getHourOfDay();
        org.joda.time.LocalDateTime.Property property20 = localDateTime16.dayOfWeek();
        java.util.TimeZone timeZone21 = null;
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forTimeZone(timeZone21);
        int int24 = dateTimeZone22.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime25 = org.joda.time.LocalDateTime.now(dateTimeZone22);
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.DateTime dateTime27 = localDateTime25.toDateTime(readableInstant26);
        java.util.TimeZone timeZone28 = null;
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forTimeZone(timeZone28);
        int int31 = dateTimeZone29.getOffset(100L);
        org.joda.time.DateTime dateTime32 = localDateTime25.toDateTime(dateTimeZone29);
        org.joda.time.LocalDateTime.Property property33 = localDateTime25.monthOfYear();
        java.util.TimeZone timeZone34 = null;
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forTimeZone(timeZone34);
        int int37 = dateTimeZone35.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime38 = org.joda.time.LocalDateTime.now(dateTimeZone35);
        int int39 = localDateTime38.getWeekyear();
        org.joda.time.LocalDateTime.Property property40 = localDateTime38.millisOfDay();
        java.util.TimeZone timeZone41 = null;
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forTimeZone(timeZone41);
        int int44 = dateTimeZone42.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime45 = org.joda.time.LocalDateTime.now(dateTimeZone42);
        org.joda.time.ReadableInstant readableInstant46 = null;
        org.joda.time.DateTime dateTime47 = localDateTime45.toDateTime(readableInstant46);
        java.util.TimeZone timeZone48 = null;
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.forTimeZone(timeZone48);
        int int51 = dateTimeZone49.getOffset(100L);
        org.joda.time.DateTime dateTime52 = localDateTime45.toDateTime(dateTimeZone49);
        int int53 = property40.compareTo((org.joda.time.ReadableInstant) dateTime52);
        org.joda.time.LocalDateTime localDateTime54 = property40.roundHalfEvenCopy();
        boolean boolean55 = localDateTime25.isAfter((org.joda.time.ReadablePartial) localDateTime54);
        org.joda.time.ReadableDuration readableDuration56 = null;
        org.joda.time.LocalDateTime localDateTime57 = localDateTime54.minus(readableDuration56);
        org.joda.time.LocalDateTime localDateTime58 = localDateTime16.withFields((org.joda.time.ReadablePartial) localDateTime54);
        java.util.TimeZone timeZone59 = null;
        org.joda.time.DateTimeZone dateTimeZone60 = org.joda.time.DateTimeZone.forTimeZone(timeZone59);
        int int62 = dateTimeZone60.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime63 = org.joda.time.LocalDateTime.now(dateTimeZone60);
        org.joda.time.LocalDateTime localDateTime64 = org.joda.time.LocalDateTime.now(dateTimeZone60);
        org.joda.time.LocalDateTime localDateTime66 = localDateTime64.minusMinutes((int) ' ');
        org.joda.time.ReadablePeriod readablePeriod67 = null;
        org.joda.time.LocalDateTime localDateTime68 = localDateTime64.plus(readablePeriod67);
        org.joda.time.LocalDateTime.Property property69 = localDateTime64.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime70 = property69.roundHalfEvenCopy();
        int int71 = property69.getMinimumValue();
        java.util.Locale locale72 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str73 = locale72.getDisplayScript();
        java.util.Locale locale74 = java.util.Locale.GERMAN;
        java.util.Locale locale75 = java.util.Locale.GERMAN;
        java.lang.String str76 = locale74.getDisplayCountry(locale75);
        java.util.Locale locale77 = locale74.stripExtensions();
        java.lang.String str78 = locale74.getDisplayName();
        java.util.Locale locale79 = java.util.Locale.PRC;
        java.lang.String str80 = locale74.getDisplayScript(locale79);
        java.lang.String str81 = locale72.getDisplayCountry(locale74);
        boolean boolean82 = locale74.hasExtensions();
        int int83 = property69.getMaximumShortTextLength(locale74);
        java.lang.String str84 = dateTimeField7.getAsShortText((org.joda.time.ReadablePartial) localDateTime54, locale74);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime86 = localDateTime54.withMinuteOfHour((-38086));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -38086 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ISOChronology[+10:00]" + "'", str2, "ISOChronology[+10:00]");
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-259193000L) + "'", long11 == (-259193000L));
        org.junit.Assert.assertNotNull(dateTimeZone13);
// flaky:         org.junit.Assert.assertTrue("'" + int15 + "' != '" + 36000000 + "'", int15 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2022 + "'", int17 == 2022);
        org.junit.Assert.assertNotNull(property18);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTimeZone22);
// flaky:         org.junit.Assert.assertTrue("'" + int24 + "' != '" + 36000000 + "'", int24 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTimeZone29);
// flaky:         org.junit.Assert.assertTrue("'" + int31 + "' != '" + 36000000 + "'", int31 == 36000000);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(dateTimeZone35);
// flaky:         org.junit.Assert.assertTrue("'" + int37 + "' != '" + 36000000 + "'", int37 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2022 + "'", int39 == 2022);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(dateTimeZone42);
// flaky:         org.junit.Assert.assertTrue("'" + int44 + "' != '" + 36000000 + "'", int44 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTimeZone49);
// flaky:         org.junit.Assert.assertTrue("'" + int51 + "' != '" + 36000000 + "'", int51 == 36000000);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(dateTimeZone60);
// flaky:         org.junit.Assert.assertTrue("'" + int62 + "' != '" + 36000000 + "'", int62 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertNotNull(localDateTime68);
        org.junit.Assert.assertNotNull(property69);
        org.junit.Assert.assertNotNull(localDateTime70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1 + "'", int71 == 1);
        org.junit.Assert.assertNotNull(locale72);
        org.junit.Assert.assertEquals(locale72.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
        org.junit.Assert.assertNotNull(locale74);
        org.junit.Assert.assertEquals(locale74.toString(), "de");
        org.junit.Assert.assertNotNull(locale75);
        org.junit.Assert.assertEquals(locale75.toString(), "de");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "" + "'", str76, "");
        org.junit.Assert.assertNotNull(locale77);
        org.junit.Assert.assertEquals(locale77.toString(), "de");
// flaky:         org.junit.Assert.assertEquals("'" + str78 + "' != '" + "Deutsch" + "'", str78, "Deutsch");
        org.junit.Assert.assertNotNull(locale79);
        org.junit.Assert.assertEquals(locale79.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "" + "'", str80, "");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "China" + "'", str81, "China");
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 2 + "'", int83 == 2);
// flaky:         org.junit.Assert.assertEquals("'" + str84 + "' != '" + "2938" + "'", str84, "2938");
    }

    @Test
    public void test02376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02376");
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("5");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=5");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02377");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.yearOfEra();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology0.dayOfYear();
        org.joda.time.DurationField durationField6 = iSOChronology0.centuries();
        java.util.Locale.Builder builder7 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder10 = builder7.setExtension('x', "jpn");
        java.util.Locale locale11 = builder7.build();
        java.util.Locale locale12 = builder7.build();
        java.util.Locale.Builder builder13 = builder7.clearExtensions();
        java.util.Locale.Builder builder14 = builder13.clearExtensions();
        java.util.Locale.Builder builder15 = builder14.clear();
        boolean boolean16 = iSOChronology0.equals((java.lang.Object) builder14);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder18 = builder14.addUnicodeLocaleAttribute("147585-12-12T14:48:21.579");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: 147585-12-12T14:48:21.579 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "");
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test02378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02378");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffset(100L);
        java.util.TimeZone timeZone4 = dateTimeZone1.toTimeZone();
        int int6 = dateTimeZone1.getStandardOffset((long) ' ');
        boolean boolean8 = dateTimeZone1.isStandardOffset((long) '4');
        int int10 = dateTimeZone1.getStandardOffset((-255600000L));
        java.util.TimeZone timeZone11 = dateTimeZone1.toTimeZone();
        java.lang.String str12 = timeZone11.getDisplayName();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 36000000 + "'", int3 == 36000000);
        org.junit.Assert.assertNotNull(timeZone4);
// flaky:         org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "GMT+10:00");
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 36000000 + "'", int6 == 36000000);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 36000000 + "'", int10 == 36000000);
        org.junit.Assert.assertNotNull(timeZone11);
// flaky:         org.junit.Assert.assertEquals(timeZone11.getDisplayName(), "GMT+10:00");
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "GMT+10:00" + "'", str12, "GMT+10:00");
    }

    @Test
    public void test02379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02379");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setExtension('x', "jpn");
        java.util.Locale locale4 = java.util.Locale.GERMAN;
        java.util.Locale locale5 = java.util.Locale.GERMAN;
        java.lang.String str6 = locale4.getDisplayCountry(locale5);
        java.util.Locale locale7 = locale4.stripExtensions();
        java.lang.String str8 = locale4.getDisplayName();
        java.util.Locale.Builder builder9 = builder3.setLocale(locale4);
        java.util.Locale locale10 = builder9.build();
        java.lang.String str11 = locale10.getScript();
        java.lang.String str12 = locale10.getISO3Country();
        java.lang.Object obj13 = locale10.clone();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "de");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "de");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Deutsch" + "'", str8, "Deutsch");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "de");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "de");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "de");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "de");
    }

    @Test
    public void test02380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02380");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.yearOfEra();
        org.joda.time.DurationField durationField3 = iSOChronology0.minutes();
        org.joda.time.DurationField durationField4 = iSOChronology0.months();
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology0.era();
        org.joda.time.DurationField durationField6 = iSOChronology0.seconds();
        org.joda.time.DateTimeField dateTimeField7 = iSOChronology0.dayOfMonth();
        // The following exception was thrown during execution in test generation
        try {
            long long15 = iSOChronology0.getDateTimeMillis(53263613, 0, 18, 2832, 53270, 2843364, 51);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2832 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
    }

    @Test
    public void test02381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02381");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.yearOfEra();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.weekyearOfCentury();
        java.lang.String str4 = iSOChronology0.toString();
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology0.clockhourOfHalfday();
        org.joda.time.Chronology chronology6 = iSOChronology0.withUTC();
        org.joda.time.DurationField durationField7 = iSOChronology0.years();
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField9 = iSOChronology8.hourOfHalfday();
        java.lang.String str10 = iSOChronology8.toString();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology8.era();
        java.util.TimeZone timeZone12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone12);
        int int15 = dateTimeZone13.getOffset(100L);
        java.util.TimeZone timeZone16 = dateTimeZone13.toTimeZone();
        java.lang.String str17 = dateTimeZone13.toString();
        org.joda.time.Chronology chronology18 = iSOChronology8.withZone(dateTimeZone13);
        java.util.TimeZone timeZone19 = dateTimeZone13.toTimeZone();
        org.joda.time.Chronology chronology20 = iSOChronology0.withZone(dateTimeZone13);
        org.joda.time.DateTimeField dateTimeField21 = iSOChronology0.secondOfDay();
        java.util.TimeZone timeZone22 = null;
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        int int25 = dateTimeZone23.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime26 = org.joda.time.LocalDateTime.now(dateTimeZone23);
        int int27 = localDateTime26.size();
        long long29 = iSOChronology0.set((org.joda.time.ReadablePartial) localDateTime26, (-62180261999635L));
        // The following exception was thrown during execution in test generation
        try {
            long long37 = iSOChronology0.getDateTimeMillis(53189779, 2846360, 366, 2837601, 33, 2846855, 53263613);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2837601 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "ISOChronology[+10:00]" + "'", str4, "ISOChronology[+10:00]");
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "ISOChronology[+10:00]" + "'", str10, "ISOChronology[+10:00]");
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeZone13);
// flaky:         org.junit.Assert.assertTrue("'" + int15 + "' != '" + 36000000 + "'", int15 == 36000000);
        org.junit.Assert.assertNotNull(timeZone16);
// flaky:         org.junit.Assert.assertEquals(timeZone16.getDisplayName(), "GMT+10:00");
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+10:00" + "'", str17, "+10:00");
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(timeZone19);
// flaky:         org.junit.Assert.assertEquals(timeZone19.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeZone23);
// flaky:         org.junit.Assert.assertTrue("'" + int25 + "' != '" + 36000000 + "'", int25 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 4 + "'", int27 == 4);
// flaky:         org.junit.Assert.assertTrue("'" + long29 + "' != '" + 1645454938632L + "'", long29 == 1645454938632L);
    }

    @Test
    public void test02382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02382");
        java.util.Locale locale0 = java.util.Locale.GERMAN;
        java.lang.String str1 = locale0.getDisplayScript();
        java.lang.String str3 = locale0.getExtension('x');
        java.util.Set<java.lang.Character> charSet4 = locale0.getExtensionKeys();
        java.util.Locale locale5 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet6 = locale5.getExtensionKeys();
        java.util.Iterator<java.lang.Character> charItor7 = charSet6.iterator();
        java.util.Locale locale8 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet9 = locale8.getExtensionKeys();
        java.util.Iterator<java.lang.Character> charItor10 = charSet9.iterator();
        boolean boolean11 = charSet6.containsAll((java.util.Collection<java.lang.Character>) charSet9);
        java.util.TimeZone timeZone12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone12);
        int int15 = dateTimeZone13.getOffset(100L);
        java.util.TimeZone timeZone16 = dateTimeZone13.toTimeZone();
        org.joda.time.DateTimeZone[] dateTimeZoneArray17 = new org.joda.time.DateTimeZone[] { dateTimeZone13 };
        org.joda.time.DateTimeZone[] dateTimeZoneArray18 = charSet9.toArray(dateTimeZoneArray17);
        java.util.Locale locale19 = java.util.Locale.GERMAN;
        java.lang.String str20 = locale19.getDisplayScript();
        java.lang.String str22 = locale19.getExtension('x');
        java.util.Set<java.lang.Character> charSet23 = locale19.getExtensionKeys();
        boolean boolean24 = charSet9.retainAll((java.util.Collection<java.lang.Character>) charSet23);
        boolean boolean25 = charSet4.addAll((java.util.Collection<java.lang.Character>) charSet23);
        java.util.TimeZone timeZone26 = null;
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forTimeZone(timeZone26);
        int int29 = dateTimeZone27.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime30 = org.joda.time.LocalDateTime.now(dateTimeZone27);
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.DateTime dateTime32 = localDateTime30.toDateTime(readableInstant31);
        long long33 = dateTime32.getMillis();
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime(28800008L);
        org.joda.time.LocalDateTime.Property property36 = localDateTime35.yearOfCentury();
        boolean boolean37 = dateTime32.equals((java.lang.Object) property36);
        boolean boolean38 = charSet23.equals((java.lang.Object) property36);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime40 = property36.setCopy(49681464);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 49681464 for yearOfCentury must be in the range [0,99]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "de");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(charSet4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet6);
        org.junit.Assert.assertNotNull(charItor7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet9);
        org.junit.Assert.assertNotNull(charItor10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(dateTimeZone13);
// flaky:         org.junit.Assert.assertTrue("'" + int15 + "' != '" + 36000000 + "'", int15 == 36000000);
        org.junit.Assert.assertNotNull(timeZone16);
// flaky:         org.junit.Assert.assertEquals(timeZone16.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertNotNull(dateTimeZoneArray17);
        org.junit.Assert.assertNotNull(dateTimeZoneArray18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "de");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(charSet23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(dateTimeZone27);
// flaky:         org.junit.Assert.assertTrue("'" + int29 + "' != '" + 36000000 + "'", int29 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
// flaky:         org.junit.Assert.assertTrue("'" + long33 + "' != '" + 1645454938665L + "'", long33 == 1645454938665L);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test02383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02383");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale1 = java.util.Locale.JAPANESE;
        java.lang.String str2 = locale1.getDisplayLanguage();
        java.lang.String str3 = locale1.getISO3Language();
        java.util.Locale locale4 = java.util.Locale.CHINA;
        java.lang.String str5 = locale1.getDisplayLanguage(locale4);
        org.joda.time.tz.NameProvider nameProvider6 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale7 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet8 = locale7.getExtensionKeys();
        java.lang.String str11 = nameProvider6.getShortName(locale7, "Koordinierte Universalzeit", "+00:00");
        java.util.Locale locale12 = java.util.Locale.KOREAN;
        java.lang.String str13 = locale7.getDisplayName(locale12);
        java.lang.String str14 = locale4.getDisplayVariant(locale12);
        java.util.Locale locale15 = locale12.stripExtensions();
        java.util.Locale.setDefault(category0, locale12);
        java.util.TimeZone timeZone17 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forTimeZone(timeZone17);
        int int20 = dateTimeZone18.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime21 = org.joda.time.LocalDateTime.now(dateTimeZone18);
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.DateTime dateTime23 = localDateTime21.toDateTime(readableInstant22);
        org.joda.time.Chronology chronology24 = dateTime23.getChronology();
        org.joda.time.DurationField durationField25 = chronology24.hours();
        org.joda.time.DurationField durationField26 = chronology24.months();
        org.joda.time.DateTimeField dateTimeField27 = chronology24.dayOfYear();
        java.util.TimeZone timeZone28 = null;
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forTimeZone(timeZone28);
        int int31 = dateTimeZone29.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime32 = org.joda.time.LocalDateTime.now(dateTimeZone29);
        int[] intArray35 = new int[] { (short) 0, (short) 0 };
        int int36 = dateTimeField27.getMinimumValue((org.joda.time.ReadablePartial) localDateTime32, intArray35);
        boolean boolean37 = dateTimeField27.isLenient();
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime40 = localDateTime38.minusMillis(52);
        java.util.Locale.Builder builder42 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder45 = builder42.setExtension('x', "jpn");
        java.util.Locale locale46 = builder42.build();
        java.util.Locale locale47 = builder42.build();
        java.lang.String str48 = dateTimeField27.getAsShortText((org.joda.time.ReadablePartial) localDateTime38, (int) 'a', locale47);
        boolean boolean49 = locale47.hasExtensions();
        java.util.Locale.setDefault(category0, locale47);
        java.lang.String str51 = locale47.getDisplayName();
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ja");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Japanisch" + "'", str2, "Japanisch");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "jpn" + "'", str3, "jpn");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "\u65e5\u6587" + "'", str5, "\u65e5\u6587");
        org.junit.Assert.assertNotNull(nameProvider6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet8);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str13, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ko");
        org.junit.Assert.assertNotNull(dateTimeZone18);
// flaky:         org.junit.Assert.assertTrue("'" + int20 + "' != '" + 36000000 + "'", int20 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeZone29);
// flaky:         org.junit.Assert.assertTrue("'" + int31 + "' != '" + 36000000 + "'", int31 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[0, 0]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "97" + "'", str48, "97");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
    }

    @Test
    public void test02384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02384");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.weekOfWeekyear();
        java.util.TimeZone timeZone2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone2);
        java.lang.String str5 = dateTimeZone3.getName(31556995199999L);
        org.joda.time.Chronology chronology6 = iSOChronology0.withZone(dateTimeZone3);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        long long12 = dateTimeZone8.convertLocalToUTC((long) (byte) -1, true, (long) (short) -1);
        boolean boolean13 = dateTimeZone8.isFixed();
        org.joda.time.Chronology chronology14 = iSOChronology0.withZone(dateTimeZone8);
        org.joda.time.DurationField durationField15 = iSOChronology0.halfdays();
        long long18 = durationField15.subtract(70922L, (long) 53184);
        long long21 = durationField15.add((long) 2938204, 54);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeZone3);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+10:00" + "'", str5, "+10:00");
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-36000001L) + "'", long12 == (-36000001L));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-2297548729078L) + "'", long18 == (-2297548729078L));
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 2335738204L + "'", long21 == 2335738204L);
    }

    @Test
    public void test02385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02385");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.hourOfHalfday();
        java.util.TimeZone timeZone3 = null;
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forTimeZone(timeZone3);
        int int6 = dateTimeZone4.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime7 = org.joda.time.LocalDateTime.now(dateTimeZone4);
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.DateTime dateTime9 = localDateTime7.toDateTime(readableInstant8);
        java.util.TimeZone timeZone10 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        int int13 = dateTimeZone11.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime14 = org.joda.time.LocalDateTime.now(dateTimeZone11);
        org.joda.time.LocalDateTime localDateTime15 = org.joda.time.LocalDateTime.now(dateTimeZone11);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.minusYears(2022);
        org.joda.time.LocalDateTime.Property property18 = localDateTime17.era();
        int int19 = localDateTime7.compareTo((org.joda.time.ReadablePartial) localDateTime17);
        org.joda.time.chrono.ISOChronology iSOChronology20 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField21 = iSOChronology20.hourOfHalfday();
        java.lang.String str22 = iSOChronology20.toString();
        java.util.TimeZone timeZone23 = null;
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forTimeZone(timeZone23);
        int int26 = dateTimeZone24.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime27 = org.joda.time.LocalDateTime.now(dateTimeZone24);
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.DateTime dateTime29 = localDateTime27.toDateTime(readableInstant28);
        org.joda.time.Chronology chronology30 = dateTime29.getChronology();
        org.joda.time.DurationField durationField31 = chronology30.hours();
        org.joda.time.DurationField durationField32 = chronology30.months();
        org.joda.time.DateTimeField dateTimeField33 = chronology30.dayOfYear();
        java.util.TimeZone timeZone34 = null;
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forTimeZone(timeZone34);
        int int37 = dateTimeZone35.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime38 = org.joda.time.LocalDateTime.now(dateTimeZone35);
        int[] intArray41 = new int[] { (short) 0, (short) 0 };
        int int42 = dateTimeField33.getMinimumValue((org.joda.time.ReadablePartial) localDateTime38, intArray41);
        java.lang.String str44 = dateTimeField33.getAsShortText((long) 53166088);
        java.util.TimeZone timeZone45 = null;
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.forTimeZone(timeZone45);
        int int48 = dateTimeZone46.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime49 = org.joda.time.LocalDateTime.now(dateTimeZone46);
        int int50 = localDateTime49.getWeekyear();
        org.joda.time.DurationFieldType durationFieldType51 = org.joda.time.DurationFieldType.days();
        org.joda.time.LocalDateTime localDateTime53 = localDateTime49.withFieldAdded(durationFieldType51, 53166088);
        java.util.Locale locale54 = java.util.Locale.ROOT;
        java.lang.String str55 = dateTimeField33.getAsShortText((org.joda.time.ReadablePartial) localDateTime53, locale54);
        java.util.TimeZone timeZone56 = null;
        org.joda.time.DateTimeZone dateTimeZone57 = org.joda.time.DateTimeZone.forTimeZone(timeZone56);
        int int59 = dateTimeZone57.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime60 = org.joda.time.LocalDateTime.now(dateTimeZone57);
        int int61 = localDateTime60.getWeekyear();
        boolean boolean62 = localDateTime53.isEqual((org.joda.time.ReadablePartial) localDateTime60);
        int[] intArray64 = iSOChronology20.get((org.joda.time.ReadablePartial) localDateTime60, (long) 53166088);
        iSOChronology0.validate((org.joda.time.ReadablePartial) localDateTime7, intArray64);
        org.joda.time.chrono.ISOChronology iSOChronology66 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField67 = iSOChronology66.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField68 = iSOChronology66.yearOfEra();
        org.joda.time.DateTimeField dateTimeField69 = iSOChronology66.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField70 = iSOChronology66.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField71 = iSOChronology66.dayOfYear();
        java.util.TimeZone timeZone72 = null;
        org.joda.time.DateTimeZone dateTimeZone73 = org.joda.time.DateTimeZone.forTimeZone(timeZone72);
        java.lang.String str75 = dateTimeZone73.getName(31556995199999L);
        java.lang.String str76 = dateTimeZone73.getID();
        org.joda.time.Chronology chronology77 = iSOChronology66.withZone(dateTimeZone73);
        org.joda.time.Chronology chronology78 = iSOChronology0.withZone(dateTimeZone73);
        org.joda.time.DurationField durationField79 = iSOChronology0.weeks();
        int int82 = durationField79.getValue(1645454822163L, 1645454841609L);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeZone4);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 36000000 + "'", int6 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone11);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 36000000 + "'", int13 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(iSOChronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "ISOChronology[+10:00]" + "'", str22, "ISOChronology[+10:00]");
        org.junit.Assert.assertNotNull(dateTimeZone24);
// flaky:         org.junit.Assert.assertTrue("'" + int26 + "' != '" + 36000000 + "'", int26 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeZone35);
// flaky:         org.junit.Assert.assertTrue("'" + int37 + "' != '" + 36000000 + "'", int37 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[0, 0]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
// flaky:         org.junit.Assert.assertEquals("'" + str44 + "' != '" + "2" + "'", str44, "2");
        org.junit.Assert.assertNotNull(dateTimeZone46);
// flaky:         org.junit.Assert.assertTrue("'" + int48 + "' != '" + 36000000 + "'", int48 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2022 + "'", int50 == 2022);
        org.junit.Assert.assertNotNull(durationFieldType51);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "");
// flaky:         org.junit.Assert.assertEquals("'" + str55 + "' != '" + "347" + "'", str55, "347");
        org.junit.Assert.assertNotNull(dateTimeZone57);
// flaky:         org.junit.Assert.assertTrue("'" + int59 + "' != '" + 36000000 + "'", int59 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 2022 + "'", int61 == 2022);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(intArray64);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[1970, 1, 2, 2766088]");
        org.junit.Assert.assertNotNull(iSOChronology66);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertNotNull(dateTimeField69);
        org.junit.Assert.assertNotNull(dateTimeField70);
        org.junit.Assert.assertNotNull(dateTimeField71);
        org.junit.Assert.assertNotNull(dateTimeZone73);
// flaky:         org.junit.Assert.assertEquals("'" + str75 + "' != '" + "+10:00" + "'", str75, "+10:00");
// flaky:         org.junit.Assert.assertEquals("'" + str76 + "' != '" + "+10:00" + "'", str76, "+10:00");
        org.junit.Assert.assertNotNull(chronology77);
        org.junit.Assert.assertNotNull(chronology78);
        org.junit.Assert.assertNotNull(durationField79);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 2720 + "'", int82 == 2720);
    }

    @Test
    public void test02386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02386");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        int int5 = localDateTime4.getWeekyear();
        org.joda.time.LocalDateTime.Property property6 = localDateTime4.minuteOfHour();
        org.joda.time.chrono.ISOChronology iSOChronology7 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField8 = iSOChronology7.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField9 = iSOChronology7.centuryOfEra();
        org.joda.time.DurationField durationField10 = iSOChronology7.seconds();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology7.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology7.hourOfHalfday();
        java.util.TimeZone timeZone13 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forTimeZone(timeZone13);
        int int16 = dateTimeZone14.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime17 = org.joda.time.LocalDateTime.now(dateTimeZone14);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray18 = localDateTime17.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.hourOfDay();
        int int20 = localDateTime17.get(dateTimeFieldType19);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime17.minusWeeks(1);
        long long24 = iSOChronology7.set((org.joda.time.ReadablePartial) localDateTime22, (long) 0);
        boolean boolean25 = localDateTime4.isAfter((org.joda.time.ReadablePartial) localDateTime22);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime4.withSecondOfMinute(20);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime4.minusMonths(2798859);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime31 = localDateTime29.withMillisOfSecond(49685587);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 49685587 for millisOfSecond must be in the range [0,999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 36000000 + "'", int3 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2022 + "'", int5 == 2022);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(iSOChronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
// flaky:         org.junit.Assert.assertTrue("'" + int16 + "' != '" + 36000000 + "'", int16 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray18);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
// flaky:         org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(localDateTime22);
// flaky:         org.junit.Assert.assertTrue("'" + long24 + "' != '" + 1644850139286L + "'", long24 == 1644850139286L);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
    }

    @Test
    public void test02387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02387");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime5 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.plusSeconds((int) (short) 10);
        int int8 = localDateTime5.size();
        org.joda.time.LocalDateTime.Property property9 = localDateTime5.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime11 = property9.setCopy((int) (short) 10);
        java.util.Locale.Builder builder12 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder15 = builder12.setExtension('x', "jpn");
        java.util.Locale locale16 = java.util.Locale.GERMAN;
        java.util.Locale locale17 = java.util.Locale.GERMAN;
        java.lang.String str18 = locale16.getDisplayCountry(locale17);
        java.util.Locale locale19 = locale16.stripExtensions();
        java.lang.String str20 = locale16.getDisplayName();
        java.util.Locale.Builder builder21 = builder15.setLocale(locale16);
        java.util.Locale locale22 = builder21.build();
        java.lang.String str23 = locale22.getScript();
        java.lang.String str24 = locale22.getISO3Country();
        int int25 = property9.getMaximumTextLength(locale22);
        java.lang.String str26 = locale22.getISO3Country();
        java.lang.Object obj27 = locale22.clone();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 36000000 + "'", int3 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 4 + "'", int8 == 4);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "de");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "de");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "de");
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Deutsch" + "'", str20, "Deutsch");
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "de");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2 + "'", int25 == 2);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(obj27);
        org.junit.Assert.assertEquals(obj27.toString(), "de");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj27), "de");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj27), "de");
    }

    @Test
    public void test02388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02388");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        int int5 = localDateTime4.getWeekyear();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.withSecondOfMinute((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.minusMillis((-292275054));
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = null;
        java.lang.String str11 = localDateTime9.toString(dateTimeFormatter10);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DurationFieldType durationFieldType13 = dateTimeFieldType12.getDurationType();
        java.lang.String str14 = dateTimeFieldType12.getName();
        int int15 = localDateTime9.get(dateTimeFieldType12);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime9.minusMillis(16);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField19 = localDateTime9.getField(309);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 309");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 36000000 + "'", int3 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2022 + "'", int5 == 2022);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "2022-02-25T09:59:25.484" + "'", str11, "2022-02-25T09:59:25.484");
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(durationFieldType13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "year" + "'", str14, "year");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2022 + "'", int15 == 2022);
        org.junit.Assert.assertNotNull(localDateTime17);
    }

    @Test
    public void test02389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02389");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.hourOfHalfday();
        java.lang.String str2 = iSOChronology0.toString();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.era();
        org.joda.time.DurationField durationField4 = iSOChronology0.centuries();
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        long long8 = iSOChronology0.add(readablePeriod5, (long) 2022, (int) (byte) 100);
        org.joda.time.DateTimeField dateTimeField9 = iSOChronology0.secondOfDay();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology0.dayOfWeek();
        // The following exception was thrown during execution in test generation
        try {
            long long18 = iSOChronology0.getDateTimeMillis(2846855, 2938, 347, 49681, 372, 274440000, 64122321);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 49681 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ISOChronology[+10:00]" + "'", str2, "ISOChronology[+10:00]");
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 2022L + "'", long8 == 2022L);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
    }

    @Test
    public void test02390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02390");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setExtension('x', "jpn");
        java.util.Locale locale4 = java.util.Locale.GERMAN;
        java.util.Locale locale5 = java.util.Locale.GERMAN;
        java.lang.String str6 = locale4.getDisplayCountry(locale5);
        java.util.Locale locale7 = locale4.stripExtensions();
        java.lang.String str8 = locale4.getDisplayName();
        java.util.Locale.Builder builder9 = builder3.setLocale(locale4);
        java.util.Locale.Builder builder12 = builder9.setUnicodeLocaleKeyword("22", "deu");
        java.util.Locale.Builder builder13 = builder9.clear();
        java.util.Locale.Builder builder14 = builder9.clear();
        java.util.Locale.Builder builder15 = builder14.clearExtensions();
        java.util.Locale.Builder builder17 = builder14.setLanguage("years");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder19 = builder14.setLanguage("ko_KR");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed language: ko_KR [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "de");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "de");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Deutsch" + "'", str8, "Deutsch");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
    }

    @Test
    public void test02391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02391");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setExtension('x', "jpn");
        java.util.Locale locale4 = java.util.Locale.GERMAN;
        java.util.Locale locale5 = java.util.Locale.GERMAN;
        java.lang.String str6 = locale4.getDisplayCountry(locale5);
        java.util.Locale locale7 = locale4.stripExtensions();
        java.lang.String str8 = locale4.getDisplayName();
        java.util.Locale.Builder builder9 = builder3.setLocale(locale4);
        java.util.Locale.Builder builder11 = builder9.setLanguageTag("Februar");
        java.util.Locale locale12 = java.util.Locale.GERMAN;
        java.util.Locale locale13 = java.util.Locale.GERMAN;
        java.util.Locale locale14 = java.util.Locale.GERMAN;
        java.lang.String str15 = locale13.getDisplayCountry(locale14);
        java.util.Locale locale16 = locale13.stripExtensions();
        java.lang.String str17 = locale12.getDisplayCountry(locale13);
        java.util.Locale.Builder builder18 = builder11.setLocale(locale12);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder20 = builder18.setScript("631");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed script: 631 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "de");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "de");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Deutsch" + "'", str8, "Deutsch");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "de");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "de");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "de");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "de");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test02392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02392");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.yearOfEra();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.weekyearOfCentury();
        org.joda.time.DurationField durationField5 = iSOChronology0.months();
        long long8 = durationField5.getMillis(64122170, 0L);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 168625019980800000L + "'", long8 == 168625019980800000L);
    }

    @Test
    public void test02393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02393");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray5 = localDateTime4.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.hourOfDay();
        int int7 = localDateTime4.get(dateTimeFieldType6);
        org.joda.time.LocalDateTime.Property property8 = localDateTime4.dayOfWeek();
        org.joda.time.LocalDateTime.Property property9 = localDateTime4.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime10 = property9.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime11 = property9.withMinimumValue();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime13 = localDateTime11.withMonthOfYear(53264153);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 53264153 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 36000000 + "'", int3 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray5);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime11);
    }

    @Test
    public void test02394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02394");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.centuryOfEra();
        org.joda.time.DurationField durationField3 = iSOChronology0.seconds();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology0.hourOfHalfday();
        long long9 = iSOChronology0.add((long) (short) 100, 1644849973425L, 2720);
        org.joda.time.DurationField durationField10 = iSOChronology0.weekyears();
        long long14 = iSOChronology0.add(57854412000L, (long) 'x', 5);
        org.joda.time.DurationField durationField15 = iSOChronology0.hours();
        org.joda.time.DurationField durationField16 = iSOChronology0.days();
        long long19 = durationField16.getMillis(1456, 1644850092298L);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 4473991927716100L + "'", long9 == 4473991927716100L);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 57854412600L + "'", long14 == 57854412600L);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 125798400000L + "'", long19 == 125798400000L);
    }

    @Test
    public void test02395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02395");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime5 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.plusSeconds((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime5.minusWeeks((int) (byte) 10);
        java.util.TimeZone timeZone10 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        int int13 = dateTimeZone11.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime14 = org.joda.time.LocalDateTime.now(dateTimeZone11);
        org.joda.time.LocalDateTime localDateTime15 = org.joda.time.LocalDateTime.now(dateTimeZone11);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.plusSeconds((int) (short) 10);
        int int18 = localDateTime15.size();
        boolean boolean19 = localDateTime9.isBefore((org.joda.time.ReadablePartial) localDateTime15);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime15.withMillisOfSecond(52);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.plusSeconds((-292275054));
        java.lang.String str24 = localDateTime23.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.dayOfMonth();
        org.joda.time.DurationFieldType durationFieldType26 = dateTimeFieldType25.getDurationType();
        int int27 = localDateTime23.get(dateTimeFieldType25);
        org.joda.time.Chronology chronology28 = null;
        boolean boolean29 = dateTimeFieldType25.isSupported(chronology28);
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 36000000 + "'", int3 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone11);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 36000000 + "'", int13 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 4 + "'", int18 == 4);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "2012-11-18T05:18:05.052" + "'", str24, "2012-11-18T05:18:05.052");
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertNotNull(durationFieldType26);
// flaky:         org.junit.Assert.assertTrue("'" + int27 + "' != '" + 18 + "'", int27 == 18);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
    }

    @Test
    public void test02396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02396");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        java.util.TimeZone timeZone1 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        int int4 = dateTimeZone2.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime5 = org.joda.time.LocalDateTime.now(dateTimeZone2);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray6 = localDateTime5.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.hourOfDay();
        int int8 = localDateTime5.get(dateTimeFieldType7);
        org.joda.time.LocalDateTime.Property property9 = localDateTime5.dayOfWeek();
        boolean boolean10 = localDateTime0.isEqual((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.LocalDateTime localDateTime13 = localDateTime0.withPeriodAdded(readablePeriod11, (int) (short) -1);
        java.util.Date date14 = localDateTime13.toDate();
        java.util.TimeZone timeZone16 = null;
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forTimeZone(timeZone16);
        int int19 = dateTimeZone17.getOffset(100L);
        java.util.TimeZone timeZone20 = dateTimeZone17.toTimeZone();
        int int22 = dateTimeZone17.getStandardOffset((long) ' ');
        java.util.TimeZone timeZone23 = dateTimeZone17.toTimeZone();
        org.joda.time.tz.NameProvider nameProvider25 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale26 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet27 = locale26.getExtensionKeys();
        java.lang.String str30 = nameProvider25.getShortName(locale26, "Koordinierte Universalzeit", "+00:00");
        java.util.Locale locale31 = java.util.Locale.GERMAN;
        java.lang.String str34 = nameProvider25.getShortName(locale31, "53167803", "jpn");
        java.lang.String str35 = dateTimeZone17.getName(1645454775635L, locale31);
        java.lang.String str36 = locale31.getDisplayName();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str37 = localDateTime13.toString("2022-02-21T14:48:34.576", locale31);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: T");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(dateTimeZone2);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 36000000 + "'", int4 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(date14);
// flaky:         org.junit.Assert.assertEquals(date14.toString(), "Tue Feb 22 00:49:00 GMT+10:00 2022");
        org.junit.Assert.assertNotNull(dateTimeZone17);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 36000000 + "'", int19 == 36000000);
        org.junit.Assert.assertNotNull(timeZone20);
// flaky:         org.junit.Assert.assertEquals(timeZone20.getDisplayName(), "GMT+10:00");
// flaky:         org.junit.Assert.assertTrue("'" + int22 + "' != '" + 36000000 + "'", int22 == 36000000);
        org.junit.Assert.assertNotNull(timeZone23);
// flaky:         org.junit.Assert.assertEquals(timeZone23.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertNotNull(nameProvider25);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet27);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "de");
        org.junit.Assert.assertNull(str34);
// flaky:         org.junit.Assert.assertEquals("'" + str35 + "' != '" + "+10:00" + "'", str35, "+10:00");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "\u30c9\u30a4\u30c4\u8a9e" + "'", str36, "\u30c9\u30a4\u30c4\u8a9e");
    }

    @Test
    public void test02397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02397");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.dayOfYear();
        java.lang.String str1 = dateTimeFieldType0.getName();
        org.joda.time.chrono.ISOChronology iSOChronology2 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology2.hourOfHalfday();
        java.lang.String str4 = iSOChronology2.toString();
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology2.era();
        org.joda.time.DurationField durationField6 = iSOChronology2.centuries();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        long long10 = iSOChronology2.add(readablePeriod7, (long) 2022, (int) (byte) 100);
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology2.dayOfYear();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology2.yearOfEra();
        org.joda.time.DateTimeField dateTimeField13 = iSOChronology2.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology2.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField15 = dateTimeFieldType0.getField((org.joda.time.Chronology) iSOChronology2);
        int int17 = dateTimeField15.getMaximumValue(0L);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "dayOfYear" + "'", str1, "dayOfYear");
        org.junit.Assert.assertNotNull(iSOChronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "ISOChronology[+10:00]" + "'", str4, "ISOChronology[+10:00]");
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 2022L + "'", long10 == 2022L);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 365 + "'", int17 == 365);
    }

    @Test
    public void test02398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02398");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.yearOfEra();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.hourOfDay();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.dayOfMonth();
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        int int8 = dateTimeZone6.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime9 = org.joda.time.LocalDateTime.now(dateTimeZone6);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.DateTime dateTime11 = localDateTime9.toDateTime(readableInstant10);
        java.util.TimeZone timeZone12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone12);
        int int15 = dateTimeZone13.getOffset(100L);
        org.joda.time.DateTime dateTime16 = localDateTime9.toDateTime(dateTimeZone13);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime9.withYear(52);
        org.joda.time.Chronology chronology19 = localDateTime18.getChronology();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime18.withYear((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime18.minusSeconds(2827402);
        int int24 = dateTimeField4.getMinimumValue((org.joda.time.ReadablePartial) localDateTime18);
        long long27 = dateTimeField4.addWrapField((long) 53262638, 2804241);
        int int28 = dateTimeField4.getMinimumValue();
        long long31 = dateTimeField4.addWrapField((long) 2832, 49686371);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 36000000 + "'", int8 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTimeZone13);
// flaky:         org.junit.Assert.assertTrue("'" + int15 + "' != '" + 36000000 + "'", int15 == 36000000);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 1090062638L + "'", long27 == 1090062638L);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 432002832L + "'", long31 == 432002832L);
    }

    @Test
    public void test02399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02399");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.yearOfEra();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.hourOfDay();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.year();
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology0.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField6 = iSOChronology0.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField7 = iSOChronology0.halfdayOfDay();
        // The following exception was thrown during execution in test generation
        try {
            long long10 = dateTimeField7.add((long) 2801, 1644850004097L);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows a long: 1644850004097 * 43200000");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
    }

    @Test
    public void test02400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02400");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        int int5 = localDateTime4.getWeekyear();
        org.joda.time.LocalDateTime.Property property6 = localDateTime4.millisOfDay();
        java.util.TimeZone timeZone7 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forTimeZone(timeZone7);
        int int10 = dateTimeZone8.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now(dateTimeZone8);
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.DateTime dateTime13 = localDateTime11.toDateTime(readableInstant12);
        java.util.TimeZone timeZone14 = null;
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forTimeZone(timeZone14);
        int int17 = dateTimeZone15.getOffset(100L);
        org.joda.time.DateTime dateTime18 = localDateTime11.toDateTime(dateTimeZone15);
        int int19 = property6.compareTo((org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.LocalDateTime localDateTime20 = property6.roundHalfEvenCopy();
        org.joda.time.Interval interval21 = property6.toInterval();
        org.joda.time.LocalDateTime localDateTime22 = property6.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime23 = property6.roundHalfCeilingCopy();
        org.joda.time.chrono.ISOChronology iSOChronology24 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField25 = iSOChronology24.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField26 = iSOChronology24.yearOfEra();
        org.joda.time.DateTimeField dateTimeField27 = iSOChronology24.hourOfDay();
        org.joda.time.DateTimeField dateTimeField28 = iSOChronology24.dayOfMonth();
        java.util.TimeZone timeZone29 = null;
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forTimeZone(timeZone29);
        int int32 = dateTimeZone30.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime33 = org.joda.time.LocalDateTime.now(dateTimeZone30);
        org.joda.time.ReadableInstant readableInstant34 = null;
        org.joda.time.DateTime dateTime35 = localDateTime33.toDateTime(readableInstant34);
        java.util.TimeZone timeZone36 = null;
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forTimeZone(timeZone36);
        int int39 = dateTimeZone37.getOffset(100L);
        org.joda.time.DateTime dateTime40 = localDateTime33.toDateTime(dateTimeZone37);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime33.withYear(52);
        org.joda.time.Chronology chronology43 = localDateTime42.getChronology();
        org.joda.time.LocalDateTime localDateTime45 = localDateTime42.withYear((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime47 = localDateTime42.minusSeconds(2827402);
        int int48 = dateTimeField28.getMinimumValue((org.joda.time.ReadablePartial) localDateTime42);
        boolean boolean49 = localDateTime23.isAfter((org.joda.time.ReadablePartial) localDateTime42);
        org.joda.time.chrono.ISOChronology iSOChronology50 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField51 = iSOChronology50.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField52 = iSOChronology50.centuryOfEra();
        org.joda.time.DurationField durationField53 = iSOChronology50.eras();
        org.joda.time.DateTimeField dateTimeField54 = iSOChronology50.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField55 = iSOChronology50.year();
        java.util.TimeZone timeZone56 = null;
        org.joda.time.DateTimeZone dateTimeZone57 = org.joda.time.DateTimeZone.forTimeZone(timeZone56);
        int int59 = dateTimeZone57.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime60 = org.joda.time.LocalDateTime.now(dateTimeZone57);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray61 = localDateTime60.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType62 = org.joda.time.DateTimeFieldType.hourOfDay();
        int int63 = localDateTime60.get(dateTimeFieldType62);
        org.joda.time.LocalDateTime.Property property64 = localDateTime60.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime66 = localDateTime60.minusHours(20);
        int[] intArray68 = iSOChronology50.get((org.joda.time.ReadablePartial) localDateTime66, (long) 21);
        org.joda.time.ReadablePeriod readablePeriod69 = null;
        org.joda.time.LocalDateTime localDateTime70 = localDateTime66.minus(readablePeriod69);
        org.joda.time.DateTimeFieldType dateTimeFieldType71 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        org.joda.time.LocalDateTime.Property property72 = localDateTime66.property(dateTimeFieldType71);
        org.joda.time.LocalDateTime.Property property73 = localDateTime42.property(dateTimeFieldType71);
        java.util.TimeZone timeZone74 = null;
        org.joda.time.DateTimeZone dateTimeZone75 = org.joda.time.DateTimeZone.forTimeZone(timeZone74);
        int int77 = dateTimeZone75.getOffset(100L);
        java.util.TimeZone timeZone78 = dateTimeZone75.toTimeZone();
        int int80 = dateTimeZone75.getStandardOffset((long) ' ');
        java.util.TimeZone timeZone81 = dateTimeZone75.toTimeZone();
        org.joda.time.tz.NameProvider nameProvider83 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale84 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet85 = locale84.getExtensionKeys();
        java.lang.String str88 = nameProvider83.getShortName(locale84, "Koordinierte Universalzeit", "+00:00");
        java.util.Locale locale89 = java.util.Locale.GERMAN;
        java.lang.String str92 = nameProvider83.getShortName(locale89, "53167803", "jpn");
        java.lang.String str93 = dateTimeZone75.getName(1645454775635L, locale89);
        java.lang.String str94 = property73.getAsText(locale89);
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 36000000 + "'", int3 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2022 + "'", int5 == 2022);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTimeZone8);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 36000000 + "'", int10 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
// flaky:         org.junit.Assert.assertTrue("'" + int17 + "' != '" + 36000000 + "'", int17 == 36000000);
        org.junit.Assert.assertNotNull(dateTime18);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(iSOChronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeZone30);
// flaky:         org.junit.Assert.assertTrue("'" + int32 + "' != '" + 36000000 + "'", int32 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTimeZone37);
// flaky:         org.junit.Assert.assertTrue("'" + int39 + "' != '" + 36000000 + "'", int39 == 36000000);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(iSOChronology50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(durationField53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(dateTimeZone57);
// flaky:         org.junit.Assert.assertTrue("'" + int59 + "' != '" + 36000000 + "'", int59 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray61);
        org.junit.Assert.assertNotNull(dateTimeFieldType62);
// flaky:         org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertNotNull(intArray68);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[1970, 1, 1, 36000021]");
        org.junit.Assert.assertNotNull(localDateTime70);
        org.junit.Assert.assertNotNull(dateTimeFieldType71);
        org.junit.Assert.assertNotNull(property72);
        org.junit.Assert.assertNotNull(property73);
        org.junit.Assert.assertNotNull(dateTimeZone75);
// flaky:         org.junit.Assert.assertTrue("'" + int77 + "' != '" + 36000000 + "'", int77 == 36000000);
        org.junit.Assert.assertNotNull(timeZone78);
// flaky:         org.junit.Assert.assertEquals(timeZone78.getDisplayName(), "GMT+10:00");
// flaky:         org.junit.Assert.assertTrue("'" + int80 + "' != '" + 36000000 + "'", int80 == 36000000);
        org.junit.Assert.assertNotNull(timeZone81);
// flaky:         org.junit.Assert.assertEquals(timeZone81.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertNotNull(nameProvider83);
        org.junit.Assert.assertNotNull(locale84);
        org.junit.Assert.assertEquals(locale84.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet85);
        org.junit.Assert.assertNull(str88);
        org.junit.Assert.assertNotNull(locale89);
        org.junit.Assert.assertEquals(locale89.toString(), "de");
        org.junit.Assert.assertNull(str92);
// flaky:         org.junit.Assert.assertEquals("'" + str93 + "' != '" + "+10:00" + "'", str93, "+10:00");
// flaky:         org.junit.Assert.assertEquals("'" + str94 + "' != '" + "24" + "'", str94, "24");
    }

    @Test
    public void test02401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02401");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.hourOfHalfday();
        java.lang.String str2 = iSOChronology0.toString();
        org.joda.time.DurationField durationField3 = iSOChronology0.centuries();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.halfdayOfDay();
        long long8 = iSOChronology0.add((long) 53166088, (long) 22, 36);
        org.joda.time.DateTimeField dateTimeField9 = iSOChronology0.era();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology0.year();
        int int12 = dateTimeField10.getLeapAmount((long) 32);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ISOChronology[+10:00]" + "'", str2, "ISOChronology[+10:00]");
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 53166880L + "'", long8 == 53166880L);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test02402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02402");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        int int5 = localDateTime4.getWeekyear();
        org.joda.time.DurationFieldType durationFieldType6 = org.joda.time.DurationFieldType.days();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime4.withFieldAdded(durationFieldType6, 53166088);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime4.withYear(53271064);
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 36000000 + "'", int3 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2022 + "'", int5 == 2022);
        org.junit.Assert.assertNotNull(durationFieldType6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
    }

    @Test
    public void test02403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02403");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.centuryOfEra();
        org.joda.time.DurationField durationField3 = iSOChronology0.seconds();
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime4.yearOfCentury();
        int int6 = localDateTime4.getEra();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
    }

    @Test
    public void test02404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02404");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.yearOfEra();
        org.joda.time.DurationField durationField3 = iSOChronology0.minutes();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.weekyear();
        org.joda.time.Chronology chronology5 = iSOChronology0.withUTC();
        org.joda.time.DateTimeField dateTimeField6 = iSOChronology0.monthOfYear();
        // The following exception was thrown during execution in test generation
        try {
            long long12 = iSOChronology0.getDateTimeMillis(1644850120104L, 53264153, 2935755, 2843603, 58);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 53264153 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
    }

    @Test
    public void test02405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02405");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime5 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusMinutes((int) ' ');
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime7.withWeekOfWeekyear(52);
        org.joda.time.LocalDateTime.Property property11 = localDateTime7.monthOfYear();
        org.joda.time.LocalDateTime localDateTime13 = property11.addWrapFieldToCopy(14);
        boolean boolean14 = property11.isLeap();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 36000000 + "'", int3 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test02406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02406");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.hourOfHalfday();
        java.lang.String str2 = iSOChronology0.toString();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.era();
        org.joda.time.DurationField durationField4 = iSOChronology0.centuries();
        org.joda.time.DurationField durationField5 = iSOChronology0.weeks();
        org.joda.time.DateTimeField dateTimeField6 = iSOChronology0.era();
        org.joda.time.DateTimeField dateTimeField7 = iSOChronology0.yearOfCentury();
        org.joda.time.DurationField durationField8 = iSOChronology0.weeks();
        org.joda.time.DateTimeField dateTimeField9 = iSOChronology0.year();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology0.year();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology0.hourOfHalfday();
        int int14 = dateTimeField11.getDifference(86400000L, 1645454882155L);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ISOChronology[+10:00]" + "'", str2, "ISOChronology[+10:00]");
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-457046) + "'", int14 == (-457046));
    }

    @Test
    public void test02407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02407");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.yearOfEra();
        org.joda.time.DurationField durationField3 = iSOChronology0.minutes();
        org.joda.time.DurationField durationField4 = iSOChronology0.months();
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology0.era();
        org.joda.time.DurationField durationField6 = iSOChronology0.halfdays();
        org.joda.time.DateTimeField dateTimeField7 = iSOChronology0.clockhourOfDay();
        // The following exception was thrown during execution in test generation
        try {
            long long15 = iSOChronology0.getDateTimeMillis((int) 'x', 53, 49622291, 4, 2926669, 2855123, 0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2926669 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
    }

    @Test
    public void test02408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02408");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.yearOfEra();
        org.joda.time.DurationField durationField3 = iSOChronology0.weeks();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.minuteOfDay();
        org.joda.time.DurationField durationField5 = iSOChronology0.halfdays();
        org.joda.time.DateTimeField dateTimeField6 = iSOChronology0.year();
        org.joda.time.ReadablePartial readablePartial7 = null;
        java.util.TimeZone timeZone9 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        int int12 = dateTimeZone10.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime13 = org.joda.time.LocalDateTime.now(dateTimeZone10);
        org.joda.time.LocalDateTime localDateTime14 = org.joda.time.LocalDateTime.now(dateTimeZone10);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.plusSeconds((int) (short) 10);
        int[] intArray17 = localDateTime14.getValues();
        int int18 = localDateTime14.getMinuteOfHour();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime14.plusMonths(22);
        int[] intArray21 = localDateTime20.getValues();
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray23 = dateTimeField6.addWrapPartial(readablePartial7, (-292275054), intArray21, 58);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -292275054");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeZone10);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 36000000 + "'", int12 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(intArray17);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[2022, 2, 22, 2940602]");
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + 49 + "'", int18 == 49);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(intArray21);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[2023, 12, 22, 2940602]");
    }

    @Test
    public void test02409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02409");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        int int5 = localDateTime4.getWeekyear();
        org.joda.time.LocalDateTime.Property property6 = localDateTime4.millisOfDay();
        java.util.TimeZone timeZone7 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forTimeZone(timeZone7);
        int int10 = dateTimeZone8.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now(dateTimeZone8);
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.DateTime dateTime13 = localDateTime11.toDateTime(readableInstant12);
        java.util.TimeZone timeZone14 = null;
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forTimeZone(timeZone14);
        int int17 = dateTimeZone15.getOffset(100L);
        org.joda.time.DateTime dateTime18 = localDateTime11.toDateTime(dateTimeZone15);
        int int19 = property6.compareTo((org.joda.time.ReadableInstant) dateTime18);
        int int20 = property6.get();
        org.joda.time.LocalDateTime localDateTime22 = property6.addWrapFieldToCopy(454550);
        org.joda.time.LocalDateTime localDateTime24 = property6.addToCopy(380328273986263L);
        org.joda.time.LocalDateTime localDateTime25 = property6.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.plusSeconds(0);
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 36000000 + "'", int3 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2022 + "'", int5 == 2022);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTimeZone8);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 36000000 + "'", int10 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
// flaky:         org.junit.Assert.assertTrue("'" + int17 + "' != '" + 36000000 + "'", int17 == 36000000);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2940619 + "'", int20 == 2940619);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
    }

    @Test
    public void test02410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02410");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.centuryOfEra();
        org.joda.time.DurationField durationField3 = iSOChronology0.seconds();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology0.hourOfHalfday();
        org.joda.time.DurationField durationField6 = iSOChronology0.minutes();
        org.joda.time.Chronology chronology7 = iSOChronology0.withUTC();
        // The following exception was thrown during execution in test generation
        try {
            long long15 = iSOChronology0.getDateTimeMillis(0, 53183117, 2840946, (-457046), 25, 339, 28);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -457046 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(chronology7);
    }

    @Test
    public void test02411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02411");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.yearOfEra();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.weekyearOfCentury();
        java.lang.String str4 = iSOChronology0.toString();
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology0.clockhourOfHalfday();
        org.joda.time.Chronology chronology6 = iSOChronology0.withUTC();
        org.joda.time.DurationField durationField7 = iSOChronology0.years();
        org.joda.time.DateTimeField dateTimeField8 = iSOChronology0.yearOfCentury();
        org.joda.time.DurationField durationField9 = iSOChronology0.halfdays();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology0.secondOfMinute();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "ISOChronology[+10:00]" + "'", str4, "ISOChronology[+10:00]");
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
    }

    @Test
    public void test02412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02412");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.yearOfEra();
        org.joda.time.DurationField durationField3 = iSOChronology0.minutes();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.weekyear();
        org.joda.time.DurationField durationField5 = iSOChronology0.centuries();
        org.joda.time.DateTimeField dateTimeField6 = iSOChronology0.centuryOfEra();
        org.joda.time.DurationField durationField7 = iSOChronology0.minutes();
        org.joda.time.DateTimeField dateTimeField8 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField9 = iSOChronology0.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology0.year();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology0.monthOfYear();
        java.lang.String str12 = dateTimeField11.getName();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "monthOfYear" + "'", str12, "monthOfYear");
    }

    @Test
    public void test02413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02413");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        java.util.TimeZone timeZone1 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        int int4 = dateTimeZone2.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime5 = org.joda.time.LocalDateTime.now(dateTimeZone2);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray6 = localDateTime5.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.hourOfDay();
        int int8 = localDateTime5.get(dateTimeFieldType7);
        org.joda.time.LocalDateTime.Property property9 = localDateTime5.dayOfWeek();
        boolean boolean10 = localDateTime0.isEqual((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.chrono.ISOChronology iSOChronology12 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField13 = iSOChronology12.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology12.centuryOfEra();
        org.joda.time.DurationField durationField15 = iSOChronology12.seconds();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology12.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology12.hourOfHalfday();
        java.util.TimeZone timeZone18 = null;
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forTimeZone(timeZone18);
        int int21 = dateTimeZone19.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime22 = org.joda.time.LocalDateTime.now(dateTimeZone19);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray23 = localDateTime22.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.hourOfDay();
        int int25 = localDateTime22.get(dateTimeFieldType24);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime22.minusWeeks(1);
        long long29 = iSOChronology12.set((org.joda.time.ReadablePartial) localDateTime27, (long) 0);
        boolean boolean30 = dateTimeFieldType11.isSupported((org.joda.time.Chronology) iSOChronology12);
        int int31 = localDateTime0.get(dateTimeFieldType11);
        java.util.TimeZone timeZone32 = null;
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forTimeZone(timeZone32);
        int int35 = dateTimeZone33.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime36 = org.joda.time.LocalDateTime.now(dateTimeZone33);
        int int37 = localDateTime36.getWeekyear();
        org.joda.time.LocalDateTime.Property property38 = localDateTime36.millisOfDay();
        java.util.Locale locale39 = java.util.Locale.GERMAN;
        java.util.Locale locale40 = java.util.Locale.GERMAN;
        java.lang.String str41 = locale39.getDisplayCountry(locale40);
        java.util.Locale locale42 = locale39.stripExtensions();
        int int43 = property38.getMaximumShortTextLength(locale39);
        org.joda.time.Interval interval44 = property38.toInterval();
        org.joda.time.LocalDateTime localDateTime45 = property38.getLocalDateTime();
        int int46 = localDateTime45.getYearOfEra();
        int int47 = localDateTime45.getCenturyOfEra();
        int int48 = localDateTime0.compareTo((org.joda.time.ReadablePartial) localDateTime45);
        int int49 = localDateTime0.getWeekOfWeekyear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime51 = localDateTime0.withMillisOfSecond(53325843);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 53325843 for millisOfSecond must be in the range [0,999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(dateTimeZone2);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 36000000 + "'", int4 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertNotNull(iSOChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeZone19);
// flaky:         org.junit.Assert.assertTrue("'" + int21 + "' != '" + 36000000 + "'", int21 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray23);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
// flaky:         org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(localDateTime27);
// flaky:         org.junit.Assert.assertTrue("'" + long29 + "' != '" + 1644850140736L + "'", long29 == 1644850140736L);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2940 + "'", int31 == 2940);
        org.junit.Assert.assertNotNull(dateTimeZone33);
// flaky:         org.junit.Assert.assertTrue("'" + int35 + "' != '" + 36000000 + "'", int35 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2022 + "'", int37 == 2022);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "de");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "de");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "de");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 8 + "'", int43 == 8);
        org.junit.Assert.assertNotNull(interval44);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2022 + "'", int46 == 2022);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 20 + "'", int47 == 20);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 8 + "'", int49 == 8);
    }

    @Test
    public void test02414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02414");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.centuryOfEra();
        org.joda.time.DurationField durationField3 = iSOChronology0.seconds();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.weekyearOfCentury();
        org.joda.time.DurationField durationField5 = dateTimeField4.getDurationField();
        java.util.TimeZone timeZone6 = null;
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forTimeZone(timeZone6);
        int int9 = dateTimeZone7.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime10 = org.joda.time.LocalDateTime.now(dateTimeZone7);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray11 = localDateTime10.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.hourOfDay();
        int int13 = localDateTime10.get(dateTimeFieldType12);
        org.joda.time.LocalDateTime.Property property14 = localDateTime10.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime10.minusHours(20);
        java.util.Locale locale17 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet18 = locale17.getExtensionKeys();
        java.util.Iterator<java.lang.Character> charItor19 = charSet18.iterator();
        java.util.ArrayList[] arrayListArray21 = new java.util.ArrayList[0];
        @SuppressWarnings("unchecked")
        java.util.ArrayList<java.util.Locale.LanguageRange>[] languageRangeListArray22 = (java.util.ArrayList<java.util.Locale.LanguageRange>[]) arrayListArray21;
        java.util.ArrayList<java.util.Locale.LanguageRange>[] languageRangeListArray23 = charSet18.toArray((java.util.ArrayList<java.util.Locale.LanguageRange>[]) arrayListArray21);
        java.util.TimeZone timeZone24 = null;
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forTimeZone(timeZone24);
        int int27 = dateTimeZone25.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime28 = org.joda.time.LocalDateTime.now(dateTimeZone25);
        int int29 = localDateTime28.getWeekyear();
        org.joda.time.LocalDateTime.Property property30 = localDateTime28.millisOfDay();
        java.util.TimeZone timeZone31 = null;
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forTimeZone(timeZone31);
        int int34 = dateTimeZone32.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime35 = org.joda.time.LocalDateTime.now(dateTimeZone32);
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.DateTime dateTime37 = localDateTime35.toDateTime(readableInstant36);
        java.util.TimeZone timeZone38 = null;
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forTimeZone(timeZone38);
        int int41 = dateTimeZone39.getOffset(100L);
        org.joda.time.DateTime dateTime42 = localDateTime35.toDateTime(dateTimeZone39);
        int int43 = property30.compareTo((org.joda.time.ReadableInstant) dateTime42);
        boolean boolean44 = charSet18.equals((java.lang.Object) dateTime42);
        org.joda.time.DateTime dateTime45 = localDateTime16.toDateTime((org.joda.time.ReadableInstant) dateTime42);
        int int46 = localDateTime16.getYear();
        java.util.Locale.Builder builder48 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder51 = builder48.setExtension('x', "jpn");
        java.util.Locale locale52 = java.util.Locale.GERMAN;
        java.util.Locale locale53 = java.util.Locale.GERMAN;
        java.lang.String str54 = locale52.getDisplayCountry(locale53);
        java.util.Locale locale55 = locale52.stripExtensions();
        java.lang.String str56 = locale52.getDisplayName();
        java.util.Locale.Builder builder57 = builder51.setLocale(locale52);
        java.util.Locale locale58 = builder51.build();
        java.lang.String str59 = dateTimeField4.getAsShortText((org.joda.time.ReadablePartial) localDateTime16, 21, locale58);
        java.lang.String str60 = localDateTime16.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField62 = localDateTime16.getField(13);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 13");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeZone7);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 36000000 + "'", int9 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray11);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet18);
        org.junit.Assert.assertNotNull(charItor19);
        org.junit.Assert.assertNotNull(arrayListArray21);
        org.junit.Assert.assertNotNull(languageRangeListArray22);
        org.junit.Assert.assertNotNull(languageRangeListArray23);
        org.junit.Assert.assertNotNull(dateTimeZone25);
// flaky:         org.junit.Assert.assertTrue("'" + int27 + "' != '" + 36000000 + "'", int27 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2022 + "'", int29 == 2022);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(dateTimeZone32);
// flaky:         org.junit.Assert.assertTrue("'" + int34 + "' != '" + 36000000 + "'", int34 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTimeZone39);
// flaky:         org.junit.Assert.assertTrue("'" + int41 + "' != '" + 36000000 + "'", int41 == 36000000);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2022 + "'", int46 == 2022);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "de");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "de");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "de");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "\u30c9\u30a4\u30c4\u8a9e" + "'", str56, "\u30c9\u30a4\u30c4\u8a9e");
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "de");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "21" + "'", str59, "21");
// flaky:         org.junit.Assert.assertEquals("'" + str60 + "' != '" + "2022-02-21T04:49:00.787" + "'", str60, "2022-02-21T04:49:00.787");
    }

    @Test
    public void test02415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02415");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.weekOfWeekyear();
        java.util.TimeZone timeZone2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone2);
        java.lang.String str5 = dateTimeZone3.getName(31556995199999L);
        org.joda.time.Chronology chronology6 = iSOChronology0.withZone(dateTimeZone3);
        org.joda.time.DurationField durationField7 = iSOChronology0.hours();
        long long8 = durationField7.getUnitMillis();
        int int11 = durationField7.getValue(1645454873376L, (long) 53264);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeZone3);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+10:00" + "'", str5, "+10:00");
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 3600000L + "'", long8 == 3600000L);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 457070 + "'", int11 == 457070);
    }

    @Test
    public void test02416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02416");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.DateTime dateTime6 = localDateTime4.toDateTime(readableInstant5);
        java.util.TimeZone timeZone7 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forTimeZone(timeZone7);
        int int10 = dateTimeZone8.getOffset(100L);
        org.joda.time.DateTime dateTime11 = localDateTime4.toDateTime(dateTimeZone8);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime4.plusMinutes((-1));
        org.joda.time.LocalDateTime.Property property14 = localDateTime4.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime4.withDayOfYear((int) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime18 = localDateTime16.withWeekOfWeekyear(2809);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2809 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 36000000 + "'", int3 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTimeZone8);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 36000000 + "'", int10 == 36000000);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDateTime16);
    }

    @Test
    public void test02417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02417");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.centuryOfEra();
        org.joda.time.DurationField durationField3 = iSOChronology0.seconds();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology0.yearOfEra();
        org.joda.time.DateTimeField dateTimeField6 = iSOChronology0.monthOfYear();
        org.joda.time.DurationField durationField7 = iSOChronology0.millis();
        org.joda.time.DateTimeField dateTimeField8 = iSOChronology0.secondOfDay();
        org.joda.time.DurationField durationField9 = iSOChronology0.seconds();
        org.joda.time.DurationField durationField10 = iSOChronology0.seconds();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology0.clockhourOfHalfday();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
    }

    @Test
    public void test02418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02418");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.DateTime dateTime6 = localDateTime4.toDateTime(readableInstant5);
        org.joda.time.Chronology chronology7 = dateTime6.getChronology();
        org.joda.time.DurationField durationField8 = chronology7.hours();
        org.joda.time.DurationField durationField9 = chronology7.months();
        org.joda.time.DateTimeField dateTimeField10 = chronology7.dayOfYear();
        java.util.TimeZone timeZone11 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        int int14 = dateTimeZone12.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime15 = org.joda.time.LocalDateTime.now(dateTimeZone12);
        int[] intArray18 = new int[] { (short) 0, (short) 0 };
        int int19 = dateTimeField10.getMinimumValue((org.joda.time.ReadablePartial) localDateTime15, intArray18);
        int int21 = dateTimeField10.getMinimumValue((long) 100);
        java.util.TimeZone timeZone22 = null;
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        int int25 = dateTimeZone23.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime26 = org.joda.time.LocalDateTime.now(dateTimeZone23);
        int int27 = localDateTime26.getWeekyear();
        org.joda.time.LocalDateTime.Property property28 = localDateTime26.minuteOfHour();
        int int29 = dateTimeField10.getMaximumValue((org.joda.time.ReadablePartial) localDateTime26);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime26.withCenturyOfEra(1);
        java.util.TimeZone timeZone32 = null;
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forTimeZone(timeZone32);
        int int35 = dateTimeZone33.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime36 = org.joda.time.LocalDateTime.now(dateTimeZone33);
        org.joda.time.LocalDateTime localDateTime37 = org.joda.time.LocalDateTime.now(dateTimeZone33);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime37.minusMinutes((int) ' ');
        int int40 = localDateTime37.size();
        org.joda.time.LocalDateTime localDateTime41 = localDateTime26.withFields((org.joda.time.ReadablePartial) localDateTime37);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime43 = localDateTime41.withMillisOfSecond(2936);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2936 for millisOfSecond must be in the range [0,999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 36000000 + "'", int3 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeZone12);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 36000000 + "'", int14 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[0, 0]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(dateTimeZone23);
// flaky:         org.junit.Assert.assertTrue("'" + int25 + "' != '" + 36000000 + "'", int25 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2022 + "'", int27 == 2022);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 365 + "'", int29 == 365);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(dateTimeZone33);
// flaky:         org.junit.Assert.assertTrue("'" + int35 + "' != '" + 36000000 + "'", int35 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 4 + "'", int40 == 4);
        org.junit.Assert.assertNotNull(localDateTime41);
    }

    @Test
    public void test02419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02419");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.centuryOfEra();
        org.joda.time.DurationField durationField3 = iSOChronology0.centuries();
        org.joda.time.DurationField durationField4 = iSOChronology0.hours();
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        int int8 = dateTimeZone6.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime9 = org.joda.time.LocalDateTime.now(dateTimeZone6);
        int int10 = localDateTime9.getDayOfYear();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime9.withYearOfEra(2022);
        long long14 = iSOChronology0.set((org.joda.time.ReadablePartial) localDateTime12, (long) 0);
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology0.era();
        org.joda.time.DurationField durationField16 = iSOChronology0.hours();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 36000000 + "'", int8 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime9);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 53 + "'", int10 == 53);
        org.junit.Assert.assertNotNull(localDateTime12);
// flaky:         org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1645454941137L + "'", long14 == 1645454941137L);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
    }

    @Test
    public void test02420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02420");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.hourOfHalfday();
        java.lang.String str2 = iSOChronology0.toString();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.era();
        org.joda.time.DateTimeZone dateTimeZone4 = iSOChronology0.getZone();
        long long7 = dateTimeZone4.convertLocalToUTC(1645454771211L, false);
        long long9 = dateTimeZone4.nextTransition((long) 2843364);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ISOChronology[+10:00]" + "'", str2, "ISOChronology[+10:00]");
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
// flaky:         org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1645418771211L + "'", long7 == 1645418771211L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 2843364L + "'", long9 == 2843364L);
    }

    @Test
    public void test02421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02421");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.centuryOfEra();
        org.joda.time.DurationField durationField3 = iSOChronology0.days();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.minuteOfDay();
        org.joda.time.DurationField durationField5 = iSOChronology0.halfdays();
        long long7 = durationField5.getValueAsLong((long) 49687275);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1L + "'", long7 == 1L);
    }

    @Test
    public void test02422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02422");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        org.joda.time.DurationFieldType durationFieldType1 = dateTimeFieldType0.getDurationType();
        org.joda.time.chrono.ISOChronology iSOChronology2 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology2.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology2.yearOfEra();
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology2.weekyearOfCentury();
        java.lang.String str6 = iSOChronology2.toString();
        org.joda.time.DateTimeField dateTimeField7 = iSOChronology2.clockhourOfHalfday();
        java.lang.String str8 = iSOChronology2.toString();
        org.joda.time.DateTimeField dateTimeField9 = iSOChronology2.monthOfYear();
        org.joda.time.DurationField durationField10 = durationFieldType1.getField((org.joda.time.Chronology) iSOChronology2);
        java.util.TimeZone timeZone11 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        int int14 = dateTimeZone12.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime15 = org.joda.time.LocalDateTime.now(dateTimeZone12);
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.DateTime dateTime17 = localDateTime15.toDateTime(readableInstant16);
        java.util.TimeZone timeZone18 = null;
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forTimeZone(timeZone18);
        int int21 = dateTimeZone19.getOffset(100L);
        org.joda.time.DateTime dateTime22 = localDateTime15.toDateTime(dateTimeZone19);
        org.joda.time.LocalDateTime.Property property23 = localDateTime15.monthOfYear();
        java.util.TimeZone timeZone24 = null;
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forTimeZone(timeZone24);
        int int27 = dateTimeZone25.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime28 = org.joda.time.LocalDateTime.now(dateTimeZone25);
        int int29 = localDateTime28.getWeekyear();
        org.joda.time.LocalDateTime.Property property30 = localDateTime28.millisOfDay();
        java.util.TimeZone timeZone31 = null;
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forTimeZone(timeZone31);
        int int34 = dateTimeZone32.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime35 = org.joda.time.LocalDateTime.now(dateTimeZone32);
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.DateTime dateTime37 = localDateTime35.toDateTime(readableInstant36);
        java.util.TimeZone timeZone38 = null;
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forTimeZone(timeZone38);
        int int41 = dateTimeZone39.getOffset(100L);
        org.joda.time.DateTime dateTime42 = localDateTime35.toDateTime(dateTimeZone39);
        int int43 = property30.compareTo((org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.LocalDateTime localDateTime44 = property30.roundHalfEvenCopy();
        boolean boolean45 = localDateTime15.isAfter((org.joda.time.ReadablePartial) localDateTime44);
        java.util.Date date46 = localDateTime15.toDate();
        org.joda.time.LocalDateTime localDateTime47 = org.joda.time.LocalDateTime.fromDateFields(date46);
        org.joda.time.ReadableDuration readableDuration48 = null;
        org.joda.time.LocalDateTime localDateTime49 = localDateTime47.minus(readableDuration48);
        org.joda.time.LocalDateTime localDateTime51 = localDateTime49.plusDays(1);
        long long53 = iSOChronology2.set((org.joda.time.ReadablePartial) localDateTime49, (-255600000L));
        java.util.TimeZone timeZone54 = null;
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.forTimeZone(timeZone54);
        int int57 = dateTimeZone55.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime58 = org.joda.time.LocalDateTime.now(dateTimeZone55);
        int int59 = localDateTime58.getWeekyear();
        org.joda.time.LocalDateTime.Property property60 = localDateTime58.millisOfDay();
        java.util.TimeZone timeZone61 = null;
        org.joda.time.DateTimeZone dateTimeZone62 = org.joda.time.DateTimeZone.forTimeZone(timeZone61);
        int int64 = dateTimeZone62.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime65 = org.joda.time.LocalDateTime.now(dateTimeZone62);
        org.joda.time.ReadableInstant readableInstant66 = null;
        org.joda.time.DateTime dateTime67 = localDateTime65.toDateTime(readableInstant66);
        java.util.TimeZone timeZone68 = null;
        org.joda.time.DateTimeZone dateTimeZone69 = org.joda.time.DateTimeZone.forTimeZone(timeZone68);
        int int71 = dateTimeZone69.getOffset(100L);
        org.joda.time.DateTime dateTime72 = localDateTime65.toDateTime(dateTimeZone69);
        int int73 = property60.compareTo((org.joda.time.ReadableInstant) dateTime72);
        org.joda.time.Instant instant74 = dateTime72.toInstant();
        java.lang.String str75 = instant74.toString();
        org.joda.time.DateTime dateTime76 = localDateTime49.toDateTime((org.joda.time.ReadableInstant) instant74);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(durationFieldType1);
        org.junit.Assert.assertNotNull(iSOChronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "ISOChronology[+10:00]" + "'", str6, "ISOChronology[+10:00]");
        org.junit.Assert.assertNotNull(dateTimeField7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "ISOChronology[+10:00]" + "'", str8, "ISOChronology[+10:00]");
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeZone12);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 36000000 + "'", int14 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTimeZone19);
// flaky:         org.junit.Assert.assertTrue("'" + int21 + "' != '" + 36000000 + "'", int21 == 36000000);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTimeZone25);
// flaky:         org.junit.Assert.assertTrue("'" + int27 + "' != '" + 36000000 + "'", int27 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2022 + "'", int29 == 2022);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(dateTimeZone32);
// flaky:         org.junit.Assert.assertTrue("'" + int34 + "' != '" + 36000000 + "'", int34 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTimeZone39);
// flaky:         org.junit.Assert.assertTrue("'" + int41 + "' != '" + 36000000 + "'", int41 == 36000000);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(date46);
// flaky:         org.junit.Assert.assertEquals(date46.toString(), "Tue Feb 22 00:49:01 GMT+10:00 2022");
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(localDateTime51);
// flaky:         org.junit.Assert.assertTrue("'" + long53 + "' != '" + 1645454941291L + "'", long53 == 1645454941291L);
        org.junit.Assert.assertNotNull(dateTimeZone55);
// flaky:         org.junit.Assert.assertTrue("'" + int57 + "' != '" + 36000000 + "'", int57 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 2022 + "'", int59 == 2022);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertNotNull(dateTimeZone62);
// flaky:         org.junit.Assert.assertTrue("'" + int64 + "' != '" + 36000000 + "'", int64 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(dateTimeZone69);
// flaky:         org.junit.Assert.assertTrue("'" + int71 + "' != '" + 36000000 + "'", int71 == 36000000);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertNotNull(instant74);
// flaky:         org.junit.Assert.assertEquals("'" + str75 + "' != '" + "2022-02-21T14:49:01.292Z" + "'", str75, "2022-02-21T14:49:01.292Z");
        org.junit.Assert.assertNotNull(dateTime76);
    }

    @Test
    public void test02423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02423");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray5 = localDateTime4.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.hourOfDay();
        int int7 = localDateTime4.get(dateTimeFieldType6);
        org.joda.time.LocalDateTime.Property property8 = localDateTime4.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime4.minusHours(20);
        java.util.Locale locale11 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet12 = locale11.getExtensionKeys();
        java.util.Iterator<java.lang.Character> charItor13 = charSet12.iterator();
        java.util.ArrayList[] arrayListArray15 = new java.util.ArrayList[0];
        @SuppressWarnings("unchecked")
        java.util.ArrayList<java.util.Locale.LanguageRange>[] languageRangeListArray16 = (java.util.ArrayList<java.util.Locale.LanguageRange>[]) arrayListArray15;
        java.util.ArrayList<java.util.Locale.LanguageRange>[] languageRangeListArray17 = charSet12.toArray((java.util.ArrayList<java.util.Locale.LanguageRange>[]) arrayListArray15);
        java.util.TimeZone timeZone18 = null;
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forTimeZone(timeZone18);
        int int21 = dateTimeZone19.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime22 = org.joda.time.LocalDateTime.now(dateTimeZone19);
        int int23 = localDateTime22.getWeekyear();
        org.joda.time.LocalDateTime.Property property24 = localDateTime22.millisOfDay();
        java.util.TimeZone timeZone25 = null;
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forTimeZone(timeZone25);
        int int28 = dateTimeZone26.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime29 = org.joda.time.LocalDateTime.now(dateTimeZone26);
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.DateTime dateTime31 = localDateTime29.toDateTime(readableInstant30);
        java.util.TimeZone timeZone32 = null;
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forTimeZone(timeZone32);
        int int35 = dateTimeZone33.getOffset(100L);
        org.joda.time.DateTime dateTime36 = localDateTime29.toDateTime(dateTimeZone33);
        int int37 = property24.compareTo((org.joda.time.ReadableInstant) dateTime36);
        boolean boolean38 = charSet12.equals((java.lang.Object) dateTime36);
        org.joda.time.DateTime dateTime39 = localDateTime10.toDateTime((org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.LocalDateTime localDateTime40 = org.joda.time.LocalDateTime.now();
        java.util.TimeZone timeZone41 = null;
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forTimeZone(timeZone41);
        int int44 = dateTimeZone42.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime45 = org.joda.time.LocalDateTime.now(dateTimeZone42);
        int int46 = localDateTime45.getWeekyear();
        org.joda.time.LocalDateTime.Property property47 = localDateTime45.millisOfDay();
        java.util.TimeZone timeZone48 = null;
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.forTimeZone(timeZone48);
        int int51 = dateTimeZone49.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime52 = org.joda.time.LocalDateTime.now(dateTimeZone49);
        org.joda.time.ReadableInstant readableInstant53 = null;
        org.joda.time.DateTime dateTime54 = localDateTime52.toDateTime(readableInstant53);
        java.util.TimeZone timeZone55 = null;
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.forTimeZone(timeZone55);
        int int58 = dateTimeZone56.getOffset(100L);
        org.joda.time.DateTime dateTime59 = localDateTime52.toDateTime(dateTimeZone56);
        int int60 = property47.compareTo((org.joda.time.ReadableInstant) dateTime59);
        org.joda.time.LocalDateTime localDateTime61 = property47.roundHalfEvenCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType62 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.LocalDateTime.Property property63 = localDateTime61.property(dateTimeFieldType62);
        org.joda.time.DateTimeFieldType dateTimeFieldType64 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.Chronology chronology65 = null;
        boolean boolean66 = dateTimeFieldType64.isSupported(chronology65);
        boolean boolean67 = localDateTime61.isSupported(dateTimeFieldType64);
        int int68 = localDateTime40.get(dateTimeFieldType64);
        org.joda.time.LocalDateTime.Property property69 = localDateTime40.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime70 = org.joda.time.LocalDateTime.now();
        java.util.TimeZone timeZone71 = null;
        org.joda.time.DateTimeZone dateTimeZone72 = org.joda.time.DateTimeZone.forTimeZone(timeZone71);
        int int74 = dateTimeZone72.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime75 = org.joda.time.LocalDateTime.now(dateTimeZone72);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray76 = localDateTime75.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType77 = org.joda.time.DateTimeFieldType.hourOfDay();
        int int78 = localDateTime75.get(dateTimeFieldType77);
        org.joda.time.LocalDateTime.Property property79 = localDateTime75.dayOfWeek();
        boolean boolean80 = localDateTime70.isEqual((org.joda.time.ReadablePartial) localDateTime75);
        org.joda.time.ReadablePeriod readablePeriod81 = null;
        org.joda.time.LocalDateTime localDateTime83 = localDateTime70.withPeriodAdded(readablePeriod81, (int) (short) -1);
        org.joda.time.LocalDateTime localDateTime84 = localDateTime40.withFields((org.joda.time.ReadablePartial) localDateTime70);
        org.joda.time.DateTime dateTime85 = localDateTime70.toDateTime();
        boolean boolean86 = dateTime36.isAfter((org.joda.time.ReadableInstant) dateTime85);
        java.lang.Object obj87 = null;
        boolean boolean88 = dateTime36.equals(obj87);
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 36000000 + "'", int3 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray5);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet12);
        org.junit.Assert.assertNotNull(charItor13);
        org.junit.Assert.assertNotNull(arrayListArray15);
        org.junit.Assert.assertNotNull(languageRangeListArray16);
        org.junit.Assert.assertNotNull(languageRangeListArray17);
        org.junit.Assert.assertNotNull(dateTimeZone19);
// flaky:         org.junit.Assert.assertTrue("'" + int21 + "' != '" + 36000000 + "'", int21 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2022 + "'", int23 == 2022);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTimeZone26);
// flaky:         org.junit.Assert.assertTrue("'" + int28 + "' != '" + 36000000 + "'", int28 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTimeZone33);
// flaky:         org.junit.Assert.assertTrue("'" + int35 + "' != '" + 36000000 + "'", int35 == 36000000);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(dateTimeZone42);
// flaky:         org.junit.Assert.assertTrue("'" + int44 + "' != '" + 36000000 + "'", int44 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2022 + "'", int46 == 2022);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(dateTimeZone49);
// flaky:         org.junit.Assert.assertTrue("'" + int51 + "' != '" + 36000000 + "'", int51 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTimeZone56);
// flaky:         org.junit.Assert.assertTrue("'" + int58 + "' != '" + 36000000 + "'", int58 == 36000000);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertNotNull(dateTimeFieldType62);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertNotNull(dateTimeFieldType64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int68 + "' != '" + 53 + "'", int68 == 53);
        org.junit.Assert.assertNotNull(property69);
        org.junit.Assert.assertNotNull(localDateTime70);
        org.junit.Assert.assertNotNull(dateTimeZone72);
// flaky:         org.junit.Assert.assertTrue("'" + int74 + "' != '" + 36000000 + "'", int74 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime75);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray76);
        org.junit.Assert.assertNotNull(dateTimeFieldType77);
// flaky:         org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertNotNull(property79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertNotNull(localDateTime83);
        org.junit.Assert.assertNotNull(localDateTime84);
        org.junit.Assert.assertNotNull(dateTime85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
    }

    @Test
    public void test02424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02424");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime5 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusMinutes((int) ' ');
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withYearOfCentury((int) (byte) 10);
        java.util.TimeZone timeZone10 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        int int13 = dateTimeZone11.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime14 = org.joda.time.LocalDateTime.now(dateTimeZone11);
        org.joda.time.LocalDateTime localDateTime15 = org.joda.time.LocalDateTime.now(dateTimeZone11);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.withMillisOfSecond((int) '4');
        org.joda.time.LocalDateTime localDateTime18 = localDateTime9.withFields((org.joda.time.ReadablePartial) localDateTime15);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.plusHours(3);
        int int21 = localDateTime18.size();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 36000000 + "'", int3 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone11);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 36000000 + "'", int13 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 4 + "'", int21 == 4);
    }

    @Test
    public void test02425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02425");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        int int5 = localDateTime4.getWeekyear();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.withSecondOfMinute((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.minusMillis((-292275054));
        org.joda.time.LocalDateTime.Property property10 = localDateTime7.secondOfMinute();
        java.util.Locale.Category category12 = java.util.Locale.Category.DISPLAY;
        org.joda.time.tz.NameProvider nameProvider13 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale14 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet15 = locale14.getExtensionKeys();
        java.lang.String str18 = nameProvider13.getShortName(locale14, "Koordinierte Universalzeit", "+00:00");
        java.lang.String str19 = locale14.toLanguageTag();
        java.util.Locale.setDefault(category12, locale14);
        org.joda.time.chrono.ISOChronology iSOChronology21 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField22 = iSOChronology21.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField23 = iSOChronology21.yearOfEra();
        org.joda.time.DurationField durationField24 = iSOChronology21.minutes();
        org.joda.time.DateTimeField dateTimeField25 = iSOChronology21.weekyear();
        org.joda.time.DurationField durationField26 = iSOChronology21.centuries();
        org.joda.time.DateTimeField dateTimeField27 = iSOChronology21.centuryOfEra();
        java.util.TimeZone timeZone28 = null;
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forTimeZone(timeZone28);
        java.lang.String str31 = dateTimeZone29.getName(31556995199999L);
        org.joda.time.Chronology chronology32 = iSOChronology21.withZone(dateTimeZone29);
        java.util.TimeZone timeZone34 = null;
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forTimeZone(timeZone34);
        int int37 = dateTimeZone35.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime38 = org.joda.time.LocalDateTime.now(dateTimeZone35);
        org.joda.time.ReadableInstant readableInstant39 = null;
        org.joda.time.DateTime dateTime40 = localDateTime38.toDateTime(readableInstant39);
        org.joda.time.Chronology chronology41 = dateTime40.getChronology();
        org.joda.time.DurationField durationField42 = chronology41.hours();
        org.joda.time.DurationField durationField43 = chronology41.months();
        org.joda.time.DateTimeField dateTimeField44 = chronology41.dayOfYear();
        java.util.TimeZone timeZone45 = null;
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.forTimeZone(timeZone45);
        int int48 = dateTimeZone46.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime49 = org.joda.time.LocalDateTime.now(dateTimeZone46);
        int[] intArray52 = new int[] { (short) 0, (short) 0 };
        int int53 = dateTimeField44.getMinimumValue((org.joda.time.ReadablePartial) localDateTime49, intArray52);
        int int55 = dateTimeField44.getMinimumValue((long) 100);
        java.util.TimeZone timeZone56 = null;
        org.joda.time.DateTimeZone dateTimeZone57 = org.joda.time.DateTimeZone.forTimeZone(timeZone56);
        int int59 = dateTimeZone57.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime60 = org.joda.time.LocalDateTime.now(dateTimeZone57);
        int int61 = localDateTime60.getWeekyear();
        org.joda.time.LocalDateTime.Property property62 = localDateTime60.minuteOfHour();
        int int63 = dateTimeField44.getMaximumValue((org.joda.time.ReadablePartial) localDateTime60);
        long long66 = dateTimeField44.getDifferenceAsLong(7870L, 0L);
        org.joda.time.tz.NameProvider nameProvider67 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale68 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet69 = locale68.getExtensionKeys();
        java.lang.String str72 = nameProvider67.getShortName(locale68, "Koordinierte Universalzeit", "+00:00");
        java.util.Locale locale73 = java.util.Locale.GERMAN;
        java.lang.String str76 = nameProvider67.getShortName(locale73, "53167803", "jpn");
        int int77 = dateTimeField44.getMaximumShortTextLength(locale73);
        java.lang.String str78 = dateTimeZone29.getName((long) 2, locale73);
        java.lang.String str79 = locale73.getDisplayVariant();
        java.lang.String str80 = locale73.getDisplayName();
        java.lang.String str81 = locale73.getISO3Language();
        java.util.Locale.setDefault(category12, locale73);
        java.util.Locale locale83 = java.util.Locale.getDefault(category12);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime84 = property10.setCopy("2856288", locale83);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2856288 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 36000000 + "'", int3 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2022 + "'", int5 == 2022);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + category12 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category12.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(nameProvider13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet15);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "ko" + "'", str19, "ko");
        org.junit.Assert.assertNotNull(iSOChronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeZone29);
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "+10:00" + "'", str31, "+10:00");
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTimeZone35);
// flaky:         org.junit.Assert.assertTrue("'" + int37 + "' != '" + 36000000 + "'", int37 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertNotNull(durationField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(dateTimeZone46);
// flaky:         org.junit.Assert.assertTrue("'" + int48 + "' != '" + 36000000 + "'", int48 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[0, 0]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertNotNull(dateTimeZone57);
// flaky:         org.junit.Assert.assertTrue("'" + int59 + "' != '" + 36000000 + "'", int59 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 2022 + "'", int61 == 2022);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 365 + "'", int63 == 365);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 0L + "'", long66 == 0L);
        org.junit.Assert.assertNotNull(nameProvider67);
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet69);
        org.junit.Assert.assertNull(str72);
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "de");
        org.junit.Assert.assertNull(str76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 3 + "'", int77 == 3);
// flaky:         org.junit.Assert.assertEquals("'" + str78 + "' != '" + "+10:00" + "'", str78, "+10:00");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "" + "'", str79, "");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "\ub3c5\uc77c\uc5b4" + "'", str80, "\ub3c5\uc77c\uc5b4");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "deu" + "'", str81, "deu");
        org.junit.Assert.assertNotNull(locale83);
        org.junit.Assert.assertEquals(locale83.toString(), "de");
    }

    @Test
    public void test02426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02426");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.yearOfEra();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.hourOfDay();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology0.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        long long11 = dateTimeZone7.convertLocalToUTC((long) (byte) -1, true, (long) (short) -1);
        boolean boolean12 = dateTimeZone7.isFixed();
        org.joda.time.Chronology chronology13 = iSOChronology0.withZone(dateTimeZone7);
        org.joda.time.DateTimeZone dateTimeZone14 = iSOChronology0.getZone();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology0.era();
        // The following exception was thrown during execution in test generation
        try {
            long long20 = iSOChronology0.getDateTimeMillis(2931395, 2838341, 2843364, 36000000);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2838341 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-36000001L) + "'", long11 == (-36000001L));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTimeField15);
    }

    @Test
    public void test02427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02427");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.hourOfHalfday();
        org.joda.time.DurationField durationField2 = iSOChronology0.hours();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.secondOfDay();
        org.joda.time.DurationField durationField4 = iSOChronology0.centuries();
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology0.clockhourOfHalfday();
        org.joda.time.DurationField durationField6 = iSOChronology0.hours();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
    }

    @Test
    public void test02428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02428");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.millis();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.secondOfDay();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.minuteOfDay();
        int int6 = dateTimeField4.getMinimumValue(0L);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
    }

    @Test
    public void test02429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02429");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffset(100L);
        java.util.TimeZone timeZone4 = dateTimeZone1.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forTimeZone(timeZone4);
        timeZone4.setID("");
        java.util.TimeZone timeZone8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        int int11 = dateTimeZone9.getOffset(100L);
        java.util.TimeZone timeZone12 = dateTimeZone9.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone12);
        java.util.TimeZone.setDefault(timeZone12);
        java.util.TimeZone.setDefault(timeZone12);
        boolean boolean16 = timeZone4.hasSameRules(timeZone12);
        java.util.TimeZone timeZone17 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forTimeZone(timeZone17);
        int int20 = dateTimeZone18.getOffset(100L);
        java.util.TimeZone timeZone21 = dateTimeZone18.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forTimeZone(timeZone21);
        java.lang.String str24 = dateTimeZone22.getNameKey((long) '4');
        java.lang.String str26 = dateTimeZone22.getNameKey(1645454784654L);
        boolean boolean27 = dateTimeZone22.isFixed();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone22);
        java.lang.String str30 = dateTimeZone22.getShortName(2815198L);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime((java.lang.Object) boolean16, dateTimeZone22);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: java.lang.Boolean");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 36000000 + "'", int3 == 36000000);
        org.junit.Assert.assertNotNull(timeZone4);
// flaky:         org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTimeZone9);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 36000000 + "'", int11 == 36000000);
        org.junit.Assert.assertNotNull(timeZone12);
// flaky:         org.junit.Assert.assertEquals(timeZone12.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(dateTimeZone18);
// flaky:         org.junit.Assert.assertTrue("'" + int20 + "' != '" + 36000000 + "'", int20 == 36000000);
        org.junit.Assert.assertNotNull(timeZone21);
// flaky:         org.junit.Assert.assertEquals(timeZone21.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertNotNull(dateTimeZone22);
// flaky:         org.junit.Assert.assertNull(str24);
// flaky:         org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str30 + "' != '" + "+10:00" + "'", str30, "+10:00");
    }

    @Test
    public void test02430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02430");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.hourOfHalfday();
        java.lang.String str2 = iSOChronology0.toString();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.era();
        org.joda.time.DurationField durationField4 = iSOChronology0.centuries();
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        long long8 = iSOChronology0.add(readablePeriod5, (long) 2022, (int) (byte) 100);
        org.joda.time.DateTimeField dateTimeField9 = iSOChronology0.dayOfYear();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology0.year();
        long long13 = dateTimeField10.set(100L, "53166874");
        java.util.TimeZone timeZone15 = null;
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forTimeZone(timeZone15);
        int int18 = dateTimeZone16.getOffset(100L);
        long long20 = dateTimeZone16.nextTransition((long) (short) -1);
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime(3155695200000L, dateTimeZone16);
        org.joda.time.chrono.ISOChronology iSOChronology23 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField24 = iSOChronology23.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField25 = iSOChronology23.centuryOfEra();
        org.joda.time.DurationField durationField26 = iSOChronology23.centuries();
        org.joda.time.DurationField durationField27 = iSOChronology23.hours();
        java.util.TimeZone timeZone28 = null;
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forTimeZone(timeZone28);
        int int31 = dateTimeZone29.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime32 = org.joda.time.LocalDateTime.now(dateTimeZone29);
        int int33 = localDateTime32.getDayOfYear();
        org.joda.time.LocalDateTime localDateTime35 = localDateTime32.withYearOfEra(2022);
        long long37 = iSOChronology23.set((org.joda.time.ReadablePartial) localDateTime35, (long) 0);
        org.joda.time.DateTimeField dateTimeField38 = iSOChronology23.monthOfYear();
        org.joda.time.DateTimeField dateTimeField39 = iSOChronology23.clockhourOfDay();
        org.joda.time.tz.NameProvider nameProvider40 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.DateTimeZone.setNameProvider(nameProvider40);
        java.util.TimeZone timeZone42 = null;
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forTimeZone(timeZone42);
        int int45 = dateTimeZone43.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime46 = org.joda.time.LocalDateTime.now(dateTimeZone43);
        org.joda.time.ReadableInstant readableInstant47 = null;
        org.joda.time.DateTime dateTime48 = localDateTime46.toDateTime(readableInstant47);
        org.joda.time.Chronology chronology49 = dateTime48.getChronology();
        org.joda.time.DurationField durationField50 = chronology49.hours();
        org.joda.time.DurationField durationField51 = chronology49.months();
        org.joda.time.DateTimeField dateTimeField52 = chronology49.dayOfYear();
        java.util.TimeZone timeZone53 = null;
        org.joda.time.DateTimeZone dateTimeZone54 = org.joda.time.DateTimeZone.forTimeZone(timeZone53);
        int int56 = dateTimeZone54.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime57 = org.joda.time.LocalDateTime.now(dateTimeZone54);
        int[] intArray60 = new int[] { (short) 0, (short) 0 };
        int int61 = dateTimeField52.getMinimumValue((org.joda.time.ReadablePartial) localDateTime57, intArray60);
        java.lang.String str63 = dateTimeField52.getAsShortText((long) 53166088);
        java.util.TimeZone timeZone64 = null;
        org.joda.time.DateTimeZone dateTimeZone65 = org.joda.time.DateTimeZone.forTimeZone(timeZone64);
        int int67 = dateTimeZone65.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime68 = org.joda.time.LocalDateTime.now(dateTimeZone65);
        int int69 = localDateTime68.getWeekyear();
        org.joda.time.DurationFieldType durationFieldType70 = org.joda.time.DurationFieldType.days();
        org.joda.time.LocalDateTime localDateTime72 = localDateTime68.withFieldAdded(durationFieldType70, 53166088);
        java.util.Locale locale73 = java.util.Locale.ROOT;
        java.lang.String str74 = dateTimeField52.getAsShortText((org.joda.time.ReadablePartial) localDateTime72, locale73);
        java.lang.String str77 = nameProvider40.getShortName(locale73, "53169175", "+00:00");
        java.util.Locale locale78 = java.util.Locale.JAPANESE;
        java.lang.String str79 = locale78.getDisplayLanguage();
        java.util.Set<java.lang.String> strSet80 = locale78.getUnicodeLocaleKeys();
        java.lang.String str81 = locale78.getScript();
        java.lang.String str84 = nameProvider40.getShortName(locale78, "2022-02-21T14:46:09.691Z", "\uc77c\ubcf8\uc5b4");
        int int85 = dateTimeField39.getMaximumTextLength(locale78);
        java.lang.String str86 = dateTimeZone16.getName(0L, locale78);
        int int87 = dateTimeField10.getMaximumShortTextLength(locale78);
        long long90 = dateTimeField10.getDifferenceAsLong(1644850011545L, (long) 100);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ISOChronology[+10:00]" + "'", str2, "ISOChronology[+10:00]");
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 2022L + "'", long8 == 2022L);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1677722323680000100L + "'", long13 == 1677722323680000100L);
        org.junit.Assert.assertNotNull(dateTimeZone16);
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + 36000000 + "'", int18 == 36000000);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-1L) + "'", long20 == (-1L));
        org.junit.Assert.assertNotNull(iSOChronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(dateTimeZone29);
// flaky:         org.junit.Assert.assertTrue("'" + int31 + "' != '" + 36000000 + "'", int31 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime32);
// flaky:         org.junit.Assert.assertTrue("'" + int33 + "' != '" + 53 + "'", int33 == 53);
        org.junit.Assert.assertNotNull(localDateTime35);
// flaky:         org.junit.Assert.assertTrue("'" + long37 + "' != '" + 1645454941632L + "'", long37 == 1645454941632L);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(nameProvider40);
        org.junit.Assert.assertNotNull(dateTimeZone43);
// flaky:         org.junit.Assert.assertTrue("'" + int45 + "' != '" + 36000000 + "'", int45 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(durationField50);
        org.junit.Assert.assertNotNull(durationField51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(dateTimeZone54);
// flaky:         org.junit.Assert.assertTrue("'" + int56 + "' != '" + 36000000 + "'", int56 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[0, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
// flaky:         org.junit.Assert.assertEquals("'" + str63 + "' != '" + "2" + "'", str63, "2");
        org.junit.Assert.assertNotNull(dateTimeZone65);
// flaky:         org.junit.Assert.assertTrue("'" + int67 + "' != '" + 36000000 + "'", int67 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 2022 + "'", int69 == 2022);
        org.junit.Assert.assertNotNull(durationFieldType70);
        org.junit.Assert.assertNotNull(localDateTime72);
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "");
// flaky:         org.junit.Assert.assertEquals("'" + str74 + "' != '" + "347" + "'", str74, "347");
        org.junit.Assert.assertNull(str77);
        org.junit.Assert.assertNotNull(locale78);
        org.junit.Assert.assertEquals(locale78.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "Japanisch" + "'", str79, "Japanisch");
        org.junit.Assert.assertNotNull(strSet80);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "" + "'", str81, "");
        org.junit.Assert.assertNull(str84);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 2 + "'", int85 == 2);
// flaky:         org.junit.Assert.assertEquals("'" + str86 + "' != '" + "+10:00" + "'", str86, "+10:00");
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 9 + "'", int87 == 9);
        org.junit.Assert.assertTrue("'" + long90 + "' != '" + 52L + "'", long90 == 52L);
    }

    @Test
    public void test02431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02431");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.yearOfEra();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.hourOfDay();
        long long6 = dateTimeField3.add(4538645224864L, 53193);
        long long8 = dateTimeField3.roundHalfFloor((long) 2818);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 4730140024864L + "'", long6 == 4730140024864L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
    }

    @Test
    public void test02432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02432");
        java.util.Locale locale1 = new java.util.Locale("DateTimeField[millisOfSecond]");
        org.junit.Assert.assertEquals(locale1.toString(), "datetimefield[millisofsecond]");
    }

    @Test
    public void test02433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02433");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(0, 0);
        org.junit.Assert.assertNotNull(dateTimeZone2);
    }

    @Test
    public void test02434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02434");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("\uae30\uc6d0\uc804");
        java.util.TimeZone timeZone2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone2);
        int int5 = dateTimeZone3.getOffset(100L);
        java.util.TimeZone timeZone6 = dateTimeZone3.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forTimeZone(timeZone6);
        java.util.TimeZone.setDefault(timeZone6);
        java.util.TimeZone timeZone9 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        int int12 = dateTimeZone10.getOffset(100L);
        java.util.TimeZone timeZone13 = dateTimeZone10.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forTimeZone(timeZone13);
        java.util.TimeZone.setDefault(timeZone13);
        boolean boolean16 = timeZone6.hasSameRules(timeZone13);
        boolean boolean17 = timeZone1.hasSameRules(timeZone6);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forTimeZone(timeZone6);
        boolean boolean19 = timeZone6.observesDaylightTime();
        int int21 = timeZone6.getOffset((-62162759538412L));
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Greenwich Zeit");
        org.junit.Assert.assertNotNull(dateTimeZone3);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 36000000 + "'", int5 == 36000000);
        org.junit.Assert.assertNotNull(timeZone6);
// flaky:         org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTimeZone10);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 36000000 + "'", int12 == 36000000);
        org.junit.Assert.assertNotNull(timeZone13);
// flaky:         org.junit.Assert.assertEquals(timeZone13.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
// flaky:         org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int21 + "' != '" + 36000000 + "'", int21 == 36000000);
    }

    @Test
    public void test02435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02435");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet1 = locale0.getExtensionKeys();
        java.util.Iterator<java.lang.Character> charItor2 = charSet1.iterator();
        java.util.ArrayList[] arrayListArray4 = new java.util.ArrayList[0];
        @SuppressWarnings("unchecked")
        java.util.ArrayList<java.util.Locale.LanguageRange>[] languageRangeListArray5 = (java.util.ArrayList<java.util.Locale.LanguageRange>[]) arrayListArray4;
        java.util.ArrayList<java.util.Locale.LanguageRange>[] languageRangeListArray6 = charSet1.toArray((java.util.ArrayList<java.util.Locale.LanguageRange>[]) arrayListArray4);
        java.util.TimeZone timeZone7 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forTimeZone(timeZone7);
        int int10 = dateTimeZone8.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now(dateTimeZone8);
        int int12 = localDateTime11.getWeekyear();
        org.joda.time.LocalDateTime.Property property13 = localDateTime11.millisOfDay();
        java.util.TimeZone timeZone14 = null;
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forTimeZone(timeZone14);
        int int17 = dateTimeZone15.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime18 = org.joda.time.LocalDateTime.now(dateTimeZone15);
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.DateTime dateTime20 = localDateTime18.toDateTime(readableInstant19);
        java.util.TimeZone timeZone21 = null;
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forTimeZone(timeZone21);
        int int24 = dateTimeZone22.getOffset(100L);
        org.joda.time.DateTime dateTime25 = localDateTime18.toDateTime(dateTimeZone22);
        int int26 = property13.compareTo((org.joda.time.ReadableInstant) dateTime25);
        boolean boolean27 = charSet1.equals((java.lang.Object) dateTime25);
        java.util.Locale locale28 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet29 = locale28.getExtensionKeys();
        java.util.Iterator<java.lang.Character> charItor30 = charSet29.iterator();
        java.util.Locale locale31 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet32 = locale31.getExtensionKeys();
        java.util.Iterator<java.lang.Character> charItor33 = charSet32.iterator();
        boolean boolean34 = charSet29.containsAll((java.util.Collection<java.lang.Character>) charSet32);
        java.util.TimeZone timeZone35 = null;
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forTimeZone(timeZone35);
        int int38 = dateTimeZone36.getOffset(100L);
        java.util.TimeZone timeZone39 = dateTimeZone36.toTimeZone();
        org.joda.time.DateTimeZone[] dateTimeZoneArray40 = new org.joda.time.DateTimeZone[] { dateTimeZone36 };
        org.joda.time.DateTimeZone[] dateTimeZoneArray41 = charSet32.toArray(dateTimeZoneArray40);
        boolean boolean42 = charSet1.removeAll((java.util.Collection<java.lang.Character>) charSet32);
        org.joda.time.chrono.ISOChronology iSOChronology43 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField44 = iSOChronology43.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField45 = iSOChronology43.yearOfEra();
        org.joda.time.DurationField durationField46 = iSOChronology43.minutes();
        org.joda.time.DateTimeField dateTimeField47 = iSOChronology43.weekyear();
        org.joda.time.DurationField durationField48 = iSOChronology43.centuries();
        org.joda.time.DateTimeField dateTimeField49 = iSOChronology43.centuryOfEra();
        org.joda.time.DurationField durationField50 = iSOChronology43.minutes();
        org.joda.time.DateTimeField dateTimeField51 = iSOChronology43.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField52 = iSOChronology43.clockhourOfHalfday();
        boolean boolean53 = charSet1.equals((java.lang.Object) iSOChronology43);
        org.joda.time.DateTimeField dateTimeField54 = iSOChronology43.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField55 = iSOChronology43.millisOfSecond();
        int int57 = dateTimeField55.getMaximumValue((long) 994);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet1);
        org.junit.Assert.assertNotNull(charItor2);
        org.junit.Assert.assertNotNull(arrayListArray4);
        org.junit.Assert.assertNotNull(languageRangeListArray5);
        org.junit.Assert.assertNotNull(languageRangeListArray6);
        org.junit.Assert.assertNotNull(dateTimeZone8);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 36000000 + "'", int10 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2022 + "'", int12 == 2022);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
// flaky:         org.junit.Assert.assertTrue("'" + int17 + "' != '" + 36000000 + "'", int17 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTimeZone22);
// flaky:         org.junit.Assert.assertTrue("'" + int24 + "' != '" + 36000000 + "'", int24 == 36000000);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet29);
        org.junit.Assert.assertNotNull(charItor30);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet32);
        org.junit.Assert.assertNotNull(charItor33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(dateTimeZone36);
// flaky:         org.junit.Assert.assertTrue("'" + int38 + "' != '" + 36000000 + "'", int38 == 36000000);
        org.junit.Assert.assertNotNull(timeZone39);
// flaky:         org.junit.Assert.assertEquals(timeZone39.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertNotNull(dateTimeZoneArray40);
        org.junit.Assert.assertNotNull(dateTimeZoneArray41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(iSOChronology43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(durationField46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(durationField48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(durationField50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 999 + "'", int57 == 999);
    }

    @Test
    public void test02436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02436");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime5 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.plusSeconds((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime5.minusWeeks((int) (byte) 10);
        java.util.TimeZone timeZone10 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        int int13 = dateTimeZone11.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime14 = org.joda.time.LocalDateTime.now(dateTimeZone11);
        org.joda.time.LocalDateTime localDateTime15 = org.joda.time.LocalDateTime.now(dateTimeZone11);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.plusSeconds((int) (short) 10);
        int int18 = localDateTime15.size();
        boolean boolean19 = localDateTime9.isBefore((org.joda.time.ReadablePartial) localDateTime15);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime15.withMillisOfSecond(52);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.plusMinutes(0);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime21.plusDays(53166088);
        int int26 = localDateTime25.size();
        org.joda.time.LocalDateTime localDateTime28 = localDateTime25.withYear(817);
        org.joda.time.LocalDateTime.Property property29 = localDateTime25.yearOfEra();
        int int30 = localDateTime25.getMinuteOfHour();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 36000000 + "'", int3 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone11);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 36000000 + "'", int13 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 4 + "'", int18 == 4);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 4 + "'", int26 == 4);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(property29);
// flaky:         org.junit.Assert.assertTrue("'" + int30 + "' != '" + 49 + "'", int30 == 49);
    }

    @Test
    public void test02437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02437");
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("DurationField[centuries]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=durationfield[centuries]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02438");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffset(100L);
        java.util.TimeZone timeZone4 = dateTimeZone1.toTimeZone();
        int int6 = dateTimeZone1.getStandardOffset((long) ' ');
        boolean boolean8 = dateTimeZone1.isStandardOffset((long) '4');
        org.joda.time.chrono.ISOChronology iSOChronology9 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology9.hourOfDay();
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray14 = iSOChronology9.get(readablePeriod11, 0L, 1644850005562L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 36000000 + "'", int3 == 36000000);
        org.junit.Assert.assertNotNull(timeZone4);
// flaky:         org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "GMT+10:00");
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 36000000 + "'", int6 == 36000000);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(iSOChronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
    }

    @Test
    public void test02439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02439");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.hourOfHalfday();
        java.lang.String str2 = iSOChronology0.toString();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.era();
        org.joda.time.DurationField durationField4 = iSOChronology0.centuries();
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        long long8 = iSOChronology0.add(readablePeriod5, (long) 2022, (int) (byte) 100);
        org.joda.time.DateTimeField dateTimeField9 = iSOChronology0.dayOfYear();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology0.year();
        long long13 = dateTimeField10.set(100L, "53166874");
        java.util.TimeZone timeZone15 = null;
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forTimeZone(timeZone15);
        int int18 = dateTimeZone16.getOffset(100L);
        long long20 = dateTimeZone16.nextTransition((long) (short) -1);
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime(3155695200000L, dateTimeZone16);
        org.joda.time.chrono.ISOChronology iSOChronology23 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField24 = iSOChronology23.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField25 = iSOChronology23.centuryOfEra();
        org.joda.time.DurationField durationField26 = iSOChronology23.centuries();
        org.joda.time.DurationField durationField27 = iSOChronology23.hours();
        java.util.TimeZone timeZone28 = null;
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forTimeZone(timeZone28);
        int int31 = dateTimeZone29.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime32 = org.joda.time.LocalDateTime.now(dateTimeZone29);
        int int33 = localDateTime32.getDayOfYear();
        org.joda.time.LocalDateTime localDateTime35 = localDateTime32.withYearOfEra(2022);
        long long37 = iSOChronology23.set((org.joda.time.ReadablePartial) localDateTime35, (long) 0);
        org.joda.time.DateTimeField dateTimeField38 = iSOChronology23.monthOfYear();
        org.joda.time.DateTimeField dateTimeField39 = iSOChronology23.clockhourOfDay();
        org.joda.time.tz.NameProvider nameProvider40 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.DateTimeZone.setNameProvider(nameProvider40);
        java.util.TimeZone timeZone42 = null;
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forTimeZone(timeZone42);
        int int45 = dateTimeZone43.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime46 = org.joda.time.LocalDateTime.now(dateTimeZone43);
        org.joda.time.ReadableInstant readableInstant47 = null;
        org.joda.time.DateTime dateTime48 = localDateTime46.toDateTime(readableInstant47);
        org.joda.time.Chronology chronology49 = dateTime48.getChronology();
        org.joda.time.DurationField durationField50 = chronology49.hours();
        org.joda.time.DurationField durationField51 = chronology49.months();
        org.joda.time.DateTimeField dateTimeField52 = chronology49.dayOfYear();
        java.util.TimeZone timeZone53 = null;
        org.joda.time.DateTimeZone dateTimeZone54 = org.joda.time.DateTimeZone.forTimeZone(timeZone53);
        int int56 = dateTimeZone54.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime57 = org.joda.time.LocalDateTime.now(dateTimeZone54);
        int[] intArray60 = new int[] { (short) 0, (short) 0 };
        int int61 = dateTimeField52.getMinimumValue((org.joda.time.ReadablePartial) localDateTime57, intArray60);
        java.lang.String str63 = dateTimeField52.getAsShortText((long) 53166088);
        java.util.TimeZone timeZone64 = null;
        org.joda.time.DateTimeZone dateTimeZone65 = org.joda.time.DateTimeZone.forTimeZone(timeZone64);
        int int67 = dateTimeZone65.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime68 = org.joda.time.LocalDateTime.now(dateTimeZone65);
        int int69 = localDateTime68.getWeekyear();
        org.joda.time.DurationFieldType durationFieldType70 = org.joda.time.DurationFieldType.days();
        org.joda.time.LocalDateTime localDateTime72 = localDateTime68.withFieldAdded(durationFieldType70, 53166088);
        java.util.Locale locale73 = java.util.Locale.ROOT;
        java.lang.String str74 = dateTimeField52.getAsShortText((org.joda.time.ReadablePartial) localDateTime72, locale73);
        java.lang.String str77 = nameProvider40.getShortName(locale73, "53169175", "+00:00");
        java.util.Locale locale78 = java.util.Locale.JAPANESE;
        java.lang.String str79 = locale78.getDisplayLanguage();
        java.util.Set<java.lang.String> strSet80 = locale78.getUnicodeLocaleKeys();
        java.lang.String str81 = locale78.getScript();
        java.lang.String str84 = nameProvider40.getShortName(locale78, "2022-02-21T14:46:09.691Z", "\uc77c\ubcf8\uc5b4");
        int int85 = dateTimeField39.getMaximumTextLength(locale78);
        java.lang.String str86 = dateTimeZone16.getName(0L, locale78);
        int int87 = dateTimeField10.getMaximumShortTextLength(locale78);
        java.util.Set<java.lang.Character> charSet88 = locale78.getExtensionKeys();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ISOChronology[+10:00]" + "'", str2, "ISOChronology[+10:00]");
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 2022L + "'", long8 == 2022L);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1677722323680000100L + "'", long13 == 1677722323680000100L);
        org.junit.Assert.assertNotNull(dateTimeZone16);
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + 36000000 + "'", int18 == 36000000);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-1L) + "'", long20 == (-1L));
        org.junit.Assert.assertNotNull(iSOChronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(dateTimeZone29);
// flaky:         org.junit.Assert.assertTrue("'" + int31 + "' != '" + 36000000 + "'", int31 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime32);
// flaky:         org.junit.Assert.assertTrue("'" + int33 + "' != '" + 53 + "'", int33 == 53);
        org.junit.Assert.assertNotNull(localDateTime35);
// flaky:         org.junit.Assert.assertTrue("'" + long37 + "' != '" + 1645454942113L + "'", long37 == 1645454942113L);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(nameProvider40);
        org.junit.Assert.assertNotNull(dateTimeZone43);
// flaky:         org.junit.Assert.assertTrue("'" + int45 + "' != '" + 36000000 + "'", int45 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(durationField50);
        org.junit.Assert.assertNotNull(durationField51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(dateTimeZone54);
// flaky:         org.junit.Assert.assertTrue("'" + int56 + "' != '" + 36000000 + "'", int56 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[0, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
// flaky:         org.junit.Assert.assertEquals("'" + str63 + "' != '" + "2" + "'", str63, "2");
        org.junit.Assert.assertNotNull(dateTimeZone65);
// flaky:         org.junit.Assert.assertTrue("'" + int67 + "' != '" + 36000000 + "'", int67 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 2022 + "'", int69 == 2022);
        org.junit.Assert.assertNotNull(durationFieldType70);
        org.junit.Assert.assertNotNull(localDateTime72);
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "");
// flaky:         org.junit.Assert.assertEquals("'" + str74 + "' != '" + "347" + "'", str74, "347");
        org.junit.Assert.assertNull(str77);
        org.junit.Assert.assertNotNull(locale78);
        org.junit.Assert.assertEquals(locale78.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "Japanisch" + "'", str79, "Japanisch");
        org.junit.Assert.assertNotNull(strSet80);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "" + "'", str81, "");
        org.junit.Assert.assertNull(str84);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 2 + "'", int85 == 2);
// flaky:         org.junit.Assert.assertEquals("'" + str86 + "' != '" + "+10:00" + "'", str86, "+10:00");
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 9 + "'", int87 == 9);
        org.junit.Assert.assertNotNull(charSet88);
    }

    @Test
    public void test02440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02440");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        int int5 = localDateTime4.getWeekyear();
        org.joda.time.LocalDateTime.Property property6 = localDateTime4.millisOfDay();
        int int7 = property6.get();
        org.joda.time.LocalDateTime localDateTime8 = property6.roundCeilingCopy();
        java.util.Locale locale9 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str10 = property6.getAsShortText(locale9);
        int int11 = property6.getMaximumValue();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 36000000 + "'", int3 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2022 + "'", int5 == 2022);
        org.junit.Assert.assertNotNull(property6);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2942233 + "'", int7 == 2942233);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "fr_CA");
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "2942233" + "'", str10, "2942233");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 86399999 + "'", int11 == 86399999);
    }

    @Test
    public void test02441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02441");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.hourOfHalfday();
        java.lang.String str2 = iSOChronology0.toString();
        org.joda.time.DurationField durationField3 = iSOChronology0.eras();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology0.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField6 = iSOChronology0.secondOfDay();
        org.joda.time.DateTimeField dateTimeField7 = iSOChronology0.secondOfDay();
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        long long11 = iSOChronology0.add(readablePeriod8, 53268219L, 309);
        java.lang.String str12 = iSOChronology0.toString();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ISOChronology[+10:00]" + "'", str2, "ISOChronology[+10:00]");
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 53268219L + "'", long11 == 53268219L);
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "ISOChronology[+10:00]" + "'", str12, "ISOChronology[+10:00]");
    }

    @Test
    public void test02442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02442");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.centuryOfEra();
        org.joda.time.DurationField durationField3 = iSOChronology0.seconds();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.clockhourOfDay();
        org.joda.time.Chronology chronology5 = iSOChronology0.withUTC();
        org.joda.time.DateTimeField dateTimeField6 = iSOChronology0.halfdayOfDay();
        java.util.TimeZone timeZone7 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forTimeZone(timeZone7);
        int int10 = dateTimeZone8.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now(dateTimeZone8);
        org.joda.time.LocalDateTime localDateTime12 = org.joda.time.LocalDateTime.now(dateTimeZone8);
        org.joda.time.Chronology chronology13 = iSOChronology0.withZone(dateTimeZone8);
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology0.hourOfDay();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology0.yearOfCentury();
        java.util.Locale.Category category17 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale18 = java.util.Locale.getDefault(category17);
        java.lang.String str19 = dateTimeField15.getAsText(49681, locale18);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeZone8);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 36000000 + "'", int10 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertTrue("'" + category17 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category17.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "de");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "49681" + "'", str19, "49681");
    }

    @Test
    public void test02443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02443");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.centuryOfEra();
        org.joda.time.DurationField durationField3 = iSOChronology0.seconds();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.clockhourOfDay();
        org.joda.time.Chronology chronology5 = iSOChronology0.withUTC();
        org.joda.time.DateTimeField dateTimeField6 = iSOChronology0.clockhourOfHalfday();
        org.joda.time.DurationField durationField7 = iSOChronology0.minutes();
        java.util.TimeZone timeZone8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        int int11 = dateTimeZone9.getOffset(100L);
        java.util.TimeZone timeZone12 = dateTimeZone9.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone12);
        org.joda.time.chrono.ISOChronology iSOChronology14 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone13);
        org.joda.time.LocalDateTime localDateTime15 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) iSOChronology14);
        org.joda.time.chrono.ISOChronology iSOChronology16 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology16.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology16.centuryOfEra();
        org.joda.time.DurationField durationField19 = iSOChronology16.seconds();
        org.joda.time.DateTimeField dateTimeField20 = iSOChronology16.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField21 = iSOChronology16.yearOfEra();
        org.joda.time.LocalDateTime localDateTime22 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) iSOChronology16);
        org.joda.time.LocalDateTime localDateTime23 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) iSOChronology16);
        int[] intArray25 = iSOChronology14.get((org.joda.time.ReadablePartial) localDateTime23, (long) 64123034);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime((java.lang.Object) iSOChronology0, (org.joda.time.Chronology) iSOChronology14);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: org.joda.time.chrono.ISOChronology");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeZone9);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 36000000 + "'", int11 == 36000000);
        org.junit.Assert.assertNotNull(timeZone12);
// flaky:         org.junit.Assert.assertEquals(timeZone12.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(iSOChronology14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(iSOChronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(intArray25);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1970, 1, 2, 13723034]");
    }

    @Test
    public void test02444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02444");
        org.joda.time.tz.Provider provider0 = org.joda.time.DateTimeZone.getProvider();
        java.util.Set<java.lang.String> strSet1 = provider0.getAvailableIDs();
        org.joda.time.DateTimeZone dateTimeZone3 = provider0.getZone("ISOChronology[UTC]");
        org.joda.time.DateTimeZone dateTimeZone5 = provider0.getZone("DateTimeField[dayOfMonth]");
        org.joda.time.DateTimeZone.setProvider(provider0);
        java.util.Set<java.lang.String> strSet7 = provider0.getAvailableIDs();
        org.joda.time.DateTimeZone dateTimeZone9 = provider0.getZone("\u65e5\u672c\u8a9e");
        org.joda.time.DateTimeZone.setProvider(provider0);
        org.junit.Assert.assertNotNull(provider0);
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNull(dateTimeZone3);
        org.junit.Assert.assertNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertNull(dateTimeZone9);
    }

    @Test
    public void test02445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02445");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray5 = localDateTime4.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.hourOfDay();
        int int7 = localDateTime4.get(dateTimeFieldType6);
        org.joda.time.LocalDateTime.Property property8 = localDateTime4.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime4.minusHours(20);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = localDateTime4.getFieldType((int) (byte) 1);
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.LocalDateTime localDateTime15 = localDateTime4.withDurationAdded(readableDuration13, 46);
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.weekyear();
        boolean boolean17 = localDateTime4.isSupported(dateTimeFieldType16);
        int int18 = localDateTime4.getHourOfDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime20 = localDateTime4.withMillisOfDay(1645454814);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1645454814 for millisOfDay must be in the range [0,86399999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 36000000 + "'", int3 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray5);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
    }

    @Test
    public void test02446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02446");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DurationFieldType durationFieldType1 = dateTimeFieldType0.getDurationType();
        java.lang.String str2 = durationFieldType1.getName();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(durationFieldType1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hours" + "'", str2, "hours");
    }

    @Test
    public void test02447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02447");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.DateTime dateTime6 = localDateTime4.toDateTime(readableInstant5);
        org.joda.time.Chronology chronology7 = dateTime6.getChronology();
        org.joda.time.DurationField durationField8 = chronology7.hours();
        java.lang.String str9 = chronology7.toString();
        org.joda.time.DateTimeField dateTimeField10 = chronology7.monthOfYear();
        long long13 = dateTimeField10.add(1645454890063L, 915);
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 36000000 + "'", int3 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(durationField8);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "ISOChronology[+10:00]" + "'", str9, "ISOChronology[+10:00]");
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 4051522090063L + "'", long13 == 4051522090063L);
    }

    @Test
    public void test02448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02448");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet1 = locale0.getExtensionKeys();
        java.util.Iterator<java.lang.Character> charItor2 = charSet1.iterator();
        java.util.Locale locale3 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet4 = locale3.getExtensionKeys();
        java.util.Iterator<java.lang.Character> charItor5 = charSet4.iterator();
        boolean boolean6 = charSet1.containsAll((java.util.Collection<java.lang.Character>) charSet4);
        int int7 = charSet4.size();
        java.util.Spliterator<java.lang.Character> charSpliterator8 = charSet4.spliterator();
        java.util.Locale locale9 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet10 = locale9.getExtensionKeys();
        java.util.Iterator<java.lang.Character> charItor11 = charSet10.iterator();
        java.util.Locale locale12 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet13 = locale12.getExtensionKeys();
        java.util.Iterator<java.lang.Character> charItor14 = charSet13.iterator();
        boolean boolean15 = charSet10.containsAll((java.util.Collection<java.lang.Character>) charSet13);
        java.util.Locale.Builder builder16 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder19 = builder16.setExtension('x', "jpn");
        java.util.Locale locale20 = java.util.Locale.GERMAN;
        java.util.Locale locale21 = java.util.Locale.GERMAN;
        java.lang.String str22 = locale20.getDisplayCountry(locale21);
        java.util.Locale locale23 = locale20.stripExtensions();
        java.lang.String str24 = locale20.getDisplayName();
        java.util.Locale.Builder builder25 = builder19.setLocale(locale20);
        java.util.Locale.Builder builder27 = builder25.setLanguageTag("Februar");
        boolean boolean28 = charSet13.remove((java.lang.Object) builder27);
        org.joda.time.chrono.ISOChronology iSOChronology29 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField30 = iSOChronology29.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField31 = iSOChronology29.centuryOfEra();
        org.joda.time.DurationField durationField32 = iSOChronology29.centuries();
        org.joda.time.DurationField durationField33 = iSOChronology29.hours();
        org.joda.time.DurationField durationField34 = iSOChronology29.years();
        org.joda.time.DurationField durationField35 = iSOChronology29.halfdays();
        long long38 = durationField35.getDifferenceAsLong(53190174L, (long) 2720);
        boolean boolean39 = charSet13.equals((java.lang.Object) durationField35);
        boolean boolean40 = charSet4.addAll((java.util.Collection<java.lang.Character>) charSet13);
        java.util.Iterator<java.lang.Character> charItor41 = charSet13.iterator();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet1);
        org.junit.Assert.assertNotNull(charItor2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet4);
        org.junit.Assert.assertNotNull(charItor5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(charSpliterator8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet10);
        org.junit.Assert.assertNotNull(charItor11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet13);
        org.junit.Assert.assertNotNull(charItor14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "de");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "de");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "de");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Deutsch" + "'", str24, "Deutsch");
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(iSOChronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 1L + "'", long38 == 1L);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(charItor41);
    }

    @Test
    public void test02449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02449");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.centuryOfEra();
        org.joda.time.DurationField durationField3 = iSOChronology0.centuries();
        org.joda.time.DurationField durationField4 = iSOChronology0.hours();
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        int int8 = dateTimeZone6.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime9 = org.joda.time.LocalDateTime.now(dateTimeZone6);
        int int10 = localDateTime9.getDayOfYear();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime9.withYearOfEra(2022);
        long long14 = iSOChronology0.set((org.joda.time.ReadablePartial) localDateTime12, (long) 0);
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology0.monthOfYear();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology0.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology0.halfdayOfDay();
        org.joda.time.DurationField durationField18 = iSOChronology0.millis();
        // The following exception was thrown during execution in test generation
        try {
            long long24 = iSOChronology0.getDateTimeMillis(432002832L, 53267393, 49694897, 53268301, 44);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 53267393 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 36000000 + "'", int8 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime9);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 53 + "'", int10 == 53);
        org.junit.Assert.assertNotNull(localDateTime12);
// flaky:         org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1645454942689L + "'", long14 == 1645454942689L);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
    }

    @Test
    public void test02450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02450");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.yearOfEra();
        org.joda.time.DurationField durationField3 = iSOChronology0.minutes();
        org.joda.time.DurationField durationField4 = iSOChronology0.months();
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology0.era();
        org.joda.time.DurationField durationField6 = iSOChronology0.halfdays();
        org.joda.time.DateTimeField dateTimeField7 = iSOChronology0.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField8 = iSOChronology0.dayOfYear();
        org.joda.time.DateTimeField dateTimeField9 = iSOChronology0.weekOfWeekyear();
        org.joda.time.ReadablePartial readablePartial10 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long12 = iSOChronology0.set(readablePartial10, 1645454850144L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
    }

    @Test
    public void test02451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02451");
        java.util.TimeZone timeZone1 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        int int4 = dateTimeZone2.getOffset(100L);
        long long6 = dateTimeZone2.nextTransition((long) (short) -1);
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime(3155695200000L, dateTimeZone2);
        org.joda.time.chrono.ISOChronology iSOChronology9 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology9.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology9.centuryOfEra();
        org.joda.time.DurationField durationField12 = iSOChronology9.centuries();
        org.joda.time.DurationField durationField13 = iSOChronology9.hours();
        java.util.TimeZone timeZone14 = null;
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forTimeZone(timeZone14);
        int int17 = dateTimeZone15.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime18 = org.joda.time.LocalDateTime.now(dateTimeZone15);
        int int19 = localDateTime18.getDayOfYear();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime18.withYearOfEra(2022);
        long long23 = iSOChronology9.set((org.joda.time.ReadablePartial) localDateTime21, (long) 0);
        org.joda.time.DateTimeField dateTimeField24 = iSOChronology9.monthOfYear();
        org.joda.time.DateTimeField dateTimeField25 = iSOChronology9.clockhourOfDay();
        org.joda.time.tz.NameProvider nameProvider26 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.DateTimeZone.setNameProvider(nameProvider26);
        java.util.TimeZone timeZone28 = null;
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forTimeZone(timeZone28);
        int int31 = dateTimeZone29.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime32 = org.joda.time.LocalDateTime.now(dateTimeZone29);
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.DateTime dateTime34 = localDateTime32.toDateTime(readableInstant33);
        org.joda.time.Chronology chronology35 = dateTime34.getChronology();
        org.joda.time.DurationField durationField36 = chronology35.hours();
        org.joda.time.DurationField durationField37 = chronology35.months();
        org.joda.time.DateTimeField dateTimeField38 = chronology35.dayOfYear();
        java.util.TimeZone timeZone39 = null;
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forTimeZone(timeZone39);
        int int42 = dateTimeZone40.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime43 = org.joda.time.LocalDateTime.now(dateTimeZone40);
        int[] intArray46 = new int[] { (short) 0, (short) 0 };
        int int47 = dateTimeField38.getMinimumValue((org.joda.time.ReadablePartial) localDateTime43, intArray46);
        java.lang.String str49 = dateTimeField38.getAsShortText((long) 53166088);
        java.util.TimeZone timeZone50 = null;
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.forTimeZone(timeZone50);
        int int53 = dateTimeZone51.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime54 = org.joda.time.LocalDateTime.now(dateTimeZone51);
        int int55 = localDateTime54.getWeekyear();
        org.joda.time.DurationFieldType durationFieldType56 = org.joda.time.DurationFieldType.days();
        org.joda.time.LocalDateTime localDateTime58 = localDateTime54.withFieldAdded(durationFieldType56, 53166088);
        java.util.Locale locale59 = java.util.Locale.ROOT;
        java.lang.String str60 = dateTimeField38.getAsShortText((org.joda.time.ReadablePartial) localDateTime58, locale59);
        java.lang.String str63 = nameProvider26.getShortName(locale59, "53169175", "+00:00");
        java.util.Locale locale64 = java.util.Locale.JAPANESE;
        java.lang.String str65 = locale64.getDisplayLanguage();
        java.util.Set<java.lang.String> strSet66 = locale64.getUnicodeLocaleKeys();
        java.lang.String str67 = locale64.getScript();
        java.lang.String str70 = nameProvider26.getShortName(locale64, "2022-02-21T14:46:09.691Z", "\uc77c\ubcf8\uc5b4");
        int int71 = dateTimeField25.getMaximumTextLength(locale64);
        java.lang.String str72 = dateTimeZone2.getName(0L, locale64);
        java.lang.String str73 = locale64.getDisplayScript();
        java.util.Locale.setDefault(locale64);
        java.util.Locale.setDefault(locale64);
        org.junit.Assert.assertNotNull(dateTimeZone2);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 36000000 + "'", int4 == 36000000);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertNotNull(iSOChronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
// flaky:         org.junit.Assert.assertTrue("'" + int17 + "' != '" + 36000000 + "'", int17 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime18);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 53 + "'", int19 == 53);
        org.junit.Assert.assertNotNull(localDateTime21);
// flaky:         org.junit.Assert.assertTrue("'" + long23 + "' != '" + 1645454942911L + "'", long23 == 1645454942911L);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(nameProvider26);
        org.junit.Assert.assertNotNull(dateTimeZone29);
// flaky:         org.junit.Assert.assertTrue("'" + int31 + "' != '" + 36000000 + "'", int31 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeZone40);
// flaky:         org.junit.Assert.assertTrue("'" + int42 + "' != '" + 36000000 + "'", int42 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[0, 0]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
// flaky:         org.junit.Assert.assertEquals("'" + str49 + "' != '" + "2" + "'", str49, "2");
        org.junit.Assert.assertNotNull(dateTimeZone51);
// flaky:         org.junit.Assert.assertTrue("'" + int53 + "' != '" + 36000000 + "'", int53 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 2022 + "'", int55 == 2022);
        org.junit.Assert.assertNotNull(durationFieldType56);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "");
// flaky:         org.junit.Assert.assertEquals("'" + str60 + "' != '" + "347" + "'", str60, "347");
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "Japanisch" + "'", str65, "Japanisch");
        org.junit.Assert.assertNotNull(strSet66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertNull(str70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 2 + "'", int71 == 2);
// flaky:         org.junit.Assert.assertEquals("'" + str72 + "' != '" + "+10:00" + "'", str72, "+10:00");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
    }

    @Test
    public void test02452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02452");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone.setDefault(dateTimeZone0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The datetime zone must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02453");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.centuryOfEra();
        org.joda.time.DurationField durationField3 = iSOChronology0.seconds();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology0.hourOfHalfday();
        java.util.TimeZone timeZone6 = null;
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forTimeZone(timeZone6);
        int int9 = dateTimeZone7.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime10 = org.joda.time.LocalDateTime.now(dateTimeZone7);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray11 = localDateTime10.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.hourOfDay();
        int int13 = localDateTime10.get(dateTimeFieldType12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime10.minusWeeks(1);
        long long17 = iSOChronology0.set((org.joda.time.ReadablePartial) localDateTime15, (long) 0);
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology0.secondOfDay();
        java.util.TimeZone timeZone19 = null;
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forTimeZone(timeZone19);
        int int22 = dateTimeZone20.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime23 = org.joda.time.LocalDateTime.now(dateTimeZone20);
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.DateTime dateTime25 = localDateTime23.toDateTime(readableInstant24);
        org.joda.time.Chronology chronology26 = dateTime25.getChronology();
        org.joda.time.DurationField durationField27 = chronology26.hours();
        org.joda.time.DurationField durationField28 = chronology26.months();
        org.joda.time.DateTimeField dateTimeField29 = chronology26.dayOfYear();
        java.util.TimeZone timeZone30 = null;
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forTimeZone(timeZone30);
        int int33 = dateTimeZone31.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime34 = org.joda.time.LocalDateTime.now(dateTimeZone31);
        int[] intArray37 = new int[] { (short) 0, (short) 0 };
        int int38 = dateTimeField29.getMinimumValue((org.joda.time.ReadablePartial) localDateTime34, intArray37);
        int int40 = dateTimeField29.getMinimumValue((long) 100);
        java.util.TimeZone timeZone41 = null;
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forTimeZone(timeZone41);
        int int44 = dateTimeZone42.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime45 = org.joda.time.LocalDateTime.now(dateTimeZone42);
        int int46 = localDateTime45.getWeekyear();
        org.joda.time.LocalDateTime.Property property47 = localDateTime45.minuteOfHour();
        int int48 = dateTimeField29.getMaximumValue((org.joda.time.ReadablePartial) localDateTime45);
        org.joda.time.LocalDateTime localDateTime50 = localDateTime45.withCenturyOfEra(1);
        org.joda.time.LocalDateTime.Property property51 = localDateTime45.weekyear();
        java.util.TimeZone timeZone52 = null;
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.forTimeZone(timeZone52);
        int int55 = dateTimeZone53.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime56 = org.joda.time.LocalDateTime.now(dateTimeZone53);
        org.joda.time.ReadableInstant readableInstant57 = null;
        org.joda.time.DateTime dateTime58 = localDateTime56.toDateTime(readableInstant57);
        java.util.TimeZone timeZone59 = null;
        org.joda.time.DateTimeZone dateTimeZone60 = org.joda.time.DateTimeZone.forTimeZone(timeZone59);
        int int62 = dateTimeZone60.getOffset(100L);
        org.joda.time.DateTime dateTime63 = localDateTime56.toDateTime(dateTimeZone60);
        org.joda.time.LocalDateTime.Property property64 = localDateTime56.monthOfYear();
        java.lang.String str65 = property64.getAsText();
        org.joda.time.LocalDateTime localDateTime66 = property64.roundCeilingCopy();
        int int67 = localDateTime45.compareTo((org.joda.time.ReadablePartial) localDateTime66);
        java.util.Locale.Builder builder68 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder71 = builder68.setExtension('x', "jpn");
        java.util.Locale locale72 = builder71.build();
        java.util.Locale.Builder builder73 = builder71.clear();
        java.util.Locale locale74 = builder73.build();
        java.util.Locale.Builder builder75 = builder73.clearExtensions();
        java.util.Locale.Category category76 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale77 = java.util.Locale.getDefault(category76);
        java.util.Locale.Builder builder78 = builder73.setLocale(locale77);
        java.lang.String str79 = dateTimeField18.getAsShortText((org.joda.time.ReadablePartial) localDateTime66, locale77);
        java.util.TimeZone timeZone80 = null;
        org.joda.time.DateTimeZone dateTimeZone81 = org.joda.time.DateTimeZone.forTimeZone(timeZone80);
        int int83 = dateTimeZone81.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime84 = org.joda.time.LocalDateTime.now(dateTimeZone81);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray85 = localDateTime84.getFieldTypes();
        java.lang.String str86 = localDateTime84.toString();
        int[] intArray88 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray90 = dateTimeField18.set((org.joda.time.ReadablePartial) localDateTime84, 53195125, intArray88, 2942233);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2942233 for secondOfDay must be in the range [0,86399]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeZone7);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 36000000 + "'", int9 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray11);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(localDateTime15);
// flaky:         org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1644850142976L + "'", long17 == 1644850142976L);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeZone20);
// flaky:         org.junit.Assert.assertTrue("'" + int22 + "' != '" + 36000000 + "'", int22 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeZone31);
// flaky:         org.junit.Assert.assertTrue("'" + int33 + "' != '" + 36000000 + "'", int33 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[0, 0]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(dateTimeZone42);
// flaky:         org.junit.Assert.assertTrue("'" + int44 + "' != '" + 36000000 + "'", int44 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2022 + "'", int46 == 2022);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 365 + "'", int48 == 365);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(dateTimeZone53);
// flaky:         org.junit.Assert.assertTrue("'" + int55 + "' != '" + 36000000 + "'", int55 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTimeZone60);
// flaky:         org.junit.Assert.assertTrue("'" + int62 + "' != '" + 36000000 + "'", int62 == 36000000);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(property64);
// flaky:         org.junit.Assert.assertEquals("'" + str65 + "' != '" + "\u6708" + "'", str65, "\u6708");
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-1) + "'", int67 == (-1));
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(locale72);
        org.junit.Assert.assertEquals(locale72.toString(), "");
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(locale74);
        org.junit.Assert.assertEquals(locale74.toString(), "");
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertTrue("'" + category76 + "' != '" + java.util.Locale.Category.FORMAT + "'", category76.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale77);
        org.junit.Assert.assertEquals(locale77.toString(), "ja");
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "0" + "'", str79, "0");
        org.junit.Assert.assertNotNull(dateTimeZone81);
// flaky:         org.junit.Assert.assertTrue("'" + int83 + "' != '" + 36000000 + "'", int83 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime84);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray85);
// flaky:         org.junit.Assert.assertEquals("'" + str86 + "' != '" + "2022-02-22T00:49:02.976" + "'", str86, "2022-02-22T00:49:02.976");
    }

    @Test
    public void test02454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02454");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        int int5 = localDateTime4.getWeekyear();
        org.joda.time.DurationFieldType durationFieldType6 = org.joda.time.DurationFieldType.days();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime4.withFieldAdded(durationFieldType6, 53166088);
        org.joda.time.chrono.ISOChronology iSOChronology9 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology9.hourOfHalfday();
        java.lang.String str11 = iSOChronology9.toString();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology9.era();
        org.joda.time.DurationField durationField13 = iSOChronology9.centuries();
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        long long17 = iSOChronology9.add(readablePeriod14, (long) 2022, (int) (byte) 100);
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology9.dayOfYear();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology9.year();
        boolean boolean20 = durationFieldType6.isSupported((org.joda.time.Chronology) iSOChronology9);
        org.joda.time.DurationField durationField21 = iSOChronology9.centuries();
        org.joda.time.DurationField durationField22 = iSOChronology9.weekyears();
        org.joda.time.DateTimeField dateTimeField23 = iSOChronology9.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField24 = iSOChronology9.era();
        org.joda.time.DateTimeField dateTimeField25 = iSOChronology9.clockhourOfHalfday();
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray29 = iSOChronology9.get(readablePeriod26, (long) 2836, 1645454914030L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 36000000 + "'", int3 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2022 + "'", int5 == 2022);
        org.junit.Assert.assertNotNull(durationFieldType6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(iSOChronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "ISOChronology[+10:00]" + "'", str11, "ISOChronology[+10:00]");
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 2022L + "'", long17 == 2022L);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
    }

    @Test
    public void test02455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02455");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.hourOfHalfday();
        java.lang.String str2 = iSOChronology0.toString();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.year();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.secondOfDay();
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology0.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField6 = iSOChronology0.millisOfDay();
        org.joda.time.DateTimeField dateTimeField7 = iSOChronology0.dayOfWeek();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ISOChronology[+10:00]" + "'", str2, "ISOChronology[+10:00]");
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
    }

    @Test
    public void test02456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02456");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        int int5 = localDateTime4.getWeekyear();
        org.joda.time.DurationFieldType durationFieldType6 = org.joda.time.DurationFieldType.days();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime4.withFieldAdded(durationFieldType6, 53166088);
        org.joda.time.chrono.ISOChronology iSOChronology9 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology9.hourOfHalfday();
        java.lang.String str11 = iSOChronology9.toString();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology9.era();
        org.joda.time.DurationField durationField13 = iSOChronology9.centuries();
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        long long17 = iSOChronology9.add(readablePeriod14, (long) 2022, (int) (byte) 100);
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology9.dayOfYear();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology9.year();
        boolean boolean20 = durationFieldType6.isSupported((org.joda.time.Chronology) iSOChronology9);
        org.joda.time.DurationField durationField21 = iSOChronology9.centuries();
        org.joda.time.DurationField durationField22 = iSOChronology9.weekyears();
        org.joda.time.DateTimeField dateTimeField23 = iSOChronology9.monthOfYear();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 36000000 + "'", int3 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2022 + "'", int5 == 2022);
        org.junit.Assert.assertNotNull(durationFieldType6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(iSOChronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "ISOChronology[+10:00]" + "'", str11, "ISOChronology[+10:00]");
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 2022L + "'", long17 == 2022L);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
    }

    @Test
    public void test02457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02457");
        org.joda.time.tz.NameProvider nameProvider0 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.DateTimeZone.setNameProvider(nameProvider0);
        java.util.TimeZone timeZone2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone2);
        int int5 = dateTimeZone3.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime6 = org.joda.time.LocalDateTime.now(dateTimeZone3);
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.DateTime dateTime8 = localDateTime6.toDateTime(readableInstant7);
        org.joda.time.Chronology chronology9 = dateTime8.getChronology();
        org.joda.time.DurationField durationField10 = chronology9.hours();
        org.joda.time.DurationField durationField11 = chronology9.months();
        org.joda.time.DateTimeField dateTimeField12 = chronology9.dayOfYear();
        java.util.TimeZone timeZone13 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forTimeZone(timeZone13);
        int int16 = dateTimeZone14.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime17 = org.joda.time.LocalDateTime.now(dateTimeZone14);
        int[] intArray20 = new int[] { (short) 0, (short) 0 };
        int int21 = dateTimeField12.getMinimumValue((org.joda.time.ReadablePartial) localDateTime17, intArray20);
        java.lang.String str23 = dateTimeField12.getAsShortText((long) 53166088);
        java.util.TimeZone timeZone24 = null;
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forTimeZone(timeZone24);
        int int27 = dateTimeZone25.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime28 = org.joda.time.LocalDateTime.now(dateTimeZone25);
        int int29 = localDateTime28.getWeekyear();
        org.joda.time.DurationFieldType durationFieldType30 = org.joda.time.DurationFieldType.days();
        org.joda.time.LocalDateTime localDateTime32 = localDateTime28.withFieldAdded(durationFieldType30, 53166088);
        java.util.Locale locale33 = java.util.Locale.ROOT;
        java.lang.String str34 = dateTimeField12.getAsShortText((org.joda.time.ReadablePartial) localDateTime32, locale33);
        java.lang.String str37 = nameProvider0.getShortName(locale33, "53169175", "+00:00");
        java.util.Locale locale38 = java.util.Locale.GERMAN;
        java.lang.String str39 = locale38.getDisplayScript();
        java.lang.String str42 = nameProvider0.getName(locale38, "era", "12");
        java.lang.String str43 = locale38.getCountry();
        org.junit.Assert.assertNotNull(nameProvider0);
        org.junit.Assert.assertNotNull(dateTimeZone3);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 36000000 + "'", int5 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
// flaky:         org.junit.Assert.assertTrue("'" + int16 + "' != '" + 36000000 + "'", int16 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[0, 0]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "2" + "'", str23, "2");
        org.junit.Assert.assertNotNull(dateTimeZone25);
// flaky:         org.junit.Assert.assertTrue("'" + int27 + "' != '" + 36000000 + "'", int27 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2022 + "'", int29 == 2022);
        org.junit.Assert.assertNotNull(durationFieldType30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "");
// flaky:         org.junit.Assert.assertEquals("'" + str34 + "' != '" + "347" + "'", str34, "347");
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "de");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
    }

    @Test
    public void test02458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02458");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        int int5 = localDateTime4.getWeekyear();
        org.joda.time.LocalDateTime.Property property6 = localDateTime4.millisOfDay();
        java.util.TimeZone timeZone7 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forTimeZone(timeZone7);
        int int10 = dateTimeZone8.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now(dateTimeZone8);
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.DateTime dateTime13 = localDateTime11.toDateTime(readableInstant12);
        java.util.TimeZone timeZone14 = null;
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forTimeZone(timeZone14);
        int int17 = dateTimeZone15.getOffset(100L);
        org.joda.time.DateTime dateTime18 = localDateTime11.toDateTime(dateTimeZone15);
        int int19 = property6.compareTo((org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.LocalDateTime localDateTime20 = property6.roundHalfEvenCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.LocalDateTime.Property property22 = localDateTime20.property(dateTimeFieldType21);
        java.util.TimeZone timeZone23 = null;
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forTimeZone(timeZone23);
        int int26 = dateTimeZone24.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime27 = org.joda.time.LocalDateTime.now(dateTimeZone24);
        int int28 = localDateTime27.getWeekyear();
        org.joda.time.LocalDateTime.Property property29 = localDateTime27.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime31 = localDateTime27.minusMillis(2022);
        org.joda.time.ReadablePeriod readablePeriod32 = null;
        org.joda.time.LocalDateTime localDateTime33 = localDateTime31.plus(readablePeriod32);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime33.withCenturyOfEra((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime20.withFields((org.joda.time.ReadablePartial) localDateTime35);
        int int37 = localDateTime20.getWeekyear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime39 = localDateTime20.withDayOfWeek(365);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 365 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 36000000 + "'", int3 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2022 + "'", int5 == 2022);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTimeZone8);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 36000000 + "'", int10 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
// flaky:         org.junit.Assert.assertTrue("'" + int17 + "' != '" + 36000000 + "'", int17 == 36000000);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTimeZone24);
// flaky:         org.junit.Assert.assertTrue("'" + int26 + "' != '" + 36000000 + "'", int26 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2022 + "'", int28 == 2022);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2022 + "'", int37 == 2022);
    }

    @Test
    public void test02459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02459");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet1 = locale0.getExtensionKeys();
        java.util.Iterator<java.lang.Character> charItor2 = charSet1.iterator();
        java.util.ArrayList[] arrayListArray4 = new java.util.ArrayList[0];
        @SuppressWarnings("unchecked")
        java.util.ArrayList<java.util.Locale.LanguageRange>[] languageRangeListArray5 = (java.util.ArrayList<java.util.Locale.LanguageRange>[]) arrayListArray4;
        java.util.ArrayList<java.util.Locale.LanguageRange>[] languageRangeListArray6 = charSet1.toArray((java.util.ArrayList<java.util.Locale.LanguageRange>[]) arrayListArray4);
        java.util.TimeZone timeZone7 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forTimeZone(timeZone7);
        int int10 = dateTimeZone8.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now(dateTimeZone8);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray12 = localDateTime11.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.hourOfDay();
        int int14 = localDateTime11.get(dateTimeFieldType13);
        org.joda.time.LocalDateTime.Property property15 = localDateTime11.dayOfWeek();
        org.joda.time.LocalDateTime.Property property16 = localDateTime11.weekOfWeekyear();
        boolean boolean17 = charSet1.remove((java.lang.Object) localDateTime11);
        java.lang.Object[] objArray18 = charSet1.toArray();
        java.util.stream.Stream<java.lang.Character> charStream19 = charSet1.stream();
        java.util.TimeZone timeZone20 = null;
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forTimeZone(timeZone20);
        int int23 = dateTimeZone21.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime24 = org.joda.time.LocalDateTime.now(dateTimeZone21);
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.DateTime dateTime26 = localDateTime24.toDateTime(readableInstant25);
        java.util.TimeZone timeZone27 = null;
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forTimeZone(timeZone27);
        int int30 = dateTimeZone28.getOffset(100L);
        org.joda.time.DateTime dateTime31 = localDateTime24.toDateTime(dateTimeZone28);
        org.joda.time.LocalDateTime.Property property32 = localDateTime24.monthOfYear();
        java.util.TimeZone timeZone33 = null;
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forTimeZone(timeZone33);
        int int36 = dateTimeZone34.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime37 = org.joda.time.LocalDateTime.now(dateTimeZone34);
        int int38 = localDateTime37.getWeekyear();
        org.joda.time.LocalDateTime.Property property39 = localDateTime37.millisOfDay();
        java.util.TimeZone timeZone40 = null;
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forTimeZone(timeZone40);
        int int43 = dateTimeZone41.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime44 = org.joda.time.LocalDateTime.now(dateTimeZone41);
        org.joda.time.ReadableInstant readableInstant45 = null;
        org.joda.time.DateTime dateTime46 = localDateTime44.toDateTime(readableInstant45);
        java.util.TimeZone timeZone47 = null;
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.forTimeZone(timeZone47);
        int int50 = dateTimeZone48.getOffset(100L);
        org.joda.time.DateTime dateTime51 = localDateTime44.toDateTime(dateTimeZone48);
        int int52 = property39.compareTo((org.joda.time.ReadableInstant) dateTime51);
        org.joda.time.LocalDateTime localDateTime53 = property39.roundHalfEvenCopy();
        boolean boolean54 = localDateTime24.isAfter((org.joda.time.ReadablePartial) localDateTime53);
        java.util.Date date55 = localDateTime24.toDate();
        org.joda.time.LocalDateTime localDateTime56 = org.joda.time.LocalDateTime.fromDateFields(date55);
        org.joda.time.LocalDateTime localDateTime57 = org.joda.time.LocalDateTime.fromDateFields(date55);
        org.joda.time.LocalDateTime localDateTime58 = org.joda.time.LocalDateTime.fromDateFields(date55);
        boolean boolean59 = charSet1.remove((java.lang.Object) localDateTime58);
        boolean boolean61 = charSet1.contains((java.lang.Object) 2835142);
        java.util.stream.Stream<java.lang.Character> charStream62 = charSet1.parallelStream();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet1);
        org.junit.Assert.assertNotNull(charItor2);
        org.junit.Assert.assertNotNull(arrayListArray4);
        org.junit.Assert.assertNotNull(languageRangeListArray5);
        org.junit.Assert.assertNotNull(languageRangeListArray6);
        org.junit.Assert.assertNotNull(dateTimeZone8);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 36000000 + "'", int10 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray12);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[]");
        org.junit.Assert.assertNotNull(charStream19);
        org.junit.Assert.assertNotNull(dateTimeZone21);
// flaky:         org.junit.Assert.assertTrue("'" + int23 + "' != '" + 36000000 + "'", int23 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTimeZone28);
// flaky:         org.junit.Assert.assertTrue("'" + int30 + "' != '" + 36000000 + "'", int30 == 36000000);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(dateTimeZone34);
// flaky:         org.junit.Assert.assertTrue("'" + int36 + "' != '" + 36000000 + "'", int36 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2022 + "'", int38 == 2022);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(dateTimeZone41);
// flaky:         org.junit.Assert.assertTrue("'" + int43 + "' != '" + 36000000 + "'", int43 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTimeZone48);
// flaky:         org.junit.Assert.assertTrue("'" + int50 + "' != '" + 36000000 + "'", int50 == 36000000);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(date55);
// flaky:         org.junit.Assert.assertEquals(date55.toString(), "Tue Feb 22 00:49:03 GMT+10:00 2022");
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(charStream62);
    }

    @Test
    public void test02460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02460");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.centuryOfEra();
        org.joda.time.DurationField durationField3 = iSOChronology0.centuries();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.millisOfDay();
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        int int8 = dateTimeZone6.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime9 = org.joda.time.LocalDateTime.now(dateTimeZone6);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.DateTime dateTime11 = localDateTime9.toDateTime(readableInstant10);
        java.util.TimeZone timeZone12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone12);
        int int15 = dateTimeZone13.getOffset(100L);
        org.joda.time.DateTime dateTime16 = localDateTime9.toDateTime(dateTimeZone13);
        org.joda.time.LocalDateTime.Property property17 = localDateTime9.monthOfYear();
        java.util.TimeZone timeZone18 = null;
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forTimeZone(timeZone18);
        int int21 = dateTimeZone19.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime22 = org.joda.time.LocalDateTime.now(dateTimeZone19);
        int int23 = localDateTime22.getWeekyear();
        org.joda.time.LocalDateTime.Property property24 = localDateTime22.millisOfDay();
        java.util.TimeZone timeZone25 = null;
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forTimeZone(timeZone25);
        int int28 = dateTimeZone26.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime29 = org.joda.time.LocalDateTime.now(dateTimeZone26);
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.DateTime dateTime31 = localDateTime29.toDateTime(readableInstant30);
        java.util.TimeZone timeZone32 = null;
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forTimeZone(timeZone32);
        int int35 = dateTimeZone33.getOffset(100L);
        org.joda.time.DateTime dateTime36 = localDateTime29.toDateTime(dateTimeZone33);
        int int37 = property24.compareTo((org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.LocalDateTime localDateTime38 = property24.roundHalfEvenCopy();
        boolean boolean39 = localDateTime9.isAfter((org.joda.time.ReadablePartial) localDateTime38);
        java.util.Locale locale40 = java.util.Locale.UK;
        java.lang.String str41 = dateTimeField4.getAsText((org.joda.time.ReadablePartial) localDateTime38, locale40);
        java.lang.String str42 = locale40.getScript();
        java.lang.Class<?> wildcardClass43 = locale40.getClass();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 36000000 + "'", int8 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTimeZone13);
// flaky:         org.junit.Assert.assertTrue("'" + int15 + "' != '" + 36000000 + "'", int15 == 36000000);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTimeZone19);
// flaky:         org.junit.Assert.assertTrue("'" + int21 + "' != '" + 36000000 + "'", int21 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2022 + "'", int23 == 2022);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTimeZone26);
// flaky:         org.junit.Assert.assertTrue("'" + int28 + "' != '" + 36000000 + "'", int28 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTimeZone33);
// flaky:         org.junit.Assert.assertTrue("'" + int35 + "' != '" + 36000000 + "'", int35 == 36000000);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "en_GB");
// flaky:         org.junit.Assert.assertEquals("'" + str41 + "' != '" + "2943432" + "'", str41, "2943432");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(wildcardClass43);
    }

    @Test
    public void test02461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02461");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.DateTime dateTime6 = localDateTime4.toDateTime(readableInstant5);
        java.util.TimeZone timeZone7 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forTimeZone(timeZone7);
        int int10 = dateTimeZone8.getOffset(100L);
        org.joda.time.DateTime dateTime11 = localDateTime4.toDateTime(dateTimeZone8);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime4.plusMinutes((-1));
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.hourOfDay();
        org.joda.time.LocalDateTime localDateTime15 = property14.roundCeilingCopy();
        org.joda.time.LocalDateTime localDateTime17 = property14.addToCopy(28800008L);
        org.joda.time.LocalDateTime.Property property18 = localDateTime17.era();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 36000000 + "'", int3 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTimeZone8);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 36000000 + "'", int10 == 36000000);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(property18);
    }

    @Test
    public void test02462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02462");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.weekOfWeekyear();
        java.util.TimeZone timeZone2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone2);
        java.lang.String str5 = dateTimeZone3.getName(31556995199999L);
        org.joda.time.Chronology chronology6 = iSOChronology0.withZone(dateTimeZone3);
        org.joda.time.DateTimeField dateTimeField7 = iSOChronology0.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField8 = iSOChronology0.dayOfWeek();
        org.joda.time.DurationField durationField9 = iSOChronology0.seconds();
        org.joda.time.DurationField durationField10 = iSOChronology0.days();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology0.weekyearOfCentury();
        org.joda.time.DurationField durationField12 = dateTimeField11.getDurationField();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeZone3);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+10:00" + "'", str5, "+10:00");
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
    }

    @Test
    public void test02463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02463");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.DateTime dateTime6 = localDateTime4.toDateTime(readableInstant5);
        java.util.TimeZone timeZone7 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forTimeZone(timeZone7);
        int int10 = dateTimeZone8.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now(dateTimeZone8);
        org.joda.time.LocalDateTime localDateTime12 = org.joda.time.LocalDateTime.now(dateTimeZone8);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.minusYears(2022);
        org.joda.time.LocalDateTime.Property property15 = localDateTime14.era();
        int int16 = localDateTime4.compareTo((org.joda.time.ReadablePartial) localDateTime14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int18 = localDateTime4.get(dateTimeFieldType17);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime4.plusSeconds(2805);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.plus(readablePeriod21);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.chrono.ISOChronology iSOChronology24 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField25 = iSOChronology24.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField26 = iSOChronology24.centuryOfEra();
        org.joda.time.DurationField durationField27 = iSOChronology24.centuries();
        org.joda.time.DurationField durationField28 = iSOChronology24.hours();
        boolean boolean29 = dateTimeFieldType23.isSupported((org.joda.time.Chronology) iSOChronology24);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime22.withField(dateTimeFieldType23, 2833465);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType33 = localDateTime22.getFieldType(2935067);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 2935067");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 36000000 + "'", int3 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTimeZone8);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 36000000 + "'", int10 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2943510 + "'", int18 == 2943510);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertNotNull(iSOChronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(localDateTime31);
    }

    @Test
    public void test02464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02464");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        int int5 = localDateTime4.getWeekyear();
        org.joda.time.LocalDateTime.Property property6 = localDateTime4.millisOfDay();
        java.util.Locale locale7 = java.util.Locale.GERMAN;
        java.util.Locale locale8 = java.util.Locale.GERMAN;
        java.lang.String str9 = locale7.getDisplayCountry(locale8);
        java.util.Locale locale10 = locale7.stripExtensions();
        int int11 = property6.getMaximumShortTextLength(locale7);
        org.joda.time.Interval interval12 = property6.toInterval();
        org.joda.time.LocalDateTime localDateTime14 = property6.setCopy(1);
        org.joda.time.LocalDateTime.Property property15 = localDateTime14.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime14.withMillisOfDay((int) (byte) 10);
        int int18 = localDateTime17.getMinuteOfHour();
        java.util.Date date19 = localDateTime17.toDate();
        java.lang.String str20 = localDateTime17.toString();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 36000000 + "'", int3 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2022 + "'", int5 == 2022);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "de");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "de");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "de");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 8 + "'", int11 == 8);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(date19);
// flaky:         org.junit.Assert.assertEquals(date19.toString(), "Tue Feb 22 00:00:00 GMT+10:00 2022");
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "2022-02-22T00:00:00.010" + "'", str20, "2022-02-22T00:00:00.010");
    }

    @Test
    public void test02465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02465");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(2841311, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Offset is too large");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02466");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffset(100L);
        java.util.TimeZone timeZone4 = dateTimeZone1.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forTimeZone(timeZone4);
        java.lang.String str7 = dateTimeZone5.getNameKey((long) '4');
        java.util.TimeZone timeZone8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        int int11 = dateTimeZone9.getOffset(100L);
        java.util.TimeZone timeZone12 = dateTimeZone9.toTimeZone();
        int int14 = dateTimeZone9.getStandardOffset((long) ' ');
        boolean boolean16 = dateTimeZone9.isStandardOffset((long) '4');
        java.lang.String str18 = dateTimeZone9.getShortName((long) (-292275054));
        int int20 = dateTimeZone9.getOffsetFromLocal(0L);
        long long22 = dateTimeZone5.getMillisKeepLocal(dateTimeZone9, 1645454787698L);
        int int24 = dateTimeZone5.getStandardOffset(38469L);
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 36000000 + "'", int3 == 36000000);
        org.junit.Assert.assertNotNull(timeZone4);
// flaky:         org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertNotNull(dateTimeZone5);
// flaky:         org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(dateTimeZone9);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 36000000 + "'", int11 == 36000000);
        org.junit.Assert.assertNotNull(timeZone12);
// flaky:         org.junit.Assert.assertEquals(timeZone12.getDisplayName(), "GMT+10:00");
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 36000000 + "'", int14 == 36000000);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+10:00" + "'", str18, "+10:00");
// flaky:         org.junit.Assert.assertTrue("'" + int20 + "' != '" + 36000000 + "'", int20 == 36000000);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1645454787698L + "'", long22 == 1645454787698L);
// flaky:         org.junit.Assert.assertTrue("'" + int24 + "' != '" + 36000000 + "'", int24 == 36000000);
    }

    @Test
    public void test02467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02467");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("2840641");
        // The following exception was thrown during execution in test generation
        try {
            int int8 = timeZone1.getOffset(49686371, 188, (int) (byte) 100, 2811499, (int) (byte) 1, 2935755);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeZone1);
// flaky:         org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "\uadf8\ub9ac\ub2c8\uce58\ud45c\uc900\uc2dc");
    }

    @Test
    public void test02468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02468");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.yearOfEra();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.weekyearOfCentury();
        java.lang.String str4 = iSOChronology0.toString();
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology0.clockhourOfHalfday();
        java.lang.String str6 = iSOChronology0.toString();
        org.joda.time.DateTimeField dateTimeField7 = iSOChronology0.dayOfMonth();
        java.util.Locale locale8 = java.util.Locale.KOREAN;
        java.lang.String str9 = locale8.getDisplayScript();
        int int10 = dateTimeField7.getMaximumShortTextLength(locale8);
        java.lang.String str11 = locale8.getCountry();
        boolean boolean12 = locale8.hasExtensions();
        java.util.Locale.setDefault(locale8);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "ISOChronology[+10:00]" + "'", str4, "ISOChronology[+10:00]");
        org.junit.Assert.assertNotNull(dateTimeField5);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "ISOChronology[+10:00]" + "'", str6, "ISOChronology[+10:00]");
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test02469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02469");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        java.util.TimeZone timeZone1 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        int int4 = dateTimeZone2.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime5 = org.joda.time.LocalDateTime.now(dateTimeZone2);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray6 = localDateTime5.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.hourOfDay();
        int int8 = localDateTime5.get(dateTimeFieldType7);
        org.joda.time.LocalDateTime.Property property9 = localDateTime5.dayOfWeek();
        boolean boolean10 = localDateTime0.isEqual((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.LocalDateTime.Property property11 = localDateTime5.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime12 = property11.roundHalfCeilingCopy();
        java.util.TimeZone timeZone13 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forTimeZone(timeZone13);
        int int16 = dateTimeZone14.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime17 = org.joda.time.LocalDateTime.now(dateTimeZone14);
        org.joda.time.LocalDateTime localDateTime18 = org.joda.time.LocalDateTime.now(dateTimeZone14);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.minusMinutes((int) ' ');
        int int21 = property11.compareTo((org.joda.time.ReadablePartial) localDateTime20);
        int int22 = property11.getMaximumValueOverall();
        org.joda.time.LocalDateTime localDateTime23 = property11.getLocalDateTime();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime25 = property11.setCopy(2806);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2806 for dayOfMonth must be in the range [1,28]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(dateTimeZone2);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 36000000 + "'", int4 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
// flaky:         org.junit.Assert.assertTrue("'" + int16 + "' != '" + 36000000 + "'", int16 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 31 + "'", int22 == 31);
        org.junit.Assert.assertNotNull(localDateTime23);
    }

    @Test
    public void test02470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02470");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.millis();
        java.lang.String str1 = durationFieldType0.getName();
        java.lang.String str2 = durationFieldType0.getName();
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "millis" + "'", str1, "millis");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "millis" + "'", str2, "millis");
    }

    @Test
    public void test02471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02471");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.hourOfHalfday();
        org.joda.time.DurationField durationField2 = iSOChronology0.hours();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.secondOfDay();
        org.joda.time.DurationField durationField4 = iSOChronology0.centuries();
        org.joda.time.DurationField durationField5 = iSOChronology0.centuries();
        org.joda.time.DateTimeField dateTimeField6 = iSOChronology0.era();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
    }

    @Test
    public void test02472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02472");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.yearOfEra();
        java.util.TimeZone timeZone4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forTimeZone(timeZone4);
        java.lang.String str7 = dateTimeZone5.getName(31556995199999L);
        int int9 = dateTimeZone5.getOffset((long) 'x');
        org.joda.time.Chronology chronology10 = iSOChronology0.withZone(dateTimeZone5);
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology0.secondOfMinute();
        org.joda.time.DurationField durationField12 = iSOChronology0.weeks();
        int int15 = durationField12.getDifference(4292549286122022L, (-3599996L));
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeZone5);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+10:00" + "'", str7, "+10:00");
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 36000000 + "'", int9 == 36000000);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 7097469 + "'", int15 == 7097469);
    }

    @Test
    public void test02473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02473");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.yearOfEra();
        org.joda.time.DurationField durationField3 = iSOChronology0.minutes();
        org.joda.time.DurationField durationField4 = iSOChronology0.months();
        org.joda.time.DurationField durationField5 = iSOChronology0.weekyears();
        org.joda.time.DateTimeField dateTimeField6 = iSOChronology0.halfdayOfDay();
        org.joda.time.DurationField durationField7 = iSOChronology0.years();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
    }

    @Test
    public void test02474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02474");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.centuryOfEra();
        org.joda.time.DurationField durationField3 = iSOChronology0.eras();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology0.year();
        int int8 = dateTimeField5.getDifference((long) (byte) -1, (long) ' ');
        org.joda.time.tz.NameProvider nameProvider9 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale10 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet11 = locale10.getExtensionKeys();
        java.lang.String str14 = nameProvider9.getShortName(locale10, "Koordinierte Universalzeit", "+00:00");
        java.util.Locale locale15 = java.util.Locale.GERMAN;
        java.lang.String str18 = nameProvider9.getShortName(locale15, "53167803", "jpn");
        int int19 = dateTimeField5.getMaximumTextLength(locale15);
        java.util.Locale locale20 = java.util.Locale.JAPANESE;
        java.lang.String str21 = locale20.getDisplayLanguage();
        java.lang.String str22 = locale20.getISO3Language();
        java.util.Locale locale23 = java.util.Locale.CHINA;
        java.lang.String str24 = locale20.getDisplayLanguage(locale23);
        org.joda.time.tz.NameProvider nameProvider25 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale26 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet27 = locale26.getExtensionKeys();
        java.lang.String str30 = nameProvider25.getShortName(locale26, "Koordinierte Universalzeit", "+00:00");
        java.util.Locale locale31 = java.util.Locale.KOREAN;
        java.lang.String str32 = locale26.getDisplayName(locale31);
        java.lang.String str33 = locale23.getDisplayVariant(locale31);
        org.joda.time.chrono.ISOChronology iSOChronology34 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField35 = iSOChronology34.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField36 = iSOChronology34.yearOfEra();
        java.util.TimeZone timeZone37 = null;
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forTimeZone(timeZone37);
        int int40 = dateTimeZone38.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime41 = org.joda.time.LocalDateTime.now(dateTimeZone38);
        org.joda.time.LocalDateTime localDateTime42 = org.joda.time.LocalDateTime.now(dateTimeZone38);
        org.joda.time.LocalDateTime localDateTime44 = localDateTime42.plusSeconds((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime46 = localDateTime42.minusWeeks((int) (byte) 10);
        java.util.TimeZone timeZone47 = null;
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.forTimeZone(timeZone47);
        int int50 = dateTimeZone48.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime51 = org.joda.time.LocalDateTime.now(dateTimeZone48);
        org.joda.time.LocalDateTime localDateTime52 = org.joda.time.LocalDateTime.now(dateTimeZone48);
        org.joda.time.LocalDateTime localDateTime54 = localDateTime52.plusSeconds((int) (short) 10);
        int int55 = localDateTime52.size();
        boolean boolean56 = localDateTime46.isBefore((org.joda.time.ReadablePartial) localDateTime52);
        org.joda.time.LocalDateTime localDateTime58 = localDateTime52.withMillisOfSecond(52);
        org.joda.time.LocalDateTime localDateTime60 = localDateTime58.plusMinutes(0);
        org.joda.time.LocalDateTime localDateTime62 = localDateTime58.plusDays(53166088);
        int int63 = localDateTime62.getDayOfYear();
        org.joda.time.chrono.ISOChronology iSOChronology64 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField65 = iSOChronology64.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField66 = iSOChronology64.yearOfEra();
        org.joda.time.DateTimeField dateTimeField67 = iSOChronology64.weekyearOfCentury();
        java.lang.String str68 = iSOChronology64.toString();
        org.joda.time.DateTimeField dateTimeField69 = iSOChronology64.clockhourOfHalfday();
        java.lang.String str70 = iSOChronology64.toString();
        org.joda.time.DateTimeField dateTimeField71 = iSOChronology64.dayOfMonth();
        java.util.Locale locale72 = java.util.Locale.KOREAN;
        java.lang.String str73 = locale72.getDisplayScript();
        int int74 = dateTimeField71.getMaximumShortTextLength(locale72);
        java.lang.String str75 = dateTimeField36.getAsShortText((org.joda.time.ReadablePartial) localDateTime62, locale72);
        java.lang.String str76 = locale31.getDisplayLanguage(locale72);
        java.lang.String str77 = locale15.getDisplayName(locale72);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(nameProvider9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet11);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "de");
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 9 + "'", int19 == 9);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "\uc77c\ubcf8\uc5b4" + "'", str21, "\uc77c\ubcf8\uc5b4");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "jpn" + "'", str22, "jpn");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "\u65e5\u6587" + "'", str24, "\u65e5\u6587");
        org.junit.Assert.assertNotNull(nameProvider25);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet27);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str32, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(iSOChronology34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeZone38);
// flaky:         org.junit.Assert.assertTrue("'" + int40 + "' != '" + 36000000 + "'", int40 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(dateTimeZone48);
// flaky:         org.junit.Assert.assertTrue("'" + int50 + "' != '" + 36000000 + "'", int50 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 4 + "'", int55 == 4);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(localDateTime62);
// flaky:         org.junit.Assert.assertTrue("'" + int63 + "' != '" + 347 + "'", int63 == 347);
        org.junit.Assert.assertNotNull(iSOChronology64);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertNotNull(dateTimeField67);
// flaky:         org.junit.Assert.assertEquals("'" + str68 + "' != '" + "ISOChronology[+10:00]" + "'", str68, "ISOChronology[+10:00]");
        org.junit.Assert.assertNotNull(dateTimeField69);
// flaky:         org.junit.Assert.assertEquals("'" + str70 + "' != '" + "ISOChronology[+10:00]" + "'", str70, "ISOChronology[+10:00]");
        org.junit.Assert.assertNotNull(dateTimeField71);
        org.junit.Assert.assertNotNull(locale72);
        org.junit.Assert.assertEquals(locale72.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 2 + "'", int74 == 2);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "147585" + "'", str75, "147585");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str76, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "\ub3c5\uc77c\uc5b4" + "'", str77, "\ub3c5\uc77c\uc5b4");
    }

    @Test
    public void test02475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02475");
        java.util.TimeZone timeZone1 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        int int4 = dateTimeZone2.getOffset(100L);
        java.util.TimeZone timeZone5 = dateTimeZone2.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        int int8 = dateTimeZone6.getOffset(0L);
        int int10 = dateTimeZone6.getOffset((long) 99);
        java.util.TimeZone timeZone11 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        int int14 = dateTimeZone12.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime15 = org.joda.time.LocalDateTime.now(dateTimeZone12);
        org.joda.time.LocalDateTime localDateTime16 = org.joda.time.LocalDateTime.now(dateTimeZone12);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.plusSeconds((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime16.minusWeeks((int) (byte) 10);
        java.util.TimeZone timeZone21 = null;
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forTimeZone(timeZone21);
        int int24 = dateTimeZone22.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime25 = org.joda.time.LocalDateTime.now(dateTimeZone22);
        org.joda.time.LocalDateTime localDateTime26 = org.joda.time.LocalDateTime.now(dateTimeZone22);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.plusSeconds((int) (short) 10);
        int int29 = localDateTime26.size();
        boolean boolean30 = localDateTime20.isBefore((org.joda.time.ReadablePartial) localDateTime26);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime26.withMillisOfSecond(52);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime32.plusMinutes(0);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime32.plusDays(53166088);
        int int37 = localDateTime36.size();
        boolean boolean38 = dateTimeZone6.isLocalDateTimeGap(localDateTime36);
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime(1644849998807L, dateTimeZone6);
        java.util.Locale locale41 = null;
        java.lang.String str42 = dateTimeZone6.getShortName(1644850040886L, locale41);
        long long45 = dateTimeZone6.convertLocalToUTC(0L, false);
        org.junit.Assert.assertNotNull(dateTimeZone2);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 36000000 + "'", int4 == 36000000);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 36000000 + "'", int8 == 36000000);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 36000000 + "'", int10 == 36000000);
        org.junit.Assert.assertNotNull(dateTimeZone12);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 36000000 + "'", int14 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(dateTimeZone22);
// flaky:         org.junit.Assert.assertTrue("'" + int24 + "' != '" + 36000000 + "'", int24 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 4 + "'", int29 == 4);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 4 + "'", int37 == 4);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str42 + "' != '" + "+10:00" + "'", str42, "+10:00");
// flaky:         org.junit.Assert.assertTrue("'" + long45 + "' != '" + (-36000000L) + "'", long45 == (-36000000L));
    }

    @Test
    public void test02476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02476");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        long long6 = iSOChronology0.add(readablePeriod3, (long) 100, 11);
        org.joda.time.DateTimeField dateTimeField7 = iSOChronology0.weekyear();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) -1);
        long long11 = dateTimeZone9.convertUTCToLocal((long) 4);
        org.joda.time.Chronology chronology12 = iSOChronology0.withZone(dateTimeZone9);
        long long15 = dateTimeZone9.adjustOffset((long) 2818, false);
        long long17 = dateTimeZone9.previousTransition(28800008L);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 100L + "'", long6 == 100L);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-3599996L) + "'", long11 == (-3599996L));
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 2818L + "'", long15 == 2818L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 28800008L + "'", long17 == 28800008L);
    }

    @Test
    public void test02477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02477");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        int int5 = localDateTime4.getWeekyear();
        org.joda.time.LocalDateTime.Property property6 = localDateTime4.millisOfDay();
        java.lang.String str7 = property6.getAsString();
        int int8 = property6.getLeapAmount();
        long long9 = property6.remainder();
        org.joda.time.Interval interval10 = property6.toInterval();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 36000000 + "'", int3 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2022 + "'", int5 == 2022);
        org.junit.Assert.assertNotNull(property6);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "2944075" + "'", str7, "2944075");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(interval10);
    }

    @Test
    public void test02478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02478");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DurationField durationField2 = durationFieldType0.getField(chronology1);
        long long5 = durationField2.subtract(10L, (int) (short) 0);
        long long7 = durationField2.getValueAsLong((long) 1);
        long long10 = durationField2.getValueAsLong(100L, (long) (short) -1);
        long long12 = durationField2.getValueAsLong(110L);
        java.lang.String str13 = durationField2.getName();
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 10L + "'", long5 == 10L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "centuries" + "'", str13, "centuries");
    }

    @Test
    public void test02479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02479");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.yearOfEra();
        org.joda.time.DurationField durationField3 = iSOChronology0.minutes();
        org.joda.time.DurationField durationField4 = iSOChronology0.months();
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology0.era();
        org.joda.time.DurationField durationField6 = iSOChronology0.seconds();
        org.joda.time.DateTimeField dateTimeField7 = iSOChronology0.dayOfMonth();
        org.joda.time.DurationField durationField8 = iSOChronology0.months();
        org.joda.time.DurationField durationField9 = iSOChronology0.months();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(durationField9);
    }

    @Test
    public void test02480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02480");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.yearOfEra();
        org.joda.time.DurationField durationField3 = iSOChronology0.minutes();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.weekyear();
        org.joda.time.DurationField durationField5 = iSOChronology0.centuries();
        org.joda.time.DateTimeField dateTimeField6 = iSOChronology0.centuryOfEra();
        org.joda.time.DurationField durationField7 = iSOChronology0.minutes();
        org.joda.time.DateTimeField dateTimeField8 = iSOChronology0.minuteOfDay();
        org.joda.time.DurationField durationField9 = iSOChronology0.weekyears();
        org.joda.time.DurationField durationField10 = iSOChronology0.hours();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology0.secondOfDay();
        // The following exception was thrown during execution in test generation
        try {
            long long16 = iSOChronology0.getDateTimeMillis(896, 18, 0, 49696269);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 18 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
    }

    @Test
    public void test02481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02481");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setExtension('x', "jpn");
        java.util.Locale locale4 = java.util.Locale.GERMAN;
        java.util.Locale locale5 = java.util.Locale.GERMAN;
        java.lang.String str6 = locale4.getDisplayCountry(locale5);
        java.util.Locale locale7 = locale4.stripExtensions();
        java.lang.String str8 = locale4.getDisplayName();
        java.util.Locale.Builder builder9 = builder3.setLocale(locale4);
        java.util.Locale.Builder builder11 = builder9.setLanguageTag("Februar");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder13 = builder11.setLanguage("10");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed language: 10 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "de");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "de");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\ub3c5\uc77c\uc5b4" + "'", str8, "\ub3c5\uc77c\uc5b4");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test02482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02482");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.weekOfWeekyear();
        java.util.TimeZone timeZone2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone2);
        java.lang.String str5 = dateTimeZone3.getName(31556995199999L);
        org.joda.time.Chronology chronology6 = iSOChronology0.withZone(dateTimeZone3);
        org.joda.time.DateTimeField dateTimeField7 = iSOChronology0.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField8 = iSOChronology0.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField9 = iSOChronology0.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology0.minuteOfDay();
        java.util.Locale locale12 = java.util.Locale.CHINA;
        java.lang.String str13 = dateTimeField10.getAsShortText((int) '#', locale12);
        java.lang.String str14 = locale12.getCountry();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeZone3);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+10:00" + "'", str5, "+10:00");
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "35" + "'", str13, "35");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "CN" + "'", str14, "CN");
    }

    @Test
    public void test02483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02483");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("2812140");
        boolean boolean2 = timeZone1.useDaylightTime();
        org.junit.Assert.assertNotNull(timeZone1);
// flaky:         org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "\uadf8\ub9ac\ub2c8\uce58\ud45c\uc900\uc2dc");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test02484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02484");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet1 = locale0.getExtensionKeys();
        java.util.Iterator<java.lang.Character> charItor2 = charSet1.iterator();
        java.util.ArrayList[] arrayListArray4 = new java.util.ArrayList[0];
        @SuppressWarnings("unchecked")
        java.util.ArrayList<java.util.Locale.LanguageRange>[] languageRangeListArray5 = (java.util.ArrayList<java.util.Locale.LanguageRange>[]) arrayListArray4;
        java.util.ArrayList<java.util.Locale.LanguageRange>[] languageRangeListArray6 = charSet1.toArray((java.util.ArrayList<java.util.Locale.LanguageRange>[]) arrayListArray4);
        java.util.stream.Stream<java.lang.Character> charStream7 = charSet1.stream();
        java.util.Locale locale8 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet9 = locale8.getExtensionKeys();
        java.util.Iterator<java.lang.Character> charItor10 = charSet9.iterator();
        java.util.Locale locale11 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet12 = locale11.getExtensionKeys();
        java.util.Iterator<java.lang.Character> charItor13 = charSet12.iterator();
        boolean boolean14 = charSet9.containsAll((java.util.Collection<java.lang.Character>) charSet12);
        java.util.TimeZone timeZone15 = null;
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forTimeZone(timeZone15);
        int int18 = dateTimeZone16.getOffset(100L);
        java.util.TimeZone timeZone19 = dateTimeZone16.toTimeZone();
        org.joda.time.DateTimeZone[] dateTimeZoneArray20 = new org.joda.time.DateTimeZone[] { dateTimeZone16 };
        org.joda.time.DateTimeZone[] dateTimeZoneArray21 = charSet12.toArray(dateTimeZoneArray20);
        java.util.Locale locale22 = java.util.Locale.GERMAN;
        java.lang.String str23 = locale22.getDisplayScript();
        java.lang.String str25 = locale22.getExtension('x');
        java.util.Set<java.lang.Character> charSet26 = locale22.getExtensionKeys();
        boolean boolean27 = charSet12.retainAll((java.util.Collection<java.lang.Character>) charSet26);
        boolean boolean28 = charSet1.addAll((java.util.Collection<java.lang.Character>) charSet26);
        org.joda.time.chrono.ISOChronology iSOChronology29 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField30 = iSOChronology29.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField31 = iSOChronology29.yearOfEra();
        org.joda.time.DateTimeField dateTimeField32 = iSOChronology29.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField33 = iSOChronology29.weekOfWeekyear();
        org.joda.time.chrono.ISOChronology iSOChronology34 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField35 = iSOChronology34.hourOfHalfday();
        org.joda.time.tz.NameProvider nameProvider36 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale37 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet38 = locale37.getExtensionKeys();
        java.lang.String str41 = nameProvider36.getShortName(locale37, "Koordinierte Universalzeit", "+00:00");
        java.util.Locale locale42 = java.util.Locale.GERMAN;
        java.lang.String str45 = nameProvider36.getShortName(locale42, "53167803", "jpn");
        int int46 = dateTimeField35.getMaximumTextLength(locale42);
        int int47 = dateTimeField33.getMaximumTextLength(locale42);
        java.util.Set<java.lang.Character> charSet48 = locale42.getExtensionKeys();
        boolean boolean49 = charSet26.removeAll((java.util.Collection<java.lang.Character>) charSet48);
        java.util.Locale locale50 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet51 = locale50.getExtensionKeys();
        java.util.Iterator<java.lang.Character> charItor52 = charSet51.iterator();
        boolean boolean53 = charSet51.isEmpty();
        boolean boolean54 = charSet48.addAll((java.util.Collection<java.lang.Character>) charSet51);
        java.util.stream.Stream<java.lang.Character> charStream55 = charSet51.parallelStream();
        java.util.stream.Stream<java.lang.Character> charStream56 = charSet51.stream();
        java.lang.Object obj57 = null;
        boolean boolean58 = charSet51.remove(obj57);
        java.util.TimeZone timeZone59 = null;
        org.joda.time.DateTimeZone dateTimeZone60 = org.joda.time.DateTimeZone.forTimeZone(timeZone59);
        int int62 = dateTimeZone60.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime63 = org.joda.time.LocalDateTime.now(dateTimeZone60);
        org.joda.time.ReadableInstant readableInstant64 = null;
        org.joda.time.DateTime dateTime65 = localDateTime63.toDateTime(readableInstant64);
        java.util.TimeZone timeZone66 = null;
        org.joda.time.DateTimeZone dateTimeZone67 = org.joda.time.DateTimeZone.forTimeZone(timeZone66);
        int int69 = dateTimeZone67.getOffset(100L);
        org.joda.time.DateTime dateTime70 = localDateTime63.toDateTime(dateTimeZone67);
        org.joda.time.LocalDateTime localDateTime72 = localDateTime63.plusMinutes((-1));
        boolean boolean73 = charSet51.equals((java.lang.Object) localDateTime72);
        charSet51.clear();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet1);
        org.junit.Assert.assertNotNull(charItor2);
        org.junit.Assert.assertNotNull(arrayListArray4);
        org.junit.Assert.assertNotNull(languageRangeListArray5);
        org.junit.Assert.assertNotNull(languageRangeListArray6);
        org.junit.Assert.assertNotNull(charStream7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet9);
        org.junit.Assert.assertNotNull(charItor10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet12);
        org.junit.Assert.assertNotNull(charItor13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(dateTimeZone16);
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + 36000000 + "'", int18 == 36000000);
        org.junit.Assert.assertNotNull(timeZone19);
// flaky:         org.junit.Assert.assertEquals(timeZone19.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertNotNull(dateTimeZoneArray20);
        org.junit.Assert.assertNotNull(dateTimeZoneArray21);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "de");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(charSet26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(iSOChronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(iSOChronology34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(nameProvider36);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet38);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "de");
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2 + "'", int46 == 2);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2 + "'", int47 == 2);
        org.junit.Assert.assertNotNull(charSet48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet51);
        org.junit.Assert.assertNotNull(charItor52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(charStream55);
        org.junit.Assert.assertNotNull(charStream56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(dateTimeZone60);
// flaky:         org.junit.Assert.assertTrue("'" + int62 + "' != '" + 36000000 + "'", int62 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(dateTimeZone67);
// flaky:         org.junit.Assert.assertTrue("'" + int69 + "' != '" + 36000000 + "'", int69 == 36000000);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(localDateTime72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
    }

    @Test
    public void test02485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02485");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.DateTime dateTime6 = localDateTime4.toDateTime(readableInstant5);
        java.util.TimeZone timeZone7 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forTimeZone(timeZone7);
        int int10 = dateTimeZone8.getOffset(100L);
        org.joda.time.DateTime dateTime11 = localDateTime4.toDateTime(dateTimeZone8);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime4.plusMinutes((-1));
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.hourOfDay();
        long long15 = property14.remainder();
        org.joda.time.LocalDateTime localDateTime16 = property14.roundHalfEvenCopy();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 36000000 + "'", int3 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTimeZone8);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 36000000 + "'", int10 == 36000000);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
// flaky:         org.junit.Assert.assertTrue("'" + long15 + "' != '" + 2884330L + "'", long15 == 2884330L);
        org.junit.Assert.assertNotNull(localDateTime16);
    }

    @Test
    public void test02486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02486");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        int int5 = localDateTime4.getWeekyear();
        org.joda.time.LocalDateTime.Property property6 = localDateTime4.minuteOfHour();
        org.joda.time.LocalDateTime.Property property7 = localDateTime4.dayOfYear();
        java.util.TimeZone timeZone8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        int int11 = dateTimeZone9.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime12 = org.joda.time.LocalDateTime.now(dateTimeZone9);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray13 = localDateTime12.getFieldTypes();
        int int14 = property7.compareTo((org.joda.time.ReadablePartial) localDateTime12);
        int int15 = localDateTime12.getCenturyOfEra();
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.LocalDateTime localDateTime17 = localDateTime12.plus(readablePeriod16);
        org.joda.time.LocalDateTime.Property property18 = localDateTime12.hourOfDay();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime12.minusYears(2818);
        java.util.TimeZone timeZone21 = null;
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forTimeZone(timeZone21);
        int int24 = dateTimeZone22.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime25 = org.joda.time.LocalDateTime.now(dateTimeZone22);
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.DateTime dateTime27 = localDateTime25.toDateTime(readableInstant26);
        java.util.TimeZone timeZone28 = null;
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forTimeZone(timeZone28);
        int int31 = dateTimeZone29.getOffset(100L);
        org.joda.time.DateTime dateTime32 = localDateTime25.toDateTime(dateTimeZone29);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime25.withYear(52);
        java.util.Locale locale36 = java.util.Locale.ITALIAN;
        java.lang.String str37 = localDateTime34.toString("1", locale36);
        org.joda.time.chrono.ISOChronology iSOChronology38 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField39 = iSOChronology38.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField40 = iSOChronology38.yearOfEra();
        org.joda.time.DateTimeField dateTimeField41 = iSOChronology38.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField42 = iSOChronology38.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField43 = iSOChronology38.dayOfYear();
        java.util.TimeZone timeZone44 = null;
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forTimeZone(timeZone44);
        java.lang.String str47 = dateTimeZone45.getName(31556995199999L);
        java.lang.String str48 = dateTimeZone45.getID();
        org.joda.time.Chronology chronology49 = iSOChronology38.withZone(dateTimeZone45);
        org.joda.time.DateTime dateTime50 = localDateTime34.toDateTime(dateTimeZone45);
        org.joda.time.Chronology chronology51 = localDateTime34.getChronology();
        int int52 = localDateTime20.compareTo((org.joda.time.ReadablePartial) localDateTime34);
        org.joda.time.LocalDateTime localDateTime54 = localDateTime34.minusHours((int) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime56 = localDateTime54.withWeekOfWeekyear(366);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 366 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 36000000 + "'", int3 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2022 + "'", int5 == 2022);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTimeZone9);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 36000000 + "'", int11 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 20 + "'", int15 == 20);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(dateTimeZone22);
// flaky:         org.junit.Assert.assertTrue("'" + int24 + "' != '" + 36000000 + "'", int24 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTimeZone29);
// flaky:         org.junit.Assert.assertTrue("'" + int31 + "' != '" + 36000000 + "'", int31 == 36000000);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "it");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "1" + "'", str37, "1");
        org.junit.Assert.assertNotNull(iSOChronology38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTimeZone45);
// flaky:         org.junit.Assert.assertEquals("'" + str47 + "' != '" + "+10:00" + "'", str47, "+10:00");
// flaky:         org.junit.Assert.assertEquals("'" + str48 + "' != '" + "+10:00" + "'", str48, "+10:00");
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertNotNull(localDateTime54);
    }

    @Test
    public void test02487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02487");
        java.util.Locale locale0 = java.util.Locale.GERMAN;
        java.util.Locale locale1 = java.util.Locale.GERMAN;
        java.lang.String str2 = locale0.getDisplayCountry(locale1);
        java.util.Locale locale3 = locale0.stripExtensions();
        java.util.Locale.setDefault(locale0);
        java.util.Locale locale5 = locale0.stripExtensions();
        java.util.Locale locale6 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str7 = locale5.getDisplayLanguage(locale6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "de");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "de");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "de");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de");
    }

    @Test
    public void test02488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02488");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        int int5 = localDateTime4.getWeekyear();
        org.joda.time.LocalDateTime.Property property6 = localDateTime4.millisOfDay();
        org.joda.time.LocalDateTime localDateTime7 = property6.roundCeilingCopy();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.plusDays(4);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime7.withMillisOfDay(53186052);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime7.plusWeeks(2806);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime7.withMillisOfDay(2942233);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime19 = localDateTime15.withDate(2852990, 59, 2846360);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 59 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 36000000 + "'", int3 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2022 + "'", int5 == 2022);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
    }

    @Test
    public void test02489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02489");
        java.util.List<java.util.Locale.LanguageRange> languageRangeList0 = null;
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList0, strMap1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02490");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.millis();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.secondOfDay();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.secondOfMinute();
        org.joda.time.DurationField durationField4 = iSOChronology0.eras();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
    }

    @Test
    public void test02491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02491");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.hourOfHalfday();
        java.lang.String str2 = iSOChronology0.toString();
        org.joda.time.DurationField durationField3 = iSOChronology0.centuries();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.year();
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology0.dayOfMonth();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ISOChronology[+10:00]" + "'", str2, "ISOChronology[+10:00]");
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
    }

    @Test
    public void test02492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02492");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("en");
        double double2 = languageRange1.getWeight();
        java.lang.String str3 = languageRange1.getRange();
        java.lang.String str4 = languageRange1.getRange();
        double double5 = languageRange1.getWeight();
        double double6 = languageRange1.getWeight();
        java.util.Locale.LanguageRange languageRange8 = new java.util.Locale.LanguageRange("en");
        double double9 = languageRange8.getWeight();
        double double10 = languageRange8.getWeight();
        java.lang.String str11 = languageRange8.getRange();
        double double12 = languageRange8.getWeight();
        java.util.Locale.LanguageRange languageRange14 = new java.util.Locale.LanguageRange("en");
        double double15 = languageRange14.getWeight();
        java.lang.String str16 = languageRange14.getRange();
        java.lang.String str17 = languageRange14.getRange();
        double double18 = languageRange14.getWeight();
        double double19 = languageRange14.getWeight();
        java.lang.String str20 = languageRange14.getRange();
        double double21 = languageRange14.getWeight();
        java.util.Locale.LanguageRange languageRange23 = new java.util.Locale.LanguageRange("en");
        double double24 = languageRange23.getWeight();
        double double25 = languageRange23.getWeight();
        java.lang.String str26 = languageRange23.getRange();
        java.util.Locale.LanguageRange languageRange28 = new java.util.Locale.LanguageRange("en");
        double double29 = languageRange28.getWeight();
        java.lang.String str30 = languageRange28.getRange();
        java.lang.String str31 = languageRange28.getRange();
        double double32 = languageRange28.getWeight();
        double double33 = languageRange28.getWeight();
        java.lang.String str34 = languageRange28.getRange();
        java.util.Locale.LanguageRange languageRange36 = new java.util.Locale.LanguageRange("en");
        double double37 = languageRange36.getWeight();
        java.lang.String str38 = languageRange36.getRange();
        java.util.Locale.LanguageRange languageRange40 = new java.util.Locale.LanguageRange("en");
        double double41 = languageRange40.getWeight();
        double double42 = languageRange40.getWeight();
        java.lang.String str43 = languageRange40.getRange();
        double double44 = languageRange40.getWeight();
        java.util.Locale.LanguageRange languageRange46 = new java.util.Locale.LanguageRange("en");
        double double47 = languageRange46.getWeight();
        java.lang.String str48 = languageRange46.getRange();
        java.lang.String str49 = languageRange46.getRange();
        java.util.Locale.LanguageRange languageRange51 = new java.util.Locale.LanguageRange("en");
        double double52 = languageRange51.getWeight();
        java.lang.String str53 = languageRange51.getRange();
        java.lang.String str54 = languageRange51.getRange();
        double double55 = languageRange51.getWeight();
        java.util.Locale.LanguageRange languageRange57 = new java.util.Locale.LanguageRange("en");
        double double58 = languageRange57.getWeight();
        java.lang.String str59 = languageRange57.getRange();
        java.lang.String str60 = languageRange57.getRange();
        double double61 = languageRange57.getWeight();
        double double62 = languageRange57.getWeight();
        java.lang.String str63 = languageRange57.getRange();
        java.util.Locale.LanguageRange[] languageRangeArray64 = new java.util.Locale.LanguageRange[] { languageRange1, languageRange8, languageRange14, languageRange23, languageRange28, languageRange36, languageRange40, languageRange46, languageRange51, languageRange57 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList65 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList65, languageRangeArray64);
        java.util.Collection<java.lang.String> strCollection67 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str68 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList65, strCollection67);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.0d + "'", double2 == 1.0d);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "en" + "'", str3, "en");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "en" + "'", str4, "en");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "en" + "'", str11, "en");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1.0d + "'", double12 == 1.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 1.0d + "'", double15 == 1.0d);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "en" + "'", str16, "en");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "en" + "'", str17, "en");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1.0d + "'", double18 == 1.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 1.0d + "'", double19 == 1.0d);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "en" + "'", str20, "en");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 1.0d + "'", double24 == 1.0d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 1.0d + "'", double25 == 1.0d);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "en" + "'", str26, "en");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 1.0d + "'", double29 == 1.0d);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "en" + "'", str30, "en");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "en" + "'", str31, "en");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1.0d + "'", double32 == 1.0d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0d + "'", double33 == 1.0d);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "en" + "'", str34, "en");
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 1.0d + "'", double37 == 1.0d);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "en" + "'", str38, "en");
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 1.0d + "'", double41 == 1.0d);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 1.0d + "'", double42 == 1.0d);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "en" + "'", str43, "en");
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 1.0d + "'", double44 == 1.0d);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 1.0d + "'", double47 == 1.0d);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "en" + "'", str48, "en");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "en" + "'", str49, "en");
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 1.0d + "'", double52 == 1.0d);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "en" + "'", str53, "en");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "en" + "'", str54, "en");
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 1.0d + "'", double55 == 1.0d);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 1.0d + "'", double58 == 1.0d);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "en" + "'", str59, "en");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "en" + "'", str60, "en");
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 1.0d + "'", double61 == 1.0d);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 1.0d + "'", double62 == 1.0d);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "en" + "'", str63, "en");
        org.junit.Assert.assertNotNull(languageRangeArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
    }

    @Test
    public void test02493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02493");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffset(100L);
        java.util.TimeZone timeZone4 = dateTimeZone1.toTimeZone();
        java.lang.String str5 = dateTimeZone1.getID();
        java.util.TimeZone timeZone6 = null;
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forTimeZone(timeZone6);
        int int9 = dateTimeZone7.getOffset(100L);
        long long11 = dateTimeZone7.nextTransition((long) (short) -1);
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime(dateTimeZone7);
        long long14 = dateTimeZone1.getMillisKeepLocal(dateTimeZone7, 0L);
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime(dateTimeZone1);
        int int16 = localDateTime15.size();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField18 = localDateTime15.getField(49681464);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 49681464");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 36000000 + "'", int3 == 36000000);
        org.junit.Assert.assertNotNull(timeZone4);
// flaky:         org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "GMT+10:00");
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+10:00" + "'", str5, "+10:00");
        org.junit.Assert.assertNotNull(dateTimeZone7);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 36000000 + "'", int9 == 36000000);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 4 + "'", int16 == 4);
    }

    @Test
    public void test02494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02494");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.centuryOfEra();
        org.joda.time.DurationField durationField3 = iSOChronology0.days();
        org.joda.time.DurationField durationField4 = iSOChronology0.centuries();
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        int int8 = dateTimeZone6.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime9 = org.joda.time.LocalDateTime.now(dateTimeZone6);
        int int10 = localDateTime9.getWeekyear();
        org.joda.time.LocalDateTime.Property property11 = localDateTime9.millisOfDay();
        int int12 = property11.get();
        org.joda.time.LocalDateTime localDateTime13 = property11.roundCeilingCopy();
        org.joda.time.chrono.ISOChronology iSOChronology14 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology14.minuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone16 = iSOChronology14.getZone();
        java.util.TimeZone timeZone17 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forTimeZone(timeZone17);
        int int20 = dateTimeZone18.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime21 = org.joda.time.LocalDateTime.now(dateTimeZone18);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray22 = localDateTime21.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.hourOfDay();
        int int24 = localDateTime21.get(dateTimeFieldType23);
        org.joda.time.LocalDateTime.Property property25 = localDateTime21.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime21.minusHours(20);
        java.util.Locale locale28 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet29 = locale28.getExtensionKeys();
        java.util.Iterator<java.lang.Character> charItor30 = charSet29.iterator();
        java.util.ArrayList[] arrayListArray32 = new java.util.ArrayList[0];
        @SuppressWarnings("unchecked")
        java.util.ArrayList<java.util.Locale.LanguageRange>[] languageRangeListArray33 = (java.util.ArrayList<java.util.Locale.LanguageRange>[]) arrayListArray32;
        java.util.ArrayList<java.util.Locale.LanguageRange>[] languageRangeListArray34 = charSet29.toArray((java.util.ArrayList<java.util.Locale.LanguageRange>[]) arrayListArray32);
        java.util.TimeZone timeZone35 = null;
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forTimeZone(timeZone35);
        int int38 = dateTimeZone36.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime39 = org.joda.time.LocalDateTime.now(dateTimeZone36);
        int int40 = localDateTime39.getWeekyear();
        org.joda.time.LocalDateTime.Property property41 = localDateTime39.millisOfDay();
        java.util.TimeZone timeZone42 = null;
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forTimeZone(timeZone42);
        int int45 = dateTimeZone43.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime46 = org.joda.time.LocalDateTime.now(dateTimeZone43);
        org.joda.time.ReadableInstant readableInstant47 = null;
        org.joda.time.DateTime dateTime48 = localDateTime46.toDateTime(readableInstant47);
        java.util.TimeZone timeZone49 = null;
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.forTimeZone(timeZone49);
        int int52 = dateTimeZone50.getOffset(100L);
        org.joda.time.DateTime dateTime53 = localDateTime46.toDateTime(dateTimeZone50);
        int int54 = property41.compareTo((org.joda.time.ReadableInstant) dateTime53);
        boolean boolean55 = charSet29.equals((java.lang.Object) dateTime53);
        org.joda.time.DateTime dateTime56 = localDateTime27.toDateTime((org.joda.time.ReadableInstant) dateTime53);
        int int57 = localDateTime27.getMinuteOfHour();
        org.joda.time.DateTimeField dateTimeField59 = localDateTime27.getField(0);
        java.util.TimeZone timeZone60 = null;
        org.joda.time.DateTimeZone dateTimeZone61 = org.joda.time.DateTimeZone.forTimeZone(timeZone60);
        int int63 = dateTimeZone61.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime64 = org.joda.time.LocalDateTime.now(dateTimeZone61);
        org.joda.time.LocalDateTime localDateTime65 = org.joda.time.LocalDateTime.now(dateTimeZone61);
        org.joda.time.LocalDateTime localDateTime67 = localDateTime65.minusMinutes((int) ' ');
        org.joda.time.ReadablePeriod readablePeriod68 = null;
        org.joda.time.LocalDateTime localDateTime69 = localDateTime65.plus(readablePeriod68);
        int[] intArray70 = localDateTime69.getValues();
        iSOChronology14.validate((org.joda.time.ReadablePartial) localDateTime27, intArray70);
        iSOChronology0.validate((org.joda.time.ReadablePartial) localDateTime13, intArray70);
        org.joda.time.DateTimeField dateTimeField73 = iSOChronology0.clockhourOfHalfday();
        org.joda.time.DurationField durationField74 = iSOChronology0.seconds();
        org.joda.time.DateTimeField dateTimeField75 = iSOChronology0.millisOfDay();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 36000000 + "'", int8 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2022 + "'", int10 == 2022);
        org.junit.Assert.assertNotNull(property11);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2944751 + "'", int12 == 2944751);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(iSOChronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(dateTimeZone18);
// flaky:         org.junit.Assert.assertTrue("'" + int20 + "' != '" + 36000000 + "'", int20 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray22);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
// flaky:         org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet29);
        org.junit.Assert.assertNotNull(charItor30);
        org.junit.Assert.assertNotNull(arrayListArray32);
        org.junit.Assert.assertNotNull(languageRangeListArray33);
        org.junit.Assert.assertNotNull(languageRangeListArray34);
        org.junit.Assert.assertNotNull(dateTimeZone36);
// flaky:         org.junit.Assert.assertTrue("'" + int38 + "' != '" + 36000000 + "'", int38 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 2022 + "'", int40 == 2022);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(dateTimeZone43);
// flaky:         org.junit.Assert.assertTrue("'" + int45 + "' != '" + 36000000 + "'", int45 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTimeZone50);
// flaky:         org.junit.Assert.assertTrue("'" + int52 + "' != '" + 36000000 + "'", int52 == 36000000);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(dateTime56);
// flaky:         org.junit.Assert.assertTrue("'" + int57 + "' != '" + 49 + "'", int57 == 49);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(dateTimeZone61);
// flaky:         org.junit.Assert.assertTrue("'" + int63 + "' != '" + 36000000 + "'", int63 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertNotNull(localDateTime69);
        org.junit.Assert.assertNotNull(intArray70);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[2022, 2, 22, 2944752]");
        org.junit.Assert.assertNotNull(dateTimeField73);
        org.junit.Assert.assertNotNull(durationField74);
        org.junit.Assert.assertNotNull(dateTimeField75);
    }

    @Test
    public void test02495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02495");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime5 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusMinutes((int) ' ');
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withYearOfCentury((int) (byte) 10);
        java.util.TimeZone timeZone10 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        int int13 = dateTimeZone11.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime14 = org.joda.time.LocalDateTime.now(dateTimeZone11);
        org.joda.time.LocalDateTime localDateTime15 = org.joda.time.LocalDateTime.now(dateTimeZone11);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.withMillisOfSecond((int) '4');
        org.joda.time.LocalDateTime localDateTime18 = localDateTime9.withFields((org.joda.time.ReadablePartial) localDateTime15);
        org.joda.time.DurationFieldType durationFieldType19 = org.joda.time.DurationFieldType.weekyears();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime9.withFieldAdded(durationFieldType19, 4);
        org.joda.time.LocalDateTime.Property property22 = localDateTime9.yearOfCentury();
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = property22.getFieldType();
        org.joda.time.DurationFieldType durationFieldType24 = dateTimeFieldType23.getDurationType();
        org.joda.time.chrono.ISOChronology iSOChronology25 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField26 = iSOChronology25.hourOfHalfday();
        java.lang.String str27 = iSOChronology25.toString();
        org.joda.time.DateTimeField dateTimeField28 = iSOChronology25.era();
        org.joda.time.DurationField durationField29 = iSOChronology25.centuries();
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        long long33 = iSOChronology25.add(readablePeriod30, (long) 2022, (int) (byte) 100);
        org.joda.time.DurationField durationField34 = iSOChronology25.years();
        org.joda.time.DateTimeField dateTimeField35 = iSOChronology25.dayOfYear();
        org.joda.time.DateTimeField dateTimeField36 = dateTimeFieldType23.getField((org.joda.time.Chronology) iSOChronology25);
        org.joda.time.DateTimeField dateTimeField37 = iSOChronology25.minuteOfDay();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 36000000 + "'", int3 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone11);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 36000000 + "'", int13 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(durationFieldType19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertNotNull(durationFieldType24);
        org.junit.Assert.assertNotNull(iSOChronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "ISOChronology[+10:00]" + "'", str27, "ISOChronology[+10:00]");
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 2022L + "'", long33 == 2022L);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
    }

    @Test
    public void test02496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02496");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.centuryOfEra();
        org.joda.time.DurationField durationField3 = iSOChronology0.eras();
        org.joda.time.Chronology chronology4 = iSOChronology0.withUTC();
        java.lang.String str5 = iSOChronology0.toString();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(chronology4);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "ISOChronology[+10:00]" + "'", str5, "ISOChronology[+10:00]");
    }

    @Test
    public void test02497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02497");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray5 = localDateTime4.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.hourOfDay();
        int int7 = localDateTime4.get(dateTimeFieldType6);
        org.joda.time.LocalDateTime.Property property8 = localDateTime4.hourOfDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField10 = localDateTime4.getField(2838341);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 2838341");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 36000000 + "'", int3 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray5);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(property8);
    }

    @Test
    public void test02498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02498");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.hourOfHalfday();
        // The following exception was thrown during execution in test generation
        try {
            long long8 = iSOChronology0.getDateTimeMillis((long) 49687252, 53186052, 21, 13, 0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 53186052 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
    }

    @Test
    public void test02499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02499");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.centuryOfEra();
        org.joda.time.DurationField durationField3 = iSOChronology0.centuries();
        org.joda.time.DurationField durationField4 = iSOChronology0.hours();
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        int int8 = dateTimeZone6.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime9 = org.joda.time.LocalDateTime.now(dateTimeZone6);
        int int10 = localDateTime9.getDayOfYear();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime9.withYearOfEra(2022);
        long long14 = iSOChronology0.set((org.joda.time.ReadablePartial) localDateTime12, (long) 0);
        org.joda.time.DateTime dateTime15 = localDateTime12.toDateTime();
        org.joda.time.DateTimeField[] dateTimeFieldArray16 = localDateTime12.getFields();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 36000000 + "'", int8 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime9);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 53 + "'", int10 == 53);
        org.junit.Assert.assertNotNull(localDateTime12);
// flaky:         org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1645454944898L + "'", long14 == 1645454944898L);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTimeFieldArray16);
    }

    @Test
    public void test02500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02500");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet1 = locale0.getExtensionKeys();
        java.util.Iterator<java.lang.Character> charItor2 = charSet1.iterator();
        java.util.ArrayList[] arrayListArray4 = new java.util.ArrayList[0];
        @SuppressWarnings("unchecked")
        java.util.ArrayList<java.util.Locale.LanguageRange>[] languageRangeListArray5 = (java.util.ArrayList<java.util.Locale.LanguageRange>[]) arrayListArray4;
        java.util.ArrayList<java.util.Locale.LanguageRange>[] languageRangeListArray6 = charSet1.toArray((java.util.ArrayList<java.util.Locale.LanguageRange>[]) arrayListArray4);
        java.util.TimeZone timeZone7 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forTimeZone(timeZone7);
        int int10 = dateTimeZone8.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now(dateTimeZone8);
        int int12 = localDateTime11.getWeekyear();
        org.joda.time.LocalDateTime.Property property13 = localDateTime11.millisOfDay();
        java.util.TimeZone timeZone14 = null;
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forTimeZone(timeZone14);
        int int17 = dateTimeZone15.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime18 = org.joda.time.LocalDateTime.now(dateTimeZone15);
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.DateTime dateTime20 = localDateTime18.toDateTime(readableInstant19);
        java.util.TimeZone timeZone21 = null;
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forTimeZone(timeZone21);
        int int24 = dateTimeZone22.getOffset(100L);
        org.joda.time.DateTime dateTime25 = localDateTime18.toDateTime(dateTimeZone22);
        int int26 = property13.compareTo((org.joda.time.ReadableInstant) dateTime25);
        boolean boolean27 = charSet1.equals((java.lang.Object) dateTime25);
        java.util.Locale locale28 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet29 = locale28.getExtensionKeys();
        java.util.Iterator<java.lang.Character> charItor30 = charSet29.iterator();
        java.util.Locale locale31 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet32 = locale31.getExtensionKeys();
        java.util.Iterator<java.lang.Character> charItor33 = charSet32.iterator();
        boolean boolean34 = charSet29.containsAll((java.util.Collection<java.lang.Character>) charSet32);
        java.util.TimeZone timeZone35 = null;
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forTimeZone(timeZone35);
        int int38 = dateTimeZone36.getOffset(100L);
        java.util.TimeZone timeZone39 = dateTimeZone36.toTimeZone();
        org.joda.time.DateTimeZone[] dateTimeZoneArray40 = new org.joda.time.DateTimeZone[] { dateTimeZone36 };
        org.joda.time.DateTimeZone[] dateTimeZoneArray41 = charSet32.toArray(dateTimeZoneArray40);
        boolean boolean42 = charSet1.removeAll((java.util.Collection<java.lang.Character>) charSet32);
        org.joda.time.chrono.ISOChronology iSOChronology43 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField44 = iSOChronology43.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField45 = iSOChronology43.yearOfEra();
        org.joda.time.DurationField durationField46 = iSOChronology43.minutes();
        org.joda.time.DateTimeField dateTimeField47 = iSOChronology43.weekyear();
        org.joda.time.DurationField durationField48 = iSOChronology43.centuries();
        org.joda.time.DateTimeField dateTimeField49 = iSOChronology43.centuryOfEra();
        org.joda.time.DurationField durationField50 = iSOChronology43.minutes();
        org.joda.time.DateTimeField dateTimeField51 = iSOChronology43.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField52 = iSOChronology43.clockhourOfHalfday();
        boolean boolean53 = charSet1.equals((java.lang.Object) iSOChronology43);
        org.joda.time.DateTimeField dateTimeField54 = iSOChronology43.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField55 = iSOChronology43.yearOfEra();
        java.util.TimeZone timeZone56 = null;
        org.joda.time.DateTimeZone dateTimeZone57 = org.joda.time.DateTimeZone.forTimeZone(timeZone56);
        int int59 = dateTimeZone57.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime60 = org.joda.time.LocalDateTime.now(dateTimeZone57);
        int int61 = localDateTime60.getWeekyear();
        java.util.TimeZone timeZone62 = null;
        org.joda.time.DateTimeZone dateTimeZone63 = org.joda.time.DateTimeZone.forTimeZone(timeZone62);
        int int65 = dateTimeZone63.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime66 = org.joda.time.LocalDateTime.now(dateTimeZone63);
        int int67 = localDateTime66.getWeekyear();
        org.joda.time.LocalDateTime.Property property68 = localDateTime66.millisOfDay();
        java.util.Locale locale69 = java.util.Locale.GERMAN;
        java.util.Locale locale70 = java.util.Locale.GERMAN;
        java.lang.String str71 = locale69.getDisplayCountry(locale70);
        java.util.Locale locale72 = locale69.stripExtensions();
        int int73 = property68.getMaximumShortTextLength(locale69);
        org.joda.time.Interval interval74 = property68.toInterval();
        org.joda.time.LocalDateTime localDateTime76 = property68.setCopy(1);
        org.joda.time.LocalDateTime.Property property77 = localDateTime76.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime79 = localDateTime76.withMillisOfDay((int) (byte) 10);
        int int80 = localDateTime79.getMinuteOfHour();
        org.joda.time.LocalDateTime localDateTime81 = localDateTime60.withFields((org.joda.time.ReadablePartial) localDateTime79);
        org.joda.time.LocalDateTime.Property property82 = localDateTime81.millisOfDay();
        org.joda.time.LocalDateTime localDateTime84 = localDateTime81.minusYears(2840946);
        org.joda.time.LocalDateTime localDateTime86 = localDateTime81.minusMillis((int) ' ');
        java.util.Locale locale88 = null;
        java.lang.String str89 = dateTimeField55.getAsShortText((org.joda.time.ReadablePartial) localDateTime81, 2833465, locale88);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet1);
        org.junit.Assert.assertNotNull(charItor2);
        org.junit.Assert.assertNotNull(arrayListArray4);
        org.junit.Assert.assertNotNull(languageRangeListArray5);
        org.junit.Assert.assertNotNull(languageRangeListArray6);
        org.junit.Assert.assertNotNull(dateTimeZone8);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 36000000 + "'", int10 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2022 + "'", int12 == 2022);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
// flaky:         org.junit.Assert.assertTrue("'" + int17 + "' != '" + 36000000 + "'", int17 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTimeZone22);
// flaky:         org.junit.Assert.assertTrue("'" + int24 + "' != '" + 36000000 + "'", int24 == 36000000);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet29);
        org.junit.Assert.assertNotNull(charItor30);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet32);
        org.junit.Assert.assertNotNull(charItor33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(dateTimeZone36);
// flaky:         org.junit.Assert.assertTrue("'" + int38 + "' != '" + 36000000 + "'", int38 == 36000000);
        org.junit.Assert.assertNotNull(timeZone39);
// flaky:         org.junit.Assert.assertEquals(timeZone39.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertNotNull(dateTimeZoneArray40);
        org.junit.Assert.assertNotNull(dateTimeZoneArray41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(iSOChronology43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(durationField46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(durationField48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(durationField50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(dateTimeZone57);
// flaky:         org.junit.Assert.assertTrue("'" + int59 + "' != '" + 36000000 + "'", int59 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 2022 + "'", int61 == 2022);
        org.junit.Assert.assertNotNull(dateTimeZone63);
// flaky:         org.junit.Assert.assertTrue("'" + int65 + "' != '" + 36000000 + "'", int65 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 2022 + "'", int67 == 2022);
        org.junit.Assert.assertNotNull(property68);
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "de");
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "de");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
        org.junit.Assert.assertNotNull(locale72);
        org.junit.Assert.assertEquals(locale72.toString(), "de");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 8 + "'", int73 == 8);
        org.junit.Assert.assertNotNull(interval74);
        org.junit.Assert.assertNotNull(localDateTime76);
        org.junit.Assert.assertNotNull(property77);
        org.junit.Assert.assertNotNull(localDateTime79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertNotNull(localDateTime81);
        org.junit.Assert.assertNotNull(property82);
        org.junit.Assert.assertNotNull(localDateTime84);
        org.junit.Assert.assertNotNull(localDateTime86);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "2833465" + "'", str89, "2833465");
    }
}

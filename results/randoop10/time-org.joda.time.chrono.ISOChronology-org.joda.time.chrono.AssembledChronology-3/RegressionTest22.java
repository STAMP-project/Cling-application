import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest22 {

    public static boolean debug = false;

    @Test
    public void test11001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11001");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forID("2022-02-21T14:51:31.352Z");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The datetime zone id '2022-02-21T14:51:31.352Z' is not recognised");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test11002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11002");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.yearOfEra();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.weekyearOfCentury();
        org.joda.time.DurationField durationField5 = dateTimeField4.getDurationField();
        long long8 = durationField5.subtract(1645455128196L, 49853);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-1571563242471804L) + "'", long8 == (-1571563242471804L));
    }

    @Test
    public void test11003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11003");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.centuryOfEra();
        org.joda.time.DurationField durationField3 = iSOChronology0.seconds();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.clockhourOfDay();
        org.joda.time.Chronology chronology5 = iSOChronology0.withUTC();
        org.joda.time.DurationField durationField6 = iSOChronology0.halfdays();
        org.joda.time.DateTimeField dateTimeField7 = iSOChronology0.era();
        org.joda.time.DateTimeField dateTimeField8 = iSOChronology0.dayOfWeek();
        java.lang.String str9 = dateTimeField8.getName();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "dayOfWeek" + "'", str9, "dayOfWeek");
    }

    @Test
    public void test11004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11004");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.hourOfHalfday();
        java.lang.String str2 = iSOChronology0.toString();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.era();
        org.joda.time.DurationField durationField4 = iSOChronology0.centuries();
        org.joda.time.DurationField durationField5 = iSOChronology0.weeks();
        org.joda.time.DateTimeField dateTimeField6 = iSOChronology0.era();
        org.joda.time.DateTimeField dateTimeField7 = iSOChronology0.year();
        org.joda.time.DateTimeField dateTimeField8 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField9 = iSOChronology0.dayOfYear();
        org.joda.time.DurationField durationField10 = iSOChronology0.minutes();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology0.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology0.dayOfWeek();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ISOChronology[+00:00:53.314]" + "'", str2, "ISOChronology[+00:00:53.314]");
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
    }

    @Test
    public void test11005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11005");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("2021");
        java.time.ZoneId zoneId2 = timeZone1.toZoneId();
        int int4 = timeZone1.getOffset((long) 1645454814);
        boolean boolean5 = timeZone1.observesDaylightTime();
        timeZone1.setID("53543829");
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(zoneId2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test11006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11006");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        int int5 = localDateTime4.getWeekyear();
        org.joda.time.DurationFieldType durationFieldType6 = org.joda.time.DurationFieldType.days();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime4.withFieldAdded(durationFieldType6, 53166088);
        org.joda.time.chrono.ISOChronology iSOChronology9 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology9.hourOfHalfday();
        java.lang.String str11 = iSOChronology9.toString();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology9.era();
        org.joda.time.DurationField durationField13 = iSOChronology9.centuries();
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        long long17 = iSOChronology9.add(readablePeriod14, (long) 2022, (int) (byte) 100);
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology9.dayOfYear();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology9.year();
        boolean boolean20 = durationFieldType6.isSupported((org.joda.time.Chronology) iSOChronology9);
        java.lang.String str21 = iSOChronology9.toString();
        java.util.TimeZone timeZone22 = null;
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        int int25 = dateTimeZone23.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime26 = org.joda.time.LocalDateTime.now(dateTimeZone23);
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.DateTime dateTime28 = localDateTime26.toDateTime(readableInstant27);
        java.util.TimeZone timeZone29 = null;
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forTimeZone(timeZone29);
        int int32 = dateTimeZone30.getOffset(100L);
        org.joda.time.DateTime dateTime33 = localDateTime26.toDateTime(dateTimeZone30);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime26.plusMinutes((-1));
        org.joda.time.LocalDateTime.Property property36 = localDateTime35.hourOfDay();
        java.lang.String str37 = property36.getAsText();
        org.joda.time.LocalDateTime localDateTime38 = property36.roundHalfEvenCopy();
        long long40 = iSOChronology9.set((org.joda.time.ReadablePartial) localDateTime38, (long) 52);
        int int41 = localDateTime38.getWeekOfWeekyear();
        org.joda.time.LocalDateTime.Property property42 = localDateTime38.weekOfWeekyear();
        java.lang.String str43 = property42.toString();
        org.joda.time.DurationField durationField44 = property42.getRangeDurationField();
        java.util.TimeZone timeZone45 = null;
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.forTimeZone(timeZone45);
        int int48 = dateTimeZone46.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime49 = org.joda.time.LocalDateTime.now(dateTimeZone46);
        int int50 = localDateTime49.getWeekyear();
        org.joda.time.LocalDateTime.Property property51 = localDateTime49.millisOfDay();
        org.joda.time.LocalDateTime localDateTime52 = property51.roundCeilingCopy();
        java.util.TimeZone timeZone53 = null;
        org.joda.time.DateTimeZone dateTimeZone54 = org.joda.time.DateTimeZone.forTimeZone(timeZone53);
        int int56 = dateTimeZone54.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime57 = org.joda.time.LocalDateTime.now(dateTimeZone54);
        org.joda.time.ReadableInstant readableInstant58 = null;
        org.joda.time.DateTime dateTime59 = localDateTime57.toDateTime(readableInstant58);
        org.joda.time.Instant instant60 = dateTime59.toInstant();
        java.lang.String str61 = instant60.toString();
        int int62 = property51.getDifference((org.joda.time.ReadableInstant) instant60);
        java.util.TimeZone timeZone63 = null;
        org.joda.time.DateTimeZone dateTimeZone64 = org.joda.time.DateTimeZone.forTimeZone(timeZone63);
        int int66 = dateTimeZone64.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime67 = org.joda.time.LocalDateTime.now(dateTimeZone64);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray68 = localDateTime67.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType69 = org.joda.time.DateTimeFieldType.hourOfDay();
        int int70 = localDateTime67.get(dateTimeFieldType69);
        org.joda.time.LocalDateTime.Property property71 = localDateTime67.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime73 = localDateTime67.minusHours(20);
        org.joda.time.DateTimeFieldType dateTimeFieldType75 = localDateTime67.getFieldType((int) (byte) 1);
        org.joda.time.ReadableDuration readableDuration76 = null;
        org.joda.time.LocalDateTime localDateTime78 = localDateTime67.withDurationAdded(readableDuration76, 46);
        org.joda.time.DateTimeFieldType dateTimeFieldType79 = org.joda.time.DateTimeFieldType.weekyear();
        boolean boolean80 = localDateTime67.isSupported(dateTimeFieldType79);
        java.lang.String str81 = dateTimeFieldType79.getName();
        boolean boolean82 = instant60.isSupported(dateTimeFieldType79);
        int int83 = property42.getDifference((org.joda.time.ReadableInstant) instant60);
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53314 + "'", int3 == 53314);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2022 + "'", int5 == 2022);
        org.junit.Assert.assertNotNull(durationFieldType6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(iSOChronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "ISOChronology[+00:00:53.314]" + "'", str11, "ISOChronology[+00:00:53.314]");
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 2022L + "'", long17 == 2022L);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "ISOChronology[+00:00:53.314]" + "'", str21, "ISOChronology[+00:00:53.314]");
        org.junit.Assert.assertNotNull(dateTimeZone23);
// flaky:         org.junit.Assert.assertTrue("'" + int25 + "' != '" + 53314 + "'", int25 == 53314);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTimeZone30);
// flaky:         org.junit.Assert.assertTrue("'" + int32 + "' != '" + 53314 + "'", int32 == 53314);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(property36);
// flaky:         org.junit.Assert.assertEquals("'" + str37 + "' != '" + "14" + "'", str37, "14");
        org.junit.Assert.assertNotNull(localDateTime38);
// flaky:         org.junit.Assert.assertTrue("'" + long40 + "' != '" + 1645455546686L + "'", long40 == 1645455546686L);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 8 + "'", int41 == 8);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Property[weekOfWeekyear]" + "'", str43, "Property[weekOfWeekyear]");
        org.junit.Assert.assertNotNull(durationField44);
        org.junit.Assert.assertNotNull(dateTimeZone46);
// flaky:         org.junit.Assert.assertTrue("'" + int48 + "' != '" + 53314 + "'", int48 == 53314);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2022 + "'", int50 == 2022);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(dateTimeZone54);
// flaky:         org.junit.Assert.assertTrue("'" + int56 + "' != '" + 53314 + "'", int56 == 53314);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(instant60);
// flaky:         org.junit.Assert.assertEquals("'" + str61 + "' != '" + "2022-02-21T14:54:18.036Z" + "'", str61, "2022-02-21T14:54:18.036Z");
// flaky:         org.junit.Assert.assertTrue("'" + int62 + "' != '" + 53314 + "'", int62 == 53314);
        org.junit.Assert.assertNotNull(dateTimeZone64);
// flaky:         org.junit.Assert.assertTrue("'" + int66 + "' != '" + 53314 + "'", int66 == 53314);
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray68);
        org.junit.Assert.assertNotNull(dateTimeFieldType69);
// flaky:         org.junit.Assert.assertTrue("'" + int70 + "' != '" + 14 + "'", int70 == 14);
        org.junit.Assert.assertNotNull(property71);
        org.junit.Assert.assertNotNull(localDateTime73);
        org.junit.Assert.assertNotNull(dateTimeFieldType75);
        org.junit.Assert.assertNotNull(localDateTime78);
        org.junit.Assert.assertNotNull(dateTimeFieldType79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "weekyear" + "'", str81, "weekyear");
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
    }

    @Test
    public void test11007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11007");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.yearOfEra();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.weekOfWeekyear();
        org.joda.time.DurationField durationField5 = iSOChronology0.weekyears();
        org.joda.time.DurationField durationField6 = iSOChronology0.millis();
        org.joda.time.DateTimeField dateTimeField7 = iSOChronology0.dayOfWeek();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
    }

    @Test
    public void test11008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11008");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.weekOfWeekyear();
        java.util.TimeZone timeZone2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone2);
        java.lang.String str5 = dateTimeZone3.getName(31556995199999L);
        org.joda.time.Chronology chronology6 = iSOChronology0.withZone(dateTimeZone3);
        org.joda.time.DurationField durationField7 = iSOChronology0.halfdays();
        org.joda.time.DurationField durationField8 = iSOChronology0.millis();
        org.joda.time.DateTimeField dateTimeField9 = iSOChronology0.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology0.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology0.dayOfWeek();
        // The following exception was thrown during execution in test generation
        try {
            long long14 = dateTimeField11.set(1645451366609L, "2012-11-17t19:15:30.052");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2012-11-17t19:15:30.052\" for dayOfWeek is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeZone3);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+00:00:53.314" + "'", str5, "+00:00:53.314");
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
    }

    @Test
    public void test11009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11009");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        int int5 = localDateTime4.getWeekyear();
        org.joda.time.LocalDateTime.Property property6 = localDateTime4.millisOfDay();
        org.joda.time.LocalDateTime localDateTime7 = property6.roundCeilingCopy();
        java.util.TimeZone timeZone8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        int int11 = dateTimeZone9.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime12 = org.joda.time.LocalDateTime.now(dateTimeZone9);
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.DateTime dateTime14 = localDateTime12.toDateTime(readableInstant13);
        org.joda.time.Instant instant15 = dateTime14.toInstant();
        java.lang.String str16 = instant15.toString();
        int int17 = property6.getDifference((org.joda.time.ReadableInstant) instant15);
        long long18 = instant15.getMillis();
        org.joda.time.DateTimeZone dateTimeZone19 = instant15.getZone();
        java.util.TimeZone timeZone20 = null;
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forTimeZone(timeZone20);
        int int23 = dateTimeZone21.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime24 = org.joda.time.LocalDateTime.now(dateTimeZone21);
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.DateTime dateTime26 = localDateTime24.toDateTime(readableInstant25);
        java.util.TimeZone timeZone27 = null;
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forTimeZone(timeZone27);
        int int30 = dateTimeZone28.getOffset(100L);
        java.util.TimeZone timeZone31 = dateTimeZone28.toTimeZone();
        int int33 = dateTimeZone28.getStandardOffset((long) ' ');
        boolean boolean35 = dateTimeZone28.isStandardOffset((long) '4');
        boolean boolean36 = dateTimeZone28.isFixed();
        long long38 = dateTimeZone28.convertUTCToLocal(0L);
        boolean boolean39 = dateTimeZone28.isFixed();
        org.joda.time.DateTime dateTime40 = localDateTime24.toDateTime(dateTimeZone28);
        boolean boolean41 = instant15.isEqual((org.joda.time.ReadableInstant) dateTime40);
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53314 + "'", int3 == 53314);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2022 + "'", int5 == 2022);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(dateTimeZone9);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 53314 + "'", int11 == 53314);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(instant15);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "2022-02-21T14:54:18.171Z" + "'", str16, "2022-02-21T14:54:18.171Z");
// flaky:         org.junit.Assert.assertTrue("'" + int17 + "' != '" + 53314 + "'", int17 == 53314);
// flaky:         org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1645455258171L + "'", long18 == 1645455258171L);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(dateTimeZone21);
// flaky:         org.junit.Assert.assertTrue("'" + int23 + "' != '" + 53314 + "'", int23 == 53314);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTimeZone28);
// flaky:         org.junit.Assert.assertTrue("'" + int30 + "' != '" + 53314 + "'", int30 == 53314);
        org.junit.Assert.assertNotNull(timeZone31);
// flaky:         org.junit.Assert.assertEquals(timeZone31.getDisplayName(), "GMT+00:00");
// flaky:         org.junit.Assert.assertTrue("'" + int33 + "' != '" + 53314 + "'", int33 == 53314);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
// flaky:         org.junit.Assert.assertTrue("'" + long38 + "' != '" + 53314L + "'", long38 == 53314L);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
    }

    @Test
    public void test11010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11010");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.yearOfEra();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.weekyearOfCentury();
        java.lang.String str4 = iSOChronology0.toString();
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology0.clockhourOfHalfday();
        org.joda.time.DurationField durationField6 = iSOChronology0.eras();
        org.joda.time.DateTimeField dateTimeField7 = iSOChronology0.monthOfYear();
        org.joda.time.DateTimeField dateTimeField8 = iSOChronology0.secondOfDay();
        org.joda.time.DateTimeField dateTimeField9 = iSOChronology0.clockhourOfHalfday();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "ISOChronology[+00:00:53.314]" + "'", str4, "ISOChronology[+00:00:53.314]");
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
    }

    @Test
    public void test11011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11011");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.centuryOfEra();
        org.joda.time.DurationField durationField3 = iSOChronology0.eras();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology0.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField6 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField7 = iSOChronology0.yearOfEra();
        org.joda.time.DateTimeField dateTimeField8 = iSOChronology0.millisOfDay();
        long long10 = dateTimeField8.roundFloor(1645454895398L);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1645454895398L + "'", long10 == 1645454895398L);
    }

    @Test
    public void test11012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11012");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.centuryOfEra();
        org.joda.time.DurationField durationField3 = iSOChronology0.seconds();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.clockhourOfDay();
        org.joda.time.Chronology chronology5 = iSOChronology0.withUTC();
        org.joda.time.DateTimeField dateTimeField6 = iSOChronology0.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField7 = iSOChronology0.dayOfYear();
        java.util.TimeZone timeZone8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        int int11 = dateTimeZone9.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime12 = org.joda.time.LocalDateTime.now(dateTimeZone9);
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.DateTime dateTime14 = localDateTime12.toDateTime(readableInstant13);
        java.util.TimeZone timeZone15 = null;
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forTimeZone(timeZone15);
        int int18 = dateTimeZone16.getOffset(100L);
        org.joda.time.DateTime dateTime19 = localDateTime12.toDateTime(dateTimeZone16);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime12.plusMinutes((-1));
        org.joda.time.LocalDateTime.Property property22 = localDateTime21.hourOfDay();
        org.joda.time.LocalDateTime localDateTime24 = localDateTime21.plusSeconds((int) (byte) -1);
        org.joda.time.LocalDateTime.Property property25 = localDateTime24.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime26 = property25.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.withWeekyear((int) (short) 100);
        org.joda.time.LocalDateTime.Property property29 = localDateTime28.era();
        org.joda.time.tz.NameProvider nameProvider30 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.TimeZone timeZone31 = null;
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forTimeZone(timeZone31);
        int int34 = dateTimeZone32.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime35 = org.joda.time.LocalDateTime.now(dateTimeZone32);
        int int36 = localDateTime35.getWeekyear();
        org.joda.time.LocalDateTime.Property property37 = localDateTime35.millisOfDay();
        java.util.Locale locale38 = java.util.Locale.KOREAN;
        int int39 = property37.getMaximumTextLength(locale38);
        java.lang.String str40 = locale38.getVariant();
        java.lang.String str43 = nameProvider30.getName(locale38, "2022-02-21T14:46:31.592", "");
        org.joda.time.DateTimeZone.setNameProvider(nameProvider30);
        org.joda.time.DateTimeZone.setNameProvider(nameProvider30);
        java.util.TimeZone timeZone46 = null;
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.forTimeZone(timeZone46);
        int int49 = dateTimeZone47.getOffset(100L);
        java.util.TimeZone timeZone51 = null;
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.forTimeZone(timeZone51);
        int int54 = dateTimeZone52.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime55 = org.joda.time.LocalDateTime.now(dateTimeZone52);
        int int56 = localDateTime55.getWeekyear();
        org.joda.time.LocalDateTime.Property property57 = localDateTime55.millisOfDay();
        java.util.Locale locale58 = java.util.Locale.GERMAN;
        java.util.Locale locale59 = java.util.Locale.GERMAN;
        java.lang.String str60 = locale58.getDisplayCountry(locale59);
        java.util.Locale locale61 = locale58.stripExtensions();
        int int62 = property57.getMaximumShortTextLength(locale58);
        java.lang.String str63 = locale58.getDisplayScript();
        java.lang.String str64 = dateTimeZone47.getShortName((long) 0, locale58);
        java.lang.String str65 = locale58.getVariant();
        java.lang.String str68 = nameProvider30.getShortName(locale58, "2848516", "2833411");
        java.util.Locale.Builder builder69 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder72 = builder69.setExtension('x', "jpn");
        java.util.Locale locale73 = java.util.Locale.GERMAN;
        java.util.Locale locale74 = java.util.Locale.GERMAN;
        java.lang.String str75 = locale73.getDisplayCountry(locale74);
        java.util.Locale locale76 = locale73.stripExtensions();
        java.lang.String str77 = locale73.getDisplayName();
        java.util.Locale.Builder builder78 = builder72.setLocale(locale73);
        java.util.Locale.Builder builder80 = builder78.setLanguageTag("Februar");
        java.util.Locale locale81 = java.util.Locale.GERMAN;
        java.util.Locale locale82 = java.util.Locale.GERMAN;
        java.util.Locale locale83 = java.util.Locale.GERMAN;
        java.lang.String str84 = locale82.getDisplayCountry(locale83);
        java.util.Locale locale85 = locale82.stripExtensions();
        java.lang.String str86 = locale81.getDisplayCountry(locale82);
        java.util.Locale.Builder builder87 = builder80.setLocale(locale81);
        java.lang.String str88 = locale58.getDisplayScript(locale81);
        java.lang.String str89 = dateTimeField7.getAsShortText((org.joda.time.ReadablePartial) localDateTime28, locale58);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeZone9);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 53314 + "'", int11 == 53314);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTimeZone16);
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + 53314 + "'", int18 == 53314);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(nameProvider30);
        org.junit.Assert.assertNotNull(dateTimeZone32);
// flaky:         org.junit.Assert.assertTrue("'" + int34 + "' != '" + 53314 + "'", int34 == 53314);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2022 + "'", int36 == 2022);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "ko");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 8 + "'", int39 == 8);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNotNull(dateTimeZone47);
// flaky:         org.junit.Assert.assertTrue("'" + int49 + "' != '" + 53314 + "'", int49 == 53314);
        org.junit.Assert.assertNotNull(dateTimeZone52);
// flaky:         org.junit.Assert.assertTrue("'" + int54 + "' != '" + 53314 + "'", int54 == 53314);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 2022 + "'", int56 == 2022);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "de");
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "de");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "de");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 8 + "'", int62 == 8);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
// flaky:         org.junit.Assert.assertEquals("'" + str64 + "' != '" + "+00:00:53.314" + "'", str64, "+00:00:53.314");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertNull(str68);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "de");
        org.junit.Assert.assertNotNull(locale74);
        org.junit.Assert.assertEquals(locale74.toString(), "de");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "" + "'", str75, "");
        org.junit.Assert.assertNotNull(locale76);
        org.junit.Assert.assertEquals(locale76.toString(), "de");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "German" + "'", str77, "German");
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(locale81);
        org.junit.Assert.assertEquals(locale81.toString(), "de");
        org.junit.Assert.assertNotNull(locale82);
        org.junit.Assert.assertEquals(locale82.toString(), "de");
        org.junit.Assert.assertNotNull(locale83);
        org.junit.Assert.assertEquals(locale83.toString(), "de");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "" + "'", str84, "");
        org.junit.Assert.assertNotNull(locale85);
        org.junit.Assert.assertEquals(locale85.toString(), "de");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "" + "'", str86, "");
        org.junit.Assert.assertNotNull(builder87);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "" + "'", str88, "");
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "1" + "'", str89, "1");
    }

    @Test
    public void test11013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11013");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffset(100L);
        java.util.TimeZone timeZone4 = dateTimeZone1.toTimeZone();
        int int6 = dateTimeZone1.getStandardOffset((long) ' ');
        java.util.TimeZone timeZone7 = dateTimeZone1.toTimeZone();
        timeZone7.setID("");
        timeZone7.setRawOffset((-19044));
        timeZone7.setID("49823693");
        timeZone7.setID("\uc6d4");
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53314 + "'", int3 == 53314);
        org.junit.Assert.assertNotNull(timeZone4);
// flaky:         org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "GMT+00:00");
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 53314 + "'", int6 == 53314);
        org.junit.Assert.assertNotNull(timeZone7);
        org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "GMT+00:00");
    }

    @Test
    public void test11014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11014");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime5 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusMinutes((int) ' ');
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.LocalDateTime localDateTime9 = localDateTime5.plus(readablePeriod8);
        int[] intArray10 = localDateTime9.getValues();
        int int11 = localDateTime9.getMinuteOfHour();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime13 = localDateTime9.withSecondOfMinute(699);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 699 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53314 + "'", int3 == 53314);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(intArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[2022, 2, 21, 53711732]");
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 55 + "'", int11 == 55);
    }

    @Test
    public void test11015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11015");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.DateTime dateTime6 = localDateTime4.toDateTime(readableInstant5);
        java.util.TimeZone timeZone7 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forTimeZone(timeZone7);
        int int10 = dateTimeZone8.getOffset(100L);
        org.joda.time.DateTime dateTime11 = localDateTime4.toDateTime(dateTimeZone8);
        org.joda.time.LocalDateTime.Property property12 = localDateTime4.monthOfYear();
        java.lang.String str13 = property12.getAsText();
        org.joda.time.LocalDateTime localDateTime14 = property12.roundCeilingCopy();
        org.joda.time.Interval interval15 = property12.toInterval();
        org.joda.time.chrono.ISOChronology iSOChronology16 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology16.weekOfWeekyear();
        java.util.TimeZone timeZone18 = null;
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forTimeZone(timeZone18);
        java.lang.String str21 = dateTimeZone19.getName(31556995199999L);
        org.joda.time.Chronology chronology22 = iSOChronology16.withZone(dateTimeZone19);
        org.joda.time.DurationField durationField23 = iSOChronology16.weekyears();
        org.joda.time.DateTimeField dateTimeField24 = iSOChronology16.monthOfYear();
        java.util.Locale locale25 = java.util.Locale.JAPANESE;
        java.lang.String str26 = locale25.getDisplayLanguage();
        java.lang.String str27 = locale25.getISO3Language();
        java.util.Locale locale28 = java.util.Locale.CHINA;
        java.lang.String str29 = locale25.getDisplayLanguage(locale28);
        org.joda.time.tz.NameProvider nameProvider30 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale31 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet32 = locale31.getExtensionKeys();
        java.lang.String str35 = nameProvider30.getShortName(locale31, "Koordinierte Universalzeit", "+00:00");
        java.util.Locale locale36 = java.util.Locale.KOREAN;
        java.lang.String str37 = locale31.getDisplayName(locale36);
        java.lang.String str38 = locale28.getDisplayVariant(locale36);
        int int39 = dateTimeField24.getMaximumShortTextLength(locale36);
        java.util.TimeZone timeZone41 = null;
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forTimeZone(timeZone41);
        int int44 = dateTimeZone42.getOffset(100L);
        java.util.TimeZone timeZone46 = null;
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.forTimeZone(timeZone46);
        int int49 = dateTimeZone47.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime50 = org.joda.time.LocalDateTime.now(dateTimeZone47);
        int int51 = localDateTime50.getWeekyear();
        org.joda.time.LocalDateTime.Property property52 = localDateTime50.millisOfDay();
        java.util.Locale locale53 = java.util.Locale.GERMAN;
        java.util.Locale locale54 = java.util.Locale.GERMAN;
        java.lang.String str55 = locale53.getDisplayCountry(locale54);
        java.util.Locale locale56 = locale53.stripExtensions();
        int int57 = property52.getMaximumShortTextLength(locale53);
        java.lang.String str58 = locale53.getDisplayScript();
        java.lang.String str59 = dateTimeZone42.getShortName((long) 0, locale53);
        java.util.Locale locale61 = java.util.Locale.getDefault();
        java.lang.String str62 = dateTimeZone42.getName((long) (short) -1, locale61);
        boolean boolean63 = locale61.hasExtensions();
        org.joda.time.tz.NameProvider nameProvider64 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale65 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet66 = locale65.getExtensionKeys();
        java.lang.String str69 = nameProvider64.getShortName(locale65, "Koordinierte Universalzeit", "+00:00");
        java.util.Locale locale70 = java.util.Locale.GERMAN;
        java.lang.String str73 = nameProvider64.getShortName(locale70, "53167803", "jpn");
        java.lang.String str74 = locale61.getDisplayLanguage(locale70);
        java.lang.String str75 = dateTimeField24.getAsShortText(2335738204L, locale61);
        int int76 = property12.getMaximumTextLength(locale61);
        java.util.Locale locale77 = locale61.stripExtensions();
        java.lang.String str78 = locale77.getISO3Country();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53314 + "'", int3 == 53314);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTimeZone8);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 53314 + "'", int10 == 53314);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "February" + "'", str13, "February");
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(iSOChronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeZone19);
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "+00:00:53.314" + "'", str21, "+00:00:53.314");
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Japanese" + "'", str26, "Japanese");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "jpn" + "'", str27, "jpn");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "\u65e5\u6587" + "'", str29, "\u65e5\u6587");
        org.junit.Assert.assertNotNull(nameProvider30);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet32);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str37, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 3 + "'", int39 == 3);
        org.junit.Assert.assertNotNull(dateTimeZone42);
// flaky:         org.junit.Assert.assertTrue("'" + int44 + "' != '" + 53314 + "'", int44 == 53314);
        org.junit.Assert.assertNotNull(dateTimeZone47);
// flaky:         org.junit.Assert.assertTrue("'" + int49 + "' != '" + 53314 + "'", int49 == 53314);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 2022 + "'", int51 == 2022);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "de");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "de");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "de");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 8 + "'", int57 == 8);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
// flaky:         org.junit.Assert.assertEquals("'" + str59 + "' != '" + "+00:00:53.314" + "'", str59, "+00:00:53.314");
        org.junit.Assert.assertNotNull(locale61);
// flaky:         org.junit.Assert.assertEquals(locale61.toString(), "");
// flaky:         org.junit.Assert.assertEquals("'" + str62 + "' != '" + "+00:00:53.314" + "'", str62, "+00:00:53.314");
// flaky:         org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(nameProvider64);
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet66);
        org.junit.Assert.assertNull(str69);
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "de");
        org.junit.Assert.assertNull(str73);
// flaky:         org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "Jan" + "'", str75, "Jan");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 9 + "'", int76 == 9);
        org.junit.Assert.assertNotNull(locale77);
// flaky:         org.junit.Assert.assertEquals(locale77.toString(), "");
// flaky:         org.junit.Assert.assertEquals("'" + str78 + "' != '" + "" + "'", str78, "");
    }

    @Test
    public void test11016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11016");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime5 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusMinutes((int) ' ');
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withYearOfCentury((int) (byte) 10);
        java.util.TimeZone timeZone10 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        int int13 = dateTimeZone11.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime14 = org.joda.time.LocalDateTime.now(dateTimeZone11);
        org.joda.time.LocalDateTime localDateTime15 = org.joda.time.LocalDateTime.now(dateTimeZone11);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.withMillisOfSecond((int) '4');
        org.joda.time.LocalDateTime localDateTime18 = localDateTime9.withFields((org.joda.time.ReadablePartial) localDateTime15);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.plusHours(3);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.minusMillis(366);
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53314 + "'", int3 == 53314);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone11);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 53314 + "'", int13 == 53314);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
    }

    @Test
    public void test11017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11017");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.hourOfHalfday();
        java.lang.String str2 = iSOChronology0.toString();
        org.joda.time.DurationField durationField3 = iSOChronology0.centuries();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.year();
        org.joda.time.Chronology chronology5 = iSOChronology0.withUTC();
        org.joda.time.DateTimeField dateTimeField6 = iSOChronology0.clockhourOfHalfday();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ISOChronology[+00:00:53.314]" + "'", str2, "ISOChronology[+00:00:53.314]");
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
    }

    @Test
    public void test11018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11018");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime5 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.plusSeconds((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime5.minusWeeks((int) (byte) 10);
        java.util.TimeZone timeZone10 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        int int13 = dateTimeZone11.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime14 = org.joda.time.LocalDateTime.now(dateTimeZone11);
        int int15 = localDateTime14.getWeekyear();
        org.joda.time.LocalDateTime.Property property16 = localDateTime14.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime14.minusMillis(2022);
        org.joda.time.ReadableDuration readableDuration19 = null;
        org.joda.time.LocalDateTime localDateTime21 = localDateTime14.withDurationAdded(readableDuration19, (int) 'x');
        boolean boolean22 = localDateTime5.isBefore((org.joda.time.ReadablePartial) localDateTime21);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.Chronology chronology24 = null;
        boolean boolean25 = dateTimeFieldType23.isSupported(chronology24);
        org.joda.time.Chronology chronology26 = null;
        boolean boolean27 = dateTimeFieldType23.isSupported(chronology26);
        boolean boolean28 = localDateTime5.isSupported(dateTimeFieldType23);
        java.util.TimeZone timeZone29 = null;
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forTimeZone(timeZone29);
        int int32 = dateTimeZone30.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime33 = org.joda.time.LocalDateTime.now(dateTimeZone30);
        int int34 = localDateTime33.getWeekyear();
        org.joda.time.LocalDateTime.Property property35 = localDateTime33.millisOfDay();
        java.util.TimeZone timeZone36 = null;
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forTimeZone(timeZone36);
        int int39 = dateTimeZone37.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime40 = org.joda.time.LocalDateTime.now(dateTimeZone37);
        org.joda.time.ReadableInstant readableInstant41 = null;
        org.joda.time.DateTime dateTime42 = localDateTime40.toDateTime(readableInstant41);
        java.util.TimeZone timeZone43 = null;
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forTimeZone(timeZone43);
        int int46 = dateTimeZone44.getOffset(100L);
        org.joda.time.DateTime dateTime47 = localDateTime40.toDateTime(dateTimeZone44);
        int int48 = property35.compareTo((org.joda.time.ReadableInstant) dateTime47);
        org.joda.time.LocalDateTime localDateTime49 = property35.roundHalfEvenCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.LocalDateTime.Property property51 = localDateTime49.property(dateTimeFieldType50);
        org.joda.time.DateTimeFieldType dateTimeFieldType52 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.Chronology chronology53 = null;
        boolean boolean54 = dateTimeFieldType52.isSupported(chronology53);
        boolean boolean55 = localDateTime49.isSupported(dateTimeFieldType52);
        int int56 = localDateTime49.getDayOfMonth();
        org.joda.time.DurationFieldType durationFieldType57 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.chrono.ISOChronology iSOChronology58 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField59 = iSOChronology58.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField60 = iSOChronology58.centuryOfEra();
        org.joda.time.DurationField durationField61 = iSOChronology58.seconds();
        org.joda.time.DateTimeField dateTimeField62 = iSOChronology58.clockhourOfDay();
        org.joda.time.Chronology chronology63 = iSOChronology58.withUTC();
        org.joda.time.DateTimeField dateTimeField64 = iSOChronology58.halfdayOfDay();
        org.joda.time.DurationField durationField65 = durationFieldType57.getField((org.joda.time.Chronology) iSOChronology58);
        boolean boolean66 = localDateTime49.isSupported(durationFieldType57);
        boolean boolean67 = localDateTime5.isSupported(durationFieldType57);
        org.joda.time.chrono.ISOChronology iSOChronology68 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField69 = iSOChronology68.hourOfHalfday();
        java.lang.String str70 = iSOChronology68.toString();
        org.joda.time.DurationField durationField71 = iSOChronology68.centuries();
        boolean boolean72 = durationFieldType57.isSupported((org.joda.time.Chronology) iSOChronology68);
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53314 + "'", int3 == 53314);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone11);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 53314 + "'", int13 == 53314);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2022 + "'", int15 == 2022);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(dateTimeZone30);
// flaky:         org.junit.Assert.assertTrue("'" + int32 + "' != '" + 53314 + "'", int32 == 53314);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2022 + "'", int34 == 2022);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(dateTimeZone37);
// flaky:         org.junit.Assert.assertTrue("'" + int39 + "' != '" + 53314 + "'", int39 == 53314);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTimeZone44);
// flaky:         org.junit.Assert.assertTrue("'" + int46 + "' != '" + 53314 + "'", int46 == 53314);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(dateTimeFieldType50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(dateTimeFieldType52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 21 + "'", int56 == 21);
        org.junit.Assert.assertNotNull(durationFieldType57);
        org.junit.Assert.assertNotNull(iSOChronology58);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(durationField61);
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertNotNull(chronology63);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertNotNull(durationField65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(iSOChronology68);
        org.junit.Assert.assertNotNull(dateTimeField69);
// flaky:         org.junit.Assert.assertEquals("'" + str70 + "' != '" + "ISOChronology[+00:00:53.314]" + "'", str70, "ISOChronology[+00:00:53.314]");
        org.junit.Assert.assertNotNull(durationField71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
    }

    @Test
    public void test11019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11019");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.yearOfEra();
        org.joda.time.DurationField durationField3 = iSOChronology0.minutes();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology0.secondOfDay();
        java.util.TimeZone timeZone6 = null;
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forTimeZone(timeZone6);
        int int9 = dateTimeZone7.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime10 = org.joda.time.LocalDateTime.now(dateTimeZone7);
        int int11 = localDateTime10.getWeekyear();
        org.joda.time.LocalDateTime.Property property12 = localDateTime10.millisOfDay();
        java.util.TimeZone timeZone13 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forTimeZone(timeZone13);
        int int16 = dateTimeZone14.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime17 = org.joda.time.LocalDateTime.now(dateTimeZone14);
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.DateTime dateTime19 = localDateTime17.toDateTime(readableInstant18);
        java.util.TimeZone timeZone20 = null;
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forTimeZone(timeZone20);
        int int23 = dateTimeZone21.getOffset(100L);
        org.joda.time.DateTime dateTime24 = localDateTime17.toDateTime(dateTimeZone21);
        int int25 = property12.compareTo((org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.LocalDateTime localDateTime26 = property12.roundHalfEvenCopy();
        org.joda.time.LocalDateTime.Property property27 = localDateTime26.monthOfYear();
        int int28 = localDateTime26.getDayOfYear();
        java.util.TimeZone timeZone29 = null;
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forTimeZone(timeZone29);
        int int32 = dateTimeZone30.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime33 = org.joda.time.LocalDateTime.now(dateTimeZone30);
        org.joda.time.LocalDateTime localDateTime34 = org.joda.time.LocalDateTime.now(dateTimeZone30);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime34.minusMinutes((int) ' ');
        org.joda.time.LocalDateTime localDateTime38 = localDateTime36.withYearOfCentury((int) (byte) 10);
        java.util.TimeZone timeZone39 = null;
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forTimeZone(timeZone39);
        int int42 = dateTimeZone40.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime43 = org.joda.time.LocalDateTime.now(dateTimeZone40);
        org.joda.time.LocalDateTime localDateTime44 = org.joda.time.LocalDateTime.now(dateTimeZone40);
        org.joda.time.LocalDateTime localDateTime46 = localDateTime44.withMillisOfSecond((int) '4');
        org.joda.time.LocalDateTime localDateTime47 = localDateTime38.withFields((org.joda.time.ReadablePartial) localDateTime44);
        org.joda.time.LocalDateTime localDateTime48 = localDateTime26.withFields((org.joda.time.ReadablePartial) localDateTime47);
        org.joda.time.chrono.ISOChronology iSOChronology49 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField50 = iSOChronology49.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField51 = iSOChronology49.yearOfEra();
        org.joda.time.DateTimeField dateTimeField52 = iSOChronology49.hourOfDay();
        org.joda.time.DateTimeField dateTimeField53 = iSOChronology49.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField54 = iSOChronology49.centuryOfEra();
        org.joda.time.DurationField durationField55 = iSOChronology49.days();
        org.joda.time.chrono.ISOChronology iSOChronology56 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField57 = iSOChronology56.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField58 = iSOChronology56.yearOfEra();
        org.joda.time.DurationField durationField59 = iSOChronology56.minutes();
        org.joda.time.DateTimeField dateTimeField60 = iSOChronology56.weekyear();
        org.joda.time.DurationField durationField61 = iSOChronology56.centuries();
        org.joda.time.DateTimeField dateTimeField62 = iSOChronology56.centuryOfEra();
        org.joda.time.DurationField durationField63 = dateTimeField62.getRangeDurationField();
        boolean boolean64 = iSOChronology49.equals((java.lang.Object) durationField63);
        org.joda.time.DateTimeField dateTimeField65 = iSOChronology49.weekyear();
        java.util.TimeZone timeZone66 = null;
        org.joda.time.DateTimeZone dateTimeZone67 = org.joda.time.DateTimeZone.forTimeZone(timeZone66);
        int int69 = dateTimeZone67.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime70 = org.joda.time.LocalDateTime.now(dateTimeZone67);
        int int71 = localDateTime70.getWeekyear();
        org.joda.time.LocalDateTime.Property property72 = localDateTime70.minuteOfHour();
        org.joda.time.LocalDateTime.Property property73 = localDateTime70.dayOfYear();
        java.util.TimeZone timeZone74 = null;
        org.joda.time.DateTimeZone dateTimeZone75 = org.joda.time.DateTimeZone.forTimeZone(timeZone74);
        int int77 = dateTimeZone75.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime78 = org.joda.time.LocalDateTime.now(dateTimeZone75);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray79 = localDateTime78.getFieldTypes();
        int int80 = property73.compareTo((org.joda.time.ReadablePartial) localDateTime78);
        int[] intArray82 = iSOChronology49.get((org.joda.time.ReadablePartial) localDateTime78, (long) 23);
        iSOChronology0.validate((org.joda.time.ReadablePartial) localDateTime26, intArray82);
        org.joda.time.DateTimeField dateTimeField84 = iSOChronology0.hourOfDay();
        // The following exception was thrown during execution in test generation
        try {
            long long92 = iSOChronology0.getDateTimeMillis(49831789, 1456, 3130475, 49838, 2856064, 49687, 2926596);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 49838 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeZone7);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 53314 + "'", int9 == 53314);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2022 + "'", int11 == 2022);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
// flaky:         org.junit.Assert.assertTrue("'" + int16 + "' != '" + 53314 + "'", int16 == 53314);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTimeZone21);
// flaky:         org.junit.Assert.assertTrue("'" + int23 + "' != '" + 53314 + "'", int23 == 53314);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 52 + "'", int28 == 52);
        org.junit.Assert.assertNotNull(dateTimeZone30);
// flaky:         org.junit.Assert.assertTrue("'" + int32 + "' != '" + 53314 + "'", int32 == 53314);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(dateTimeZone40);
// flaky:         org.junit.Assert.assertTrue("'" + int42 + "' != '" + 53314 + "'", int42 == 53314);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(iSOChronology49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(durationField55);
        org.junit.Assert.assertNotNull(iSOChronology56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(durationField59);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(durationField61);
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertNull(durationField63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertNotNull(dateTimeZone67);
// flaky:         org.junit.Assert.assertTrue("'" + int69 + "' != '" + 53314 + "'", int69 == 53314);
        org.junit.Assert.assertNotNull(localDateTime70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 2022 + "'", int71 == 2022);
        org.junit.Assert.assertNotNull(property72);
        org.junit.Assert.assertNotNull(property73);
        org.junit.Assert.assertNotNull(dateTimeZone75);
// flaky:         org.junit.Assert.assertTrue("'" + int77 + "' != '" + 53314 + "'", int77 == 53314);
        org.junit.Assert.assertNotNull(localDateTime78);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertNotNull(intArray82);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[1970, 1, 1, 53337]");
        org.junit.Assert.assertNotNull(dateTimeField84);
    }

    @Test
    public void test11020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11020");
        org.joda.time.chrono.ISOChronology iSOChronology1 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology1.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology1.yearOfEra();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology1.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology1.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField6 = iSOChronology1.weekyear();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = iSOChronology1.withZone(dateTimeZone7);
        org.joda.time.DateTimeField dateTimeField9 = chronology8.hourOfHalfday();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((-55662023267599L), chronology8);
        org.junit.Assert.assertNotNull(iSOChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
    }

    @Test
    public void test11021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11021");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        int int5 = localDateTime4.getWeekyear();
        org.joda.time.LocalDateTime.Property property6 = localDateTime4.millisOfDay();
        java.util.TimeZone timeZone7 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forTimeZone(timeZone7);
        int int10 = dateTimeZone8.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now(dateTimeZone8);
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.DateTime dateTime13 = localDateTime11.toDateTime(readableInstant12);
        java.util.TimeZone timeZone14 = null;
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forTimeZone(timeZone14);
        int int17 = dateTimeZone15.getOffset(100L);
        org.joda.time.DateTime dateTime18 = localDateTime11.toDateTime(dateTimeZone15);
        int int19 = property6.compareTo((org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.LocalDateTime localDateTime20 = property6.roundHalfEvenCopy();
        org.joda.time.Interval interval21 = property6.toInterval();
        java.lang.String str22 = property6.getAsText();
        org.joda.time.chrono.ISOChronology iSOChronology23 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField24 = iSOChronology23.hourOfHalfday();
        java.lang.String str25 = iSOChronology23.toString();
        org.joda.time.DurationField durationField26 = iSOChronology23.eras();
        org.joda.time.DateTimeField dateTimeField27 = iSOChronology23.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField28 = iSOChronology23.centuryOfEra();
        java.util.TimeZone timeZone29 = null;
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forTimeZone(timeZone29);
        int int32 = dateTimeZone30.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime33 = org.joda.time.LocalDateTime.now(dateTimeZone30);
        int int34 = localDateTime33.getWeekyear();
        int int35 = localDateTime33.getDayOfYear();
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        org.joda.time.LocalDateTime localDateTime37 = localDateTime33.plus(readablePeriod36);
        int int38 = dateTimeField28.getMinimumValue((org.joda.time.ReadablePartial) localDateTime33);
        java.util.TimeZone timeZone39 = null;
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forTimeZone(timeZone39);
        int int42 = dateTimeZone40.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime43 = org.joda.time.LocalDateTime.now(dateTimeZone40);
        org.joda.time.LocalDateTime localDateTime44 = org.joda.time.LocalDateTime.now(dateTimeZone40);
        org.joda.time.LocalDateTime localDateTime46 = localDateTime44.minusMinutes((int) ' ');
        org.joda.time.LocalDateTime localDateTime48 = localDateTime46.withYearOfCentury((int) (byte) 10);
        java.util.TimeZone timeZone49 = null;
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.forTimeZone(timeZone49);
        int int52 = dateTimeZone50.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime53 = org.joda.time.LocalDateTime.now(dateTimeZone50);
        org.joda.time.LocalDateTime localDateTime54 = org.joda.time.LocalDateTime.now(dateTimeZone50);
        org.joda.time.LocalDateTime localDateTime56 = localDateTime54.withMillisOfSecond((int) '4');
        org.joda.time.LocalDateTime localDateTime57 = localDateTime48.withFields((org.joda.time.ReadablePartial) localDateTime54);
        int int58 = localDateTime57.size();
        org.joda.time.LocalDateTime localDateTime60 = localDateTime57.plusDays(11);
        org.joda.time.LocalDateTime localDateTime62 = localDateTime60.plusMinutes(882);
        java.util.Locale locale64 = java.util.Locale.GERMAN;
        java.util.Locale locale65 = java.util.Locale.GERMAN;
        java.lang.String str66 = locale64.getDisplayCountry(locale65);
        java.util.Locale locale67 = locale64.stripExtensions();
        java.lang.String str68 = locale64.getDisplayName();
        java.lang.String str69 = dateTimeField28.getAsText((org.joda.time.ReadablePartial) localDateTime60, 2820889, locale64);
        java.lang.String str70 = locale64.getDisplayLanguage();
        java.lang.String str71 = property6.getAsShortText(locale64);
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53314 + "'", int3 == 53314);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2022 + "'", int5 == 2022);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTimeZone8);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 53314 + "'", int10 == 53314);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
// flaky:         org.junit.Assert.assertTrue("'" + int17 + "' != '" + 53314 + "'", int17 == 53314);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(interval21);
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "53711967" + "'", str22, "53711967");
        org.junit.Assert.assertNotNull(iSOChronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "ISOChronology[+00:00:53.314]" + "'", str25, "ISOChronology[+00:00:53.314]");
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeZone30);
// flaky:         org.junit.Assert.assertTrue("'" + int32 + "' != '" + 53314 + "'", int32 == 53314);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2022 + "'", int34 == 2022);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 52 + "'", int35 == 52);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone40);
// flaky:         org.junit.Assert.assertTrue("'" + int42 + "' != '" + 53314 + "'", int42 == 53314);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(dateTimeZone50);
// flaky:         org.junit.Assert.assertTrue("'" + int52 + "' != '" + 53314 + "'", int52 == 53314);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 4 + "'", int58 == 4);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "de");
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "de");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "de");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "German" + "'", str68, "German");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "2820889" + "'", str69, "2820889");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "German" + "'", str70, "German");
// flaky:         org.junit.Assert.assertEquals("'" + str71 + "' != '" + "53711967" + "'", str71, "53711967");
    }

    @Test
    public void test11022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11022");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setExtension('x', "jpn");
        java.util.Locale locale4 = builder0.build();
        java.util.Locale locale5 = builder0.build();
        java.util.Locale.Builder builder6 = builder0.clearExtensions();
        java.util.Locale.Builder builder7 = builder6.clearExtensions();
        java.util.Locale.Builder builder8 = builder7.clear();
        java.util.Locale.Builder builder10 = builder7.removeUnicodeLocaleAttribute("50007403");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test11023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11023");
        java.util.Locale locale3 = new java.util.Locale("2022-02-22T00:47:25.506", "2022-02-21T14:46:16.146Z", "2827533");
        java.lang.String str4 = locale3.getLanguage();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str6 = locale3.getUnicodeLocaleType("\uc138\uacc4\ud45c\uc900\uc2dc");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed Unicode locale key: ???? ???????");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(locale3.toString(), "2022-02-22t00:47:25.506_2022-02-21T14:46:16.146Z_2827533");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022-02-22t00:47:25.506" + "'", str4, "2022-02-22t00:47:25.506");
    }

    @Test
    public void test11024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11024");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(49695213, 2978, 53577052, 2977515, 0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2977515 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test11025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11025");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.centuryOfEra();
        org.joda.time.DurationField durationField3 = iSOChronology0.seconds();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.dayOfYear();
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology0.weekyearOfCentury();
        int int7 = dateTimeField5.getMaximumValue(1644850070252L);
        long long9 = dateTimeField5.roundHalfCeiling((long) 2855302);
        long long12 = dateTimeField5.add((-291600000L), 50010457);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 99 + "'", int7 == 99);
// flaky:         org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-53314L) + "'", long9 == (-53314L));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1578177590770800000L + "'", long12 == 1578177590770800000L);
    }

    @Test
    public void test11026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11026");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("\u516c\u5143");
        java.lang.String str2 = timeZone1.getID();
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        int int4 = timeZone1.getRawOffset();
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "GMT" + "'", str2, "GMT");
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
    }

    @Test
    public void test11027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11027");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet1 = locale0.getExtensionKeys();
        java.util.Iterator<java.lang.Character> charItor2 = charSet1.iterator();
        boolean boolean3 = charSet1.isEmpty();
        int int4 = charSet1.size();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet1);
        org.junit.Assert.assertNotNull(charItor2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
    }

    @Test
    public void test11028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11028");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("\uc6d4");
        org.joda.time.chrono.ISOChronology iSOChronology2 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology2.weekOfWeekyear();
        java.util.TimeZone timeZone4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forTimeZone(timeZone4);
        java.lang.String str7 = dateTimeZone5.getName(31556995199999L);
        org.joda.time.Chronology chronology8 = iSOChronology2.withZone(dateTimeZone5);
        org.joda.time.DateTimeField dateTimeField9 = iSOChronology2.halfdayOfDay();
        org.joda.time.DurationField durationField10 = iSOChronology2.weeks();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology2.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology2.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField13 = iSOChronology2.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology2.dayOfYear();
        java.lang.String str15 = iSOChronology2.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((java.lang.Object) "\uc6d4", (org.joda.time.Chronology) iSOChronology2);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"2???\" is malformed at \"???\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(iSOChronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeZone5);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+00:00:53.314" + "'", str7, "+00:00:53.314");
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "ISOChronology[+00:00:53.314]" + "'", str15, "ISOChronology[+00:00:53.314]");
    }

    @Test
    public void test11029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11029");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.centuryOfEra();
        org.joda.time.DurationField durationField3 = iSOChronology0.centuries();
        org.joda.time.DurationField durationField4 = iSOChronology0.hours();
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology0.clockhourOfDay();
        // The following exception was thrown during execution in test generation
        try {
            long long8 = dateTimeField5.add((long) 2929706, (-26630313663431L));
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows a long: -26630313663431 * 3600000");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
    }

    @Test
    public void test11030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11030");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.minuteOfDay();
        org.joda.time.DurationField durationField2 = iSOChronology0.hours();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.era();
        org.joda.time.DurationField durationField5 = iSOChronology0.minutes();
        org.joda.time.chrono.ISOChronology iSOChronology6 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField7 = iSOChronology6.weekOfWeekyear();
        java.util.TimeZone timeZone8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        java.lang.String str11 = dateTimeZone9.getName(31556995199999L);
        org.joda.time.Chronology chronology12 = iSOChronology6.withZone(dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField13 = iSOChronology6.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology6.monthOfYear();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology6.clockhourOfHalfday();
        org.joda.time.DurationField durationField16 = iSOChronology6.seconds();
        org.joda.time.DurationField durationField17 = iSOChronology6.millis();
        int int18 = durationField5.compareTo(durationField17);
        org.joda.time.chrono.ISOChronology iSOChronology19 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField20 = iSOChronology19.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField21 = iSOChronology19.centuryOfEra();
        java.lang.String str22 = iSOChronology19.toString();
        org.joda.time.DateTimeField dateTimeField23 = iSOChronology19.yearOfEra();
        org.joda.time.DurationField durationField24 = iSOChronology19.years();
        int int25 = durationField17.compareTo(durationField24);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(iSOChronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeZone9);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+00:00:53.314" + "'", str11, "+00:00:53.314");
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(iSOChronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "ISOChronology[+00:00:53.314]" + "'", str22, "ISOChronology[+00:00:53.314]");
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
    }

    @Test
    public void test11031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11031");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.hourOfHalfday();
        java.lang.String str2 = iSOChronology0.toString();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.era();
        java.util.TimeZone timeZone4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forTimeZone(timeZone4);
        int int7 = dateTimeZone5.getOffset(100L);
        java.util.TimeZone timeZone8 = dateTimeZone5.toTimeZone();
        java.lang.String str9 = dateTimeZone5.toString();
        org.joda.time.Chronology chronology10 = iSOChronology0.withZone(dateTimeZone5);
        java.util.TimeZone timeZone11 = dateTimeZone5.toTimeZone();
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime(dateTimeZone5);
        java.util.TimeZone timeZone13 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forTimeZone(timeZone13);
        int int16 = dateTimeZone14.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime17 = org.joda.time.LocalDateTime.now(dateTimeZone14);
        int int18 = localDateTime17.getWeekyear();
        org.joda.time.LocalDateTime.Property property19 = localDateTime17.millisOfDay();
        int int20 = property19.get();
        org.joda.time.LocalDateTime localDateTime21 = property19.roundCeilingCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = property19.getFieldType();
        org.joda.time.LocalDateTime.Property property23 = localDateTime12.property(dateTimeFieldType22);
        java.util.TimeZone timeZone24 = null;
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forTimeZone(timeZone24);
        java.lang.String str27 = dateTimeZone25.getName(31556995199999L);
        java.lang.String str28 = dateTimeZone25.getID();
        long long31 = dateTimeZone25.adjustOffset(946684800000L, true);
        java.util.TimeZone timeZone32 = null;
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forTimeZone(timeZone32);
        int int35 = dateTimeZone33.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime36 = org.joda.time.LocalDateTime.now(dateTimeZone33);
        org.joda.time.LocalDateTime localDateTime37 = org.joda.time.LocalDateTime.now(dateTimeZone33);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime37.minusMinutes((int) ' ');
        org.joda.time.LocalDateTime localDateTime41 = localDateTime39.withYearOfCentury((int) (byte) 10);
        java.util.TimeZone timeZone42 = null;
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forTimeZone(timeZone42);
        int int45 = dateTimeZone43.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime46 = org.joda.time.LocalDateTime.now(dateTimeZone43);
        org.joda.time.LocalDateTime localDateTime47 = org.joda.time.LocalDateTime.now(dateTimeZone43);
        org.joda.time.LocalDateTime localDateTime49 = localDateTime47.withMillisOfSecond((int) '4');
        org.joda.time.LocalDateTime localDateTime50 = localDateTime41.withFields((org.joda.time.ReadablePartial) localDateTime47);
        org.joda.time.LocalDateTime localDateTime52 = localDateTime50.plusHours(3);
        java.util.Locale.LanguageRange[] languageRangeArray53 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList54 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList54, languageRangeArray53);
        java.lang.String[] strArray60 = new java.lang.String[] { "jpn", "+00:00", "+00:00", "\uc77c\ubcf8\uc5b4" };
        java.util.ArrayList<java.lang.String> strList61 = new java.util.ArrayList<java.lang.String>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList61, strArray60);
        java.lang.String str63 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList54, (java.util.Collection<java.lang.String>) strList61);
        boolean boolean64 = localDateTime50.equals((java.lang.Object) strList61);
        java.util.TimeZone timeZone65 = null;
        org.joda.time.DateTimeZone dateTimeZone66 = org.joda.time.DateTimeZone.forTimeZone(timeZone65);
        int int68 = dateTimeZone66.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime69 = org.joda.time.LocalDateTime.now(dateTimeZone66);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray70 = localDateTime69.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType71 = org.joda.time.DateTimeFieldType.hourOfDay();
        int int72 = localDateTime69.get(dateTimeFieldType71);
        org.joda.time.LocalDateTime.Property property73 = localDateTime69.dayOfWeek();
        boolean boolean74 = property73.isLeap();
        long long75 = property73.remainder();
        org.joda.time.LocalDateTime localDateTime76 = property73.getLocalDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType77 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.LocalDateTime localDateTime79 = localDateTime76.withField(dateTimeFieldType77, (int) (short) 10);
        int int80 = localDateTime50.indexOf(dateTimeFieldType77);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter81 = null;
        java.lang.String str82 = localDateTime50.toString(dateTimeFormatter81);
        boolean boolean83 = dateTimeZone25.isLocalDateTimeGap(localDateTime50);
        boolean boolean84 = localDateTime12.isAfter((org.joda.time.ReadablePartial) localDateTime50);
        org.joda.time.LocalDateTime localDateTime86 = localDateTime50.plusWeeks(49806117);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ISOChronology[+00:00:53.314]" + "'", str2, "ISOChronology[+00:00:53.314]");
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeZone5);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53314 + "'", int7 == 53314);
        org.junit.Assert.assertNotNull(timeZone8);
// flaky:         org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "GMT+00:00");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00:53.314" + "'", str9, "+00:00:53.314");
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(timeZone11);
// flaky:         org.junit.Assert.assertEquals(timeZone11.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone14);
// flaky:         org.junit.Assert.assertTrue("'" + int16 + "' != '" + 53314 + "'", int16 == 53314);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2022 + "'", int18 == 2022);
        org.junit.Assert.assertNotNull(property19);
// flaky:         org.junit.Assert.assertTrue("'" + int20 + "' != '" + 53712266 + "'", int20 == 53712266);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTimeZone25);
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "+00:00:53.314" + "'", str27, "+00:00:53.314");
// flaky:         org.junit.Assert.assertEquals("'" + str28 + "' != '" + "+00:00:53.314" + "'", str28, "+00:00:53.314");
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 946684800000L + "'", long31 == 946684800000L);
        org.junit.Assert.assertNotNull(dateTimeZone33);
// flaky:         org.junit.Assert.assertTrue("'" + int35 + "' != '" + 53314 + "'", int35 == 53314);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(dateTimeZone43);
// flaky:         org.junit.Assert.assertTrue("'" + int45 + "' != '" + 53314 + "'", int45 == 53314);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(languageRangeArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(dateTimeZone66);
// flaky:         org.junit.Assert.assertTrue("'" + int68 + "' != '" + 53314 + "'", int68 == 53314);
        org.junit.Assert.assertNotNull(localDateTime69);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray70);
        org.junit.Assert.assertNotNull(dateTimeFieldType71);
// flaky:         org.junit.Assert.assertTrue("'" + int72 + "' != '" + 14 + "'", int72 == 14);
        org.junit.Assert.assertNotNull(property73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long75 + "' != '" + 53712266L + "'", long75 == 53712266L);
        org.junit.Assert.assertNotNull(localDateTime76);
        org.junit.Assert.assertNotNull(dateTimeFieldType77);
        org.junit.Assert.assertNotNull(localDateTime79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 1 + "'", int80 == 1);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "2022-02-21T14:55:12.266" + "'", str82, "2022-02-21T14:55:12.266");
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(localDateTime86);
    }

    @Test
    public void test11032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11032");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.weekOfWeekyear();
        java.util.TimeZone timeZone2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone2);
        java.lang.String str5 = dateTimeZone3.getName(31556995199999L);
        org.joda.time.Chronology chronology6 = iSOChronology0.withZone(dateTimeZone3);
        org.joda.time.DateTimeField dateTimeField7 = iSOChronology0.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField8 = iSOChronology0.dayOfWeek();
        java.util.TimeZone timeZone10 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        int int13 = dateTimeZone11.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime14 = org.joda.time.LocalDateTime.now(dateTimeZone11);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = localDateTime14.toDateTime(readableInstant15);
        org.joda.time.Chronology chronology17 = dateTime16.getChronology();
        org.joda.time.DurationField durationField18 = chronology17.hours();
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime((long) 52, chronology17);
        int int20 = localDateTime19.getSecondOfMinute();
        java.util.TimeZone timeZone21 = null;
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forTimeZone(timeZone21);
        int int24 = dateTimeZone22.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime25 = org.joda.time.LocalDateTime.now(dateTimeZone22);
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.DateTime dateTime27 = localDateTime25.toDateTime(readableInstant26);
        java.util.TimeZone timeZone28 = null;
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forTimeZone(timeZone28);
        int int31 = dateTimeZone29.getOffset(100L);
        org.joda.time.DateTime dateTime32 = localDateTime25.toDateTime(dateTimeZone29);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime25.withYear(52);
        org.joda.time.Chronology chronology35 = localDateTime34.getChronology();
        org.joda.time.LocalDateTime localDateTime37 = localDateTime34.withYear((int) (short) 1);
        boolean boolean38 = localDateTime19.equals((java.lang.Object) localDateTime34);
        int[] intArray40 = iSOChronology0.get((org.joda.time.ReadablePartial) localDateTime34, 1645454801920L);
        org.joda.time.Chronology chronology41 = iSOChronology0.withUTC();
        org.joda.time.DurationField durationField42 = iSOChronology0.weeks();
        org.joda.time.DateTimeField dateTimeField43 = iSOChronology0.dayOfMonth();
        org.joda.time.DurationField durationField44 = iSOChronology0.seconds();
        org.joda.time.DateTimeField dateTimeField45 = iSOChronology0.secondOfDay();
        org.joda.time.ReadablePeriod readablePeriod46 = null;
        long long49 = iSOChronology0.add(readablePeriod46, 1644850283022L, 0);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeZone3);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+00:00:53.314" + "'", str5, "+00:00:53.314");
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeZone11);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 53314 + "'", int13 == 53314);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(durationField18);
// flaky:         org.junit.Assert.assertTrue("'" + int20 + "' != '" + 53 + "'", int20 == 53);
        org.junit.Assert.assertNotNull(dateTimeZone22);
// flaky:         org.junit.Assert.assertTrue("'" + int24 + "' != '" + 53314 + "'", int24 == 53314);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTimeZone29);
// flaky:         org.junit.Assert.assertTrue("'" + int31 + "' != '" + 53314 + "'", int31 == 53314);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(intArray40);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[2022, 2, 21, 53255234]");
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(durationField44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 1644850283022L + "'", long49 == 1644850283022L);
    }

    @Test
    public void test11033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11033");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        java.util.TimeZone timeZone1 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        int int4 = dateTimeZone2.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime5 = org.joda.time.LocalDateTime.now(dateTimeZone2);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray6 = localDateTime5.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.hourOfDay();
        int int8 = localDateTime5.get(dateTimeFieldType7);
        org.joda.time.LocalDateTime.Property property9 = localDateTime5.dayOfWeek();
        boolean boolean10 = localDateTime0.isEqual((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.LocalDateTime.Property property11 = localDateTime5.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime5.withMillisOfDay(2833287);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime5.plusMonths(1456);
        org.joda.time.LocalDateTime.Property property16 = localDateTime15.hourOfDay();
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime.Property property18 = localDateTime17.secondOfMinute();
        int int19 = localDateTime17.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime17.withYearOfEra(681);
        boolean boolean22 = localDateTime15.isEqual((org.joda.time.ReadablePartial) localDateTime21);
        org.joda.time.ReadableDuration readableDuration23 = null;
        org.joda.time.LocalDateTime localDateTime25 = localDateTime21.withDurationAdded(readableDuration23, 64122284);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(dateTimeZone2);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 53314 + "'", int4 == 53314);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 14 + "'", int8 == 14);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 22 + "'", int19 == 22);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(localDateTime25);
    }

    @Test
    public void test11034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11034");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.yearOfEra();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.weekOfWeekyear();
        org.joda.time.DurationField durationField5 = iSOChronology0.weekyears();
        org.joda.time.Chronology chronology6 = iSOChronology0.withUTC();
        org.joda.time.DateTimeField dateTimeField7 = iSOChronology0.monthOfYear();
        org.joda.time.DurationField durationField8 = iSOChronology0.hours();
        org.joda.time.DateTimeField dateTimeField9 = iSOChronology0.minuteOfHour();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
    }

    @Test
    public void test11035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11035");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        int int5 = localDateTime4.getWeekyear();
        org.joda.time.LocalDateTime.Property property6 = localDateTime4.millisOfDay();
        java.util.TimeZone timeZone7 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forTimeZone(timeZone7);
        int int10 = dateTimeZone8.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now(dateTimeZone8);
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.DateTime dateTime13 = localDateTime11.toDateTime(readableInstant12);
        java.util.TimeZone timeZone14 = null;
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forTimeZone(timeZone14);
        int int17 = dateTimeZone15.getOffset(100L);
        org.joda.time.DateTime dateTime18 = localDateTime11.toDateTime(dateTimeZone15);
        int int19 = property6.compareTo((org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.LocalDateTime localDateTime20 = property6.roundHalfEvenCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.LocalDateTime.Property property22 = localDateTime20.property(dateTimeFieldType21);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.Chronology chronology24 = null;
        boolean boolean25 = dateTimeFieldType23.isSupported(chronology24);
        boolean boolean26 = localDateTime20.isSupported(dateTimeFieldType23);
        org.joda.time.chrono.ISOChronology iSOChronology27 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField28 = iSOChronology27.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField29 = iSOChronology27.centuryOfEra();
        org.joda.time.DurationField durationField30 = iSOChronology27.centuries();
        org.joda.time.DurationField durationField31 = iSOChronology27.hours();
        org.joda.time.DurationField durationField32 = iSOChronology27.years();
        org.joda.time.DurationField durationField33 = iSOChronology27.halfdays();
        org.joda.time.DateTimeField dateTimeField34 = iSOChronology27.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField35 = dateTimeFieldType23.getField((org.joda.time.Chronology) iSOChronology27);
        java.util.TimeZone timeZone36 = null;
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forTimeZone(timeZone36);
        int int39 = dateTimeZone37.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime40 = org.joda.time.LocalDateTime.now(dateTimeZone37);
        org.joda.time.ReadableInstant readableInstant41 = null;
        org.joda.time.DateTime dateTime42 = localDateTime40.toDateTime(readableInstant41);
        java.util.TimeZone timeZone43 = null;
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forTimeZone(timeZone43);
        int int46 = dateTimeZone44.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime47 = org.joda.time.LocalDateTime.now(dateTimeZone44);
        org.joda.time.LocalDateTime localDateTime48 = org.joda.time.LocalDateTime.now(dateTimeZone44);
        org.joda.time.LocalDateTime localDateTime50 = localDateTime48.minusYears(2022);
        org.joda.time.LocalDateTime.Property property51 = localDateTime50.era();
        int int52 = localDateTime40.compareTo((org.joda.time.ReadablePartial) localDateTime50);
        org.joda.time.DateTimeFieldType dateTimeFieldType53 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int54 = localDateTime40.get(dateTimeFieldType53);
        org.joda.time.LocalDateTime localDateTime56 = localDateTime40.plusSeconds(2805);
        org.joda.time.ReadablePeriod readablePeriod57 = null;
        org.joda.time.LocalDateTime localDateTime58 = localDateTime56.plus(readablePeriod57);
        org.joda.time.DateTimeFieldType dateTimeFieldType59 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.chrono.ISOChronology iSOChronology60 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField61 = iSOChronology60.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField62 = iSOChronology60.centuryOfEra();
        org.joda.time.DurationField durationField63 = iSOChronology60.centuries();
        org.joda.time.DurationField durationField64 = iSOChronology60.hours();
        boolean boolean65 = dateTimeFieldType59.isSupported((org.joda.time.Chronology) iSOChronology60);
        org.joda.time.LocalDateTime localDateTime67 = localDateTime58.withField(dateTimeFieldType59, 2833465);
        java.util.Locale locale68 = java.util.Locale.GERMAN;
        java.util.Locale locale69 = java.util.Locale.GERMAN;
        java.lang.String str70 = locale68.getDisplayCountry(locale69);
        java.util.Set<java.lang.String> strSet71 = locale69.getUnicodeLocaleKeys();
        java.lang.String str72 = dateTimeField35.getAsShortText((org.joda.time.ReadablePartial) localDateTime67, locale69);
        org.joda.time.LocalDateTime localDateTime74 = localDateTime67.plusSeconds(49681802);
        org.joda.time.LocalDateTime localDateTime76 = localDateTime67.withYearOfEra(49789802);
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53314 + "'", int3 == 53314);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2022 + "'", int5 == 2022);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTimeZone8);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 53314 + "'", int10 == 53314);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
// flaky:         org.junit.Assert.assertTrue("'" + int17 + "' != '" + 53314 + "'", int17 == 53314);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(iSOChronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeZone37);
// flaky:         org.junit.Assert.assertTrue("'" + int39 + "' != '" + 53314 + "'", int39 == 53314);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTimeZone44);
// flaky:         org.junit.Assert.assertTrue("'" + int46 + "' != '" + 53314 + "'", int46 == 53314);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType53);
// flaky:         org.junit.Assert.assertTrue("'" + int54 + "' != '" + 53712453 + "'", int54 == 53712453);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(dateTimeFieldType59);
        org.junit.Assert.assertNotNull(iSOChronology60);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertNotNull(durationField63);
        org.junit.Assert.assertNotNull(durationField64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "de");
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "de");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertNotNull(strSet71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "52" + "'", str72, "52");
        org.junit.Assert.assertNotNull(localDateTime74);
        org.junit.Assert.assertNotNull(localDateTime76);
    }

    @Test
    public void test11036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11036");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.yearOfEra();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology0.dayOfYear();
        org.joda.time.DurationField durationField6 = iSOChronology0.centuries();
        org.joda.time.DateTimeField dateTimeField7 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone8 = iSOChronology0.getZone();
        org.joda.time.DateTimeField dateTimeField9 = iSOChronology0.yearOfEra();
        // The following exception was thrown during execution in test generation
        try {
            long long17 = iSOChronology0.getDateTimeMillis(49830868, 2014, 960, 268, 49795, 53589191, 2720660);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 268 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(dateTimeField9);
    }

    @Test
    public void test11037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11037");
        org.joda.time.chrono.ISOChronology iSOChronology1 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology1.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology1.yearOfEra();
        org.joda.time.DurationField durationField4 = iSOChronology1.minutes();
        org.joda.time.DurationField durationField5 = iSOChronology1.months();
        org.joda.time.DurationField durationField6 = iSOChronology1.weekyears();
        org.joda.time.DateTimeField dateTimeField7 = iSOChronology1.hourOfDay();
        org.joda.time.DurationField durationField8 = iSOChronology1.minutes();
        org.joda.time.DateTimeField dateTimeField9 = iSOChronology1.secondOfDay();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime(1677759687100800000L, (org.joda.time.Chronology) iSOChronology1);
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology1.year();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology1.yearOfEra();
        org.junit.Assert.assertNotNull(iSOChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
    }

    @Test
    public void test11038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11038");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.hourOfHalfday();
        org.joda.time.tz.NameProvider nameProvider2 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale3 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet4 = locale3.getExtensionKeys();
        java.lang.String str7 = nameProvider2.getShortName(locale3, "Koordinierte Universalzeit", "+00:00");
        java.util.Locale locale8 = java.util.Locale.GERMAN;
        java.lang.String str11 = nameProvider2.getShortName(locale8, "53167803", "jpn");
        int int12 = dateTimeField1.getMaximumTextLength(locale8);
        java.util.TimeZone timeZone13 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forTimeZone(timeZone13);
        int int16 = dateTimeZone14.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime17 = org.joda.time.LocalDateTime.now(dateTimeZone14);
        int int18 = localDateTime17.getWeekyear();
        org.joda.time.tz.NameProvider nameProvider20 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale21 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet22 = locale21.getExtensionKeys();
        java.lang.String str25 = nameProvider20.getShortName(locale21, "Koordinierte Universalzeit", "+00:00");
        java.util.Locale.Builder builder26 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder29 = builder26.setExtension('x', "jpn");
        java.util.Locale locale30 = java.util.Locale.GERMAN;
        java.util.Locale locale31 = java.util.Locale.GERMAN;
        java.lang.String str32 = locale30.getDisplayCountry(locale31);
        java.util.Locale locale33 = locale30.stripExtensions();
        java.lang.String str34 = locale30.getDisplayName();
        java.util.Locale.Builder builder35 = builder29.setLocale(locale30);
        java.util.Locale locale36 = builder35.build();
        java.lang.String str37 = locale36.getScript();
        java.lang.String str40 = nameProvider20.getName(locale36, "hourOfDay", "");
        java.lang.String str41 = dateTimeField1.getAsShortText((org.joda.time.ReadablePartial) localDateTime17, 22, locale36);
        java.lang.String str42 = locale36.toLanguageTag();
        java.lang.String str43 = locale36.getDisplayLanguage();
        java.lang.String str44 = locale36.getDisplayLanguage();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(nameProvider2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet4);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "de");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertNotNull(dateTimeZone14);
// flaky:         org.junit.Assert.assertTrue("'" + int16 + "' != '" + 53314 + "'", int16 == 53314);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2022 + "'", int18 == 2022);
        org.junit.Assert.assertNotNull(nameProvider20);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet22);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "de");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "de");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "de");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "German" + "'", str34, "German");
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "de");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "22" + "'", str41, "22");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "de" + "'", str42, "de");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "German" + "'", str43, "German");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "German" + "'", str44, "German");
    }

    @Test
    public void test11039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11039");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime5 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusMinutes((int) ' ');
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withYearOfCentury((int) (byte) 10);
        java.util.TimeZone timeZone10 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        int int13 = dateTimeZone11.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime14 = org.joda.time.LocalDateTime.now(dateTimeZone11);
        org.joda.time.LocalDateTime localDateTime15 = org.joda.time.LocalDateTime.now(dateTimeZone11);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.withMillisOfSecond((int) '4');
        org.joda.time.LocalDateTime localDateTime18 = localDateTime9.withFields((org.joda.time.ReadablePartial) localDateTime15);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.plusHours(3);
        java.util.Locale.LanguageRange[] languageRangeArray21 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList22 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList22, languageRangeArray21);
        java.lang.String[] strArray28 = new java.lang.String[] { "jpn", "+00:00", "+00:00", "\uc77c\ubcf8\uc5b4" };
        java.util.ArrayList<java.lang.String> strList29 = new java.util.ArrayList<java.lang.String>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList29, strArray28);
        java.lang.String str31 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList22, (java.util.Collection<java.lang.String>) strList29);
        boolean boolean32 = localDateTime18.equals((java.lang.Object) strList29);
        java.util.TimeZone timeZone33 = null;
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forTimeZone(timeZone33);
        int int36 = dateTimeZone34.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime37 = org.joda.time.LocalDateTime.now(dateTimeZone34);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray38 = localDateTime37.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = org.joda.time.DateTimeFieldType.hourOfDay();
        int int40 = localDateTime37.get(dateTimeFieldType39);
        org.joda.time.LocalDateTime.Property property41 = localDateTime37.dayOfWeek();
        boolean boolean42 = property41.isLeap();
        long long43 = property41.remainder();
        org.joda.time.LocalDateTime localDateTime44 = property41.getLocalDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType45 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.LocalDateTime localDateTime47 = localDateTime44.withField(dateTimeFieldType45, (int) (short) 10);
        int int48 = localDateTime18.indexOf(dateTimeFieldType45);
        int int49 = localDateTime18.getCenturyOfEra();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53314 + "'", int3 == 53314);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone11);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 53314 + "'", int13 == 53314);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(languageRangeArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(dateTimeZone34);
// flaky:         org.junit.Assert.assertTrue("'" + int36 + "' != '" + 53314 + "'", int36 == 53314);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray38);
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
// flaky:         org.junit.Assert.assertTrue("'" + int40 + "' != '" + 14 + "'", int40 == 14);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long43 + "' != '" + 53712596L + "'", long43 == 53712596L);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(dateTimeFieldType45);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 20 + "'", int49 == 20);
    }

    @Test
    public void test11040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11040");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet1 = locale0.getExtensionKeys();
        java.util.Iterator<java.lang.Character> charItor2 = charSet1.iterator();
        java.util.Locale locale3 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet4 = locale3.getExtensionKeys();
        java.util.Iterator<java.lang.Character> charItor5 = charSet4.iterator();
        boolean boolean6 = charSet1.containsAll((java.util.Collection<java.lang.Character>) charSet4);
        java.util.Locale.Builder builder7 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder10 = builder7.setExtension('x', "jpn");
        java.util.Locale locale11 = java.util.Locale.GERMAN;
        java.util.Locale locale12 = java.util.Locale.GERMAN;
        java.lang.String str13 = locale11.getDisplayCountry(locale12);
        java.util.Locale locale14 = locale11.stripExtensions();
        java.lang.String str15 = locale11.getDisplayName();
        java.util.Locale.Builder builder16 = builder10.setLocale(locale11);
        java.util.Locale.Builder builder18 = builder16.setLanguageTag("Februar");
        boolean boolean19 = charSet4.remove((java.lang.Object) builder18);
        java.util.Locale.Builder builder20 = builder18.clear();
        java.util.Locale.Builder builder22 = builder20.setVariant("2803637");
        java.util.Locale.Builder builder23 = builder22.clear();
        java.util.Locale.Builder builder25 = builder23.setLanguageTag("German");
        java.util.Locale.Builder builder28 = builder25.setExtension('a', "1380");
        java.util.Locale.Builder builder31 = builder28.setExtension('a', "");
        java.util.Locale.Builder builder32 = builder28.clear();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet1);
        org.junit.Assert.assertNotNull(charItor2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet4);
        org.junit.Assert.assertNotNull(charItor5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "de");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "de");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "de");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "German" + "'", str15, "German");
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder32);
    }

    @Test
    public void test11041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11041");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.centuryOfEra();
        org.joda.time.DurationField durationField3 = iSOChronology0.centuries();
        org.joda.time.DurationField durationField4 = iSOChronology0.hours();
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        int int8 = dateTimeZone6.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime9 = org.joda.time.LocalDateTime.now(dateTimeZone6);
        int int10 = localDateTime9.getDayOfYear();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime9.withYearOfEra(2022);
        long long14 = iSOChronology0.set((org.joda.time.ReadablePartial) localDateTime12, (long) 0);
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology0.monthOfYear();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology0.millisOfSecond();
        org.joda.time.DurationField durationField17 = iSOChronology0.months();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology0.dayOfWeek();
        long long20 = dateTimeField18.roundHalfFloor((long) 2847);
        java.util.Locale locale24 = new java.util.Locale("53168129", "1");
        java.lang.String str25 = dateTimeField18.getAsText(0, locale24);
        java.util.TimeZone timeZone26 = null;
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forTimeZone(timeZone26);
        int int29 = dateTimeZone27.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime30 = org.joda.time.LocalDateTime.now(dateTimeZone27);
        int int31 = localDateTime30.getWeekyear();
        org.joda.time.LocalDateTime.Property property32 = localDateTime30.minuteOfHour();
        org.joda.time.LocalDateTime.Property property33 = localDateTime30.dayOfYear();
        java.util.TimeZone timeZone34 = null;
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forTimeZone(timeZone34);
        int int37 = dateTimeZone35.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime38 = org.joda.time.LocalDateTime.now(dateTimeZone35);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray39 = localDateTime38.getFieldTypes();
        int int40 = property33.compareTo((org.joda.time.ReadablePartial) localDateTime38);
        int int41 = localDateTime38.getCenturyOfEra();
        org.joda.time.ReadablePeriod readablePeriod42 = null;
        org.joda.time.LocalDateTime localDateTime43 = localDateTime38.plus(readablePeriod42);
        org.joda.time.LocalDateTime.Property property44 = localDateTime38.hourOfDay();
        org.joda.time.LocalDateTime localDateTime46 = localDateTime38.minusYears(2818);
        java.util.TimeZone timeZone47 = null;
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.forTimeZone(timeZone47);
        int int50 = dateTimeZone48.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime51 = org.joda.time.LocalDateTime.now(dateTimeZone48);
        org.joda.time.ReadableInstant readableInstant52 = null;
        org.joda.time.DateTime dateTime53 = localDateTime51.toDateTime(readableInstant52);
        java.util.TimeZone timeZone54 = null;
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.forTimeZone(timeZone54);
        int int57 = dateTimeZone55.getOffset(100L);
        org.joda.time.DateTime dateTime58 = localDateTime51.toDateTime(dateTimeZone55);
        org.joda.time.LocalDateTime localDateTime60 = localDateTime51.withYear(52);
        java.util.Locale locale62 = java.util.Locale.ITALIAN;
        java.lang.String str63 = localDateTime60.toString("1", locale62);
        org.joda.time.chrono.ISOChronology iSOChronology64 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField65 = iSOChronology64.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField66 = iSOChronology64.yearOfEra();
        org.joda.time.DateTimeField dateTimeField67 = iSOChronology64.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField68 = iSOChronology64.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField69 = iSOChronology64.dayOfYear();
        java.util.TimeZone timeZone70 = null;
        org.joda.time.DateTimeZone dateTimeZone71 = org.joda.time.DateTimeZone.forTimeZone(timeZone70);
        java.lang.String str73 = dateTimeZone71.getName(31556995199999L);
        java.lang.String str74 = dateTimeZone71.getID();
        org.joda.time.Chronology chronology75 = iSOChronology64.withZone(dateTimeZone71);
        org.joda.time.DateTime dateTime76 = localDateTime60.toDateTime(dateTimeZone71);
        org.joda.time.Chronology chronology77 = localDateTime60.getChronology();
        int int78 = localDateTime46.compareTo((org.joda.time.ReadablePartial) localDateTime60);
        org.joda.time.LocalDateTime localDateTime80 = localDateTime46.minusYears(49714);
        org.joda.time.ReadablePeriod readablePeriod81 = null;
        org.joda.time.LocalDateTime localDateTime83 = localDateTime46.withPeriodAdded(readablePeriod81, 53568884);
        boolean boolean84 = locale24.equals((java.lang.Object) localDateTime46);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 53314 + "'", int8 == 53314);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 52 + "'", int10 == 52);
        org.junit.Assert.assertNotNull(localDateTime12);
// flaky:         org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1645455259341L + "'", long14 == 1645455259341L);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
// flaky:         org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-53314L) + "'", long20 == (-53314L));
        org.junit.Assert.assertEquals(locale24.toString(), "53168129_1");
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(dateTimeZone27);
// flaky:         org.junit.Assert.assertTrue("'" + int29 + "' != '" + 53314 + "'", int29 == 53314);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2022 + "'", int31 == 2022);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(dateTimeZone35);
// flaky:         org.junit.Assert.assertTrue("'" + int37 + "' != '" + 53314 + "'", int37 == 53314);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 20 + "'", int41 == 20);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(dateTimeZone48);
// flaky:         org.junit.Assert.assertTrue("'" + int50 + "' != '" + 53314 + "'", int50 == 53314);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTimeZone55);
// flaky:         org.junit.Assert.assertTrue("'" + int57 + "' != '" + 53314 + "'", int57 == 53314);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "it");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "1" + "'", str63, "1");
        org.junit.Assert.assertNotNull(iSOChronology64);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertNotNull(dateTimeField69);
        org.junit.Assert.assertNotNull(dateTimeZone71);
// flaky:         org.junit.Assert.assertEquals("'" + str73 + "' != '" + "+00:00:53.314" + "'", str73, "+00:00:53.314");
// flaky:         org.junit.Assert.assertEquals("'" + str74 + "' != '" + "+00:00:53.314" + "'", str74, "+00:00:53.314");
        org.junit.Assert.assertNotNull(chronology75);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(chronology77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + (-1) + "'", int78 == (-1));
        org.junit.Assert.assertNotNull(localDateTime80);
        org.junit.Assert.assertNotNull(localDateTime83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
    }

    @Test
    public void test11042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11042");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.yearOfEra();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.weekOfWeekyear();
        org.joda.time.DurationField durationField5 = iSOChronology0.weekyears();
        org.joda.time.Chronology chronology6 = iSOChronology0.withUTC();
        org.joda.time.DateTimeField dateTimeField7 = iSOChronology0.monthOfYear();
        org.joda.time.DurationField durationField8 = iSOChronology0.hours();
        org.joda.time.DateTimeField dateTimeField9 = iSOChronology0.centuryOfEra();
        java.lang.String str10 = dateTimeField9.toString();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "DateTimeField[centuryOfEra]" + "'", str10, "DateTimeField[centuryOfEra]");
    }

    @Test
    public void test11043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11043");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        int int5 = localDateTime4.getWeekyear();
        org.joda.time.LocalDateTime.Property property6 = localDateTime4.millisOfDay();
        java.util.Locale locale7 = java.util.Locale.GERMAN;
        java.util.Locale locale8 = java.util.Locale.GERMAN;
        java.lang.String str9 = locale7.getDisplayCountry(locale8);
        java.util.Locale locale10 = locale7.stripExtensions();
        int int11 = property6.getMaximumShortTextLength(locale7);
        org.joda.time.Interval interval12 = property6.toInterval();
        org.joda.time.LocalDateTime localDateTime13 = property6.getLocalDateTime();
        int int14 = localDateTime13.getYearOfEra();
        int int15 = localDateTime13.getYearOfCentury();
        org.joda.time.LocalDateTime.Property property16 = localDateTime13.minuteOfHour();
        org.joda.time.LocalDateTime.Property property17 = localDateTime13.hourOfDay();
        java.util.TimeZone timeZone18 = null;
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forTimeZone(timeZone18);
        int int21 = dateTimeZone19.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime22 = org.joda.time.LocalDateTime.now(dateTimeZone19);
        org.joda.time.LocalDateTime localDateTime23 = org.joda.time.LocalDateTime.now(dateTimeZone19);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.plusSeconds((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime23.minusWeeks((int) (byte) 10);
        org.joda.time.chrono.ISOChronology iSOChronology28 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField29 = iSOChronology28.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField30 = iSOChronology28.yearOfEra();
        org.joda.time.DateTimeField dateTimeField31 = iSOChronology28.hourOfDay();
        org.joda.time.DateTimeField dateTimeField32 = iSOChronology28.clockhourOfDay();
        java.util.TimeZone timeZone33 = null;
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forTimeZone(timeZone33);
        int int36 = dateTimeZone34.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime37 = org.joda.time.LocalDateTime.now(dateTimeZone34);
        org.joda.time.ReadableInstant readableInstant38 = null;
        org.joda.time.DateTime dateTime39 = localDateTime37.toDateTime(readableInstant38);
        org.joda.time.Chronology chronology40 = dateTime39.getChronology();
        org.joda.time.DurationField durationField41 = chronology40.hours();
        org.joda.time.DurationField durationField42 = chronology40.months();
        org.joda.time.DateTimeField dateTimeField43 = chronology40.dayOfYear();
        java.util.TimeZone timeZone44 = null;
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forTimeZone(timeZone44);
        int int47 = dateTimeZone45.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime48 = org.joda.time.LocalDateTime.now(dateTimeZone45);
        int[] intArray51 = new int[] { (short) 0, (short) 0 };
        int int52 = dateTimeField43.getMinimumValue((org.joda.time.ReadablePartial) localDateTime48, intArray51);
        java.lang.String str54 = dateTimeField43.getAsShortText((long) 53166088);
        java.util.TimeZone timeZone55 = null;
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.forTimeZone(timeZone55);
        int int58 = dateTimeZone56.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime59 = org.joda.time.LocalDateTime.now(dateTimeZone56);
        int int60 = localDateTime59.getWeekyear();
        org.joda.time.DurationFieldType durationFieldType61 = org.joda.time.DurationFieldType.days();
        org.joda.time.LocalDateTime localDateTime63 = localDateTime59.withFieldAdded(durationFieldType61, 53166088);
        java.util.Locale locale64 = java.util.Locale.ROOT;
        java.lang.String str65 = dateTimeField43.getAsShortText((org.joda.time.ReadablePartial) localDateTime63, locale64);
        java.util.TimeZone timeZone66 = null;
        org.joda.time.DateTimeZone dateTimeZone67 = org.joda.time.DateTimeZone.forTimeZone(timeZone66);
        int int69 = dateTimeZone67.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime70 = org.joda.time.LocalDateTime.now(dateTimeZone67);
        int int71 = localDateTime70.getWeekyear();
        boolean boolean72 = localDateTime63.isEqual((org.joda.time.ReadablePartial) localDateTime70);
        org.joda.time.LocalDateTime localDateTime74 = localDateTime63.plusDays(11);
        java.util.Locale locale76 = null;
        java.lang.String str77 = dateTimeField32.getAsShortText((org.joda.time.ReadablePartial) localDateTime63, 14, locale76);
        org.joda.time.DateTimeFieldType dateTimeFieldType79 = localDateTime63.getFieldType(0);
        boolean boolean80 = localDateTime23.isSupported(dateTimeFieldType79);
        org.joda.time.LocalDateTime localDateTime82 = localDateTime23.minusYears(56);
        org.joda.time.LocalDateTime.Property property83 = localDateTime23.era();
        org.joda.time.ReadablePeriod readablePeriod84 = null;
        org.joda.time.LocalDateTime localDateTime85 = localDateTime23.plus(readablePeriod84);
        int int86 = localDateTime85.size();
        org.joda.time.LocalDateTime localDateTime88 = localDateTime85.withWeekyear(49680496);
        boolean boolean89 = localDateTime13.isBefore((org.joda.time.ReadablePartial) localDateTime85);
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53314 + "'", int3 == 53314);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2022 + "'", int5 == 2022);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "de");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "de");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "de");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 8 + "'", int11 == 8);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2022 + "'", int14 == 2022);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 22 + "'", int15 == 22);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTimeZone19);
// flaky:         org.junit.Assert.assertTrue("'" + int21 + "' != '" + 53314 + "'", int21 == 53314);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(iSOChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeZone34);
// flaky:         org.junit.Assert.assertTrue("'" + int36 + "' != '" + 53314 + "'", int36 == 53314);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(durationField41);
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTimeZone45);
// flaky:         org.junit.Assert.assertTrue("'" + int47 + "' != '" + 53314 + "'", int47 == 53314);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[0, 0]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "1" + "'", str54, "1");
        org.junit.Assert.assertNotNull(dateTimeZone56);
// flaky:         org.junit.Assert.assertTrue("'" + int58 + "' != '" + 53314 + "'", int58 == 53314);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 2022 + "'", int60 == 2022);
        org.junit.Assert.assertNotNull(durationFieldType61);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "346" + "'", str65, "346");
        org.junit.Assert.assertNotNull(dateTimeZone67);
// flaky:         org.junit.Assert.assertTrue("'" + int69 + "' != '" + 53314 + "'", int69 == 53314);
        org.junit.Assert.assertNotNull(localDateTime70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 2022 + "'", int71 == 2022);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(localDateTime74);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "14" + "'", str77, "14");
        org.junit.Assert.assertNotNull(dateTimeFieldType79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertNotNull(localDateTime82);
        org.junit.Assert.assertNotNull(property83);
        org.junit.Assert.assertNotNull(localDateTime85);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 4 + "'", int86 == 4);
        org.junit.Assert.assertNotNull(localDateTime88);
// flaky:         org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
    }

    @Test
    public void test11044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11044");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.Chronology chronology3 = localDateTime2.getChronology();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.plusHours(2944751);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime7 = localDateTime5.withDayOfYear(53463363);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 53463363 for dayOfYear must be in the range [1,365]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(localDateTime5);
    }

    @Test
    public void test11045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11045");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        int int5 = localDateTime4.getWeekyear();
        org.joda.time.LocalDateTime.Property property6 = localDateTime4.minuteOfHour();
        long long7 = property6.remainder();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = property6.getFieldType();
        java.util.Locale.Builder builder9 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder12 = builder9.setExtension('x', "jpn");
        java.util.Locale locale13 = java.util.Locale.GERMAN;
        java.util.Locale locale14 = java.util.Locale.GERMAN;
        java.lang.String str15 = locale13.getDisplayCountry(locale14);
        java.util.Locale locale16 = locale13.stripExtensions();
        java.lang.String str17 = locale13.getDisplayName();
        java.util.Locale.Builder builder18 = builder12.setLocale(locale13);
        java.util.Locale.Builder builder21 = builder18.setUnicodeLocaleKeyword("22", "deu");
        java.util.Locale.Builder builder22 = builder18.clearExtensions();
        java.util.Locale.Builder builder24 = builder22.setVariant("2807744");
        java.util.Locale locale25 = builder24.build();
        int int26 = property6.getMaximumTextLength(locale25);
        java.util.Locale locale28 = java.util.Locale.forLanguageTag("ja");
        java.util.Set<java.lang.Character> charSet29 = locale28.getExtensionKeys();
        java.lang.String str30 = property6.getAsShortText(locale28);
        org.joda.time.LocalDateTime localDateTime31 = property6.roundHalfCeilingCopy();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53314 + "'", int3 == 53314);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2022 + "'", int5 == 2022);
        org.junit.Assert.assertNotNull(property6);
// flaky:         org.junit.Assert.assertTrue("'" + long7 + "' != '" + 12851L + "'", long7 == 12851L);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "de");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "de");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "de");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "German" + "'", str17, "German");
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "de__2807744");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "ja");
        org.junit.Assert.assertNotNull(charSet29);
// flaky:         org.junit.Assert.assertEquals("'" + str30 + "' != '" + "55" + "'", str30, "55");
        org.junit.Assert.assertNotNull(localDateTime31);
    }

    @Test
    public void test11046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11046");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.DateTime dateTime6 = localDateTime4.toDateTime(readableInstant5);
        org.joda.time.Chronology chronology7 = dateTime6.getChronology();
        org.joda.time.DurationField durationField8 = chronology7.hours();
        org.joda.time.DurationField durationField9 = chronology7.months();
        org.joda.time.DateTimeField dateTimeField10 = chronology7.dayOfYear();
        java.util.TimeZone timeZone11 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        int int14 = dateTimeZone12.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime15 = org.joda.time.LocalDateTime.now(dateTimeZone12);
        int[] intArray18 = new int[] { (short) 0, (short) 0 };
        int int19 = dateTimeField10.getMinimumValue((org.joda.time.ReadablePartial) localDateTime15, intArray18);
        int int21 = dateTimeField10.getMinimumValue((long) 100);
        java.util.TimeZone timeZone22 = null;
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        int int25 = dateTimeZone23.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime26 = org.joda.time.LocalDateTime.now(dateTimeZone23);
        int int27 = localDateTime26.getWeekyear();
        org.joda.time.LocalDateTime.Property property28 = localDateTime26.minuteOfHour();
        int int29 = dateTimeField10.getMaximumValue((org.joda.time.ReadablePartial) localDateTime26);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime26.withCenturyOfEra(1);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime26.minusMinutes((int) ' ');
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.Chronology chronology35 = null;
        boolean boolean36 = dateTimeFieldType34.isSupported(chronology35);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime33.withField(dateTimeFieldType34, 11);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime33.plusWeeks(2);
        java.util.TimeZone timeZone41 = null;
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forTimeZone(timeZone41);
        int int44 = dateTimeZone42.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime45 = org.joda.time.LocalDateTime.now(dateTimeZone42);
        int int46 = localDateTime45.getWeekyear();
        org.joda.time.LocalDateTime localDateTime48 = localDateTime45.withSecondOfMinute((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime50 = localDateTime48.minusMillis((-292275054));
        org.joda.time.format.DateTimeFormatter dateTimeFormatter51 = null;
        java.lang.String str52 = localDateTime50.toString(dateTimeFormatter51);
        org.joda.time.DateTimeFieldType dateTimeFieldType53 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DurationFieldType durationFieldType54 = dateTimeFieldType53.getDurationType();
        java.lang.String str55 = dateTimeFieldType53.getName();
        int int56 = localDateTime50.get(dateTimeFieldType53);
        boolean boolean57 = localDateTime33.isSupported(dateTimeFieldType53);
        int int58 = localDateTime33.getWeekyear();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53314 + "'", int3 == 53314);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeZone12);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 53314 + "'", int14 == 53314);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[0, 0]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(dateTimeZone23);
// flaky:         org.junit.Assert.assertTrue("'" + int25 + "' != '" + 53314 + "'", int25 == 53314);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2022 + "'", int27 == 2022);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 365 + "'", int29 == 365);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(dateTimeZone42);
// flaky:         org.junit.Assert.assertTrue("'" + int44 + "' != '" + 53314 + "'", int44 == 53314);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2022 + "'", int46 == 2022);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(localDateTime50);
// flaky:         org.junit.Assert.assertEquals("'" + str52 + "' != '" + "2022-02-25T00:06:25.937" + "'", str52, "2022-02-25T00:06:25.937");
        org.junit.Assert.assertNotNull(dateTimeFieldType53);
        org.junit.Assert.assertNotNull(durationFieldType54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "year" + "'", str55, "year");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 2022 + "'", int56 == 2022);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 2022 + "'", int58 == 2022);
    }

    @Test
    public void test11047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11047");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.hourOfHalfday();
        java.lang.String str2 = iSOChronology0.toString();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.era();
        org.joda.time.Chronology chronology4 = iSOChronology0.withUTC();
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        long long8 = iSOChronology0.add(readablePeriod5, 38469L, 110);
        org.joda.time.DateTimeField dateTimeField9 = iSOChronology0.yearOfCentury();
        org.joda.time.DurationField durationField10 = iSOChronology0.years();
        org.joda.time.Chronology chronology11 = iSOChronology0.withUTC();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ISOChronology[+00:00:53.314]" + "'", str2, "ISOChronology[+00:00:53.314]");
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 38469L + "'", long8 == 38469L);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(chronology11);
    }

    @Test
    public void test11048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11048");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.minuteOfHour();
        org.joda.time.Chronology chronology4 = iSOChronology0.withUTC();
        org.joda.time.DurationField durationField5 = iSOChronology0.eras();
        org.joda.time.DateTimeField dateTimeField6 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField7 = iSOChronology0.weekOfWeekyear();
        java.lang.String str8 = iSOChronology0.toString();
        org.joda.time.DateTimeField dateTimeField9 = iSOChronology0.centuryOfEra();
        java.util.Locale.Builder builder10 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder13 = builder10.setExtension('x', "jpn");
        java.util.Locale locale14 = builder10.build();
        java.util.Locale locale15 = builder10.build();
        java.util.Locale.Builder builder16 = builder10.clearExtensions();
        java.util.TimeZone timeZone17 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forTimeZone(timeZone17);
        int int20 = dateTimeZone18.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime21 = org.joda.time.LocalDateTime.now(dateTimeZone18);
        int int22 = localDateTime21.getWeekyear();
        org.joda.time.LocalDateTime.Property property23 = localDateTime21.millisOfDay();
        java.util.Locale locale24 = java.util.Locale.KOREAN;
        java.lang.String str25 = property23.getAsText(locale24);
        java.lang.String str26 = locale24.getCountry();
        java.util.Locale.Builder builder27 = builder16.setLocale(locale24);
        java.util.Locale.Builder builder29 = builder27.setLanguage("AD");
        java.util.Locale.Builder builder31 = builder29.setLanguage("weekyear");
        java.util.Locale.Builder builder33 = builder31.removeUnicodeLocaleAttribute("49687536");
        boolean boolean34 = iSOChronology0.equals((java.lang.Object) builder33);
        java.util.Locale.Builder builder36 = builder33.setVariant("");
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "ISOChronology[+00:00:53.314]" + "'", str8, "ISOChronology[+00:00:53.314]");
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "");
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(dateTimeZone18);
// flaky:         org.junit.Assert.assertTrue("'" + int20 + "' != '" + 53314 + "'", int20 == 53314);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2022 + "'", int22 == 2022);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "53712945" + "'", str25, "53712945");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(builder36);
    }

    @Test
    public void test11049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11049");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.yearOfEra();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.weekyearOfCentury();
        long long5 = dateTimeField3.remainder((long) 19);
        java.util.Locale.Builder builder7 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder10 = builder7.setExtension('x', "jpn");
        java.util.Locale locale11 = java.util.Locale.GERMAN;
        java.util.Locale locale12 = java.util.Locale.GERMAN;
        java.lang.String str13 = locale11.getDisplayCountry(locale12);
        java.util.Locale locale14 = locale11.stripExtensions();
        java.lang.String str15 = locale11.getDisplayName();
        java.util.Locale.Builder builder16 = builder10.setLocale(locale11);
        java.lang.String str17 = locale11.getVariant();
        java.util.Set<java.lang.String> strSet18 = locale11.getUnicodeLocaleAttributes();
        java.util.Set<java.lang.String> strSet19 = locale11.getUnicodeLocaleAttributes();
        java.lang.String str20 = dateTimeField3.getAsShortText(53314, locale11);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
// flaky:         org.junit.Assert.assertTrue("'" + long5 + "' != '" + 53333L + "'", long5 == 53333L);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "de");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "de");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "de");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "German" + "'", str15, "German");
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(strSet18);
        org.junit.Assert.assertNotNull(strSet19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "53314" + "'", str20, "53314");
    }

    @Test
    public void test11050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11050");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.centuryOfEra();
        org.joda.time.DurationField durationField3 = iSOChronology0.centuries();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.millisOfDay();
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology0.hourOfDay();
        org.joda.time.DateTimeField dateTimeField6 = iSOChronology0.secondOfDay();
        org.joda.time.DurationField durationField7 = iSOChronology0.days();
        org.joda.time.DateTimeField dateTimeField8 = iSOChronology0.secondOfMinute();
        java.lang.String str10 = dateTimeField8.getAsShortText(1645454876348L);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "49" + "'", str10, "49");
    }

    @Test
    public void test11051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11051");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.centuryOfEra();
        org.joda.time.DurationField durationField3 = iSOChronology0.seconds();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.clockhourOfDay();
        org.joda.time.Chronology chronology5 = iSOChronology0.withUTC();
        org.joda.time.Chronology chronology6 = iSOChronology0.withUTC();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField8 = chronology6.monthOfYear();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
    }

    @Test
    public void test11052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11052");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.yearOfEra();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.weekyearOfCentury();
        java.lang.String str4 = iSOChronology0.toString();
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology0.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField6 = iSOChronology0.dayOfYear();
        java.util.TimeZone timeZone7 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forTimeZone(timeZone7);
        int int10 = dateTimeZone8.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now(dateTimeZone8);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray12 = localDateTime11.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime11.plusWeeks(2022);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime11.plusHours((int) '4');
        int int17 = dateTimeField6.getMinimumValue((org.joda.time.ReadablePartial) localDateTime16);
        org.joda.time.LocalDateTime.Property property18 = localDateTime16.dayOfWeek();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = null;
        java.lang.String str20 = localDateTime16.toString(dateTimeFormatter19);
        org.joda.time.LocalDateTime.Property property21 = localDateTime16.dayOfMonth();
        int int22 = property21.getLeapAmount();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "ISOChronology[+00:00:53.314]" + "'", str4, "ISOChronology[+00:00:53.314]");
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeZone8);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 53314 + "'", int10 == 53314);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(property18);
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "2022-02-23T18:55:13.079" + "'", str20, "2022-02-23T18:55:13.079");
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
    }

    @Test
    public void test11053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11053");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet1 = locale0.getExtensionKeys();
        java.util.Iterator<java.lang.Character> charItor2 = charSet1.iterator();
        java.util.ArrayList[] arrayListArray4 = new java.util.ArrayList[0];
        @SuppressWarnings("unchecked")
        java.util.ArrayList<java.util.Locale.LanguageRange>[] languageRangeListArray5 = (java.util.ArrayList<java.util.Locale.LanguageRange>[]) arrayListArray4;
        java.util.ArrayList<java.util.Locale.LanguageRange>[] languageRangeListArray6 = charSet1.toArray((java.util.ArrayList<java.util.Locale.LanguageRange>[]) arrayListArray4);
        java.util.stream.Stream<java.lang.Character> charStream7 = charSet1.stream();
        java.util.Locale locale8 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet9 = locale8.getExtensionKeys();
        java.util.Iterator<java.lang.Character> charItor10 = charSet9.iterator();
        java.util.Locale locale11 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet12 = locale11.getExtensionKeys();
        java.util.Iterator<java.lang.Character> charItor13 = charSet12.iterator();
        boolean boolean14 = charSet9.containsAll((java.util.Collection<java.lang.Character>) charSet12);
        java.util.TimeZone timeZone15 = null;
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forTimeZone(timeZone15);
        int int18 = dateTimeZone16.getOffset(100L);
        java.util.TimeZone timeZone19 = dateTimeZone16.toTimeZone();
        org.joda.time.DateTimeZone[] dateTimeZoneArray20 = new org.joda.time.DateTimeZone[] { dateTimeZone16 };
        org.joda.time.DateTimeZone[] dateTimeZoneArray21 = charSet12.toArray(dateTimeZoneArray20);
        java.util.Locale locale22 = java.util.Locale.GERMAN;
        java.lang.String str23 = locale22.getDisplayScript();
        java.lang.String str25 = locale22.getExtension('x');
        java.util.Set<java.lang.Character> charSet26 = locale22.getExtensionKeys();
        boolean boolean27 = charSet12.retainAll((java.util.Collection<java.lang.Character>) charSet26);
        boolean boolean28 = charSet1.addAll((java.util.Collection<java.lang.Character>) charSet26);
        charSet1.clear();
        int int30 = charSet1.size();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet1);
        org.junit.Assert.assertNotNull(charItor2);
        org.junit.Assert.assertNotNull(arrayListArray4);
        org.junit.Assert.assertNotNull(languageRangeListArray5);
        org.junit.Assert.assertNotNull(languageRangeListArray6);
        org.junit.Assert.assertNotNull(charStream7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet9);
        org.junit.Assert.assertNotNull(charItor10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet12);
        org.junit.Assert.assertNotNull(charItor13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(dateTimeZone16);
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + 53314 + "'", int18 == 53314);
        org.junit.Assert.assertNotNull(timeZone19);
// flaky:         org.junit.Assert.assertEquals(timeZone19.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTimeZoneArray20);
        org.junit.Assert.assertNotNull(dateTimeZoneArray21);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "de");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(charSet26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
    }

    @Test
    public void test11054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11054");
        java.util.Locale locale2 = new java.util.Locale("49813468", "2022-02-22T00:47:15.579+10:00");
        boolean boolean3 = locale2.hasExtensions();
        org.junit.Assert.assertEquals(locale2.toString(), "49813468_2022-02-22T00:47:15.579+10:00");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test11055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11055");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.DateTime dateTime6 = localDateTime4.toDateTime(readableInstant5);
        java.util.TimeZone timeZone7 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forTimeZone(timeZone7);
        int int10 = dateTimeZone8.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now(dateTimeZone8);
        org.joda.time.LocalDateTime localDateTime12 = org.joda.time.LocalDateTime.now(dateTimeZone8);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.minusYears(2022);
        org.joda.time.LocalDateTime.Property property15 = localDateTime14.era();
        int int16 = localDateTime4.compareTo((org.joda.time.ReadablePartial) localDateTime14);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = localDateTime4.getFieldType(1);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        int int20 = localDateTime4.indexOf(dateTimeFieldType19);
        org.joda.time.LocalDateTime.Property property21 = localDateTime4.dayOfMonth();
        int int22 = localDateTime4.getYear();
        org.joda.time.LocalDateTime localDateTime23 = org.joda.time.LocalDateTime.now();
        java.util.TimeZone timeZone24 = null;
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forTimeZone(timeZone24);
        int int27 = dateTimeZone25.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime28 = org.joda.time.LocalDateTime.now(dateTimeZone25);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray29 = localDateTime28.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = org.joda.time.DateTimeFieldType.hourOfDay();
        int int31 = localDateTime28.get(dateTimeFieldType30);
        org.joda.time.LocalDateTime.Property property32 = localDateTime28.dayOfWeek();
        boolean boolean33 = localDateTime23.isEqual((org.joda.time.ReadablePartial) localDateTime28);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime28.withSecondOfMinute(52);
        int int36 = localDateTime28.getDayOfMonth();
        org.joda.time.LocalDateTime.Property property37 = localDateTime28.millisOfSecond();
        java.util.TimeZone timeZone38 = null;
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forTimeZone(timeZone38);
        int int41 = dateTimeZone39.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime42 = org.joda.time.LocalDateTime.now(dateTimeZone39);
        org.joda.time.LocalDateTime localDateTime43 = org.joda.time.LocalDateTime.now(dateTimeZone39);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime43.plusSeconds((int) (short) 10);
        int int46 = localDateTime43.size();
        org.joda.time.LocalDateTime.Property property47 = localDateTime43.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime49 = property47.setCopy((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime51 = localDateTime49.withMillisOfDay(53166088);
        org.joda.time.LocalDateTime localDateTime53 = localDateTime51.plusDays(23);
        int int54 = localDateTime28.compareTo((org.joda.time.ReadablePartial) localDateTime51);
        org.joda.time.DateTimeFieldType dateTimeFieldType55 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DurationFieldType durationFieldType56 = dateTimeFieldType55.getDurationType();
        boolean boolean57 = localDateTime28.isSupported(dateTimeFieldType55);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime59 = localDateTime4.withField(dateTimeFieldType55, (-3600000));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -3600000 for millisOfDay must be in the range [0,86399999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53314 + "'", int3 == 53314);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTimeZone8);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 53314 + "'", int10 == 53314);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2022 + "'", int22 == 2022);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(dateTimeZone25);
// flaky:         org.junit.Assert.assertTrue("'" + int27 + "' != '" + 53314 + "'", int27 == 53314);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray29);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
// flaky:         org.junit.Assert.assertTrue("'" + int31 + "' != '" + 14 + "'", int31 == 14);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 21 + "'", int36 == 21);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(dateTimeZone39);
// flaky:         org.junit.Assert.assertTrue("'" + int41 + "' != '" + 53314 + "'", int41 == 53314);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 4 + "'", int46 == 4);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType55);
        org.junit.Assert.assertNotNull(durationFieldType56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
    }

    @Test
    public void test11056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11056");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        int int5 = localDateTime4.getWeekyear();
        org.joda.time.LocalDateTime.Property property6 = localDateTime4.millisOfDay();
        java.lang.String str7 = property6.getAsString();
        int int8 = property6.getLeapAmount();
        org.joda.time.LocalDateTime localDateTime10 = property6.addToCopy((int) '4');
        org.joda.time.tz.NameProvider nameProvider11 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.DateTimeZone.setNameProvider(nameProvider11);
        java.util.TimeZone timeZone13 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forTimeZone(timeZone13);
        int int16 = dateTimeZone14.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime17 = org.joda.time.LocalDateTime.now(dateTimeZone14);
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.DateTime dateTime19 = localDateTime17.toDateTime(readableInstant18);
        org.joda.time.Chronology chronology20 = dateTime19.getChronology();
        org.joda.time.DurationField durationField21 = chronology20.hours();
        org.joda.time.DurationField durationField22 = chronology20.months();
        org.joda.time.DateTimeField dateTimeField23 = chronology20.dayOfYear();
        java.util.TimeZone timeZone24 = null;
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forTimeZone(timeZone24);
        int int27 = dateTimeZone25.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime28 = org.joda.time.LocalDateTime.now(dateTimeZone25);
        int[] intArray31 = new int[] { (short) 0, (short) 0 };
        int int32 = dateTimeField23.getMinimumValue((org.joda.time.ReadablePartial) localDateTime28, intArray31);
        java.lang.String str34 = dateTimeField23.getAsShortText((long) 53166088);
        java.util.TimeZone timeZone35 = null;
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forTimeZone(timeZone35);
        int int38 = dateTimeZone36.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime39 = org.joda.time.LocalDateTime.now(dateTimeZone36);
        int int40 = localDateTime39.getWeekyear();
        org.joda.time.DurationFieldType durationFieldType41 = org.joda.time.DurationFieldType.days();
        org.joda.time.LocalDateTime localDateTime43 = localDateTime39.withFieldAdded(durationFieldType41, 53166088);
        java.util.Locale locale44 = java.util.Locale.ROOT;
        java.lang.String str45 = dateTimeField23.getAsShortText((org.joda.time.ReadablePartial) localDateTime43, locale44);
        java.lang.String str48 = nameProvider11.getShortName(locale44, "53169175", "+00:00");
        int int49 = property6.getMaximumShortTextLength(locale44);
        org.joda.time.DurationField durationField50 = property6.getRangeDurationField();
        org.joda.time.DateTimeField dateTimeField51 = property6.getField();
        org.joda.time.DurationField durationField52 = property6.getRangeDurationField();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53314 + "'", int3 == 53314);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2022 + "'", int5 == 2022);
        org.junit.Assert.assertNotNull(property6);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "53713212" + "'", str7, "53713212");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(nameProvider11);
        org.junit.Assert.assertNotNull(dateTimeZone14);
// flaky:         org.junit.Assert.assertTrue("'" + int16 + "' != '" + 53314 + "'", int16 == 53314);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeZone25);
// flaky:         org.junit.Assert.assertTrue("'" + int27 + "' != '" + 53314 + "'", int27 == 53314);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[0, 0]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "1" + "'", str34, "1");
        org.junit.Assert.assertNotNull(dateTimeZone36);
// flaky:         org.junit.Assert.assertTrue("'" + int38 + "' != '" + 53314 + "'", int38 == 53314);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 2022 + "'", int40 == 2022);
        org.junit.Assert.assertNotNull(durationFieldType41);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "346" + "'", str45, "346");
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 8 + "'", int49 == 8);
        org.junit.Assert.assertNotNull(durationField50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(durationField52);
    }

    @Test
    public void test11057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11057");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        long long6 = iSOChronology0.add(readablePeriod3, (long) 100, 11);
        org.joda.time.DateTimeField dateTimeField7 = iSOChronology0.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField8 = iSOChronology0.centuryOfEra();
        // The following exception was thrown during execution in test generation
        try {
            long long13 = iSOChronology0.getDateTimeMillis(31, 59, 50025769, 50010743);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 59 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 100L + "'", long6 == 100L);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
    }

    @Test
    public void test11058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11058");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.yearOfEra();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.hourOfDay();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.year();
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology0.dayOfYear();
        org.joda.time.DateTimeField dateTimeField6 = iSOChronology0.year();
        org.joda.time.DateTimeField dateTimeField7 = iSOChronology0.centuryOfEra();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
    }

    @Test
    public void test11059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11059");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray5 = localDateTime4.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.hourOfDay();
        int int7 = localDateTime4.get(dateTimeFieldType6);
        org.joda.time.LocalDateTime.Property property8 = localDateTime4.hourOfDay();
        org.joda.time.LocalDateTime.Property property9 = localDateTime4.monthOfYear();
        java.lang.String str10 = property9.getAsText();
        java.util.TimeZone timeZone11 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        int int14 = dateTimeZone12.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime15 = org.joda.time.LocalDateTime.now(dateTimeZone12);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray16 = localDateTime15.getFieldTypes();
        int int17 = localDateTime15.getCenturyOfEra();
        org.joda.time.LocalDateTime.Property property18 = localDateTime15.year();
        java.util.Locale locale19 = java.util.Locale.KOREAN;
        java.lang.String str20 = property18.getAsShortText(locale19);
        org.joda.time.LocalDateTime localDateTime21 = property18.getLocalDateTime();
        java.util.Locale locale23 = new java.util.Locale("");
        boolean boolean24 = locale23.hasExtensions();
        int int25 = property18.getMaximumShortTextLength(locale23);
        java.lang.String str26 = property9.getAsShortText(locale23);
        org.joda.time.LocalDateTime localDateTime27 = property9.roundFloorCopy();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53314 + "'", int3 == 53314);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray5);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 14 + "'", int7 == 14);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "February" + "'", str10, "February");
        org.junit.Assert.assertNotNull(dateTimeZone12);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 53314 + "'", int14 == 53314);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 20 + "'", int17 == 20);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "2022" + "'", str20, "2022");
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertEquals(locale23.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 9 + "'", int25 == 9);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Feb" + "'", str26, "Feb");
        org.junit.Assert.assertNotNull(localDateTime27);
    }

    @Test
    public void test11060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11060");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        int int5 = localDateTime4.getWeekyear();
        org.joda.time.LocalDateTime.Property property6 = localDateTime4.minuteOfHour();
        int int7 = localDateTime4.getHourOfDay();
        org.joda.time.DateTime dateTime8 = localDateTime4.toDateTime();
        org.joda.time.Chronology chronology9 = dateTime8.getChronology();
        org.joda.time.DateTimeZone dateTimeZone10 = dateTime8.getZone();
        org.joda.time.chrono.ISOChronology iSOChronology11 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone10);
        org.joda.time.DurationField durationField12 = iSOChronology11.centuries();
        java.lang.String str13 = iSOChronology11.toString();
        long long17 = iSOChronology11.add(1645454887612L, 1645455130687L, 3131827);
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53314 + "'", int3 == 53314);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2022 + "'", int5 == 2022);
        org.junit.Assert.assertNotNull(property6);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 14 + "'", int7 == 14);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(iSOChronology11);
        org.junit.Assert.assertNotNull(durationField12);
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ISOChronology[+00:00:53.314]" + "'", str13, "ISOChronology[+00:00:53.314]");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 5153282451028962761L + "'", long17 == 5153282451028962761L);
    }

    @Test
    public void test11061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11061");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(2898057);
        long long5 = dateTimeZone1.convertLocalToUTC(53272134L, false, (long) 49899);
        java.util.TimeZone timeZone6 = null;
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forTimeZone(timeZone6);
        int int9 = dateTimeZone7.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime10 = org.joda.time.LocalDateTime.now(dateTimeZone7);
        int int11 = localDateTime10.getWeekyear();
        org.joda.time.LocalDateTime.Property property12 = localDateTime10.millisOfDay();
        java.util.TimeZone timeZone13 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forTimeZone(timeZone13);
        int int16 = dateTimeZone14.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime17 = org.joda.time.LocalDateTime.now(dateTimeZone14);
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.DateTime dateTime19 = localDateTime17.toDateTime(readableInstant18);
        java.util.TimeZone timeZone20 = null;
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forTimeZone(timeZone20);
        int int23 = dateTimeZone21.getOffset(100L);
        org.joda.time.DateTime dateTime24 = localDateTime17.toDateTime(dateTimeZone21);
        int int25 = property12.compareTo((org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.LocalDateTime localDateTime26 = property12.roundHalfEvenCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.LocalDateTime.Property property28 = localDateTime26.property(dateTimeFieldType27);
        java.util.TimeZone timeZone29 = null;
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forTimeZone(timeZone29);
        int int32 = dateTimeZone30.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime33 = org.joda.time.LocalDateTime.now(dateTimeZone30);
        int int34 = localDateTime33.getWeekyear();
        org.joda.time.LocalDateTime.Property property35 = localDateTime33.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime37 = localDateTime33.minusMillis(2022);
        org.joda.time.ReadablePeriod readablePeriod38 = null;
        org.joda.time.LocalDateTime localDateTime39 = localDateTime37.plus(readablePeriod38);
        org.joda.time.LocalDateTime localDateTime41 = localDateTime39.withCenturyOfEra((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime26.withFields((org.joda.time.ReadablePartial) localDateTime41);
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = org.joda.time.DateTimeFieldType.dayOfYear();
        java.lang.String str44 = dateTimeFieldType43.getName();
        org.joda.time.chrono.ISOChronology iSOChronology45 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField46 = iSOChronology45.hourOfHalfday();
        java.lang.String str47 = iSOChronology45.toString();
        org.joda.time.DateTimeField dateTimeField48 = iSOChronology45.era();
        org.joda.time.DurationField durationField49 = iSOChronology45.centuries();
        org.joda.time.ReadablePeriod readablePeriod50 = null;
        long long53 = iSOChronology45.add(readablePeriod50, (long) 2022, (int) (byte) 100);
        org.joda.time.DateTimeField dateTimeField54 = iSOChronology45.dayOfYear();
        org.joda.time.DateTimeField dateTimeField55 = iSOChronology45.yearOfEra();
        org.joda.time.DateTimeField dateTimeField56 = iSOChronology45.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField57 = iSOChronology45.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField58 = dateTimeFieldType43.getField((org.joda.time.Chronology) iSOChronology45);
        org.joda.time.LocalDateTime.Property property59 = localDateTime41.property(dateTimeFieldType43);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter60 = null;
        java.lang.String str61 = localDateTime41.toString(dateTimeFormatter60);
        org.joda.time.LocalDateTime localDateTime63 = localDateTime41.plusMonths(49690248);
        org.joda.time.DateTime dateTime64 = localDateTime41.toDateTime();
        int int65 = dateTimeZone1.getOffset((org.joda.time.ReadableInstant) dateTime64);
        org.joda.time.LocalDateTime localDateTime66 = new org.joda.time.LocalDateTime(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 50374077L + "'", long5 == 50374077L);
        org.junit.Assert.assertNotNull(dateTimeZone7);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 53314 + "'", int9 == 53314);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2022 + "'", int11 == 2022);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
// flaky:         org.junit.Assert.assertTrue("'" + int16 + "' != '" + 53314 + "'", int16 == 53314);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTimeZone21);
// flaky:         org.junit.Assert.assertTrue("'" + int23 + "' != '" + 53314 + "'", int23 == 53314);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(dateTimeZone30);
// flaky:         org.junit.Assert.assertTrue("'" + int32 + "' != '" + 53314 + "'", int32 == 53314);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2022 + "'", int34 == 2022);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(dateTimeFieldType43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "dayOfYear" + "'", str44, "dayOfYear");
        org.junit.Assert.assertNotNull(iSOChronology45);
        org.junit.Assert.assertNotNull(dateTimeField46);
// flaky:         org.junit.Assert.assertEquals("'" + str47 + "' != '" + "ISOChronology[+00:00:53.314]" + "'", str47, "ISOChronology[+00:00:53.314]");
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(durationField49);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 2022L + "'", long53 == 2022L);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(property59);
// flaky:         org.junit.Assert.assertEquals("'" + str61 + "' != '" + "0122-02-21T14:55:11.330" + "'", str61, "0122-02-21T14:55:11.330");
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 2898057 + "'", int65 == 2898057);
    }

    @Test
    public void test11062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11062");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.centuryOfEra();
        org.joda.time.DurationField durationField3 = iSOChronology0.seconds();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology0.yearOfEra();
        org.joda.time.DurationField durationField6 = iSOChronology0.days();
        long long9 = durationField6.subtract((-8982244589469159054L), 3033166);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-8982506655011559054L) + "'", long9 == (-8982506655011559054L));
    }

    @Test
    public void test11063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11063");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.centuryOfEra();
        org.joda.time.DurationField durationField3 = iSOChronology0.seconds();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.clockhourOfDay();
        org.joda.time.Chronology chronology5 = iSOChronology0.withUTC();
        org.joda.time.Chronology chronology6 = iSOChronology0.withUTC();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField8 = chronology6.clockhourOfHalfday();
        java.util.TimeZone timeZone9 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        int int12 = dateTimeZone10.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime13 = org.joda.time.LocalDateTime.now(dateTimeZone10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray14 = localDateTime13.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.hourOfDay();
        int int16 = localDateTime13.get(dateTimeFieldType15);
        org.joda.time.LocalDateTime.Property property17 = localDateTime13.hourOfDay();
        java.util.Locale locale19 = null;
        java.lang.String str20 = dateTimeField8.getAsText((org.joda.time.ReadablePartial) localDateTime13, 2977658, locale19);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeZone10);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 53314 + "'", int12 == 53314);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray14);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
// flaky:         org.junit.Assert.assertTrue("'" + int16 + "' != '" + 14 + "'", int16 == 14);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "2977658" + "'", str20, "2977658");
    }

    @Test
    public void test11064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11064");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.hourOfHalfday();
        long long7 = iSOChronology0.getDateTimeMillis((-1), 8, 3, 365);
        org.joda.time.DurationField durationField8 = iSOChronology0.seconds();
        long long12 = iSOChronology0.add(1645454774909L, (long) 53178951, 53166088);
        org.joda.time.DateTimeField dateTimeField13 = iSOChronology0.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology0.dayOfYear();
        org.joda.time.DurationField durationField15 = iSOChronology0.millis();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology0.era();
        long long20 = iSOChronology0.add((long) 2842796, (-52L), 13);
        org.joda.time.DateTimeField dateTimeField21 = iSOChronology0.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField22 = iSOChronology0.secondOfMinute();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
// flaky:         org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-62180265652949L) + "'", long7 == (-62180265652949L));
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 2828962243388597L + "'", long12 == 2828962243388597L);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 2842120L + "'", long20 == 2842120L);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
    }

    @Test
    public void test11065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11065");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.yearOfEra();
        org.joda.time.DurationField durationField3 = iSOChronology0.minutes();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.weekyear();
        org.joda.time.DurationField durationField5 = iSOChronology0.centuries();
        org.joda.time.DateTimeField dateTimeField6 = iSOChronology0.centuryOfEra();
        org.joda.time.DurationField durationField7 = iSOChronology0.minutes();
        org.joda.time.DateTimeField dateTimeField8 = iSOChronology0.minuteOfDay();
        org.joda.time.DurationField durationField9 = iSOChronology0.days();
        org.joda.time.DurationField durationField10 = iSOChronology0.days();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology0.secondOfDay();
        org.joda.time.DurationField durationField12 = iSOChronology0.weekyears();
        org.joda.time.DurationField durationField13 = iSOChronology0.millis();
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology0.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology0.monthOfYear();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology0.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology0.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology0.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology0.hourOfHalfday();
        int int21 = dateTimeField19.getMinimumValue(1645455146677L);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
    }

    @Test
    public void test11066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11066");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime(0, 49785, 2978688, 49937110, 53305104, 3039907, 53564436);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 49937110 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test11067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11067");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.hourOfHalfday();
        java.lang.String str2 = iSOChronology0.toString();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.era();
        org.joda.time.DurationField durationField4 = iSOChronology0.centuries();
        org.joda.time.DateTimeZone dateTimeZone5 = iSOChronology0.getZone();
        org.joda.time.DurationField durationField6 = iSOChronology0.millis();
        org.joda.time.DurationField durationField7 = iSOChronology0.weekyears();
        org.joda.time.DurationField durationField8 = iSOChronology0.weekyears();
        org.joda.time.DateTimeField dateTimeField9 = iSOChronology0.dayOfWeek();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ISOChronology[+00:00:53.314]" + "'", str2, "ISOChronology[+00:00:53.314]");
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
    }

    @Test
    public void test11068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11068");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.hourOfHalfday();
        long long7 = iSOChronology0.getDateTimeMillis((-1), 8, 3, 365);
        org.joda.time.DurationField durationField8 = iSOChronology0.hours();
        org.joda.time.DateTimeField dateTimeField9 = iSOChronology0.dayOfYear();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology0.dayOfYear();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology0.era();
        org.joda.time.DurationField durationField12 = iSOChronology0.minutes();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
// flaky:         org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-62180265652949L) + "'", long7 == (-62180265652949L));
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
    }

    @Test
    public void test11069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11069");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.yearOfEra();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.weekyearOfCentury();
        java.lang.String str4 = iSOChronology0.toString();
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology0.clockhourOfHalfday();
        org.joda.time.DurationField durationField6 = iSOChronology0.halfdays();
        org.joda.time.DurationField durationField7 = iSOChronology0.hours();
        org.joda.time.DurationField durationField8 = iSOChronology0.weeks();
        org.joda.time.DurationFieldType durationFieldType9 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DurationField durationField11 = durationFieldType9.getField(chronology10);
        long long14 = durationField11.subtract(2L, (long) 52);
        long long17 = durationField11.subtract((-139813307279999990L), 2806);
        int int18 = durationField8.compareTo(durationField11);
        int int21 = durationField8.getValue(2155182907759952L, 1645451309798L);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "ISOChronology[+00:00:53.314]" + "'", str4, "ISOChronology[+00:00:53.314]");
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(durationFieldType9);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-164096150399998L) + "'", long14 == (-164096150399998L));
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-148668187967999990L) + "'", long17 == (-148668187967999990L));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 3563463 + "'", int21 == 3563463);
    }

    @Test
    public void test11070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11070");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.hourOfHalfday();
        java.lang.String str2 = iSOChronology0.toString();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.era();
        org.joda.time.DurationField durationField4 = iSOChronology0.centuries();
        org.joda.time.DurationField durationField5 = iSOChronology0.weeks();
        org.joda.time.DateTimeField dateTimeField6 = iSOChronology0.era();
        org.joda.time.DateTimeField dateTimeField7 = iSOChronology0.year();
        org.joda.time.DurationField durationField8 = iSOChronology0.months();
        org.joda.time.DateTimeField dateTimeField9 = iSOChronology0.monthOfYear();
        java.util.TimeZone timeZone10 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        int int13 = dateTimeZone11.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime14 = org.joda.time.LocalDateTime.now(dateTimeZone11);
        org.joda.time.LocalDateTime localDateTime15 = org.joda.time.LocalDateTime.now(dateTimeZone11);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.withMillisOfSecond((int) '4');
        org.joda.time.LocalDateTime.Property property18 = localDateTime15.dayOfWeek();
        org.joda.time.chrono.ISOChronology iSOChronology19 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField20 = iSOChronology19.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField21 = iSOChronology19.yearOfEra();
        org.joda.time.DateTimeField dateTimeField22 = iSOChronology19.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField23 = iSOChronology19.weekOfWeekyear();
        org.joda.time.DurationField durationField24 = iSOChronology19.weeks();
        org.joda.time.DateTimeField dateTimeField25 = iSOChronology19.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime28 = org.joda.time.LocalDateTime.now(dateTimeZone27);
        int int29 = localDateTime28.getWeekOfWeekyear();
        org.joda.time.chrono.ISOChronology iSOChronology30 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField31 = iSOChronology30.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField32 = iSOChronology30.yearOfEra();
        org.joda.time.DurationField durationField33 = iSOChronology30.minutes();
        org.joda.time.DateTimeField dateTimeField34 = iSOChronology30.weekyear();
        org.joda.time.DurationField durationField35 = iSOChronology30.centuries();
        org.joda.time.DateTimeField dateTimeField36 = iSOChronology30.centuryOfEra();
        org.joda.time.DurationField durationField37 = iSOChronology30.minutes();
        org.joda.time.DateTimeField dateTimeField38 = iSOChronology30.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField39 = iSOChronology30.minuteOfHour();
        org.joda.time.chrono.ISOChronology iSOChronology40 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField41 = iSOChronology40.hourOfHalfday();
        java.lang.String str42 = iSOChronology40.toString();
        org.joda.time.DateTimeField dateTimeField43 = iSOChronology40.era();
        org.joda.time.DurationField durationField44 = iSOChronology40.centuries();
        org.joda.time.DurationField durationField45 = iSOChronology40.weeks();
        org.joda.time.DateTimeField dateTimeField46 = iSOChronology40.dayOfYear();
        org.joda.time.LocalDateTime localDateTime47 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology40);
        int[] intArray48 = localDateTime47.getValues();
        long long50 = iSOChronology30.set((org.joda.time.ReadablePartial) localDateTime47, 0L);
        int[] intArray51 = localDateTime47.getValues();
        iSOChronology19.validate((org.joda.time.ReadablePartial) localDateTime28, intArray51);
        int int53 = dateTimeField9.getMinimumValue((org.joda.time.ReadablePartial) localDateTime15, intArray51);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ISOChronology[+00:00:53.314]" + "'", str2, "ISOChronology[+00:00:53.314]");
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeZone11);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 53314 + "'", int13 == 53314);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(iSOChronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 8 + "'", int29 == 8);
        org.junit.Assert.assertNotNull(iSOChronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(iSOChronology40);
        org.junit.Assert.assertNotNull(dateTimeField41);
// flaky:         org.junit.Assert.assertEquals("'" + str42 + "' != '" + "ISOChronology[+00:00:53.314]" + "'", str42, "ISOChronology[+00:00:53.314]");
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(durationField44);
        org.junit.Assert.assertNotNull(durationField45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(intArray48);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[2022, 2, 21, 53713642]");
// flaky:         org.junit.Assert.assertTrue("'" + long50 + "' != '" + 1645455260328L + "'", long50 == 1645455260328L);
        org.junit.Assert.assertNotNull(intArray51);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[2022, 2, 21, 53713642]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
    }

    @Test
    public void test11071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11071");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime5 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.plusSeconds((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime5.withSecondOfMinute(18);
        org.joda.time.DurationFieldType durationFieldType10 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DurationField durationField12 = durationFieldType10.getField(chronology11);
        java.util.TimeZone timeZone13 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forTimeZone(timeZone13);
        int int16 = dateTimeZone14.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime17 = org.joda.time.LocalDateTime.now(dateTimeZone14);
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.DateTime dateTime19 = localDateTime17.toDateTime(readableInstant18);
        org.joda.time.Chronology chronology20 = dateTime19.getChronology();
        boolean boolean21 = durationFieldType10.isSupported(chronology20);
        java.lang.String str22 = durationFieldType10.getName();
        org.joda.time.chrono.ISOChronology iSOChronology23 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField24 = iSOChronology23.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField25 = iSOChronology23.yearOfEra();
        org.joda.time.DurationField durationField26 = iSOChronology23.minutes();
        org.joda.time.DateTimeField dateTimeField27 = iSOChronology23.weekyear();
        org.joda.time.DurationField durationField28 = iSOChronology23.centuries();
        org.joda.time.DateTimeField dateTimeField29 = iSOChronology23.centuryOfEra();
        org.joda.time.DurationField durationField30 = iSOChronology23.minutes();
        org.joda.time.DateTimeField dateTimeField31 = iSOChronology23.minuteOfDay();
        org.joda.time.DurationField durationField32 = iSOChronology23.days();
        org.joda.time.DurationField durationField33 = iSOChronology23.days();
        boolean boolean34 = durationFieldType10.isSupported((org.joda.time.Chronology) iSOChronology23);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime5.withFieldAdded(durationFieldType10, 2807077);
        java.lang.String str37 = durationFieldType10.toString();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53314 + "'", int3 == 53314);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(durationFieldType10);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
// flaky:         org.junit.Assert.assertTrue("'" + int16 + "' != '" + 53314 + "'", int16 == 53314);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "centuries" + "'", str22, "centuries");
        org.junit.Assert.assertNotNull(iSOChronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "centuries" + "'", str37, "centuries");
    }

    @Test
    public void test11072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11072");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.yearOfEra();
        org.joda.time.DurationField durationField3 = iSOChronology0.minutes();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.weekyear();
        org.joda.time.DurationField durationField5 = iSOChronology0.centuries();
        org.joda.time.DateTimeField dateTimeField6 = iSOChronology0.centuryOfEra();
        org.joda.time.DurationField durationField7 = iSOChronology0.minutes();
        org.joda.time.DateTimeField dateTimeField8 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField9 = iSOChronology0.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology0.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology0.minuteOfDay();
        java.lang.String str12 = iSOChronology0.toString();
        org.joda.time.DurationField durationField13 = iSOChronology0.years();
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology0.hourOfDay();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology0.monthOfYear();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "ISOChronology[+00:00:53.314]" + "'", str12, "ISOChronology[+00:00:53.314]");
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
    }

    @Test
    public void test11073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11073");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.yearOfEra();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.secondOfMinute();
        org.joda.time.DurationField durationField4 = iSOChronology0.weeks();
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        long long8 = iSOChronology0.add(readablePeriod5, (long) 20, 53266);
        org.joda.time.DateTimeField dateTimeField9 = iSOChronology0.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology0.yearOfCentury();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 20L + "'", long8 == 20L);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
    }

    @Test
    public void test11074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11074");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        int int5 = localDateTime4.getWeekyear();
        org.joda.time.LocalDateTime.Property property6 = localDateTime4.millisOfDay();
        java.util.Locale locale7 = java.util.Locale.KOREAN;
        int int8 = property6.getMaximumTextLength(locale7);
        java.util.Locale locale9 = java.util.Locale.JAPANESE;
        java.lang.String str10 = locale9.getDisplayLanguage();
        java.util.Locale locale11 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet12 = locale11.getExtensionKeys();
        java.lang.String str13 = locale9.getDisplayLanguage(locale11);
        java.lang.String str14 = property6.getAsShortText(locale11);
        org.joda.time.chrono.ISOChronology iSOChronology15 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology15.weekOfWeekyear();
        java.util.Locale locale18 = java.util.Locale.JAPANESE;
        java.lang.String str19 = locale18.getDisplayLanguage();
        java.util.Set<java.lang.String> strSet20 = locale18.getUnicodeLocaleKeys();
        java.lang.String str21 = dateTimeField16.getAsShortText((long) 14, locale18);
        org.joda.time.chrono.ISOChronology iSOChronology23 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField24 = iSOChronology23.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField25 = iSOChronology23.yearOfEra();
        java.util.TimeZone timeZone26 = null;
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forTimeZone(timeZone26);
        int int29 = dateTimeZone27.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime30 = org.joda.time.LocalDateTime.now(dateTimeZone27);
        org.joda.time.LocalDateTime localDateTime31 = org.joda.time.LocalDateTime.now(dateTimeZone27);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime31.plusSeconds((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime31.minusWeeks((int) (byte) 10);
        java.util.TimeZone timeZone36 = null;
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forTimeZone(timeZone36);
        int int39 = dateTimeZone37.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime40 = org.joda.time.LocalDateTime.now(dateTimeZone37);
        org.joda.time.LocalDateTime localDateTime41 = org.joda.time.LocalDateTime.now(dateTimeZone37);
        org.joda.time.LocalDateTime localDateTime43 = localDateTime41.plusSeconds((int) (short) 10);
        int int44 = localDateTime41.size();
        boolean boolean45 = localDateTime35.isBefore((org.joda.time.ReadablePartial) localDateTime41);
        org.joda.time.LocalDateTime localDateTime47 = localDateTime41.withMillisOfSecond(52);
        org.joda.time.LocalDateTime localDateTime49 = localDateTime47.plusMinutes(0);
        org.joda.time.LocalDateTime localDateTime51 = localDateTime47.plusDays(53166088);
        int int52 = localDateTime51.getDayOfYear();
        org.joda.time.chrono.ISOChronology iSOChronology53 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField54 = iSOChronology53.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField55 = iSOChronology53.yearOfEra();
        org.joda.time.DateTimeField dateTimeField56 = iSOChronology53.weekyearOfCentury();
        java.lang.String str57 = iSOChronology53.toString();
        org.joda.time.DateTimeField dateTimeField58 = iSOChronology53.clockhourOfHalfday();
        java.lang.String str59 = iSOChronology53.toString();
        org.joda.time.DateTimeField dateTimeField60 = iSOChronology53.dayOfMonth();
        java.util.Locale locale61 = java.util.Locale.KOREAN;
        java.lang.String str62 = locale61.getDisplayScript();
        int int63 = dateTimeField60.getMaximumShortTextLength(locale61);
        java.lang.String str64 = dateTimeField25.getAsShortText((org.joda.time.ReadablePartial) localDateTime51, locale61);
        java.lang.String str65 = dateTimeField16.getAsShortText(20995200000L, locale61);
        java.lang.String str66 = locale11.getDisplayVariant(locale61);
        java.lang.String str67 = locale11.getISO3Country();
        java.util.Set<java.lang.Character> charSet68 = locale11.getExtensionKeys();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53314 + "'", int3 == 53314);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2022 + "'", int5 == 2022);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ko");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 8 + "'", int8 == 8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Japanese" + "'", str10, "Japanese");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "\uc77c\ubcf8\uc5b4" + "'", str13, "\uc77c\ubcf8\uc5b4");
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "53713782" + "'", str14, "53713782");
        org.junit.Assert.assertNotNull(iSOChronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Japanese" + "'", str19, "Japanese");
        org.junit.Assert.assertNotNull(strSet20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "1" + "'", str21, "1");
        org.junit.Assert.assertNotNull(iSOChronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeZone27);
// flaky:         org.junit.Assert.assertTrue("'" + int29 + "' != '" + 53314 + "'", int29 == 53314);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(dateTimeZone37);
// flaky:         org.junit.Assert.assertTrue("'" + int39 + "' != '" + 53314 + "'", int39 == 53314);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 4 + "'", int44 == 4);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 346 + "'", int52 == 346);
        org.junit.Assert.assertNotNull(iSOChronology53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(dateTimeField56);
// flaky:         org.junit.Assert.assertEquals("'" + str57 + "' != '" + "ISOChronology[+00:00:53.314]" + "'", str57, "ISOChronology[+00:00:53.314]");
        org.junit.Assert.assertNotNull(dateTimeField58);
// flaky:         org.junit.Assert.assertEquals("'" + str59 + "' != '" + "ISOChronology[+00:00:53.314]" + "'", str59, "ISOChronology[+00:00:53.314]");
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 2 + "'", int63 == 2);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "147585" + "'", str64, "147585");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "36" + "'", str65, "36");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertNotNull(charSet68);
    }

    @Test
    public void test11075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11075");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.DateTime dateTime6 = localDateTime4.toDateTime(readableInstant5);
        org.joda.time.Chronology chronology7 = dateTime6.getChronology();
        org.joda.time.DurationField durationField8 = chronology7.hours();
        org.joda.time.DurationField durationField9 = chronology7.months();
        org.joda.time.DateTimeField dateTimeField10 = chronology7.dayOfYear();
        java.util.TimeZone timeZone11 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        int int14 = dateTimeZone12.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime15 = org.joda.time.LocalDateTime.now(dateTimeZone12);
        int[] intArray18 = new int[] { (short) 0, (short) 0 };
        int int19 = dateTimeField10.getMinimumValue((org.joda.time.ReadablePartial) localDateTime15, intArray18);
        java.lang.String str21 = dateTimeField10.getAsShortText((long) 53166088);
        java.util.TimeZone timeZone22 = null;
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        int int25 = dateTimeZone23.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime26 = org.joda.time.LocalDateTime.now(dateTimeZone23);
        int int27 = localDateTime26.getWeekyear();
        org.joda.time.DurationFieldType durationFieldType28 = org.joda.time.DurationFieldType.days();
        org.joda.time.LocalDateTime localDateTime30 = localDateTime26.withFieldAdded(durationFieldType28, 53166088);
        java.util.Locale locale31 = java.util.Locale.ROOT;
        java.lang.String str32 = dateTimeField10.getAsShortText((org.joda.time.ReadablePartial) localDateTime30, locale31);
        java.util.TimeZone timeZone33 = null;
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forTimeZone(timeZone33);
        int int36 = dateTimeZone34.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime37 = org.joda.time.LocalDateTime.now(dateTimeZone34);
        int int38 = localDateTime37.getWeekyear();
        boolean boolean39 = localDateTime30.isEqual((org.joda.time.ReadablePartial) localDateTime37);
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = org.joda.time.DateTimeFieldType.dayOfYear();
        java.lang.String str41 = dateTimeFieldType40.getName();
        boolean boolean42 = localDateTime30.isSupported(dateTimeFieldType40);
        java.util.TimeZone timeZone43 = null;
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forTimeZone(timeZone43);
        int int46 = dateTimeZone44.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime47 = org.joda.time.LocalDateTime.now(dateTimeZone44);
        int int48 = localDateTime47.getWeekyear();
        org.joda.time.LocalDateTime.Property property49 = localDateTime47.millisOfDay();
        java.util.TimeZone timeZone50 = null;
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.forTimeZone(timeZone50);
        int int53 = dateTimeZone51.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime54 = org.joda.time.LocalDateTime.now(dateTimeZone51);
        org.joda.time.ReadableInstant readableInstant55 = null;
        org.joda.time.DateTime dateTime56 = localDateTime54.toDateTime(readableInstant55);
        java.util.TimeZone timeZone57 = null;
        org.joda.time.DateTimeZone dateTimeZone58 = org.joda.time.DateTimeZone.forTimeZone(timeZone57);
        int int60 = dateTimeZone58.getOffset(100L);
        org.joda.time.DateTime dateTime61 = localDateTime54.toDateTime(dateTimeZone58);
        int int62 = property49.compareTo((org.joda.time.ReadableInstant) dateTime61);
        java.util.TimeZone timeZone63 = null;
        org.joda.time.DateTimeZone dateTimeZone64 = org.joda.time.DateTimeZone.forTimeZone(timeZone63);
        int int66 = dateTimeZone64.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime67 = org.joda.time.LocalDateTime.now(dateTimeZone64);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray68 = localDateTime67.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType69 = org.joda.time.DateTimeFieldType.hourOfDay();
        int int70 = localDateTime67.get(dateTimeFieldType69);
        boolean boolean71 = dateTime61.isSupported(dateTimeFieldType69);
        org.joda.time.LocalDateTime.Property property72 = localDateTime30.property(dateTimeFieldType69);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime74 = localDateTime30.withYearOfCentury(2929706);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2929706 for yearOfCentury must be in the range [0,99]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53314 + "'", int3 == 53314);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeZone12);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 53314 + "'", int14 == 53314);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[0, 0]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "1" + "'", str21, "1");
        org.junit.Assert.assertNotNull(dateTimeZone23);
// flaky:         org.junit.Assert.assertTrue("'" + int25 + "' != '" + 53314 + "'", int25 == 53314);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2022 + "'", int27 == 2022);
        org.junit.Assert.assertNotNull(durationFieldType28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "346" + "'", str32, "346");
        org.junit.Assert.assertNotNull(dateTimeZone34);
// flaky:         org.junit.Assert.assertTrue("'" + int36 + "' != '" + 53314 + "'", int36 == 53314);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2022 + "'", int38 == 2022);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "dayOfYear" + "'", str41, "dayOfYear");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(dateTimeZone44);
// flaky:         org.junit.Assert.assertTrue("'" + int46 + "' != '" + 53314 + "'", int46 == 53314);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2022 + "'", int48 == 2022);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(dateTimeZone51);
// flaky:         org.junit.Assert.assertTrue("'" + int53 + "' != '" + 53314 + "'", int53 == 53314);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTimeZone58);
// flaky:         org.junit.Assert.assertTrue("'" + int60 + "' != '" + 53314 + "'", int60 == 53314);
        org.junit.Assert.assertNotNull(dateTime61);
// flaky:         org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone64);
// flaky:         org.junit.Assert.assertTrue("'" + int66 + "' != '" + 53314 + "'", int66 == 53314);
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray68);
        org.junit.Assert.assertNotNull(dateTimeFieldType69);
// flaky:         org.junit.Assert.assertTrue("'" + int70 + "' != '" + 14 + "'", int70 == 14);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(property72);
    }

    @Test
    public void test11076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11076");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        org.joda.time.tz.NameProvider nameProvider1 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet3 = locale2.getExtensionKeys();
        java.lang.String str6 = nameProvider1.getShortName(locale2, "Koordinierte Universalzeit", "+00:00");
        java.lang.String str7 = locale2.toLanguageTag();
        java.util.Locale.setDefault(category0, locale2);
        java.util.Locale locale9 = java.util.Locale.CANADA;
        java.util.Locale.setDefault(category0, locale9);
        java.util.Locale locale11 = java.util.Locale.getDefault(category0);
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(nameProvider1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet3);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "ko" + "'", str7, "ko");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "en_CA");
    }

    @Test
    public void test11077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11077");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.DateTime dateTime6 = localDateTime4.toDateTime(readableInstant5);
        org.joda.time.Chronology chronology7 = dateTime6.getChronology();
        org.joda.time.DurationField durationField8 = chronology7.hours();
        org.joda.time.DurationField durationField9 = chronology7.months();
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime((long) 2);
        long long13 = chronology7.set((org.joda.time.ReadablePartial) localDateTime11, 31536000000L);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime11.plusMillis(2804241);
        org.joda.time.LocalDateTime.Property property16 = localDateTime11.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime17 = property16.roundCeilingCopy();
        int int18 = property16.getLeapAmount();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53314 + "'", int3 == 53314);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 2L + "'", long13 == 2L);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
    }

    @Test
    public void test11078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11078");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.centuryOfEra();
        org.joda.time.DurationField durationField3 = iSOChronology0.centuries();
        org.joda.time.DurationField durationField4 = iSOChronology0.hours();
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        int int8 = dateTimeZone6.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime9 = org.joda.time.LocalDateTime.now(dateTimeZone6);
        int int10 = localDateTime9.getDayOfYear();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime9.withYearOfEra(2022);
        long long14 = iSOChronology0.set((org.joda.time.ReadablePartial) localDateTime12, (long) 0);
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology0.monthOfYear();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology0.clockhourOfDay();
        org.joda.time.Chronology chronology17 = iSOChronology0.withUTC();
        org.joda.time.DateTimeZone dateTimeZone18 = iSOChronology0.getZone();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology0.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone20 = iSOChronology0.getZone();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 53314 + "'", int8 == 53314);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 52 + "'", int10 == 52);
        org.junit.Assert.assertNotNull(localDateTime12);
// flaky:         org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1645455260601L + "'", long14 == 1645455260601L);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
    }

    @Test
    public void test11079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11079");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        int int5 = localDateTime4.getWeekyear();
        int int6 = localDateTime4.getDayOfYear();
        int int7 = localDateTime4.getDayOfYear();
        int int8 = localDateTime4.getWeekyear();
        java.util.Locale locale12 = new java.util.Locale("53168129", "1");
        org.joda.time.tz.NameProvider nameProvider13 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale.Builder builder14 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder17 = builder14.setExtension('x', "jpn");
        java.util.Locale locale18 = java.util.Locale.GERMAN;
        java.util.Locale locale19 = java.util.Locale.GERMAN;
        java.lang.String str20 = locale18.getDisplayCountry(locale19);
        java.util.Locale locale21 = locale18.stripExtensions();
        java.lang.String str22 = locale18.getDisplayName();
        java.util.Locale.Builder builder23 = builder17.setLocale(locale18);
        java.lang.String str26 = nameProvider13.getName(locale18, "Japanese", "UTC");
        java.util.Locale.Builder builder27 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder30 = builder27.setExtension('x', "jpn");
        java.util.Locale locale31 = builder27.build();
        java.lang.String str34 = nameProvider13.getName(locale31, "1", "Japanisch");
        java.lang.String str35 = locale12.getDisplayCountry(locale31);
        java.lang.String str36 = locale31.getScript();
        java.lang.String str37 = localDateTime4.toString("53196078", locale31);
        org.joda.time.LocalDateTime.Property property38 = localDateTime4.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime40 = localDateTime4.withYear(49785444);
        org.joda.time.LocalDateTime.Property property41 = localDateTime40.yearOfCentury();
        boolean boolean42 = property41.isLeap();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53314 + "'", int3 == 53314);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2022 + "'", int5 == 2022);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 52 + "'", int6 == 52);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2022 + "'", int8 == 2022);
        org.junit.Assert.assertEquals(locale12.toString(), "53168129_1");
        org.junit.Assert.assertNotNull(nameProvider13);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "de");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "de");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "de");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "German" + "'", str22, "German");
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "");
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "1" + "'", str35, "1");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "53196078" + "'", str37, "53196078");
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test11080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11080");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        int int5 = localDateTime4.getWeekyear();
        org.joda.time.DurationFieldType durationFieldType6 = org.joda.time.DurationFieldType.days();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime4.withFieldAdded(durationFieldType6, 53166088);
        org.joda.time.chrono.ISOChronology iSOChronology9 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology9.hourOfHalfday();
        java.lang.String str11 = iSOChronology9.toString();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology9.era();
        org.joda.time.DurationField durationField13 = iSOChronology9.centuries();
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        long long17 = iSOChronology9.add(readablePeriod14, (long) 2022, (int) (byte) 100);
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology9.dayOfYear();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology9.year();
        boolean boolean20 = durationFieldType6.isSupported((org.joda.time.Chronology) iSOChronology9);
        org.joda.time.DurationField durationField21 = iSOChronology9.centuries();
        org.joda.time.DurationField durationField22 = iSOChronology9.weekyears();
        org.joda.time.DateTimeField dateTimeField23 = iSOChronology9.year();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53314 + "'", int3 == 53314);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2022 + "'", int5 == 2022);
        org.junit.Assert.assertNotNull(durationFieldType6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(iSOChronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "ISOChronology[+00:00:53.314]" + "'", str11, "ISOChronology[+00:00:53.314]");
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 2022L + "'", long17 == 2022L);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
    }

    @Test
    public void test11081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11081");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet1 = locale0.getExtensionKeys();
        java.util.stream.Stream<java.lang.Character> charStream2 = charSet1.parallelStream();
        java.util.Locale locale3 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet4 = locale3.getExtensionKeys();
        java.util.Iterator<java.lang.Character> charItor5 = charSet4.iterator();
        boolean boolean6 = charSet1.removeAll((java.util.Collection<java.lang.Character>) charSet4);
        java.util.TimeZone timeZone7 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forTimeZone(timeZone7);
        int int10 = dateTimeZone8.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now(dateTimeZone8);
        int int12 = localDateTime11.getWeekyear();
        org.joda.time.LocalDateTime.Property property13 = localDateTime11.millisOfDay();
        java.lang.String str14 = property13.getAsString();
        int int15 = property13.getLeapAmount();
        org.joda.time.LocalDateTime localDateTime17 = property13.addToCopy((int) '4');
        org.joda.time.LocalDateTime localDateTime19 = property13.addToCopy((-1L));
        java.util.Locale locale20 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet21 = locale20.getExtensionKeys();
        java.util.Iterator<java.lang.Character> charItor22 = charSet21.iterator();
        java.util.ArrayList[] arrayListArray24 = new java.util.ArrayList[0];
        @SuppressWarnings("unchecked")
        java.util.ArrayList<java.util.Locale.LanguageRange>[] languageRangeListArray25 = (java.util.ArrayList<java.util.Locale.LanguageRange>[]) arrayListArray24;
        java.util.ArrayList<java.util.Locale.LanguageRange>[] languageRangeListArray26 = charSet21.toArray((java.util.ArrayList<java.util.Locale.LanguageRange>[]) arrayListArray24);
        java.util.stream.Stream<java.lang.Character> charStream27 = charSet21.stream();
        java.util.Locale locale28 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet29 = locale28.getExtensionKeys();
        java.util.Iterator<java.lang.Character> charItor30 = charSet29.iterator();
        java.util.Locale locale31 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet32 = locale31.getExtensionKeys();
        java.util.Iterator<java.lang.Character> charItor33 = charSet32.iterator();
        boolean boolean34 = charSet29.containsAll((java.util.Collection<java.lang.Character>) charSet32);
        java.util.TimeZone timeZone35 = null;
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forTimeZone(timeZone35);
        int int38 = dateTimeZone36.getOffset(100L);
        java.util.TimeZone timeZone39 = dateTimeZone36.toTimeZone();
        org.joda.time.DateTimeZone[] dateTimeZoneArray40 = new org.joda.time.DateTimeZone[] { dateTimeZone36 };
        org.joda.time.DateTimeZone[] dateTimeZoneArray41 = charSet32.toArray(dateTimeZoneArray40);
        java.util.Locale locale42 = java.util.Locale.GERMAN;
        java.lang.String str43 = locale42.getDisplayScript();
        java.lang.String str45 = locale42.getExtension('x');
        java.util.Set<java.lang.Character> charSet46 = locale42.getExtensionKeys();
        boolean boolean47 = charSet32.retainAll((java.util.Collection<java.lang.Character>) charSet46);
        boolean boolean48 = charSet21.addAll((java.util.Collection<java.lang.Character>) charSet46);
        org.joda.time.chrono.ISOChronology iSOChronology49 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField50 = iSOChronology49.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField51 = iSOChronology49.yearOfEra();
        org.joda.time.DateTimeField dateTimeField52 = iSOChronology49.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField53 = iSOChronology49.weekOfWeekyear();
        org.joda.time.chrono.ISOChronology iSOChronology54 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField55 = iSOChronology54.hourOfHalfday();
        org.joda.time.tz.NameProvider nameProvider56 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale57 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet58 = locale57.getExtensionKeys();
        java.lang.String str61 = nameProvider56.getShortName(locale57, "Koordinierte Universalzeit", "+00:00");
        java.util.Locale locale62 = java.util.Locale.GERMAN;
        java.lang.String str65 = nameProvider56.getShortName(locale62, "53167803", "jpn");
        int int66 = dateTimeField55.getMaximumTextLength(locale62);
        int int67 = dateTimeField53.getMaximumTextLength(locale62);
        java.util.Set<java.lang.Character> charSet68 = locale62.getExtensionKeys();
        boolean boolean69 = charSet46.removeAll((java.util.Collection<java.lang.Character>) charSet68);
        java.util.Locale locale70 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet71 = locale70.getExtensionKeys();
        java.util.Iterator<java.lang.Character> charItor72 = charSet71.iterator();
        boolean boolean73 = charSet71.isEmpty();
        boolean boolean74 = charSet68.addAll((java.util.Collection<java.lang.Character>) charSet71);
        java.util.stream.Stream<java.lang.Character> charStream75 = charSet71.parallelStream();
        java.util.stream.Stream<java.lang.Character> charStream76 = charSet71.stream();
        boolean boolean77 = localDateTime19.equals((java.lang.Object) charSet71);
        boolean boolean78 = charSet1.retainAll((java.util.Collection<java.lang.Character>) charSet71);
        java.lang.Object[] objArray79 = charSet1.toArray();
        charSet1.clear();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet1);
        org.junit.Assert.assertNotNull(charStream2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet4);
        org.junit.Assert.assertNotNull(charItor5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(dateTimeZone8);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 53314 + "'", int10 == 53314);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2022 + "'", int12 == 2022);
        org.junit.Assert.assertNotNull(property13);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "53714004" + "'", str14, "53714004");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet21);
        org.junit.Assert.assertNotNull(charItor22);
        org.junit.Assert.assertNotNull(arrayListArray24);
        org.junit.Assert.assertNotNull(languageRangeListArray25);
        org.junit.Assert.assertNotNull(languageRangeListArray26);
        org.junit.Assert.assertNotNull(charStream27);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet29);
        org.junit.Assert.assertNotNull(charItor30);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet32);
        org.junit.Assert.assertNotNull(charItor33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(dateTimeZone36);
// flaky:         org.junit.Assert.assertTrue("'" + int38 + "' != '" + 53314 + "'", int38 == 53314);
        org.junit.Assert.assertNotNull(timeZone39);
// flaky:         org.junit.Assert.assertEquals(timeZone39.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTimeZoneArray40);
        org.junit.Assert.assertNotNull(dateTimeZoneArray41);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "de");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNotNull(charSet46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(iSOChronology49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(iSOChronology54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(nameProvider56);
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet58);
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "de");
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2 + "'", int66 == 2);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 2 + "'", int67 == 2);
        org.junit.Assert.assertNotNull(charSet68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet71);
        org.junit.Assert.assertNotNull(charItor72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(charStream75);
        org.junit.Assert.assertNotNull(charStream76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(objArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray79), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray79), "[]");
    }

    @Test
    public void test11082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11082");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.yearOfEra();
        org.joda.time.DurationField durationField3 = iSOChronology0.minutes();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.weekyear();
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        int int8 = dateTimeZone6.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime9 = org.joda.time.LocalDateTime.now(dateTimeZone6);
        org.joda.time.LocalDateTime localDateTime10 = org.joda.time.LocalDateTime.now(dateTimeZone6);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.plusSeconds((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime10.minusWeeks((int) (byte) 10);
        java.util.TimeZone timeZone15 = null;
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forTimeZone(timeZone15);
        int int18 = dateTimeZone16.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime19 = org.joda.time.LocalDateTime.now(dateTimeZone16);
        int int20 = localDateTime19.getWeekyear();
        org.joda.time.LocalDateTime.Property property21 = localDateTime19.millisOfDay();
        java.util.TimeZone timeZone22 = null;
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        int int25 = dateTimeZone23.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime26 = org.joda.time.LocalDateTime.now(dateTimeZone23);
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.DateTime dateTime28 = localDateTime26.toDateTime(readableInstant27);
        java.util.TimeZone timeZone29 = null;
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forTimeZone(timeZone29);
        int int32 = dateTimeZone30.getOffset(100L);
        org.joda.time.DateTime dateTime33 = localDateTime26.toDateTime(dateTimeZone30);
        int int34 = property21.compareTo((org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.LocalDateTime localDateTime35 = property21.roundHalfEvenCopy();
        java.util.TimeZone timeZone36 = null;
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forTimeZone(timeZone36);
        int int39 = dateTimeZone37.getOffset(100L);
        java.lang.String str40 = dateTimeZone37.getID();
        java.util.Locale locale42 = java.util.Locale.ENGLISH;
        java.lang.String str43 = dateTimeZone37.getName(31556952000000L, locale42);
        java.lang.String str44 = property21.getAsText(locale42);
        java.lang.String str45 = dateTimeField4.getAsText((org.joda.time.ReadablePartial) localDateTime14, locale42);
        org.joda.time.DurationFieldType durationFieldType46 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.LocalDateTime localDateTime48 = localDateTime14.withFieldAdded(durationFieldType46, (int) 'x');
        java.lang.String str49 = durationFieldType46.getName();
        java.lang.String str50 = durationFieldType46.getName();
        org.joda.time.chrono.ISOChronology iSOChronology51 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField52 = iSOChronology51.weekOfWeekyear();
        java.util.TimeZone timeZone53 = null;
        org.joda.time.DateTimeZone dateTimeZone54 = org.joda.time.DateTimeZone.forTimeZone(timeZone53);
        java.lang.String str56 = dateTimeZone54.getName(31556995199999L);
        org.joda.time.Chronology chronology57 = iSOChronology51.withZone(dateTimeZone54);
        org.joda.time.DurationField durationField58 = iSOChronology51.halfdays();
        org.joda.time.DurationField durationField59 = iSOChronology51.millis();
        org.joda.time.DurationField durationField60 = durationFieldType46.getField((org.joda.time.Chronology) iSOChronology51);
        org.joda.time.DateTimeField dateTimeField61 = iSOChronology51.clockhourOfDay();
        java.util.Locale locale63 = null;
        java.lang.String str64 = dateTimeField61.getAsShortText(1645455032172L, locale63);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 53314 + "'", int8 == 53314);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(dateTimeZone16);
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + 53314 + "'", int18 == 53314);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2022 + "'", int20 == 2022);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTimeZone23);
// flaky:         org.junit.Assert.assertTrue("'" + int25 + "' != '" + 53314 + "'", int25 == 53314);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTimeZone30);
// flaky:         org.junit.Assert.assertTrue("'" + int32 + "' != '" + 53314 + "'", int32 == 53314);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(dateTimeZone37);
// flaky:         org.junit.Assert.assertTrue("'" + int39 + "' != '" + 53314 + "'", int39 == 53314);
// flaky:         org.junit.Assert.assertEquals("'" + str40 + "' != '" + "+00:00:53.314" + "'", str40, "+00:00:53.314");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str43 + "' != '" + "+00:00:53.314" + "'", str43, "+00:00:53.314");
// flaky:         org.junit.Assert.assertEquals("'" + str44 + "' != '" + "53714116" + "'", str44, "53714116");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "2021" + "'", str45, "2021");
        org.junit.Assert.assertNotNull(durationFieldType46);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "centuries" + "'", str49, "centuries");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "centuries" + "'", str50, "centuries");
        org.junit.Assert.assertNotNull(iSOChronology51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(dateTimeZone54);
// flaky:         org.junit.Assert.assertEquals("'" + str56 + "' != '" + "+00:00:53.314" + "'", str56, "+00:00:53.314");
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(durationField58);
        org.junit.Assert.assertNotNull(durationField59);
        org.junit.Assert.assertNotNull(durationField60);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "14" + "'", str64, "14");
    }

    @Test
    public void test11083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11083");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.centuryOfEra();
        org.joda.time.DurationField durationField3 = iSOChronology0.seconds();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.clockhourOfDay();
        org.joda.time.Chronology chronology5 = iSOChronology0.withUTC();
        org.joda.time.DateTimeField dateTimeField6 = iSOChronology0.halfdayOfDay();
        java.util.TimeZone timeZone7 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forTimeZone(timeZone7);
        int int10 = dateTimeZone8.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now(dateTimeZone8);
        org.joda.time.LocalDateTime localDateTime12 = org.joda.time.LocalDateTime.now(dateTimeZone8);
        org.joda.time.Chronology chronology13 = iSOChronology0.withZone(dateTimeZone8);
        boolean boolean14 = dateTimeZone8.isFixed();
        org.joda.time.chrono.ISOChronology iSOChronology15 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology15.hourOfHalfday();
        java.lang.String str17 = iSOChronology15.toString();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology15.era();
        org.joda.time.DurationField durationField19 = iSOChronology15.centuries();
        org.joda.time.DurationField durationField20 = iSOChronology15.weeks();
        org.joda.time.DateTimeField dateTimeField21 = iSOChronology15.era();
        org.joda.time.DateTimeField dateTimeField22 = iSOChronology15.year();
        org.joda.time.DurationField durationField23 = iSOChronology15.months();
        java.lang.String str24 = durationField23.getName();
        boolean boolean25 = dateTimeZone8.equals((java.lang.Object) durationField23);
        // The following exception was thrown during execution in test generation
        try {
            long long28 = durationField23.subtract((long) 53570462, 1645454802170L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Magnitude of add amount is too large: -1645454802170");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeZone8);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 53314 + "'", int10 == 53314);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(iSOChronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "ISOChronology[+00:00:53.314]" + "'", str17, "ISOChronology[+00:00:53.314]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "months" + "'", str24, "months");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test11084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11084");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        int int5 = localDateTime4.getWeekyear();
        org.joda.time.DurationFieldType durationFieldType6 = org.joda.time.DurationFieldType.days();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime4.withFieldAdded(durationFieldType6, 53166088);
        org.joda.time.chrono.ISOChronology iSOChronology9 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology9.hourOfHalfday();
        java.lang.String str11 = iSOChronology9.toString();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology9.era();
        org.joda.time.DurationField durationField13 = iSOChronology9.centuries();
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        long long17 = iSOChronology9.add(readablePeriod14, (long) 2022, (int) (byte) 100);
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology9.dayOfYear();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology9.year();
        boolean boolean20 = durationFieldType6.isSupported((org.joda.time.Chronology) iSOChronology9);
        org.joda.time.DateTimeField dateTimeField21 = iSOChronology9.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField22 = iSOChronology9.monthOfYear();
        org.joda.time.DateTimeField dateTimeField23 = iSOChronology9.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField24 = iSOChronology9.weekyearOfCentury();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53314 + "'", int3 == 53314);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2022 + "'", int5 == 2022);
        org.junit.Assert.assertNotNull(durationFieldType6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(iSOChronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "ISOChronology[+00:00:53.314]" + "'", str11, "ISOChronology[+00:00:53.314]");
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 2022L + "'", long17 == 2022L);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
    }

    @Test
    public void test11085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11085");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setExtension('x', "jpn");
        java.util.Locale locale4 = java.util.Locale.GERMAN;
        java.util.Locale locale5 = java.util.Locale.GERMAN;
        java.lang.String str6 = locale4.getDisplayCountry(locale5);
        java.util.Locale locale7 = locale4.stripExtensions();
        java.lang.String str8 = locale4.getDisplayName();
        java.util.Locale.Builder builder9 = builder3.setLocale(locale4);
        java.util.Locale.Builder builder12 = builder9.setUnicodeLocaleKeyword("22", "deu");
        java.util.Locale.Builder builder13 = builder9.clear();
        java.util.Locale.Builder builder14 = builder9.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder16 = builder9.setLanguageTag("49826193");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Invalid subtag: 49826193 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "de");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "de");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "German" + "'", str8, "German");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test11086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11086");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        java.util.TimeZone timeZone1 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        int int4 = dateTimeZone2.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime5 = org.joda.time.LocalDateTime.now(dateTimeZone2);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray6 = localDateTime5.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.hourOfDay();
        int int8 = localDateTime5.get(dateTimeFieldType7);
        org.joda.time.LocalDateTime.Property property9 = localDateTime5.dayOfWeek();
        boolean boolean10 = localDateTime0.isEqual((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.LocalDateTime.Property property11 = localDateTime5.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime12 = property11.roundHalfCeilingCopy();
        java.util.TimeZone timeZone13 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forTimeZone(timeZone13);
        int int16 = dateTimeZone14.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime17 = org.joda.time.LocalDateTime.now(dateTimeZone14);
        org.joda.time.LocalDateTime localDateTime18 = org.joda.time.LocalDateTime.now(dateTimeZone14);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.minusMinutes((int) ' ');
        int int21 = property11.compareTo((org.joda.time.ReadablePartial) localDateTime20);
        int int22 = property11.getMaximumValueOverall();
        java.lang.String str23 = property11.getAsText();
        org.joda.time.LocalDateTime localDateTime24 = property11.roundFloorCopy();
        org.joda.time.LocalDateTime.Property property25 = localDateTime24.hourOfDay();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime24.minusYears(12);
        org.joda.time.LocalDateTime.Property property28 = localDateTime24.hourOfDay();
        org.joda.time.LocalDateTime.Property property29 = localDateTime24.hourOfDay();
        org.joda.time.LocalDateTime localDateTime30 = property29.withMaximumValue();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(dateTimeZone2);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 53314 + "'", int4 == 53314);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 14 + "'", int8 == 14);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
// flaky:         org.junit.Assert.assertTrue("'" + int16 + "' != '" + 53314 + "'", int16 == 53314);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 31 + "'", int22 == 31);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "21" + "'", str23, "21");
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(localDateTime30);
    }

    @Test
    public void test11087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11087");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.centuryOfEra();
        org.joda.time.DurationField durationField3 = iSOChronology0.seconds();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology0.hourOfHalfday();
        long long9 = iSOChronology0.add((long) (short) 100, 1644849973425L, 2720);
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology0.centuryOfEra();
        org.joda.time.DurationField durationField11 = iSOChronology0.years();
        org.joda.time.DurationField durationField12 = iSOChronology0.halfdays();
        org.joda.time.DateTimeField dateTimeField13 = iSOChronology0.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology0.centuryOfEra();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 4473991927716100L + "'", long9 == 4473991927716100L);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
    }

    @Test
    public void test11088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11088");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.hourOfHalfday();
        java.util.TimeZone timeZone3 = null;
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forTimeZone(timeZone3);
        int int6 = dateTimeZone4.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime7 = org.joda.time.LocalDateTime.now(dateTimeZone4);
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.DateTime dateTime9 = localDateTime7.toDateTime(readableInstant8);
        java.util.TimeZone timeZone10 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        int int13 = dateTimeZone11.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime14 = org.joda.time.LocalDateTime.now(dateTimeZone11);
        org.joda.time.LocalDateTime localDateTime15 = org.joda.time.LocalDateTime.now(dateTimeZone11);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.minusYears(2022);
        org.joda.time.LocalDateTime.Property property18 = localDateTime17.era();
        int int19 = localDateTime7.compareTo((org.joda.time.ReadablePartial) localDateTime17);
        org.joda.time.chrono.ISOChronology iSOChronology20 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField21 = iSOChronology20.hourOfHalfday();
        java.lang.String str22 = iSOChronology20.toString();
        java.util.TimeZone timeZone23 = null;
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forTimeZone(timeZone23);
        int int26 = dateTimeZone24.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime27 = org.joda.time.LocalDateTime.now(dateTimeZone24);
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.DateTime dateTime29 = localDateTime27.toDateTime(readableInstant28);
        org.joda.time.Chronology chronology30 = dateTime29.getChronology();
        org.joda.time.DurationField durationField31 = chronology30.hours();
        org.joda.time.DurationField durationField32 = chronology30.months();
        org.joda.time.DateTimeField dateTimeField33 = chronology30.dayOfYear();
        java.util.TimeZone timeZone34 = null;
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forTimeZone(timeZone34);
        int int37 = dateTimeZone35.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime38 = org.joda.time.LocalDateTime.now(dateTimeZone35);
        int[] intArray41 = new int[] { (short) 0, (short) 0 };
        int int42 = dateTimeField33.getMinimumValue((org.joda.time.ReadablePartial) localDateTime38, intArray41);
        java.lang.String str44 = dateTimeField33.getAsShortText((long) 53166088);
        java.util.TimeZone timeZone45 = null;
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.forTimeZone(timeZone45);
        int int48 = dateTimeZone46.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime49 = org.joda.time.LocalDateTime.now(dateTimeZone46);
        int int50 = localDateTime49.getWeekyear();
        org.joda.time.DurationFieldType durationFieldType51 = org.joda.time.DurationFieldType.days();
        org.joda.time.LocalDateTime localDateTime53 = localDateTime49.withFieldAdded(durationFieldType51, 53166088);
        java.util.Locale locale54 = java.util.Locale.ROOT;
        java.lang.String str55 = dateTimeField33.getAsShortText((org.joda.time.ReadablePartial) localDateTime53, locale54);
        java.util.TimeZone timeZone56 = null;
        org.joda.time.DateTimeZone dateTimeZone57 = org.joda.time.DateTimeZone.forTimeZone(timeZone56);
        int int59 = dateTimeZone57.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime60 = org.joda.time.LocalDateTime.now(dateTimeZone57);
        int int61 = localDateTime60.getWeekyear();
        boolean boolean62 = localDateTime53.isEqual((org.joda.time.ReadablePartial) localDateTime60);
        int[] intArray64 = iSOChronology20.get((org.joda.time.ReadablePartial) localDateTime60, (long) 53166088);
        iSOChronology0.validate((org.joda.time.ReadablePartial) localDateTime7, intArray64);
        org.joda.time.DurationField durationField66 = iSOChronology0.minutes();
        org.joda.time.DurationField durationField67 = iSOChronology0.weeks();
        org.joda.time.DateTimeField dateTimeField68 = iSOChronology0.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField69 = iSOChronology0.millisOfDay();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeZone4);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 53314 + "'", int6 == 53314);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone11);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 53314 + "'", int13 == 53314);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(iSOChronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "ISOChronology[+00:00:53.314]" + "'", str22, "ISOChronology[+00:00:53.314]");
        org.junit.Assert.assertNotNull(dateTimeZone24);
// flaky:         org.junit.Assert.assertTrue("'" + int26 + "' != '" + 53314 + "'", int26 == 53314);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeZone35);
// flaky:         org.junit.Assert.assertTrue("'" + int37 + "' != '" + 53314 + "'", int37 == 53314);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[0, 0]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "1" + "'", str44, "1");
        org.junit.Assert.assertNotNull(dateTimeZone46);
// flaky:         org.junit.Assert.assertTrue("'" + int48 + "' != '" + 53314 + "'", int48 == 53314);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2022 + "'", int50 == 2022);
        org.junit.Assert.assertNotNull(durationFieldType51);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "346" + "'", str55, "346");
        org.junit.Assert.assertNotNull(dateTimeZone57);
// flaky:         org.junit.Assert.assertTrue("'" + int59 + "' != '" + 53314 + "'", int59 == 53314);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 2022 + "'", int61 == 2022);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(intArray64);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[1970, 1, 1, 53219402]");
        org.junit.Assert.assertNotNull(durationField66);
        org.junit.Assert.assertNotNull(durationField67);
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertNotNull(dateTimeField69);
    }

    @Test
    public void test11089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11089");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet1 = locale0.getExtensionKeys();
        java.util.Iterator<java.lang.Character> charItor2 = charSet1.iterator();
        java.util.ArrayList[] arrayListArray4 = new java.util.ArrayList[0];
        @SuppressWarnings("unchecked")
        java.util.ArrayList<java.util.Locale.LanguageRange>[] languageRangeListArray5 = (java.util.ArrayList<java.util.Locale.LanguageRange>[]) arrayListArray4;
        java.util.ArrayList<java.util.Locale.LanguageRange>[] languageRangeListArray6 = charSet1.toArray((java.util.ArrayList<java.util.Locale.LanguageRange>[]) arrayListArray4);
        java.util.TimeZone timeZone7 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forTimeZone(timeZone7);
        int int10 = dateTimeZone8.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now(dateTimeZone8);
        int int12 = localDateTime11.getWeekyear();
        org.joda.time.LocalDateTime.Property property13 = localDateTime11.millisOfDay();
        java.util.TimeZone timeZone14 = null;
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forTimeZone(timeZone14);
        int int17 = dateTimeZone15.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime18 = org.joda.time.LocalDateTime.now(dateTimeZone15);
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.DateTime dateTime20 = localDateTime18.toDateTime(readableInstant19);
        java.util.TimeZone timeZone21 = null;
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forTimeZone(timeZone21);
        int int24 = dateTimeZone22.getOffset(100L);
        org.joda.time.DateTime dateTime25 = localDateTime18.toDateTime(dateTimeZone22);
        int int26 = property13.compareTo((org.joda.time.ReadableInstant) dateTime25);
        boolean boolean27 = charSet1.equals((java.lang.Object) dateTime25);
        java.util.Locale locale28 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet29 = locale28.getExtensionKeys();
        java.util.Iterator<java.lang.Character> charItor30 = charSet29.iterator();
        java.util.Locale locale31 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet32 = locale31.getExtensionKeys();
        java.util.Iterator<java.lang.Character> charItor33 = charSet32.iterator();
        boolean boolean34 = charSet29.containsAll((java.util.Collection<java.lang.Character>) charSet32);
        java.util.TimeZone timeZone35 = null;
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forTimeZone(timeZone35);
        int int38 = dateTimeZone36.getOffset(100L);
        java.util.TimeZone timeZone39 = dateTimeZone36.toTimeZone();
        org.joda.time.DateTimeZone[] dateTimeZoneArray40 = new org.joda.time.DateTimeZone[] { dateTimeZone36 };
        org.joda.time.DateTimeZone[] dateTimeZoneArray41 = charSet32.toArray(dateTimeZoneArray40);
        boolean boolean42 = charSet1.removeAll((java.util.Collection<java.lang.Character>) charSet32);
        java.lang.Object[] objArray43 = charSet32.toArray();
        boolean boolean45 = charSet32.contains((java.lang.Object) 53379049);
        java.util.TimeZone timeZone46 = null;
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.forTimeZone(timeZone46);
        int int49 = dateTimeZone47.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime50 = org.joda.time.LocalDateTime.now(dateTimeZone47);
        org.joda.time.ReadableInstant readableInstant51 = null;
        org.joda.time.DateTime dateTime52 = localDateTime50.toDateTime(readableInstant51);
        org.joda.time.Chronology chronology53 = dateTime52.getChronology();
        org.joda.time.DurationField durationField54 = chronology53.hours();
        org.joda.time.DurationField durationField55 = chronology53.months();
        org.joda.time.DateTimeField dateTimeField56 = chronology53.dayOfYear();
        java.util.TimeZone timeZone57 = null;
        org.joda.time.DateTimeZone dateTimeZone58 = org.joda.time.DateTimeZone.forTimeZone(timeZone57);
        int int60 = dateTimeZone58.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime61 = org.joda.time.LocalDateTime.now(dateTimeZone58);
        int[] intArray64 = new int[] { (short) 0, (short) 0 };
        int int65 = dateTimeField56.getMinimumValue((org.joda.time.ReadablePartial) localDateTime61, intArray64);
        java.lang.String str67 = dateTimeField56.getAsShortText((long) 53166088);
        java.util.TimeZone timeZone68 = null;
        org.joda.time.DateTimeZone dateTimeZone69 = org.joda.time.DateTimeZone.forTimeZone(timeZone68);
        int int71 = dateTimeZone69.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime72 = org.joda.time.LocalDateTime.now(dateTimeZone69);
        int int73 = localDateTime72.getWeekyear();
        org.joda.time.DurationFieldType durationFieldType74 = org.joda.time.DurationFieldType.days();
        org.joda.time.LocalDateTime localDateTime76 = localDateTime72.withFieldAdded(durationFieldType74, 53166088);
        java.util.Locale locale77 = java.util.Locale.ROOT;
        java.lang.String str78 = dateTimeField56.getAsShortText((org.joda.time.ReadablePartial) localDateTime76, locale77);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter79 = null;
        java.lang.String str80 = localDateTime76.toString(dateTimeFormatter79);
        org.joda.time.LocalDateTime localDateTime82 = localDateTime76.minusWeeks(2817386);
        org.joda.time.LocalDateTime localDateTime84 = localDateTime76.plusYears(274440000);
        boolean boolean85 = charSet32.equals((java.lang.Object) localDateTime76);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet1);
        org.junit.Assert.assertNotNull(charItor2);
        org.junit.Assert.assertNotNull(arrayListArray4);
        org.junit.Assert.assertNotNull(languageRangeListArray5);
        org.junit.Assert.assertNotNull(languageRangeListArray6);
        org.junit.Assert.assertNotNull(dateTimeZone8);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 53314 + "'", int10 == 53314);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2022 + "'", int12 == 2022);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
// flaky:         org.junit.Assert.assertTrue("'" + int17 + "' != '" + 53314 + "'", int17 == 53314);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTimeZone22);
// flaky:         org.junit.Assert.assertTrue("'" + int24 + "' != '" + 53314 + "'", int24 == 53314);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet29);
        org.junit.Assert.assertNotNull(charItor30);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet32);
        org.junit.Assert.assertNotNull(charItor33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(dateTimeZone36);
// flaky:         org.junit.Assert.assertTrue("'" + int38 + "' != '" + 53314 + "'", int38 == 53314);
        org.junit.Assert.assertNotNull(timeZone39);
// flaky:         org.junit.Assert.assertEquals(timeZone39.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTimeZoneArray40);
        org.junit.Assert.assertNotNull(dateTimeZoneArray41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[]");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(dateTimeZone47);
// flaky:         org.junit.Assert.assertTrue("'" + int49 + "' != '" + 53314 + "'", int49 == 53314);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(durationField54);
        org.junit.Assert.assertNotNull(durationField55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(dateTimeZone58);
// flaky:         org.junit.Assert.assertTrue("'" + int60 + "' != '" + 53314 + "'", int60 == 53314);
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[0, 0]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "1" + "'", str67, "1");
        org.junit.Assert.assertNotNull(dateTimeZone69);
// flaky:         org.junit.Assert.assertTrue("'" + int71 + "' != '" + 53314 + "'", int71 == 53314);
        org.junit.Assert.assertNotNull(localDateTime72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 2022 + "'", int73 == 2022);
        org.junit.Assert.assertNotNull(durationFieldType74);
        org.junit.Assert.assertNotNull(localDateTime76);
        org.junit.Assert.assertNotNull(locale77);
        org.junit.Assert.assertEquals(locale77.toString(), "");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "346" + "'", str78, "346");
// flaky:         org.junit.Assert.assertEquals("'" + str80 + "' != '" + "147585-12-12T14:55:14.335" + "'", str80, "147585-12-12T14:55:14.335");
        org.junit.Assert.assertNotNull(localDateTime82);
        org.junit.Assert.assertNotNull(localDateTime84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
    }

    @Test
    public void test11090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11090");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime5 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.plusSeconds((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime5.minusWeeks((int) (byte) 10);
        java.util.TimeZone timeZone10 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        int int13 = dateTimeZone11.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime14 = org.joda.time.LocalDateTime.now(dateTimeZone11);
        org.joda.time.LocalDateTime localDateTime15 = org.joda.time.LocalDateTime.now(dateTimeZone11);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.plusSeconds((int) (short) 10);
        int int18 = localDateTime15.size();
        boolean boolean19 = localDateTime9.isBefore((org.joda.time.ReadablePartial) localDateTime15);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime15.withMillisOfSecond(52);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.plusMinutes(0);
        int int24 = localDateTime23.getHourOfDay();
        java.util.TimeZone timeZone25 = null;
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forTimeZone(timeZone25);
        int int28 = dateTimeZone26.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime29 = org.joda.time.LocalDateTime.now(dateTimeZone26);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray30 = localDateTime29.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = org.joda.time.DateTimeFieldType.hourOfDay();
        int int32 = localDateTime29.get(dateTimeFieldType31);
        org.joda.time.LocalDateTime.Property property33 = localDateTime29.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime35 = localDateTime29.minusHours(20);
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = localDateTime29.getFieldType((int) (byte) 1);
        boolean boolean38 = localDateTime23.isSupported(dateTimeFieldType37);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime23.withHourOfDay(21);
        java.lang.String str42 = localDateTime23.toString("2936838");
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53314 + "'", int3 == 53314);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone11);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 53314 + "'", int13 == 53314);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 4 + "'", int18 == 4);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
// flaky:         org.junit.Assert.assertTrue("'" + int24 + "' != '" + 14 + "'", int24 == 14);
        org.junit.Assert.assertNotNull(dateTimeZone26);
// flaky:         org.junit.Assert.assertTrue("'" + int28 + "' != '" + 53314 + "'", int28 == 53314);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray30);
        org.junit.Assert.assertNotNull(dateTimeFieldType31);
// flaky:         org.junit.Assert.assertTrue("'" + int32 + "' != '" + 14 + "'", int32 == 14);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "2936838" + "'", str42, "2936838");
    }

    @Test
    public void test11091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11091");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("2022-02-21T13:51:55.417", (double) (-58312775475882L));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: weight=-5.8312775475882E13");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test11092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11092");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.DateTime dateTime6 = localDateTime4.toDateTime(readableInstant5);
        org.joda.time.Chronology chronology7 = dateTime6.getChronology();
        org.joda.time.DurationField durationField8 = chronology7.hours();
        org.joda.time.DurationField durationField9 = chronology7.months();
        org.joda.time.DateTimeField dateTimeField10 = chronology7.dayOfYear();
        java.util.TimeZone timeZone11 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        int int14 = dateTimeZone12.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime15 = org.joda.time.LocalDateTime.now(dateTimeZone12);
        int[] intArray18 = new int[] { (short) 0, (short) 0 };
        int int19 = dateTimeField10.getMinimumValue((org.joda.time.ReadablePartial) localDateTime15, intArray18);
        int int21 = dateTimeField10.getMinimumValue((long) 100);
        java.util.TimeZone timeZone22 = null;
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        int int25 = dateTimeZone23.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime26 = org.joda.time.LocalDateTime.now(dateTimeZone23);
        int int27 = localDateTime26.getWeekyear();
        org.joda.time.LocalDateTime.Property property28 = localDateTime26.minuteOfHour();
        int int29 = dateTimeField10.getMaximumValue((org.joda.time.ReadablePartial) localDateTime26);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime26.withCenturyOfEra(1);
        org.joda.time.LocalDateTime.Property property32 = localDateTime26.weekyear();
        java.util.TimeZone timeZone33 = null;
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forTimeZone(timeZone33);
        int int36 = dateTimeZone34.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime37 = org.joda.time.LocalDateTime.now(dateTimeZone34);
        org.joda.time.ReadableInstant readableInstant38 = null;
        org.joda.time.DateTime dateTime39 = localDateTime37.toDateTime(readableInstant38);
        java.util.TimeZone timeZone40 = null;
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forTimeZone(timeZone40);
        int int43 = dateTimeZone41.getOffset(100L);
        org.joda.time.DateTime dateTime44 = localDateTime37.toDateTime(dateTimeZone41);
        org.joda.time.LocalDateTime.Property property45 = localDateTime37.monthOfYear();
        java.lang.String str46 = property45.getAsText();
        org.joda.time.LocalDateTime localDateTime47 = property45.roundCeilingCopy();
        int int48 = localDateTime26.compareTo((org.joda.time.ReadablePartial) localDateTime47);
        org.joda.time.LocalDateTime localDateTime50 = localDateTime26.withWeekyear(365);
        int int51 = localDateTime50.getYear();
        org.joda.time.LocalDateTime.Property property52 = localDateTime50.dayOfWeek();
        int int53 = property52.getMaximumValue();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53314 + "'", int3 == 53314);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeZone12);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 53314 + "'", int14 == 53314);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[0, 0]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(dateTimeZone23);
// flaky:         org.junit.Assert.assertTrue("'" + int25 + "' != '" + 53314 + "'", int25 == 53314);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2022 + "'", int27 == 2022);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 365 + "'", int29 == 365);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(dateTimeZone34);
// flaky:         org.junit.Assert.assertTrue("'" + int36 + "' != '" + 53314 + "'", int36 == 53314);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTimeZone41);
// flaky:         org.junit.Assert.assertTrue("'" + int43 + "' != '" + 53314 + "'", int43 == 53314);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "February" + "'", str46, "February");
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 365 + "'", int51 == 365);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 7 + "'", int53 == 7);
    }

    @Test
    public void test11093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11093");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.hourOfHalfday();
        java.util.TimeZone timeZone3 = null;
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forTimeZone(timeZone3);
        int int6 = dateTimeZone4.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime7 = org.joda.time.LocalDateTime.now(dateTimeZone4);
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.DateTime dateTime9 = localDateTime7.toDateTime(readableInstant8);
        java.util.TimeZone timeZone10 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        int int13 = dateTimeZone11.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime14 = org.joda.time.LocalDateTime.now(dateTimeZone11);
        org.joda.time.LocalDateTime localDateTime15 = org.joda.time.LocalDateTime.now(dateTimeZone11);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.minusYears(2022);
        org.joda.time.LocalDateTime.Property property18 = localDateTime17.era();
        int int19 = localDateTime7.compareTo((org.joda.time.ReadablePartial) localDateTime17);
        org.joda.time.chrono.ISOChronology iSOChronology20 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField21 = iSOChronology20.hourOfHalfday();
        java.lang.String str22 = iSOChronology20.toString();
        java.util.TimeZone timeZone23 = null;
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forTimeZone(timeZone23);
        int int26 = dateTimeZone24.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime27 = org.joda.time.LocalDateTime.now(dateTimeZone24);
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.DateTime dateTime29 = localDateTime27.toDateTime(readableInstant28);
        org.joda.time.Chronology chronology30 = dateTime29.getChronology();
        org.joda.time.DurationField durationField31 = chronology30.hours();
        org.joda.time.DurationField durationField32 = chronology30.months();
        org.joda.time.DateTimeField dateTimeField33 = chronology30.dayOfYear();
        java.util.TimeZone timeZone34 = null;
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forTimeZone(timeZone34);
        int int37 = dateTimeZone35.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime38 = org.joda.time.LocalDateTime.now(dateTimeZone35);
        int[] intArray41 = new int[] { (short) 0, (short) 0 };
        int int42 = dateTimeField33.getMinimumValue((org.joda.time.ReadablePartial) localDateTime38, intArray41);
        java.lang.String str44 = dateTimeField33.getAsShortText((long) 53166088);
        java.util.TimeZone timeZone45 = null;
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.forTimeZone(timeZone45);
        int int48 = dateTimeZone46.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime49 = org.joda.time.LocalDateTime.now(dateTimeZone46);
        int int50 = localDateTime49.getWeekyear();
        org.joda.time.DurationFieldType durationFieldType51 = org.joda.time.DurationFieldType.days();
        org.joda.time.LocalDateTime localDateTime53 = localDateTime49.withFieldAdded(durationFieldType51, 53166088);
        java.util.Locale locale54 = java.util.Locale.ROOT;
        java.lang.String str55 = dateTimeField33.getAsShortText((org.joda.time.ReadablePartial) localDateTime53, locale54);
        java.util.TimeZone timeZone56 = null;
        org.joda.time.DateTimeZone dateTimeZone57 = org.joda.time.DateTimeZone.forTimeZone(timeZone56);
        int int59 = dateTimeZone57.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime60 = org.joda.time.LocalDateTime.now(dateTimeZone57);
        int int61 = localDateTime60.getWeekyear();
        boolean boolean62 = localDateTime53.isEqual((org.joda.time.ReadablePartial) localDateTime60);
        int[] intArray64 = iSOChronology20.get((org.joda.time.ReadablePartial) localDateTime60, (long) 53166088);
        iSOChronology0.validate((org.joda.time.ReadablePartial) localDateTime7, intArray64);
        org.joda.time.DateTimeField dateTimeField66 = iSOChronology0.hourOfHalfday();
        org.joda.time.Chronology chronology67 = iSOChronology0.withUTC();
        org.joda.time.ReadablePeriod readablePeriod68 = null;
        long long71 = iSOChronology0.add(readablePeriod68, 30804072519755L, 49886774);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeZone4);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 53314 + "'", int6 == 53314);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone11);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 53314 + "'", int13 == 53314);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(iSOChronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "ISOChronology[+00:00:53.314]" + "'", str22, "ISOChronology[+00:00:53.314]");
        org.junit.Assert.assertNotNull(dateTimeZone24);
// flaky:         org.junit.Assert.assertTrue("'" + int26 + "' != '" + 53314 + "'", int26 == 53314);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeZone35);
// flaky:         org.junit.Assert.assertTrue("'" + int37 + "' != '" + 53314 + "'", int37 == 53314);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[0, 0]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "1" + "'", str44, "1");
        org.junit.Assert.assertNotNull(dateTimeZone46);
// flaky:         org.junit.Assert.assertTrue("'" + int48 + "' != '" + 53314 + "'", int48 == 53314);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2022 + "'", int50 == 2022);
        org.junit.Assert.assertNotNull(durationFieldType51);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "346" + "'", str55, "346");
        org.junit.Assert.assertNotNull(dateTimeZone57);
// flaky:         org.junit.Assert.assertTrue("'" + int59 + "' != '" + 53314 + "'", int59 == 53314);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 2022 + "'", int61 == 2022);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(intArray64);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[1970, 1, 1, 53219402]");
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertNotNull(chronology67);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 30804072519755L + "'", long71 == 30804072519755L);
    }

    @Test
    public void test11094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11094");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.centuryOfEra();
        org.joda.time.DurationField durationField3 = iSOChronology0.seconds();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology0.yearOfEra();
        org.joda.time.DurationField durationField6 = iSOChronology0.days();
        org.joda.time.DateTimeField dateTimeField7 = iSOChronology0.millisOfDay();
        java.util.TimeZone timeZone8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        int int11 = dateTimeZone9.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime12 = org.joda.time.LocalDateTime.now(dateTimeZone9);
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.DateTime dateTime14 = localDateTime12.toDateTime(readableInstant13);
        org.joda.time.Chronology chronology15 = dateTime14.getChronology();
        org.joda.time.DurationField durationField16 = chronology15.hours();
        org.joda.time.DurationField durationField17 = chronology15.months();
        org.joda.time.DateTimeField dateTimeField18 = chronology15.dayOfYear();
        java.util.TimeZone timeZone19 = null;
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forTimeZone(timeZone19);
        int int22 = dateTimeZone20.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime23 = org.joda.time.LocalDateTime.now(dateTimeZone20);
        int[] intArray26 = new int[] { (short) 0, (short) 0 };
        int int27 = dateTimeField18.getMinimumValue((org.joda.time.ReadablePartial) localDateTime23, intArray26);
        int int29 = dateTimeField18.getMinimumValue((long) 100);
        java.util.TimeZone timeZone30 = null;
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forTimeZone(timeZone30);
        int int33 = dateTimeZone31.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime34 = org.joda.time.LocalDateTime.now(dateTimeZone31);
        int int35 = localDateTime34.getWeekyear();
        org.joda.time.LocalDateTime.Property property36 = localDateTime34.minuteOfHour();
        int int37 = dateTimeField18.getMaximumValue((org.joda.time.ReadablePartial) localDateTime34);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime34.withCenturyOfEra(1);
        org.joda.time.LocalDateTime.Property property40 = localDateTime39.hourOfDay();
        java.util.TimeZone timeZone41 = null;
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forTimeZone(timeZone41);
        int int44 = dateTimeZone42.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime45 = org.joda.time.LocalDateTime.now(dateTimeZone42);
        org.joda.time.LocalDateTime localDateTime46 = org.joda.time.LocalDateTime.now(dateTimeZone42);
        org.joda.time.LocalDateTime localDateTime48 = localDateTime46.plusSeconds((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime50 = localDateTime46.minusWeeks((int) (byte) 10);
        java.util.TimeZone timeZone51 = null;
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.forTimeZone(timeZone51);
        int int54 = dateTimeZone52.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime55 = org.joda.time.LocalDateTime.now(dateTimeZone52);
        org.joda.time.LocalDateTime localDateTime56 = org.joda.time.LocalDateTime.now(dateTimeZone52);
        org.joda.time.LocalDateTime localDateTime58 = localDateTime56.plusSeconds((int) (short) 10);
        int int59 = localDateTime56.size();
        boolean boolean60 = localDateTime50.isBefore((org.joda.time.ReadablePartial) localDateTime56);
        org.joda.time.LocalDateTime localDateTime62 = localDateTime56.withMillisOfSecond(52);
        org.joda.time.LocalDateTime localDateTime64 = localDateTime62.plusMinutes(0);
        boolean boolean65 = property40.equals((java.lang.Object) localDateTime62);
        int int66 = localDateTime62.size();
        int int67 = localDateTime62.getDayOfMonth();
        org.joda.time.LocalDateTime localDateTime69 = new org.joda.time.LocalDateTime(1645454821576L);
        int[] intArray70 = localDateTime69.getValues();
        iSOChronology0.validate((org.joda.time.ReadablePartial) localDateTime62, intArray70);
        org.joda.time.DurationField durationField72 = iSOChronology0.millis();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeZone9);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 53314 + "'", int11 == 53314);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeZone20);
// flaky:         org.junit.Assert.assertTrue("'" + int22 + "' != '" + 53314 + "'", int22 == 53314);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[0, 0]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(dateTimeZone31);
// flaky:         org.junit.Assert.assertTrue("'" + int33 + "' != '" + 53314 + "'", int33 == 53314);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2022 + "'", int35 == 2022);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 365 + "'", int37 == 365);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(dateTimeZone42);
// flaky:         org.junit.Assert.assertTrue("'" + int44 + "' != '" + 53314 + "'", int44 == 53314);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(dateTimeZone52);
// flaky:         org.junit.Assert.assertTrue("'" + int54 + "' != '" + 53314 + "'", int54 == 53314);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 4 + "'", int59 == 4);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 4 + "'", int66 == 4);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 21 + "'", int67 == 21);
        org.junit.Assert.assertNotNull(intArray70);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[2022, 2, 21, 53274890]");
        org.junit.Assert.assertNotNull(durationField72);
    }

    @Test
    public void test11095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11095");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.hours();
        org.joda.time.chrono.ISOChronology iSOChronology1 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology1.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology1.centuryOfEra();
        org.joda.time.DurationField durationField4 = iSOChronology1.centuries();
        org.joda.time.DurationField durationField5 = iSOChronology1.hours();
        org.joda.time.DurationField durationField6 = iSOChronology1.years();
        boolean boolean7 = durationFieldType0.isSupported((org.joda.time.Chronology) iSOChronology1);
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField9 = iSOChronology8.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology8.yearOfEra();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology8.hourOfDay();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology8.dayOfMonth();
        org.joda.time.DurationField durationField13 = iSOChronology8.centuries();
        org.joda.time.DurationField durationField14 = durationFieldType0.getField((org.joda.time.Chronology) iSOChronology8);
        org.joda.time.chrono.ISOChronology iSOChronology15 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology15.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology15.centuryOfEra();
        org.joda.time.DurationField durationField18 = iSOChronology15.seconds();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology15.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField20 = iSOChronology15.hourOfHalfday();
        long long24 = iSOChronology15.add((long) (short) 100, 1644849973425L, 2720);
        java.lang.String str25 = iSOChronology15.toString();
        java.lang.String str26 = iSOChronology15.toString();
        org.joda.time.DurationField durationField27 = durationFieldType0.getField((org.joda.time.Chronology) iSOChronology15);
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(iSOChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(iSOChronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 4473991927716100L + "'", long24 == 4473991927716100L);
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "ISOChronology[+00:00:53.314]" + "'", str25, "ISOChronology[+00:00:53.314]");
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "ISOChronology[+00:00:53.314]" + "'", str26, "ISOChronology[+00:00:53.314]");
        org.junit.Assert.assertNotNull(durationField27);
    }

    @Test
    public void test11096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11096");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.centuryOfEra();
        org.joda.time.DurationField durationField3 = iSOChronology0.seconds();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology0.hourOfHalfday();
        java.util.TimeZone timeZone6 = null;
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forTimeZone(timeZone6);
        int int9 = dateTimeZone7.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime10 = org.joda.time.LocalDateTime.now(dateTimeZone7);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray11 = localDateTime10.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.hourOfDay();
        int int13 = localDateTime10.get(dateTimeFieldType12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime10.minusWeeks(1);
        long long17 = iSOChronology0.set((org.joda.time.ReadablePartial) localDateTime15, (long) 0);
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology0.secondOfDay();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology0.yearOfEra();
        org.joda.time.DateTimeField dateTimeField20 = iSOChronology0.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField21 = iSOChronology0.year();
        org.joda.time.DateTimeField dateTimeField22 = iSOChronology0.clockhourOfHalfday();
        org.joda.time.DurationField durationField23 = iSOChronology0.seconds();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeZone7);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 53314 + "'", int9 == 53314);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray11);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 14 + "'", int13 == 14);
        org.junit.Assert.assertNotNull(localDateTime15);
// flaky:         org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1644850461350L + "'", long17 == 1644850461350L);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(durationField23);
    }

    @Test
    public void test11097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11097");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.centuryOfEra();
        org.joda.time.DurationField durationField3 = iSOChronology0.centuries();
        org.joda.time.DurationField durationField4 = iSOChronology0.hours();
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        int int8 = dateTimeZone6.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime9 = org.joda.time.LocalDateTime.now(dateTimeZone6);
        int int10 = localDateTime9.getDayOfYear();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime9.withYearOfEra(2022);
        long long14 = iSOChronology0.set((org.joda.time.ReadablePartial) localDateTime12, (long) 0);
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology0.monthOfYear();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology0.clockhourOfDay();
        org.joda.time.Chronology chronology17 = iSOChronology0.withUTC();
        org.joda.time.DateTimeZone dateTimeZone18 = iSOChronology0.getZone();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology0.year();
        org.joda.time.chrono.ISOChronology iSOChronology20 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField21 = iSOChronology20.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField22 = iSOChronology20.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        long long26 = iSOChronology20.add(readablePeriod23, (long) 100, 11);
        org.joda.time.DateTimeField dateTimeField27 = iSOChronology20.hourOfDay();
        org.joda.time.DurationField durationField28 = iSOChronology20.days();
        boolean boolean29 = iSOChronology0.equals((java.lang.Object) iSOChronology20);
        org.joda.time.DateTimeField dateTimeField30 = iSOChronology0.weekyear();
        org.joda.time.DateTimeField dateTimeField31 = iSOChronology0.clockhourOfHalfday();
        java.lang.String str32 = iSOChronology0.toString();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 53314 + "'", int8 == 53314);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 52 + "'", int10 == 52);
        org.junit.Assert.assertNotNull(localDateTime12);
// flaky:         org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1645455261381L + "'", long14 == 1645455261381L);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(iSOChronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 100L + "'", long26 == 100L);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
// flaky:         org.junit.Assert.assertEquals("'" + str32 + "' != '" + "ISOChronology[+00:00:53.314]" + "'", str32, "ISOChronology[+00:00:53.314]");
    }

    @Test
    public void test11098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11098");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setExtension('x', "jpn");
        java.util.Locale locale4 = java.util.Locale.GERMAN;
        java.util.Locale locale5 = java.util.Locale.GERMAN;
        java.lang.String str6 = locale4.getDisplayCountry(locale5);
        java.util.Locale locale7 = locale4.stripExtensions();
        java.lang.String str8 = locale4.getDisplayName();
        java.util.Locale.Builder builder9 = builder3.setLocale(locale4);
        java.util.Locale.Builder builder12 = builder9.setUnicodeLocaleKeyword("22", "deu");
        java.util.Locale.Builder builder13 = builder9.clear();
        java.util.Locale.Builder builder14 = builder9.clear();
        java.util.Locale locale15 = builder9.build();
        java.util.Locale.Builder builder17 = builder9.addUnicodeLocaleAttribute("402080");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "de");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "de");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "German" + "'", str8, "German");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "");
        org.junit.Assert.assertNotNull(builder17);
    }

    @Test
    public void test11099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11099");
        java.util.Locale locale0 = java.util.Locale.JAPANESE;
        java.lang.String str1 = locale0.getDisplayLanguage();
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet3 = locale2.getExtensionKeys();
        java.lang.String str4 = locale0.getDisplayLanguage(locale2);
        java.util.Set<java.lang.String> strSet5 = locale0.getUnicodeLocaleAttributes();
        java.util.Set<java.lang.String> strSet6 = locale0.getUnicodeLocaleKeys();
        java.util.Locale locale7 = java.util.Locale.JAPANESE;
        java.lang.String str8 = locale7.getDisplayLanguage();
        java.util.Locale locale9 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet10 = locale9.getExtensionKeys();
        java.lang.String str11 = locale7.getDisplayLanguage(locale9);
        java.lang.String str12 = locale0.getDisplayVariant(locale9);
        java.util.Locale.Category category13 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale14 = java.util.Locale.GERMAN;
        java.util.Locale locale15 = java.util.Locale.GERMAN;
        java.lang.String str16 = locale14.getDisplayCountry(locale15);
        java.util.Locale locale17 = locale14.stripExtensions();
        java.util.Locale.setDefault(locale14);
        java.util.Locale.setDefault(category13, locale14);
        java.util.Locale.Builder builder20 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder23 = builder20.setExtension('x', "jpn");
        java.util.Locale locale24 = java.util.Locale.GERMAN;
        java.util.Locale locale25 = java.util.Locale.GERMAN;
        java.lang.String str26 = locale24.getDisplayCountry(locale25);
        java.util.Locale locale27 = locale24.stripExtensions();
        java.lang.String str28 = locale24.getDisplayName();
        java.util.Locale.Builder builder29 = builder23.setLocale(locale24);
        java.util.Locale locale30 = builder23.build();
        java.util.Locale.setDefault(category13, locale30);
        org.joda.time.chrono.ISOChronology iSOChronology32 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField33 = iSOChronology32.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField34 = iSOChronology32.yearOfEra();
        org.joda.time.DateTimeField dateTimeField35 = iSOChronology32.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField36 = iSOChronology32.weekyearOfCentury();
        org.joda.time.DurationField durationField37 = dateTimeField36.getDurationField();
        java.util.Locale locale39 = java.util.Locale.forLanguageTag("53192561");
        int int40 = dateTimeField36.getMaximumShortTextLength(locale39);
        java.lang.String str41 = locale30.getDisplayName(locale39);
        java.lang.String str42 = locale0.getDisplayLanguage(locale39);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Japanese" + "'", str1, "Japanese");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\uc77c\ubcf8\uc5b4" + "'", str4, "\uc77c\ubcf8\uc5b4");
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Japanese" + "'", str8, "Japanese");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\uc77c\ubcf8\uc5b4" + "'", str11, "\uc77c\ubcf8\uc5b4");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertTrue("'" + category13 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category13.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "de");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "de");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "de");
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "de");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "de");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "de");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Deutsch" + "'", str28, "Deutsch");
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "de");
        org.junit.Assert.assertNotNull(iSOChronology32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 2 + "'", int40 == 2);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "German" + "'", str41, "German");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "Japanese" + "'", str42, "Japanese");
    }

    @Test
    public void test11100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11100");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.yearOfEra();
        org.joda.time.DurationField durationField3 = iSOChronology0.minutes();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.weekyear();
        org.joda.time.DurationField durationField5 = iSOChronology0.centuries();
        org.joda.time.DateTimeField dateTimeField6 = iSOChronology0.centuryOfEra();
        java.util.TimeZone timeZone7 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forTimeZone(timeZone7);
        java.lang.String str10 = dateTimeZone8.getName(31556995199999L);
        org.joda.time.Chronology chronology11 = iSOChronology0.withZone(dateTimeZone8);
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime(dateTimeZone8);
        long long14 = dateTimeZone8.nextTransition((long) 2720);
        org.joda.time.chrono.ISOChronology iSOChronology15 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone8);
        java.util.TimeZone timeZone16 = null;
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forTimeZone(timeZone16);
        int int19 = dateTimeZone17.getOffset(100L);
        java.util.TimeZone timeZone21 = null;
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forTimeZone(timeZone21);
        int int24 = dateTimeZone22.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime25 = org.joda.time.LocalDateTime.now(dateTimeZone22);
        int int26 = localDateTime25.getWeekyear();
        org.joda.time.LocalDateTime.Property property27 = localDateTime25.millisOfDay();
        java.util.Locale locale28 = java.util.Locale.GERMAN;
        java.util.Locale locale29 = java.util.Locale.GERMAN;
        java.lang.String str30 = locale28.getDisplayCountry(locale29);
        java.util.Locale locale31 = locale28.stripExtensions();
        int int32 = property27.getMaximumShortTextLength(locale28);
        java.lang.String str33 = locale28.getDisplayScript();
        java.lang.String str34 = dateTimeZone17.getShortName((long) 0, locale28);
        java.util.Locale locale36 = java.util.Locale.getDefault();
        java.lang.String str37 = dateTimeZone17.getName((long) (short) -1, locale36);
        org.joda.time.chrono.ISOChronology iSOChronology38 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone17);
        long long40 = dateTimeZone17.convertUTCToLocal(1645454784042L);
        org.joda.time.Chronology chronology41 = iSOChronology15.withZone(dateTimeZone17);
        java.lang.String str42 = iSOChronology15.toString();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeZone8);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+00:00:53.314" + "'", str10, "+00:00:53.314");
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 2720L + "'", long14 == 2720L);
        org.junit.Assert.assertNotNull(iSOChronology15);
        org.junit.Assert.assertNotNull(dateTimeZone17);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 53314 + "'", int19 == 53314);
        org.junit.Assert.assertNotNull(dateTimeZone22);
// flaky:         org.junit.Assert.assertTrue("'" + int24 + "' != '" + 53314 + "'", int24 == 53314);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2022 + "'", int26 == 2022);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "de");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "de");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "de");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 8 + "'", int32 == 8);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
// flaky:         org.junit.Assert.assertEquals("'" + str34 + "' != '" + "+00:00:53.314" + "'", str34, "+00:00:53.314");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "de");
// flaky:         org.junit.Assert.assertEquals("'" + str37 + "' != '" + "+00:00:53.314" + "'", str37, "+00:00:53.314");
        org.junit.Assert.assertNotNull(iSOChronology38);
// flaky:         org.junit.Assert.assertTrue("'" + long40 + "' != '" + 1645454837356L + "'", long40 == 1645454837356L);
        org.junit.Assert.assertNotNull(chronology41);
// flaky:         org.junit.Assert.assertEquals("'" + str42 + "' != '" + "ISOChronology[+00:00:53.314]" + "'", str42, "ISOChronology[+00:00:53.314]");
    }

    @Test
    public void test11101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11101");
        java.util.Locale locale0 = java.util.Locale.GERMAN;
        java.util.Locale locale1 = java.util.Locale.GERMAN;
        java.lang.String str2 = locale0.getDisplayCountry(locale1);
        java.util.Locale locale3 = locale0.stripExtensions();
        java.lang.String str4 = locale0.getDisplayName();
        java.util.Locale locale5 = java.util.Locale.PRC;
        java.lang.String str6 = locale0.getDisplayScript(locale5);
        java.util.TimeZone timeZone7 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forTimeZone(timeZone7);
        int int10 = dateTimeZone8.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now(dateTimeZone8);
        int int12 = localDateTime11.getWeekyear();
        org.joda.time.LocalDateTime.Property property13 = localDateTime11.millisOfDay();
        java.util.Locale locale14 = java.util.Locale.GERMAN;
        java.util.Locale locale15 = java.util.Locale.GERMAN;
        java.lang.String str16 = locale14.getDisplayCountry(locale15);
        java.util.Locale locale17 = locale14.stripExtensions();
        int int18 = property13.getMaximumShortTextLength(locale14);
        java.lang.String str19 = locale14.getDisplayVariant();
        java.lang.String str20 = locale5.getDisplayScript(locale14);
        java.lang.String str21 = locale14.getISO3Language();
        java.util.Set<java.lang.String> strSet22 = locale14.getUnicodeLocaleAttributes();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "de");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "de");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "de");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Deutsch" + "'", str4, "Deutsch");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(dateTimeZone8);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 53314 + "'", int10 == 53314);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2022 + "'", int12 == 2022);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "de");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "de");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "de");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 8 + "'", int18 == 8);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "deu" + "'", str21, "deu");
        org.junit.Assert.assertNotNull(strSet22);
    }

    @Test
    public void test11102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11102");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.weekOfWeekyear();
        java.util.TimeZone timeZone2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone2);
        java.lang.String str5 = dateTimeZone3.getName(31556995199999L);
        org.joda.time.Chronology chronology6 = iSOChronology0.withZone(dateTimeZone3);
        org.joda.time.DurationField durationField7 = iSOChronology0.halfdays();
        org.joda.time.DurationField durationField8 = iSOChronology0.millis();
        org.joda.time.DateTimeField dateTimeField9 = iSOChronology0.secondOfDay();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeZone3);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+00:00:53.314" + "'", str5, "+00:00:53.314");
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
    }

    @Test
    public void test11103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11103");
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("2919");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=2919");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test11104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11104");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.hourOfHalfday();
        long long7 = iSOChronology0.getDateTimeMillis((-1), 8, 3, 365);
        org.joda.time.DurationField durationField8 = iSOChronology0.months();
        org.joda.time.DateTimeField dateTimeField9 = iSOChronology0.yearOfEra();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology0.dayOfWeek();
        java.lang.String str11 = iSOChronology0.toString();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology0.dayOfYear();
        java.util.TimeZone timeZone13 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forTimeZone(timeZone13);
        int int16 = dateTimeZone14.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime17 = org.joda.time.LocalDateTime.now(dateTimeZone14);
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.DateTime dateTime19 = localDateTime17.toDateTime(readableInstant18);
        java.util.TimeZone timeZone20 = null;
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forTimeZone(timeZone20);
        int int23 = dateTimeZone21.getOffset(100L);
        org.joda.time.DateTime dateTime24 = localDateTime17.toDateTime(dateTimeZone21);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime17.plusMinutes((-1));
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.LocalDateTime localDateTime28 = localDateTime17.plus(readablePeriod27);
        int int29 = localDateTime17.getYear();
        int int30 = localDateTime17.getSecondOfMinute();
        org.joda.time.Chronology chronology31 = localDateTime17.getChronology();
        int int32 = dateTimeField12.getMaximumValue((org.joda.time.ReadablePartial) localDateTime17);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
// flaky:         org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-62180265652949L) + "'", long7 == (-62180265652949L));
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "ISOChronology[+00:00:53.314]" + "'", str11, "ISOChronology[+00:00:53.314]");
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
// flaky:         org.junit.Assert.assertTrue("'" + int16 + "' != '" + 53314 + "'", int16 == 53314);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTimeZone21);
// flaky:         org.junit.Assert.assertTrue("'" + int23 + "' != '" + 53314 + "'", int23 == 53314);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2022 + "'", int29 == 2022);
// flaky:         org.junit.Assert.assertTrue("'" + int30 + "' != '" + 14 + "'", int30 == 14);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 365 + "'", int32 == 365);
    }

    @Test
    public void test11105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11105");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.minuteOfHour();
        org.joda.time.Chronology chronology4 = iSOChronology0.withUTC();
        org.joda.time.DurationField durationField5 = iSOChronology0.hours();
        org.joda.time.DurationField durationField6 = iSOChronology0.seconds();
        org.joda.time.DateTimeField dateTimeField7 = iSOChronology0.hourOfHalfday();
        org.joda.time.DurationField durationField8 = iSOChronology0.hours();
        org.joda.time.DurationField durationField9 = iSOChronology0.years();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(durationField9);
    }

    @Test
    public void test11106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11106");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.weekOfWeekyear();
        java.util.TimeZone timeZone2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone2);
        java.lang.String str5 = dateTimeZone3.getName(31556995199999L);
        org.joda.time.Chronology chronology6 = iSOChronology0.withZone(dateTimeZone3);
        org.joda.time.DateTimeField dateTimeField7 = iSOChronology0.halfdayOfDay();
        org.joda.time.DurationField durationField8 = iSOChronology0.weeks();
        org.joda.time.DateTimeField dateTimeField9 = iSOChronology0.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology0.dayOfYear();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology0.secondOfDay();
        org.joda.time.DurationField durationField12 = iSOChronology0.seconds();
        org.joda.time.DurationField durationField13 = iSOChronology0.weekyears();
        org.joda.time.DurationField durationField14 = iSOChronology0.millis();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeZone3);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+00:00:53.314" + "'", str5, "+00:00:53.314");
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(durationField14);
    }

    @Test
    public void test11107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11107");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.centuryOfEra();
        org.joda.time.DurationField durationField3 = iSOChronology0.seconds();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.clockhourOfDay();
        org.joda.time.Chronology chronology5 = iSOChronology0.withUTC();
        org.joda.time.Chronology chronology6 = iSOChronology0.withUTC();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField8 = chronology6.weekOfWeekyear();
        java.util.TimeZone timeZone9 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        int int12 = dateTimeZone10.getOffset(100L);
        java.util.TimeZone timeZone13 = dateTimeZone10.toTimeZone();
        java.lang.String str14 = dateTimeZone10.getID();
        java.util.TimeZone timeZone15 = dateTimeZone10.toTimeZone();
        org.joda.time.Chronology chronology16 = chronology6.withZone(dateTimeZone10);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeZone10);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 53314 + "'", int12 == 53314);
        org.junit.Assert.assertNotNull(timeZone13);
// flaky:         org.junit.Assert.assertEquals(timeZone13.getDisplayName(), "GMT+00:00");
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+00:00:53.314" + "'", str14, "+00:00:53.314");
        org.junit.Assert.assertNotNull(timeZone15);
// flaky:         org.junit.Assert.assertEquals(timeZone15.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(chronology16);
    }

    @Test
    public void test11108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11108");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.yearOfEra();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.secondOfMinute();
        org.joda.time.DurationField durationField4 = iSOChronology0.weeks();
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology0.era();
        org.joda.time.DurationField durationField6 = iSOChronology0.centuries();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
    }

    @Test
    public void test11109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11109");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.DateTime dateTime6 = localDateTime4.toDateTime(readableInstant5);
        java.util.TimeZone timeZone7 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forTimeZone(timeZone7);
        int int10 = dateTimeZone8.getOffset(100L);
        org.joda.time.DateTime dateTime11 = localDateTime4.toDateTime(dateTimeZone8);
        org.joda.time.LocalDateTime.Property property12 = localDateTime4.monthOfYear();
        java.lang.String str13 = property12.getAsText();
        org.joda.time.LocalDateTime localDateTime14 = property12.roundCeilingCopy();
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((java.lang.Object) 31556952000000L);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.minusSeconds((-292275054));
        org.joda.time.ReadableDuration readableDuration19 = null;
        org.joda.time.LocalDateTime localDateTime20 = localDateTime16.minus(readableDuration19);
        org.joda.time.chrono.ISOChronology iSOChronology21 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField22 = iSOChronology21.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField23 = iSOChronology21.centuryOfEra();
        org.joda.time.DurationField durationField24 = iSOChronology21.seconds();
        org.joda.time.DateTimeField dateTimeField25 = iSOChronology21.dayOfYear();
        org.joda.time.DateTimeField dateTimeField26 = iSOChronology21.hourOfHalfday();
        org.joda.time.DurationField durationField27 = iSOChronology21.minutes();
        org.joda.time.DateTimeZone dateTimeZone28 = iSOChronology21.getZone();
        org.joda.time.DateTime dateTime29 = localDateTime16.toDateTime(dateTimeZone28);
        org.joda.time.chrono.ISOChronology iSOChronology30 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField31 = iSOChronology30.hourOfHalfday();
        java.lang.String str32 = iSOChronology30.toString();
        org.joda.time.DateTimeField dateTimeField33 = iSOChronology30.era();
        org.joda.time.DurationField durationField34 = iSOChronology30.centuries();
        org.joda.time.DurationField durationField35 = iSOChronology30.weeks();
        org.joda.time.DateTimeField dateTimeField36 = iSOChronology30.era();
        org.joda.time.DateTimeField dateTimeField37 = iSOChronology30.dayOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = dateTimeField37.getType();
        org.joda.time.DurationFieldType durationFieldType39 = dateTimeFieldType38.getRangeDurationType();
        int int40 = dateTime29.get(dateTimeFieldType38);
        int int41 = property12.getDifference((org.joda.time.ReadableInstant) dateTime29);
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53314 + "'", int3 == 53314);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTimeZone8);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 53314 + "'", int10 == 53314);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Februar" + "'", str13, "Februar");
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(iSOChronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(iSOChronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
// flaky:         org.junit.Assert.assertEquals("'" + str32 + "' != '" + "ISOChronology[+00:00:53.314]" + "'", str32, "ISOChronology[+00:00:53.314]");
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeFieldType38);
        org.junit.Assert.assertNotNull(durationFieldType39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 365 + "'", int40 == 365);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-11374) + "'", int41 == (-11374));
    }

    @Test
    public void test11110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11110");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("2803452");
        java.lang.String str2 = locale1.getDisplayCountry();
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
    }

    @Test
    public void test11111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11111");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        int int5 = localDateTime4.getWeekyear();
        org.joda.time.LocalDateTime.Property property6 = localDateTime4.millisOfDay();
        java.util.Locale locale7 = java.util.Locale.GERMAN;
        java.util.Locale locale8 = java.util.Locale.GERMAN;
        java.lang.String str9 = locale7.getDisplayCountry(locale8);
        java.util.Locale locale10 = locale7.stripExtensions();
        int int11 = property6.getMaximumShortTextLength(locale7);
        org.joda.time.Interval interval12 = property6.toInterval();
        org.joda.time.LocalDateTime localDateTime13 = property6.getLocalDateTime();
        org.joda.time.DurationField durationField14 = property6.getDurationField();
        java.lang.String str15 = property6.getAsString();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53314 + "'", int3 == 53314);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2022 + "'", int5 == 2022);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "de");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "de");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "de");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 8 + "'", int11 == 8);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(durationField14);
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "53715207" + "'", str15, "53715207");
    }

    @Test
    public void test11112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11112");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        int int5 = localDateTime4.getWeekyear();
        org.joda.time.DurationFieldType durationFieldType6 = org.joda.time.DurationFieldType.days();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime4.withFieldAdded(durationFieldType6, 53166088);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.plusMillis(2846360);
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = org.joda.time.DateTimeFieldType.minuteOfHour();
        java.lang.String str12 = dateTimeFieldType11.getName();
        org.joda.time.LocalDateTime.Property property13 = localDateTime8.property(dateTimeFieldType11);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray14 = localDateTime8.getFieldTypes();
        org.joda.time.Chronology chronology15 = localDateTime8.getChronology();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53314 + "'", int3 == 53314);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2022 + "'", int5 == 2022);
        org.junit.Assert.assertNotNull(durationFieldType6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "minuteOfHour" + "'", str12, "minuteOfHour");
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray14);
        org.junit.Assert.assertNotNull(chronology15);
    }

    @Test
    public void test11113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11113");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("49911240", (double) 53477250);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: weight=5.347725E7");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test11114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11114");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.weekOfWeekyear();
        java.util.TimeZone timeZone2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone2);
        java.lang.String str5 = dateTimeZone3.getName(31556995199999L);
        org.joda.time.Chronology chronology6 = iSOChronology0.withZone(dateTimeZone3);
        org.joda.time.DateTimeField dateTimeField7 = iSOChronology0.weekyear();
        org.joda.time.DateTimeField dateTimeField8 = iSOChronology0.weekyearOfCentury();
        org.joda.time.DurationField durationField9 = iSOChronology0.weeks();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology0.clockhourOfHalfday();
        // The following exception was thrown during execution in test generation
        try {
            long long16 = iSOChronology0.getDateTimeMillis(1645455014760L, 49903146, 53262345, 50011665, 2935755);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 49903146 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeZone3);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+00:00:53.314" + "'", str5, "+00:00:53.314");
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
    }

    @Test
    public void test11115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11115");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.centuryOfEra();
        org.joda.time.DurationField durationField3 = iSOChronology0.seconds();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.clockhourOfDay();
        org.joda.time.Chronology chronology5 = iSOChronology0.withUTC();
        org.joda.time.DateTimeField dateTimeField6 = iSOChronology0.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField7 = iSOChronology0.year();
        org.joda.time.DurationField durationField8 = iSOChronology0.seconds();
        org.joda.time.DateTimeZone dateTimeZone9 = iSOChronology0.getZone();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology0.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology0.hourOfDay();
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        long long15 = iSOChronology0.add(readablePeriod12, 3181924800000L, 0);
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology0.dayOfMonth();
        // The following exception was thrown during execution in test generation
        try {
            long long24 = iSOChronology0.getDateTimeMillis(49942463, 2857905, 49829275, (-292275054), 2811499, 53522075, 53467337);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -292275054 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 3181924800000L + "'", long15 == 3181924800000L);
        org.junit.Assert.assertNotNull(dateTimeField16);
    }

    @Test
    public void test11116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11116");
        org.joda.time.tz.Provider provider0 = org.joda.time.DateTimeZone.getProvider();
        java.util.Set<java.lang.String> strSet1 = provider0.getAvailableIDs();
        org.joda.time.DateTimeZone dateTimeZone3 = provider0.getZone("ISOChronology[UTC]");
        org.joda.time.DateTimeZone dateTimeZone5 = provider0.getZone("DateTimeField[dayOfMonth]");
        org.joda.time.DateTimeZone dateTimeZone7 = provider0.getZone("weekyears");
        org.joda.time.DateTimeZone dateTimeZone9 = provider0.getZone("");
        java.util.Set<java.lang.String> strSet10 = provider0.getAvailableIDs();
        org.joda.time.DateTimeZone.setProvider(provider0);
        org.joda.time.DateTimeZone.setProvider(provider0);
        org.joda.time.DateTimeZone dateTimeZone14 = provider0.getZone("307");
        java.util.Set<java.lang.String> strSet15 = provider0.getAvailableIDs();
        java.util.Set<java.lang.String> strSet16 = provider0.getAvailableIDs();
        org.junit.Assert.assertNotNull(provider0);
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNull(dateTimeZone3);
        org.junit.Assert.assertNull(dateTimeZone5);
        org.junit.Assert.assertNull(dateTimeZone7);
        org.junit.Assert.assertNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(strSet10);
        org.junit.Assert.assertNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(strSet15);
        org.junit.Assert.assertNotNull(strSet16);
    }

    @Test
    public void test11117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11117");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.hourOfHalfday();
        org.joda.time.DurationField durationField3 = iSOChronology0.weeks();
        org.joda.time.DurationField durationField4 = iSOChronology0.weekyears();
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology0.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone6 = iSOChronology0.getZone();
        org.joda.time.DateTimeField dateTimeField7 = iSOChronology0.weekyearOfCentury();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTimeField7);
    }

    @Test
    public void test11118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11118");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        int int5 = localDateTime4.getWeekyear();
        org.joda.time.LocalDateTime.Property property6 = localDateTime4.millisOfDay();
        java.util.Locale locale7 = java.util.Locale.GERMAN;
        java.util.Locale locale8 = java.util.Locale.GERMAN;
        java.lang.String str9 = locale7.getDisplayCountry(locale8);
        java.util.Locale locale10 = locale7.stripExtensions();
        int int11 = property6.getMaximumShortTextLength(locale7);
        org.joda.time.Interval interval12 = property6.toInterval();
        org.joda.time.LocalDateTime localDateTime13 = property6.getLocalDateTime();
        int int14 = localDateTime13.getYearOfEra();
        int int15 = localDateTime13.getYearOfCentury();
        org.joda.time.DurationFieldType durationFieldType16 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.chrono.ISOChronology iSOChronology17 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology17.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology17.centuryOfEra();
        org.joda.time.DurationField durationField20 = iSOChronology17.seconds();
        org.joda.time.DateTimeField dateTimeField21 = iSOChronology17.clockhourOfDay();
        org.joda.time.Chronology chronology22 = iSOChronology17.withUTC();
        org.joda.time.DateTimeField dateTimeField23 = iSOChronology17.halfdayOfDay();
        org.joda.time.DurationField durationField24 = durationFieldType16.getField((org.joda.time.Chronology) iSOChronology17);
        boolean boolean25 = localDateTime13.isSupported(durationFieldType16);
        org.joda.time.LocalDateTime.Property property26 = localDateTime13.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime27 = property26.roundHalfCeilingCopy();
        java.util.TimeZone timeZone28 = null;
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forTimeZone(timeZone28);
        int int31 = dateTimeZone29.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime32 = org.joda.time.LocalDateTime.now(dateTimeZone29);
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.DateTime dateTime34 = localDateTime32.toDateTime(readableInstant33);
        org.joda.time.Chronology chronology35 = dateTime34.getChronology();
        org.joda.time.DateTimeZone dateTimeZone36 = dateTime34.getZone();
        int int37 = property26.getDifference((org.joda.time.ReadableInstant) dateTime34);
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53314 + "'", int3 == 53314);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2022 + "'", int5 == 2022);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "de");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "de");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "de");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 8 + "'", int11 == 8);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2022 + "'", int14 == 2022);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 22 + "'", int15 == 22);
        org.junit.Assert.assertNotNull(durationFieldType16);
        org.junit.Assert.assertNotNull(iSOChronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(dateTimeZone29);
// flaky:         org.junit.Assert.assertTrue("'" + int31 + "' != '" + 53314 + "'", int31 == 53314);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeZone36);
// flaky:         org.junit.Assert.assertTrue("'" + int37 + "' != '" + 53 + "'", int37 == 53);
    }

    @Test
    public void test11119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11119");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setExtension('x', "jpn");
        java.util.Locale locale4 = java.util.Locale.GERMAN;
        java.util.Locale locale5 = java.util.Locale.GERMAN;
        java.lang.String str6 = locale4.getDisplayCountry(locale5);
        java.util.Locale locale7 = locale4.stripExtensions();
        java.lang.String str8 = locale4.getDisplayName();
        java.util.Locale.Builder builder9 = builder3.setLocale(locale4);
        java.util.Locale.Builder builder12 = builder9.setUnicodeLocaleKeyword("22", "deu");
        java.util.Locale.Builder builder13 = builder9.clearExtensions();
        java.util.Locale.Builder builder15 = builder13.setVariant("2807744");
        java.util.Locale.Builder builder17 = builder13.removeUnicodeLocaleAttribute("53173469");
        java.util.TimeZone timeZone18 = null;
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forTimeZone(timeZone18);
        int int21 = dateTimeZone19.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime22 = org.joda.time.LocalDateTime.now(dateTimeZone19);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.DateTime dateTime24 = localDateTime22.toDateTime(readableInstant23);
        java.util.TimeZone timeZone25 = null;
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forTimeZone(timeZone25);
        int int28 = dateTimeZone26.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime29 = org.joda.time.LocalDateTime.now(dateTimeZone26);
        org.joda.time.LocalDateTime localDateTime30 = org.joda.time.LocalDateTime.now(dateTimeZone26);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime30.minusYears(2022);
        org.joda.time.LocalDateTime.Property property33 = localDateTime32.era();
        int int34 = localDateTime22.compareTo((org.joda.time.ReadablePartial) localDateTime32);
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = localDateTime22.getFieldType(1);
        org.joda.time.LocalDateTime localDateTime37 = org.joda.time.LocalDateTime.now();
        java.util.TimeZone timeZone38 = null;
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forTimeZone(timeZone38);
        int int41 = dateTimeZone39.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime42 = org.joda.time.LocalDateTime.now(dateTimeZone39);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray43 = localDateTime42.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = org.joda.time.DateTimeFieldType.hourOfDay();
        int int45 = localDateTime42.get(dateTimeFieldType44);
        org.joda.time.LocalDateTime.Property property46 = localDateTime42.dayOfWeek();
        boolean boolean47 = localDateTime37.isEqual((org.joda.time.ReadablePartial) localDateTime42);
        org.joda.time.LocalDateTime.Property property48 = localDateTime42.dayOfMonth();
        boolean boolean49 = localDateTime22.isEqual((org.joda.time.ReadablePartial) localDateTime42);
        org.joda.time.LocalDateTime.Property property50 = localDateTime22.centuryOfEra();
        java.util.TimeZone timeZone51 = null;
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.forTimeZone(timeZone51);
        int int54 = dateTimeZone52.getOffset(100L);
        java.util.TimeZone timeZone55 = dateTimeZone52.toTimeZone();
        int int57 = dateTimeZone52.getStandardOffset((long) ' ');
        java.util.TimeZone timeZone58 = dateTimeZone52.toTimeZone();
        org.joda.time.tz.NameProvider nameProvider60 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale61 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet62 = locale61.getExtensionKeys();
        java.lang.String str65 = nameProvider60.getShortName(locale61, "Koordinierte Universalzeit", "+00:00");
        java.util.Locale locale66 = java.util.Locale.GERMAN;
        java.lang.String str69 = nameProvider60.getShortName(locale66, "53167803", "jpn");
        java.lang.String str70 = dateTimeZone52.getName(1645454775635L, locale66);
        java.lang.String str71 = property50.getAsShortText(locale66);
        java.util.Locale.Builder builder72 = builder13.setLocale(locale66);
        java.util.Locale.Builder builder74 = builder13.removeUnicodeLocaleAttribute("German");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "de");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "de");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Deutsch" + "'", str8, "Deutsch");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(dateTimeZone19);
// flaky:         org.junit.Assert.assertTrue("'" + int21 + "' != '" + 53314 + "'", int21 == 53314);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTimeZone26);
// flaky:         org.junit.Assert.assertTrue("'" + int28 + "' != '" + 53314 + "'", int28 == 53314);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(dateTimeZone39);
// flaky:         org.junit.Assert.assertTrue("'" + int41 + "' != '" + 53314 + "'", int41 == 53314);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray43);
        org.junit.Assert.assertNotNull(dateTimeFieldType44);
// flaky:         org.junit.Assert.assertTrue("'" + int45 + "' != '" + 14 + "'", int45 == 14);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(dateTimeZone52);
// flaky:         org.junit.Assert.assertTrue("'" + int54 + "' != '" + 53314 + "'", int54 == 53314);
        org.junit.Assert.assertNotNull(timeZone55);
// flaky:         org.junit.Assert.assertEquals(timeZone55.getDisplayName(), "GMT+00:00");
// flaky:         org.junit.Assert.assertTrue("'" + int57 + "' != '" + 53314 + "'", int57 == 53314);
        org.junit.Assert.assertNotNull(timeZone58);
// flaky:         org.junit.Assert.assertEquals(timeZone58.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(nameProvider60);
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet62);
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "de");
        org.junit.Assert.assertNull(str69);
// flaky:         org.junit.Assert.assertEquals("'" + str70 + "' != '" + "+00:00:53.314" + "'", str70, "+00:00:53.314");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "20" + "'", str71, "20");
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder74);
    }

    @Test
    public void test11120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11120");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.centuryOfEra();
        java.util.TimeZone timeZone3 = null;
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forTimeZone(timeZone3);
        int int6 = dateTimeZone4.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime7 = org.joda.time.LocalDateTime.now(dateTimeZone4);
        int int8 = localDateTime7.getWeekyear();
        org.joda.time.LocalDateTime.Property property9 = localDateTime7.millisOfDay();
        long long11 = iSOChronology0.set((org.joda.time.ReadablePartial) localDateTime7, (long) '4');
        org.joda.time.Chronology chronology12 = iSOChronology0.withUTC();
        org.joda.time.DateTimeField dateTimeField13 = iSOChronology0.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology0.yearOfCentury();
        org.joda.time.DurationField durationField15 = dateTimeField14.getRangeDurationField();
        org.joda.time.chrono.ISOChronology iSOChronology16 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology16.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology16.yearOfEra();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology16.hourOfDay();
        org.joda.time.DateTimeField dateTimeField20 = iSOChronology16.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField21 = iSOChronology16.centuryOfEra();
        org.joda.time.DurationField durationField22 = iSOChronology16.days();
        org.joda.time.chrono.ISOChronology iSOChronology23 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField24 = iSOChronology23.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField25 = iSOChronology23.yearOfEra();
        org.joda.time.DurationField durationField26 = iSOChronology23.minutes();
        org.joda.time.DateTimeField dateTimeField27 = iSOChronology23.weekyear();
        org.joda.time.DurationField durationField28 = iSOChronology23.centuries();
        org.joda.time.DateTimeField dateTimeField29 = iSOChronology23.centuryOfEra();
        org.joda.time.DurationField durationField30 = dateTimeField29.getRangeDurationField();
        boolean boolean31 = iSOChronology16.equals((java.lang.Object) durationField30);
        org.joda.time.DateTimeField dateTimeField32 = iSOChronology16.weekyear();
        java.util.TimeZone timeZone33 = null;
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forTimeZone(timeZone33);
        int int36 = dateTimeZone34.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime37 = org.joda.time.LocalDateTime.now(dateTimeZone34);
        int int38 = localDateTime37.getWeekyear();
        org.joda.time.LocalDateTime.Property property39 = localDateTime37.minuteOfHour();
        org.joda.time.LocalDateTime.Property property40 = localDateTime37.dayOfYear();
        java.util.TimeZone timeZone41 = null;
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forTimeZone(timeZone41);
        int int44 = dateTimeZone42.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime45 = org.joda.time.LocalDateTime.now(dateTimeZone42);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray46 = localDateTime45.getFieldTypes();
        int int47 = property40.compareTo((org.joda.time.ReadablePartial) localDateTime45);
        int[] intArray49 = iSOChronology16.get((org.joda.time.ReadablePartial) localDateTime45, (long) 23);
        org.joda.time.tz.NameProvider nameProvider51 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale.Builder builder52 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder55 = builder52.setExtension('x', "jpn");
        java.util.Locale locale56 = java.util.Locale.GERMAN;
        java.util.Locale locale57 = java.util.Locale.GERMAN;
        java.lang.String str58 = locale56.getDisplayCountry(locale57);
        java.util.Locale locale59 = locale56.stripExtensions();
        java.lang.String str60 = locale56.getDisplayName();
        java.util.Locale.Builder builder61 = builder55.setLocale(locale56);
        java.lang.String str64 = nameProvider51.getName(locale56, "Japanese", "UTC");
        java.lang.String str65 = locale56.getISO3Language();
        java.lang.String str66 = dateTimeField14.getAsShortText((org.joda.time.ReadablePartial) localDateTime45, 49690454, locale56);
        java.util.Locale locale67 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str68 = locale56.getDisplayLanguage(locale67);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeZone4);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 53314 + "'", int6 == 53314);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2022 + "'", int8 == 2022);
        org.junit.Assert.assertNotNull(property9);
// flaky:         org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1645455262183L + "'", long11 == 1645455262183L);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(iSOChronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(iSOChronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNull(durationField30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeZone34);
// flaky:         org.junit.Assert.assertTrue("'" + int36 + "' != '" + 53314 + "'", int36 == 53314);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2022 + "'", int38 == 2022);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(dateTimeZone42);
// flaky:         org.junit.Assert.assertTrue("'" + int44 + "' != '" + 53314 + "'", int44 == 53314);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(intArray49);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[1970, 1, 1, 53337]");
        org.junit.Assert.assertNotNull(nameProvider51);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "de");
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "de");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "de");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "Deutsch" + "'", str60, "Deutsch");
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "deu" + "'", str65, "deu");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "49690454" + "'", str66, "49690454");
    }

    @Test
    public void test11121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11121");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.centuryOfEra();
        org.joda.time.DurationField durationField3 = iSOChronology0.centuries();
        org.joda.time.DurationField durationField4 = iSOChronology0.hours();
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        int int8 = dateTimeZone6.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime9 = org.joda.time.LocalDateTime.now(dateTimeZone6);
        int int10 = localDateTime9.getDayOfYear();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime9.withYearOfEra(2022);
        long long14 = iSOChronology0.set((org.joda.time.ReadablePartial) localDateTime12, (long) 0);
        org.joda.time.DurationField durationField15 = iSOChronology0.weekyears();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology0.monthOfYear();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology0.yearOfEra();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 53314 + "'", int8 == 53314);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 52 + "'", int10 == 52);
        org.junit.Assert.assertNotNull(localDateTime12);
// flaky:         org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1645455262224L + "'", long14 == 1645455262224L);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
    }

    @Test
    public void test11122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11122");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.hourOfHalfday();
        org.joda.time.DurationField durationField2 = iSOChronology0.weeks();
        java.lang.String str3 = durationField2.toString();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "DurationField[weeks]" + "'", str3, "DurationField[weeks]");
    }

    @Test
    public void test11123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11123");
        java.util.Locale locale2 = new java.util.Locale("82800", "49801178");
        java.lang.String str4 = locale2.getExtension('x');
        java.util.Locale locale5 = java.util.Locale.JAPANESE;
        java.lang.String str6 = locale5.getDisplayLanguage();
        java.lang.String str7 = locale5.getISO3Language();
        java.util.Locale locale8 = java.util.Locale.CHINA;
        java.lang.String str9 = locale5.getDisplayLanguage(locale8);
        org.joda.time.tz.NameProvider nameProvider10 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale11 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet12 = locale11.getExtensionKeys();
        java.lang.String str15 = nameProvider10.getShortName(locale11, "Koordinierte Universalzeit", "+00:00");
        java.util.Locale locale16 = java.util.Locale.KOREAN;
        java.lang.String str17 = locale11.getDisplayName(locale16);
        java.lang.String str18 = locale8.getDisplayVariant(locale16);
        java.util.Locale.setDefault(locale16);
        java.lang.String str20 = locale16.getVariant();
        java.util.Set<java.lang.String> strSet21 = locale16.getUnicodeLocaleKeys();
        java.lang.String str22 = locale2.getDisplayScript(locale16);
        java.lang.String str23 = locale16.getDisplayScript();
        org.junit.Assert.assertEquals(locale2.toString(), "82800_49801178");
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Japanisch" + "'", str6, "Japanisch");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "jpn" + "'", str7, "jpn");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\u65e5\u6587" + "'", str9, "\u65e5\u6587");
        org.junit.Assert.assertNotNull(nameProvider10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet12);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str17, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(strSet21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
    }

    @Test
    public void test11124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11124");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.hourOfHalfday();
        java.lang.String str2 = iSOChronology0.toString();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.era();
        java.util.TimeZone timeZone4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forTimeZone(timeZone4);
        int int7 = dateTimeZone5.getOffset(100L);
        java.util.TimeZone timeZone8 = dateTimeZone5.toTimeZone();
        java.lang.String str9 = dateTimeZone5.toString();
        org.joda.time.Chronology chronology10 = iSOChronology0.withZone(dateTimeZone5);
        java.util.TimeZone timeZone11 = dateTimeZone5.toTimeZone();
        java.util.TimeZone timeZone12 = dateTimeZone5.toTimeZone();
        int int13 = timeZone12.getRawOffset();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ISOChronology[+00:00:53.314]" + "'", str2, "ISOChronology[+00:00:53.314]");
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeZone5);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53314 + "'", int7 == 53314);
        org.junit.Assert.assertNotNull(timeZone8);
// flaky:         org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "GMT+00:00");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00:53.314" + "'", str9, "+00:00:53.314");
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(timeZone11);
// flaky:         org.junit.Assert.assertEquals(timeZone11.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone12);
// flaky:         org.junit.Assert.assertEquals(timeZone12.getDisplayName(), "GMT+00:00");
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 53314 + "'", int13 == 53314);
    }

    @Test
    public void test11125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11125");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        java.util.TimeZone timeZone1 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        int int4 = dateTimeZone2.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime5 = org.joda.time.LocalDateTime.now(dateTimeZone2);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray6 = localDateTime5.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.hourOfDay();
        int int8 = localDateTime5.get(dateTimeFieldType7);
        org.joda.time.LocalDateTime.Property property9 = localDateTime5.dayOfWeek();
        boolean boolean10 = localDateTime0.isEqual((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.LocalDateTime.Property property11 = localDateTime5.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime12 = property11.roundHalfCeilingCopy();
        java.util.TimeZone timeZone13 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forTimeZone(timeZone13);
        int int16 = dateTimeZone14.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime17 = org.joda.time.LocalDateTime.now(dateTimeZone14);
        org.joda.time.LocalDateTime localDateTime18 = org.joda.time.LocalDateTime.now(dateTimeZone14);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.minusMinutes((int) ' ');
        int int21 = property11.compareTo((org.joda.time.ReadablePartial) localDateTime20);
        int int22 = property11.getMaximumValueOverall();
        org.joda.time.LocalDateTime localDateTime23 = property11.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.minusWeeks(12);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.withYear(7);
        int int28 = localDateTime25.getDayOfMonth();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(dateTimeZone2);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 53314 + "'", int4 == 53314);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 14 + "'", int8 == 14);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
// flaky:         org.junit.Assert.assertTrue("'" + int16 + "' != '" + 53314 + "'", int16 == 53314);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 31 + "'", int22 == 31);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 30 + "'", int28 == 30);
    }

    @Test
    public void test11126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11126");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.minuteOfHour();
        org.joda.time.Chronology chronology4 = iSOChronology0.withUTC();
        org.joda.time.DurationField durationField5 = iSOChronology0.eras();
        org.joda.time.DateTimeField dateTimeField6 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField7 = iSOChronology0.weekOfWeekyear();
        java.lang.String str8 = iSOChronology0.toString();
        org.joda.time.DateTimeField dateTimeField9 = iSOChronology0.centuryOfEra();
        org.joda.time.DurationField durationField10 = iSOChronology0.eras();
        // The following exception was thrown during execution in test generation
        try {
            long long13 = durationField10.subtract(1645455127835L, 1644850064833L);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: eras field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "ISOChronology[+00:00:53.314]" + "'", str8, "ISOChronology[+00:00:53.314]");
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
    }

    @Test
    public void test11127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11127");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.chrono.ISOChronology iSOChronology1 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology1.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology1.centuryOfEra();
        org.joda.time.DurationField durationField4 = iSOChronology1.seconds();
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology1.clockhourOfDay();
        org.joda.time.Chronology chronology6 = iSOChronology1.withUTC();
        org.joda.time.DateTimeField dateTimeField7 = iSOChronology1.halfdayOfDay();
        org.joda.time.DurationField durationField8 = durationFieldType0.getField((org.joda.time.Chronology) iSOChronology1);
        org.joda.time.DurationField durationField9 = iSOChronology1.eras();
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray13 = iSOChronology1.get(readablePeriod10, 6344746L, 1645455158137L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(iSOChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(durationField9);
    }

    @Test
    public void test11128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11128");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.DateTime dateTime6 = localDateTime4.toDateTime(readableInstant5);
        java.util.TimeZone timeZone7 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forTimeZone(timeZone7);
        int int10 = dateTimeZone8.getOffset(100L);
        org.joda.time.DateTime dateTime11 = localDateTime4.toDateTime(dateTimeZone8);
        org.joda.time.LocalDateTime.Property property12 = localDateTime4.monthOfYear();
        java.lang.String str13 = property12.getAsText();
        org.joda.time.LocalDateTime localDateTime14 = property12.roundCeilingCopy();
        long long15 = property12.remainder();
        org.joda.time.LocalDateTime localDateTime16 = property12.roundFloorCopy();
        org.joda.time.LocalDateTime localDateTime17 = property12.withMinimumValue();
        boolean boolean18 = property12.isLeap();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53314 + "'", int3 == 53314);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTimeZone8);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 53314 + "'", int10 == 53314);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "\uc6d4" + "'", str13, "\uc6d4");
        org.junit.Assert.assertNotNull(localDateTime14);
// flaky:         org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1781715730L + "'", long15 == 1781715730L);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test11129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11129");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        java.util.TimeZone timeZone1 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        int int4 = dateTimeZone2.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime5 = org.joda.time.LocalDateTime.now(dateTimeZone2);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray6 = localDateTime5.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.hourOfDay();
        int int8 = localDateTime5.get(dateTimeFieldType7);
        org.joda.time.LocalDateTime.Property property9 = localDateTime5.dayOfWeek();
        boolean boolean10 = localDateTime0.isEqual((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.LocalDateTime.Property property11 = localDateTime5.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime12 = property11.roundHalfCeilingCopy();
        java.util.TimeZone timeZone13 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forTimeZone(timeZone13);
        int int16 = dateTimeZone14.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime17 = org.joda.time.LocalDateTime.now(dateTimeZone14);
        org.joda.time.LocalDateTime localDateTime18 = org.joda.time.LocalDateTime.now(dateTimeZone14);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.minusMinutes((int) ' ');
        int int21 = property11.compareTo((org.joda.time.ReadablePartial) localDateTime20);
        int int22 = property11.getMaximumValueOverall();
        org.joda.time.LocalDateTime localDateTime23 = property11.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.minusWeeks(12);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.withYear(7);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime25.plusDays(49804989);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.plusYears(5861);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(dateTimeZone2);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 53314 + "'", int4 == 53314);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 14 + "'", int8 == 14);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
// flaky:         org.junit.Assert.assertTrue("'" + int16 + "' != '" + 53314 + "'", int16 == 53314);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 31 + "'", int22 == 31);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
    }

    @Test
    public void test11130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11130");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.centuryOfEra();
        org.joda.time.DurationField durationField3 = iSOChronology0.seconds();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.clockhourOfDay();
        org.joda.time.Chronology chronology5 = iSOChronology0.withUTC();
        org.joda.time.DateTimeField dateTimeField6 = iSOChronology0.dayOfYear();
        java.util.Locale locale8 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet9 = locale8.getExtensionKeys();
        java.util.Iterator<java.lang.Character> charItor10 = charSet9.iterator();
        java.util.Locale locale11 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet12 = locale11.getExtensionKeys();
        java.util.Iterator<java.lang.Character> charItor13 = charSet12.iterator();
        boolean boolean14 = charSet9.containsAll((java.util.Collection<java.lang.Character>) charSet12);
        java.util.Locale.Builder builder15 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder18 = builder15.setExtension('x', "jpn");
        java.util.Locale locale19 = java.util.Locale.GERMAN;
        java.util.Locale locale20 = java.util.Locale.GERMAN;
        java.lang.String str21 = locale19.getDisplayCountry(locale20);
        java.util.Locale locale22 = locale19.stripExtensions();
        java.lang.String str23 = locale19.getDisplayName();
        java.util.Locale.Builder builder24 = builder18.setLocale(locale19);
        java.util.Locale.Builder builder26 = builder24.setLanguageTag("Februar");
        boolean boolean27 = charSet12.remove((java.lang.Object) builder26);
        java.util.Locale.Builder builder28 = builder26.clear();
        java.util.Locale.Builder builder29 = builder26.clearExtensions();
        java.util.Locale locale30 = builder29.build();
        java.lang.String str31 = dateTimeField6.getAsText(4, locale30);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet9);
        org.junit.Assert.assertNotNull(charItor10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet12);
        org.junit.Assert.assertNotNull(charItor13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "de");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "de");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "de");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "\ub3c5\uc77c\uc5b4" + "'", str23, "\ub3c5\uc77c\uc5b4");
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "4" + "'", str31, "4");
    }

    @Test
    public void test11131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11131");
        org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.parse("2022-02-21T13:49:58.919");
        org.junit.Assert.assertNotNull(localDateTime1);
    }

    @Test
    public void test11132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11132");
        java.util.Locale locale1 = new java.util.Locale("53180409");
        org.junit.Assert.assertEquals(locale1.toString(), "53180409");
    }

    @Test
    public void test11133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11133");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.weekOfWeekyear();
        java.util.TimeZone timeZone2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone2);
        java.lang.String str5 = dateTimeZone3.getName(31556995199999L);
        org.joda.time.Chronology chronology6 = iSOChronology0.withZone(dateTimeZone3);
        org.joda.time.DateTimeField dateTimeField7 = iSOChronology0.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField8 = iSOChronology0.dayOfWeek();
        org.joda.time.DurationField durationField9 = iSOChronology0.months();
        int int12 = durationField9.getDifference(49757456L, 600749654400000L);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeZone3);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+00:00:53.314" + "'", str5, "+00:00:53.314");
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-228443) + "'", int12 == (-228443));
    }

    @Test
    public void test11134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11134");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.DateTime dateTime6 = localDateTime4.toDateTime(readableInstant5);
        java.util.TimeZone timeZone7 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forTimeZone(timeZone7);
        int int10 = dateTimeZone8.getOffset(100L);
        org.joda.time.DateTime dateTime11 = localDateTime4.toDateTime(dateTimeZone8);
        org.joda.time.LocalDateTime.Property property12 = localDateTime4.monthOfYear();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime4.minusHours(53183117);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.plusHours(31);
        int int17 = localDateTime14.size();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime14.plusSeconds(50043452);
        int int20 = localDateTime19.getSecondOfMinute();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53314 + "'", int3 == 53314);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTimeZone8);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 53314 + "'", int10 == 53314);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 4 + "'", int17 == 4);
        org.junit.Assert.assertNotNull(localDateTime19);
// flaky:         org.junit.Assert.assertTrue("'" + int20 + "' != '" + 47 + "'", int20 == 47);
    }

    @Test
    public void test11135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11135");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet1 = locale0.getExtensionKeys();
        java.util.Iterator<java.lang.Character> charItor2 = charSet1.iterator();
        java.util.Locale locale3 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet4 = locale3.getExtensionKeys();
        java.util.Iterator<java.lang.Character> charItor5 = charSet4.iterator();
        boolean boolean6 = charSet1.containsAll((java.util.Collection<java.lang.Character>) charSet4);
        java.util.Locale.Builder builder7 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder10 = builder7.setExtension('x', "jpn");
        java.util.Locale locale11 = java.util.Locale.GERMAN;
        java.util.Locale locale12 = java.util.Locale.GERMAN;
        java.lang.String str13 = locale11.getDisplayCountry(locale12);
        java.util.Locale locale14 = locale11.stripExtensions();
        java.lang.String str15 = locale11.getDisplayName();
        java.util.Locale.Builder builder16 = builder10.setLocale(locale11);
        java.util.Locale.Builder builder18 = builder16.setLanguageTag("Februar");
        boolean boolean19 = charSet4.remove((java.lang.Object) builder18);
        java.util.Locale.Builder builder20 = builder18.clear();
        java.util.Locale.Builder builder22 = builder20.setVariant("2803637");
        java.util.Locale.Builder builder23 = builder22.clear();
        java.util.Locale.Builder builder25 = builder23.setLanguageTag("German");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder28 = builder25.setUnicodeLocaleKeyword("49695213", "53564819");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale keyword key: 49695213 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet1);
        org.junit.Assert.assertNotNull(charItor2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet4);
        org.junit.Assert.assertNotNull(charItor5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "de");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "de");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "de");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "\ub3c5\uc77c\uc5b4" + "'", str15, "\ub3c5\uc77c\uc5b4");
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
    }

    @Test
    public void test11136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11136");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.hourOfHalfday();
        java.util.TimeZone timeZone3 = null;
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forTimeZone(timeZone3);
        int int6 = dateTimeZone4.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime7 = org.joda.time.LocalDateTime.now(dateTimeZone4);
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.DateTime dateTime9 = localDateTime7.toDateTime(readableInstant8);
        java.util.TimeZone timeZone10 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        int int13 = dateTimeZone11.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime14 = org.joda.time.LocalDateTime.now(dateTimeZone11);
        org.joda.time.LocalDateTime localDateTime15 = org.joda.time.LocalDateTime.now(dateTimeZone11);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.minusYears(2022);
        org.joda.time.LocalDateTime.Property property18 = localDateTime17.era();
        int int19 = localDateTime7.compareTo((org.joda.time.ReadablePartial) localDateTime17);
        org.joda.time.chrono.ISOChronology iSOChronology20 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField21 = iSOChronology20.hourOfHalfday();
        java.lang.String str22 = iSOChronology20.toString();
        java.util.TimeZone timeZone23 = null;
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forTimeZone(timeZone23);
        int int26 = dateTimeZone24.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime27 = org.joda.time.LocalDateTime.now(dateTimeZone24);
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.DateTime dateTime29 = localDateTime27.toDateTime(readableInstant28);
        org.joda.time.Chronology chronology30 = dateTime29.getChronology();
        org.joda.time.DurationField durationField31 = chronology30.hours();
        org.joda.time.DurationField durationField32 = chronology30.months();
        org.joda.time.DateTimeField dateTimeField33 = chronology30.dayOfYear();
        java.util.TimeZone timeZone34 = null;
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forTimeZone(timeZone34);
        int int37 = dateTimeZone35.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime38 = org.joda.time.LocalDateTime.now(dateTimeZone35);
        int[] intArray41 = new int[] { (short) 0, (short) 0 };
        int int42 = dateTimeField33.getMinimumValue((org.joda.time.ReadablePartial) localDateTime38, intArray41);
        java.lang.String str44 = dateTimeField33.getAsShortText((long) 53166088);
        java.util.TimeZone timeZone45 = null;
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.forTimeZone(timeZone45);
        int int48 = dateTimeZone46.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime49 = org.joda.time.LocalDateTime.now(dateTimeZone46);
        int int50 = localDateTime49.getWeekyear();
        org.joda.time.DurationFieldType durationFieldType51 = org.joda.time.DurationFieldType.days();
        org.joda.time.LocalDateTime localDateTime53 = localDateTime49.withFieldAdded(durationFieldType51, 53166088);
        java.util.Locale locale54 = java.util.Locale.ROOT;
        java.lang.String str55 = dateTimeField33.getAsShortText((org.joda.time.ReadablePartial) localDateTime53, locale54);
        java.util.TimeZone timeZone56 = null;
        org.joda.time.DateTimeZone dateTimeZone57 = org.joda.time.DateTimeZone.forTimeZone(timeZone56);
        int int59 = dateTimeZone57.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime60 = org.joda.time.LocalDateTime.now(dateTimeZone57);
        int int61 = localDateTime60.getWeekyear();
        boolean boolean62 = localDateTime53.isEqual((org.joda.time.ReadablePartial) localDateTime60);
        int[] intArray64 = iSOChronology20.get((org.joda.time.ReadablePartial) localDateTime60, (long) 53166088);
        iSOChronology0.validate((org.joda.time.ReadablePartial) localDateTime7, intArray64);
        org.joda.time.chrono.ISOChronology iSOChronology66 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField67 = iSOChronology66.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField68 = iSOChronology66.yearOfEra();
        org.joda.time.DateTimeField dateTimeField69 = iSOChronology66.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField70 = iSOChronology66.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField71 = iSOChronology66.dayOfYear();
        java.util.TimeZone timeZone72 = null;
        org.joda.time.DateTimeZone dateTimeZone73 = org.joda.time.DateTimeZone.forTimeZone(timeZone72);
        java.lang.String str75 = dateTimeZone73.getName(31556995199999L);
        java.lang.String str76 = dateTimeZone73.getID();
        org.joda.time.Chronology chronology77 = iSOChronology66.withZone(dateTimeZone73);
        org.joda.time.Chronology chronology78 = iSOChronology0.withZone(dateTimeZone73);
        org.joda.time.DurationField durationField79 = iSOChronology0.hours();
        org.joda.time.DateTimeField dateTimeField80 = iSOChronology0.clockhourOfHalfday();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeZone4);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 53314 + "'", int6 == 53314);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone11);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 53314 + "'", int13 == 53314);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(iSOChronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "ISOChronology[+00:00:53.314]" + "'", str22, "ISOChronology[+00:00:53.314]");
        org.junit.Assert.assertNotNull(dateTimeZone24);
// flaky:         org.junit.Assert.assertTrue("'" + int26 + "' != '" + 53314 + "'", int26 == 53314);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeZone35);
// flaky:         org.junit.Assert.assertTrue("'" + int37 + "' != '" + 53314 + "'", int37 == 53314);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[0, 0]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "1" + "'", str44, "1");
        org.junit.Assert.assertNotNull(dateTimeZone46);
// flaky:         org.junit.Assert.assertTrue("'" + int48 + "' != '" + 53314 + "'", int48 == 53314);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2022 + "'", int50 == 2022);
        org.junit.Assert.assertNotNull(durationFieldType51);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "346" + "'", str55, "346");
        org.junit.Assert.assertNotNull(dateTimeZone57);
// flaky:         org.junit.Assert.assertTrue("'" + int59 + "' != '" + 53314 + "'", int59 == 53314);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 2022 + "'", int61 == 2022);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(intArray64);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[1970, 1, 1, 53219402]");
        org.junit.Assert.assertNotNull(iSOChronology66);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertNotNull(dateTimeField69);
        org.junit.Assert.assertNotNull(dateTimeField70);
        org.junit.Assert.assertNotNull(dateTimeField71);
        org.junit.Assert.assertNotNull(dateTimeZone73);
// flaky:         org.junit.Assert.assertEquals("'" + str75 + "' != '" + "+00:00:53.314" + "'", str75, "+00:00:53.314");
// flaky:         org.junit.Assert.assertEquals("'" + str76 + "' != '" + "+00:00:53.314" + "'", str76, "+00:00:53.314");
        org.junit.Assert.assertNotNull(chronology77);
        org.junit.Assert.assertNotNull(chronology78);
        org.junit.Assert.assertNotNull(durationField79);
        org.junit.Assert.assertNotNull(dateTimeField80);
    }

    @Test
    public void test11137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11137");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime(49804112, 49803359, 3039, 3153155, 67884084, 50026);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 3153155 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test11138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11138");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime5 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusMinutes((int) ' ');
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withYearOfCentury((int) (byte) 10);
        java.util.TimeZone timeZone10 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        int int13 = dateTimeZone11.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime14 = org.joda.time.LocalDateTime.now(dateTimeZone11);
        org.joda.time.LocalDateTime localDateTime15 = org.joda.time.LocalDateTime.now(dateTimeZone11);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.withMillisOfSecond((int) '4');
        org.joda.time.LocalDateTime localDateTime18 = localDateTime9.withFields((org.joda.time.ReadablePartial) localDateTime15);
        org.joda.time.DurationFieldType durationFieldType19 = org.joda.time.DurationFieldType.weekyears();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime9.withFieldAdded(durationFieldType19, 4);
        org.joda.time.LocalDateTime.Property property22 = localDateTime9.yearOfCentury();
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = property22.getFieldType();
        java.util.Locale locale24 = java.util.Locale.ITALY;
        java.lang.String str25 = property22.getAsText(locale24);
        org.joda.time.LocalDateTime localDateTime26 = property22.roundHalfFloorCopy();
        java.util.TimeZone timeZone27 = null;
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forTimeZone(timeZone27);
        int int30 = dateTimeZone28.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime31 = org.joda.time.LocalDateTime.now(dateTimeZone28);
        int int32 = localDateTime31.getWeekyear();
        org.joda.time.LocalDateTime.Property property33 = localDateTime31.minuteOfHour();
        int int34 = localDateTime31.getHourOfDay();
        java.util.TimeZone timeZone35 = null;
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forTimeZone(timeZone35);
        int int38 = dateTimeZone36.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime39 = org.joda.time.LocalDateTime.now(dateTimeZone36);
        int int40 = localDateTime39.getWeekyear();
        org.joda.time.LocalDateTime.Property property41 = localDateTime39.millisOfDay();
        java.util.TimeZone timeZone42 = null;
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forTimeZone(timeZone42);
        int int45 = dateTimeZone43.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime46 = org.joda.time.LocalDateTime.now(dateTimeZone43);
        org.joda.time.ReadableInstant readableInstant47 = null;
        org.joda.time.DateTime dateTime48 = localDateTime46.toDateTime(readableInstant47);
        java.util.TimeZone timeZone49 = null;
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.forTimeZone(timeZone49);
        int int52 = dateTimeZone50.getOffset(100L);
        org.joda.time.DateTime dateTime53 = localDateTime46.toDateTime(dateTimeZone50);
        int int54 = property41.compareTo((org.joda.time.ReadableInstant) dateTime53);
        int int55 = property41.get();
        org.joda.time.LocalDateTime localDateTime57 = property41.addWrapFieldToCopy(454550);
        org.joda.time.LocalDateTime localDateTime59 = property41.addToCopy(380328273986263L);
        org.joda.time.LocalDateTime localDateTime60 = property41.roundHalfEvenCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType61 = property41.getFieldType();
        org.joda.time.LocalDateTime.Property property62 = localDateTime31.property(dateTimeFieldType61);
        boolean boolean63 = localDateTime26.isSupported(dateTimeFieldType61);
        org.joda.time.LocalDateTime.Property property64 = localDateTime26.dayOfYear();
        int int65 = localDateTime26.getSecondOfMinute();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53314 + "'", int3 == 53314);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone11);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 53314 + "'", int13 == 53314);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(durationFieldType19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "10" + "'", str25, "10");
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(dateTimeZone28);
// flaky:         org.junit.Assert.assertTrue("'" + int30 + "' != '" + 53314 + "'", int30 == 53314);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2022 + "'", int32 == 2022);
        org.junit.Assert.assertNotNull(property33);
// flaky:         org.junit.Assert.assertTrue("'" + int34 + "' != '" + 14 + "'", int34 == 14);
        org.junit.Assert.assertNotNull(dateTimeZone36);
// flaky:         org.junit.Assert.assertTrue("'" + int38 + "' != '" + 53314 + "'", int38 == 53314);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 2022 + "'", int40 == 2022);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(dateTimeZone43);
// flaky:         org.junit.Assert.assertTrue("'" + int45 + "' != '" + 53314 + "'", int45 == 53314);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTimeZone50);
// flaky:         org.junit.Assert.assertTrue("'" + int52 + "' != '" + 53314 + "'", int52 == 53314);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int55 + "' != '" + 53716099 + "'", int55 == 53716099);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(dateTimeFieldType61);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
    }

    @Test
    public void test11139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11139");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.hourOfHalfday();
        long long7 = iSOChronology0.getDateTimeMillis((-1), 8, 3, 365);
        org.joda.time.DurationField durationField8 = iSOChronology0.seconds();
        long long12 = iSOChronology0.add(1645454774909L, (long) 53178951, 53166088);
        org.joda.time.DateTimeField dateTimeField13 = iSOChronology0.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology0.dayOfMonth();
        org.joda.time.DurationField durationField15 = dateTimeField14.getRangeDurationField();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
// flaky:         org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-62180265652949L) + "'", long7 == (-62180265652949L));
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 2828962243388597L + "'", long12 == 2828962243388597L);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
    }

    @Test
    public void test11140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11140");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.centuryOfEra();
        org.joda.time.DurationField durationField3 = iSOChronology0.days();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.era();
        org.joda.time.DurationField durationField5 = iSOChronology0.weeks();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
    }

    @Test
    public void test11141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11141");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("ja");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str3 = locale1.getExtension(' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed extension key:  ");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ja");
    }

    @Test
    public void test11142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11142");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setExtension('x', "jpn");
        java.util.Locale locale4 = java.util.Locale.GERMAN;
        java.util.Locale locale5 = java.util.Locale.GERMAN;
        java.lang.String str6 = locale4.getDisplayCountry(locale5);
        java.util.Locale locale7 = locale4.stripExtensions();
        java.lang.String str8 = locale4.getDisplayName();
        java.util.Locale.Builder builder9 = builder3.setLocale(locale4);
        java.util.Locale.Builder builder12 = builder9.setUnicodeLocaleKeyword("22", "deu");
        java.util.Locale locale13 = java.util.Locale.ENGLISH;
        java.lang.String str14 = locale13.getDisplayCountry();
        java.util.Locale.setDefault(locale13);
        java.util.Locale.Builder builder16 = builder9.setLocale(locale13);
        java.util.Locale.Builder builder17 = builder9.clear();
        java.util.Locale locale18 = builder9.build();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "de");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "de");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\ub3c5\uc77c\uc5b4" + "'", str8, "\ub3c5\uc77c\uc5b4");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "en");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "");
    }

    @Test
    public void test11143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11143");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.yearOfEra();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.weekyearOfCentury();
        java.lang.String str4 = iSOChronology0.toString();
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology0.clockhourOfHalfday();
        java.lang.String str6 = iSOChronology0.toString();
        org.joda.time.DateTimeField dateTimeField7 = iSOChronology0.monthOfYear();
        org.joda.time.DateTimeField dateTimeField8 = iSOChronology0.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField9 = iSOChronology0.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology0.secondOfDay();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology0.centuryOfEra();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "ISOChronology[+00:00:53.314]" + "'", str4, "ISOChronology[+00:00:53.314]");
        org.junit.Assert.assertNotNull(dateTimeField5);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "ISOChronology[+00:00:53.314]" + "'", str6, "ISOChronology[+00:00:53.314]");
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
    }

    @Test
    public void test11144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11144");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime5 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusMinutes((int) ' ');
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withYearOfCentury((int) (byte) 10);
        java.util.TimeZone timeZone10 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        int int13 = dateTimeZone11.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime14 = org.joda.time.LocalDateTime.now(dateTimeZone11);
        org.joda.time.LocalDateTime localDateTime15 = org.joda.time.LocalDateTime.now(dateTimeZone11);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.withMillisOfSecond((int) '4');
        org.joda.time.LocalDateTime localDateTime18 = localDateTime9.withFields((org.joda.time.ReadablePartial) localDateTime15);
        org.joda.time.DurationFieldType durationFieldType19 = org.joda.time.DurationFieldType.weekyears();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime9.withFieldAdded(durationFieldType19, 4);
        org.joda.time.LocalDateTime.Property property22 = localDateTime9.dayOfWeek();
        org.joda.time.chrono.ISOChronology iSOChronology23 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField24 = iSOChronology23.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField25 = iSOChronology23.yearOfEra();
        org.joda.time.DateTimeField dateTimeField26 = iSOChronology23.weekyearOfCentury();
        java.lang.String str27 = iSOChronology23.toString();
        org.joda.time.DateTimeField dateTimeField28 = iSOChronology23.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField29 = iSOChronology23.dayOfYear();
        java.util.TimeZone timeZone30 = null;
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forTimeZone(timeZone30);
        int int33 = dateTimeZone31.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime34 = org.joda.time.LocalDateTime.now(dateTimeZone31);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray35 = localDateTime34.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime37 = localDateTime34.plusWeeks(2022);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime34.plusHours((int) '4');
        int int40 = dateTimeField29.getMinimumValue((org.joda.time.ReadablePartial) localDateTime39);
        org.joda.time.LocalDateTime.Property property41 = localDateTime39.dayOfWeek();
        boolean boolean42 = localDateTime9.isBefore((org.joda.time.ReadablePartial) localDateTime39);
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53314 + "'", int3 == 53314);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone11);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 53314 + "'", int13 == 53314);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(durationFieldType19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(iSOChronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "ISOChronology[+00:00:53.314]" + "'", str27, "ISOChronology[+00:00:53.314]");
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeZone31);
// flaky:         org.junit.Assert.assertTrue("'" + int33 + "' != '" + 53314 + "'", int33 == 53314);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
    }

    @Test
    public void test11145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11145");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        int int5 = localDateTime4.getWeekyear();
        org.joda.time.LocalDateTime.Property property6 = localDateTime4.millisOfDay();
        java.util.Locale locale7 = java.util.Locale.GERMAN;
        java.util.Locale locale8 = java.util.Locale.GERMAN;
        java.lang.String str9 = locale7.getDisplayCountry(locale8);
        java.util.Locale locale10 = locale7.stripExtensions();
        int int11 = property6.getMaximumShortTextLength(locale7);
        org.joda.time.Interval interval12 = property6.toInterval();
        org.joda.time.LocalDateTime localDateTime13 = property6.getLocalDateTime();
        int int14 = localDateTime13.getYearOfEra();
        int int15 = localDateTime13.getYearOfCentury();
        org.joda.time.DurationFieldType durationFieldType16 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.chrono.ISOChronology iSOChronology17 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology17.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology17.centuryOfEra();
        org.joda.time.DurationField durationField20 = iSOChronology17.seconds();
        org.joda.time.DateTimeField dateTimeField21 = iSOChronology17.clockhourOfDay();
        org.joda.time.Chronology chronology22 = iSOChronology17.withUTC();
        org.joda.time.DateTimeField dateTimeField23 = iSOChronology17.halfdayOfDay();
        org.joda.time.DurationField durationField24 = durationFieldType16.getField((org.joda.time.Chronology) iSOChronology17);
        boolean boolean25 = localDateTime13.isSupported(durationFieldType16);
        org.joda.time.LocalDateTime.Property property26 = localDateTime13.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime27 = property26.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.minusHours(50013052);
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53314 + "'", int3 == 53314);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2022 + "'", int5 == 2022);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "de");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "de");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "de");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 8 + "'", int11 == 8);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2022 + "'", int14 == 2022);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 22 + "'", int15 == 22);
        org.junit.Assert.assertNotNull(durationFieldType16);
        org.junit.Assert.assertNotNull(iSOChronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
    }

    @Test
    public void test11146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11146");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.hourOfHalfday();
        long long7 = iSOChronology0.getDateTimeMillis((-1), 8, 3, 365);
        org.joda.time.DurationField durationField8 = iSOChronology0.hours();
        org.joda.time.DateTimeField dateTimeField9 = iSOChronology0.dayOfYear();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology0.dayOfYear();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology0.era();
        java.util.TimeZone timeZone12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone12);
        int int15 = dateTimeZone13.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime16 = org.joda.time.LocalDateTime.now(dateTimeZone13);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray17 = localDateTime16.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.hourOfDay();
        int int19 = localDateTime16.get(dateTimeFieldType18);
        org.joda.time.LocalDateTime.Property property20 = localDateTime16.dayOfWeek();
        boolean boolean21 = property20.isLeap();
        long long22 = property20.remainder();
        org.joda.time.LocalDateTime localDateTime23 = property20.getLocalDateTime();
        org.joda.time.Chronology chronology24 = localDateTime23.getChronology();
        java.util.TimeZone timeZone25 = null;
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forTimeZone(timeZone25);
        int int28 = dateTimeZone26.getOffset(100L);
        java.util.TimeZone timeZone29 = dateTimeZone26.toTimeZone();
        java.lang.String str30 = dateTimeZone26.getID();
        java.util.TimeZone timeZone31 = dateTimeZone26.toTimeZone();
        long long33 = dateTimeZone26.nextTransition((long) 100);
        java.lang.String str35 = dateTimeZone26.getNameKey(1645454778469L);
        org.joda.time.DateTime dateTime36 = localDateTime23.toDateTime(dateTimeZone26);
        int int37 = localDateTime23.getDayOfMonth();
        int[] intArray39 = iSOChronology0.get((org.joda.time.ReadablePartial) localDateTime23, (-167L));
        org.joda.time.DateTimeField dateTimeField40 = iSOChronology0.weekOfWeekyear();
        org.joda.time.ReadablePeriod readablePeriod41 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray44 = iSOChronology0.get(readablePeriod41, 46800000L, 4595195458107053L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
// flaky:         org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-62180265652949L) + "'", long7 == (-62180265652949L));
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeZone13);
// flaky:         org.junit.Assert.assertTrue("'" + int15 + "' != '" + 53314 + "'", int15 == 53314);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray17);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 14 + "'", int19 == 14);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long22 + "' != '" + 53716305L + "'", long22 == 53716305L);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeZone26);
// flaky:         org.junit.Assert.assertTrue("'" + int28 + "' != '" + 53314 + "'", int28 == 53314);
        org.junit.Assert.assertNotNull(timeZone29);
// flaky:         org.junit.Assert.assertEquals(timeZone29.getDisplayName(), "GMT+00:00");
// flaky:         org.junit.Assert.assertEquals("'" + str30 + "' != '" + "+00:00:53.314" + "'", str30, "+00:00:53.314");
        org.junit.Assert.assertNotNull(timeZone31);
// flaky:         org.junit.Assert.assertEquals(timeZone31.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 100L + "'", long33 == 100L);
// flaky:         org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 21 + "'", int37 == 21);
        org.junit.Assert.assertNotNull(intArray39);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[1970, 1, 1, 53147]");
        org.junit.Assert.assertNotNull(dateTimeField40);
    }

    @Test
    public void test11147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11147");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.yearOfEra();
        org.joda.time.DurationField durationField3 = iSOChronology0.minutes();
        org.joda.time.DurationField durationField4 = iSOChronology0.months();
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology0.era();
        org.joda.time.DurationField durationField6 = iSOChronology0.seconds();
        org.joda.time.DateTimeField dateTimeField7 = iSOChronology0.hourOfDay();
        long long9 = dateTimeField7.roundFloor(8934792400749600000L);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
// flaky:         org.junit.Assert.assertTrue("'" + long9 + "' != '" + 8934792400749546686L + "'", long9 == 8934792400749546686L);
    }

    @Test
    public void test11148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11148");
        java.util.Locale locale0 = java.util.Locale.JAPANESE;
        java.lang.String str1 = locale0.getDisplayLanguage();
        java.lang.String str2 = locale0.getISO3Language();
        java.util.Locale locale3 = java.util.Locale.CHINA;
        java.lang.String str4 = locale0.getDisplayLanguage(locale3);
        org.joda.time.tz.NameProvider nameProvider5 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet7 = locale6.getExtensionKeys();
        java.lang.String str10 = nameProvider5.getShortName(locale6, "Koordinierte Universalzeit", "+00:00");
        java.util.Locale locale11 = java.util.Locale.KOREAN;
        java.lang.String str12 = locale6.getDisplayName(locale11);
        java.lang.String str13 = locale3.getDisplayVariant(locale11);
        java.util.Locale locale14 = locale11.stripExtensions();
        java.lang.String str15 = locale11.toLanguageTag();
        java.util.Set<java.lang.Character> charSet16 = locale11.getExtensionKeys();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Japanese" + "'", str1, "Japanese");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "jpn" + "'", str2, "jpn");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u65e5\u6587" + "'", str4, "\u65e5\u6587");
        org.junit.Assert.assertNotNull(nameProvider5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet7);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str12, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "ko" + "'", str15, "ko");
        org.junit.Assert.assertNotNull(charSet16);
    }

    @Test
    public void test11149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11149");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.yearOfEra();
        org.joda.time.DurationField durationField3 = iSOChronology0.minutes();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.weekyear();
        org.joda.time.Chronology chronology5 = iSOChronology0.withUTC();
        org.joda.time.DateTimeField dateTimeField6 = iSOChronology0.monthOfYear();
        org.joda.time.DateTimeField dateTimeField7 = iSOChronology0.hourOfDay();
        org.joda.time.DurationField durationField8 = iSOChronology0.days();
        org.joda.time.DateTimeField dateTimeField9 = iSOChronology0.dayOfWeek();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
    }

    @Test
    public void test11150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11150");
        org.joda.time.tz.Provider provider0 = org.joda.time.DateTimeZone.getProvider();
        org.joda.time.DateTimeZone dateTimeZone2 = provider0.getZone("DateTimeField[secondOfDay]");
        java.util.Set<java.lang.String> strSet3 = provider0.getAvailableIDs();
        org.joda.time.DateTimeZone dateTimeZone5 = provider0.getZone("Korean");
        org.joda.time.DateTimeZone dateTimeZone7 = provider0.getZone("53166807");
        org.joda.time.DateTimeZone.setProvider(provider0);
        org.joda.time.DateTimeZone.setProvider(provider0);
        org.junit.Assert.assertNotNull(provider0);
        org.junit.Assert.assertNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNull(dateTimeZone5);
        org.junit.Assert.assertNull(dateTimeZone7);
    }

    @Test
    public void test11151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11151");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str3 = dateTimeZone1.getName(31556995199999L);
        java.lang.String str4 = dateTimeZone1.getID();
        java.util.TimeZone timeZone5 = dateTimeZone1.toTimeZone();
        org.joda.time.chrono.ISOChronology iSOChronology6 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField7 = iSOChronology6.yearOfCentury();
        org.joda.time.DurationField durationField8 = iSOChronology6.hours();
        org.joda.time.DateTimeField dateTimeField9 = iSOChronology6.dayOfYear();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology6.millisOfDay();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+00:00:53.314" + "'", str3, "+00:00:53.314");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00:53.314" + "'", str4, "+00:00:53.314");
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(iSOChronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
    }

    @Test
    public void test11152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11152");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.yearOfEra();
        java.util.TimeZone timeZone3 = null;
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forTimeZone(timeZone3);
        java.lang.String str6 = dateTimeZone4.getName(31556995199999L);
        org.joda.time.Chronology chronology7 = iSOChronology0.withZone(dateTimeZone4);
        org.joda.time.DateTimeField dateTimeField8 = chronology7.secondOfDay();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeZone4);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:53.314" + "'", str6, "+00:00:53.314");
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
    }

    @Test
    public void test11153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11153");
        org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.parse("2022-02-24T23:04:25.856");
        org.junit.Assert.assertNotNull(localDateTime1);
    }

    @Test
    public void test11154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11154");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.weekOfWeekyear();
        java.util.TimeZone timeZone2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone2);
        java.lang.String str5 = dateTimeZone3.getName(31556995199999L);
        org.joda.time.Chronology chronology6 = iSOChronology0.withZone(dateTimeZone3);
        org.joda.time.DateTimeField dateTimeField7 = iSOChronology0.halfdayOfDay();
        org.joda.time.DurationField durationField8 = iSOChronology0.weeks();
        org.joda.time.DurationField durationField9 = iSOChronology0.weekyears();
        java.util.TimeZone timeZone10 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        int int13 = dateTimeZone11.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime14 = org.joda.time.LocalDateTime.now(dateTimeZone11);
        org.joda.time.LocalDateTime localDateTime15 = org.joda.time.LocalDateTime.now(dateTimeZone11);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.minusMinutes((int) ' ');
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.withYearOfCentury((int) (byte) 10);
        java.util.TimeZone timeZone20 = null;
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forTimeZone(timeZone20);
        int int23 = dateTimeZone21.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime24 = org.joda.time.LocalDateTime.now(dateTimeZone21);
        org.joda.time.LocalDateTime localDateTime25 = org.joda.time.LocalDateTime.now(dateTimeZone21);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.plusSeconds((int) (short) 10);
        int[] intArray28 = localDateTime25.getValues();
        iSOChronology0.validate((org.joda.time.ReadablePartial) localDateTime17, intArray28);
        org.joda.time.DurationField durationField30 = iSOChronology0.halfdays();
        org.joda.time.DateTimeField dateTimeField31 = iSOChronology0.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField32 = iSOChronology0.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField33 = iSOChronology0.millisOfDay();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeZone3);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+00:00:53.314" + "'", str5, "+00:00:53.314");
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeZone11);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 53314 + "'", int13 == 53314);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(dateTimeZone21);
// flaky:         org.junit.Assert.assertTrue("'" + int23 + "' != '" + 53314 + "'", int23 == 53314);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(intArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[2022, 2, 21, 53716512]");
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
    }

    @Test
    public void test11155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11155");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setExtension('x', "jpn");
        java.util.Locale locale4 = builder0.build();
        java.util.Locale locale5 = builder0.build();
        java.util.Locale.Builder builder6 = builder0.clearExtensions();
        java.util.Locale.Builder builder7 = builder6.clearExtensions();
        java.util.Locale.Builder builder8 = builder7.clear();
        java.util.Locale.Builder builder9 = builder8.clear();
        java.util.Locale.Builder builder11 = builder8.addUnicodeLocaleAttribute("49785726");
        java.util.Locale.Builder builder13 = builder8.setVariant("64122");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
    }

    @Test
    public void test11156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11156");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.hourOfHalfday();
        java.lang.String str2 = iSOChronology0.toString();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.era();
        org.joda.time.DurationField durationField4 = iSOChronology0.centuries();
        org.joda.time.DurationField durationField5 = iSOChronology0.weeks();
        org.joda.time.DateTimeField dateTimeField6 = iSOChronology0.era();
        org.joda.time.DateTimeField dateTimeField7 = iSOChronology0.yearOfCentury();
        org.joda.time.DurationField durationField8 = iSOChronology0.minutes();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ISOChronology[+00:00:53.314]" + "'", str2, "ISOChronology[+00:00:53.314]");
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
    }

    @Test
    public void test11157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11157");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.centuryOfEra();
        org.joda.time.DurationField durationField3 = iSOChronology0.seconds();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology0.hourOfHalfday();
        java.util.TimeZone timeZone6 = null;
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forTimeZone(timeZone6);
        int int9 = dateTimeZone7.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime10 = org.joda.time.LocalDateTime.now(dateTimeZone7);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray11 = localDateTime10.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.hourOfDay();
        int int13 = localDateTime10.get(dateTimeFieldType12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime10.minusWeeks(1);
        long long17 = iSOChronology0.set((org.joda.time.ReadablePartial) localDateTime15, (long) 0);
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology0.secondOfDay();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology0.yearOfEra();
        org.joda.time.DateTimeField dateTimeField20 = iSOChronology0.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField21 = iSOChronology0.year();
        org.joda.time.DateTimeField dateTimeField22 = iSOChronology0.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField23 = iSOChronology0.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField24 = iSOChronology0.minuteOfHour();
        long long26 = dateTimeField24.roundFloor(1644850020667L);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeZone7);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 53314 + "'", int9 == 53314);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray11);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 14 + "'", int13 == 14);
        org.junit.Assert.assertNotNull(localDateTime15);
// flaky:         org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1644850463264L + "'", long17 == 1644850463264L);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
// flaky:         org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1644849966686L + "'", long26 == 1644849966686L);
    }

    @Test
    public void test11158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11158");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime5 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.plusWeeks(27424246);
        java.util.TimeZone timeZone8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        int int11 = dateTimeZone9.getOffset(100L);
        long long13 = dateTimeZone9.nextTransition((long) (short) -1);
        org.joda.time.DateTime dateTime14 = localDateTime7.toDateTime(dateTimeZone9);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime7.minusDays(49830764);
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53314 + "'", int3 == 53314);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(dateTimeZone9);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 53314 + "'", int11 == 53314);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
    }

    @Test
    public void test11159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11159");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.hourOfHalfday();
        java.lang.String str2 = iSOChronology0.toString();
        org.joda.time.DurationField durationField3 = iSOChronology0.eras();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology0.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField6 = iSOChronology0.secondOfDay();
        org.joda.time.DateTimeField dateTimeField7 = iSOChronology0.secondOfDay();
        org.joda.time.DateTimeField dateTimeField8 = iSOChronology0.secondOfDay();
        java.util.TimeZone timeZone9 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        int int12 = dateTimeZone10.getOffset(100L);
        java.util.TimeZone timeZone13 = dateTimeZone10.toTimeZone();
        int int15 = dateTimeZone10.getStandardOffset((long) ' ');
        boolean boolean17 = dateTimeZone10.isStandardOffset((long) '4');
        boolean boolean18 = dateTimeZone10.isFixed();
        java.util.TimeZone timeZone19 = dateTimeZone10.toTimeZone();
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime(dateTimeZone10);
        int[] intArray22 = iSOChronology0.get((org.joda.time.ReadablePartial) localDateTime20, (long) 3131827);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ISOChronology[+00:00:53.314]" + "'", str2, "ISOChronology[+00:00:53.314]");
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeZone10);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 53314 + "'", int12 == 53314);
        org.junit.Assert.assertNotNull(timeZone13);
// flaky:         org.junit.Assert.assertEquals(timeZone13.getDisplayName(), "GMT+00:00");
// flaky:         org.junit.Assert.assertTrue("'" + int15 + "' != '" + 53314 + "'", int15 == 53314);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(timeZone19);
// flaky:         org.junit.Assert.assertEquals(timeZone19.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(intArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[1970, 1, 1, 3185141]");
    }

    @Test
    public void test11160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11160");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.DateTime dateTime6 = localDateTime4.toDateTime(readableInstant5);
        org.joda.time.Chronology chronology7 = dateTime6.getChronology();
        org.joda.time.DurationField durationField8 = chronology7.hours();
        org.joda.time.DurationField durationField9 = chronology7.months();
        org.joda.time.DateTimeField dateTimeField10 = chronology7.dayOfYear();
        java.util.TimeZone timeZone11 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        int int14 = dateTimeZone12.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime15 = org.joda.time.LocalDateTime.now(dateTimeZone12);
        int[] intArray18 = new int[] { (short) 0, (short) 0 };
        int int19 = dateTimeField10.getMinimumValue((org.joda.time.ReadablePartial) localDateTime15, intArray18);
        int int21 = dateTimeField10.getMinimumValue((long) 100);
        java.util.TimeZone timeZone22 = null;
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        int int25 = dateTimeZone23.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime26 = org.joda.time.LocalDateTime.now(dateTimeZone23);
        int int27 = localDateTime26.getWeekyear();
        org.joda.time.LocalDateTime.Property property28 = localDateTime26.minuteOfHour();
        int int29 = dateTimeField10.getMaximumValue((org.joda.time.ReadablePartial) localDateTime26);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime26.withCenturyOfEra(1);
        org.joda.time.LocalDateTime.Property property32 = localDateTime26.weekyear();
        org.joda.time.LocalDateTime localDateTime34 = property32.setCopy("53166874");
        org.joda.time.LocalDateTime localDateTime36 = localDateTime34.plusWeeks(2810419);
        org.joda.time.LocalDateTime.Property property37 = localDateTime36.year();
        java.lang.String str38 = property37.getAsShortText();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53314 + "'", int3 == 53314);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeZone12);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 53314 + "'", int14 == 53314);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[0, 0]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(dateTimeZone23);
// flaky:         org.junit.Assert.assertTrue("'" + int25 + "' != '" + 53314 + "'", int25 == 53314);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2022 + "'", int27 == 2022);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 365 + "'", int29 == 365);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "53220736" + "'", str38, "53220736");
    }

    @Test
    public void test11161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11161");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray5 = localDateTime4.getFieldTypes();
        int int6 = localDateTime4.getMonthOfYear();
        org.joda.time.LocalDateTime.Property property7 = localDateTime4.yearOfEra();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime4.plusDays(53263613);
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53314 + "'", int3 == 53314);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime9);
    }

    @Test
    public void test11162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11162");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.yearOfEra();
        org.joda.time.DurationField durationField3 = iSOChronology0.minutes();
        org.joda.time.DurationField durationField4 = iSOChronology0.months();
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology0.era();
        org.joda.time.DurationField durationField6 = iSOChronology0.halfdays();
        org.joda.time.DateTimeField dateTimeField7 = iSOChronology0.minuteOfHour();
        org.joda.time.DurationField durationField8 = iSOChronology0.hours();
        long long11 = durationField8.subtract(1644883200001L, 983);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1641344400001L + "'", long11 == 1641344400001L);
    }

    @Test
    public void test11163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11163");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime5 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusMinutes((int) ' ');
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.LocalDateTime localDateTime9 = localDateTime5.plus(readablePeriod8);
        org.joda.time.LocalDateTime.Property property10 = localDateTime5.dayOfMonth();
        org.joda.time.DurationField durationField11 = property10.getLeapDurationField();
        java.lang.String str12 = property10.getName();
        org.joda.time.DurationField durationField13 = property10.getRangeDurationField();
        long long16 = durationField13.getValueAsLong(1645455075427L, 360000L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53314 + "'", int3 == 53314);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNull(durationField11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "dayOfMonth" + "'", str12, "dayOfMonth");
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 625L + "'", long16 == 625L);
    }

    @Test
    public void test11164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11164");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime5 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.plusSeconds((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime5.minusWeeks((int) (byte) 10);
        java.util.TimeZone timeZone10 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        int int13 = dateTimeZone11.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime14 = org.joda.time.LocalDateTime.now(dateTimeZone11);
        int int15 = localDateTime14.getWeekyear();
        org.joda.time.LocalDateTime.Property property16 = localDateTime14.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime14.minusMillis(2022);
        org.joda.time.ReadableDuration readableDuration19 = null;
        org.joda.time.LocalDateTime localDateTime21 = localDateTime14.withDurationAdded(readableDuration19, (int) 'x');
        boolean boolean22 = localDateTime5.isBefore((org.joda.time.ReadablePartial) localDateTime21);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.Chronology chronology24 = null;
        boolean boolean25 = dateTimeFieldType23.isSupported(chronology24);
        org.joda.time.Chronology chronology26 = null;
        boolean boolean27 = dateTimeFieldType23.isSupported(chronology26);
        boolean boolean28 = localDateTime5.isSupported(dateTimeFieldType23);
        java.lang.String str29 = dateTimeFieldType23.toString();
        org.joda.time.chrono.ISOChronology iSOChronology30 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField31 = iSOChronology30.hourOfHalfday();
        java.lang.String str32 = iSOChronology30.toString();
        org.joda.time.DurationField durationField33 = iSOChronology30.eras();
        boolean boolean34 = dateTimeFieldType23.isSupported((org.joda.time.Chronology) iSOChronology30);
        org.joda.time.DateTimeField dateTimeField35 = iSOChronology30.millisOfSecond();
        java.util.TimeZone timeZone36 = null;
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forTimeZone(timeZone36);
        int int39 = dateTimeZone37.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime40 = org.joda.time.LocalDateTime.now(dateTimeZone37);
        int int41 = localDateTime40.getWeekyear();
        int int42 = localDateTime40.getDayOfYear();
        int int43 = localDateTime40.getDayOfYear();
        java.util.TimeZone timeZone44 = null;
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forTimeZone(timeZone44);
        int int47 = dateTimeZone45.getOffset(100L);
        java.util.TimeZone timeZone48 = dateTimeZone45.toTimeZone();
        int int50 = dateTimeZone45.getStandardOffset((long) ' ');
        java.util.TimeZone timeZone51 = dateTimeZone45.toTimeZone();
        org.joda.time.tz.NameProvider nameProvider53 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale54 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet55 = locale54.getExtensionKeys();
        java.lang.String str58 = nameProvider53.getShortName(locale54, "Koordinierte Universalzeit", "+00:00");
        java.util.Locale locale59 = java.util.Locale.GERMAN;
        java.lang.String str62 = nameProvider53.getShortName(locale59, "53167803", "jpn");
        java.lang.String str63 = dateTimeZone45.getName(1645454775635L, locale59);
        java.lang.String str64 = dateTimeField35.getAsText((org.joda.time.ReadablePartial) localDateTime40, locale59);
        java.util.Locale locale69 = new java.util.Locale("DateTimeField[weekOfWeekyear]", "China", "Property[millisOfDay]");
        java.lang.String str70 = locale69.getDisplayCountry();
        java.lang.String str71 = dateTimeField35.getAsShortText(49899966, locale69);
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53314 + "'", int3 == 53314);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone11);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 53314 + "'", int13 == 53314);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2022 + "'", int15 == 2022);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "dayOfYear" + "'", str29, "dayOfYear");
        org.junit.Assert.assertNotNull(iSOChronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
// flaky:         org.junit.Assert.assertEquals("'" + str32 + "' != '" + "ISOChronology[+00:00:53.314]" + "'", str32, "ISOChronology[+00:00:53.314]");
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeZone37);
// flaky:         org.junit.Assert.assertTrue("'" + int39 + "' != '" + 53314 + "'", int39 == 53314);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 2022 + "'", int41 == 2022);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 52 + "'", int42 == 52);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 52 + "'", int43 == 52);
        org.junit.Assert.assertNotNull(dateTimeZone45);
// flaky:         org.junit.Assert.assertTrue("'" + int47 + "' != '" + 53314 + "'", int47 == 53314);
        org.junit.Assert.assertNotNull(timeZone48);
// flaky:         org.junit.Assert.assertEquals(timeZone48.getDisplayName(), "GMT+00:00");
// flaky:         org.junit.Assert.assertTrue("'" + int50 + "' != '" + 53314 + "'", int50 == 53314);
        org.junit.Assert.assertNotNull(timeZone51);
// flaky:         org.junit.Assert.assertEquals(timeZone51.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(nameProvider53);
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet55);
        org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "de");
        org.junit.Assert.assertNull(str62);
// flaky:         org.junit.Assert.assertEquals("'" + str63 + "' != '" + "+00:00:53.314" + "'", str63, "+00:00:53.314");
// flaky:         org.junit.Assert.assertEquals("'" + str64 + "' != '" + "805" + "'", str64, "805");
        org.junit.Assert.assertEquals(locale69.toString(), "datetimefield[weekofweekyear]_CHINA_Property[millisOfDay]");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "CHINA" + "'", str70, "CHINA");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "49899966" + "'", str71, "49899966");
    }

    @Test
    public void test11165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11165");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.yearOfEra();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.weekOfWeekyear();
        org.joda.time.DurationField durationField5 = iSOChronology0.weekyears();
        org.joda.time.Chronology chronology6 = iSOChronology0.withUTC();
        org.joda.time.DurationField durationField7 = iSOChronology0.hours();
        org.joda.time.DateTimeField dateTimeField8 = iSOChronology0.minuteOfHour();
        long long10 = dateTimeField8.roundHalfEven((-252000000L));
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
// flaky:         org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-251993314L) + "'", long10 == (-251993314L));
    }

    @Test
    public void test11166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11166");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime5 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.plusSeconds((int) (short) 10);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.hourOfDay();
        int int9 = property8.get();
        org.joda.time.chrono.ISOChronology iSOChronology10 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology10.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology10.yearOfEra();
        org.joda.time.DurationField durationField13 = iSOChronology10.minutes();
        org.joda.time.DurationField durationField14 = iSOChronology10.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology10.era();
        org.joda.time.DurationField durationField16 = dateTimeField15.getRangeDurationField();
        java.util.Locale locale18 = java.util.Locale.JAPANESE;
        java.lang.String str19 = locale18.getDisplayLanguage();
        java.lang.String str20 = locale18.getISO3Language();
        java.lang.String str21 = locale18.getISO3Language();
        java.lang.String str22 = locale18.getDisplayVariant();
        java.lang.String str23 = dateTimeField15.getAsShortText(0L, locale18);
        int int24 = property8.getMaximumTextLength(locale18);
        org.joda.time.LocalDateTime localDateTime25 = property8.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime27 = property8.addToCopy(1644850108375L);
        org.joda.time.LocalDateTime localDateTime29 = property8.addToCopy(631);
        int int30 = property8.get();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53314 + "'", int3 == 53314);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 14 + "'", int9 == 14);
        org.junit.Assert.assertNotNull(iSOChronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNull(durationField16);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Japanese" + "'", str19, "Japanese");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "jpn" + "'", str20, "jpn");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "jpn" + "'", str21, "jpn");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "\u897f\u66a6" + "'", str23, "\u897f\u66a6");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
// flaky:         org.junit.Assert.assertTrue("'" + int30 + "' != '" + 14 + "'", int30 == 14);
    }

    @Test
    public void test11167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11167");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str3 = dateTimeZone1.getShortName(100L);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        java.util.TimeZone timeZone5 = dateTimeZone1.toTimeZone();
        boolean boolean6 = timeZone5.observesDaylightTime();
        java.util.TimeZone.setDefault(timeZone5);
        int int9 = timeZone5.getOffset((long) (short) 100);
        boolean boolean10 = timeZone5.observesDaylightTime();
        java.util.TimeZone.setDefault(timeZone5);
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+00:00:53.314" + "'", str3, "+00:00:53.314");
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 53314 + "'", int9 == 53314);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test11168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11168");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray5 = localDateTime4.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.hourOfDay();
        int int7 = localDateTime4.get(dateTimeFieldType6);
        org.joda.time.LocalDateTime.Property property8 = localDateTime4.dayOfWeek();
        org.joda.time.LocalDateTime.Property property9 = localDateTime4.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime10 = property9.withMinimumValue();
        java.util.Locale.Builder builder11 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder14 = builder11.setExtension('x', "jpn");
        java.util.Locale locale15 = builder11.build();
        java.util.Locale locale16 = builder11.build();
        java.util.Locale.Builder builder17 = builder11.clearExtensions();
        java.util.TimeZone timeZone18 = null;
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forTimeZone(timeZone18);
        int int21 = dateTimeZone19.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime22 = org.joda.time.LocalDateTime.now(dateTimeZone19);
        int int23 = localDateTime22.getWeekyear();
        org.joda.time.LocalDateTime.Property property24 = localDateTime22.millisOfDay();
        java.util.Locale locale25 = java.util.Locale.KOREAN;
        java.lang.String str26 = property24.getAsText(locale25);
        java.lang.String str27 = locale25.getCountry();
        java.util.Locale.Builder builder28 = builder17.setLocale(locale25);
        java.util.Locale.Builder builder29 = builder17.clear();
        boolean boolean30 = property9.equals((java.lang.Object) builder29);
        java.util.TimeZone timeZone31 = null;
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forTimeZone(timeZone31);
        int int34 = dateTimeZone32.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime35 = org.joda.time.LocalDateTime.now(dateTimeZone32);
        int int36 = localDateTime35.getWeekyear();
        org.joda.time.LocalDateTime.Property property37 = localDateTime35.millisOfDay();
        java.util.Locale locale38 = java.util.Locale.GERMAN;
        java.util.Locale locale39 = java.util.Locale.GERMAN;
        java.lang.String str40 = locale38.getDisplayCountry(locale39);
        java.util.Locale locale41 = locale38.stripExtensions();
        int int42 = property37.getMaximumShortTextLength(locale38);
        org.joda.time.Interval interval43 = property37.toInterval();
        org.joda.time.LocalDateTime localDateTime45 = property37.setCopy(1);
        org.joda.time.LocalDateTime.Property property46 = localDateTime45.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime48 = localDateTime45.withMillisOfDay((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime50 = localDateTime48.withYear((-292275054));
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime52 = localDateTime48.toDateTime(dateTimeZone51);
        int int53 = property9.getDifference((org.joda.time.ReadableInstant) dateTime52);
        java.lang.String str54 = property9.getAsString();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53314 + "'", int3 == 53314);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray5);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 14 + "'", int7 == 14);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "");
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(dateTimeZone19);
// flaky:         org.junit.Assert.assertTrue("'" + int21 + "' != '" + 53314 + "'", int21 == 53314);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2022 + "'", int23 == 2022);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "53717007" + "'", str26, "53717007");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(dateTimeZone32);
// flaky:         org.junit.Assert.assertTrue("'" + int34 + "' != '" + 53314 + "'", int34 == 53314);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2022 + "'", int36 == 2022);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "de");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "de");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "de");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 8 + "'", int42 == 8);
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "8" + "'", str54, "8");
    }

    @Test
    public void test11169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11169");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.yearOfEra();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.year();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.monthOfYear();
        org.joda.time.DurationField durationField5 = iSOChronology0.seconds();
        org.joda.time.DurationField durationField6 = iSOChronology0.years();
        java.util.TimeZone timeZone7 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forTimeZone(timeZone7);
        int int10 = dateTimeZone8.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now(dateTimeZone8);
        org.joda.time.LocalDateTime localDateTime12 = org.joda.time.LocalDateTime.now(dateTimeZone8);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.withMillisOfSecond((int) '4');
        org.joda.time.LocalDateTime localDateTime16 = localDateTime12.plusSeconds((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.plusMonths(8);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = null;
        java.lang.String str20 = localDateTime18.toString(dateTimeFormatter19);
        int[] intArray22 = iSOChronology0.get((org.joda.time.ReadablePartial) localDateTime18, 1644850137571L);
        org.joda.time.DateTimeField dateTimeField23 = iSOChronology0.minuteOfHour();
        int int25 = dateTimeField23.getMinimumValue(2842120L);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone8);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 53314 + "'", int10 == 53314);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "2022-10-21T14:55:18.045" + "'", str20, "2022-10-21T14:55:18.045");
        org.junit.Assert.assertNotNull(intArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[2022, 2, 14, 53390885]");
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
    }

    @Test
    public void test11170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11170");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setExtension('x', "jpn");
        java.util.Locale locale4 = java.util.Locale.GERMAN;
        java.util.Locale locale5 = java.util.Locale.GERMAN;
        java.lang.String str6 = locale4.getDisplayCountry(locale5);
        java.util.Locale locale7 = locale4.stripExtensions();
        java.lang.String str8 = locale4.getDisplayName();
        java.util.Locale.Builder builder9 = builder3.setLocale(locale4);
        java.util.Locale.Builder builder12 = builder9.setUnicodeLocaleKeyword("22", "deu");
        java.util.Locale.Builder builder13 = builder9.clearExtensions();
        java.util.Locale.Builder builder15 = builder13.setVariant("2807744");
        java.util.Locale locale16 = builder15.build();
        java.util.Locale.Builder builder19 = builder15.setExtension('x', "de");
        java.util.Locale.Builder builder21 = builder19.setLanguageTag("Februar");
        java.util.Locale.Builder builder23 = builder19.removeUnicodeLocaleAttribute("53196040");
        java.util.Locale.Builder builder26 = builder23.setExtension('u', "2808608");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder29 = builder26.setUnicodeLocaleKeyword("147585-12-12T14:51:19.587", "");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale keyword key: 147585-12-12T14:51:19.587 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "de");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "de");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "German" + "'", str8, "German");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "de__2807744");
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder26);
    }

    @Test
    public void test11171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11171");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.yearOfEra();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.weekyearOfCentury();
        java.lang.String str4 = iSOChronology0.toString();
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology0.clockhourOfHalfday();
        org.joda.time.DurationField durationField6 = iSOChronology0.eras();
        java.lang.String str7 = iSOChronology0.toString();
        org.joda.time.DateTimeField dateTimeField8 = iSOChronology0.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField9 = iSOChronology0.hourOfDay();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "ISOChronology[+00:00:53.314]" + "'", str4, "ISOChronology[+00:00:53.314]");
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "ISOChronology[+00:00:53.314]" + "'", str7, "ISOChronology[+00:00:53.314]");
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
    }

    @Test
    public void test11172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11172");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        long long5 = dateTimeZone1.convertLocalToUTC((long) (byte) -1, true, (long) (short) -1);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        boolean boolean7 = dateTimeZone1.isFixed();
        long long9 = dateTimeZone1.nextTransition((long) 49997489);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-36000001L) + "'", long5 == (-36000001L));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 49997489L + "'", long9 == 49997489L);
    }

    @Test
    public void test11173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11173");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        int int5 = localDateTime4.getWeekyear();
        org.joda.time.LocalDateTime.Property property6 = localDateTime4.millisOfDay();
        java.util.TimeZone timeZone7 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forTimeZone(timeZone7);
        int int10 = dateTimeZone8.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now(dateTimeZone8);
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.DateTime dateTime13 = localDateTime11.toDateTime(readableInstant12);
        java.util.TimeZone timeZone14 = null;
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forTimeZone(timeZone14);
        int int17 = dateTimeZone15.getOffset(100L);
        org.joda.time.DateTime dateTime18 = localDateTime11.toDateTime(dateTimeZone15);
        int int19 = property6.compareTo((org.joda.time.ReadableInstant) dateTime18);
        java.util.TimeZone timeZone20 = null;
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forTimeZone(timeZone20);
        int int23 = dateTimeZone21.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime24 = org.joda.time.LocalDateTime.now(dateTimeZone21);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray25 = localDateTime24.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.hourOfDay();
        int int27 = localDateTime24.get(dateTimeFieldType26);
        boolean boolean28 = dateTime18.isSupported(dateTimeFieldType26);
        org.joda.time.chrono.ISOChronology iSOChronology29 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField30 = iSOChronology29.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField31 = iSOChronology29.yearOfEra();
        org.joda.time.DurationField durationField32 = iSOChronology29.minutes();
        org.joda.time.DateTimeField dateTimeField33 = iSOChronology29.weekyear();
        org.joda.time.DurationField durationField34 = iSOChronology29.centuries();
        org.joda.time.DurationField durationField35 = iSOChronology29.years();
        org.joda.time.DurationField durationField36 = iSOChronology29.millis();
        org.joda.time.DateTimeField dateTimeField37 = dateTimeFieldType26.getField((org.joda.time.Chronology) iSOChronology29);
        org.joda.time.DateTimeField dateTimeField38 = iSOChronology29.weekyearOfCentury();
        java.util.TimeZone timeZone40 = null;
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forTimeZone(timeZone40);
        int int43 = dateTimeZone41.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime44 = org.joda.time.LocalDateTime.now(dateTimeZone41);
        int int45 = localDateTime44.getWeekyear();
        org.joda.time.LocalDateTime.Property property46 = localDateTime44.millisOfDay();
        java.lang.String str47 = property46.getAsString();
        int int48 = property46.getLeapAmount();
        org.joda.time.LocalDateTime localDateTime50 = property46.addToCopy((int) '4');
        org.joda.time.tz.NameProvider nameProvider51 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.DateTimeZone.setNameProvider(nameProvider51);
        java.util.TimeZone timeZone53 = null;
        org.joda.time.DateTimeZone dateTimeZone54 = org.joda.time.DateTimeZone.forTimeZone(timeZone53);
        int int56 = dateTimeZone54.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime57 = org.joda.time.LocalDateTime.now(dateTimeZone54);
        org.joda.time.ReadableInstant readableInstant58 = null;
        org.joda.time.DateTime dateTime59 = localDateTime57.toDateTime(readableInstant58);
        org.joda.time.Chronology chronology60 = dateTime59.getChronology();
        org.joda.time.DurationField durationField61 = chronology60.hours();
        org.joda.time.DurationField durationField62 = chronology60.months();
        org.joda.time.DateTimeField dateTimeField63 = chronology60.dayOfYear();
        java.util.TimeZone timeZone64 = null;
        org.joda.time.DateTimeZone dateTimeZone65 = org.joda.time.DateTimeZone.forTimeZone(timeZone64);
        int int67 = dateTimeZone65.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime68 = org.joda.time.LocalDateTime.now(dateTimeZone65);
        int[] intArray71 = new int[] { (short) 0, (short) 0 };
        int int72 = dateTimeField63.getMinimumValue((org.joda.time.ReadablePartial) localDateTime68, intArray71);
        java.lang.String str74 = dateTimeField63.getAsShortText((long) 53166088);
        java.util.TimeZone timeZone75 = null;
        org.joda.time.DateTimeZone dateTimeZone76 = org.joda.time.DateTimeZone.forTimeZone(timeZone75);
        int int78 = dateTimeZone76.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime79 = org.joda.time.LocalDateTime.now(dateTimeZone76);
        int int80 = localDateTime79.getWeekyear();
        org.joda.time.DurationFieldType durationFieldType81 = org.joda.time.DurationFieldType.days();
        org.joda.time.LocalDateTime localDateTime83 = localDateTime79.withFieldAdded(durationFieldType81, 53166088);
        java.util.Locale locale84 = java.util.Locale.ROOT;
        java.lang.String str85 = dateTimeField63.getAsShortText((org.joda.time.ReadablePartial) localDateTime83, locale84);
        java.lang.String str88 = nameProvider51.getShortName(locale84, "53169175", "+00:00");
        int int89 = property46.getMaximumShortTextLength(locale84);
        java.util.Set<java.lang.String> strSet90 = locale84.getUnicodeLocaleAttributes();
        java.util.Set<java.lang.Character> charSet91 = locale84.getExtensionKeys();
        boolean boolean92 = locale84.hasExtensions();
        java.lang.String str93 = dateTimeField38.getAsText((-1546304806975L), locale84);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 36000000 + "'", int3 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2022 + "'", int5 == 2022);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 36000000 + "'", int10 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 36000000 + "'", int17 == 36000000);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 36000000 + "'", int23 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray25);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
// flaky:         org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(iSOChronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 36000000 + "'", int43 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2022 + "'", int45 == 2022);
        org.junit.Assert.assertNotNull(property46);
// flaky:         org.junit.Assert.assertEquals("'" + str47 + "' != '" + "3263832" + "'", str47, "3263832");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(nameProvider51);
        org.junit.Assert.assertNotNull(dateTimeZone54);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 36000000 + "'", int56 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(durationField61);
        org.junit.Assert.assertNotNull(durationField62);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertNotNull(dateTimeZone65);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 36000000 + "'", int67 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime68);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[0, 0]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "2" + "'", str74, "2");
        org.junit.Assert.assertNotNull(dateTimeZone76);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 36000000 + "'", int78 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 2022 + "'", int80 == 2022);
        org.junit.Assert.assertNotNull(durationFieldType81);
        org.junit.Assert.assertNotNull(localDateTime83);
        org.junit.Assert.assertNotNull(locale84);
        org.junit.Assert.assertEquals(locale84.toString(), "");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "347" + "'", str85, "347");
        org.junit.Assert.assertNull(str88);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 8 + "'", int89 == 8);
        org.junit.Assert.assertNotNull(strSet90);
        org.junit.Assert.assertNotNull(charSet91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "21" + "'", str93, "21");
    }

    @Test
    public void test11174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11174");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.DateTime dateTime6 = localDateTime4.toDateTime(readableInstant5);
        java.util.TimeZone timeZone7 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forTimeZone(timeZone7);
        int int10 = dateTimeZone8.getOffset(100L);
        org.joda.time.DateTime dateTime11 = localDateTime4.toDateTime(dateTimeZone8);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime4.plusMinutes((-1));
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.hourOfDay();
        int int15 = property14.getMinimumValue();
        java.util.TimeZone timeZone16 = null;
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forTimeZone(timeZone16);
        int int19 = dateTimeZone17.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime20 = org.joda.time.LocalDateTime.now(dateTimeZone17);
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.DateTime dateTime22 = localDateTime20.toDateTime(readableInstant21);
        java.util.TimeZone timeZone23 = null;
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forTimeZone(timeZone23);
        int int26 = dateTimeZone24.getOffset(100L);
        org.joda.time.DateTime dateTime27 = localDateTime20.toDateTime(dateTimeZone24);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime20.plusMinutes((-1));
        int int30 = property14.compareTo((org.joda.time.ReadablePartial) localDateTime29);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime29.minusMonths((int) 'u');
        org.joda.time.LocalDateTime.Property property33 = localDateTime29.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime35 = localDateTime29.plusYears(27414167);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 36000000 + "'", int3 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 36000000 + "'", int10 == 36000000);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 36000000 + "'", int19 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 36000000 + "'", int26 == 36000000);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(localDateTime35);
    }

    @Test
    public void test11175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11175");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        java.util.TimeZone timeZone1 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        int int4 = dateTimeZone2.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime5 = org.joda.time.LocalDateTime.now(dateTimeZone2);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray6 = localDateTime5.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.hourOfDay();
        int int8 = localDateTime5.get(dateTimeFieldType7);
        org.joda.time.LocalDateTime.Property property9 = localDateTime5.dayOfWeek();
        boolean boolean10 = localDateTime0.isEqual((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime5.withSecondOfMinute(52);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.minusWeeks(49859549);
        org.joda.time.LocalDateTime.Property property15 = localDateTime12.dayOfMonth();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 36000000 + "'", int4 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(property15);
    }

    @Test
    public void test11176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11176");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        int int5 = localDateTime4.getWeekyear();
        org.joda.time.LocalDateTime.Property property6 = localDateTime4.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime4.minusMillis(2022);
        org.joda.time.LocalDateTime.Property property9 = localDateTime4.weekOfWeekyear();
        boolean boolean10 = property9.isLeap();
        org.joda.time.LocalDateTime localDateTime11 = property9.roundHalfFloorCopy();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 36000000 + "'", int3 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2022 + "'", int5 == 2022);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(localDateTime11);
    }

    @Test
    public void test11177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11177");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.minuteOfHour();
        org.joda.time.Chronology chronology4 = iSOChronology0.withUTC();
        org.joda.time.DurationField durationField5 = iSOChronology0.eras();
        org.joda.time.DateTimeField dateTimeField6 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField7 = iSOChronology0.weekOfWeekyear();
        java.lang.String str8 = iSOChronology0.toString();
        org.joda.time.DateTimeField dateTimeField9 = iSOChronology0.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology0.secondOfMinute();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "ISOChronology[+10:00]" + "'", str8, "ISOChronology[+10:00]");
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
    }

    @Test
    public void test11178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11178");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.hourOfHalfday();
        org.joda.time.DurationField durationField2 = iSOChronology0.hours();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.secondOfDay();
        org.joda.time.DurationField durationField4 = iSOChronology0.centuries();
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology0.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField6 = iSOChronology0.centuryOfEra();
        org.joda.time.DurationField durationField7 = iSOChronology0.hours();
        org.joda.time.DateTimeField dateTimeField8 = iSOChronology0.monthOfYear();
        org.joda.time.DateTimeField dateTimeField9 = iSOChronology0.weekyear();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
    }

    @Test
    public void test11179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11179");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.hourOfHalfday();
        long long7 = iSOChronology0.getDateTimeMillis((-1), 8, 3, 365);
        org.joda.time.DurationField durationField8 = iSOChronology0.seconds();
        long long12 = iSOChronology0.add(1645454774909L, (long) 53178951, 53166088);
        org.joda.time.DateTimeField dateTimeField13 = iSOChronology0.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology0.dayOfYear();
        org.joda.time.DurationField durationField15 = iSOChronology0.millis();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology0.era();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology0.clockhourOfDay();
        org.joda.time.DurationField durationField18 = iSOChronology0.minutes();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-62180301599635L) + "'", long7 == (-62180301599635L));
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 2828962243388597L + "'", long12 == 2828962243388597L);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
    }

    @Test
    public void test11180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11180");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.centuryOfEra();
        java.lang.String str3 = iSOChronology0.toString();
        org.joda.time.DateTimeZone dateTimeZone4 = iSOChronology0.getZone();
        org.joda.time.DurationField durationField5 = iSOChronology0.days();
        org.joda.time.DateTimeField dateTimeField6 = iSOChronology0.millisOfDay();
        org.joda.time.DateTimeField dateTimeField7 = iSOChronology0.secondOfMinute();
        org.joda.time.DurationField durationField8 = iSOChronology0.months();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "ISOChronology[+10:00]" + "'", str3, "ISOChronology[+10:00]");
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
    }

    @Test
    public void test11181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11181");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.centuryOfEra();
        org.joda.time.DurationField durationField3 = iSOChronology0.seconds();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.monthOfYear();
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology0.millisOfDay();
        org.joda.time.chrono.ISOChronology iSOChronology6 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField7 = iSOChronology6.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField8 = iSOChronology6.yearOfEra();
        org.joda.time.DurationField durationField9 = iSOChronology6.minutes();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology6.weekyear();
        org.joda.time.DurationField durationField11 = iSOChronology6.centuries();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology6.centuryOfEra();
        org.joda.time.DurationField durationField13 = iSOChronology6.minutes();
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology6.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology6.clockhourOfHalfday();
        boolean boolean16 = iSOChronology0.equals((java.lang.Object) iSOChronology6);
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology0.millisOfSecond();
        org.joda.time.DurationField durationField18 = iSOChronology0.seconds();
        int int21 = durationField18.getDifference(5818L, 1645455056388L);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(iSOChronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1645455050) + "'", int21 == (-1645455050));
    }

    @Test
    public void test11182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11182");
        org.joda.time.chrono.ISOChronology iSOChronology1 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology1.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology1.yearOfEra();
        org.joda.time.DurationField durationField4 = iSOChronology1.minutes();
        org.joda.time.DurationField durationField5 = iSOChronology1.months();
        org.joda.time.DurationField durationField6 = iSOChronology1.weekyears();
        org.joda.time.DateTimeField dateTimeField7 = iSOChronology1.hourOfDay();
        org.joda.time.DurationField durationField8 = iSOChronology1.minutes();
        org.joda.time.DateTimeField dateTimeField9 = iSOChronology1.secondOfDay();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime(1677759687100800000L, (org.joda.time.Chronology) iSOChronology1);
        org.joda.time.Chronology chronology11 = iSOChronology1.withUTC();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology1.hourOfDay();
        org.joda.time.DateTimeField dateTimeField13 = iSOChronology1.millisOfDay();
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        long long17 = iSOChronology1.add(readablePeriod14, 1644850203119L, 49901);
        org.joda.time.DurationField durationField18 = iSOChronology1.centuries();
        org.joda.time.DurationField durationField19 = iSOChronology1.millis();
        org.junit.Assert.assertNotNull(iSOChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1644850203119L + "'", long17 == 1644850203119L);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(durationField19);
    }

    @Test
    public void test11183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11183");
        java.util.Locale locale1 = new java.util.Locale("2012-11-17T18:17:06.052");
        java.lang.Object obj2 = locale1.clone();
        org.junit.Assert.assertEquals(locale1.toString(), "2012-11-17t18:17:06.052");
        org.junit.Assert.assertNotNull(obj2);
        org.junit.Assert.assertEquals(obj2.toString(), "2012-11-17t18:17:06.052");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj2), "2012-11-17t18:17:06.052");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj2), "2012-11-17t18:17:06.052");
    }

    @Test
    public void test11184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11184");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        int int5 = localDateTime4.getWeekyear();
        org.joda.time.LocalDateTime.Property property6 = localDateTime4.millisOfDay();
        java.util.Locale locale7 = java.util.Locale.GERMAN;
        java.util.Locale locale8 = java.util.Locale.GERMAN;
        java.lang.String str9 = locale7.getDisplayCountry(locale8);
        java.util.Locale locale10 = locale7.stripExtensions();
        int int11 = property6.getMaximumShortTextLength(locale7);
        org.joda.time.Interval interval12 = property6.toInterval();
        org.joda.time.LocalDateTime localDateTime14 = property6.setCopy(1);
        org.joda.time.LocalDateTime.Property property15 = localDateTime14.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime14.withMillisOfDay((int) (byte) 10);
        int int18 = localDateTime14.getDayOfMonth();
        org.joda.time.LocalDateTime.Property property19 = localDateTime14.dayOfMonth();
        java.util.TimeZone timeZone20 = null;
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forTimeZone(timeZone20);
        int int23 = dateTimeZone21.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime24 = org.joda.time.LocalDateTime.now(dateTimeZone21);
        int int25 = localDateTime24.getWeekyear();
        org.joda.time.LocalDateTime.Property property26 = localDateTime24.minuteOfHour();
        org.joda.time.LocalDateTime.Property property27 = localDateTime24.dayOfYear();
        java.util.TimeZone timeZone28 = null;
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forTimeZone(timeZone28);
        int int31 = dateTimeZone29.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime32 = org.joda.time.LocalDateTime.now(dateTimeZone29);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray33 = localDateTime32.getFieldTypes();
        int int34 = property27.compareTo((org.joda.time.ReadablePartial) localDateTime32);
        int int35 = localDateTime32.getCenturyOfEra();
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        org.joda.time.LocalDateTime localDateTime37 = localDateTime32.plus(readablePeriod36);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime37.withYear(2835142);
        int int40 = localDateTime39.getDayOfWeek();
        int int41 = localDateTime14.compareTo((org.joda.time.ReadablePartial) localDateTime39);
        int int42 = localDateTime39.getYearOfEra();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 36000000 + "'", int3 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2022 + "'", int5 == 2022);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "de");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "de");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "de");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 8 + "'", int11 == 8);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 22 + "'", int18 == 22);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 36000000 + "'", int23 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2022 + "'", int25 == 2022);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 36000000 + "'", int31 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 20 + "'", int35 == 20);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 7 + "'", int40 == 7);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2835142 + "'", int42 == 2835142);
    }

    @Test
    public void test11185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11185");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("ja");
        org.joda.time.chrono.ISOChronology iSOChronology2 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology2.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology2.yearOfEra();
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology2.year();
        org.joda.time.DateTimeField dateTimeField6 = iSOChronology2.monthOfYear();
        org.joda.time.DurationField durationField7 = iSOChronology2.seconds();
        org.joda.time.DateTimeField dateTimeField8 = iSOChronology2.hourOfDay();
        org.joda.time.LocalDateTime localDateTime9 = org.joda.time.LocalDateTime.now();
        java.util.TimeZone timeZone10 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        int int13 = dateTimeZone11.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime14 = org.joda.time.LocalDateTime.now(dateTimeZone11);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray15 = localDateTime14.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.hourOfDay();
        int int17 = localDateTime14.get(dateTimeFieldType16);
        org.joda.time.LocalDateTime.Property property18 = localDateTime14.dayOfWeek();
        boolean boolean19 = localDateTime9.isEqual((org.joda.time.ReadablePartial) localDateTime14);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.LocalDateTime localDateTime22 = localDateTime9.withPeriodAdded(readablePeriod20, (int) (short) -1);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.withYear(53189779);
        java.util.Locale locale26 = java.util.Locale.JAPANESE;
        java.lang.String str27 = locale26.getDisplayLanguage();
        java.util.Locale locale28 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet29 = locale28.getExtensionKeys();
        java.lang.String str30 = locale26.getDisplayLanguage(locale28);
        java.util.Set<java.lang.String> strSet31 = locale26.getUnicodeLocaleAttributes();
        java.lang.String str32 = dateTimeField8.getAsShortText((org.joda.time.ReadablePartial) localDateTime22, 16, locale26);
        java.util.Set<java.lang.Character> charSet33 = locale26.getExtensionKeys();
        java.util.Set<java.lang.Character> charSet34 = locale26.getExtensionKeys();
        java.lang.String str35 = locale1.getDisplayVariant(locale26);
        java.lang.String str36 = locale26.getVariant();
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ja");
        org.junit.Assert.assertNotNull(iSOChronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 36000000 + "'", int13 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray15);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
// flaky:         org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Japanese" + "'", str27, "Japanese");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "\uc77c\ubcf8\uc5b4" + "'", str30, "\uc77c\ubcf8\uc5b4");
        org.junit.Assert.assertNotNull(strSet31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "16" + "'", str32, "16");
        org.junit.Assert.assertNotNull(charSet33);
        org.junit.Assert.assertNotNull(charSet34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
    }

    @Test
    public void test11186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11186");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.parse("3157263", dateTimeFormatter1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test11187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11187");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setExtension('x', "jpn");
        java.util.Locale locale4 = java.util.Locale.GERMAN;
        java.util.Locale locale5 = java.util.Locale.GERMAN;
        java.lang.String str6 = locale4.getDisplayCountry(locale5);
        java.util.Locale locale7 = locale4.stripExtensions();
        java.lang.String str8 = locale4.getDisplayName();
        java.util.Locale.Builder builder9 = builder3.setLocale(locale4);
        java.util.Locale.Builder builder12 = builder9.setUnicodeLocaleKeyword("22", "deu");
        java.util.Locale.Builder builder13 = builder9.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder15 = builder13.setLanguage("2847");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed language: 2847 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "de");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "de");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "German" + "'", str8, "German");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
    }

    @Test
    public void test11188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11188");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.weekOfWeekyear();
        java.util.TimeZone timeZone2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone2);
        java.lang.String str5 = dateTimeZone3.getName(31556995199999L);
        org.joda.time.Chronology chronology6 = iSOChronology0.withZone(dateTimeZone3);
        org.joda.time.DateTimeField dateTimeField7 = iSOChronology0.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField8 = iSOChronology0.dayOfWeek();
        java.util.TimeZone timeZone10 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        int int13 = dateTimeZone11.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime14 = org.joda.time.LocalDateTime.now(dateTimeZone11);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = localDateTime14.toDateTime(readableInstant15);
        org.joda.time.Chronology chronology17 = dateTime16.getChronology();
        org.joda.time.DurationField durationField18 = chronology17.hours();
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime((long) 52, chronology17);
        int int20 = localDateTime19.getSecondOfMinute();
        java.util.TimeZone timeZone21 = null;
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forTimeZone(timeZone21);
        int int24 = dateTimeZone22.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime25 = org.joda.time.LocalDateTime.now(dateTimeZone22);
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.DateTime dateTime27 = localDateTime25.toDateTime(readableInstant26);
        java.util.TimeZone timeZone28 = null;
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forTimeZone(timeZone28);
        int int31 = dateTimeZone29.getOffset(100L);
        org.joda.time.DateTime dateTime32 = localDateTime25.toDateTime(dateTimeZone29);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime25.withYear(52);
        org.joda.time.Chronology chronology35 = localDateTime34.getChronology();
        org.joda.time.LocalDateTime localDateTime37 = localDateTime34.withYear((int) (short) 1);
        boolean boolean38 = localDateTime19.equals((java.lang.Object) localDateTime34);
        int[] intArray40 = iSOChronology0.get((org.joda.time.ReadablePartial) localDateTime34, 1645454801920L);
        org.joda.time.DateTimeField dateTimeField41 = iSOChronology0.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField42 = iSOChronology0.minuteOfHour();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+10:00" + "'", str5, "+10:00");
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 36000000 + "'", int13 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 36000000 + "'", int24 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 36000000 + "'", int31 == 36000000);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[2022, 2, 22, 2801920]");
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
    }

    @Test
    public void test11189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11189");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.hourOfHalfday();
        java.lang.String str2 = iSOChronology0.toString();
        org.joda.time.DurationField durationField3 = iSOChronology0.centuries();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.halfdayOfDay();
        long long8 = iSOChronology0.add((long) 53166088, (long) 22, 36);
        org.joda.time.DurationField durationField9 = iSOChronology0.hours();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology0.halfdayOfDay();
        java.util.Locale locale15 = new java.util.Locale("DateTimeField[weekOfWeekyear]", "China", "Property[millisOfDay]");
        java.lang.String str16 = locale15.getDisplayCountry();
        java.lang.String str17 = dateTimeField10.getAsShortText(0L, locale15);
        boolean boolean18 = locale15.hasExtensions();
        java.util.Locale locale19 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str20 = locale15.getDisplayName(locale19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ISOChronology[+10:00]" + "'", str2, "ISOChronology[+10:00]");
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 53166880L + "'", long8 == 53166880L);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertEquals(locale15.toString(), "datetimefield[weekofweekyear]_CHINA_Property[millisOfDay]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "CHINA" + "'", str16, "CHINA");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "AM" + "'", str17, "AM");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test11190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11190");
        org.joda.time.Chronology chronology7 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(3182, 100, 2850, 53520701, 188, 49817475, 2841646, chronology7);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 53520701 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test11191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11191");
        org.joda.time.tz.Provider provider0 = org.joda.time.DateTimeZone.getProvider();
        java.util.Set<java.lang.String> strSet1 = provider0.getAvailableIDs();
        org.joda.time.DateTimeZone dateTimeZone3 = provider0.getZone("ISOChronology[UTC]");
        org.joda.time.DateTimeZone dateTimeZone5 = provider0.getZone("DateTimeField[dayOfMonth]");
        org.joda.time.DateTimeZone dateTimeZone7 = provider0.getZone("weekyears");
        org.joda.time.DateTimeZone dateTimeZone9 = provider0.getZone("");
        java.util.Set<java.lang.String> strSet10 = provider0.getAvailableIDs();
        org.joda.time.DateTimeZone dateTimeZone12 = provider0.getZone("Januar");
        java.util.Set<java.lang.String> strSet13 = provider0.getAvailableIDs();
        org.joda.time.DateTimeZone dateTimeZone15 = provider0.getZone("49917313");
        org.junit.Assert.assertNotNull(provider0);
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNull(dateTimeZone3);
        org.junit.Assert.assertNull(dateTimeZone5);
        org.junit.Assert.assertNull(dateTimeZone7);
        org.junit.Assert.assertNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(strSet10);
        org.junit.Assert.assertNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertNull(dateTimeZone15);
    }

    @Test
    public void test11192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11192");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffset(100L);
        java.util.TimeZone timeZone4 = dateTimeZone1.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forTimeZone(timeZone4);
        timeZone4.setRawOffset((int) 'a');
        java.util.TimeZone timeZone8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        int int11 = dateTimeZone9.getOffset(100L);
        java.util.TimeZone timeZone12 = dateTimeZone9.toTimeZone();
        int int14 = dateTimeZone9.getStandardOffset((long) ' ');
        boolean boolean16 = dateTimeZone9.isStandardOffset((long) '4');
        boolean boolean17 = dateTimeZone9.isFixed();
        java.util.TimeZone timeZone18 = dateTimeZone9.toTimeZone();
        java.util.TimeZone timeZone19 = null;
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forTimeZone(timeZone19);
        int int22 = dateTimeZone20.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime23 = org.joda.time.LocalDateTime.now(dateTimeZone20);
        int int24 = localDateTime23.getWeekyear();
        org.joda.time.LocalDateTime.Property property25 = localDateTime23.minuteOfHour();
        int int26 = localDateTime23.getHourOfDay();
        org.joda.time.LocalDateTime.Property property27 = localDateTime23.dayOfWeek();
        boolean boolean28 = dateTimeZone9.isLocalDateTimeGap(localDateTime23);
        java.util.TimeZone timeZone29 = dateTimeZone9.toTimeZone();
        boolean boolean30 = timeZone4.hasSameRules(timeZone29);
        java.time.ZoneId zoneId31 = timeZone4.toZoneId();
        java.util.TimeZone timeZone32 = java.util.TimeZone.getTimeZone(zoneId31);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 36000000 + "'", int3 == 36000000);
        org.junit.Assert.assertNotNull(timeZone4);
        org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 36000000 + "'", int11 == 36000000);
        org.junit.Assert.assertNotNull(timeZone12);
        org.junit.Assert.assertEquals(timeZone12.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 36000000 + "'", int14 == 36000000);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(timeZone18);
        org.junit.Assert.assertEquals(timeZone18.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 36000000 + "'", int22 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2022 + "'", int24 == 2022);
        org.junit.Assert.assertNotNull(property25);
// flaky:         org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(timeZone29);
        org.junit.Assert.assertEquals(timeZone29.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(zoneId31);
        org.junit.Assert.assertNotNull(timeZone32);
        org.junit.Assert.assertEquals(timeZone32.getDisplayName(), "GMT+10:00");
    }

    @Test
    public void test11193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11193");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.DateTime dateTime6 = localDateTime4.toDateTime(readableInstant5);
        org.joda.time.Chronology chronology7 = dateTime6.getChronology();
        org.joda.time.DurationField durationField8 = chronology7.hours();
        org.joda.time.DurationField durationField9 = chronology7.months();
        org.joda.time.DateTimeField dateTimeField10 = chronology7.dayOfYear();
        java.util.TimeZone timeZone11 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        int int14 = dateTimeZone12.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime15 = org.joda.time.LocalDateTime.now(dateTimeZone12);
        int[] intArray18 = new int[] { (short) 0, (short) 0 };
        int int19 = dateTimeField10.getMinimumValue((org.joda.time.ReadablePartial) localDateTime15, intArray18);
        int int21 = dateTimeField10.getMinimumValue((long) 100);
        java.util.TimeZone timeZone22 = null;
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        int int25 = dateTimeZone23.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime26 = org.joda.time.LocalDateTime.now(dateTimeZone23);
        int int27 = localDateTime26.getWeekyear();
        org.joda.time.LocalDateTime.Property property28 = localDateTime26.minuteOfHour();
        int int29 = dateTimeField10.getMaximumValue((org.joda.time.ReadablePartial) localDateTime26);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime26.withCenturyOfEra(1);
        java.util.TimeZone timeZone32 = null;
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forTimeZone(timeZone32);
        int int35 = dateTimeZone33.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime36 = org.joda.time.LocalDateTime.now(dateTimeZone33);
        org.joda.time.LocalDateTime localDateTime37 = org.joda.time.LocalDateTime.now(dateTimeZone33);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime37.minusMinutes((int) ' ');
        int int40 = localDateTime37.size();
        org.joda.time.LocalDateTime localDateTime41 = localDateTime26.withFields((org.joda.time.ReadablePartial) localDateTime37);
        int int42 = localDateTime37.getWeekOfWeekyear();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 36000000 + "'", int3 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 36000000 + "'", int14 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[0, 0]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 36000000 + "'", int25 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2022 + "'", int27 == 2022);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 365 + "'", int29 == 365);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 36000000 + "'", int35 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 4 + "'", int40 == 4);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 8 + "'", int42 == 8);
    }

    @Test
    public void test11194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11194");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffset(100L);
        java.util.TimeZone timeZone4 = dateTimeZone1.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forTimeZone(timeZone4);
        java.util.TimeZone.setDefault(timeZone4);
        int int8 = timeZone4.getOffset(0L);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone4);
        org.joda.time.chrono.ISOChronology iSOChronology10 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone9);
        java.lang.String str11 = dateTimeZone9.getID();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 36000000 + "'", int3 == 36000000);
        org.junit.Assert.assertNotNull(timeZone4);
        org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 36000000 + "'", int8 == 36000000);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(iSOChronology10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
    }

    @Test
    public void test11195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11195");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime5 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.plusSeconds((int) (short) 10);
        int int8 = localDateTime5.size();
        org.joda.time.LocalDateTime.Property property9 = localDateTime5.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime11 = property9.setCopy((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.withMillisOfDay(53166088);
        org.joda.time.chrono.ISOChronology iSOChronology14 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology14.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology14.centuryOfEra();
        org.joda.time.DurationField durationField17 = iSOChronology14.centuries();
        org.joda.time.DurationField durationField18 = iSOChronology14.hours();
        java.util.TimeZone timeZone19 = null;
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forTimeZone(timeZone19);
        int int22 = dateTimeZone20.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime23 = org.joda.time.LocalDateTime.now(dateTimeZone20);
        int int24 = localDateTime23.getDayOfYear();
        org.joda.time.LocalDateTime localDateTime26 = localDateTime23.withYearOfEra(2022);
        long long28 = iSOChronology14.set((org.joda.time.ReadablePartial) localDateTime26, (long) 0);
        org.joda.time.DateTime dateTime29 = localDateTime26.toDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        org.joda.time.DurationFieldType durationFieldType31 = dateTimeFieldType30.getDurationType();
        boolean boolean32 = dateTime29.isSupported(dateTimeFieldType30);
        int int33 = localDateTime13.get(dateTimeFieldType30);
        java.util.TimeZone timeZone34 = null;
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forTimeZone(timeZone34);
        int int37 = dateTimeZone35.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime38 = org.joda.time.LocalDateTime.now(dateTimeZone35);
        int int39 = localDateTime38.getWeekyear();
        org.joda.time.LocalDateTime localDateTime41 = localDateTime38.withSecondOfMinute((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime43 = localDateTime41.minusMillis((-292275054));
        org.joda.time.chrono.ISOChronology iSOChronology44 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField45 = iSOChronology44.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField46 = iSOChronology44.centuryOfEra();
        org.joda.time.DurationField durationField47 = iSOChronology44.centuries();
        org.joda.time.DurationField durationField48 = iSOChronology44.hours();
        java.util.TimeZone timeZone49 = null;
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.forTimeZone(timeZone49);
        int int52 = dateTimeZone50.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime53 = org.joda.time.LocalDateTime.now(dateTimeZone50);
        int int54 = localDateTime53.getDayOfYear();
        org.joda.time.LocalDateTime localDateTime56 = localDateTime53.withYearOfEra(2022);
        long long58 = iSOChronology44.set((org.joda.time.ReadablePartial) localDateTime56, (long) 0);
        org.joda.time.DateTimeField dateTimeField59 = iSOChronology44.monthOfYear();
        org.joda.time.DateTimeField dateTimeField60 = iSOChronology44.clockhourOfDay();
        org.joda.time.Chronology chronology61 = iSOChronology44.withUTC();
        org.joda.time.DateTimeZone dateTimeZone62 = iSOChronology44.getZone();
        org.joda.time.DateTime dateTime63 = localDateTime41.toDateTime(dateTimeZone62);
        org.joda.time.DateTime dateTime64 = localDateTime13.toDateTime((org.joda.time.ReadableInstant) dateTime63);
        org.joda.time.DateTimeZone dateTimeZone65 = dateTime63.getZone();
        long long68 = dateTimeZone65.adjustOffset((long) 2965597, false);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 36000000 + "'", int3 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 4 + "'", int8 == 4);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(iSOChronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 36000000 + "'", int22 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 53 + "'", int24 == 53);
        org.junit.Assert.assertNotNull(localDateTime26);
// flaky:         org.junit.Assert.assertTrue("'" + long28 + "' != '" + 1645455264489L + "'", long28 == 1645455264489L);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertNotNull(durationFieldType31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2 + "'", int33 == 2);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 36000000 + "'", int37 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2022 + "'", int39 == 2022);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(iSOChronology44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(durationField47);
        org.junit.Assert.assertNotNull(durationField48);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 36000000 + "'", int52 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 53 + "'", int54 == 53);
        org.junit.Assert.assertNotNull(localDateTime56);
// flaky:         org.junit.Assert.assertTrue("'" + long58 + "' != '" + 1645455264489L + "'", long58 == 1645455264489L);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(dateTimeZone62);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(dateTimeZone65);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 2965597L + "'", long68 == 2965597L);
    }

    @Test
    public void test11196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11196");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.weekOfWeekyear();
        java.util.TimeZone timeZone2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone2);
        java.lang.String str5 = dateTimeZone3.getName(31556995199999L);
        org.joda.time.Chronology chronology6 = iSOChronology0.withZone(dateTimeZone3);
        org.joda.time.DateTimeField dateTimeField7 = iSOChronology0.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField8 = iSOChronology0.dayOfWeek();
        java.util.TimeZone timeZone10 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        int int13 = dateTimeZone11.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime14 = org.joda.time.LocalDateTime.now(dateTimeZone11);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = localDateTime14.toDateTime(readableInstant15);
        org.joda.time.Chronology chronology17 = dateTime16.getChronology();
        org.joda.time.DurationField durationField18 = chronology17.hours();
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime((long) 52, chronology17);
        int int20 = localDateTime19.getSecondOfMinute();
        java.util.TimeZone timeZone21 = null;
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forTimeZone(timeZone21);
        int int24 = dateTimeZone22.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime25 = org.joda.time.LocalDateTime.now(dateTimeZone22);
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.DateTime dateTime27 = localDateTime25.toDateTime(readableInstant26);
        java.util.TimeZone timeZone28 = null;
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forTimeZone(timeZone28);
        int int31 = dateTimeZone29.getOffset(100L);
        org.joda.time.DateTime dateTime32 = localDateTime25.toDateTime(dateTimeZone29);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime25.withYear(52);
        org.joda.time.Chronology chronology35 = localDateTime34.getChronology();
        org.joda.time.LocalDateTime localDateTime37 = localDateTime34.withYear((int) (short) 1);
        boolean boolean38 = localDateTime19.equals((java.lang.Object) localDateTime34);
        int[] intArray40 = iSOChronology0.get((org.joda.time.ReadablePartial) localDateTime34, 1645454801920L);
        org.joda.time.Chronology chronology41 = iSOChronology0.withUTC();
        org.joda.time.DateTimeField dateTimeField42 = iSOChronology0.hourOfHalfday();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+10:00" + "'", str5, "+10:00");
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 36000000 + "'", int13 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 36000000 + "'", int24 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 36000000 + "'", int31 == 36000000);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[2022, 2, 22, 2801920]");
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTimeField42);
    }

    @Test
    public void test11197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11197");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.DateTime dateTime6 = localDateTime4.toDateTime(readableInstant5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.Chronology chronology8 = null;
        boolean boolean9 = dateTimeFieldType7.isSupported(chronology8);
        org.joda.time.LocalDateTime.Property property10 = localDateTime4.property(dateTimeFieldType7);
        org.joda.time.LocalDateTime localDateTime11 = property10.withMinimumValue();
        org.joda.time.LocalDateTime localDateTime12 = property10.withMinimumValue();
        java.lang.String str13 = property10.getName();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 36000000 + "'", int3 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "dayOfYear" + "'", str13, "dayOfYear");
    }

    @Test
    public void test11198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11198");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        long long6 = iSOChronology0.add(readablePeriod3, (long) 100, 11);
        org.joda.time.DateTimeField dateTimeField7 = iSOChronology0.hourOfDay();
        org.joda.time.DurationField durationField8 = iSOChronology0.days();
        org.joda.time.DateTimeField dateTimeField9 = iSOChronology0.yearOfCentury();
        // The following exception was thrown during execution in test generation
        try {
            long long12 = dateTimeField9.set((long) 53467, 485);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 485 for yearOfCentury must be in the range [0,99]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 100L + "'", long6 == 100L);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
    }

    @Test
    public void test11199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11199");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.DateTime dateTime6 = localDateTime4.toDateTime(readableInstant5);
        java.util.TimeZone timeZone7 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forTimeZone(timeZone7);
        int int10 = dateTimeZone8.getOffset(100L);
        org.joda.time.DateTime dateTime11 = localDateTime4.toDateTime(dateTimeZone8);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime4.plusMinutes((-1));
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.hourOfDay();
        org.joda.time.LocalDateTime localDateTime15 = property14.roundCeilingCopy();
        java.util.TimeZone timeZone16 = null;
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forTimeZone(timeZone16);
        int int19 = dateTimeZone17.getOffset(100L);
        java.util.TimeZone timeZone20 = dateTimeZone17.toTimeZone();
        int int22 = dateTimeZone17.getStandardOffset((long) ' ');
        boolean boolean24 = dateTimeZone17.isStandardOffset((long) '4');
        boolean boolean25 = dateTimeZone17.isFixed();
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime15, dateTimeZone17);
        org.joda.time.ReadableDuration readableDuration27 = null;
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.plus(readableDuration27);
        org.joda.time.LocalDateTime.Property property29 = localDateTime26.hourOfDay();
        // The following exception was thrown during execution in test generation
        try {
            int int31 = localDateTime26.getValue(50010457);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 50010457");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 36000000 + "'", int3 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 36000000 + "'", int10 == 36000000);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 36000000 + "'", int19 == 36000000);
        org.junit.Assert.assertNotNull(timeZone20);
        org.junit.Assert.assertEquals(timeZone20.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 36000000 + "'", int22 == 36000000);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(property29);
    }

    @Test
    public void test11200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11200");
        org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.parse("49992445");
        org.junit.Assert.assertNotNull(localDateTime1);
    }

    @Test
    public void test11201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11201");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.weekOfWeekyear();
        java.util.TimeZone timeZone2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone2);
        java.lang.String str5 = dateTimeZone3.getName(31556995199999L);
        org.joda.time.Chronology chronology6 = iSOChronology0.withZone(dateTimeZone3);
        org.joda.time.DateTimeField dateTimeField7 = iSOChronology0.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField8 = iSOChronology0.monthOfYear();
        org.joda.time.chrono.ISOChronology iSOChronology9 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology9.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology9.centuryOfEra();
        org.joda.time.DurationField durationField12 = iSOChronology9.seconds();
        org.joda.time.DateTimeField dateTimeField13 = iSOChronology9.clockhourOfDay();
        org.joda.time.Chronology chronology14 = iSOChronology9.withUTC();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology9.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology9.centuryOfEra();
        java.util.TimeZone timeZone17 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forTimeZone(timeZone17);
        int int20 = dateTimeZone18.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime21 = org.joda.time.LocalDateTime.now(dateTimeZone18);
        int int22 = localDateTime21.getWeekyear();
        org.joda.time.LocalDateTime.Property property23 = localDateTime21.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime25 = localDateTime21.minusMillis(2022);
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.plus(readablePeriod26);
        int int28 = localDateTime27.getYearOfCentury();
        int int29 = dateTimeField16.getMinimumValue((org.joda.time.ReadablePartial) localDateTime27);
        org.joda.time.LocalDateTime localDateTime30 = org.joda.time.LocalDateTime.now();
        java.util.TimeZone timeZone31 = null;
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forTimeZone(timeZone31);
        int int34 = dateTimeZone32.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime35 = org.joda.time.LocalDateTime.now(dateTimeZone32);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray36 = localDateTime35.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = org.joda.time.DateTimeFieldType.hourOfDay();
        int int38 = localDateTime35.get(dateTimeFieldType37);
        org.joda.time.LocalDateTime.Property property39 = localDateTime35.dayOfWeek();
        boolean boolean40 = localDateTime30.isEqual((org.joda.time.ReadablePartial) localDateTime35);
        org.joda.time.LocalDateTime.Property property41 = localDateTime35.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime42 = property41.roundHalfCeilingCopy();
        java.util.TimeZone timeZone43 = null;
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forTimeZone(timeZone43);
        int int46 = dateTimeZone44.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime47 = org.joda.time.LocalDateTime.now(dateTimeZone44);
        org.joda.time.LocalDateTime localDateTime48 = org.joda.time.LocalDateTime.now(dateTimeZone44);
        org.joda.time.LocalDateTime localDateTime50 = localDateTime48.minusMinutes((int) ' ');
        int int51 = property41.compareTo((org.joda.time.ReadablePartial) localDateTime50);
        java.util.TimeZone timeZone52 = null;
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.forTimeZone(timeZone52);
        int int55 = dateTimeZone53.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime56 = org.joda.time.LocalDateTime.now(dateTimeZone53);
        org.joda.time.LocalDateTime localDateTime57 = org.joda.time.LocalDateTime.now(dateTimeZone53);
        org.joda.time.LocalDateTime localDateTime59 = localDateTime57.plusSeconds((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime61 = localDateTime57.minusWeeks((int) (byte) 10);
        java.util.TimeZone timeZone62 = null;
        org.joda.time.DateTimeZone dateTimeZone63 = org.joda.time.DateTimeZone.forTimeZone(timeZone62);
        int int65 = dateTimeZone63.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime66 = org.joda.time.LocalDateTime.now(dateTimeZone63);
        org.joda.time.LocalDateTime localDateTime67 = org.joda.time.LocalDateTime.now(dateTimeZone63);
        org.joda.time.LocalDateTime localDateTime69 = localDateTime67.plusSeconds((int) (short) 10);
        int int70 = localDateTime67.size();
        boolean boolean71 = localDateTime61.isBefore((org.joda.time.ReadablePartial) localDateTime67);
        org.joda.time.LocalDateTime.Property property72 = localDateTime67.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime73 = localDateTime50.withFields((org.joda.time.ReadablePartial) localDateTime67);
        int[] intArray74 = localDateTime73.getValues();
        iSOChronology0.validate((org.joda.time.ReadablePartial) localDateTime27, intArray74);
        org.joda.time.DurationField durationField76 = iSOChronology0.days();
        org.joda.time.DateTimeField dateTimeField77 = iSOChronology0.secondOfMinute();
        org.joda.time.DurationField durationField78 = iSOChronology0.halfdays();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+10:00" + "'", str5, "+10:00");
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(iSOChronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 36000000 + "'", int20 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2022 + "'", int22 == 2022);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 22 + "'", int28 == 22);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 36000000 + "'", int34 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray36);
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
// flaky:         org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 36000000 + "'", int46 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 36000000 + "'", int55 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertNotNull(dateTimeZone63);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 36000000 + "'", int65 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertNotNull(localDateTime69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 4 + "'", int70 == 4);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(property72);
        org.junit.Assert.assertNotNull(localDateTime73);
        org.junit.Assert.assertNotNull(intArray74);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[2022, 2, 22, 3264738]");
        org.junit.Assert.assertNotNull(durationField76);
        org.junit.Assert.assertNotNull(dateTimeField77);
        org.junit.Assert.assertNotNull(durationField78);
    }

    @Test
    public void test11202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11202");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.yearOfEra();
        org.joda.time.DurationField durationField3 = iSOChronology0.minutes();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.weekyear();
        org.joda.time.DurationField durationField5 = iSOChronology0.centuries();
        org.joda.time.DateTimeField dateTimeField6 = iSOChronology0.centuryOfEra();
        org.joda.time.DurationField durationField7 = iSOChronology0.minutes();
        org.joda.time.DateTimeField dateTimeField8 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField9 = iSOChronology0.centuryOfEra();
        org.joda.time.DurationField durationField10 = iSOChronology0.months();
        org.joda.time.DurationField durationField11 = iSOChronology0.weekyears();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology0.dayOfMonth();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
    }

    @Test
    public void test11203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11203");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        int int5 = localDateTime4.getWeekyear();
        org.joda.time.LocalDateTime.Property property6 = localDateTime4.millisOfDay();
        java.util.Locale locale7 = java.util.Locale.GERMAN;
        java.util.Locale locale8 = java.util.Locale.GERMAN;
        java.lang.String str9 = locale7.getDisplayCountry(locale8);
        java.util.Locale locale10 = locale7.stripExtensions();
        int int11 = property6.getMaximumShortTextLength(locale7);
        int int12 = property6.getMinimumValueOverall();
        org.joda.time.DurationField durationField13 = property6.getRangeDurationField();
        org.joda.time.Interval interval14 = property6.toInterval();
        org.joda.time.LocalDateTime localDateTime15 = property6.withMinimumValue();
        org.joda.time.LocalDateTime.Property property16 = localDateTime15.centuryOfEra();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 36000000 + "'", int3 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2022 + "'", int5 == 2022);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "de");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "de");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "de");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 8 + "'", int11 == 8);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(property16);
    }

    @Test
    public void test11204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11204");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet1 = locale0.getExtensionKeys();
        java.util.Iterator<java.lang.Character> charItor2 = charSet1.iterator();
        java.util.ArrayList[] arrayListArray4 = new java.util.ArrayList[0];
        @SuppressWarnings("unchecked")
        java.util.ArrayList<java.util.Locale.LanguageRange>[] languageRangeListArray5 = (java.util.ArrayList<java.util.Locale.LanguageRange>[]) arrayListArray4;
        java.util.ArrayList<java.util.Locale.LanguageRange>[] languageRangeListArray6 = charSet1.toArray((java.util.ArrayList<java.util.Locale.LanguageRange>[]) arrayListArray4);
        java.util.TimeZone timeZone7 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forTimeZone(timeZone7);
        int int10 = dateTimeZone8.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now(dateTimeZone8);
        int int12 = localDateTime11.getWeekyear();
        org.joda.time.LocalDateTime.Property property13 = localDateTime11.millisOfDay();
        java.util.TimeZone timeZone14 = null;
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forTimeZone(timeZone14);
        int int17 = dateTimeZone15.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime18 = org.joda.time.LocalDateTime.now(dateTimeZone15);
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.DateTime dateTime20 = localDateTime18.toDateTime(readableInstant19);
        java.util.TimeZone timeZone21 = null;
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forTimeZone(timeZone21);
        int int24 = dateTimeZone22.getOffset(100L);
        org.joda.time.DateTime dateTime25 = localDateTime18.toDateTime(dateTimeZone22);
        int int26 = property13.compareTo((org.joda.time.ReadableInstant) dateTime25);
        boolean boolean27 = charSet1.equals((java.lang.Object) dateTime25);
        java.util.Locale locale28 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet29 = locale28.getExtensionKeys();
        java.util.Iterator<java.lang.Character> charItor30 = charSet29.iterator();
        java.util.Locale locale31 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet32 = locale31.getExtensionKeys();
        java.util.Iterator<java.lang.Character> charItor33 = charSet32.iterator();
        boolean boolean34 = charSet29.containsAll((java.util.Collection<java.lang.Character>) charSet32);
        java.util.TimeZone timeZone35 = null;
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forTimeZone(timeZone35);
        int int38 = dateTimeZone36.getOffset(100L);
        java.util.TimeZone timeZone39 = dateTimeZone36.toTimeZone();
        org.joda.time.DateTimeZone[] dateTimeZoneArray40 = new org.joda.time.DateTimeZone[] { dateTimeZone36 };
        org.joda.time.DateTimeZone[] dateTimeZoneArray41 = charSet32.toArray(dateTimeZoneArray40);
        boolean boolean42 = charSet1.removeAll((java.util.Collection<java.lang.Character>) charSet32);
        java.util.Iterator<java.lang.Character> charItor43 = charSet1.iterator();
        java.util.Spliterator<java.lang.Character> charSpliterator44 = charSet1.spliterator();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet1);
        org.junit.Assert.assertNotNull(charItor2);
        org.junit.Assert.assertNotNull(arrayListArray4);
        org.junit.Assert.assertNotNull(languageRangeListArray5);
        org.junit.Assert.assertNotNull(languageRangeListArray6);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 36000000 + "'", int10 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2022 + "'", int12 == 2022);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 36000000 + "'", int17 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 36000000 + "'", int24 == 36000000);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet29);
        org.junit.Assert.assertNotNull(charItor30);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet32);
        org.junit.Assert.assertNotNull(charItor33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 36000000 + "'", int38 == 36000000);
        org.junit.Assert.assertNotNull(timeZone39);
        org.junit.Assert.assertEquals(timeZone39.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertNotNull(dateTimeZoneArray40);
        org.junit.Assert.assertNotNull(dateTimeZoneArray41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(charItor43);
        org.junit.Assert.assertNotNull(charSpliterator44);
    }

    @Test
    public void test11205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11205");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.yearOfEra();
        org.joda.time.DurationField durationField3 = iSOChronology0.minutes();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.weekyear();
        org.joda.time.DurationField durationField5 = iSOChronology0.centuries();
        org.joda.time.DateTimeField dateTimeField6 = iSOChronology0.centuryOfEra();
        org.joda.time.DurationField durationField7 = iSOChronology0.minutes();
        org.joda.time.DateTimeField dateTimeField8 = iSOChronology0.minuteOfDay();
        org.joda.time.DurationField durationField9 = iSOChronology0.days();
        org.joda.time.DurationField durationField10 = iSOChronology0.days();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology0.secondOfDay();
        org.joda.time.DurationField durationField12 = iSOChronology0.weekyears();
        org.joda.time.DurationField durationField13 = iSOChronology0.millis();
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology0.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology0.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology0);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
    }

    @Test
    public void test11206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11206");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        java.util.TimeZone timeZone1 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        int int4 = dateTimeZone2.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime5 = org.joda.time.LocalDateTime.now(dateTimeZone2);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray6 = localDateTime5.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.hourOfDay();
        int int8 = localDateTime5.get(dateTimeFieldType7);
        org.joda.time.LocalDateTime.Property property9 = localDateTime5.dayOfWeek();
        boolean boolean10 = localDateTime0.isEqual((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.LocalDateTime.Property property11 = localDateTime5.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime12 = property11.roundHalfCeilingCopy();
        java.util.TimeZone timeZone13 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forTimeZone(timeZone13);
        int int16 = dateTimeZone14.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime17 = org.joda.time.LocalDateTime.now(dateTimeZone14);
        org.joda.time.LocalDateTime localDateTime18 = org.joda.time.LocalDateTime.now(dateTimeZone14);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.minusMinutes((int) ' ');
        int int21 = property11.compareTo((org.joda.time.ReadablePartial) localDateTime20);
        int int22 = property11.getMaximumValueOverall();
        org.joda.time.LocalDateTime localDateTime23 = property11.roundHalfCeilingCopy();
        org.joda.time.chrono.ISOChronology iSOChronology24 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField25 = iSOChronology24.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField26 = iSOChronology24.centuryOfEra();
        org.joda.time.DurationField durationField27 = iSOChronology24.eras();
        org.joda.time.DateTimeField dateTimeField28 = iSOChronology24.year();
        java.util.Locale locale30 = java.util.Locale.GERMAN;
        java.lang.String str31 = locale30.getDisplayScript();
        java.lang.String str33 = locale30.getExtension('x');
        java.util.Set<java.lang.Character> charSet34 = locale30.getExtensionKeys();
        java.lang.String str35 = dateTimeField28.getAsText(1645454774909L, locale30);
        boolean boolean36 = locale30.hasExtensions();
        java.util.Locale locale37 = java.util.Locale.JAPANESE;
        java.lang.String str38 = locale37.getDisplayLanguage();
        java.lang.String str39 = locale37.getISO3Language();
        java.lang.String str40 = locale37.getISO3Language();
        java.lang.String str41 = locale37.getDisplayVariant();
        java.util.Locale locale42 = java.util.Locale.GERMAN;
        java.util.Locale locale43 = java.util.Locale.GERMAN;
        java.lang.String str44 = locale42.getDisplayCountry(locale43);
        java.lang.String str45 = locale37.getDisplayCountry(locale43);
        java.lang.String str46 = locale30.getDisplayCountry(locale43);
        int int47 = property11.getMaximumShortTextLength(locale43);
        java.lang.String str48 = locale43.getISO3Language();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 36000000 + "'", int4 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 36000000 + "'", int16 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 31 + "'", int22 == 31);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(iSOChronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "de");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNotNull(charSet34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "2022" + "'", str35, "2022");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Japanese" + "'", str38, "Japanese");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "jpn" + "'", str39, "jpn");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "jpn" + "'", str40, "jpn");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "de");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "de");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2 + "'", int47 == 2);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "deu" + "'", str48, "deu");
    }

    @Test
    public void test11207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11207");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (-457046));
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.hourOfDay();
        org.junit.Assert.assertNotNull(property2);
    }

    @Test
    public void test11208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11208");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.weekOfWeekyear();
        java.util.TimeZone timeZone2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone2);
        java.lang.String str5 = dateTimeZone3.getName(31556995199999L);
        org.joda.time.Chronology chronology6 = iSOChronology0.withZone(dateTimeZone3);
        org.joda.time.DurationField durationField7 = iSOChronology0.hours();
        org.joda.time.DurationField durationField8 = iSOChronology0.months();
        org.joda.time.DurationField durationField9 = iSOChronology0.days();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology0.hourOfDay();
        org.joda.time.DurationField durationField11 = iSOChronology0.seconds();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+10:00" + "'", str5, "+10:00");
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
    }

    @Test
    public void test11209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11209");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.DateTime dateTime6 = localDateTime4.toDateTime(readableInstant5);
        java.util.TimeZone timeZone7 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forTimeZone(timeZone7);
        int int10 = dateTimeZone8.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now(dateTimeZone8);
        org.joda.time.LocalDateTime localDateTime12 = org.joda.time.LocalDateTime.now(dateTimeZone8);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.minusYears(2022);
        org.joda.time.LocalDateTime.Property property15 = localDateTime14.era();
        int int16 = localDateTime4.compareTo((org.joda.time.ReadablePartial) localDateTime14);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = localDateTime4.getFieldType(1);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        int int20 = localDateTime4.indexOf(dateTimeFieldType19);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime4.plusSeconds(2840946);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray23 = localDateTime4.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime25 = localDateTime4.plusHours(978);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 36000000 + "'", int3 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 36000000 + "'", int10 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray23);
        org.junit.Assert.assertNotNull(localDateTime25);
    }

    @Test
    public void test11210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11210");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.yearOfEra();
        org.joda.time.DurationField durationField3 = iSOChronology0.minutes();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.weekyear();
        org.joda.time.DurationField durationField5 = iSOChronology0.centuries();
        org.joda.time.DateTimeField dateTimeField6 = iSOChronology0.centuryOfEra();
        org.joda.time.DurationField durationField7 = iSOChronology0.minutes();
        org.joda.time.DateTimeField dateTimeField8 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField9 = iSOChronology0.minuteOfHour();
        org.joda.time.chrono.ISOChronology iSOChronology10 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology10.hourOfHalfday();
        java.lang.String str12 = iSOChronology10.toString();
        org.joda.time.DateTimeField dateTimeField13 = iSOChronology10.era();
        org.joda.time.DurationField durationField14 = iSOChronology10.centuries();
        org.joda.time.DurationField durationField15 = iSOChronology10.weeks();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology10.dayOfYear();
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology10);
        int[] intArray18 = localDateTime17.getValues();
        long long20 = iSOChronology0.set((org.joda.time.ReadablePartial) localDateTime17, 0L);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime17.plusYears((-292275054));
        // The following exception was thrown during execution in test generation
        try {
            int int24 = localDateTime22.getValue(2804241);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 2804241");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(iSOChronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "ISOChronology[+10:00]" + "'", str12, "ISOChronology[+10:00]");
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(intArray18);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[2022, 2, 22, 3265032]");
// flaky:         org.junit.Assert.assertTrue("'" + long20 + "' != '" + 1645455265032L + "'", long20 == 1645455265032L);
        org.junit.Assert.assertNotNull(localDateTime22);
    }

    @Test
    public void test11211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11211");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.yearOfEra();
        org.joda.time.DurationField durationField3 = iSOChronology0.minutes();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.weekyear();
        org.joda.time.DurationField durationField5 = iSOChronology0.centuries();
        org.joda.time.DateTimeField dateTimeField6 = iSOChronology0.centuryOfEra();
        long long9 = dateTimeField6.getDifferenceAsLong((long) 22, (long) 14);
        boolean boolean10 = dateTimeField6.isLenient();
        java.util.TimeZone timeZone11 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        int int14 = dateTimeZone12.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime15 = org.joda.time.LocalDateTime.now(dateTimeZone12);
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.DateTime dateTime17 = localDateTime15.toDateTime(readableInstant16);
        java.util.TimeZone timeZone18 = null;
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forTimeZone(timeZone18);
        int int21 = dateTimeZone19.getOffset(100L);
        org.joda.time.DateTime dateTime22 = localDateTime15.toDateTime(dateTimeZone19);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime15.withYear(52);
        org.joda.time.Chronology chronology25 = localDateTime24.getChronology();
        java.util.TimeZone timeZone26 = null;
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forTimeZone(timeZone26);
        int int29 = dateTimeZone27.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime30 = org.joda.time.LocalDateTime.now(dateTimeZone27);
        int int31 = localDateTime30.getWeekyear();
        org.joda.time.LocalDateTime.Property property32 = localDateTime30.millisOfDay();
        java.util.TimeZone timeZone33 = null;
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forTimeZone(timeZone33);
        int int36 = dateTimeZone34.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime37 = org.joda.time.LocalDateTime.now(dateTimeZone34);
        org.joda.time.ReadableInstant readableInstant38 = null;
        org.joda.time.DateTime dateTime39 = localDateTime37.toDateTime(readableInstant38);
        java.util.TimeZone timeZone40 = null;
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forTimeZone(timeZone40);
        int int43 = dateTimeZone41.getOffset(100L);
        org.joda.time.DateTime dateTime44 = localDateTime37.toDateTime(dateTimeZone41);
        int int45 = property32.compareTo((org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.LocalDateTime localDateTime46 = property32.roundHalfEvenCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.LocalDateTime.Property property48 = localDateTime46.property(dateTimeFieldType47);
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.Chronology chronology50 = null;
        boolean boolean51 = dateTimeFieldType49.isSupported(chronology50);
        boolean boolean52 = localDateTime46.isSupported(dateTimeFieldType49);
        int int53 = localDateTime24.compareTo((org.joda.time.ReadablePartial) localDateTime46);
        org.joda.time.chrono.ISOChronology iSOChronology55 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField56 = iSOChronology55.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField57 = iSOChronology55.centuryOfEra();
        org.joda.time.DurationField durationField58 = iSOChronology55.seconds();
        org.joda.time.DateTimeField dateTimeField59 = iSOChronology55.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField60 = iSOChronology55.yearOfEra();
        org.joda.time.DateTimeField dateTimeField61 = iSOChronology55.monthOfYear();
        org.joda.time.DurationField durationField62 = iSOChronology55.millis();
        org.joda.time.DurationField durationField63 = iSOChronology55.weeks();
        java.util.TimeZone timeZone64 = null;
        org.joda.time.DateTimeZone dateTimeZone65 = org.joda.time.DateTimeZone.forTimeZone(timeZone64);
        int int67 = dateTimeZone65.getOffset(100L);
        java.util.TimeZone timeZone68 = dateTimeZone65.toTimeZone();
        java.lang.String str69 = dateTimeZone65.getID();
        java.util.TimeZone timeZone70 = dateTimeZone65.toTimeZone();
        org.joda.time.LocalDateTime localDateTime71 = new org.joda.time.LocalDateTime(dateTimeZone65);
        org.joda.time.ReadablePeriod readablePeriod72 = null;
        org.joda.time.LocalDateTime localDateTime73 = localDateTime71.plus(readablePeriod72);
        int int74 = localDateTime71.getWeekOfWeekyear();
        int int75 = localDateTime71.getDayOfMonth();
        int[] intArray77 = iSOChronology55.get((org.joda.time.ReadablePartial) localDateTime71, (long) 2809);
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray79 = dateTimeField6.set((org.joda.time.ReadablePartial) localDateTime46, 82800052, intArray77, 3157534);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 3157534 for centuryOfEra must be in the range [0,2922789]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 36000000 + "'", int14 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 36000000 + "'", int21 == 36000000);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 36000000 + "'", int29 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2022 + "'", int31 == 2022);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 36000000 + "'", int36 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 36000000 + "'", int43 == 36000000);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(dateTimeFieldType47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(dateTimeFieldType49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertNotNull(iSOChronology55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(durationField58);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertNotNull(durationField62);
        org.junit.Assert.assertNotNull(durationField63);
        org.junit.Assert.assertNotNull(dateTimeZone65);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 36000000 + "'", int67 == 36000000);
        org.junit.Assert.assertNotNull(timeZone68);
        org.junit.Assert.assertEquals(timeZone68.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "+10:00" + "'", str69, "+10:00");
        org.junit.Assert.assertNotNull(timeZone70);
        org.junit.Assert.assertEquals(timeZone70.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertNotNull(localDateTime73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 8 + "'", int74 == 8);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 22 + "'", int75 == 22);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[1970, 1, 1, 36002809]");
    }

    @Test
    public void test11212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11212");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        java.util.TimeZone timeZone1 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        int int4 = dateTimeZone2.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime5 = org.joda.time.LocalDateTime.now(dateTimeZone2);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray6 = localDateTime5.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.hourOfDay();
        int int8 = localDateTime5.get(dateTimeFieldType7);
        org.joda.time.LocalDateTime.Property property9 = localDateTime5.dayOfWeek();
        boolean boolean10 = localDateTime0.isEqual((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.LocalDateTime.Property property11 = localDateTime5.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime12 = property11.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.withSecondOfMinute((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.plusSeconds(2922789);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.plusMonths(49691961);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 36000000 + "'", int4 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
    }

    @Test
    public void test11213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11213");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime5 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.plusSeconds((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime5.minusWeeks((int) (byte) 10);
        java.util.TimeZone timeZone10 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        int int13 = dateTimeZone11.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime14 = org.joda.time.LocalDateTime.now(dateTimeZone11);
        org.joda.time.LocalDateTime localDateTime15 = org.joda.time.LocalDateTime.now(dateTimeZone11);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.plusSeconds((int) (short) 10);
        int int18 = localDateTime15.size();
        boolean boolean19 = localDateTime9.isBefore((org.joda.time.ReadablePartial) localDateTime15);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime9.withDayOfWeek((int) (byte) 1);
        org.joda.time.LocalDateTime.Property property22 = localDateTime9.minuteOfHour();
        java.util.TimeZone timeZone23 = null;
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forTimeZone(timeZone23);
        int int26 = dateTimeZone24.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime27 = org.joda.time.LocalDateTime.now(dateTimeZone24);
        org.joda.time.LocalDateTime localDateTime28 = org.joda.time.LocalDateTime.now(dateTimeZone24);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.minusMinutes((int) ' ');
        org.joda.time.LocalDateTime localDateTime32 = localDateTime30.withYearOfCentury((int) (byte) 10);
        java.util.TimeZone timeZone33 = null;
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forTimeZone(timeZone33);
        int int36 = dateTimeZone34.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime37 = org.joda.time.LocalDateTime.now(dateTimeZone34);
        org.joda.time.LocalDateTime localDateTime38 = org.joda.time.LocalDateTime.now(dateTimeZone34);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime38.withMillisOfSecond((int) '4');
        org.joda.time.LocalDateTime localDateTime41 = localDateTime32.withFields((org.joda.time.ReadablePartial) localDateTime38);
        org.joda.time.LocalDateTime.Property property42 = localDateTime38.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime44 = localDateTime38.minusMillis(2022);
        int[] intArray45 = localDateTime38.getValues();
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = org.joda.time.DateTimeFieldType.secondOfMinute();
        int int47 = localDateTime38.indexOf(dateTimeFieldType46);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime49 = localDateTime9.withField(dateTimeFieldType46, 53708052);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 53708052 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 36000000 + "'", int3 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 36000000 + "'", int13 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 4 + "'", int18 == 4);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 36000000 + "'", int26 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 36000000 + "'", int36 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(intArray45);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[2022, 2, 22, 3265134]");
        org.junit.Assert.assertNotNull(dateTimeFieldType46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
    }

    @Test
    public void test11214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11214");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray5 = localDateTime4.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.plusWeeks(2022);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime4.plusHours((int) '4');
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.plus(readableDuration10);
        java.util.TimeZone timeZone12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone12);
        int int15 = dateTimeZone13.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime16 = org.joda.time.LocalDateTime.now(dateTimeZone13);
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.DateTime dateTime18 = localDateTime16.toDateTime(readableInstant17);
        java.util.TimeZone timeZone19 = null;
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forTimeZone(timeZone19);
        int int22 = dateTimeZone20.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime23 = org.joda.time.LocalDateTime.now(dateTimeZone20);
        org.joda.time.LocalDateTime localDateTime24 = org.joda.time.LocalDateTime.now(dateTimeZone20);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.minusYears(2022);
        org.joda.time.LocalDateTime.Property property27 = localDateTime26.era();
        int int28 = localDateTime16.compareTo((org.joda.time.ReadablePartial) localDateTime26);
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = localDateTime16.getFieldType(1);
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        int int32 = localDateTime16.indexOf(dateTimeFieldType31);
        int int33 = localDateTime9.get(dateTimeFieldType31);
        org.joda.time.DurationFieldType durationFieldType34 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.DurationField durationField36 = durationFieldType34.getField(chronology35);
        java.util.TimeZone timeZone37 = null;
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forTimeZone(timeZone37);
        int int40 = dateTimeZone38.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime41 = org.joda.time.LocalDateTime.now(dateTimeZone38);
        org.joda.time.ReadableInstant readableInstant42 = null;
        org.joda.time.DateTime dateTime43 = localDateTime41.toDateTime(readableInstant42);
        org.joda.time.Chronology chronology44 = dateTime43.getChronology();
        boolean boolean45 = durationFieldType34.isSupported(chronology44);
        boolean boolean46 = localDateTime9.isSupported(durationFieldType34);
        org.joda.time.LocalDateTime localDateTime48 = localDateTime9.plusWeeks(2974308);
        org.joda.time.LocalDateTime.Property property49 = localDateTime48.dayOfYear();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 36000000 + "'", int3 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 36000000 + "'", int15 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 36000000 + "'", int22 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertNotNull(dateTimeFieldType31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + int33 + "' != '" + 4 + "'", int33 == 4);
        org.junit.Assert.assertNotNull(durationFieldType34);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 36000000 + "'", int40 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(property49);
    }

    @Test
    public void test11215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11215");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str3 = dateTimeZone1.getShortName(100L);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        java.util.TimeZone timeZone5 = dateTimeZone1.toTimeZone();
        boolean boolean6 = timeZone5.observesDaylightTime();
        java.lang.String str7 = timeZone5.getID();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+10:00" + "'", str3, "+10:00");
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(timeZone5);
        org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "GMT+10:00" + "'", str7, "GMT+10:00");
    }

    @Test
    public void test11216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11216");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.hourOfHalfday();
        org.joda.time.DurationField durationField2 = iSOChronology0.hours();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.dayOfWeek();
        org.joda.time.DurationField durationField4 = iSOChronology0.centuries();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
    }

    @Test
    public void test11217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11217");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.hourOfHalfday();
        java.lang.String str2 = iSOChronology0.toString();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.era();
        java.util.TimeZone timeZone4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forTimeZone(timeZone4);
        int int7 = dateTimeZone5.getOffset(100L);
        java.util.TimeZone timeZone8 = dateTimeZone5.toTimeZone();
        java.lang.String str9 = dateTimeZone5.toString();
        org.joda.time.Chronology chronology10 = iSOChronology0.withZone(dateTimeZone5);
        java.util.TimeZone timeZone11 = dateTimeZone5.toTimeZone();
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime(dateTimeZone5);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone5);
        long long15 = dateTimeZone5.previousTransition(1645455050321L);
        long long18 = dateTimeZone5.adjustOffset(1645455115038L, false);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ISOChronology[+10:00]" + "'", str2, "ISOChronology[+10:00]");
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 36000000 + "'", int7 == 36000000);
        org.junit.Assert.assertNotNull(timeZone8);
        org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+10:00" + "'", str9, "+10:00");
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(timeZone11);
        org.junit.Assert.assertEquals(timeZone11.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1645455050321L + "'", long15 == 1645455050321L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1645455115038L + "'", long18 == 1645455115038L);
    }

    @Test
    public void test11218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11218");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.hourOfHalfday();
        java.lang.String str2 = iSOChronology0.toString();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.era();
        org.joda.time.Chronology chronology4 = iSOChronology0.withUTC();
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        long long8 = iSOChronology0.add(readablePeriod5, 38469L, 110);
        org.joda.time.DateTimeField dateTimeField9 = iSOChronology0.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology0.yearOfEra();
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology0);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minusMinutes(49806718);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ISOChronology[+10:00]" + "'", str2, "ISOChronology[+10:00]");
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 38469L + "'", long8 == 38469L);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(localDateTime13);
    }

    @Test
    public void test11219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11219");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale1 = java.util.Locale.JAPANESE;
        java.lang.String str2 = locale1.getDisplayLanguage();
        java.lang.String str3 = locale1.getISO3Language();
        java.util.Locale locale4 = java.util.Locale.CHINA;
        java.lang.String str5 = locale1.getDisplayLanguage(locale4);
        org.joda.time.tz.NameProvider nameProvider6 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale7 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet8 = locale7.getExtensionKeys();
        java.lang.String str11 = nameProvider6.getShortName(locale7, "Koordinierte Universalzeit", "+00:00");
        java.util.Locale locale12 = java.util.Locale.KOREAN;
        java.lang.String str13 = locale7.getDisplayName(locale12);
        java.lang.String str14 = locale4.getDisplayVariant(locale12);
        java.util.Locale locale15 = locale12.stripExtensions();
        java.util.Locale.setDefault(category0, locale12);
        java.util.TimeZone timeZone18 = null;
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forTimeZone(timeZone18);
        int int21 = dateTimeZone19.getOffset(100L);
        long long23 = dateTimeZone19.nextTransition((long) (short) -1);
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime(3155695200000L, dateTimeZone19);
        org.joda.time.chrono.ISOChronology iSOChronology26 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField27 = iSOChronology26.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField28 = iSOChronology26.centuryOfEra();
        org.joda.time.DurationField durationField29 = iSOChronology26.centuries();
        org.joda.time.DurationField durationField30 = iSOChronology26.hours();
        java.util.TimeZone timeZone31 = null;
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forTimeZone(timeZone31);
        int int34 = dateTimeZone32.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime35 = org.joda.time.LocalDateTime.now(dateTimeZone32);
        int int36 = localDateTime35.getDayOfYear();
        org.joda.time.LocalDateTime localDateTime38 = localDateTime35.withYearOfEra(2022);
        long long40 = iSOChronology26.set((org.joda.time.ReadablePartial) localDateTime38, (long) 0);
        org.joda.time.DateTimeField dateTimeField41 = iSOChronology26.monthOfYear();
        org.joda.time.DateTimeField dateTimeField42 = iSOChronology26.clockhourOfDay();
        org.joda.time.tz.NameProvider nameProvider43 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.DateTimeZone.setNameProvider(nameProvider43);
        java.util.TimeZone timeZone45 = null;
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.forTimeZone(timeZone45);
        int int48 = dateTimeZone46.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime49 = org.joda.time.LocalDateTime.now(dateTimeZone46);
        org.joda.time.ReadableInstant readableInstant50 = null;
        org.joda.time.DateTime dateTime51 = localDateTime49.toDateTime(readableInstant50);
        org.joda.time.Chronology chronology52 = dateTime51.getChronology();
        org.joda.time.DurationField durationField53 = chronology52.hours();
        org.joda.time.DurationField durationField54 = chronology52.months();
        org.joda.time.DateTimeField dateTimeField55 = chronology52.dayOfYear();
        java.util.TimeZone timeZone56 = null;
        org.joda.time.DateTimeZone dateTimeZone57 = org.joda.time.DateTimeZone.forTimeZone(timeZone56);
        int int59 = dateTimeZone57.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime60 = org.joda.time.LocalDateTime.now(dateTimeZone57);
        int[] intArray63 = new int[] { (short) 0, (short) 0 };
        int int64 = dateTimeField55.getMinimumValue((org.joda.time.ReadablePartial) localDateTime60, intArray63);
        java.lang.String str66 = dateTimeField55.getAsShortText((long) 53166088);
        java.util.TimeZone timeZone67 = null;
        org.joda.time.DateTimeZone dateTimeZone68 = org.joda.time.DateTimeZone.forTimeZone(timeZone67);
        int int70 = dateTimeZone68.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime71 = org.joda.time.LocalDateTime.now(dateTimeZone68);
        int int72 = localDateTime71.getWeekyear();
        org.joda.time.DurationFieldType durationFieldType73 = org.joda.time.DurationFieldType.days();
        org.joda.time.LocalDateTime localDateTime75 = localDateTime71.withFieldAdded(durationFieldType73, 53166088);
        java.util.Locale locale76 = java.util.Locale.ROOT;
        java.lang.String str77 = dateTimeField55.getAsShortText((org.joda.time.ReadablePartial) localDateTime75, locale76);
        java.lang.String str80 = nameProvider43.getShortName(locale76, "53169175", "+00:00");
        java.util.Locale locale81 = java.util.Locale.JAPANESE;
        java.lang.String str82 = locale81.getDisplayLanguage();
        java.util.Set<java.lang.String> strSet83 = locale81.getUnicodeLocaleKeys();
        java.lang.String str84 = locale81.getScript();
        java.lang.String str87 = nameProvider43.getShortName(locale81, "2022-02-21T14:46:09.691Z", "\uc77c\ubcf8\uc5b4");
        int int88 = dateTimeField42.getMaximumTextLength(locale81);
        java.lang.String str89 = dateTimeZone19.getName(0L, locale81);
        java.lang.String str90 = locale81.getDisplayScript();
        java.util.Locale.setDefault(locale81);
        java.util.Locale.setDefault(category0, locale81);
        java.lang.Class<?> wildcardClass93 = category0.getClass();
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Japanese" + "'", str2, "Japanese");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "jpn" + "'", str3, "jpn");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "\u65e5\u6587" + "'", str5, "\u65e5\u6587");
        org.junit.Assert.assertNotNull(nameProvider6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet8);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str13, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ko");
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 36000000 + "'", int21 == 36000000);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-1L) + "'", long23 == (-1L));
        org.junit.Assert.assertNotNull(iSOChronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 36000000 + "'", int34 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 53 + "'", int36 == 53);
        org.junit.Assert.assertNotNull(localDateTime38);
// flaky:         org.junit.Assert.assertTrue("'" + long40 + "' != '" + 1645455265317L + "'", long40 == 1645455265317L);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(nameProvider43);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 36000000 + "'", int48 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(durationField53);
        org.junit.Assert.assertNotNull(durationField54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(dateTimeZone57);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 36000000 + "'", int59 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[0, 0]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "2" + "'", str66, "2");
        org.junit.Assert.assertNotNull(dateTimeZone68);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 36000000 + "'", int70 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 2022 + "'", int72 == 2022);
        org.junit.Assert.assertNotNull(durationFieldType73);
        org.junit.Assert.assertNotNull(localDateTime75);
        org.junit.Assert.assertNotNull(locale76);
        org.junit.Assert.assertEquals(locale76.toString(), "");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "347" + "'", str77, "347");
        org.junit.Assert.assertNull(str80);
        org.junit.Assert.assertNotNull(locale81);
        org.junit.Assert.assertEquals(locale81.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "Japanese" + "'", str82, "Japanese");
        org.junit.Assert.assertNotNull(strSet83);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "" + "'", str84, "");
        org.junit.Assert.assertNull(str87);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 2 + "'", int88 == 2);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "+10:00" + "'", str89, "+10:00");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "" + "'", str90, "");
        org.junit.Assert.assertNotNull(wildcardClass93);
    }

    @Test
    public void test11220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11220");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet1 = locale0.getExtensionKeys();
        java.util.Iterator<java.lang.Character> charItor2 = charSet1.iterator();
        java.util.Locale locale3 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet4 = locale3.getExtensionKeys();
        java.util.Iterator<java.lang.Character> charItor5 = charSet4.iterator();
        boolean boolean6 = charSet1.containsAll((java.util.Collection<java.lang.Character>) charSet4);
        java.util.Locale.Builder builder7 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder10 = builder7.setExtension('x', "jpn");
        java.util.Locale locale11 = java.util.Locale.GERMAN;
        java.util.Locale locale12 = java.util.Locale.GERMAN;
        java.lang.String str13 = locale11.getDisplayCountry(locale12);
        java.util.Locale locale14 = locale11.stripExtensions();
        java.lang.String str15 = locale11.getDisplayName();
        java.util.Locale.Builder builder16 = builder10.setLocale(locale11);
        java.util.Locale.Builder builder18 = builder16.setLanguageTag("Februar");
        boolean boolean19 = charSet4.remove((java.lang.Object) builder18);
        java.util.Locale.Builder builder20 = builder18.clear();
        java.util.Locale.Builder builder22 = builder20.setVariant("2803637");
        java.util.Locale.Builder builder23 = builder22.clear();
        java.util.Locale locale24 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str25 = locale24.getDisplayScript();
        java.util.Set<java.lang.String> strSet26 = locale24.getUnicodeLocaleAttributes();
        java.util.Locale.Builder builder27 = builder22.setLocale(locale24);
        java.util.Locale locale28 = builder22.build();
        java.util.Locale locale29 = builder22.build();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder31 = builder22.setRegion("20494010");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed region: 20494010 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet1);
        org.junit.Assert.assertNotNull(charItor2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet4);
        org.junit.Assert.assertNotNull(charItor5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "de");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "de");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "de");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "\u30c9\u30a4\u30c4\u8a9e" + "'", str15, "\u30c9\u30a4\u30c4\u8a9e");
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(strSet26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "zh_CN");
    }

    @Test
    public void test11221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11221");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.centuryOfEra();
        org.joda.time.DurationField durationField3 = iSOChronology0.seconds();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.clockhourOfDay();
        org.joda.time.Chronology chronology5 = iSOChronology0.withUTC();
        org.joda.time.DateTimeField dateTimeField6 = iSOChronology0.halfdayOfDay();
        java.util.TimeZone timeZone7 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forTimeZone(timeZone7);
        int int10 = dateTimeZone8.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now(dateTimeZone8);
        org.joda.time.LocalDateTime localDateTime12 = org.joda.time.LocalDateTime.now(dateTimeZone8);
        org.joda.time.Chronology chronology13 = iSOChronology0.withZone(dateTimeZone8);
        java.lang.Object obj14 = null;
        boolean boolean15 = dateTimeZone8.equals(obj14);
        long long17 = dateTimeZone8.convertUTCToLocal(1645454909798L);
        boolean boolean19 = dateTimeZone8.isStandardOffset(1644850016296L);
        java.lang.String str20 = dateTimeZone8.getID();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 36000000 + "'", int10 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1645490909798L + "'", long17 == 1645490909798L);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+10:00" + "'", str20, "+10:00");
    }

    @Test
    public void test11222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11222");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.DateTime dateTime6 = localDateTime4.toDateTime(readableInstant5);
        java.util.TimeZone timeZone7 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forTimeZone(timeZone7);
        int int10 = dateTimeZone8.getOffset(100L);
        org.joda.time.DateTime dateTime11 = localDateTime4.toDateTime(dateTimeZone8);
        org.joda.time.LocalDateTime.Property property12 = localDateTime4.monthOfYear();
        org.joda.time.DateTimeField dateTimeField13 = property12.getField();
        org.joda.time.LocalDateTime localDateTime14 = property12.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime localDateTime15 = property12.getLocalDateTime();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 36000000 + "'", int3 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 36000000 + "'", int10 == 36000000);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime15);
    }

    @Test
    public void test11223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11223");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.centuryOfEra();
        org.joda.time.DurationField durationField3 = iSOChronology0.centuries();
        org.joda.time.DurationField durationField4 = iSOChronology0.hours();
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology0.secondOfMinute();
        java.lang.String str6 = iSOChronology0.toString();
        org.joda.time.DateTimeField dateTimeField7 = iSOChronology0.weekyearOfCentury();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "ISOChronology[+10:00]" + "'", str6, "ISOChronology[+10:00]");
        org.junit.Assert.assertNotNull(dateTimeField7);
    }

    @Test
    public void test11224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11224");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime5 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusMinutes((int) ' ');
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withYearOfCentury((int) (byte) 10);
        java.util.TimeZone timeZone10 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        int int13 = dateTimeZone11.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime14 = org.joda.time.LocalDateTime.now(dateTimeZone11);
        org.joda.time.LocalDateTime localDateTime15 = org.joda.time.LocalDateTime.now(dateTimeZone11);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.withMillisOfSecond((int) '4');
        org.joda.time.LocalDateTime localDateTime18 = localDateTime9.withFields((org.joda.time.ReadablePartial) localDateTime15);
        org.joda.time.DurationFieldType durationFieldType19 = org.joda.time.DurationFieldType.weekyears();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime9.withFieldAdded(durationFieldType19, 4);
        int int22 = localDateTime21.getMillisOfSecond();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter23 = null;
        java.lang.String str24 = localDateTime21.toString(dateTimeFormatter23);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime21.plusSeconds(2933167);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime28 = localDateTime21.withSecondOfMinute(53464);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 53464 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 36000000 + "'", int3 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 36000000 + "'", int13 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(durationFieldType19);
        org.junit.Assert.assertNotNull(localDateTime21);
// flaky:         org.junit.Assert.assertTrue("'" + int22 + "' != '" + 463 + "'", int22 == 463);
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "2014-02-17T00:22:25.463" + "'", str24, "2014-02-17T00:22:25.463");
        org.junit.Assert.assertNotNull(localDateTime26);
    }

    @Test
    public void test11225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11225");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime5 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.plusSeconds((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime5.minusWeeks((int) (byte) 10);
        java.util.TimeZone timeZone10 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        int int13 = dateTimeZone11.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime14 = org.joda.time.LocalDateTime.now(dateTimeZone11);
        org.joda.time.LocalDateTime localDateTime15 = org.joda.time.LocalDateTime.now(dateTimeZone11);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.plusSeconds((int) (short) 10);
        int int18 = localDateTime15.size();
        boolean boolean19 = localDateTime9.isBefore((org.joda.time.ReadablePartial) localDateTime15);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime15.withMillisOfSecond(52);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.plusMinutes(0);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime21.plusDays(53166088);
        int int26 = localDateTime25.size();
        org.joda.time.LocalDateTime localDateTime28 = localDateTime25.withYear(817);
        org.joda.time.LocalDateTime.Property property29 = localDateTime25.yearOfEra();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime31 = localDateTime25.withMonthOfYear(2840946);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2840946 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 36000000 + "'", int3 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 36000000 + "'", int13 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 4 + "'", int18 == 4);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 4 + "'", int26 == 4);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(property29);
    }

    @Test
    public void test11226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11226");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.DateTime dateTime6 = localDateTime4.toDateTime(readableInstant5);
        org.joda.time.Chronology chronology7 = dateTime6.getChronology();
        java.util.TimeZone timeZone8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        int int11 = dateTimeZone9.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime12 = org.joda.time.LocalDateTime.now(dateTimeZone9);
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.DateTime dateTime14 = localDateTime12.toDateTime(readableInstant13);
        java.util.TimeZone timeZone15 = null;
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forTimeZone(timeZone15);
        int int18 = dateTimeZone16.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime19 = org.joda.time.LocalDateTime.now(dateTimeZone16);
        org.joda.time.LocalDateTime localDateTime20 = org.joda.time.LocalDateTime.now(dateTimeZone16);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.minusYears(2022);
        org.joda.time.LocalDateTime.Property property23 = localDateTime22.era();
        int int24 = localDateTime12.compareTo((org.joda.time.ReadablePartial) localDateTime22);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int26 = localDateTime12.get(dateTimeFieldType25);
        org.joda.time.DurationFieldType durationFieldType27 = dateTimeFieldType25.getRangeDurationType();
        int int28 = dateTime6.get(dateTimeFieldType25);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 36000000 + "'", int3 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 36000000 + "'", int11 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 36000000 + "'", int18 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
// flaky:         org.junit.Assert.assertTrue("'" + int26 + "' != '" + 3265512 + "'", int26 == 3265512);
        org.junit.Assert.assertNotNull(durationFieldType27);
// flaky:         org.junit.Assert.assertTrue("'" + int28 + "' != '" + 3265512 + "'", int28 == 3265512);
    }

    @Test
    public void test11227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11227");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.centuryOfEra();
        org.joda.time.DurationField durationField3 = iSOChronology0.seconds();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology0.yearOfEra();
        org.joda.time.DateTimeField dateTimeField6 = iSOChronology0.monthOfYear();
        org.joda.time.DurationField durationField7 = iSOChronology0.millis();
        org.joda.time.DateTimeField dateTimeField8 = iSOChronology0.monthOfYear();
        org.joda.time.DateTimeField dateTimeField9 = iSOChronology0.clockhourOfDay();
        java.util.TimeZone timeZone10 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        int int13 = dateTimeZone11.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime14 = org.joda.time.LocalDateTime.now(dateTimeZone11);
        org.joda.time.LocalDateTime localDateTime15 = org.joda.time.LocalDateTime.now(dateTimeZone11);
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.plus(readableDuration16);
        org.joda.time.Chronology chronology18 = localDateTime15.getChronology();
        int[] intArray20 = iSOChronology0.get((org.joda.time.ReadablePartial) localDateTime15, (long) 49992708);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 36000000 + "'", int13 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[1970, 1, 1, 85992708]");
    }

    @Test
    public void test11228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11228");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.yearOfEra();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.weekyearOfCentury();
        java.lang.String str4 = iSOChronology0.toString();
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology0.centuryOfEra();
        org.joda.time.DurationField durationField6 = iSOChronology0.weeks();
        org.joda.time.DateTimeField dateTimeField7 = iSOChronology0.secondOfMinute();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "ISOChronology[+10:00]" + "'", str4, "ISOChronology[+10:00]");
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
    }

    @Test
    public void test11229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11229");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.centuryOfEra();
        org.joda.time.DurationField durationField3 = iSOChronology0.seconds();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology0.yearOfEra();
        org.joda.time.DurationField durationField6 = iSOChronology0.days();
        org.joda.time.DateTimeField dateTimeField7 = iSOChronology0.millisOfDay();
        java.lang.String str8 = iSOChronology0.toString();
        org.joda.time.DateTimeField dateTimeField9 = iSOChronology0.weekyear();
        int int10 = dateTimeField9.getMinimumValue();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "ISOChronology[+10:00]" + "'", str8, "ISOChronology[+10:00]");
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-292275054) + "'", int10 == (-292275054));
    }

    @Test
    public void test11230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11230");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.yearOfEra();
        org.joda.time.DurationField durationField3 = iSOChronology0.minutes();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.weekyear();
        org.joda.time.DurationField durationField5 = iSOChronology0.centuries();
        org.joda.time.DateTimeField dateTimeField6 = iSOChronology0.centuryOfEra();
        org.joda.time.DurationField durationField7 = iSOChronology0.minutes();
        org.joda.time.DateTimeField dateTimeField8 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField9 = iSOChronology0.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology0.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology0.minuteOfDay();
        java.lang.String str12 = iSOChronology0.toString();
        org.joda.time.DateTimeField dateTimeField13 = iSOChronology0.minuteOfDay();
        long long15 = dateTimeField13.remainder(1645454901787L);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "ISOChronology[+10:00]" + "'", str12, "ISOChronology[+10:00]");
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 21787L + "'", long15 == 21787L);
    }

    @Test
    public void test11231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11231");
        org.joda.time.tz.NameProvider nameProvider0 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.TimeZone timeZone1 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        int int4 = dateTimeZone2.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime5 = org.joda.time.LocalDateTime.now(dateTimeZone2);
        int int6 = localDateTime5.getWeekyear();
        org.joda.time.LocalDateTime.Property property7 = localDateTime5.millisOfDay();
        java.util.Locale locale8 = java.util.Locale.KOREAN;
        int int9 = property7.getMaximumTextLength(locale8);
        java.lang.String str10 = locale8.getVariant();
        java.lang.String str13 = nameProvider0.getName(locale8, "2022-02-21T14:46:31.592", "");
        org.joda.time.DateTimeZone.setNameProvider(nameProvider0);
        org.joda.time.DateTimeZone.setNameProvider(nameProvider0);
        java.util.Locale locale17 = new java.util.Locale("36");
        java.lang.String str20 = nameProvider0.getName(locale17, "2022-02-21T14:46:09.691Z", "2832113");
        org.joda.time.DateTimeZone.setNameProvider(nameProvider0);
        org.joda.time.chrono.ISOChronology iSOChronology22 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField23 = iSOChronology22.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField24 = iSOChronology22.centuryOfEra();
        org.joda.time.DurationField durationField25 = iSOChronology22.eras();
        org.joda.time.DateTimeField dateTimeField26 = iSOChronology22.year();
        java.util.Locale locale28 = java.util.Locale.GERMAN;
        java.lang.String str29 = locale28.getDisplayScript();
        java.lang.String str31 = locale28.getExtension('x');
        java.util.Set<java.lang.Character> charSet32 = locale28.getExtensionKeys();
        java.lang.String str33 = dateTimeField26.getAsText(1645454774909L, locale28);
        boolean boolean34 = locale28.hasExtensions();
        java.util.Locale.Builder builder35 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder38 = builder35.setExtension('x', "jpn");
        java.util.Locale.Builder builder40 = builder35.removeUnicodeLocaleAttribute("53169126");
        java.util.Locale.Builder builder42 = builder40.addUnicodeLocaleAttribute("German");
        java.util.Locale locale43 = builder40.build();
        java.lang.String str44 = locale28.getDisplayName(locale43);
        java.lang.String str47 = nameProvider0.getShortName(locale43, "2022-02-21T13:48:34.042", "2022-02-22T00:47:23.021");
        java.util.Locale locale48 = java.util.Locale.GERMAN;
        java.util.Locale locale49 = java.util.Locale.GERMAN;
        java.lang.String str50 = locale48.getDisplayCountry(locale49);
        java.util.Locale locale51 = locale48.stripExtensions();
        java.lang.String str52 = locale48.getDisplayName();
        java.lang.String str53 = locale48.getVariant();
        java.lang.String str54 = locale48.getDisplayCountry();
        java.lang.String str57 = nameProvider0.getShortName(locale48, "eras", "centuries");
        java.util.TimeZone timeZone58 = null;
        org.joda.time.DateTimeZone dateTimeZone59 = org.joda.time.DateTimeZone.forTimeZone(timeZone58);
        int int61 = dateTimeZone59.getOffset(100L);
        java.util.TimeZone timeZone62 = dateTimeZone59.toTimeZone();
        int int64 = dateTimeZone59.getStandardOffset((long) ' ');
        boolean boolean66 = dateTimeZone59.isStandardOffset((long) '4');
        java.lang.String str68 = dateTimeZone59.getShortName((long) (-292275054));
        java.util.Locale locale70 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str71 = locale70.getDisplayScript();
        java.util.Locale locale72 = java.util.Locale.GERMAN;
        java.util.Locale locale73 = java.util.Locale.GERMAN;
        java.lang.String str74 = locale72.getDisplayCountry(locale73);
        java.util.Locale locale75 = locale72.stripExtensions();
        java.lang.String str76 = locale72.getDisplayName();
        java.util.Locale locale77 = java.util.Locale.PRC;
        java.lang.String str78 = locale72.getDisplayScript(locale77);
        java.lang.String str79 = locale70.getDisplayCountry(locale72);
        java.util.Locale.setDefault(locale72);
        java.lang.String str81 = dateTimeZone59.getShortName(1645455056797L, locale72);
        java.util.Locale locale82 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str83 = locale82.getDisplayScript();
        java.lang.String str84 = locale82.getDisplayLanguage();
        java.lang.String str85 = locale72.getDisplayCountry(locale82);
        java.lang.String str88 = nameProvider0.getName(locale72, "millis", "");
        org.junit.Assert.assertNotNull(nameProvider0);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 36000000 + "'", int4 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2022 + "'", int6 == 2022);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "ko");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8 + "'", int9 == 8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertEquals(locale17.toString(), "36");
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(iSOChronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "de");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(charSet32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "2022" + "'", str33, "2022");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "German" + "'", str44, "German");
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "de");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "de");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "de");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "\u30c9\u30a4\u30c4\u8a9e" + "'", str52, "\u30c9\u30a4\u30c4\u8a9e");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertNotNull(dateTimeZone59);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 36000000 + "'", int61 == 36000000);
        org.junit.Assert.assertNotNull(timeZone62);
        org.junit.Assert.assertEquals(timeZone62.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 36000000 + "'", int64 == 36000000);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "+10:00" + "'", str68, "+10:00");
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
        org.junit.Assert.assertNotNull(locale72);
        org.junit.Assert.assertEquals(locale72.toString(), "de");
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "de");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
        org.junit.Assert.assertNotNull(locale75);
        org.junit.Assert.assertEquals(locale75.toString(), "de");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "\u30c9\u30a4\u30c4\u8a9e" + "'", str76, "\u30c9\u30a4\u30c4\u8a9e");
        org.junit.Assert.assertNotNull(locale77);
        org.junit.Assert.assertEquals(locale77.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "" + "'", str78, "");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "China" + "'", str79, "China");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "+10:00" + "'", str81, "+10:00");
        org.junit.Assert.assertNotNull(locale82);
        org.junit.Assert.assertEquals(locale82.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "" + "'", str83, "");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "Chinesisch" + "'", str84, "Chinesisch");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "" + "'", str85, "");
        org.junit.Assert.assertNull(str88);
    }

    @Test
    public void test11232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11232");
        java.util.TimeZone timeZone1 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        int int4 = dateTimeZone2.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime5 = org.joda.time.LocalDateTime.now(dateTimeZone2);
        int int6 = localDateTime5.getWeekyear();
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.days();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime5.withFieldAdded(durationFieldType7, 53166088);
        org.joda.time.chrono.ISOChronology iSOChronology10 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology10.hourOfHalfday();
        java.lang.String str12 = iSOChronology10.toString();
        org.joda.time.DateTimeField dateTimeField13 = iSOChronology10.era();
        org.joda.time.DurationField durationField14 = iSOChronology10.centuries();
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        long long18 = iSOChronology10.add(readablePeriod15, (long) 2022, (int) (byte) 100);
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology10.dayOfYear();
        org.joda.time.DateTimeField dateTimeField20 = iSOChronology10.year();
        boolean boolean21 = durationFieldType7.isSupported((org.joda.time.Chronology) iSOChronology10);
        org.joda.time.DurationField durationField22 = iSOChronology10.centuries();
        org.joda.time.DurationField durationField23 = iSOChronology10.weekyears();
        org.joda.time.DateTimeField dateTimeField24 = iSOChronology10.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField25 = iSOChronology10.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField26 = iSOChronology10.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime(1645454879500L, (org.joda.time.Chronology) iSOChronology10);
        java.util.TimeZone timeZone28 = null;
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forTimeZone(timeZone28);
        int int31 = dateTimeZone29.getOffset(100L);
        java.util.TimeZone timeZone32 = dateTimeZone29.toTimeZone();
        int int34 = dateTimeZone29.getStandardOffset((long) ' ');
        boolean boolean36 = dateTimeZone29.isStandardOffset((long) '4');
        boolean boolean37 = dateTimeZone29.isFixed();
        boolean boolean38 = dateTimeZone29.isFixed();
        org.joda.time.Chronology chronology39 = iSOChronology10.withZone(dateTimeZone29);
        org.joda.time.DateTimeField dateTimeField40 = iSOChronology10.clockhourOfDay();
        org.joda.time.DurationField durationField41 = iSOChronology10.minutes();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 36000000 + "'", int4 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2022 + "'", int6 == 2022);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(iSOChronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "ISOChronology[+10:00]" + "'", str12, "ISOChronology[+10:00]");
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 2022L + "'", long18 == 2022L);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 36000000 + "'", int31 == 36000000);
        org.junit.Assert.assertNotNull(timeZone32);
        org.junit.Assert.assertEquals(timeZone32.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 36000000 + "'", int34 == 36000000);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(durationField41);
    }

    @Test
    public void test11233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11233");
        org.joda.time.chrono.ISOChronology iSOChronology1 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology1.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology1.centuryOfEra();
        org.joda.time.DurationField durationField4 = iSOChronology1.seconds();
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology1.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField6 = iSOChronology1.hourOfHalfday();
        long long10 = iSOChronology1.add((long) (short) 100, 1644849973425L, 2720);
        java.lang.String str11 = iSOChronology1.toString();
        java.lang.String str12 = iSOChronology1.toString();
        org.joda.time.DurationField durationField13 = iSOChronology1.weeks();
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology1.weekyear();
        long long18 = iSOChronology1.add((long) 596, 117L, 2839);
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime(4L, (org.joda.time.Chronology) iSOChronology1);
        org.joda.time.DurationField durationField20 = iSOChronology1.days();
        long long23 = durationField20.getValueAsLong(2820890L, 1644850390948L);
        org.junit.Assert.assertNotNull(iSOChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 4473991927716100L + "'", long10 == 4473991927716100L);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "ISOChronology[+10:00]" + "'", str11, "ISOChronology[+10:00]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "ISOChronology[+10:00]" + "'", str12, "ISOChronology[+10:00]");
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 332759L + "'", long18 == 332759L);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
    }

    @Test
    public void test11234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11234");
        org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.parse("2022-02-22T00:48:40.622");
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusMonths(53270622);
        int int4 = localDateTime3.size();
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 4 + "'", int4 == 4);
    }

    @Test
    public void test11235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11235");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.hourOfHalfday();
        java.util.TimeZone timeZone3 = null;
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forTimeZone(timeZone3);
        int int6 = dateTimeZone4.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime7 = org.joda.time.LocalDateTime.now(dateTimeZone4);
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.DateTime dateTime9 = localDateTime7.toDateTime(readableInstant8);
        java.util.TimeZone timeZone10 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        int int13 = dateTimeZone11.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime14 = org.joda.time.LocalDateTime.now(dateTimeZone11);
        org.joda.time.LocalDateTime localDateTime15 = org.joda.time.LocalDateTime.now(dateTimeZone11);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.minusYears(2022);
        org.joda.time.LocalDateTime.Property property18 = localDateTime17.era();
        int int19 = localDateTime7.compareTo((org.joda.time.ReadablePartial) localDateTime17);
        org.joda.time.chrono.ISOChronology iSOChronology20 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField21 = iSOChronology20.hourOfHalfday();
        java.lang.String str22 = iSOChronology20.toString();
        java.util.TimeZone timeZone23 = null;
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forTimeZone(timeZone23);
        int int26 = dateTimeZone24.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime27 = org.joda.time.LocalDateTime.now(dateTimeZone24);
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.DateTime dateTime29 = localDateTime27.toDateTime(readableInstant28);
        org.joda.time.Chronology chronology30 = dateTime29.getChronology();
        org.joda.time.DurationField durationField31 = chronology30.hours();
        org.joda.time.DurationField durationField32 = chronology30.months();
        org.joda.time.DateTimeField dateTimeField33 = chronology30.dayOfYear();
        java.util.TimeZone timeZone34 = null;
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forTimeZone(timeZone34);
        int int37 = dateTimeZone35.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime38 = org.joda.time.LocalDateTime.now(dateTimeZone35);
        int[] intArray41 = new int[] { (short) 0, (short) 0 };
        int int42 = dateTimeField33.getMinimumValue((org.joda.time.ReadablePartial) localDateTime38, intArray41);
        java.lang.String str44 = dateTimeField33.getAsShortText((long) 53166088);
        java.util.TimeZone timeZone45 = null;
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.forTimeZone(timeZone45);
        int int48 = dateTimeZone46.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime49 = org.joda.time.LocalDateTime.now(dateTimeZone46);
        int int50 = localDateTime49.getWeekyear();
        org.joda.time.DurationFieldType durationFieldType51 = org.joda.time.DurationFieldType.days();
        org.joda.time.LocalDateTime localDateTime53 = localDateTime49.withFieldAdded(durationFieldType51, 53166088);
        java.util.Locale locale54 = java.util.Locale.ROOT;
        java.lang.String str55 = dateTimeField33.getAsShortText((org.joda.time.ReadablePartial) localDateTime53, locale54);
        java.util.TimeZone timeZone56 = null;
        org.joda.time.DateTimeZone dateTimeZone57 = org.joda.time.DateTimeZone.forTimeZone(timeZone56);
        int int59 = dateTimeZone57.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime60 = org.joda.time.LocalDateTime.now(dateTimeZone57);
        int int61 = localDateTime60.getWeekyear();
        boolean boolean62 = localDateTime53.isEqual((org.joda.time.ReadablePartial) localDateTime60);
        int[] intArray64 = iSOChronology20.get((org.joda.time.ReadablePartial) localDateTime60, (long) 53166088);
        iSOChronology0.validate((org.joda.time.ReadablePartial) localDateTime7, intArray64);
        org.joda.time.DurationField durationField66 = iSOChronology0.minutes();
        java.util.TimeZone timeZone67 = null;
        org.joda.time.DateTimeZone dateTimeZone68 = org.joda.time.DateTimeZone.forTimeZone(timeZone67);
        int int70 = dateTimeZone68.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime71 = org.joda.time.LocalDateTime.now(dateTimeZone68);
        int int72 = localDateTime71.getDayOfYear();
        org.joda.time.LocalDateTime localDateTime74 = localDateTime71.withYearOfEra(2022);
        java.util.TimeZone timeZone75 = null;
        org.joda.time.DateTimeZone dateTimeZone76 = org.joda.time.DateTimeZone.forTimeZone(timeZone75);
        int int78 = dateTimeZone76.getOffset(100L);
        java.util.TimeZone timeZone79 = dateTimeZone76.toTimeZone();
        int int81 = dateTimeZone76.getStandardOffset((long) ' ');
        org.joda.time.DateTime dateTime82 = localDateTime74.toDateTime(dateTimeZone76);
        java.lang.String str84 = dateTimeZone76.getShortName(0L);
        long long86 = dateTimeZone76.convertUTCToLocal((long) 'u');
        org.joda.time.Chronology chronology87 = iSOChronology0.withZone(dateTimeZone76);
        org.joda.time.DateTimeField dateTimeField88 = iSOChronology0.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField89 = iSOChronology0.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField90 = iSOChronology0.hourOfHalfday();
        int int92 = dateTimeField90.getLeapAmount(1645454873955L);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 36000000 + "'", int6 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 36000000 + "'", int13 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(iSOChronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "ISOChronology[+10:00]" + "'", str22, "ISOChronology[+10:00]");
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 36000000 + "'", int26 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 36000000 + "'", int37 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[0, 0]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "2" + "'", str44, "2");
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 36000000 + "'", int48 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2022 + "'", int50 == 2022);
        org.junit.Assert.assertNotNull(durationFieldType51);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "347" + "'", str55, "347");
        org.junit.Assert.assertNotNull(dateTimeZone57);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 36000000 + "'", int59 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 2022 + "'", int61 == 2022);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[1970, 1, 2, 2766088]");
        org.junit.Assert.assertNotNull(durationField66);
        org.junit.Assert.assertNotNull(dateTimeZone68);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 36000000 + "'", int70 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 53 + "'", int72 == 53);
        org.junit.Assert.assertNotNull(localDateTime74);
        org.junit.Assert.assertNotNull(dateTimeZone76);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 36000000 + "'", int78 == 36000000);
        org.junit.Assert.assertNotNull(timeZone79);
        org.junit.Assert.assertEquals(timeZone79.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 36000000 + "'", int81 == 36000000);
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "+10:00" + "'", str84, "+10:00");
        org.junit.Assert.assertTrue("'" + long86 + "' != '" + 36000117L + "'", long86 == 36000117L);
        org.junit.Assert.assertNotNull(chronology87);
        org.junit.Assert.assertNotNull(dateTimeField88);
        org.junit.Assert.assertNotNull(dateTimeField89);
        org.junit.Assert.assertNotNull(dateTimeField90);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
    }

    @Test
    public void test11236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11236");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        int int5 = localDateTime4.getWeekyear();
        int int6 = localDateTime4.getDayOfYear();
        org.joda.time.chrono.ISOChronology iSOChronology7 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField8 = iSOChronology7.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField9 = iSOChronology7.yearOfEra();
        org.joda.time.DurationField durationField10 = iSOChronology7.minutes();
        boolean boolean11 = localDateTime4.equals((java.lang.Object) iSOChronology7);
        java.util.TimeZone timeZone12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone12);
        int int15 = dateTimeZone13.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime16 = org.joda.time.LocalDateTime.now(dateTimeZone13);
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.DateTime dateTime18 = localDateTime16.toDateTime(readableInstant17);
        java.util.TimeZone timeZone19 = null;
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forTimeZone(timeZone19);
        int int22 = dateTimeZone20.getOffset(100L);
        org.joda.time.DateTime dateTime23 = localDateTime16.toDateTime(dateTimeZone20);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime16.plusMinutes((-1));
        org.joda.time.LocalDateTime.Property property26 = localDateTime25.hourOfDay();
        org.joda.time.LocalDateTime localDateTime27 = property26.withMinimumValue();
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.withWeekyear((-19044));
        org.joda.time.LocalDateTime.Property property30 = localDateTime29.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime32 = localDateTime29.minusMillis(2839);
        org.joda.time.ReadableDuration readableDuration33 = null;
        org.joda.time.LocalDateTime localDateTime34 = localDateTime32.plus(readableDuration33);
        org.joda.time.LocalDateTime.Property property35 = localDateTime32.weekyear();
        java.util.TimeZone timeZone36 = null;
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forTimeZone(timeZone36);
        int int39 = dateTimeZone37.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime40 = org.joda.time.LocalDateTime.now(dateTimeZone37);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray41 = localDateTime40.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = org.joda.time.DateTimeFieldType.hourOfDay();
        int int43 = localDateTime40.get(dateTimeFieldType42);
        org.joda.time.LocalDateTime.Property property44 = localDateTime40.dayOfWeek();
        boolean boolean45 = property44.isLeap();
        long long46 = property44.remainder();
        org.joda.time.LocalDateTime localDateTime47 = property44.getLocalDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.LocalDateTime localDateTime50 = localDateTime47.withField(dateTimeFieldType48, (int) (short) 10);
        org.joda.time.DurationFieldType durationFieldType51 = dateTimeFieldType48.getDurationType();
        org.joda.time.LocalDateTime localDateTime53 = localDateTime32.withFieldAdded(durationFieldType51, 3156772);
        org.joda.time.LocalDateTime localDateTime55 = localDateTime4.withFieldAdded(durationFieldType51, 3043777);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 36000000 + "'", int3 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2022 + "'", int5 == 2022);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 53 + "'", int6 == 53);
        org.junit.Assert.assertNotNull(iSOChronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 36000000 + "'", int15 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 36000000 + "'", int22 == 36000000);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 36000000 + "'", int39 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray41);
        org.junit.Assert.assertNotNull(dateTimeFieldType42);
// flaky:         org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long46 + "' != '" + 3265915L + "'", long46 == 3265915L);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(dateTimeFieldType48);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(durationFieldType51);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(localDateTime55);
    }

    @Test
    public void test11237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11237");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        int int5 = localDateTime4.getWeekyear();
        org.joda.time.LocalDateTime.Property property6 = localDateTime4.millisOfDay();
        org.joda.time.LocalDateTime localDateTime7 = property6.roundCeilingCopy();
        java.util.TimeZone timeZone8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        int int11 = dateTimeZone9.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime12 = org.joda.time.LocalDateTime.now(dateTimeZone9);
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.DateTime dateTime14 = localDateTime12.toDateTime(readableInstant13);
        org.joda.time.Instant instant15 = dateTime14.toInstant();
        java.lang.String str16 = instant15.toString();
        int int17 = property6.getDifference((org.joda.time.ReadableInstant) instant15);
        java.util.TimeZone timeZone18 = null;
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forTimeZone(timeZone18);
        int int21 = dateTimeZone19.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime22 = org.joda.time.LocalDateTime.now(dateTimeZone19);
        int int23 = localDateTime22.getWeekyear();
        org.joda.time.LocalDateTime.Property property24 = localDateTime22.minuteOfHour();
        long long25 = property24.remainder();
        java.util.Locale.Builder builder26 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder29 = builder26.setExtension('x', "jpn");
        java.util.Locale locale30 = java.util.Locale.GERMAN;
        java.util.Locale locale31 = java.util.Locale.GERMAN;
        java.lang.String str32 = locale30.getDisplayCountry(locale31);
        java.util.Locale locale33 = locale30.stripExtensions();
        java.lang.String str34 = locale30.getDisplayName();
        java.util.Locale.Builder builder35 = builder29.setLocale(locale30);
        java.lang.String str36 = locale30.getVariant();
        int int37 = property24.getMaximumShortTextLength(locale30);
        org.joda.time.DurationField durationField38 = property24.getDurationField();
        java.lang.String str39 = durationField38.getName();
        boolean boolean40 = instant15.equals((java.lang.Object) durationField38);
        org.joda.time.Chronology chronology41 = instant15.getChronology();
        org.joda.time.Chronology chronology42 = instant15.getChronology();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 36000000 + "'", int3 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2022 + "'", int5 == 2022);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 36000000 + "'", int11 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(instant15);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "2022-02-21T14:54:25.963Z" + "'", str16, "2022-02-21T14:54:25.963Z");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 36000000 + "'", int17 == 36000000);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 36000000 + "'", int21 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2022 + "'", int23 == 2022);
        org.junit.Assert.assertNotNull(property24);
// flaky:         org.junit.Assert.assertTrue("'" + long25 + "' != '" + 25963L + "'", long25 == 25963L);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "de");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "de");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "de");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Deutsch" + "'", str34, "Deutsch");
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2 + "'", int37 == 2);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "minutes" + "'", str39, "minutes");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(chronology42);
    }

    @Test
    public void test11238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11238");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        int int5 = localDateTime4.getWeekyear();
        org.joda.time.LocalDateTime.Property property6 = localDateTime4.millisOfDay();
        java.util.Locale locale7 = java.util.Locale.GERMAN;
        java.util.Locale locale8 = java.util.Locale.GERMAN;
        java.lang.String str9 = locale7.getDisplayCountry(locale8);
        java.util.Locale locale10 = locale7.stripExtensions();
        int int11 = property6.getMaximumShortTextLength(locale7);
        org.joda.time.Interval interval12 = property6.toInterval();
        org.joda.time.LocalDateTime localDateTime14 = property6.setCopy(1);
        org.joda.time.LocalDateTime.Property property15 = localDateTime14.era();
        org.joda.time.LocalDateTime localDateTime16 = property15.roundFloorCopy();
        org.joda.time.LocalDateTime.Property property17 = localDateTime16.millisOfDay();
        java.util.TimeZone timeZone18 = null;
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forTimeZone(timeZone18);
        int int21 = dateTimeZone19.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime22 = org.joda.time.LocalDateTime.now(dateTimeZone19);
        int int23 = localDateTime22.getWeekyear();
        org.joda.time.LocalDateTime.Property property24 = localDateTime22.minuteOfHour();
        org.joda.time.LocalDateTime.Property property25 = localDateTime22.dayOfYear();
        java.util.TimeZone timeZone26 = null;
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forTimeZone(timeZone26);
        int int29 = dateTimeZone27.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime30 = org.joda.time.LocalDateTime.now(dateTimeZone27);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray31 = localDateTime30.getFieldTypes();
        int int32 = property25.compareTo((org.joda.time.ReadablePartial) localDateTime30);
        int int33 = property25.getMinimumValueOverall();
        int int34 = property25.getMaximumValue();
        org.joda.time.chrono.ISOChronology iSOChronology35 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField36 = iSOChronology35.hourOfHalfday();
        java.lang.String str37 = iSOChronology35.toString();
        org.joda.time.DateTimeField dateTimeField38 = iSOChronology35.era();
        org.joda.time.DurationField durationField39 = iSOChronology35.centuries();
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        long long43 = iSOChronology35.add(readablePeriod40, (long) 2022, (int) (byte) 100);
        org.joda.time.DateTimeZone dateTimeZone44 = iSOChronology35.getZone();
        java.util.Locale locale45 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet46 = locale45.getExtensionKeys();
        java.util.Iterator<java.lang.Character> charItor47 = charSet46.iterator();
        java.util.ArrayList[] arrayListArray49 = new java.util.ArrayList[0];
        @SuppressWarnings("unchecked")
        java.util.ArrayList<java.util.Locale.LanguageRange>[] languageRangeListArray50 = (java.util.ArrayList<java.util.Locale.LanguageRange>[]) arrayListArray49;
        java.util.ArrayList<java.util.Locale.LanguageRange>[] languageRangeListArray51 = charSet46.toArray((java.util.ArrayList<java.util.Locale.LanguageRange>[]) arrayListArray49);
        java.util.TimeZone timeZone52 = null;
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.forTimeZone(timeZone52);
        int int55 = dateTimeZone53.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime56 = org.joda.time.LocalDateTime.now(dateTimeZone53);
        int int57 = localDateTime56.getWeekyear();
        org.joda.time.LocalDateTime.Property property58 = localDateTime56.millisOfDay();
        java.util.TimeZone timeZone59 = null;
        org.joda.time.DateTimeZone dateTimeZone60 = org.joda.time.DateTimeZone.forTimeZone(timeZone59);
        int int62 = dateTimeZone60.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime63 = org.joda.time.LocalDateTime.now(dateTimeZone60);
        org.joda.time.ReadableInstant readableInstant64 = null;
        org.joda.time.DateTime dateTime65 = localDateTime63.toDateTime(readableInstant64);
        java.util.TimeZone timeZone66 = null;
        org.joda.time.DateTimeZone dateTimeZone67 = org.joda.time.DateTimeZone.forTimeZone(timeZone66);
        int int69 = dateTimeZone67.getOffset(100L);
        org.joda.time.DateTime dateTime70 = localDateTime63.toDateTime(dateTimeZone67);
        int int71 = property58.compareTo((org.joda.time.ReadableInstant) dateTime70);
        boolean boolean72 = charSet46.equals((java.lang.Object) dateTime70);
        org.joda.time.DateTimeZone dateTimeZone73 = dateTime70.getZone();
        int int74 = dateTimeZone44.getOffset((org.joda.time.ReadableInstant) dateTime70);
        int int75 = property25.getDifference((org.joda.time.ReadableInstant) dateTime70);
        long long76 = property17.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime70);
        org.joda.time.DateTimeZone dateTimeZone77 = dateTime70.getZone();
        int int79 = dateTimeZone77.getStandardOffset(2082931200000L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 36000000 + "'", int3 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2022 + "'", int5 == 2022);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "de");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "de");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "de");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 8 + "'", int11 == 8);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 36000000 + "'", int21 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2022 + "'", int23 == 2022);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 36000000 + "'", int29 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 365 + "'", int34 == 365);
        org.junit.Assert.assertNotNull(iSOChronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "ISOChronology[+10:00]" + "'", str37, "ISOChronology[+10:00]");
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 2022L + "'", long43 == 2022L);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet46);
        org.junit.Assert.assertNotNull(charItor47);
        org.junit.Assert.assertNotNull(arrayListArray49);
        org.junit.Assert.assertNotNull(languageRangeListArray50);
        org.junit.Assert.assertNotNull(languageRangeListArray51);
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 36000000 + "'", int55 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 2022 + "'", int57 == 2022);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNotNull(dateTimeZone60);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 36000000 + "'", int62 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(dateTimeZone67);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 36000000 + "'", int69 == 36000000);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(dateTimeZone73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 36000000 + "'", int74 == 36000000);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + long76 + "' != '" + (-63781052065997L) + "'", long76 == (-63781052065997L));
        org.junit.Assert.assertNotNull(dateTimeZone77);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 36000000 + "'", int79 == 36000000);
    }

    @Test
    public void test11239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11239");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.centuryOfEra();
        org.joda.time.DurationField durationField3 = iSOChronology0.seconds();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.monthOfYear();
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology0.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField6 = iSOChronology0.weekyear();
        org.joda.time.DateTimeField dateTimeField7 = iSOChronology0.monthOfYear();
        org.joda.time.DateTimeField dateTimeField8 = iSOChronology0.yearOfEra();
        org.joda.time.DurationField durationField9 = iSOChronology0.months();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology0.clockhourOfHalfday();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
    }

    @Test
    public void test11240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11240");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        int int5 = localDateTime4.getWeekyear();
        org.joda.time.LocalDateTime.Property property6 = localDateTime4.minuteOfHour();
        org.joda.time.LocalDateTime.Property property7 = localDateTime4.dayOfYear();
        java.util.TimeZone timeZone8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        int int11 = dateTimeZone9.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime12 = org.joda.time.LocalDateTime.now(dateTimeZone9);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray13 = localDateTime12.getFieldTypes();
        int int14 = property7.compareTo((org.joda.time.ReadablePartial) localDateTime12);
        int int15 = localDateTime12.getYearOfCentury();
        org.joda.time.LocalDateTime.Property property16 = localDateTime12.millisOfDay();
        org.joda.time.LocalDateTime.Property property17 = localDateTime12.era();
        int int18 = localDateTime12.getMillisOfDay();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime12.plusSeconds(53166088);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.withMillisOfDay(49711931);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType24 = localDateTime20.getFieldType(49890869);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 49890869");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 36000000 + "'", int3 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2022 + "'", int5 == 2022);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 36000000 + "'", int11 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 22 + "'", int15 == 22);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(property17);
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + 3266067 + "'", int18 == 3266067);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
    }

    @Test
    public void test11241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11241");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.DateTime dateTime6 = localDateTime4.toDateTime(readableInstant5);
        java.util.TimeZone timeZone7 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forTimeZone(timeZone7);
        int int10 = dateTimeZone8.getOffset(100L);
        org.joda.time.DateTime dateTime11 = localDateTime4.toDateTime(dateTimeZone8);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime4.plusMinutes((-1));
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.hourOfDay();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime13.plusSeconds((int) (byte) -1);
        org.joda.time.LocalDateTime.Property property17 = localDateTime16.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField18 = property17.getField();
        int int19 = property17.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime20 = property17.roundHalfEvenCopy();
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.minus(readableDuration21);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 36000000 + "'", int3 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 36000000 + "'", int10 == 36000000);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2922789 + "'", int19 == 2922789);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
    }

    @Test
    public void test11242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11242");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        int int5 = localDateTime4.getWeekyear();
        java.util.TimeZone timeZone6 = null;
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forTimeZone(timeZone6);
        int int9 = dateTimeZone7.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime10 = org.joda.time.LocalDateTime.now(dateTimeZone7);
        int int11 = localDateTime10.getWeekyear();
        org.joda.time.LocalDateTime.Property property12 = localDateTime10.millisOfDay();
        java.util.Locale locale13 = java.util.Locale.GERMAN;
        java.util.Locale locale14 = java.util.Locale.GERMAN;
        java.lang.String str15 = locale13.getDisplayCountry(locale14);
        java.util.Locale locale16 = locale13.stripExtensions();
        int int17 = property12.getMaximumShortTextLength(locale13);
        org.joda.time.Interval interval18 = property12.toInterval();
        org.joda.time.LocalDateTime localDateTime20 = property12.setCopy(1);
        org.joda.time.LocalDateTime.Property property21 = localDateTime20.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime20.withMillisOfDay((int) (byte) 10);
        int int24 = localDateTime23.getMinuteOfHour();
        org.joda.time.LocalDateTime localDateTime25 = localDateTime4.withFields((org.joda.time.ReadablePartial) localDateTime23);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.withYear(14);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime25.minusHours(2842796);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.plusSeconds(2852990);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime33 = localDateTime31.withWeekOfWeekyear(53262345);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 53262345 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 36000000 + "'", int3 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2022 + "'", int5 == 2022);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 36000000 + "'", int9 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2022 + "'", int11 == 2022);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "de");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "de");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "de");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 8 + "'", int17 == 8);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
    }

    @Test
    public void test11243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11243");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime5 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.withMillisOfSecond((int) '4');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = null;
        java.lang.String str9 = localDateTime7.toString(dateTimeFormatter8);
        org.joda.time.LocalDateTime.Property property10 = localDateTime7.dayOfYear();
        org.joda.time.LocalDateTime localDateTime12 = property10.addWrapFieldToCopy(2929706);
        int int13 = localDateTime12.getDayOfMonth();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField15 = localDateTime12.getField(3185314);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 3185314");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 36000000 + "'", int3 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "2022-02-22T00:54:26.052" + "'", str9, "2022-02-22T00:54:26.052");
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 26 + "'", int13 == 26);
    }

    @Test
    public void test11244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11244");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime5 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusMinutes((int) ' ');
        java.lang.String str8 = localDateTime5.toString();
        int int9 = localDateTime5.getDayOfMonth();
        org.joda.time.LocalDateTime.Property property10 = localDateTime5.year();
        long long11 = property10.remainder();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 36000000 + "'", int3 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "2022-02-22T00:54:26.225" + "'", str8, "2022-02-22T00:54:26.225");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 22 + "'", int9 == 22);
        org.junit.Assert.assertNotNull(property10);
// flaky:         org.junit.Assert.assertTrue("'" + long11 + "' != '" + 4496066225L + "'", long11 == 4496066225L);
    }

    @Test
    public void test11245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11245");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffset(100L);
        java.util.TimeZone timeZone4 = dateTimeZone1.toTimeZone();
        int int6 = dateTimeZone1.getStandardOffset((long) ' ');
        boolean boolean8 = dateTimeZone1.isStandardOffset((long) '4');
        boolean boolean9 = dateTimeZone1.isFixed();
        java.util.TimeZone timeZone10 = dateTimeZone1.toTimeZone();
        java.util.TimeZone.setDefault(timeZone10);
        java.util.TimeZone timeZone13 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forTimeZone(timeZone13);
        int int16 = dateTimeZone14.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime17 = org.joda.time.LocalDateTime.now(dateTimeZone14);
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.DateTime dateTime19 = localDateTime17.toDateTime(readableInstant18);
        org.joda.time.Chronology chronology20 = dateTime19.getChronology();
        org.joda.time.DurationField durationField21 = chronology20.hours();
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime((long) 52, chronology20);
        org.joda.time.DateTimeField[] dateTimeFieldArray23 = localDateTime22.getFields();
        java.util.Date date24 = localDateTime22.toDate();
        org.joda.time.LocalDateTime localDateTime25 = org.joda.time.LocalDateTime.fromDateFields(date24);
        boolean boolean26 = timeZone10.inDaylightTime(date24);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 36000000 + "'", int3 == 36000000);
        org.junit.Assert.assertNotNull(timeZone4);
        org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 36000000 + "'", int6 == 36000000);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(timeZone10);
        org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 36000000 + "'", int16 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeFieldArray23);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 10:00:00 GMT+10:00 1970");
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test11246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11246");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.DateTime dateTime6 = localDateTime4.toDateTime(readableInstant5);
        org.joda.time.Chronology chronology7 = dateTime6.getChronology();
        org.joda.time.DurationField durationField8 = chronology7.hours();
        org.joda.time.DurationField durationField9 = chronology7.months();
        org.joda.time.DateTimeField dateTimeField10 = chronology7.dayOfYear();
        java.util.TimeZone timeZone11 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        int int14 = dateTimeZone12.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime15 = org.joda.time.LocalDateTime.now(dateTimeZone12);
        int[] intArray18 = new int[] { (short) 0, (short) 0 };
        int int19 = dateTimeField10.getMinimumValue((org.joda.time.ReadablePartial) localDateTime15, intArray18);
        int int21 = dateTimeField10.getMinimumValue((long) 100);
        java.util.TimeZone timeZone22 = null;
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        int int25 = dateTimeZone23.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime26 = org.joda.time.LocalDateTime.now(dateTimeZone23);
        int int27 = localDateTime26.getWeekyear();
        org.joda.time.LocalDateTime.Property property28 = localDateTime26.minuteOfHour();
        int int29 = dateTimeField10.getMaximumValue((org.joda.time.ReadablePartial) localDateTime26);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime26.withCenturyOfEra(1);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime26.minusMinutes((int) ' ');
        org.joda.time.LocalDateTime.Property property34 = localDateTime33.yearOfEra();
        java.lang.String str35 = property34.toString();
        java.util.Locale locale37 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime38 = property34.setCopy("2022-02-21T13:50:08.052", locale37);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2022-02-21T13:50:08.052\" for yearOfEra is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 36000000 + "'", int3 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 36000000 + "'", int14 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[0, 0]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 36000000 + "'", int25 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2022 + "'", int27 == 2022);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 365 + "'", int29 == 365);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Property[yearOfEra]" + "'", str35, "Property[yearOfEra]");
    }

    @Test
    public void test11247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11247");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("2966320", strMap1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=2966320");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test11248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11248");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray5 = localDateTime4.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.plusWeeks(2022);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.LocalDateTime localDateTime9 = localDateTime4.plus(readablePeriod8);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime4.minusYears(44);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime4.withYearOfEra(30);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 36000000 + "'", int3 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
    }

    @Test
    public void test11249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11249");
        java.util.Locale locale1 = new java.util.Locale("14");
        java.util.Locale locale2 = locale1.stripExtensions();
        java.lang.String str3 = locale1.getCountry();
        java.util.Locale locale4 = locale1.stripExtensions();
        java.lang.String str5 = locale1.getCountry();
        org.junit.Assert.assertEquals(locale1.toString(), "14");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "14");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "14");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
    }

    @Test
    public void test11250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11250");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("49712248");
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Greenwich Zeit");
    }

    @Test
    public void test11251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11251");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(41);
        java.lang.String str2 = dateTimeZone1.toString();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00:00.041" + "'", str2, "+00:00:00.041");
    }

    @Test
    public void test11252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11252");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime5 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusMinutes((int) ' ');
        org.joda.time.LocalDateTime localDateTime9 = localDateTime5.withYear(53166088);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.plusMinutes(0);
        int int12 = localDateTime9.size();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime9.minusMinutes(36);
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.LocalDateTime localDateTime16 = localDateTime9.minus(readableDuration15);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime9.plusMillis((int) (byte) -1);
        org.joda.time.LocalDateTime.Property property19 = localDateTime9.monthOfYear();
        org.joda.time.LocalDateTime.Property property20 = localDateTime9.millisOfSecond();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 36000000 + "'", int3 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4 + "'", int12 == 4);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(property20);
    }

    @Test
    public void test11253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11253");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        int int5 = localDateTime4.getWeekyear();
        org.joda.time.LocalDateTime.Property property6 = localDateTime4.millisOfDay();
        java.util.TimeZone timeZone7 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forTimeZone(timeZone7);
        int int10 = dateTimeZone8.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now(dateTimeZone8);
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.DateTime dateTime13 = localDateTime11.toDateTime(readableInstant12);
        java.util.TimeZone timeZone14 = null;
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forTimeZone(timeZone14);
        int int17 = dateTimeZone15.getOffset(100L);
        org.joda.time.DateTime dateTime18 = localDateTime11.toDateTime(dateTimeZone15);
        int int19 = property6.compareTo((org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.LocalDateTime localDateTime20 = property6.roundHalfEvenCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.LocalDateTime.Property property22 = localDateTime20.property(dateTimeFieldType21);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.Chronology chronology24 = null;
        boolean boolean25 = dateTimeFieldType23.isSupported(chronology24);
        boolean boolean26 = localDateTime20.isSupported(dateTimeFieldType23);
        org.joda.time.chrono.ISOChronology iSOChronology27 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField28 = iSOChronology27.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField29 = iSOChronology27.centuryOfEra();
        org.joda.time.DurationField durationField30 = iSOChronology27.centuries();
        org.joda.time.DurationField durationField31 = iSOChronology27.hours();
        org.joda.time.DurationField durationField32 = iSOChronology27.years();
        org.joda.time.DurationField durationField33 = iSOChronology27.halfdays();
        org.joda.time.DateTimeField dateTimeField34 = iSOChronology27.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField35 = dateTimeFieldType23.getField((org.joda.time.Chronology) iSOChronology27);
        java.lang.String str37 = dateTimeField35.getAsText(1645454968038L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 36000000 + "'", int3 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2022 + "'", int5 == 2022);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 36000000 + "'", int10 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 36000000 + "'", int17 == 36000000);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(iSOChronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "53" + "'", str37, "53");
    }

    @Test
    public void test11254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11254");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffset(100L);
        java.util.TimeZone timeZone4 = dateTimeZone1.toTimeZone();
        int int6 = dateTimeZone1.getStandardOffset((long) ' ');
        boolean boolean8 = dateTimeZone1.isStandardOffset((long) '4');
        boolean boolean9 = dateTimeZone1.isFixed();
        java.util.TimeZone timeZone10 = dateTimeZone1.toTimeZone();
        java.util.TimeZone timeZone11 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        int int14 = dateTimeZone12.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime15 = org.joda.time.LocalDateTime.now(dateTimeZone12);
        int int16 = localDateTime15.getWeekyear();
        org.joda.time.LocalDateTime.Property property17 = localDateTime15.minuteOfHour();
        int int18 = localDateTime15.getHourOfDay();
        org.joda.time.LocalDateTime.Property property19 = localDateTime15.dayOfWeek();
        boolean boolean20 = dateTimeZone1.isLocalDateTimeGap(localDateTime15);
        org.joda.time.chrono.ISOChronology iSOChronology21 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        org.joda.time.DurationField durationField22 = iSOChronology21.centuries();
        org.joda.time.Chronology chronology23 = iSOChronology21.withUTC();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 36000000 + "'", int3 == 36000000);
        org.junit.Assert.assertNotNull(timeZone4);
        org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 36000000 + "'", int6 == 36000000);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(timeZone10);
        org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 36000000 + "'", int14 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2022 + "'", int16 == 2022);
        org.junit.Assert.assertNotNull(property17);
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(iSOChronology21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(chronology23);
    }

    @Test
    public void test11255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11255");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.yearOfEra();
        org.joda.time.DurationField durationField3 = iSOChronology0.minutes();
        org.joda.time.DurationField durationField4 = iSOChronology0.months();
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology0.era();
        org.joda.time.DurationField durationField6 = iSOChronology0.halfdays();
        org.joda.time.DateTimeField dateTimeField7 = iSOChronology0.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField8 = iSOChronology0.dayOfYear();
        org.joda.time.DateTimeField dateTimeField9 = iSOChronology0.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology0.yearOfCentury();
        org.joda.time.DurationField durationField11 = iSOChronology0.minutes();
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        long long15 = iSOChronology0.add(readablePeriod12, 1645455022864L, 1140000);
        java.lang.Object obj16 = null;
        boolean boolean17 = iSOChronology0.equals(obj16);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1645455022864L + "'", long15 == 1645455022864L);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test11256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11256");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.hourOfHalfday();
        java.lang.String str2 = iSOChronology0.toString();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.era();
        org.joda.time.DurationField durationField4 = iSOChronology0.centuries();
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        long long8 = iSOChronology0.add(readablePeriod5, (long) 2022, (int) (byte) 100);
        org.joda.time.DateTimeField dateTimeField9 = iSOChronology0.dayOfYear();
        org.joda.time.DurationField durationField10 = iSOChronology0.months();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology0.dayOfMonth();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ISOChronology[+10:00]" + "'", str2, "ISOChronology[+10:00]");
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 2022L + "'", long8 == 2022L);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
    }

    @Test
    public void test11257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11257");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        int int5 = localDateTime4.getWeekyear();
        org.joda.time.LocalDateTime.Property property6 = localDateTime4.millisOfDay();
        java.util.TimeZone timeZone7 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forTimeZone(timeZone7);
        int int10 = dateTimeZone8.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now(dateTimeZone8);
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.DateTime dateTime13 = localDateTime11.toDateTime(readableInstant12);
        java.util.TimeZone timeZone14 = null;
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forTimeZone(timeZone14);
        int int17 = dateTimeZone15.getOffset(100L);
        org.joda.time.DateTime dateTime18 = localDateTime11.toDateTime(dateTimeZone15);
        int int19 = property6.compareTo((org.joda.time.ReadableInstant) dateTime18);
        java.util.TimeZone timeZone20 = null;
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forTimeZone(timeZone20);
        int int23 = dateTimeZone21.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime24 = org.joda.time.LocalDateTime.now(dateTimeZone21);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray25 = localDateTime24.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.hourOfDay();
        int int27 = localDateTime24.get(dateTimeFieldType26);
        boolean boolean28 = dateTime18.isSupported(dateTimeFieldType26);
        org.joda.time.DurationFieldType durationFieldType29 = dateTimeFieldType26.getRangeDurationType();
        java.lang.String str30 = dateTimeFieldType26.getName();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 36000000 + "'", int3 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2022 + "'", int5 == 2022);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 36000000 + "'", int10 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 36000000 + "'", int17 == 36000000);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 36000000 + "'", int23 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray25);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
// flaky:         org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(durationFieldType29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "hourOfDay" + "'", str30, "hourOfDay");
    }

    @Test
    public void test11258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11258");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(3538910881347L);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withDayOfYear(2938203);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2938203 for dayOfYear must be in the range [1,365]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test11259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11259");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        int int5 = localDateTime4.getWeekyear();
        org.joda.time.LocalDateTime.Property property6 = localDateTime4.millisOfDay();
        java.util.TimeZone timeZone7 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forTimeZone(timeZone7);
        int int10 = dateTimeZone8.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now(dateTimeZone8);
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.DateTime dateTime13 = localDateTime11.toDateTime(readableInstant12);
        java.util.TimeZone timeZone14 = null;
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forTimeZone(timeZone14);
        int int17 = dateTimeZone15.getOffset(100L);
        org.joda.time.DateTime dateTime18 = localDateTime11.toDateTime(dateTimeZone15);
        int int19 = property6.compareTo((org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.LocalDateTime localDateTime20 = property6.roundHalfEvenCopy();
        org.joda.time.LocalDateTime.Property property21 = localDateTime20.centuryOfEra();
        int int22 = property21.get();
        java.util.TimeZone timeZone23 = null;
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forTimeZone(timeZone23);
        int int26 = dateTimeZone24.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime27 = org.joda.time.LocalDateTime.now(dateTimeZone24);
        org.joda.time.LocalDateTime localDateTime28 = org.joda.time.LocalDateTime.now(dateTimeZone24);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.minusMinutes((int) ' ');
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.LocalDateTime localDateTime32 = localDateTime28.plus(readablePeriod31);
        org.joda.time.LocalDateTime.Property property33 = localDateTime28.dayOfMonth();
        boolean boolean34 = property33.isLeap();
        java.util.TimeZone timeZone35 = null;
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forTimeZone(timeZone35);
        int int38 = dateTimeZone36.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime39 = org.joda.time.LocalDateTime.now(dateTimeZone36);
        org.joda.time.ReadableInstant readableInstant40 = null;
        org.joda.time.DateTime dateTime41 = localDateTime39.toDateTime(readableInstant40);
        org.joda.time.Chronology chronology42 = dateTime41.getChronology();
        org.joda.time.DurationField durationField43 = chronology42.hours();
        org.joda.time.DurationField durationField44 = chronology42.months();
        org.joda.time.DateTimeField dateTimeField45 = chronology42.dayOfYear();
        java.util.TimeZone timeZone46 = null;
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.forTimeZone(timeZone46);
        int int49 = dateTimeZone47.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime50 = org.joda.time.LocalDateTime.now(dateTimeZone47);
        int[] intArray53 = new int[] { (short) 0, (short) 0 };
        int int54 = dateTimeField45.getMinimumValue((org.joda.time.ReadablePartial) localDateTime50, intArray53);
        java.lang.String str56 = dateTimeField45.getAsShortText((long) 53166088);
        java.util.Locale locale58 = java.util.Locale.JAPANESE;
        java.lang.String str59 = locale58.getDisplayLanguage();
        java.util.Locale locale60 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet61 = locale60.getExtensionKeys();
        java.lang.String str62 = locale58.getDisplayLanguage(locale60);
        java.lang.String str63 = dateTimeField45.getAsText(0L, locale60);
        java.lang.String str64 = property33.getAsText(locale60);
        org.joda.time.LocalDateTime localDateTime65 = property33.getLocalDateTime();
        java.util.TimeZone timeZone66 = null;
        org.joda.time.DateTimeZone dateTimeZone67 = org.joda.time.DateTimeZone.forTimeZone(timeZone66);
        int int69 = dateTimeZone67.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime70 = org.joda.time.LocalDateTime.now(dateTimeZone67);
        org.joda.time.LocalDateTime localDateTime71 = org.joda.time.LocalDateTime.now(dateTimeZone67);
        org.joda.time.LocalDateTime localDateTime73 = localDateTime71.plusSeconds((int) (short) 10);
        int int74 = localDateTime71.size();
        org.joda.time.DateTime dateTime75 = localDateTime71.toDateTime();
        int int76 = property33.getDifference((org.joda.time.ReadableInstant) dateTime75);
        org.joda.time.DateTimeFieldType dateTimeFieldType77 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DurationFieldType durationFieldType78 = dateTimeFieldType77.getDurationType();
        java.lang.String str79 = dateTimeFieldType77.getName();
        boolean boolean80 = dateTime75.isSupported(dateTimeFieldType77);
        long long81 = dateTime75.getMillis();
        java.lang.String str82 = dateTime75.toString();
        org.joda.time.Instant instant83 = dateTime75.toInstant();
        long long84 = property21.getDifferenceAsLong((org.joda.time.ReadableInstant) instant83);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 36000000 + "'", int3 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2022 + "'", int5 == 2022);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 36000000 + "'", int10 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 36000000 + "'", int17 == 36000000);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 20 + "'", int22 == 20);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 36000000 + "'", int26 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 36000000 + "'", int38 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(durationField43);
        org.junit.Assert.assertNotNull(durationField44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 36000000 + "'", int49 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[0, 0]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "2" + "'", str56, "2");
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "Japanisch" + "'", str59, "Japanisch");
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "\uc77c\ubcf8\uc5b4" + "'", str62, "\uc77c\ubcf8\uc5b4");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "1" + "'", str63, "1");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "22" + "'", str64, "22");
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertNotNull(dateTimeZone67);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 36000000 + "'", int69 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime70);
        org.junit.Assert.assertNotNull(localDateTime71);
        org.junit.Assert.assertNotNull(localDateTime73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 4 + "'", int74 == 4);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType77);
        org.junit.Assert.assertNotNull(durationFieldType78);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "year" + "'", str79, "year");
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
// flaky:         org.junit.Assert.assertTrue("'" + long81 + "' != '" + 1645455266668L + "'", long81 == 1645455266668L);
// flaky:         org.junit.Assert.assertEquals("'" + str82 + "' != '" + "2022-02-22T00:54:26.668+10:00" + "'", str82, "2022-02-22T00:54:26.668+10:00");
        org.junit.Assert.assertNotNull(instant83);
        org.junit.Assert.assertTrue("'" + long84 + "' != '" + 0L + "'", long84 == 0L);
    }

    @Test
    public void test11260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11260");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.centuryOfEra();
        org.joda.time.DurationField durationField3 = iSOChronology0.seconds();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology0.hourOfHalfday();
        java.util.TimeZone timeZone6 = null;
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forTimeZone(timeZone6);
        int int9 = dateTimeZone7.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime10 = org.joda.time.LocalDateTime.now(dateTimeZone7);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray11 = localDateTime10.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.hourOfDay();
        int int13 = localDateTime10.get(dateTimeFieldType12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime10.minusWeeks(1);
        long long17 = iSOChronology0.set((org.joda.time.ReadablePartial) localDateTime15, (long) 0);
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology0.secondOfDay();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology0.yearOfEra();
        org.joda.time.DurationField durationField20 = iSOChronology0.months();
        org.joda.time.DateTimeField dateTimeField21 = iSOChronology0.minuteOfDay();
        // The following exception was thrown during execution in test generation
        try {
            long long29 = iSOChronology0.getDateTimeMillis(339, 140, 49788706, 49837362, 3034052, 0, 2967);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 49837362 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 36000000 + "'", int9 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray11);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(localDateTime15);
// flaky:         org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1644850466758L + "'", long17 == 1644850466758L);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
    }

    @Test
    public void test11261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11261");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(49689848, 2930046);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minutes out of range: 2930046");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test11262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11262");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.String> strSet1 = locale0.getUnicodeLocaleKeys();
        java.util.Set<java.lang.Character> charSet2 = locale0.getExtensionKeys();
        java.util.Locale locale3 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet4 = locale3.getExtensionKeys();
        java.util.Iterator<java.lang.Character> charItor5 = charSet4.iterator();
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet7 = locale6.getExtensionKeys();
        java.util.Iterator<java.lang.Character> charItor8 = charSet7.iterator();
        boolean boolean9 = charSet4.containsAll((java.util.Collection<java.lang.Character>) charSet7);
        java.util.TimeZone timeZone10 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        int int13 = dateTimeZone11.getOffset(100L);
        java.util.TimeZone timeZone14 = dateTimeZone11.toTimeZone();
        org.joda.time.DateTimeZone[] dateTimeZoneArray15 = new org.joda.time.DateTimeZone[] { dateTimeZone11 };
        org.joda.time.DateTimeZone[] dateTimeZoneArray16 = charSet7.toArray(dateTimeZoneArray15);
        java.util.Locale locale17 = java.util.Locale.GERMAN;
        java.lang.String str18 = locale17.getDisplayScript();
        java.lang.String str20 = locale17.getExtension('x');
        java.util.Set<java.lang.Character> charSet21 = locale17.getExtensionKeys();
        boolean boolean22 = charSet7.retainAll((java.util.Collection<java.lang.Character>) charSet21);
        java.util.Locale locale23 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet24 = locale23.getExtensionKeys();
        java.util.Iterator<java.lang.Character> charItor25 = charSet24.iterator();
        java.util.ArrayList[] arrayListArray27 = new java.util.ArrayList[0];
        @SuppressWarnings("unchecked")
        java.util.ArrayList<java.util.Locale.LanguageRange>[] languageRangeListArray28 = (java.util.ArrayList<java.util.Locale.LanguageRange>[]) arrayListArray27;
        java.util.ArrayList<java.util.Locale.LanguageRange>[] languageRangeListArray29 = charSet24.toArray((java.util.ArrayList<java.util.Locale.LanguageRange>[]) arrayListArray27);
        java.util.stream.Stream<java.lang.Character> charStream30 = charSet24.stream();
        boolean boolean32 = charSet24.contains((java.lang.Object) "\uc77c\ubcf8\uc5b4");
        boolean boolean33 = charSet7.removeAll((java.util.Collection<java.lang.Character>) charSet24);
        boolean boolean34 = charSet7.isEmpty();
        boolean boolean35 = charSet2.containsAll((java.util.Collection<java.lang.Character>) charSet7);
        boolean boolean36 = charSet7.isEmpty();
        java.util.Locale locale37 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet38 = locale37.getExtensionKeys();
        java.util.Iterator<java.lang.Character> charItor39 = charSet38.iterator();
        java.util.Locale locale40 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet41 = locale40.getExtensionKeys();
        java.util.Iterator<java.lang.Character> charItor42 = charSet41.iterator();
        boolean boolean43 = charSet38.containsAll((java.util.Collection<java.lang.Character>) charSet41);
        java.util.stream.Stream<java.lang.Character> charStream44 = charSet41.stream();
        java.util.Locale locale45 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet46 = locale45.getExtensionKeys();
        java.util.Iterator<java.lang.Character> charItor47 = charSet46.iterator();
        java.util.ArrayList[] arrayListArray49 = new java.util.ArrayList[0];
        @SuppressWarnings("unchecked")
        java.util.ArrayList<java.util.Locale.LanguageRange>[] languageRangeListArray50 = (java.util.ArrayList<java.util.Locale.LanguageRange>[]) arrayListArray49;
        java.util.ArrayList<java.util.Locale.LanguageRange>[] languageRangeListArray51 = charSet46.toArray((java.util.ArrayList<java.util.Locale.LanguageRange>[]) arrayListArray49);
        java.util.stream.Stream<java.lang.Character> charStream52 = charSet46.stream();
        boolean boolean53 = charSet41.addAll((java.util.Collection<java.lang.Character>) charSet46);
        java.util.Spliterator<java.lang.Character> charSpliterator54 = charSet41.spliterator();
        boolean boolean55 = charSet7.addAll((java.util.Collection<java.lang.Character>) charSet41);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNotNull(charSet2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet4);
        org.junit.Assert.assertNotNull(charItor5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet7);
        org.junit.Assert.assertNotNull(charItor8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 36000000 + "'", int13 == 36000000);
        org.junit.Assert.assertNotNull(timeZone14);
        org.junit.Assert.assertEquals(timeZone14.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertNotNull(dateTimeZoneArray15);
        org.junit.Assert.assertNotNull(dateTimeZoneArray16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "de");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(charSet21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet24);
        org.junit.Assert.assertNotNull(charItor25);
        org.junit.Assert.assertNotNull(arrayListArray27);
        org.junit.Assert.assertNotNull(languageRangeListArray28);
        org.junit.Assert.assertNotNull(languageRangeListArray29);
        org.junit.Assert.assertNotNull(charStream30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet38);
        org.junit.Assert.assertNotNull(charItor39);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet41);
        org.junit.Assert.assertNotNull(charItor42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(charStream44);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet46);
        org.junit.Assert.assertNotNull(charItor47);
        org.junit.Assert.assertNotNull(arrayListArray49);
        org.junit.Assert.assertNotNull(languageRangeListArray50);
        org.junit.Assert.assertNotNull(languageRangeListArray51);
        org.junit.Assert.assertNotNull(charStream52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(charSpliterator54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
    }

    @Test
    public void test11263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11263");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.hourOfHalfday();
        java.lang.String str2 = iSOChronology0.toString();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.era();
        org.joda.time.DurationField durationField4 = iSOChronology0.centuries();
        org.joda.time.DurationField durationField5 = iSOChronology0.weeks();
        org.joda.time.DateTimeField dateTimeField6 = iSOChronology0.era();
        org.joda.time.DateTimeField dateTimeField7 = iSOChronology0.year();
        org.joda.time.DateTimeField dateTimeField8 = iSOChronology0.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField9 = iSOChronology0.era();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology0.hourOfHalfday();
        java.util.TimeZone timeZone11 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        int int14 = dateTimeZone12.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime15 = org.joda.time.LocalDateTime.now(dateTimeZone12);
        int int16 = localDateTime15.getWeekyear();
        org.joda.time.DurationFieldType durationFieldType17 = org.joda.time.DurationFieldType.centuries();
        java.lang.String str18 = durationFieldType17.getName();
        boolean boolean19 = localDateTime15.isSupported(durationFieldType17);
        int int20 = localDateTime15.getHourOfDay();
        java.lang.String str21 = localDateTime15.toString();
        int[] intArray23 = iSOChronology0.get((org.joda.time.ReadablePartial) localDateTime15, (long) 2827556);
        org.joda.time.DurationField durationField24 = iSOChronology0.weeks();
        org.joda.time.DurationField durationField25 = iSOChronology0.weeks();
        java.lang.Class<?> wildcardClass26 = durationField25.getClass();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ISOChronology[+10:00]" + "'", str2, "ISOChronology[+10:00]");
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 36000000 + "'", int14 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2022 + "'", int16 == 2022);
        org.junit.Assert.assertNotNull(durationFieldType17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "centuries" + "'", str18, "centuries");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "2022-02-22T00:54:26.836" + "'", str21, "2022-02-22T00:54:26.836");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[1970, 1, 1, 38827556]");
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(wildcardClass26);
    }

    @Test
    public void test11264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11264");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.yearOfEra();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.weekyearOfCentury();
        java.lang.String str4 = iSOChronology0.toString();
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology0.clockhourOfHalfday();
        org.joda.time.Chronology chronology6 = iSOChronology0.withUTC();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.UTC;
        boolean boolean8 = dateTimeZone7.isFixed();
        org.joda.time.Chronology chronology9 = iSOChronology0.withZone(dateTimeZone7);
        java.lang.String str10 = dateTimeZone7.getID();
        int int12 = dateTimeZone7.getOffsetFromLocal(1645454836993L);
        long long14 = dateTimeZone7.previousTransition(1644850039204L);
        java.lang.String str16 = dateTimeZone7.getName((long) 27424246);
        org.joda.time.LocalDateTime localDateTime17 = org.joda.time.LocalDateTime.now(dateTimeZone7);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "ISOChronology[+10:00]" + "'", str4, "ISOChronology[+10:00]");
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "UTC" + "'", str10, "UTC");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1644850039204L + "'", long14 == 1644850039204L);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+00:00" + "'", str16, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime17);
    }

    @Test
    public void test11265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11265");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.hourOfHalfday();
        long long5 = dateTimeField2.getDifferenceAsLong((long) (byte) -1, 10112L);
        java.util.TimeZone timeZone6 = null;
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forTimeZone(timeZone6);
        int int9 = dateTimeZone7.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime10 = org.joda.time.LocalDateTime.now(dateTimeZone7);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now(dateTimeZone7);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minusMinutes((int) ' ');
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withYearOfCentury((int) (byte) 10);
        java.util.TimeZone timeZone16 = null;
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forTimeZone(timeZone16);
        int int19 = dateTimeZone17.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime20 = org.joda.time.LocalDateTime.now(dateTimeZone17);
        org.joda.time.LocalDateTime localDateTime21 = org.joda.time.LocalDateTime.now(dateTimeZone17);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.withMillisOfSecond((int) '4');
        org.joda.time.LocalDateTime localDateTime24 = localDateTime15.withFields((org.joda.time.ReadablePartial) localDateTime21);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime15.plusMinutes(30);
        int int27 = dateTimeField2.getMinimumValue((org.joda.time.ReadablePartial) localDateTime15);
        java.util.TimeZone timeZone28 = null;
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forTimeZone(timeZone28);
        int int31 = dateTimeZone29.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime32 = org.joda.time.LocalDateTime.now(dateTimeZone29);
        org.joda.time.LocalDateTime localDateTime33 = org.joda.time.LocalDateTime.now(dateTimeZone29);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime33.plusSeconds((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime33.minusWeeks((int) (byte) 10);
        java.util.TimeZone timeZone38 = null;
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forTimeZone(timeZone38);
        int int41 = dateTimeZone39.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime42 = org.joda.time.LocalDateTime.now(dateTimeZone39);
        org.joda.time.LocalDateTime localDateTime43 = org.joda.time.LocalDateTime.now(dateTimeZone39);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime43.plusSeconds((int) (short) 10);
        int int46 = localDateTime43.size();
        boolean boolean47 = localDateTime37.isBefore((org.joda.time.ReadablePartial) localDateTime43);
        org.joda.time.LocalDateTime localDateTime49 = localDateTime43.withMillisOfSecond(52);
        org.joda.time.LocalDateTime localDateTime51 = localDateTime49.plusMinutes(0);
        org.joda.time.LocalDateTime localDateTime53 = localDateTime49.plusDays(53166088);
        int int54 = localDateTime53.getDayOfYear();
        java.util.TimeZone timeZone55 = null;
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.forTimeZone(timeZone55);
        int int58 = dateTimeZone56.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime59 = org.joda.time.LocalDateTime.now(dateTimeZone56);
        int int60 = localDateTime59.getWeekyear();
        org.joda.time.LocalDateTime.Property property61 = localDateTime59.millisOfDay();
        java.lang.String str62 = property61.getAsString();
        int int63 = property61.getLeapAmount();
        java.util.TimeZone timeZone64 = null;
        org.joda.time.DateTimeZone dateTimeZone65 = org.joda.time.DateTimeZone.forTimeZone(timeZone64);
        int int67 = dateTimeZone65.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime68 = org.joda.time.LocalDateTime.now(dateTimeZone65);
        org.joda.time.ReadableInstant readableInstant69 = null;
        org.joda.time.DateTime dateTime70 = localDateTime68.toDateTime(readableInstant69);
        java.util.TimeZone timeZone71 = null;
        org.joda.time.DateTimeZone dateTimeZone72 = org.joda.time.DateTimeZone.forTimeZone(timeZone71);
        int int74 = dateTimeZone72.getOffset(100L);
        org.joda.time.DateTime dateTime75 = localDateTime68.toDateTime(dateTimeZone72);
        org.joda.time.DateTimeFieldType dateTimeFieldType76 = null;
        boolean boolean77 = dateTime75.isSupported(dateTimeFieldType76);
        int int78 = property61.getDifference((org.joda.time.ReadableInstant) dateTime75);
        org.joda.time.DateTime dateTime79 = localDateTime53.toDateTime((org.joda.time.ReadableInstant) dateTime75);
        java.util.Locale locale82 = new java.util.Locale("53192561");
        java.lang.String str84 = locale82.getExtension('u');
        java.lang.String str85 = dateTimeField2.getAsText((org.joda.time.ReadablePartial) localDateTime53, 49802, locale82);
        int int86 = localDateTime53.getCenturyOfEra();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 36000000 + "'", int9 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 36000000 + "'", int19 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 36000000 + "'", int31 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 36000000 + "'", int41 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 4 + "'", int46 == 4);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 347 + "'", int54 == 347);
        org.junit.Assert.assertNotNull(dateTimeZone56);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 36000000 + "'", int58 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 2022 + "'", int60 == 2022);
        org.junit.Assert.assertNotNull(property61);
// flaky:         org.junit.Assert.assertEquals("'" + str62 + "' != '" + "3266899" + "'", str62, "3266899");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone65);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 36000000 + "'", int67 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime68);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(dateTimeZone72);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 36000000 + "'", int74 == 36000000);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 36000000 + "'", int78 == 36000000);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertEquals(locale82.toString(), "53192561");
        org.junit.Assert.assertNull(str84);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "49802" + "'", str85, "49802");
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 1475 + "'", int86 == 1475);
    }

    @Test
    public void test11266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11266");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.chrono.ISOChronology iSOChronology1 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology1.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology1.centuryOfEra();
        org.joda.time.DurationField durationField4 = iSOChronology1.seconds();
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology1.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField6 = iSOChronology1.hourOfHalfday();
        java.util.TimeZone timeZone7 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forTimeZone(timeZone7);
        int int10 = dateTimeZone8.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now(dateTimeZone8);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray12 = localDateTime11.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.hourOfDay();
        int int14 = localDateTime11.get(dateTimeFieldType13);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime11.minusWeeks(1);
        long long18 = iSOChronology1.set((org.joda.time.ReadablePartial) localDateTime16, (long) 0);
        boolean boolean19 = dateTimeFieldType0.isSupported((org.joda.time.Chronology) iSOChronology1);
        org.joda.time.DateTimeField dateTimeField20 = iSOChronology1.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField21 = iSOChronology1.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField22 = iSOChronology1.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField23 = iSOChronology1.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField24 = iSOChronology1.weekyear();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(iSOChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 36000000 + "'", int10 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray12);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(localDateTime16);
// flaky:         org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1644850466951L + "'", long18 == 1644850466951L);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
    }

    @Test
    public void test11267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11267");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((java.lang.Object) 31556952000000L);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusSeconds((-292275054));
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.minusMonths((int) (short) 100);
        int int6 = localDateTime5.getCenturyOfEra();
        org.joda.time.LocalDateTime.Property property7 = localDateTime5.dayOfMonth();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 29 + "'", int6 == 29);
        org.junit.Assert.assertNotNull(property7);
    }

    @Test
    public void test11268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11268");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.hourOfHalfday();
        java.lang.String str2 = iSOChronology0.toString();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.year();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.secondOfDay();
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology0.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField6 = iSOChronology0.weekOfWeekyear();
        org.joda.time.DurationField durationField7 = iSOChronology0.millis();
        org.joda.time.DateTimeField dateTimeField8 = iSOChronology0.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField9 = iSOChronology0.millisOfDay();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology0.year();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ISOChronology[+10:00]" + "'", str2, "ISOChronology[+10:00]");
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
    }

    @Test
    public void test11269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11269");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray5 = localDateTime4.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.hourOfDay();
        int int7 = localDateTime4.get(dateTimeFieldType6);
        org.joda.time.LocalDateTime.Property property8 = localDateTime4.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime10 = property8.addWrapFieldToCopy(82800052);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.plusHours(3045482);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 36000000 + "'", int3 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray5);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
    }

    @Test
    public void test11270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11270");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.hourOfHalfday();
        java.util.TimeZone timeZone3 = null;
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forTimeZone(timeZone3);
        int int6 = dateTimeZone4.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime7 = org.joda.time.LocalDateTime.now(dateTimeZone4);
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.DateTime dateTime9 = localDateTime7.toDateTime(readableInstant8);
        java.util.TimeZone timeZone10 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        int int13 = dateTimeZone11.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime14 = org.joda.time.LocalDateTime.now(dateTimeZone11);
        org.joda.time.LocalDateTime localDateTime15 = org.joda.time.LocalDateTime.now(dateTimeZone11);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.minusYears(2022);
        org.joda.time.LocalDateTime.Property property18 = localDateTime17.era();
        int int19 = localDateTime7.compareTo((org.joda.time.ReadablePartial) localDateTime17);
        org.joda.time.chrono.ISOChronology iSOChronology20 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField21 = iSOChronology20.hourOfHalfday();
        java.lang.String str22 = iSOChronology20.toString();
        java.util.TimeZone timeZone23 = null;
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forTimeZone(timeZone23);
        int int26 = dateTimeZone24.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime27 = org.joda.time.LocalDateTime.now(dateTimeZone24);
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.DateTime dateTime29 = localDateTime27.toDateTime(readableInstant28);
        org.joda.time.Chronology chronology30 = dateTime29.getChronology();
        org.joda.time.DurationField durationField31 = chronology30.hours();
        org.joda.time.DurationField durationField32 = chronology30.months();
        org.joda.time.DateTimeField dateTimeField33 = chronology30.dayOfYear();
        java.util.TimeZone timeZone34 = null;
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forTimeZone(timeZone34);
        int int37 = dateTimeZone35.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime38 = org.joda.time.LocalDateTime.now(dateTimeZone35);
        int[] intArray41 = new int[] { (short) 0, (short) 0 };
        int int42 = dateTimeField33.getMinimumValue((org.joda.time.ReadablePartial) localDateTime38, intArray41);
        java.lang.String str44 = dateTimeField33.getAsShortText((long) 53166088);
        java.util.TimeZone timeZone45 = null;
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.forTimeZone(timeZone45);
        int int48 = dateTimeZone46.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime49 = org.joda.time.LocalDateTime.now(dateTimeZone46);
        int int50 = localDateTime49.getWeekyear();
        org.joda.time.DurationFieldType durationFieldType51 = org.joda.time.DurationFieldType.days();
        org.joda.time.LocalDateTime localDateTime53 = localDateTime49.withFieldAdded(durationFieldType51, 53166088);
        java.util.Locale locale54 = java.util.Locale.ROOT;
        java.lang.String str55 = dateTimeField33.getAsShortText((org.joda.time.ReadablePartial) localDateTime53, locale54);
        java.util.TimeZone timeZone56 = null;
        org.joda.time.DateTimeZone dateTimeZone57 = org.joda.time.DateTimeZone.forTimeZone(timeZone56);
        int int59 = dateTimeZone57.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime60 = org.joda.time.LocalDateTime.now(dateTimeZone57);
        int int61 = localDateTime60.getWeekyear();
        boolean boolean62 = localDateTime53.isEqual((org.joda.time.ReadablePartial) localDateTime60);
        int[] intArray64 = iSOChronology20.get((org.joda.time.ReadablePartial) localDateTime60, (long) 53166088);
        iSOChronology0.validate((org.joda.time.ReadablePartial) localDateTime7, intArray64);
        org.joda.time.DurationField durationField66 = iSOChronology0.minutes();
        java.util.TimeZone timeZone67 = null;
        org.joda.time.DateTimeZone dateTimeZone68 = org.joda.time.DateTimeZone.forTimeZone(timeZone67);
        int int70 = dateTimeZone68.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime71 = org.joda.time.LocalDateTime.now(dateTimeZone68);
        int int72 = localDateTime71.getDayOfYear();
        org.joda.time.LocalDateTime localDateTime74 = localDateTime71.withYearOfEra(2022);
        java.util.TimeZone timeZone75 = null;
        org.joda.time.DateTimeZone dateTimeZone76 = org.joda.time.DateTimeZone.forTimeZone(timeZone75);
        int int78 = dateTimeZone76.getOffset(100L);
        java.util.TimeZone timeZone79 = dateTimeZone76.toTimeZone();
        int int81 = dateTimeZone76.getStandardOffset((long) ' ');
        org.joda.time.DateTime dateTime82 = localDateTime74.toDateTime(dateTimeZone76);
        java.lang.String str84 = dateTimeZone76.getShortName(0L);
        long long86 = dateTimeZone76.convertUTCToLocal((long) 'u');
        org.joda.time.Chronology chronology87 = iSOChronology0.withZone(dateTimeZone76);
        boolean boolean88 = dateTimeZone76.isFixed();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone76);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 36000000 + "'", int6 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 36000000 + "'", int13 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(iSOChronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "ISOChronology[+10:00]" + "'", str22, "ISOChronology[+10:00]");
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 36000000 + "'", int26 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 36000000 + "'", int37 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[0, 0]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "2" + "'", str44, "2");
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 36000000 + "'", int48 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2022 + "'", int50 == 2022);
        org.junit.Assert.assertNotNull(durationFieldType51);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "347" + "'", str55, "347");
        org.junit.Assert.assertNotNull(dateTimeZone57);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 36000000 + "'", int59 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 2022 + "'", int61 == 2022);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[1970, 1, 2, 2766088]");
        org.junit.Assert.assertNotNull(durationField66);
        org.junit.Assert.assertNotNull(dateTimeZone68);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 36000000 + "'", int70 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 53 + "'", int72 == 53);
        org.junit.Assert.assertNotNull(localDateTime74);
        org.junit.Assert.assertNotNull(dateTimeZone76);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 36000000 + "'", int78 == 36000000);
        org.junit.Assert.assertNotNull(timeZone79);
        org.junit.Assert.assertEquals(timeZone79.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 36000000 + "'", int81 == 36000000);
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "+10:00" + "'", str84, "+10:00");
        org.junit.Assert.assertTrue("'" + long86 + "' != '" + 36000117L + "'", long86 == 36000117L);
        org.junit.Assert.assertNotNull(chronology87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
    }

    @Test
    public void test11271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11271");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        int int5 = localDateTime4.getWeekyear();
        org.joda.time.LocalDateTime.Property property6 = localDateTime4.millisOfDay();
        java.util.TimeZone timeZone7 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forTimeZone(timeZone7);
        int int10 = dateTimeZone8.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now(dateTimeZone8);
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.DateTime dateTime13 = localDateTime11.toDateTime(readableInstant12);
        java.util.TimeZone timeZone14 = null;
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forTimeZone(timeZone14);
        int int17 = dateTimeZone15.getOffset(100L);
        org.joda.time.DateTime dateTime18 = localDateTime11.toDateTime(dateTimeZone15);
        int int19 = property6.compareTo((org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.chrono.ISOChronology iSOChronology20 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField21 = iSOChronology20.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField22 = iSOChronology20.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField23 = iSOChronology20.yearOfEra();
        boolean boolean24 = dateTime18.equals((java.lang.Object) iSOChronology20);
        org.joda.time.DurationField durationField25 = iSOChronology20.eras();
        java.util.Locale.Builder builder26 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder29 = builder26.setExtension('x', "jpn");
        java.util.Locale locale30 = java.util.Locale.GERMAN;
        java.util.Locale locale31 = java.util.Locale.GERMAN;
        java.lang.String str32 = locale30.getDisplayCountry(locale31);
        java.util.Locale locale33 = locale30.stripExtensions();
        java.lang.String str34 = locale30.getDisplayName();
        java.util.Locale.Builder builder35 = builder29.setLocale(locale30);
        java.util.Locale.Builder builder38 = builder35.setUnicodeLocaleKeyword("22", "deu");
        java.util.Locale locale39 = java.util.Locale.ENGLISH;
        java.lang.String str40 = locale39.getDisplayCountry();
        java.util.Locale.setDefault(locale39);
        java.util.Locale.Builder builder42 = builder35.setLocale(locale39);
        java.util.Locale locale43 = java.util.Locale.TAIWAN;
        java.util.Locale.Builder builder44 = builder42.setLocale(locale43);
        java.util.Locale.Builder builder46 = builder44.removeUnicodeLocaleAttribute("2847433");
        boolean boolean47 = iSOChronology20.equals((java.lang.Object) builder46);
        org.joda.time.DateTimeField dateTimeField48 = iSOChronology20.minuteOfDay();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 36000000 + "'", int3 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2022 + "'", int5 == 2022);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 36000000 + "'", int10 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 36000000 + "'", int17 == 36000000);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(iSOChronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "de");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "de");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "de");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Deutsch" + "'", str34, "Deutsch");
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "en");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(dateTimeField48);
    }

    @Test
    public void test11272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11272");
        java.util.Locale locale0 = java.util.Locale.CHINESE;
        java.lang.String str1 = locale0.getScript();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
    }

    @Test
    public void test11273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11273");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.weekOfWeekyear();
        org.joda.time.DurationField durationField2 = iSOChronology0.seconds();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.secondOfDay();
        org.joda.time.Chronology chronology4 = iSOChronology0.withUTC();
        org.joda.time.DurationField durationField5 = iSOChronology0.years();
        boolean boolean6 = durationField5.isPrecise();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test11274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11274");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.yearOfEra();
        org.joda.time.DurationField durationField3 = iSOChronology0.minutes();
        org.joda.time.DurationField durationField4 = iSOChronology0.months();
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology0.era();
        org.joda.time.DurationField durationField6 = iSOChronology0.halfdays();
        org.joda.time.DateTimeField dateTimeField7 = iSOChronology0.minuteOfHour();
        java.lang.String str8 = iSOChronology0.toString();
        org.joda.time.DurationField durationField9 = iSOChronology0.halfdays();
        org.joda.time.DateTimeZone dateTimeZone10 = iSOChronology0.getZone();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "ISOChronology[+10:00]" + "'", str8, "ISOChronology[+10:00]");
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
    }

    @Test
    public void test11275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11275");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.centuryOfEra();
        org.joda.time.DurationField durationField3 = iSOChronology0.seconds();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.dayOfYear();
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology0.hourOfHalfday();
        org.joda.time.DurationField durationField6 = iSOChronology0.minutes();
        org.joda.time.DateTimeZone dateTimeZone7 = iSOChronology0.getZone();
        org.joda.time.DurationField durationField8 = iSOChronology0.days();
        org.joda.time.DateTimeField dateTimeField9 = iSOChronology0.year();
        org.joda.time.DurationField durationField10 = iSOChronology0.weeks();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
    }

    @Test
    public void test11276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11276");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime5 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.withMillisOfSecond((int) '4');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = null;
        java.lang.String str9 = localDateTime7.toString(dateTimeFormatter8);
        org.joda.time.LocalDateTime.Property property10 = localDateTime7.dayOfYear();
        java.lang.String str12 = localDateTime7.toString("49823693");
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 36000000 + "'", int3 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "2022-02-22T00:54:27.052" + "'", str9, "2022-02-22T00:54:27.052");
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "49823693" + "'", str12, "49823693");
    }

    @Test
    public void test11277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11277");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.centuryOfEra();
        org.joda.time.DurationField durationField3 = iSOChronology0.centuries();
        org.joda.time.DurationField durationField4 = iSOChronology0.hours();
        org.joda.time.DurationField durationField5 = iSOChronology0.years();
        org.joda.time.DateTimeZone dateTimeZone6 = iSOChronology0.getZone();
        org.joda.time.DurationField durationField7 = iSOChronology0.centuries();
        org.joda.time.DateTimeField dateTimeField8 = iSOChronology0.minuteOfHour();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
    }

    @Test
    public void test11278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11278");
        org.joda.time.tz.NameProvider nameProvider0 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet2 = locale1.getExtensionKeys();
        java.lang.String str5 = nameProvider0.getShortName(locale1, "Koordinierte Universalzeit", "+00:00");
        java.util.Locale locale6 = java.util.Locale.GERMAN;
        java.lang.String str9 = nameProvider0.getShortName(locale6, "53167803", "jpn");
        java.util.Locale locale10 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.String> strSet11 = locale10.getUnicodeLocaleKeys();
        java.util.Set<java.lang.Character> charSet12 = locale10.getExtensionKeys();
        java.lang.String str15 = nameProvider0.getShortName(locale10, "weekyears", "2022-02-22T00:46:50.059+10:00");
        java.lang.String str16 = locale10.getCountry();
        java.lang.String str17 = locale10.getDisplayCountry();
        org.junit.Assert.assertNotNull(nameProvider0);
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet2);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "de");
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko");
        org.junit.Assert.assertNotNull(strSet11);
        org.junit.Assert.assertNotNull(charSet12);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
    }

    @Test
    public void test11279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11279");
        org.joda.time.tz.NameProvider nameProvider0 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.DateTimeZone.setNameProvider(nameProvider0);
        org.joda.time.chrono.ISOChronology iSOChronology2 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology2.weekOfWeekyear();
        java.util.Locale locale5 = java.util.Locale.JAPANESE;
        java.lang.String str6 = locale5.getDisplayLanguage();
        java.util.Set<java.lang.String> strSet7 = locale5.getUnicodeLocaleKeys();
        java.lang.String str8 = dateTimeField3.getAsShortText((long) 14, locale5);
        org.joda.time.chrono.ISOChronology iSOChronology10 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology10.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology10.yearOfEra();
        java.util.TimeZone timeZone13 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forTimeZone(timeZone13);
        int int16 = dateTimeZone14.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime17 = org.joda.time.LocalDateTime.now(dateTimeZone14);
        org.joda.time.LocalDateTime localDateTime18 = org.joda.time.LocalDateTime.now(dateTimeZone14);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.plusSeconds((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime18.minusWeeks((int) (byte) 10);
        java.util.TimeZone timeZone23 = null;
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forTimeZone(timeZone23);
        int int26 = dateTimeZone24.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime27 = org.joda.time.LocalDateTime.now(dateTimeZone24);
        org.joda.time.LocalDateTime localDateTime28 = org.joda.time.LocalDateTime.now(dateTimeZone24);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.plusSeconds((int) (short) 10);
        int int31 = localDateTime28.size();
        boolean boolean32 = localDateTime22.isBefore((org.joda.time.ReadablePartial) localDateTime28);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime28.withMillisOfSecond(52);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime34.plusMinutes(0);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime34.plusDays(53166088);
        int int39 = localDateTime38.getDayOfYear();
        org.joda.time.chrono.ISOChronology iSOChronology40 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField41 = iSOChronology40.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField42 = iSOChronology40.yearOfEra();
        org.joda.time.DateTimeField dateTimeField43 = iSOChronology40.weekyearOfCentury();
        java.lang.String str44 = iSOChronology40.toString();
        org.joda.time.DateTimeField dateTimeField45 = iSOChronology40.clockhourOfHalfday();
        java.lang.String str46 = iSOChronology40.toString();
        org.joda.time.DateTimeField dateTimeField47 = iSOChronology40.dayOfMonth();
        java.util.Locale locale48 = java.util.Locale.KOREAN;
        java.lang.String str49 = locale48.getDisplayScript();
        int int50 = dateTimeField47.getMaximumShortTextLength(locale48);
        java.lang.String str51 = dateTimeField12.getAsShortText((org.joda.time.ReadablePartial) localDateTime38, locale48);
        java.lang.String str52 = dateTimeField3.getAsShortText(20995200000L, locale48);
        java.lang.String str53 = locale48.getCountry();
        java.util.Locale locale54 = locale48.stripExtensions();
        java.lang.String str57 = nameProvider0.getShortName(locale54, "49901231", "2022-02-21T14:49:51.360Z");
        org.junit.Assert.assertNotNull(nameProvider0);
        org.junit.Assert.assertNotNull(iSOChronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Japanese" + "'", str6, "Japanese");
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "1" + "'", str8, "1");
        org.junit.Assert.assertNotNull(iSOChronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 36000000 + "'", int16 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 36000000 + "'", int26 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 4 + "'", int31 == 4);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 347 + "'", int39 == 347);
        org.junit.Assert.assertNotNull(iSOChronology40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "ISOChronology[+10:00]" + "'", str44, "ISOChronology[+10:00]");
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "ISOChronology[+10:00]" + "'", str46, "ISOChronology[+10:00]");
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2 + "'", int50 == 2);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "147585" + "'", str51, "147585");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "36" + "'", str52, "36");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "ko");
        org.junit.Assert.assertNull(str57);
    }

    @Test
    public void test11280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11280");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        java.lang.String str4 = dateTimeZone1.getNameKey(1644850372956L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNull(str4);
    }

    @Test
    public void test11281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11281");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.secondOfDay();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
    }

    @Test
    public void test11282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11282");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        long long6 = iSOChronology0.add(readablePeriod3, (long) 100, 11);
        org.joda.time.Chronology chronology7 = iSOChronology0.withUTC();
        org.joda.time.DateTimeField dateTimeField8 = iSOChronology0.millisOfSecond();
        org.joda.time.DurationField durationField9 = iSOChronology0.weekyears();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology0.hourOfDay();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology0.hourOfHalfday();
        org.joda.time.chrono.ISOChronology iSOChronology12 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField13 = iSOChronology12.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology12.centuryOfEra();
        org.joda.time.DurationField durationField15 = iSOChronology12.seconds();
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology12);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.withWeekOfWeekyear((int) '4');
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.plusWeeks(53178951);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.minusYears(2928569);
        java.util.Locale locale25 = java.util.Locale.forLanguageTag("53192561");
        java.lang.String str26 = locale25.getDisplayCountry();
        java.lang.String str27 = dateTimeField11.getAsText((org.joda.time.ReadablePartial) localDateTime20, 49624656, locale25);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 100L + "'", long6 == 100L);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(iSOChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "49624656" + "'", str27, "49624656");
    }

    @Test
    public void test11283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11283");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.centuryOfEra();
        org.joda.time.DurationField durationField3 = iSOChronology0.centuries();
        org.joda.time.DurationField durationField4 = iSOChronology0.hours();
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        int int8 = dateTimeZone6.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime9 = org.joda.time.LocalDateTime.now(dateTimeZone6);
        int int10 = localDateTime9.getDayOfYear();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime9.withYearOfEra(2022);
        long long14 = iSOChronology0.set((org.joda.time.ReadablePartial) localDateTime12, (long) 0);
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology0.monthOfYear();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology0.secondOfMinute();
        org.joda.time.DurationField durationField17 = iSOChronology0.months();
        org.joda.time.DurationField durationField18 = iSOChronology0.millis();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology0.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField20 = iSOChronology0.year();
        java.util.TimeZone timeZone21 = null;
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forTimeZone(timeZone21);
        int int24 = dateTimeZone22.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime25 = org.joda.time.LocalDateTime.now(dateTimeZone22);
        int int26 = localDateTime25.getDayOfYear();
        org.joda.time.LocalDateTime localDateTime28 = localDateTime25.withYearOfEra(2022);
        java.util.TimeZone timeZone29 = null;
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forTimeZone(timeZone29);
        int int32 = dateTimeZone30.getOffset(100L);
        java.util.TimeZone timeZone33 = dateTimeZone30.toTimeZone();
        int int35 = dateTimeZone30.getStandardOffset((long) ' ');
        org.joda.time.DateTime dateTime36 = localDateTime28.toDateTime(dateTimeZone30);
        java.util.TimeZone timeZone37 = null;
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forTimeZone(timeZone37);
        int int40 = dateTimeZone38.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime41 = org.joda.time.LocalDateTime.now(dateTimeZone38);
        int int42 = localDateTime41.getWeekyear();
        org.joda.time.LocalDateTime.Property property43 = localDateTime41.minuteOfHour();
        org.joda.time.LocalDateTime.Property property44 = localDateTime41.dayOfYear();
        java.util.TimeZone timeZone45 = null;
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.forTimeZone(timeZone45);
        int int48 = dateTimeZone46.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime49 = org.joda.time.LocalDateTime.now(dateTimeZone46);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray50 = localDateTime49.getFieldTypes();
        int int51 = property44.compareTo((org.joda.time.ReadablePartial) localDateTime49);
        int int52 = localDateTime49.getYearOfCentury();
        org.joda.time.DateTime dateTime53 = localDateTime49.toDateTime();
        int int54 = dateTimeZone30.getOffset((org.joda.time.ReadableInstant) dateTime53);
        org.joda.time.chrono.ISOChronology iSOChronology55 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone30);
        org.joda.time.LocalDateTime localDateTime56 = new org.joda.time.LocalDateTime(dateTimeZone30);
        java.util.Locale locale59 = java.util.Locale.forLanguageTag("2815332");
        java.util.Locale.Category category60 = java.util.Locale.Category.DISPLAY;
        org.joda.time.tz.NameProvider nameProvider61 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale62 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet63 = locale62.getExtensionKeys();
        java.lang.String str66 = nameProvider61.getShortName(locale62, "Koordinierte Universalzeit", "+00:00");
        java.lang.String str67 = locale62.toLanguageTag();
        java.util.Locale.setDefault(category60, locale62);
        java.util.Locale locale69 = java.util.Locale.getDefault();
        java.lang.String str70 = locale62.getDisplayName(locale69);
        java.lang.String str71 = locale59.getDisplayCountry(locale62);
        java.lang.String str72 = dateTimeField20.getAsShortText((org.joda.time.ReadablePartial) localDateTime56, 37, locale62);
        // The following exception was thrown during execution in test generation
        try {
            long long75 = dateTimeField20.add(1644850064833L, 1645454977546L);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Value cannot fit in an int: 1645454977546");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 36000000 + "'", int8 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 53 + "'", int10 == 53);
        org.junit.Assert.assertNotNull(localDateTime12);
// flaky:         org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1645455267576L + "'", long14 == 1645455267576L);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 36000000 + "'", int24 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 53 + "'", int26 == 53);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 36000000 + "'", int32 == 36000000);
        org.junit.Assert.assertNotNull(timeZone33);
        org.junit.Assert.assertEquals(timeZone33.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 36000000 + "'", int35 == 36000000);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 36000000 + "'", int40 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2022 + "'", int42 == 2022);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 36000000 + "'", int48 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 22 + "'", int52 == 22);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 36000000 + "'", int54 == 36000000);
        org.junit.Assert.assertNotNull(iSOChronology55);
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "");
        org.junit.Assert.assertTrue("'" + category60 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category60.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(nameProvider61);
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet63);
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "ko" + "'", str67, "ko");
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "en");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "Korean" + "'", str70, "Korean");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "37" + "'", str72, "37");
    }

    @Test
    public void test11284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11284");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.hourOfHalfday();
        java.lang.String str2 = iSOChronology0.toString();
        org.joda.time.DurationField durationField3 = iSOChronology0.centuries();
        org.joda.time.Chronology chronology4 = iSOChronology0.withUTC();
        org.joda.time.DurationField durationField5 = iSOChronology0.years();
        org.joda.time.DurationField durationField6 = iSOChronology0.years();
        org.joda.time.DateTimeField dateTimeField7 = iSOChronology0.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField8 = iSOChronology0.hourOfDay();
        java.util.TimeZone timeZone9 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        int int12 = dateTimeZone10.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime13 = org.joda.time.LocalDateTime.now(dateTimeZone10);
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.DateTime dateTime15 = localDateTime13.toDateTime(readableInstant14);
        java.util.TimeZone timeZone16 = null;
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forTimeZone(timeZone16);
        int int19 = dateTimeZone17.getOffset(100L);
        org.joda.time.DateTime dateTime20 = localDateTime13.toDateTime(dateTimeZone17);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime13.withYear(52);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.plusMinutes(1970);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.withYearOfCentury(0);
        java.util.TimeZone timeZone27 = null;
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forTimeZone(timeZone27);
        int int30 = dateTimeZone28.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime31 = org.joda.time.LocalDateTime.now(dateTimeZone28);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray32 = localDateTime31.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime34 = localDateTime31.plusWeeks(2022);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime31.plusHours((int) '4');
        org.joda.time.ReadableDuration readableDuration37 = null;
        org.joda.time.LocalDateTime localDateTime38 = localDateTime36.plus(readableDuration37);
        boolean boolean39 = localDateTime26.equals((java.lang.Object) readableDuration37);
        long long41 = iSOChronology0.set((org.joda.time.ReadablePartial) localDateTime26, 1644850309777L);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ISOChronology[+10:00]" + "'", str2, "ISOChronology[+10:00]");
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 36000000 + "'", int12 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 36000000 + "'", int19 == 36000000);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 36000000 + "'", int30 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long41 + "' != '" + (-62162640932343L) + "'", long41 == (-62162640932343L));
    }

    @Test
    public void test11285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11285");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        int int5 = localDateTime4.getWeekyear();
        org.joda.time.LocalDateTime.Property property6 = localDateTime4.minuteOfHour();
        int int7 = localDateTime4.getHourOfDay();
        java.util.Locale.LanguageRange[] languageRangeArray8 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList9 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList9, languageRangeArray8);
        java.util.Locale locale11 = java.util.Locale.KOREAN;
        java.util.Locale locale12 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet13 = locale12.getExtensionKeys();
        java.util.Locale locale14 = java.util.Locale.GERMAN;
        java.util.Locale locale15 = java.util.Locale.GERMAN;
        java.lang.String str16 = locale14.getDisplayCountry(locale15);
        java.util.Locale locale17 = locale14.stripExtensions();
        java.util.Locale locale18 = java.util.Locale.JAPANESE;
        java.util.Locale locale19 = java.util.Locale.JAPANESE;
        java.util.Locale locale20 = java.util.Locale.GERMAN;
        java.util.Locale[] localeArray21 = new java.util.Locale[] { locale11, locale12, locale17, locale18, locale19, locale20 };
        java.util.ArrayList<java.util.Locale> localeList22 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList22, localeArray21);
        java.util.Locale locale24 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList9, (java.util.Collection<java.util.Locale>) localeList22);
        java.util.Locale.LanguageRange[] languageRangeArray25 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList26 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList26, languageRangeArray25);
        java.util.Locale locale28 = java.util.Locale.KOREAN;
        java.util.Locale locale29 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet30 = locale29.getExtensionKeys();
        java.util.Locale locale31 = java.util.Locale.GERMAN;
        java.util.Locale locale32 = java.util.Locale.GERMAN;
        java.lang.String str33 = locale31.getDisplayCountry(locale32);
        java.util.Locale locale34 = locale31.stripExtensions();
        java.util.Locale locale35 = java.util.Locale.JAPANESE;
        java.util.Locale locale36 = java.util.Locale.JAPANESE;
        java.util.Locale locale37 = java.util.Locale.GERMAN;
        java.util.Locale[] localeArray38 = new java.util.Locale[] { locale28, locale29, locale34, locale35, locale36, locale37 };
        java.util.ArrayList<java.util.Locale> localeList39 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList39, localeArray38);
        java.util.Locale locale41 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList26, (java.util.Collection<java.util.Locale>) localeList39);
        java.util.Locale locale42 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList9, (java.util.Collection<java.util.Locale>) localeList39);
        boolean boolean43 = localDateTime4.equals((java.lang.Object) languageRangeList9);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime4.plusMinutes((-292275054));
        org.joda.time.LocalDateTime.Property property46 = localDateTime45.millisOfSecond();
        java.util.TimeZone timeZone47 = null;
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.forTimeZone(timeZone47);
        int int50 = dateTimeZone48.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime51 = org.joda.time.LocalDateTime.now(dateTimeZone48);
        int int52 = localDateTime51.getWeekyear();
        org.joda.time.LocalDateTime.Property property53 = localDateTime51.millisOfDay();
        java.lang.String str54 = property53.getAsString();
        int int55 = property53.getLeapAmount();
        java.util.TimeZone timeZone56 = null;
        org.joda.time.DateTimeZone dateTimeZone57 = org.joda.time.DateTimeZone.forTimeZone(timeZone56);
        int int59 = dateTimeZone57.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime60 = org.joda.time.LocalDateTime.now(dateTimeZone57);
        org.joda.time.ReadableInstant readableInstant61 = null;
        org.joda.time.DateTime dateTime62 = localDateTime60.toDateTime(readableInstant61);
        java.util.TimeZone timeZone63 = null;
        org.joda.time.DateTimeZone dateTimeZone64 = org.joda.time.DateTimeZone.forTimeZone(timeZone63);
        int int66 = dateTimeZone64.getOffset(100L);
        org.joda.time.DateTime dateTime67 = localDateTime60.toDateTime(dateTimeZone64);
        org.joda.time.DateTimeFieldType dateTimeFieldType68 = null;
        boolean boolean69 = dateTime67.isSupported(dateTimeFieldType68);
        int int70 = property53.getDifference((org.joda.time.ReadableInstant) dateTime67);
        org.joda.time.DateTime dateTime71 = localDateTime45.toDateTime((org.joda.time.ReadableInstant) dateTime67);
        long long72 = dateTime71.getMillis();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 36000000 + "'", int3 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2022 + "'", int5 == 2022);
        org.junit.Assert.assertNotNull(property6);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(languageRangeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ko");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "de");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "de");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "de");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "ja");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "ja");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "de");
        org.junit.Assert.assertNotNull(localeArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNull(locale24);
        org.junit.Assert.assertNotNull(languageRangeArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "ko");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet30);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "de");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "de");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "de");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "ja");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "ja");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "de");
        org.junit.Assert.assertNotNull(localeArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNull(locale41);
        org.junit.Assert.assertNull(locale42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 36000000 + "'", int50 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2022 + "'", int52 == 2022);
        org.junit.Assert.assertNotNull(property53);
// flaky:         org.junit.Assert.assertEquals("'" + str54 + "' != '" + "3267693" + "'", str54, "3267693");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone57);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 36000000 + "'", int59 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTimeZone64);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 36000000 + "'", int66 == 36000000);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 36000000 + "'", int70 == 36000000);
        org.junit.Assert.assertNotNull(dateTime71);
// flaky:         org.junit.Assert.assertTrue("'" + long72 + "' != '" + (-15891047972307L) + "'", long72 == (-15891047972307L));
    }

    @Test
    public void test11286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11286");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime5 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusMinutes((int) ' ');
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withYearOfCentury((int) (byte) 10);
        java.util.TimeZone timeZone10 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        int int13 = dateTimeZone11.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime14 = org.joda.time.LocalDateTime.now(dateTimeZone11);
        org.joda.time.LocalDateTime localDateTime15 = org.joda.time.LocalDateTime.now(dateTimeZone11);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.withMillisOfSecond((int) '4');
        org.joda.time.LocalDateTime localDateTime18 = localDateTime9.withFields((org.joda.time.ReadablePartial) localDateTime15);
        org.joda.time.LocalDateTime.Property property19 = localDateTime15.minuteOfHour();
        org.joda.time.LocalDateTime.Property property20 = localDateTime15.millisOfSecond();
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.LocalDateTime localDateTime22 = localDateTime15.minus(readablePeriod21);
        org.joda.time.LocalDateTime.Property property23 = localDateTime22.hourOfDay();
        org.joda.time.LocalDateTime localDateTime24 = property23.roundCeilingCopy();
        int int25 = localDateTime24.getMonthOfYear();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 36000000 + "'", int3 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 36000000 + "'", int13 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2 + "'", int25 == 2);
    }

    @Test
    public void test11287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11287");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        int int5 = localDateTime4.getWeekyear();
        org.joda.time.LocalDateTime.Property property6 = localDateTime4.millisOfDay();
        java.util.Locale locale7 = java.util.Locale.KOREAN;
        int int8 = property6.getMaximumTextLength(locale7);
        java.util.Locale locale9 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.String> strSet10 = locale9.getUnicodeLocaleKeys();
        int int11 = property6.getMaximumTextLength(locale9);
        org.joda.time.LocalDateTime localDateTime13 = property6.setCopy("2814251");
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.centuryOfEra();
        org.joda.time.chrono.ISOChronology iSOChronology15 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology15.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology15.yearOfEra();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology15.secondOfMinute();
        org.joda.time.DurationField durationField19 = iSOChronology15.seconds();
        boolean boolean20 = property14.equals((java.lang.Object) iSOChronology15);
        org.joda.time.LocalDateTime localDateTime22 = property14.addToCopy(2815922);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.plusSeconds(49812863);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.plusSeconds(2837601);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 36000000 + "'", int3 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2022 + "'", int5 == 2022);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ko");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 8 + "'", int8 == 8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "ko");
        org.junit.Assert.assertNotNull(strSet10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 8 + "'", int11 == 8);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(iSOChronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
    }

    @Test
    public void test11288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11288");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.dayOfYear();
        java.lang.String str1 = dateTimeFieldType0.getName();
        org.joda.time.chrono.ISOChronology iSOChronology2 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology2.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology2.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        long long8 = iSOChronology2.add(readablePeriod5, (long) 100, 11);
        org.joda.time.DateTimeField dateTimeField9 = iSOChronology2.weekyear();
        org.joda.time.Chronology chronology10 = iSOChronology2.withUTC();
        boolean boolean11 = dateTimeFieldType0.isSupported(chronology10);
        java.lang.String str12 = dateTimeFieldType0.toString();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "dayOfYear" + "'", str1, "dayOfYear");
        org.junit.Assert.assertNotNull(iSOChronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 100L + "'", long8 == 100L);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "dayOfYear" + "'", str12, "dayOfYear");
    }

    @Test
    public void test11289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11289");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime5 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusMinutes((int) ' ');
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withYearOfCentury((int) (byte) 10);
        java.util.TimeZone timeZone10 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        int int13 = dateTimeZone11.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime14 = org.joda.time.LocalDateTime.now(dateTimeZone11);
        org.joda.time.LocalDateTime localDateTime15 = org.joda.time.LocalDateTime.now(dateTimeZone11);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.withMillisOfSecond((int) '4');
        org.joda.time.LocalDateTime localDateTime18 = localDateTime9.withFields((org.joda.time.ReadablePartial) localDateTime15);
        int int19 = localDateTime18.size();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime18.plusDays(11);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.plusMinutes(882);
        java.util.TimeZone timeZone24 = null;
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forTimeZone(timeZone24);
        int int27 = dateTimeZone25.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime28 = org.joda.time.LocalDateTime.now(dateTimeZone25);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray29 = localDateTime28.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = org.joda.time.DateTimeFieldType.hourOfDay();
        int int31 = localDateTime28.get(dateTimeFieldType30);
        org.joda.time.LocalDateTime.Property property32 = localDateTime28.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime34 = localDateTime28.minusHours(20);
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = localDateTime28.getFieldType((int) (byte) 1);
        org.joda.time.ReadableDuration readableDuration37 = null;
        org.joda.time.LocalDateTime localDateTime39 = localDateTime28.withDurationAdded(readableDuration37, 46);
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = org.joda.time.DateTimeFieldType.weekyear();
        boolean boolean41 = localDateTime28.isSupported(dateTimeFieldType40);
        java.lang.String str42 = dateTimeFieldType40.getName();
        boolean boolean43 = localDateTime21.isSupported(dateTimeFieldType40);
        org.joda.time.DurationFieldType durationFieldType44 = dateTimeFieldType40.getDurationType();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 36000000 + "'", int3 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 36000000 + "'", int13 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 4 + "'", int19 == 4);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 36000000 + "'", int27 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray29);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
// flaky:         org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(dateTimeFieldType40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "weekyear" + "'", str42, "weekyear");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(durationFieldType44);
    }

    @Test
    public void test11290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11290");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.centuryOfEra();
        org.joda.time.DurationField durationField3 = iSOChronology0.centuries();
        org.joda.time.DurationField durationField4 = iSOChronology0.hours();
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        int int8 = dateTimeZone6.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime9 = org.joda.time.LocalDateTime.now(dateTimeZone6);
        int int10 = localDateTime9.getDayOfYear();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime9.withYearOfEra(2022);
        long long14 = iSOChronology0.set((org.joda.time.ReadablePartial) localDateTime12, (long) 0);
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology0.monthOfYear();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology0.clockhourOfDay();
        org.joda.time.Chronology chronology17 = iSOChronology0.withUTC();
        org.joda.time.DateTimeZone dateTimeZone18 = iSOChronology0.getZone();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology0.year();
        org.joda.time.DateTimeField dateTimeField20 = iSOChronology0.halfdayOfDay();
        java.lang.String str22 = dateTimeField20.getAsText(1644850310668L);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 36000000 + "'", int8 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 53 + "'", int10 == 53);
        org.junit.Assert.assertNotNull(localDateTime12);
// flaky:         org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1645455267845L + "'", long14 == 1645455267845L);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "AM" + "'", str22, "AM");
    }

    @Test
    public void test11291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11291");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.hourOfHalfday();
        java.lang.String str2 = iSOChronology0.toString();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.era();
        java.util.TimeZone timeZone4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forTimeZone(timeZone4);
        int int7 = dateTimeZone5.getOffset(100L);
        java.util.TimeZone timeZone8 = dateTimeZone5.toTimeZone();
        java.lang.String str9 = dateTimeZone5.toString();
        org.joda.time.Chronology chronology10 = iSOChronology0.withZone(dateTimeZone5);
        org.joda.time.DurationField durationField11 = iSOChronology0.seconds();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology0.clockhourOfHalfday();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ISOChronology[+10:00]" + "'", str2, "ISOChronology[+10:00]");
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 36000000 + "'", int7 == 36000000);
        org.junit.Assert.assertNotNull(timeZone8);
        org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+10:00" + "'", str9, "+10:00");
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
    }

    @Test
    public void test11292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11292");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.hourOfHalfday();
        java.lang.String str2 = iSOChronology0.toString();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.era();
        org.joda.time.DateTimeZone dateTimeZone4 = iSOChronology0.getZone();
        long long7 = dateTimeZone4.convertLocalToUTC(1645454771211L, false);
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField9 = iSOChronology8.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology8.centuryOfEra();
        org.joda.time.DurationField durationField11 = iSOChronology8.seconds();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology8.dayOfYear();
        org.joda.time.DateTimeField dateTimeField13 = iSOChronology8.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime.Property property15 = localDateTime14.secondOfMinute();
        org.joda.time.tz.NameProvider nameProvider17 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale.Builder builder18 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder21 = builder18.setExtension('x', "jpn");
        java.util.Locale locale22 = java.util.Locale.GERMAN;
        java.util.Locale locale23 = java.util.Locale.GERMAN;
        java.lang.String str24 = locale22.getDisplayCountry(locale23);
        java.util.Locale locale25 = locale22.stripExtensions();
        java.lang.String str26 = locale22.getDisplayName();
        java.util.Locale.Builder builder27 = builder21.setLocale(locale22);
        java.lang.String str30 = nameProvider17.getName(locale22, "Japanese", "UTC");
        java.util.Locale locale31 = java.util.Locale.JAPANESE;
        java.lang.String str32 = locale31.getDisplayLanguage();
        java.lang.String str33 = locale31.getISO3Language();
        java.util.Locale locale34 = java.util.Locale.CHINA;
        java.lang.String str35 = locale31.getDisplayLanguage(locale34);
        org.joda.time.tz.NameProvider nameProvider36 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale37 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet38 = locale37.getExtensionKeys();
        java.lang.String str41 = nameProvider36.getShortName(locale37, "Koordinierte Universalzeit", "+00:00");
        java.util.Locale locale42 = java.util.Locale.KOREAN;
        java.lang.String str43 = locale37.getDisplayName(locale42);
        java.lang.String str44 = locale34.getDisplayVariant(locale42);
        java.util.Locale locale45 = java.util.Locale.KOREA;
        java.lang.String str46 = locale42.getDisplayVariant(locale45);
        java.lang.String str49 = nameProvider17.getName(locale45, "22", "2806266");
        java.lang.String str50 = dateTimeField13.getAsText((org.joda.time.ReadablePartial) localDateTime14, 2807052, locale45);
        org.joda.time.LocalDateTime localDateTime52 = localDateTime14.plusYears((int) (short) 10);
        boolean boolean53 = dateTimeZone4.isLocalDateTimeGap(localDateTime52);
        int int55 = dateTimeZone4.getStandardOffset((long) 50032);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ISOChronology[+10:00]" + "'", str2, "ISOChronology[+10:00]");
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1645418771211L + "'", long7 == 1645418771211L);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(nameProvider17);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "de");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "de");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "de");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "\ub3c5\uc77c\uc5b4" + "'", str26, "\ub3c5\uc77c\uc5b4");
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "\uc77c\ubcf8\uc5b4" + "'", str32, "\uc77c\ubcf8\uc5b4");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "jpn" + "'", str33, "jpn");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "\u65e5\u6587" + "'", str35, "\u65e5\u6587");
        org.junit.Assert.assertNotNull(nameProvider36);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet38);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str43, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "2807052" + "'", str50, "2807052");
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 36000000 + "'", int55 == 36000000);
    }

    @Test
    public void test11293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11293");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.yearOfEra();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology0.dayOfYear();
        org.joda.time.DurationField durationField6 = iSOChronology0.centuries();
        java.util.TimeZone timeZone7 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forTimeZone(timeZone7);
        java.lang.String str10 = dateTimeZone8.getName(31556995199999L);
        java.lang.String str11 = dateTimeZone8.getID();
        long long15 = dateTimeZone8.convertLocalToUTC((long) 'x', false, (long) (short) 100);
        boolean boolean16 = dateTimeZone8.isFixed();
        org.joda.time.Chronology chronology17 = iSOChronology0.withZone(dateTimeZone8);
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology0.millisOfSecond();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+10:00" + "'", str10, "+10:00");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-35999880L) + "'", long15 == (-35999880L));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
    }

    @Test
    public void test11294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11294");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime5 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusMinutes((int) ' ');
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withYearOfCentury((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.LocalDateTime localDateTime11 = localDateTime7.minus(readablePeriod10);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType13 = localDateTime7.getFieldType(3034983);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 3034983");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 36000000 + "'", int3 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
    }

    @Test
    public void test11295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11295");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime5 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusMinutes((int) ' ');
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.LocalDateTime localDateTime9 = localDateTime5.plus(readablePeriod8);
        int int10 = localDateTime9.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime9.withYearOfEra(53314437);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.plusMillis(2807);
        org.joda.time.Chronology chronology15 = localDateTime14.getChronology();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 36000000 + "'", int3 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(chronology15);
    }

    @Test
    public void test11296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11296");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.centuryOfEra();
        org.joda.time.DurationField durationField3 = iSOChronology0.seconds();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.clockhourOfDay();
        org.joda.time.Chronology chronology5 = iSOChronology0.withUTC();
        org.joda.time.DateTimeField dateTimeField6 = iSOChronology0.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField7 = iSOChronology0.year();
        org.joda.time.DurationField durationField8 = iSOChronology0.seconds();
        org.joda.time.DateTimeZone dateTimeZone9 = iSOChronology0.getZone();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology0.minuteOfHour();
        org.joda.time.DurationField durationField11 = iSOChronology0.seconds();
        org.joda.time.DurationField durationField12 = iSOChronology0.days();
        org.joda.time.DurationField durationField13 = iSOChronology0.seconds();
        long long17 = iSOChronology0.add(89663876693338469L, 0L, 2962139);
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology0.yearOfEra();
        // The following exception was thrown during execution in test generation
        try {
            long long24 = iSOChronology0.getDateTimeMillis(1644850391302L, 50419, 49687275, 50040412, 49755686);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 50419 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 89663876693338469L + "'", long17 == 89663876693338469L);
        org.junit.Assert.assertNotNull(dateTimeField18);
    }

    @Test
    public void test11297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11297");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) -1);
        long long3 = dateTimeZone1.convertUTCToLocal((long) 4);
        org.joda.time.chrono.ISOChronology iSOChronology4 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology4.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField6 = iSOChronology4.yearOfEra();
        org.joda.time.DurationField durationField7 = iSOChronology4.minutes();
        org.joda.time.DurationField durationField8 = iSOChronology4.months();
        org.joda.time.DateTimeField dateTimeField9 = iSOChronology4.era();
        org.joda.time.DurationField durationField10 = iSOChronology4.halfdays();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology4.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology4.millisOfDay();
        java.lang.String str13 = dateTimeField12.toString();
        boolean boolean14 = dateTimeZone1.equals((java.lang.Object) dateTimeField12);
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-3599996L) + "'", long3 == (-3599996L));
        org.junit.Assert.assertNotNull(iSOChronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "DateTimeField[millisOfDay]" + "'", str13, "DateTimeField[millisOfDay]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test11298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11298");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray5 = localDateTime4.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.hourOfDay();
        int int7 = localDateTime4.get(dateTimeFieldType6);
        org.joda.time.LocalDateTime.Property property8 = localDateTime4.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime4.minusHours(20);
        java.util.Locale locale11 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet12 = locale11.getExtensionKeys();
        java.util.Iterator<java.lang.Character> charItor13 = charSet12.iterator();
        java.util.ArrayList[] arrayListArray15 = new java.util.ArrayList[0];
        @SuppressWarnings("unchecked")
        java.util.ArrayList<java.util.Locale.LanguageRange>[] languageRangeListArray16 = (java.util.ArrayList<java.util.Locale.LanguageRange>[]) arrayListArray15;
        java.util.ArrayList<java.util.Locale.LanguageRange>[] languageRangeListArray17 = charSet12.toArray((java.util.ArrayList<java.util.Locale.LanguageRange>[]) arrayListArray15);
        java.util.TimeZone timeZone18 = null;
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forTimeZone(timeZone18);
        int int21 = dateTimeZone19.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime22 = org.joda.time.LocalDateTime.now(dateTimeZone19);
        int int23 = localDateTime22.getWeekyear();
        org.joda.time.LocalDateTime.Property property24 = localDateTime22.millisOfDay();
        java.util.TimeZone timeZone25 = null;
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forTimeZone(timeZone25);
        int int28 = dateTimeZone26.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime29 = org.joda.time.LocalDateTime.now(dateTimeZone26);
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.DateTime dateTime31 = localDateTime29.toDateTime(readableInstant30);
        java.util.TimeZone timeZone32 = null;
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forTimeZone(timeZone32);
        int int35 = dateTimeZone33.getOffset(100L);
        org.joda.time.DateTime dateTime36 = localDateTime29.toDateTime(dateTimeZone33);
        int int37 = property24.compareTo((org.joda.time.ReadableInstant) dateTime36);
        boolean boolean38 = charSet12.equals((java.lang.Object) dateTime36);
        org.joda.time.DateTime dateTime39 = localDateTime10.toDateTime((org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.ReadableInstant readableInstant40 = null;
        boolean boolean41 = dateTime39.isBefore(readableInstant40);
        org.joda.time.DateTimeZone dateTimeZone42 = dateTime39.getZone();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 36000000 + "'", int3 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray5);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet12);
        org.junit.Assert.assertNotNull(charItor13);
        org.junit.Assert.assertNotNull(arrayListArray15);
        org.junit.Assert.assertNotNull(languageRangeListArray16);
        org.junit.Assert.assertNotNull(languageRangeListArray17);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 36000000 + "'", int21 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2022 + "'", int23 == 2022);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 36000000 + "'", int28 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 36000000 + "'", int35 == 36000000);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(dateTimeZone42);
    }

    @Test
    public void test11299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11299");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.yearOfEra();
        org.joda.time.DurationField durationField3 = iSOChronology0.minutes();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.weekyear();
        org.joda.time.DurationField durationField5 = iSOChronology0.centuries();
        org.joda.time.DateTimeField dateTimeField6 = iSOChronology0.centuryOfEra();
        org.joda.time.DurationField durationField7 = iSOChronology0.minutes();
        org.joda.time.DateTimeField dateTimeField8 = iSOChronology0.minuteOfDay();
        org.joda.time.DurationField durationField9 = iSOChronology0.days();
        org.joda.time.DurationField durationField10 = iSOChronology0.days();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology0.secondOfDay();
        org.joda.time.DurationField durationField12 = iSOChronology0.weekyears();
        org.joda.time.DurationField durationField13 = iSOChronology0.millis();
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology0.dayOfMonth();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
    }

    @Test
    public void test11300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11300");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.weekOfWeekyear();
        java.util.TimeZone timeZone2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone2);
        java.lang.String str5 = dateTimeZone3.getName(31556995199999L);
        org.joda.time.Chronology chronology6 = iSOChronology0.withZone(dateTimeZone3);
        org.joda.time.DateTimeField dateTimeField7 = iSOChronology0.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField8 = iSOChronology0.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField9 = iSOChronology0.secondOfMinute();
        org.joda.time.DurationField durationField10 = iSOChronology0.years();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology0.centuryOfEra();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+10:00" + "'", str5, "+10:00");
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
    }

    @Test
    public void test11301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11301");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        int int5 = localDateTime4.getWeekyear();
        org.joda.time.LocalDateTime.Property property6 = localDateTime4.millisOfDay();
        org.joda.time.LocalDateTime localDateTime7 = property6.roundCeilingCopy();
        java.util.TimeZone timeZone8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        int int11 = dateTimeZone9.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime12 = org.joda.time.LocalDateTime.now(dateTimeZone9);
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.DateTime dateTime14 = localDateTime12.toDateTime(readableInstant13);
        org.joda.time.Instant instant15 = dateTime14.toInstant();
        java.lang.String str16 = instant15.toString();
        int int17 = property6.getDifference((org.joda.time.ReadableInstant) instant15);
        java.util.TimeZone timeZone18 = null;
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forTimeZone(timeZone18);
        int int21 = dateTimeZone19.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime22 = org.joda.time.LocalDateTime.now(dateTimeZone19);
        org.joda.time.LocalDateTime localDateTime23 = org.joda.time.LocalDateTime.now(dateTimeZone19);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.plusSeconds((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime23.minusWeeks((int) (byte) 10);
        org.joda.time.chrono.ISOChronology iSOChronology28 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField29 = iSOChronology28.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField30 = iSOChronology28.yearOfEra();
        org.joda.time.DateTimeField dateTimeField31 = iSOChronology28.hourOfDay();
        org.joda.time.DateTimeField dateTimeField32 = iSOChronology28.clockhourOfDay();
        java.util.TimeZone timeZone33 = null;
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forTimeZone(timeZone33);
        int int36 = dateTimeZone34.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime37 = org.joda.time.LocalDateTime.now(dateTimeZone34);
        org.joda.time.ReadableInstant readableInstant38 = null;
        org.joda.time.DateTime dateTime39 = localDateTime37.toDateTime(readableInstant38);
        org.joda.time.Chronology chronology40 = dateTime39.getChronology();
        org.joda.time.DurationField durationField41 = chronology40.hours();
        org.joda.time.DurationField durationField42 = chronology40.months();
        org.joda.time.DateTimeField dateTimeField43 = chronology40.dayOfYear();
        java.util.TimeZone timeZone44 = null;
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forTimeZone(timeZone44);
        int int47 = dateTimeZone45.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime48 = org.joda.time.LocalDateTime.now(dateTimeZone45);
        int[] intArray51 = new int[] { (short) 0, (short) 0 };
        int int52 = dateTimeField43.getMinimumValue((org.joda.time.ReadablePartial) localDateTime48, intArray51);
        java.lang.String str54 = dateTimeField43.getAsShortText((long) 53166088);
        java.util.TimeZone timeZone55 = null;
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.forTimeZone(timeZone55);
        int int58 = dateTimeZone56.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime59 = org.joda.time.LocalDateTime.now(dateTimeZone56);
        int int60 = localDateTime59.getWeekyear();
        org.joda.time.DurationFieldType durationFieldType61 = org.joda.time.DurationFieldType.days();
        org.joda.time.LocalDateTime localDateTime63 = localDateTime59.withFieldAdded(durationFieldType61, 53166088);
        java.util.Locale locale64 = java.util.Locale.ROOT;
        java.lang.String str65 = dateTimeField43.getAsShortText((org.joda.time.ReadablePartial) localDateTime63, locale64);
        java.util.TimeZone timeZone66 = null;
        org.joda.time.DateTimeZone dateTimeZone67 = org.joda.time.DateTimeZone.forTimeZone(timeZone66);
        int int69 = dateTimeZone67.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime70 = org.joda.time.LocalDateTime.now(dateTimeZone67);
        int int71 = localDateTime70.getWeekyear();
        boolean boolean72 = localDateTime63.isEqual((org.joda.time.ReadablePartial) localDateTime70);
        org.joda.time.LocalDateTime localDateTime74 = localDateTime63.plusDays(11);
        java.util.Locale locale76 = null;
        java.lang.String str77 = dateTimeField32.getAsShortText((org.joda.time.ReadablePartial) localDateTime63, 14, locale76);
        org.joda.time.DateTimeFieldType dateTimeFieldType79 = localDateTime63.getFieldType(0);
        boolean boolean80 = localDateTime23.isSupported(dateTimeFieldType79);
        int int81 = instant15.get(dateTimeFieldType79);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 36000000 + "'", int3 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2022 + "'", int5 == 2022);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 36000000 + "'", int11 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(instant15);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "2022-02-21T14:54:28.181Z" + "'", str16, "2022-02-21T14:54:28.181Z");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 36000000 + "'", int17 == 36000000);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 36000000 + "'", int21 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(iSOChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 36000000 + "'", int36 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(durationField41);
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 36000000 + "'", int47 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[0, 0]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "2" + "'", str54, "2");
        org.junit.Assert.assertNotNull(dateTimeZone56);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 36000000 + "'", int58 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 2022 + "'", int60 == 2022);
        org.junit.Assert.assertNotNull(durationFieldType61);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "347" + "'", str65, "347");
        org.junit.Assert.assertNotNull(dateTimeZone67);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 36000000 + "'", int69 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 2022 + "'", int71 == 2022);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(localDateTime74);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "14" + "'", str77, "14");
        org.junit.Assert.assertNotNull(dateTimeFieldType79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 2022 + "'", int81 == 2022);
    }

    @Test
    public void test11302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11302");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.yearOfEra();
        org.joda.time.DurationField durationField3 = iSOChronology0.minutes();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.weekyear();
        org.joda.time.DurationField durationField5 = iSOChronology0.centuries();
        org.joda.time.DateTimeField dateTimeField6 = iSOChronology0.centuryOfEra();
        org.joda.time.DurationField durationField7 = iSOChronology0.minutes();
        org.joda.time.DateTimeField dateTimeField8 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField9 = iSOChronology0.minuteOfHour();
        org.joda.time.chrono.ISOChronology iSOChronology10 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology10.hourOfHalfday();
        java.lang.String str12 = iSOChronology10.toString();
        org.joda.time.DateTimeField dateTimeField13 = iSOChronology10.era();
        org.joda.time.DurationField durationField14 = iSOChronology10.centuries();
        org.joda.time.DurationField durationField15 = iSOChronology10.weeks();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology10.dayOfYear();
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology10);
        int[] intArray18 = localDateTime17.getValues();
        long long20 = iSOChronology0.set((org.joda.time.ReadablePartial) localDateTime17, 0L);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime17.plusYears((-292275054));
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.minusHours(2801);
        int int25 = localDateTime22.getHourOfDay();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(iSOChronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "ISOChronology[+10:00]" + "'", str12, "ISOChronology[+10:00]");
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(intArray18);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[2022, 2, 22, 3268235]");
// flaky:         org.junit.Assert.assertTrue("'" + long20 + "' != '" + 1645455268235L + "'", long20 == 1645455268235L);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
// flaky:         org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
    }

    @Test
    public void test11303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11303");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.DateTime dateTime6 = localDateTime4.toDateTime(readableInstant5);
        java.util.TimeZone timeZone7 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forTimeZone(timeZone7);
        int int10 = dateTimeZone8.getOffset(100L);
        org.joda.time.DateTime dateTime11 = localDateTime4.toDateTime(dateTimeZone8);
        org.joda.time.LocalDateTime.Property property12 = localDateTime4.monthOfYear();
        java.lang.String str13 = property12.getAsText();
        org.joda.time.chrono.ISOChronology iSOChronology14 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology14.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology14.centuryOfEra();
        org.joda.time.DurationField durationField17 = iSOChronology14.centuries();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology14.millisOfDay();
        java.util.TimeZone timeZone19 = null;
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forTimeZone(timeZone19);
        int int22 = dateTimeZone20.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime23 = org.joda.time.LocalDateTime.now(dateTimeZone20);
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.DateTime dateTime25 = localDateTime23.toDateTime(readableInstant24);
        java.util.TimeZone timeZone26 = null;
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forTimeZone(timeZone26);
        int int29 = dateTimeZone27.getOffset(100L);
        org.joda.time.DateTime dateTime30 = localDateTime23.toDateTime(dateTimeZone27);
        org.joda.time.LocalDateTime.Property property31 = localDateTime23.monthOfYear();
        java.util.TimeZone timeZone32 = null;
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forTimeZone(timeZone32);
        int int35 = dateTimeZone33.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime36 = org.joda.time.LocalDateTime.now(dateTimeZone33);
        int int37 = localDateTime36.getWeekyear();
        org.joda.time.LocalDateTime.Property property38 = localDateTime36.millisOfDay();
        java.util.TimeZone timeZone39 = null;
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forTimeZone(timeZone39);
        int int42 = dateTimeZone40.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime43 = org.joda.time.LocalDateTime.now(dateTimeZone40);
        org.joda.time.ReadableInstant readableInstant44 = null;
        org.joda.time.DateTime dateTime45 = localDateTime43.toDateTime(readableInstant44);
        java.util.TimeZone timeZone46 = null;
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.forTimeZone(timeZone46);
        int int49 = dateTimeZone47.getOffset(100L);
        org.joda.time.DateTime dateTime50 = localDateTime43.toDateTime(dateTimeZone47);
        int int51 = property38.compareTo((org.joda.time.ReadableInstant) dateTime50);
        org.joda.time.LocalDateTime localDateTime52 = property38.roundHalfEvenCopy();
        boolean boolean53 = localDateTime23.isAfter((org.joda.time.ReadablePartial) localDateTime52);
        java.util.Locale locale54 = java.util.Locale.UK;
        java.lang.String str55 = dateTimeField18.getAsText((org.joda.time.ReadablePartial) localDateTime52, locale54);
        int int56 = property12.compareTo((org.joda.time.ReadablePartial) localDateTime52);
        org.joda.time.LocalDateTime localDateTime58 = localDateTime52.minusYears(18);
        org.joda.time.LocalDateTime.Property property59 = localDateTime58.dayOfYear();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 36000000 + "'", int3 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 36000000 + "'", int10 == 36000000);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "February" + "'", str13, "February");
        org.junit.Assert.assertNotNull(iSOChronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 36000000 + "'", int22 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 36000000 + "'", int29 == 36000000);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 36000000 + "'", int35 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2022 + "'", int37 == 2022);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 36000000 + "'", int42 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 36000000 + "'", int49 == 36000000);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "en_GB");
// flaky:         org.junit.Assert.assertEquals("'" + str55 + "' != '" + "3268347" + "'", str55, "3268347");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(property59);
    }

    @Test
    public void test11304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11304");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.hourOfHalfday();
        java.lang.String str2 = iSOChronology0.toString();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.era();
        org.joda.time.DurationField durationField4 = iSOChronology0.centuries();
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        long long8 = iSOChronology0.add(readablePeriod5, (long) 2022, (int) (byte) 100);
        org.joda.time.DateTimeField dateTimeField9 = iSOChronology0.yearOfEra();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology0.era();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology0.minuteOfDay();
        org.joda.time.DurationField durationField12 = iSOChronology0.seconds();
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        long long16 = iSOChronology0.add(readablePeriod13, 2843364L, 49687982);
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology0.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology0.yearOfEra();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology0.year();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ISOChronology[+10:00]" + "'", str2, "ISOChronology[+10:00]");
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 2022L + "'", long8 == 2022L);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 2843364L + "'", long16 == 2843364L);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
    }

    @Test
    public void test11305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11305");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.centuryOfEra();
        org.joda.time.DurationField durationField3 = iSOChronology0.seconds();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.weekyearOfCentury();
        org.joda.time.DurationField durationField5 = dateTimeField4.getDurationField();
        java.util.TimeZone timeZone6 = null;
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forTimeZone(timeZone6);
        int int9 = dateTimeZone7.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime10 = org.joda.time.LocalDateTime.now(dateTimeZone7);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray11 = localDateTime10.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.hourOfDay();
        int int13 = localDateTime10.get(dateTimeFieldType12);
        org.joda.time.LocalDateTime.Property property14 = localDateTime10.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime10.minusHours(20);
        java.util.Locale locale17 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet18 = locale17.getExtensionKeys();
        java.util.Iterator<java.lang.Character> charItor19 = charSet18.iterator();
        java.util.ArrayList[] arrayListArray21 = new java.util.ArrayList[0];
        @SuppressWarnings("unchecked")
        java.util.ArrayList<java.util.Locale.LanguageRange>[] languageRangeListArray22 = (java.util.ArrayList<java.util.Locale.LanguageRange>[]) arrayListArray21;
        java.util.ArrayList<java.util.Locale.LanguageRange>[] languageRangeListArray23 = charSet18.toArray((java.util.ArrayList<java.util.Locale.LanguageRange>[]) arrayListArray21);
        java.util.TimeZone timeZone24 = null;
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forTimeZone(timeZone24);
        int int27 = dateTimeZone25.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime28 = org.joda.time.LocalDateTime.now(dateTimeZone25);
        int int29 = localDateTime28.getWeekyear();
        org.joda.time.LocalDateTime.Property property30 = localDateTime28.millisOfDay();
        java.util.TimeZone timeZone31 = null;
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forTimeZone(timeZone31);
        int int34 = dateTimeZone32.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime35 = org.joda.time.LocalDateTime.now(dateTimeZone32);
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.DateTime dateTime37 = localDateTime35.toDateTime(readableInstant36);
        java.util.TimeZone timeZone38 = null;
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forTimeZone(timeZone38);
        int int41 = dateTimeZone39.getOffset(100L);
        org.joda.time.DateTime dateTime42 = localDateTime35.toDateTime(dateTimeZone39);
        int int43 = property30.compareTo((org.joda.time.ReadableInstant) dateTime42);
        boolean boolean44 = charSet18.equals((java.lang.Object) dateTime42);
        org.joda.time.DateTime dateTime45 = localDateTime16.toDateTime((org.joda.time.ReadableInstant) dateTime42);
        int int46 = localDateTime16.getYear();
        java.util.Locale.Builder builder48 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder51 = builder48.setExtension('x', "jpn");
        java.util.Locale locale52 = java.util.Locale.GERMAN;
        java.util.Locale locale53 = java.util.Locale.GERMAN;
        java.lang.String str54 = locale52.getDisplayCountry(locale53);
        java.util.Locale locale55 = locale52.stripExtensions();
        java.lang.String str56 = locale52.getDisplayName();
        java.util.Locale.Builder builder57 = builder51.setLocale(locale52);
        java.util.Locale locale58 = builder51.build();
        java.lang.String str59 = dateTimeField4.getAsShortText((org.joda.time.ReadablePartial) localDateTime16, 21, locale58);
        java.lang.String str60 = localDateTime16.toString();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter61 = null;
        java.lang.String str62 = localDateTime16.toString(dateTimeFormatter61);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 36000000 + "'", int9 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray11);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet18);
        org.junit.Assert.assertNotNull(charItor19);
        org.junit.Assert.assertNotNull(arrayListArray21);
        org.junit.Assert.assertNotNull(languageRangeListArray22);
        org.junit.Assert.assertNotNull(languageRangeListArray23);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 36000000 + "'", int27 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2022 + "'", int29 == 2022);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 36000000 + "'", int34 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 36000000 + "'", int41 == 36000000);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2022 + "'", int46 == 2022);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "de");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "de");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "de");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "\ub3c5\uc77c\uc5b4" + "'", str56, "\ub3c5\uc77c\uc5b4");
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "de");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "21" + "'", str59, "21");
// flaky:         org.junit.Assert.assertEquals("'" + str60 + "' != '" + "2022-02-21T04:54:28.444" + "'", str60, "2022-02-21T04:54:28.444");
// flaky:         org.junit.Assert.assertEquals("'" + str62 + "' != '" + "2022-02-21T04:54:28.444" + "'", str62, "2022-02-21T04:54:28.444");
    }

    @Test
    public void test11306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11306");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime5 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusMinutes((int) ' ');
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withYearOfCentury((int) (byte) 10);
        java.util.TimeZone timeZone10 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        int int13 = dateTimeZone11.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime14 = org.joda.time.LocalDateTime.now(dateTimeZone11);
        org.joda.time.LocalDateTime localDateTime15 = org.joda.time.LocalDateTime.now(dateTimeZone11);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.withMillisOfSecond((int) '4');
        org.joda.time.LocalDateTime localDateTime18 = localDateTime9.withFields((org.joda.time.ReadablePartial) localDateTime15);
        org.joda.time.DateTimeField[] dateTimeFieldArray19 = localDateTime15.getFields();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime15.withYearOfEra((int) (byte) 1);
        org.joda.time.Chronology chronology22 = localDateTime15.getChronology();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 36000000 + "'", int3 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 36000000 + "'", int13 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(dateTimeFieldArray19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(chronology22);
    }

    @Test
    public void test11307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11307");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        int int5 = localDateTime4.getWeekyear();
        org.joda.time.LocalDateTime.Property property6 = localDateTime4.millisOfDay();
        java.util.TimeZone timeZone7 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forTimeZone(timeZone7);
        int int10 = dateTimeZone8.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now(dateTimeZone8);
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.DateTime dateTime13 = localDateTime11.toDateTime(readableInstant12);
        java.util.TimeZone timeZone14 = null;
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forTimeZone(timeZone14);
        int int17 = dateTimeZone15.getOffset(100L);
        org.joda.time.DateTime dateTime18 = localDateTime11.toDateTime(dateTimeZone15);
        int int19 = property6.compareTo((org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.chrono.ISOChronology iSOChronology20 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField21 = iSOChronology20.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField22 = iSOChronology20.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField23 = iSOChronology20.yearOfEra();
        boolean boolean24 = dateTime18.equals((java.lang.Object) iSOChronology20);
        org.joda.time.DurationField durationField25 = iSOChronology20.eras();
        java.util.Locale.Builder builder26 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder29 = builder26.setExtension('x', "jpn");
        java.util.Locale locale30 = java.util.Locale.GERMAN;
        java.util.Locale locale31 = java.util.Locale.GERMAN;
        java.lang.String str32 = locale30.getDisplayCountry(locale31);
        java.util.Locale locale33 = locale30.stripExtensions();
        java.lang.String str34 = locale30.getDisplayName();
        java.util.Locale.Builder builder35 = builder29.setLocale(locale30);
        java.util.Locale.Builder builder38 = builder35.setUnicodeLocaleKeyword("22", "deu");
        java.util.Locale locale39 = java.util.Locale.ENGLISH;
        java.lang.String str40 = locale39.getDisplayCountry();
        java.util.Locale.setDefault(locale39);
        java.util.Locale.Builder builder42 = builder35.setLocale(locale39);
        java.util.Locale locale43 = java.util.Locale.TAIWAN;
        java.util.Locale.Builder builder44 = builder42.setLocale(locale43);
        java.util.Locale.Builder builder46 = builder44.removeUnicodeLocaleAttribute("2847433");
        boolean boolean47 = iSOChronology20.equals((java.lang.Object) builder46);
        org.joda.time.DateTimeZone dateTimeZone48 = iSOChronology20.getZone();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 36000000 + "'", int3 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2022 + "'", int5 == 2022);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 36000000 + "'", int10 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 36000000 + "'", int17 == 36000000);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(iSOChronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "de");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "de");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "de");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "\ub3c5\uc77c\uc5b4" + "'", str34, "\ub3c5\uc77c\uc5b4");
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "en");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(dateTimeZone48);
    }

    @Test
    public void test11308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11308");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffset(100L);
        java.util.TimeZone timeZone4 = dateTimeZone1.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forTimeZone(timeZone4);
        java.util.TimeZone.setDefault(timeZone4);
        java.util.TimeZone.setDefault(timeZone4);
        int int9 = timeZone4.getOffset((long) (short) 10);
        timeZone4.setID("147585-12-13T00:47:14.515");
        int int12 = timeZone4.getDSTSavings();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 36000000 + "'", int3 == 36000000);
        org.junit.Assert.assertNotNull(timeZone4);
        org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 36000000 + "'", int9 == 36000000);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test11309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11309");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray5 = localDateTime4.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.hourOfDay();
        int int7 = localDateTime4.get(dateTimeFieldType6);
        org.joda.time.LocalDateTime.Property property8 = localDateTime4.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime4.minusHours(20);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.withWeekOfWeekyear(31);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        org.joda.time.DurationFieldType durationFieldType14 = dateTimeFieldType13.getDurationType();
        int int15 = localDateTime12.get(dateTimeFieldType13);
        org.joda.time.LocalDateTime.Property property16 = localDateTime12.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime12.plusMonths(2977658);
        org.joda.time.LocalDateTime.Property property19 = localDateTime18.millisOfDay();
        org.joda.time.LocalDateTime localDateTime21 = property19.addWrapFieldToCopy((int) 'a');
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 36000000 + "'", int3 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray5);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(durationFieldType14);
// flaky:         org.junit.Assert.assertTrue("'" + int15 + "' != '" + 4 + "'", int15 == 4);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(localDateTime21);
    }

    @Test
    public void test11310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11310");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.centuryOfEra();
        org.joda.time.DurationField durationField3 = iSOChronology0.centuries();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.millisOfDay();
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology0.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField6 = iSOChronology0.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField7 = iSOChronology0.minuteOfHour();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = dateTimeField7.getType();
        org.joda.time.LocalDateTime localDateTime9 = org.joda.time.LocalDateTime.now();
        java.util.TimeZone timeZone10 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        int int13 = dateTimeZone11.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime14 = org.joda.time.LocalDateTime.now(dateTimeZone11);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray15 = localDateTime14.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.hourOfDay();
        int int17 = localDateTime14.get(dateTimeFieldType16);
        org.joda.time.LocalDateTime.Property property18 = localDateTime14.dayOfWeek();
        boolean boolean19 = localDateTime9.isEqual((org.joda.time.ReadablePartial) localDateTime14);
        org.joda.time.LocalDateTime.Property property20 = localDateTime14.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime21 = property20.roundHalfCeilingCopy();
        java.util.TimeZone timeZone22 = null;
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        int int25 = dateTimeZone23.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime26 = org.joda.time.LocalDateTime.now(dateTimeZone23);
        org.joda.time.LocalDateTime localDateTime27 = org.joda.time.LocalDateTime.now(dateTimeZone23);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.minusMinutes((int) ' ');
        int int30 = property20.compareTo((org.joda.time.ReadablePartial) localDateTime29);
        java.util.TimeZone timeZone31 = null;
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forTimeZone(timeZone31);
        int int34 = dateTimeZone32.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime35 = org.joda.time.LocalDateTime.now(dateTimeZone32);
        org.joda.time.LocalDateTime localDateTime36 = org.joda.time.LocalDateTime.now(dateTimeZone32);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime36.plusSeconds((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime36.minusWeeks((int) (byte) 10);
        java.util.TimeZone timeZone41 = null;
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forTimeZone(timeZone41);
        int int44 = dateTimeZone42.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime45 = org.joda.time.LocalDateTime.now(dateTimeZone42);
        org.joda.time.LocalDateTime localDateTime46 = org.joda.time.LocalDateTime.now(dateTimeZone42);
        org.joda.time.LocalDateTime localDateTime48 = localDateTime46.plusSeconds((int) (short) 10);
        int int49 = localDateTime46.size();
        boolean boolean50 = localDateTime40.isBefore((org.joda.time.ReadablePartial) localDateTime46);
        org.joda.time.LocalDateTime.Property property51 = localDateTime46.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime52 = localDateTime29.withFields((org.joda.time.ReadablePartial) localDateTime46);
        org.joda.time.LocalDateTime.Property property53 = localDateTime29.weekOfWeekyear();
        int int54 = dateTimeField7.getMinimumValue((org.joda.time.ReadablePartial) localDateTime29);
        org.joda.time.DateTimeFieldType dateTimeFieldType55 = org.joda.time.DateTimeFieldType.dayOfYear();
        java.lang.String str56 = dateTimeFieldType55.getName();
        org.joda.time.LocalDateTime.Property property57 = localDateTime29.property(dateTimeFieldType55);
        org.joda.time.ReadableDuration readableDuration58 = null;
        org.joda.time.LocalDateTime localDateTime59 = localDateTime29.plus(readableDuration58);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 36000000 + "'", int13 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray15);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
// flaky:         org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 36000000 + "'", int25 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 36000000 + "'", int34 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 36000000 + "'", int44 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 4 + "'", int49 == 4);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "dayOfYear" + "'", str56, "dayOfYear");
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(localDateTime59);
    }

    @Test
    public void test11311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11311");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str3 = dateTimeZone1.getShortName(100L);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        java.util.TimeZone timeZone6 = dateTimeZone1.toTimeZone();
        int int7 = timeZone6.getRawOffset();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forTimeZone(timeZone6);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+10:00" + "'", str3, "+10:00");
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(timeZone6);
        org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 36000000 + "'", int7 == 36000000);
        org.junit.Assert.assertNotNull(dateTimeZone8);
    }

    @Test
    public void test11312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11312");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.centuryOfEra();
        org.joda.time.DurationField durationField3 = iSOChronology0.centuries();
        org.joda.time.DurationField durationField4 = iSOChronology0.hours();
        org.joda.time.DurationField durationField5 = iSOChronology0.years();
        org.joda.time.DurationField durationField6 = iSOChronology0.halfdays();
        org.joda.time.DateTimeField dateTimeField7 = iSOChronology0.dayOfWeek();
        org.joda.time.DurationField durationField8 = iSOChronology0.weeks();
        org.joda.time.DateTimeField dateTimeField9 = iSOChronology0.clockhourOfHalfday();
        java.lang.String str10 = iSOChronology0.toString();
        org.joda.time.DurationField durationField11 = iSOChronology0.days();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology0.weekyear();
        org.joda.time.DateTimeField dateTimeField13 = iSOChronology0.hourOfDay();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "ISOChronology[+10:00]" + "'", str10, "ISOChronology[+10:00]");
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
    }

    @Test
    public void test11313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11313");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.hourOfHalfday();
        java.lang.String str2 = iSOChronology0.toString();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.era();
        org.joda.time.DurationField durationField4 = iSOChronology0.centuries();
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        long long8 = iSOChronology0.add(readablePeriod5, (long) 2022, (int) (byte) 100);
        org.joda.time.DateTimeField dateTimeField9 = iSOChronology0.yearOfEra();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology0.era();
        org.joda.time.DurationField durationField11 = iSOChronology0.seconds();
        org.joda.time.DurationField durationField12 = iSOChronology0.seconds();
        org.joda.time.DurationField durationField13 = iSOChronology0.weekyears();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ISOChronology[+10:00]" + "'", str2, "ISOChronology[+10:00]");
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 2022L + "'", long8 == 2022L);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(durationField13);
    }

    @Test
    public void test11314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11314");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.DateTime dateTime6 = localDateTime4.toDateTime(readableInstant5);
        org.joda.time.Chronology chronology7 = dateTime6.getChronology();
        org.joda.time.DurationField durationField8 = chronology7.hours();
        org.joda.time.DateTimeField dateTimeField9 = chronology7.yearOfEra();
        java.util.TimeZone timeZone10 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        int int13 = dateTimeZone11.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime14 = org.joda.time.LocalDateTime.now(dateTimeZone11);
        org.joda.time.LocalDateTime localDateTime15 = org.joda.time.LocalDateTime.now(dateTimeZone11);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.minusMinutes((int) ' ');
        java.lang.String str18 = localDateTime15.toString();
        int int19 = localDateTime15.getDayOfMonth();
        int int20 = localDateTime15.getDayOfMonth();
        int int21 = localDateTime15.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime15.plusMillis(53193);
        long long25 = chronology7.set((org.joda.time.ReadablePartial) localDateTime15, 1645454820119L);
        org.joda.time.LocalDateTime.Property property26 = localDateTime15.weekOfWeekyear();
        org.joda.time.DurationField durationField27 = property26.getLeapDurationField();
        int int28 = property26.getMaximumValue();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 36000000 + "'", int3 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 36000000 + "'", int13 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "2022-02-22T00:54:28.786" + "'", str18, "2022-02-22T00:54:28.786");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 22 + "'", int19 == 22);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 22 + "'", int20 == 22);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 22 + "'", int21 == 22);
        org.junit.Assert.assertNotNull(localDateTime23);
// flaky:         org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1645455268786L + "'", long25 == 1645455268786L);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNull(durationField27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 52 + "'", int28 == 52);
    }

    @Test
    public void test11315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11315");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours(2843364);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Offset is too large");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test11316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11316");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.DateTime dateTime6 = localDateTime4.toDateTime(readableInstant5);
        java.util.TimeZone timeZone7 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forTimeZone(timeZone7);
        int int10 = dateTimeZone8.getOffset(100L);
        org.joda.time.DateTime dateTime11 = localDateTime4.toDateTime(dateTimeZone8);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime4.plusMinutes((-1));
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.hourOfDay();
        java.lang.String str15 = property14.getAsText();
        org.joda.time.LocalDateTime localDateTime16 = property14.roundHalfEvenCopy();
        org.joda.time.DurationField durationField17 = property14.getDurationField();
        java.lang.String str18 = durationField17.getName();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 36000000 + "'", int3 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 36000000 + "'", int10 == 36000000);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "0" + "'", str15, "0");
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hours" + "'", str18, "hours");
    }

    @Test
    public void test11317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11317");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.yearOfEra();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.hourOfDay();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology0.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField6 = iSOChronology0.dayOfWeek();
        java.lang.String str7 = iSOChronology0.toString();
        org.joda.time.DurationField durationField8 = iSOChronology0.days();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "ISOChronology[+10:00]" + "'", str7, "ISOChronology[+10:00]");
        org.junit.Assert.assertNotNull(durationField8);
    }

    @Test
    public void test11318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11318");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.hourOfHalfday();
        java.lang.String str2 = iSOChronology0.toString();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.era();
        org.joda.time.Chronology chronology4 = iSOChronology0.withUTC();
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        long long8 = iSOChronology0.add(readablePeriod5, 38469L, 110);
        org.joda.time.DateTimeField dateTimeField9 = iSOChronology0.yearOfCentury();
        org.joda.time.DurationField durationField10 = iSOChronology0.minutes();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology0.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone12 = iSOChronology0.getZone();
        org.joda.time.DateTimeField dateTimeField13 = iSOChronology0.weekyear();
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology0.yearOfEra();
        org.joda.time.DurationField durationField15 = iSOChronology0.eras();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ISOChronology[+10:00]" + "'", str2, "ISOChronology[+10:00]");
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 38469L + "'", long8 == 38469L);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
    }

    @Test
    public void test11319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11319");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.centuryOfEra();
        org.joda.time.DurationField durationField3 = iSOChronology0.seconds();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.clockhourOfDay();
        org.joda.time.Chronology chronology5 = iSOChronology0.withUTC();
        org.joda.time.DateTimeField dateTimeField6 = iSOChronology0.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField7 = iSOChronology0.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField8 = iSOChronology0.clockhourOfDay();
        org.joda.time.chrono.ISOChronology iSOChronology10 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology10.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology10.yearOfEra();
        org.joda.time.DateTimeField dateTimeField13 = iSOChronology10.weekyearOfCentury();
        java.lang.String str14 = iSOChronology10.toString();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology10.clockhourOfHalfday();
        long long17 = dateTimeField15.remainder(1645454862625L);
        org.joda.time.tz.NameProvider nameProvider19 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.DateTimeZone.setNameProvider(nameProvider19);
        java.util.TimeZone timeZone21 = null;
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forTimeZone(timeZone21);
        int int24 = dateTimeZone22.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime25 = org.joda.time.LocalDateTime.now(dateTimeZone22);
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.DateTime dateTime27 = localDateTime25.toDateTime(readableInstant26);
        org.joda.time.Chronology chronology28 = dateTime27.getChronology();
        org.joda.time.DurationField durationField29 = chronology28.hours();
        org.joda.time.DurationField durationField30 = chronology28.months();
        org.joda.time.DateTimeField dateTimeField31 = chronology28.dayOfYear();
        java.util.TimeZone timeZone32 = null;
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forTimeZone(timeZone32);
        int int35 = dateTimeZone33.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime36 = org.joda.time.LocalDateTime.now(dateTimeZone33);
        int[] intArray39 = new int[] { (short) 0, (short) 0 };
        int int40 = dateTimeField31.getMinimumValue((org.joda.time.ReadablePartial) localDateTime36, intArray39);
        java.lang.String str42 = dateTimeField31.getAsShortText((long) 53166088);
        java.util.TimeZone timeZone43 = null;
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forTimeZone(timeZone43);
        int int46 = dateTimeZone44.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime47 = org.joda.time.LocalDateTime.now(dateTimeZone44);
        int int48 = localDateTime47.getWeekyear();
        org.joda.time.DurationFieldType durationFieldType49 = org.joda.time.DurationFieldType.days();
        org.joda.time.LocalDateTime localDateTime51 = localDateTime47.withFieldAdded(durationFieldType49, 53166088);
        java.util.Locale locale52 = java.util.Locale.ROOT;
        java.lang.String str53 = dateTimeField31.getAsShortText((org.joda.time.ReadablePartial) localDateTime51, locale52);
        java.lang.String str56 = nameProvider19.getShortName(locale52, "53169175", "+00:00");
        java.lang.String str57 = dateTimeField15.getAsShortText(2833287, locale52);
        java.lang.String str58 = dateTimeField8.getAsText(0L, locale52);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(iSOChronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "ISOChronology[+10:00]" + "'", str14, "ISOChronology[+10:00]");
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 2862625L + "'", long17 == 2862625L);
        org.junit.Assert.assertNotNull(nameProvider19);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 36000000 + "'", int24 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 36000000 + "'", int35 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[0, 0]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "2" + "'", str42, "2");
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 36000000 + "'", int46 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2022 + "'", int48 == 2022);
        org.junit.Assert.assertNotNull(durationFieldType49);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "347" + "'", str53, "347");
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "2833287" + "'", str57, "2833287");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "10" + "'", str58, "10");
    }

    @Test
    public void test11320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11320");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.yearOfEra();
        org.joda.time.DurationField durationField3 = iSOChronology0.minutes();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.weekyear();
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        int int8 = dateTimeZone6.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime9 = org.joda.time.LocalDateTime.now(dateTimeZone6);
        org.joda.time.LocalDateTime localDateTime10 = org.joda.time.LocalDateTime.now(dateTimeZone6);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.plusSeconds((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime10.minusWeeks((int) (byte) 10);
        java.util.TimeZone timeZone15 = null;
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forTimeZone(timeZone15);
        int int18 = dateTimeZone16.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime19 = org.joda.time.LocalDateTime.now(dateTimeZone16);
        int int20 = localDateTime19.getWeekyear();
        org.joda.time.LocalDateTime.Property property21 = localDateTime19.millisOfDay();
        java.util.TimeZone timeZone22 = null;
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        int int25 = dateTimeZone23.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime26 = org.joda.time.LocalDateTime.now(dateTimeZone23);
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.DateTime dateTime28 = localDateTime26.toDateTime(readableInstant27);
        java.util.TimeZone timeZone29 = null;
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forTimeZone(timeZone29);
        int int32 = dateTimeZone30.getOffset(100L);
        org.joda.time.DateTime dateTime33 = localDateTime26.toDateTime(dateTimeZone30);
        int int34 = property21.compareTo((org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.LocalDateTime localDateTime35 = property21.roundHalfEvenCopy();
        java.util.TimeZone timeZone36 = null;
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forTimeZone(timeZone36);
        int int39 = dateTimeZone37.getOffset(100L);
        java.lang.String str40 = dateTimeZone37.getID();
        java.util.Locale locale42 = java.util.Locale.ENGLISH;
        java.lang.String str43 = dateTimeZone37.getName(31556952000000L, locale42);
        java.lang.String str44 = property21.getAsText(locale42);
        java.lang.String str45 = dateTimeField4.getAsText((org.joda.time.ReadablePartial) localDateTime14, locale42);
        org.joda.time.DurationFieldType durationFieldType46 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.LocalDateTime localDateTime48 = localDateTime14.withFieldAdded(durationFieldType46, (int) 'x');
        java.lang.String str49 = durationFieldType46.getName();
        java.lang.String str50 = durationFieldType46.getName();
        org.joda.time.chrono.ISOChronology iSOChronology51 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField52 = iSOChronology51.weekOfWeekyear();
        java.util.TimeZone timeZone53 = null;
        org.joda.time.DateTimeZone dateTimeZone54 = org.joda.time.DateTimeZone.forTimeZone(timeZone53);
        java.lang.String str56 = dateTimeZone54.getName(31556995199999L);
        org.joda.time.Chronology chronology57 = iSOChronology51.withZone(dateTimeZone54);
        org.joda.time.DurationField durationField58 = iSOChronology51.halfdays();
        org.joda.time.DurationField durationField59 = iSOChronology51.millis();
        org.joda.time.DurationField durationField60 = durationFieldType46.getField((org.joda.time.Chronology) iSOChronology51);
        org.joda.time.DateTimeField dateTimeField61 = iSOChronology51.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone62 = iSOChronology51.getZone();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 36000000 + "'", int8 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 36000000 + "'", int18 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2022 + "'", int20 == 2022);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 36000000 + "'", int25 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 36000000 + "'", int32 == 36000000);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 36000000 + "'", int39 == 36000000);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "+10:00" + "'", str40, "+10:00");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "en");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "+10:00" + "'", str43, "+10:00");
// flaky:         org.junit.Assert.assertEquals("'" + str44 + "' != '" + "3268957" + "'", str44, "3268957");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "2021" + "'", str45, "2021");
        org.junit.Assert.assertNotNull(durationFieldType46);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "centuries" + "'", str49, "centuries");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "centuries" + "'", str50, "centuries");
        org.junit.Assert.assertNotNull(iSOChronology51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(dateTimeZone54);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "+10:00" + "'", str56, "+10:00");
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(durationField58);
        org.junit.Assert.assertNotNull(durationField59);
        org.junit.Assert.assertNotNull(durationField60);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertNotNull(dateTimeZone62);
    }

    @Test
    public void test11321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11321");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.yearOfEra();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.weekyearOfCentury();
        org.joda.time.DurationField durationField4 = iSOChronology0.weeks();
        org.joda.time.DurationField durationField5 = iSOChronology0.millis();
        org.joda.time.DurationField durationField6 = iSOChronology0.minutes();
        java.util.TimeZone timeZone7 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forTimeZone(timeZone7);
        int int10 = dateTimeZone8.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now(dateTimeZone8);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray12 = localDateTime11.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.hourOfDay();
        int int14 = localDateTime11.get(dateTimeFieldType13);
        org.joda.time.LocalDateTime.Property property15 = localDateTime11.dayOfWeek();
        org.joda.time.LocalDateTime.Property property16 = localDateTime11.weekOfWeekyear();
        java.util.TimeZone timeZone17 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forTimeZone(timeZone17);
        int int20 = dateTimeZone18.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime21 = org.joda.time.LocalDateTime.now(dateTimeZone18);
        org.joda.time.LocalDateTime localDateTime22 = org.joda.time.LocalDateTime.now(dateTimeZone18);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.plusSeconds((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime22.minusWeeks((int) (byte) 10);
        java.util.TimeZone timeZone27 = null;
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forTimeZone(timeZone27);
        int int30 = dateTimeZone28.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime31 = org.joda.time.LocalDateTime.now(dateTimeZone28);
        org.joda.time.LocalDateTime localDateTime32 = org.joda.time.LocalDateTime.now(dateTimeZone28);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime32.plusSeconds((int) (short) 10);
        int int35 = localDateTime32.size();
        boolean boolean36 = localDateTime26.isBefore((org.joda.time.ReadablePartial) localDateTime32);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime32.withMillisOfSecond(52);
        boolean boolean39 = localDateTime11.isAfter((org.joda.time.ReadablePartial) localDateTime38);
        org.joda.time.LocalDateTime.Property property40 = localDateTime38.yearOfCentury();
        org.joda.time.chrono.ISOChronology iSOChronology41 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField42 = iSOChronology41.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField43 = iSOChronology41.hourOfHalfday();
        long long48 = iSOChronology41.getDateTimeMillis((-1), 8, 3, 365);
        org.joda.time.DurationField durationField49 = iSOChronology41.months();
        org.joda.time.DateTimeField dateTimeField50 = iSOChronology41.dayOfYear();
        org.joda.time.LocalDateTime localDateTime51 = org.joda.time.LocalDateTime.now();
        java.util.TimeZone timeZone52 = null;
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.forTimeZone(timeZone52);
        int int55 = dateTimeZone53.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime56 = org.joda.time.LocalDateTime.now(dateTimeZone53);
        int int57 = localDateTime56.getWeekyear();
        org.joda.time.LocalDateTime.Property property58 = localDateTime56.millisOfDay();
        java.util.TimeZone timeZone59 = null;
        org.joda.time.DateTimeZone dateTimeZone60 = org.joda.time.DateTimeZone.forTimeZone(timeZone59);
        int int62 = dateTimeZone60.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime63 = org.joda.time.LocalDateTime.now(dateTimeZone60);
        org.joda.time.ReadableInstant readableInstant64 = null;
        org.joda.time.DateTime dateTime65 = localDateTime63.toDateTime(readableInstant64);
        java.util.TimeZone timeZone66 = null;
        org.joda.time.DateTimeZone dateTimeZone67 = org.joda.time.DateTimeZone.forTimeZone(timeZone66);
        int int69 = dateTimeZone67.getOffset(100L);
        org.joda.time.DateTime dateTime70 = localDateTime63.toDateTime(dateTimeZone67);
        int int71 = property58.compareTo((org.joda.time.ReadableInstant) dateTime70);
        org.joda.time.LocalDateTime localDateTime72 = property58.roundHalfEvenCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType73 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.LocalDateTime.Property property74 = localDateTime72.property(dateTimeFieldType73);
        org.joda.time.DateTimeFieldType dateTimeFieldType75 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.Chronology chronology76 = null;
        boolean boolean77 = dateTimeFieldType75.isSupported(chronology76);
        boolean boolean78 = localDateTime72.isSupported(dateTimeFieldType75);
        int int79 = localDateTime51.get(dateTimeFieldType75);
        org.joda.time.LocalDateTime localDateTime81 = localDateTime51.withCenturyOfEra(52);
        java.util.TimeZone timeZone82 = null;
        org.joda.time.DateTimeZone dateTimeZone83 = org.joda.time.DateTimeZone.forTimeZone(timeZone82);
        int int85 = dateTimeZone83.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime86 = org.joda.time.LocalDateTime.now(dateTimeZone83);
        org.joda.time.LocalDateTime localDateTime87 = org.joda.time.LocalDateTime.now(dateTimeZone83);
        org.joda.time.LocalDateTime localDateTime89 = localDateTime87.plusSeconds((int) (short) 10);
        int[] intArray90 = localDateTime87.getValues();
        int int91 = dateTimeField50.getMinimumValue((org.joda.time.ReadablePartial) localDateTime81, intArray90);
        iSOChronology0.validate((org.joda.time.ReadablePartial) localDateTime38, intArray90);
        org.joda.time.DurationField durationField93 = iSOChronology0.days();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 36000000 + "'", int10 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray12);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 36000000 + "'", int20 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 36000000 + "'", int30 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 4 + "'", int35 == 4);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(localDateTime38);
// flaky:         org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(iSOChronology41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + (-62180301599635L) + "'", long48 == (-62180301599635L));
        org.junit.Assert.assertNotNull(durationField49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 36000000 + "'", int55 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 2022 + "'", int57 == 2022);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNotNull(dateTimeZone60);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 36000000 + "'", int62 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(dateTimeZone67);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 36000000 + "'", int69 == 36000000);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(localDateTime72);
        org.junit.Assert.assertNotNull(dateTimeFieldType73);
        org.junit.Assert.assertNotNull(property74);
        org.junit.Assert.assertNotNull(dateTimeFieldType75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 53 + "'", int79 == 53);
        org.junit.Assert.assertNotNull(localDateTime81);
        org.junit.Assert.assertNotNull(dateTimeZone83);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 36000000 + "'", int85 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime86);
        org.junit.Assert.assertNotNull(localDateTime87);
        org.junit.Assert.assertNotNull(localDateTime89);
        org.junit.Assert.assertNotNull(intArray90);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[2022, 2, 22, 3269004]");
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 1 + "'", int91 == 1);
        org.junit.Assert.assertNotNull(durationField93);
    }

    @Test
    public void test11322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11322");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime5 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusMinutes((int) ' ');
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withYearOfCentury((int) (byte) 10);
        java.util.TimeZone timeZone10 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        int int13 = dateTimeZone11.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime14 = org.joda.time.LocalDateTime.now(dateTimeZone11);
        org.joda.time.LocalDateTime localDateTime15 = org.joda.time.LocalDateTime.now(dateTimeZone11);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.withMillisOfSecond((int) '4');
        org.joda.time.LocalDateTime localDateTime18 = localDateTime9.withFields((org.joda.time.ReadablePartial) localDateTime15);
        org.joda.time.DurationFieldType durationFieldType19 = org.joda.time.DurationFieldType.weekyears();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime9.withFieldAdded(durationFieldType19, 4);
        org.joda.time.LocalDateTime.Property property22 = localDateTime9.yearOfCentury();
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = property22.getFieldType();
        org.joda.time.DurationFieldType durationFieldType24 = dateTimeFieldType23.getDurationType();
        org.joda.time.chrono.ISOChronology iSOChronology25 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField26 = iSOChronology25.hourOfHalfday();
        java.lang.String str27 = iSOChronology25.toString();
        org.joda.time.DateTimeField dateTimeField28 = iSOChronology25.era();
        org.joda.time.DurationField durationField29 = iSOChronology25.centuries();
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        long long33 = iSOChronology25.add(readablePeriod30, (long) 2022, (int) (byte) 100);
        org.joda.time.DurationField durationField34 = iSOChronology25.years();
        org.joda.time.DateTimeField dateTimeField35 = iSOChronology25.dayOfYear();
        org.joda.time.DateTimeField dateTimeField36 = dateTimeFieldType23.getField((org.joda.time.Chronology) iSOChronology25);
        org.joda.time.DurationFieldType durationFieldType37 = dateTimeFieldType23.getDurationType();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 36000000 + "'", int3 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 36000000 + "'", int13 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(durationFieldType19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertNotNull(durationFieldType24);
        org.junit.Assert.assertNotNull(iSOChronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "ISOChronology[+10:00]" + "'", str27, "ISOChronology[+10:00]");
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 2022L + "'", long33 == 2022L);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(durationFieldType37);
    }

    @Test
    public void test11323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11323");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet1 = locale0.getExtensionKeys();
        java.util.Iterator<java.lang.Character> charItor2 = charSet1.iterator();
        java.util.ArrayList[] arrayListArray4 = new java.util.ArrayList[0];
        @SuppressWarnings("unchecked")
        java.util.ArrayList<java.util.Locale.LanguageRange>[] languageRangeListArray5 = (java.util.ArrayList<java.util.Locale.LanguageRange>[]) arrayListArray4;
        java.util.ArrayList<java.util.Locale.LanguageRange>[] languageRangeListArray6 = charSet1.toArray((java.util.ArrayList<java.util.Locale.LanguageRange>[]) arrayListArray4);
        java.util.TimeZone timeZone7 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forTimeZone(timeZone7);
        int int10 = dateTimeZone8.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now(dateTimeZone8);
        int int12 = localDateTime11.getWeekyear();
        org.joda.time.LocalDateTime.Property property13 = localDateTime11.millisOfDay();
        java.util.TimeZone timeZone14 = null;
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forTimeZone(timeZone14);
        int int17 = dateTimeZone15.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime18 = org.joda.time.LocalDateTime.now(dateTimeZone15);
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.DateTime dateTime20 = localDateTime18.toDateTime(readableInstant19);
        java.util.TimeZone timeZone21 = null;
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forTimeZone(timeZone21);
        int int24 = dateTimeZone22.getOffset(100L);
        org.joda.time.DateTime dateTime25 = localDateTime18.toDateTime(dateTimeZone22);
        int int26 = property13.compareTo((org.joda.time.ReadableInstant) dateTime25);
        boolean boolean27 = charSet1.equals((java.lang.Object) dateTime25);
        org.joda.time.DateTimeZone dateTimeZone28 = dateTime25.getZone();
        org.joda.time.chrono.ISOChronology iSOChronology29 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone28);
        org.joda.time.DateTimeField dateTimeField30 = iSOChronology29.clockhourOfHalfday();
        org.joda.time.DurationField durationField31 = iSOChronology29.centuries();
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology29);
        org.joda.time.DurationField durationField33 = iSOChronology29.weekyears();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet1);
        org.junit.Assert.assertNotNull(charItor2);
        org.junit.Assert.assertNotNull(arrayListArray4);
        org.junit.Assert.assertNotNull(languageRangeListArray5);
        org.junit.Assert.assertNotNull(languageRangeListArray6);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 36000000 + "'", int10 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2022 + "'", int12 == 2022);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 36000000 + "'", int17 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 36000000 + "'", int24 == 36000000);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(iSOChronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(durationField33);
    }

    @Test
    public void test11324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11324");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.DateTime dateTime6 = localDateTime4.toDateTime(readableInstant5);
        java.util.TimeZone timeZone7 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forTimeZone(timeZone7);
        int int10 = dateTimeZone8.getOffset(100L);
        org.joda.time.DateTime dateTime11 = localDateTime4.toDateTime(dateTimeZone8);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime4.plusMinutes((-1));
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.hourOfDay();
        org.joda.time.LocalDateTime localDateTime15 = property14.withMinimumValue();
        java.lang.String str16 = property14.toString();
        java.util.TimeZone timeZone17 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forTimeZone(timeZone17);
        int int20 = dateTimeZone18.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime21 = org.joda.time.LocalDateTime.now(dateTimeZone18);
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.DateTime dateTime23 = localDateTime21.toDateTime(readableInstant22);
        org.joda.time.Chronology chronology24 = dateTime23.getChronology();
        org.joda.time.DurationField durationField25 = chronology24.hours();
        long long28 = durationField25.add(1645454778469L, (long) 53178951);
        boolean boolean29 = property14.equals((java.lang.Object) durationField25);
        java.lang.String str30 = property14.toString();
        java.lang.String str31 = property14.getName();
        java.util.Locale locale32 = null;
        java.lang.String str33 = property14.getAsShortText(locale32);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime35 = property14.setCopy("53479960");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 53479960 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 36000000 + "'", int3 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 36000000 + "'", int10 == 36000000);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Property[hourOfDay]" + "'", str16, "Property[hourOfDay]");
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 36000000 + "'", int20 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 193089678378469L + "'", long28 == 193089678378469L);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Property[hourOfDay]" + "'", str30, "Property[hourOfDay]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "hourOfDay" + "'", str31, "hourOfDay");
// flaky:         org.junit.Assert.assertEquals("'" + str33 + "' != '" + "0" + "'", str33, "0");
    }

    @Test
    public void test11325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11325");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.yearOfEra();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.weekyearOfCentury();
        java.lang.String str4 = iSOChronology0.toString();
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology0.clockhourOfHalfday();
        java.lang.String str6 = iSOChronology0.toString();
        org.joda.time.DateTimeField dateTimeField7 = iSOChronology0.dayOfMonth();
        org.joda.time.DurationField durationField8 = iSOChronology0.days();
        // The following exception was thrown during execution in test generation
        try {
            long long16 = iSOChronology0.getDateTimeMillis(53708052, 2835142, 49847546, 0, 49896067, 2836, 49862776);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 49896067 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "ISOChronology[+10:00]" + "'", str4, "ISOChronology[+10:00]");
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "ISOChronology[+10:00]" + "'", str6, "ISOChronology[+10:00]");
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
    }

    @Test
    public void test11326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11326");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale1 = java.util.Locale.JAPANESE;
        java.lang.String str2 = locale1.getDisplayLanguage();
        java.lang.String str3 = locale1.getISO3Language();
        java.util.Locale locale4 = java.util.Locale.CHINA;
        java.lang.String str5 = locale1.getDisplayLanguage(locale4);
        org.joda.time.tz.NameProvider nameProvider6 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale7 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet8 = locale7.getExtensionKeys();
        java.lang.String str11 = nameProvider6.getShortName(locale7, "Koordinierte Universalzeit", "+00:00");
        java.util.Locale locale12 = java.util.Locale.KOREAN;
        java.lang.String str13 = locale7.getDisplayName(locale12);
        java.lang.String str14 = locale4.getDisplayVariant(locale12);
        java.util.Locale locale15 = locale12.stripExtensions();
        java.util.Locale.setDefault(category0, locale12);
        boolean boolean18 = locale12.equals((java.lang.Object) "53590845");
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Japanese" + "'", str2, "Japanese");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "jpn" + "'", str3, "jpn");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "\u65e5\u6587" + "'", str5, "\u65e5\u6587");
        org.junit.Assert.assertNotNull(nameProvider6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet8);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str13, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ko");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test11327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11327");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.weekOfWeekyear();
        java.util.TimeZone timeZone2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone2);
        java.lang.String str5 = dateTimeZone3.getName(31556995199999L);
        org.joda.time.Chronology chronology6 = iSOChronology0.withZone(dateTimeZone3);
        org.joda.time.DateTimeField dateTimeField7 = iSOChronology0.halfdayOfDay();
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField9 = iSOChronology8.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology8.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology8.weekyearOfCentury();
        org.joda.time.DurationField durationField12 = iSOChronology8.years();
        org.joda.time.DateTimeZone dateTimeZone13 = iSOChronology8.getZone();
        org.joda.time.Chronology chronology14 = iSOChronology0.withZone(dateTimeZone13);
        java.util.TimeZone timeZone15 = null;
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forTimeZone(timeZone15);
        int int18 = dateTimeZone16.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime19 = org.joda.time.LocalDateTime.now(dateTimeZone16);
        int int20 = localDateTime19.getWeekyear();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime19.withSecondOfMinute((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.minusMillis((-292275054));
        org.joda.time.chrono.ISOChronology iSOChronology25 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField26 = iSOChronology25.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField27 = iSOChronology25.centuryOfEra();
        org.joda.time.DurationField durationField28 = iSOChronology25.centuries();
        org.joda.time.DurationField durationField29 = iSOChronology25.hours();
        java.util.TimeZone timeZone30 = null;
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forTimeZone(timeZone30);
        int int33 = dateTimeZone31.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime34 = org.joda.time.LocalDateTime.now(dateTimeZone31);
        int int35 = localDateTime34.getDayOfYear();
        org.joda.time.LocalDateTime localDateTime37 = localDateTime34.withYearOfEra(2022);
        long long39 = iSOChronology25.set((org.joda.time.ReadablePartial) localDateTime37, (long) 0);
        org.joda.time.DateTimeField dateTimeField40 = iSOChronology25.monthOfYear();
        org.joda.time.DateTimeField dateTimeField41 = iSOChronology25.clockhourOfDay();
        org.joda.time.Chronology chronology42 = iSOChronology25.withUTC();
        org.joda.time.DateTimeZone dateTimeZone43 = iSOChronology25.getZone();
        org.joda.time.DateTime dateTime44 = localDateTime22.toDateTime(dateTimeZone43);
        org.joda.time.Chronology chronology45 = iSOChronology0.withZone(dateTimeZone43);
        org.joda.time.DurationField durationField46 = iSOChronology0.weeks();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+10:00" + "'", str5, "+10:00");
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 36000000 + "'", int18 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2022 + "'", int20 == 2022);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(iSOChronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 36000000 + "'", int33 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 53 + "'", int35 == 53);
        org.junit.Assert.assertNotNull(localDateTime37);
// flaky:         org.junit.Assert.assertTrue("'" + long39 + "' != '" + 1645455269237L + "'", long39 == 1645455269237L);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(durationField46);
    }

    @Test
    public void test11328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11328");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        long long6 = iSOChronology0.add(readablePeriod3, (long) 100, 11);
        org.joda.time.Chronology chronology7 = iSOChronology0.withUTC();
        org.joda.time.DateTimeField dateTimeField8 = iSOChronology0.hourOfHalfday();
        org.joda.time.DurationField durationField9 = iSOChronology0.centuries();
        org.joda.time.DurationField durationField10 = iSOChronology0.halfdays();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology0.weekOfWeekyear();
        int int13 = dateTimeField11.getMaximumValue(1644850239778L);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 100L + "'", long6 == 100L);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 52 + "'", int13 == 52);
    }

    @Test
    public void test11329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11329");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.yearOfEra();
        java.util.TimeZone timeZone3 = null;
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forTimeZone(timeZone3);
        int int6 = dateTimeZone4.getOffset(100L);
        java.util.TimeZone timeZone7 = dateTimeZone4.toTimeZone();
        int int9 = dateTimeZone4.getStandardOffset((long) ' ');
        org.joda.time.Chronology chronology10 = iSOChronology0.withZone(dateTimeZone4);
        long long12 = dateTimeZone4.previousTransition(442108802806L);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone4);
        org.joda.time.DurationField durationField14 = iSOChronology13.millis();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 36000000 + "'", int6 == 36000000);
        org.junit.Assert.assertNotNull(timeZone7);
        org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 36000000 + "'", int9 == 36000000);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 442108802806L + "'", long12 == 442108802806L);
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
    }

    @Test
    public void test11330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11330");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        int int5 = localDateTime4.getWeekyear();
        org.joda.time.DurationFieldType durationFieldType6 = org.joda.time.DurationFieldType.days();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime4.withFieldAdded(durationFieldType6, 53166088);
        org.joda.time.chrono.ISOChronology iSOChronology9 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology9.hourOfHalfday();
        java.lang.String str11 = iSOChronology9.toString();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology9.era();
        org.joda.time.DurationField durationField13 = iSOChronology9.centuries();
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        long long17 = iSOChronology9.add(readablePeriod14, (long) 2022, (int) (byte) 100);
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology9.dayOfYear();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology9.year();
        boolean boolean20 = durationFieldType6.isSupported((org.joda.time.Chronology) iSOChronology9);
        org.joda.time.DurationField durationField21 = iSOChronology9.centuries();
        org.joda.time.DurationField durationField22 = iSOChronology9.weekyears();
        org.joda.time.DateTimeField dateTimeField23 = iSOChronology9.clockhourOfDay();
        org.joda.time.DurationField durationField24 = iSOChronology9.hours();
        java.util.TimeZone timeZone25 = null;
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forTimeZone(timeZone25);
        int int28 = dateTimeZone26.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime29 = org.joda.time.LocalDateTime.now(dateTimeZone26);
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.DateTime dateTime31 = localDateTime29.toDateTime(readableInstant30);
        java.util.TimeZone timeZone32 = null;
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forTimeZone(timeZone32);
        int int35 = dateTimeZone33.getOffset(100L);
        org.joda.time.DateTime dateTime36 = localDateTime29.toDateTime(dateTimeZone33);
        org.joda.time.LocalDateTime.Property property37 = localDateTime29.monthOfYear();
        java.lang.String str38 = property37.getAsText();
        org.joda.time.chrono.ISOChronology iSOChronology39 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField40 = iSOChronology39.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField41 = iSOChronology39.centuryOfEra();
        org.joda.time.DurationField durationField42 = iSOChronology39.centuries();
        org.joda.time.DateTimeField dateTimeField43 = iSOChronology39.millisOfDay();
        java.util.TimeZone timeZone44 = null;
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forTimeZone(timeZone44);
        int int47 = dateTimeZone45.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime48 = org.joda.time.LocalDateTime.now(dateTimeZone45);
        org.joda.time.ReadableInstant readableInstant49 = null;
        org.joda.time.DateTime dateTime50 = localDateTime48.toDateTime(readableInstant49);
        java.util.TimeZone timeZone51 = null;
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.forTimeZone(timeZone51);
        int int54 = dateTimeZone52.getOffset(100L);
        org.joda.time.DateTime dateTime55 = localDateTime48.toDateTime(dateTimeZone52);
        org.joda.time.LocalDateTime.Property property56 = localDateTime48.monthOfYear();
        java.util.TimeZone timeZone57 = null;
        org.joda.time.DateTimeZone dateTimeZone58 = org.joda.time.DateTimeZone.forTimeZone(timeZone57);
        int int60 = dateTimeZone58.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime61 = org.joda.time.LocalDateTime.now(dateTimeZone58);
        int int62 = localDateTime61.getWeekyear();
        org.joda.time.LocalDateTime.Property property63 = localDateTime61.millisOfDay();
        java.util.TimeZone timeZone64 = null;
        org.joda.time.DateTimeZone dateTimeZone65 = org.joda.time.DateTimeZone.forTimeZone(timeZone64);
        int int67 = dateTimeZone65.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime68 = org.joda.time.LocalDateTime.now(dateTimeZone65);
        org.joda.time.ReadableInstant readableInstant69 = null;
        org.joda.time.DateTime dateTime70 = localDateTime68.toDateTime(readableInstant69);
        java.util.TimeZone timeZone71 = null;
        org.joda.time.DateTimeZone dateTimeZone72 = org.joda.time.DateTimeZone.forTimeZone(timeZone71);
        int int74 = dateTimeZone72.getOffset(100L);
        org.joda.time.DateTime dateTime75 = localDateTime68.toDateTime(dateTimeZone72);
        int int76 = property63.compareTo((org.joda.time.ReadableInstant) dateTime75);
        org.joda.time.LocalDateTime localDateTime77 = property63.roundHalfEvenCopy();
        boolean boolean78 = localDateTime48.isAfter((org.joda.time.ReadablePartial) localDateTime77);
        java.util.Locale locale79 = java.util.Locale.UK;
        java.lang.String str80 = dateTimeField43.getAsText((org.joda.time.ReadablePartial) localDateTime77, locale79);
        int int81 = property37.compareTo((org.joda.time.ReadablePartial) localDateTime77);
        org.joda.time.LocalDateTime localDateTime83 = property37.addToCopy(56);
        org.joda.time.LocalDateTime localDateTime85 = localDateTime83.plusHours((int) '4');
        org.joda.time.ReadablePeriod readablePeriod86 = null;
        org.joda.time.LocalDateTime localDateTime88 = localDateTime83.withPeriodAdded(readablePeriod86, 24);
        int[] intArray90 = iSOChronology9.get((org.joda.time.ReadablePartial) localDateTime88, 1644850283042L);
        org.joda.time.DurationField durationField91 = iSOChronology9.minutes();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 36000000 + "'", int3 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2022 + "'", int5 == 2022);
        org.junit.Assert.assertNotNull(durationFieldType6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(iSOChronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "ISOChronology[+10:00]" + "'", str11, "ISOChronology[+10:00]");
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 2022L + "'", long17 == 2022L);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 36000000 + "'", int28 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 36000000 + "'", int35 == 36000000);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "February" + "'", str38, "February");
        org.junit.Assert.assertNotNull(iSOChronology39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 36000000 + "'", int47 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 36000000 + "'", int54 == 36000000);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(dateTimeZone58);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 36000000 + "'", int60 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 2022 + "'", int62 == 2022);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertNotNull(dateTimeZone65);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 36000000 + "'", int67 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime68);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(dateTimeZone72);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 36000000 + "'", int74 == 36000000);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertNotNull(localDateTime77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(locale79);
        org.junit.Assert.assertEquals(locale79.toString(), "en_GB");
// flaky:         org.junit.Assert.assertEquals("'" + str80 + "' != '" + "3269332" + "'", str80, "3269332");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertNotNull(localDateTime83);
        org.junit.Assert.assertNotNull(localDateTime85);
        org.junit.Assert.assertNotNull(localDateTime88);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[2022, 2, 15, 3083042]");
        org.junit.Assert.assertNotNull(durationField91);
    }

    @Test
    public void test11331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11331");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("3040470");
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Greenwich Mean Time");
    }

    @Test
    public void test11332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11332");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.centuryOfEra();
        org.joda.time.DurationField durationField3 = iSOChronology0.seconds();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.clockhourOfDay();
        org.joda.time.Chronology chronology5 = iSOChronology0.withUTC();
        org.joda.time.DateTimeField dateTimeField6 = iSOChronology0.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField7 = iSOChronology0.year();
        org.joda.time.DurationField durationField8 = iSOChronology0.seconds();
        org.joda.time.DateTimeZone dateTimeZone9 = iSOChronology0.getZone();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology0.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology0.clockhourOfHalfday();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
    }

    @Test
    public void test11333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11333");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime5 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.plusSeconds((int) (short) 10);
        int int8 = localDateTime5.size();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime5.plusMillis(2932992);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray11 = localDateTime5.getFieldTypes();
        org.joda.time.LocalDateTime.Property property12 = localDateTime5.year();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 36000000 + "'", int3 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 4 + "'", int8 == 4);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray11);
        org.junit.Assert.assertNotNull(property12);
    }

    @Test
    public void test11334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11334");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.centuryOfEra();
        org.joda.time.DurationField durationField3 = iSOChronology0.centuries();
        org.joda.time.DurationField durationField4 = iSOChronology0.hours();
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        int int8 = dateTimeZone6.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime9 = org.joda.time.LocalDateTime.now(dateTimeZone6);
        int int10 = localDateTime9.getDayOfYear();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime9.withYearOfEra(2022);
        long long14 = iSOChronology0.set((org.joda.time.ReadablePartial) localDateTime12, (long) 0);
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology0.monthOfYear();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology0.clockhourOfDay();
        long long18 = dateTimeField16.roundFloor(3155695200000L);
        java.util.Locale.Category category19 = java.util.Locale.Category.DISPLAY;
        org.joda.time.tz.NameProvider nameProvider20 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale21 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet22 = locale21.getExtensionKeys();
        java.lang.String str25 = nameProvider20.getShortName(locale21, "Koordinierte Universalzeit", "+00:00");
        java.lang.String str26 = locale21.toLanguageTag();
        java.util.Locale.setDefault(category19, locale21);
        org.joda.time.chrono.ISOChronology iSOChronology28 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField29 = iSOChronology28.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField30 = iSOChronology28.yearOfEra();
        org.joda.time.DurationField durationField31 = iSOChronology28.minutes();
        org.joda.time.DateTimeField dateTimeField32 = iSOChronology28.weekyear();
        org.joda.time.DurationField durationField33 = iSOChronology28.centuries();
        org.joda.time.DateTimeField dateTimeField34 = iSOChronology28.centuryOfEra();
        java.util.TimeZone timeZone35 = null;
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forTimeZone(timeZone35);
        java.lang.String str38 = dateTimeZone36.getName(31556995199999L);
        org.joda.time.Chronology chronology39 = iSOChronology28.withZone(dateTimeZone36);
        java.util.TimeZone timeZone41 = null;
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forTimeZone(timeZone41);
        int int44 = dateTimeZone42.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime45 = org.joda.time.LocalDateTime.now(dateTimeZone42);
        org.joda.time.ReadableInstant readableInstant46 = null;
        org.joda.time.DateTime dateTime47 = localDateTime45.toDateTime(readableInstant46);
        org.joda.time.Chronology chronology48 = dateTime47.getChronology();
        org.joda.time.DurationField durationField49 = chronology48.hours();
        org.joda.time.DurationField durationField50 = chronology48.months();
        org.joda.time.DateTimeField dateTimeField51 = chronology48.dayOfYear();
        java.util.TimeZone timeZone52 = null;
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.forTimeZone(timeZone52);
        int int55 = dateTimeZone53.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime56 = org.joda.time.LocalDateTime.now(dateTimeZone53);
        int[] intArray59 = new int[] { (short) 0, (short) 0 };
        int int60 = dateTimeField51.getMinimumValue((org.joda.time.ReadablePartial) localDateTime56, intArray59);
        int int62 = dateTimeField51.getMinimumValue((long) 100);
        java.util.TimeZone timeZone63 = null;
        org.joda.time.DateTimeZone dateTimeZone64 = org.joda.time.DateTimeZone.forTimeZone(timeZone63);
        int int66 = dateTimeZone64.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime67 = org.joda.time.LocalDateTime.now(dateTimeZone64);
        int int68 = localDateTime67.getWeekyear();
        org.joda.time.LocalDateTime.Property property69 = localDateTime67.minuteOfHour();
        int int70 = dateTimeField51.getMaximumValue((org.joda.time.ReadablePartial) localDateTime67);
        long long73 = dateTimeField51.getDifferenceAsLong(7870L, 0L);
        org.joda.time.tz.NameProvider nameProvider74 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale75 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet76 = locale75.getExtensionKeys();
        java.lang.String str79 = nameProvider74.getShortName(locale75, "Koordinierte Universalzeit", "+00:00");
        java.util.Locale locale80 = java.util.Locale.GERMAN;
        java.lang.String str83 = nameProvider74.getShortName(locale80, "53167803", "jpn");
        int int84 = dateTimeField51.getMaximumShortTextLength(locale80);
        java.lang.String str85 = dateTimeZone36.getName((long) 2, locale80);
        java.lang.String str86 = locale80.getDisplayVariant();
        java.lang.String str87 = locale80.getDisplayName();
        java.lang.String str88 = locale80.getISO3Language();
        java.util.Locale.setDefault(category19, locale80);
        int int90 = dateTimeField16.getMaximumShortTextLength(locale80);
        long long93 = dateTimeField16.getDifferenceAsLong(1645455039088L, 1645454985764L);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 36000000 + "'", int8 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 53 + "'", int10 == 53);
        org.junit.Assert.assertNotNull(localDateTime12);
// flaky:         org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1645455269443L + "'", long14 == 1645455269443L);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 3155695200000L + "'", long18 == 3155695200000L);
        org.junit.Assert.assertTrue("'" + category19 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category19.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(nameProvider20);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet22);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "ko" + "'", str26, "ko");
        org.junit.Assert.assertNotNull(iSOChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "+10:00" + "'", str38, "+10:00");
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 36000000 + "'", int44 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(durationField49);
        org.junit.Assert.assertNotNull(durationField50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 36000000 + "'", int55 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[0, 0]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertNotNull(dateTimeZone64);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 36000000 + "'", int66 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 2022 + "'", int68 == 2022);
        org.junit.Assert.assertNotNull(property69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 365 + "'", int70 == 365);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 0L + "'", long73 == 0L);
        org.junit.Assert.assertNotNull(nameProvider74);
        org.junit.Assert.assertNotNull(locale75);
        org.junit.Assert.assertEquals(locale75.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet76);
        org.junit.Assert.assertNull(str79);
        org.junit.Assert.assertNotNull(locale80);
        org.junit.Assert.assertEquals(locale80.toString(), "de");
        org.junit.Assert.assertNull(str83);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 3 + "'", int84 == 3);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "+10:00" + "'", str85, "+10:00");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "" + "'", str86, "");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "\ub3c5\uc77c\uc5b4" + "'", str87, "\ub3c5\uc77c\uc5b4");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "deu" + "'", str88, "deu");
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 2 + "'", int90 == 2);
        org.junit.Assert.assertTrue("'" + long93 + "' != '" + 0L + "'", long93 == 0L);
    }

    @Test
    public void test11335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11335");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        int int5 = localDateTime4.getWeekyear();
        org.joda.time.LocalDateTime.Property property6 = localDateTime4.millisOfDay();
        java.util.TimeZone timeZone7 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forTimeZone(timeZone7);
        int int10 = dateTimeZone8.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now(dateTimeZone8);
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.DateTime dateTime13 = localDateTime11.toDateTime(readableInstant12);
        java.util.TimeZone timeZone14 = null;
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forTimeZone(timeZone14);
        int int17 = dateTimeZone15.getOffset(100L);
        org.joda.time.DateTime dateTime18 = localDateTime11.toDateTime(dateTimeZone15);
        int int19 = property6.compareTo((org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.LocalDateTime localDateTime20 = property6.roundHalfEvenCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.LocalDateTime.Property property22 = localDateTime20.property(dateTimeFieldType21);
        org.joda.time.LocalDateTime.Property property23 = localDateTime20.millisOfDay();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 36000000 + "'", int3 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2022 + "'", int5 == 2022);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 36000000 + "'", int10 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 36000000 + "'", int17 == 36000000);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(property23);
    }

    @Test
    public void test11336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11336");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        org.joda.time.DurationFieldType durationFieldType1 = dateTimeFieldType0.getDurationType();
        java.lang.String str2 = durationFieldType1.toString();
        org.joda.time.chrono.ISOChronology iSOChronology3 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology3.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology3.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        long long9 = iSOChronology3.add(readablePeriod6, (long) 100, 11);
        org.joda.time.Chronology chronology10 = iSOChronology3.withUTC();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology3.millisOfSecond();
        org.joda.time.DurationField durationField12 = durationFieldType1.getField((org.joda.time.Chronology) iSOChronology3);
        org.joda.time.DateTimeField dateTimeField13 = iSOChronology3.clockhourOfDay();
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray16 = iSOChronology3.get(readablePeriod14, 1677759687100800000L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(durationFieldType1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hours" + "'", str2, "hours");
        org.junit.Assert.assertNotNull(iSOChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 100L + "'", long9 == 100L);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
    }

    @Test
    public void test11337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11337");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(292278993, (-19039), 917, 3131827, 49798521);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 3131827 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test11338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11338");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.yearOfEra();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.weekyearOfCentury();
        org.joda.time.DurationField durationField5 = iSOChronology0.seconds();
        org.joda.time.LocalDateTime localDateTime6 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) iSOChronology0);
        org.joda.time.DateTimeField dateTimeField7 = iSOChronology0.hourOfDay();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeField7);
    }

    @Test
    public void test11339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11339");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.hourOfDay();
        org.joda.time.Chronology chronology5 = iSOChronology0.withUTC();
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime(chronology5);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.centuryOfEra();
        org.joda.time.LocalDateTime.Property property8 = localDateTime6.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime6.plusYears(49680496);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime10);
    }

    @Test
    public void test11340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11340");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        java.util.TimeZone timeZone1 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        int int4 = dateTimeZone2.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime5 = org.joda.time.LocalDateTime.now(dateTimeZone2);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray6 = localDateTime5.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.hourOfDay();
        int int8 = localDateTime5.get(dateTimeFieldType7);
        org.joda.time.LocalDateTime.Property property9 = localDateTime5.dayOfWeek();
        boolean boolean10 = localDateTime0.isEqual((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.chrono.ISOChronology iSOChronology12 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField13 = iSOChronology12.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology12.centuryOfEra();
        org.joda.time.DurationField durationField15 = iSOChronology12.seconds();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology12.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology12.hourOfHalfday();
        java.util.TimeZone timeZone18 = null;
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forTimeZone(timeZone18);
        int int21 = dateTimeZone19.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime22 = org.joda.time.LocalDateTime.now(dateTimeZone19);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray23 = localDateTime22.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.hourOfDay();
        int int25 = localDateTime22.get(dateTimeFieldType24);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime22.minusWeeks(1);
        long long29 = iSOChronology12.set((org.joda.time.ReadablePartial) localDateTime27, (long) 0);
        boolean boolean30 = dateTimeFieldType11.isSupported((org.joda.time.Chronology) iSOChronology12);
        int int31 = localDateTime0.get(dateTimeFieldType11);
        java.util.TimeZone timeZone32 = null;
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forTimeZone(timeZone32);
        int int35 = dateTimeZone33.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime36 = org.joda.time.LocalDateTime.now(dateTimeZone33);
        int int37 = localDateTime36.getWeekyear();
        org.joda.time.LocalDateTime.Property property38 = localDateTime36.millisOfDay();
        java.util.Locale locale39 = java.util.Locale.GERMAN;
        java.util.Locale locale40 = java.util.Locale.GERMAN;
        java.lang.String str41 = locale39.getDisplayCountry(locale40);
        java.util.Locale locale42 = locale39.stripExtensions();
        int int43 = property38.getMaximumShortTextLength(locale39);
        org.joda.time.Interval interval44 = property38.toInterval();
        org.joda.time.LocalDateTime localDateTime45 = property38.getLocalDateTime();
        int int46 = localDateTime45.getYearOfEra();
        int int47 = localDateTime45.getCenturyOfEra();
        int int48 = localDateTime0.compareTo((org.joda.time.ReadablePartial) localDateTime45);
        org.joda.time.LocalDateTime localDateTime50 = localDateTime0.withCenturyOfEra(23);
        int int51 = localDateTime0.getMillisOfSecond();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 36000000 + "'", int4 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertNotNull(iSOChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 36000000 + "'", int21 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray23);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
// flaky:         org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(localDateTime27);
// flaky:         org.junit.Assert.assertTrue("'" + long29 + "' != '" + 1644850469648L + "'", long29 == 1644850469648L);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int31 + "' != '" + 3269 + "'", int31 == 3269);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 36000000 + "'", int35 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2022 + "'", int37 == 2022);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "de");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "de");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "de");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 8 + "'", int43 == 8);
        org.junit.Assert.assertNotNull(interval44);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2022 + "'", int46 == 2022);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 20 + "'", int47 == 20);
// flaky:         org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(localDateTime50);
// flaky:         org.junit.Assert.assertTrue("'" + int51 + "' != '" + 648 + "'", int51 == 648);
    }

    @Test
    public void test11341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11341");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime5 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusMinutes((int) ' ');
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withYearOfCentury((int) (byte) 10);
        java.util.TimeZone timeZone10 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        int int13 = dateTimeZone11.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime14 = org.joda.time.LocalDateTime.now(dateTimeZone11);
        org.joda.time.LocalDateTime localDateTime15 = org.joda.time.LocalDateTime.now(dateTimeZone11);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.withMillisOfSecond((int) '4');
        org.joda.time.LocalDateTime localDateTime18 = localDateTime9.withFields((org.joda.time.ReadablePartial) localDateTime15);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.plusHours(3);
        java.util.TimeZone timeZone21 = null;
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forTimeZone(timeZone21);
        int int24 = dateTimeZone22.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime25 = org.joda.time.LocalDateTime.now(dateTimeZone22);
        org.joda.time.LocalDateTime localDateTime26 = org.joda.time.LocalDateTime.now(dateTimeZone22);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.minusMinutes((int) ' ');
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.withYearOfCentury((int) (byte) 10);
        java.util.TimeZone timeZone31 = null;
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forTimeZone(timeZone31);
        int int34 = dateTimeZone32.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime35 = org.joda.time.LocalDateTime.now(dateTimeZone32);
        org.joda.time.LocalDateTime localDateTime36 = org.joda.time.LocalDateTime.now(dateTimeZone32);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime36.withMillisOfSecond((int) '4');
        org.joda.time.LocalDateTime localDateTime39 = localDateTime30.withFields((org.joda.time.ReadablePartial) localDateTime36);
        org.joda.time.LocalDateTime localDateTime41 = localDateTime39.plusHours(3);
        boolean boolean42 = localDateTime18.isBefore((org.joda.time.ReadablePartial) localDateTime39);
        org.joda.time.LocalDateTime localDateTime44 = localDateTime39.minusMonths(2818);
        org.joda.time.chrono.ISOChronology iSOChronology45 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField46 = iSOChronology45.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField47 = iSOChronology45.yearOfEra();
        org.joda.time.DateTimeField dateTimeField48 = iSOChronology45.hourOfDay();
        org.joda.time.DateTimeField dateTimeField49 = iSOChronology45.dayOfMonth();
        java.util.TimeZone timeZone50 = null;
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.forTimeZone(timeZone50);
        int int53 = dateTimeZone51.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime54 = org.joda.time.LocalDateTime.now(dateTimeZone51);
        org.joda.time.ReadableInstant readableInstant55 = null;
        org.joda.time.DateTime dateTime56 = localDateTime54.toDateTime(readableInstant55);
        java.util.TimeZone timeZone57 = null;
        org.joda.time.DateTimeZone dateTimeZone58 = org.joda.time.DateTimeZone.forTimeZone(timeZone57);
        int int60 = dateTimeZone58.getOffset(100L);
        org.joda.time.DateTime dateTime61 = localDateTime54.toDateTime(dateTimeZone58);
        org.joda.time.LocalDateTime localDateTime63 = localDateTime54.withYear(52);
        org.joda.time.Chronology chronology64 = localDateTime63.getChronology();
        org.joda.time.LocalDateTime localDateTime66 = localDateTime63.withYear((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime68 = localDateTime63.minusSeconds(2827402);
        int int69 = dateTimeField49.getMinimumValue((org.joda.time.ReadablePartial) localDateTime63);
        long long72 = dateTimeField49.addWrapField((long) 53262638, 2804241);
        org.joda.time.DateTimeFieldType dateTimeFieldType73 = dateTimeField49.getType();
        boolean boolean74 = localDateTime39.isSupported(dateTimeFieldType73);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 36000000 + "'", int3 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 36000000 + "'", int13 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 36000000 + "'", int24 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 36000000 + "'", int34 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(iSOChronology45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 36000000 + "'", int53 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTimeZone58);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 36000000 + "'", int60 == 36000000);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNotNull(chronology64);
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertNotNull(localDateTime68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 1 + "'", int69 == 1);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 1090062638L + "'", long72 == 1090062638L);
        org.junit.Assert.assertNotNull(dateTimeFieldType73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
    }

    @Test
    public void test11342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11342");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(86400000L);
        java.util.TimeZone timeZone2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone2);
        int int5 = dateTimeZone3.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime6 = org.joda.time.LocalDateTime.now(dateTimeZone3);
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.DateTime dateTime8 = localDateTime6.toDateTime(readableInstant7);
        java.util.TimeZone timeZone9 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        int int12 = dateTimeZone10.getOffset(100L);
        org.joda.time.DateTime dateTime13 = localDateTime6.toDateTime(dateTimeZone10);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime6.plusMinutes((-1));
        org.joda.time.LocalDateTime.Property property16 = localDateTime15.hourOfDay();
        org.joda.time.LocalDateTime localDateTime17 = property16.withMinimumValue();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.withWeekyear((-19044));
        org.joda.time.LocalDateTime.Property property20 = localDateTime19.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime19.minusMillis(2839);
        boolean boolean23 = localDateTime1.isEqual((org.joda.time.ReadablePartial) localDateTime19);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime25 = localDateTime19.withYearOfCentury(49758200);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 49758200 for yearOfCentury must be in the range [0,99]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 36000000 + "'", int5 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 36000000 + "'", int12 == 36000000);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test11343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11343");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.minuteOfHour();
        org.joda.time.Chronology chronology4 = iSOChronology0.withUTC();
        org.joda.time.DurationField durationField5 = iSOChronology0.eras();
        // The following exception was thrown during execution in test generation
        try {
            long long8 = durationField5.getMillis(2806L, (long) 6);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: eras field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
    }

    @Test
    public void test11344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11344");
        java.lang.String[] strArray1 = java.util.TimeZone.getAvailableIDs(49915611);
        org.junit.Assert.assertNotNull(strArray1);
    }

    @Test
    public void test11345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11345");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.yearOfEra();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology0.weekyear();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.Chronology chronology7 = iSOChronology0.withZone(dateTimeZone6);
        org.joda.time.DurationField durationField8 = iSOChronology0.minutes();
        long long12 = iSOChronology0.add(1645454771211L, 1644849998618L, (int) 'u');
        org.joda.time.Chronology chronology13 = iSOChronology0.withUTC();
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology0.hourOfDay();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 194092904609517L + "'", long12 == 194092904609517L);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
    }

    @Test
    public void test11346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11346");
        java.util.TimeZone timeZone1 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        int int4 = dateTimeZone2.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime5 = org.joda.time.LocalDateTime.now(dateTimeZone2);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.DateTime dateTime7 = localDateTime5.toDateTime(readableInstant6);
        org.joda.time.Chronology chronology8 = dateTime7.getChronology();
        org.joda.time.DurationField durationField9 = chronology8.hours();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((long) 52, chronology8);
        org.joda.time.DateTimeField dateTimeField11 = chronology8.secondOfDay();
        long long13 = dateTimeField11.roundHalfFloor(100L);
        long long15 = dateTimeField11.remainder(7435349078400000L);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 36000000 + "'", int4 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
    }

    @Test
    public void test11347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11347");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        int int5 = localDateTime4.getWeekyear();
        org.joda.time.LocalDateTime.Property property6 = localDateTime4.millisOfDay();
        int int7 = property6.get();
        org.joda.time.LocalDateTime localDateTime8 = property6.roundCeilingCopy();
        java.util.Locale locale9 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str10 = property6.getAsShortText(locale9);
        org.joda.time.LocalDateTime localDateTime12 = property6.addWrapFieldToCopy(0);
        org.joda.time.DurationField durationField13 = property6.getLeapDurationField();
        org.joda.time.LocalDateTime localDateTime15 = property6.addToCopy(882);
        java.util.TimeZone timeZone16 = null;
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forTimeZone(timeZone16);
        int int19 = dateTimeZone17.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime20 = org.joda.time.LocalDateTime.now(dateTimeZone17);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray21 = localDateTime20.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.hourOfDay();
        int int23 = localDateTime20.get(dateTimeFieldType22);
        org.joda.time.LocalDateTime.Property property24 = localDateTime20.dayOfWeek();
        boolean boolean25 = property24.isLeap();
        long long26 = property24.remainder();
        org.joda.time.LocalDateTime localDateTime27 = property24.getLocalDateTime();
        org.joda.time.Chronology chronology28 = localDateTime27.getChronology();
        java.util.TimeZone timeZone29 = null;
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forTimeZone(timeZone29);
        int int32 = dateTimeZone30.getOffset(100L);
        java.util.TimeZone timeZone33 = dateTimeZone30.toTimeZone();
        java.lang.String str34 = dateTimeZone30.getID();
        java.util.TimeZone timeZone35 = dateTimeZone30.toTimeZone();
        long long37 = dateTimeZone30.nextTransition((long) 100);
        java.lang.String str39 = dateTimeZone30.getNameKey(1645454778469L);
        org.joda.time.DateTime dateTime40 = localDateTime27.toDateTime(dateTimeZone30);
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DurationFieldType durationFieldType42 = dateTimeFieldType41.getDurationType();
        boolean boolean43 = dateTime40.isSupported(dateTimeFieldType41);
        java.util.TimeZone timeZone44 = null;
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forTimeZone(timeZone44);
        int int47 = dateTimeZone45.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime48 = org.joda.time.LocalDateTime.now(dateTimeZone45);
        int int49 = localDateTime48.getDayOfYear();
        java.util.TimeZone timeZone50 = null;
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.forTimeZone(timeZone50);
        int int53 = dateTimeZone51.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime54 = org.joda.time.LocalDateTime.now(dateTimeZone51);
        int int55 = localDateTime54.getWeekyear();
        org.joda.time.LocalDateTime.Property property56 = localDateTime54.minuteOfHour();
        org.joda.time.LocalDateTime.Property property57 = localDateTime54.dayOfYear();
        java.util.TimeZone timeZone58 = null;
        org.joda.time.DateTimeZone dateTimeZone59 = org.joda.time.DateTimeZone.forTimeZone(timeZone58);
        int int61 = dateTimeZone59.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime62 = org.joda.time.LocalDateTime.now(dateTimeZone59);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray63 = localDateTime62.getFieldTypes();
        int int64 = property57.compareTo((org.joda.time.ReadablePartial) localDateTime62);
        int int65 = localDateTime62.getYearOfCentury();
        org.joda.time.LocalDateTime.Property property66 = localDateTime62.millisOfDay();
        org.joda.time.LocalDateTime.Property property67 = localDateTime62.era();
        org.joda.time.DateTimeFieldType dateTimeFieldType68 = property67.getFieldType();
        boolean boolean69 = localDateTime48.isSupported(dateTimeFieldType68);
        org.joda.time.chrono.ISOChronology iSOChronology70 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField71 = iSOChronology70.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField72 = iSOChronology70.centuryOfEra();
        org.joda.time.DurationField durationField73 = iSOChronology70.seconds();
        org.joda.time.DateTimeField dateTimeField74 = dateTimeFieldType68.getField((org.joda.time.Chronology) iSOChronology70);
        boolean boolean75 = dateTime40.isSupported(dateTimeFieldType68);
        java.lang.String str76 = dateTimeFieldType68.getName();
        boolean boolean77 = localDateTime15.isSupported(dateTimeFieldType68);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 36000000 + "'", int3 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2022 + "'", int5 == 2022);
        org.junit.Assert.assertNotNull(property6);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3269886 + "'", int7 == 3269886);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "fr_CA");
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "3269886" + "'", str10, "3269886");
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNull(durationField13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 36000000 + "'", int19 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray21);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
// flaky:         org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long26 + "' != '" + 3269886L + "'", long26 == 3269886L);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 36000000 + "'", int32 == 36000000);
        org.junit.Assert.assertNotNull(timeZone33);
        org.junit.Assert.assertEquals(timeZone33.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "+10:00" + "'", str34, "+10:00");
        org.junit.Assert.assertNotNull(timeZone35);
        org.junit.Assert.assertEquals(timeZone35.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 100L + "'", long37 == 100L);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTimeFieldType41);
        org.junit.Assert.assertNotNull(durationFieldType42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 36000000 + "'", int47 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 53 + "'", int49 == 53);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 36000000 + "'", int53 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 2022 + "'", int55 == 2022);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(dateTimeZone59);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 36000000 + "'", int61 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 22 + "'", int65 == 22);
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertNotNull(property67);
        org.junit.Assert.assertNotNull(dateTimeFieldType68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(iSOChronology70);
        org.junit.Assert.assertNotNull(dateTimeField71);
        org.junit.Assert.assertNotNull(dateTimeField72);
        org.junit.Assert.assertNotNull(durationField73);
        org.junit.Assert.assertNotNull(dateTimeField74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "era" + "'", str76, "era");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
    }

    @Test
    public void test11348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11348");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime5 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusMinutes((int) ' ');
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withYearOfCentury((int) (byte) 10);
        java.util.TimeZone timeZone10 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        int int13 = dateTimeZone11.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime14 = org.joda.time.LocalDateTime.now(dateTimeZone11);
        org.joda.time.LocalDateTime localDateTime15 = org.joda.time.LocalDateTime.now(dateTimeZone11);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.withMillisOfSecond((int) '4');
        org.joda.time.LocalDateTime localDateTime18 = localDateTime9.withFields((org.joda.time.ReadablePartial) localDateTime15);
        int int19 = localDateTime18.size();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime18.plusDays(11);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.plusMinutes(882);
        int int24 = localDateTime23.getSecondOfMinute();
        org.joda.time.LocalDateTime localDateTime26 = localDateTime23.minusHours(64237204);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 36000000 + "'", int3 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 36000000 + "'", int13 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 4 + "'", int19 == 4);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
// flaky:         org.junit.Assert.assertTrue("'" + int24 + "' != '" + 29 + "'", int24 == 29);
        org.junit.Assert.assertNotNull(localDateTime26);
    }

    @Test
    public void test11349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11349");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        int int5 = localDateTime4.getWeekyear();
        org.joda.time.LocalDateTime.Property property6 = localDateTime4.minuteOfHour();
        org.joda.time.LocalDateTime.Property property7 = localDateTime4.dayOfYear();
        java.util.TimeZone timeZone8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        int int11 = dateTimeZone9.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime12 = org.joda.time.LocalDateTime.now(dateTimeZone9);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray13 = localDateTime12.getFieldTypes();
        int int14 = property7.compareTo((org.joda.time.ReadablePartial) localDateTime12);
        int int15 = localDateTime12.getYearOfCentury();
        org.joda.time.LocalDateTime.Property property16 = localDateTime12.millisOfDay();
        org.joda.time.DurationField durationField17 = property16.getRangeDurationField();
        org.joda.time.LocalDateTime localDateTime19 = property16.setCopy("2951200");
        java.lang.String str20 = property16.getAsShortText();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 36000000 + "'", int3 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2022 + "'", int5 == 2022);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 36000000 + "'", int11 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 22 + "'", int15 == 22);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(localDateTime19);
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "3269970" + "'", str20, "3269970");
    }

    @Test
    public void test11350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11350");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime5 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.plusSeconds((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime5.minusWeeks((int) (byte) 10);
        java.util.TimeZone timeZone10 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        int int13 = dateTimeZone11.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime14 = org.joda.time.LocalDateTime.now(dateTimeZone11);
        org.joda.time.LocalDateTime localDateTime15 = org.joda.time.LocalDateTime.now(dateTimeZone11);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.plusSeconds((int) (short) 10);
        int int18 = localDateTime15.size();
        boolean boolean19 = localDateTime9.isBefore((org.joda.time.ReadablePartial) localDateTime15);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime15.withMillisOfSecond(52);
        org.joda.time.Chronology chronology22 = localDateTime15.getChronology();
        org.joda.time.LocalDateTime.Property property23 = localDateTime15.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime24 = property23.roundCeilingCopy();
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.withYear(2832);
        org.joda.time.ReadableDuration readableDuration27 = null;
        org.joda.time.LocalDateTime localDateTime29 = localDateTime26.withDurationAdded(readableDuration27, 19);
        java.util.TimeZone timeZone30 = null;
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forTimeZone(timeZone30);
        int int33 = dateTimeZone31.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime34 = org.joda.time.LocalDateTime.now(dateTimeZone31);
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.DateTime dateTime36 = localDateTime34.toDateTime(readableInstant35);
        boolean boolean37 = localDateTime29.isAfter((org.joda.time.ReadablePartial) localDateTime34);
        java.util.TimeZone timeZone38 = null;
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forTimeZone(timeZone38);
        int int41 = dateTimeZone39.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime42 = org.joda.time.LocalDateTime.now(dateTimeZone39);
        org.joda.time.ReadableInstant readableInstant43 = null;
        org.joda.time.DateTime dateTime44 = localDateTime42.toDateTime(readableInstant43);
        java.util.TimeZone timeZone45 = null;
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.forTimeZone(timeZone45);
        int int48 = dateTimeZone46.getOffset(100L);
        org.joda.time.DateTime dateTime49 = localDateTime42.toDateTime(dateTimeZone46);
        org.joda.time.LocalDateTime localDateTime51 = localDateTime42.withYear(52);
        java.util.Locale locale53 = java.util.Locale.ITALIAN;
        java.lang.String str54 = localDateTime51.toString("1", locale53);
        org.joda.time.LocalDateTime localDateTime56 = localDateTime51.minusMonths(280424122);
        int int57 = localDateTime29.compareTo((org.joda.time.ReadablePartial) localDateTime56);
        org.joda.time.LocalDateTime.Property property58 = localDateTime56.dayOfMonth();
        int int59 = localDateTime56.getCenturyOfEra();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 36000000 + "'", int3 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 36000000 + "'", int13 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 4 + "'", int18 == 4);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 36000000 + "'", int33 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 36000000 + "'", int41 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 36000000 + "'", int48 == 36000000);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "it");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "1" + "'", str54, "1");
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 233686 + "'", int59 == 233686);
    }

    @Test
    public void test11351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11351");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.DateTime dateTime6 = localDateTime4.toDateTime(readableInstant5);
        java.util.TimeZone timeZone7 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forTimeZone(timeZone7);
        int int10 = dateTimeZone8.getOffset(100L);
        org.joda.time.DateTime dateTime11 = localDateTime4.toDateTime(dateTimeZone8);
        org.joda.time.LocalDateTime.Property property12 = localDateTime4.monthOfYear();
        java.lang.String str13 = property12.getAsText();
        org.joda.time.chrono.ISOChronology iSOChronology14 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology14.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology14.centuryOfEra();
        org.joda.time.DurationField durationField17 = iSOChronology14.centuries();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology14.millisOfDay();
        java.util.TimeZone timeZone19 = null;
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forTimeZone(timeZone19);
        int int22 = dateTimeZone20.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime23 = org.joda.time.LocalDateTime.now(dateTimeZone20);
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.DateTime dateTime25 = localDateTime23.toDateTime(readableInstant24);
        java.util.TimeZone timeZone26 = null;
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forTimeZone(timeZone26);
        int int29 = dateTimeZone27.getOffset(100L);
        org.joda.time.DateTime dateTime30 = localDateTime23.toDateTime(dateTimeZone27);
        org.joda.time.LocalDateTime.Property property31 = localDateTime23.monthOfYear();
        java.util.TimeZone timeZone32 = null;
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forTimeZone(timeZone32);
        int int35 = dateTimeZone33.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime36 = org.joda.time.LocalDateTime.now(dateTimeZone33);
        int int37 = localDateTime36.getWeekyear();
        org.joda.time.LocalDateTime.Property property38 = localDateTime36.millisOfDay();
        java.util.TimeZone timeZone39 = null;
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forTimeZone(timeZone39);
        int int42 = dateTimeZone40.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime43 = org.joda.time.LocalDateTime.now(dateTimeZone40);
        org.joda.time.ReadableInstant readableInstant44 = null;
        org.joda.time.DateTime dateTime45 = localDateTime43.toDateTime(readableInstant44);
        java.util.TimeZone timeZone46 = null;
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.forTimeZone(timeZone46);
        int int49 = dateTimeZone47.getOffset(100L);
        org.joda.time.DateTime dateTime50 = localDateTime43.toDateTime(dateTimeZone47);
        int int51 = property38.compareTo((org.joda.time.ReadableInstant) dateTime50);
        org.joda.time.LocalDateTime localDateTime52 = property38.roundHalfEvenCopy();
        boolean boolean53 = localDateTime23.isAfter((org.joda.time.ReadablePartial) localDateTime52);
        java.util.Locale locale54 = java.util.Locale.UK;
        java.lang.String str55 = dateTimeField18.getAsText((org.joda.time.ReadablePartial) localDateTime52, locale54);
        int int56 = property12.compareTo((org.joda.time.ReadablePartial) localDateTime52);
        int int57 = property12.getLeapAmount();
        org.joda.time.LocalDateTime localDateTime58 = property12.roundHalfFloorCopy();
        java.util.TimeZone timeZone59 = null;
        org.joda.time.DateTimeZone dateTimeZone60 = org.joda.time.DateTimeZone.forTimeZone(timeZone59);
        int int62 = dateTimeZone60.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime63 = org.joda.time.LocalDateTime.now(dateTimeZone60);
        org.joda.time.ReadableInstant readableInstant64 = null;
        org.joda.time.DateTime dateTime65 = localDateTime63.toDateTime(readableInstant64);
        org.joda.time.Chronology chronology66 = dateTime65.getChronology();
        org.joda.time.DurationField durationField67 = chronology66.hours();
        org.joda.time.DurationField durationField68 = chronology66.months();
        org.joda.time.DateTimeField dateTimeField69 = chronology66.dayOfYear();
        java.util.TimeZone timeZone70 = null;
        org.joda.time.DateTimeZone dateTimeZone71 = org.joda.time.DateTimeZone.forTimeZone(timeZone70);
        int int73 = dateTimeZone71.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime74 = org.joda.time.LocalDateTime.now(dateTimeZone71);
        int[] intArray77 = new int[] { (short) 0, (short) 0 };
        int int78 = dateTimeField69.getMinimumValue((org.joda.time.ReadablePartial) localDateTime74, intArray77);
        int int80 = dateTimeField69.getMinimumValue((long) 100);
        java.util.TimeZone timeZone81 = null;
        org.joda.time.DateTimeZone dateTimeZone82 = org.joda.time.DateTimeZone.forTimeZone(timeZone81);
        int int84 = dateTimeZone82.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime85 = org.joda.time.LocalDateTime.now(dateTimeZone82);
        int int86 = localDateTime85.getWeekyear();
        org.joda.time.LocalDateTime.Property property87 = localDateTime85.minuteOfHour();
        int int88 = dateTimeField69.getMaximumValue((org.joda.time.ReadablePartial) localDateTime85);
        org.joda.time.LocalDateTime localDateTime90 = localDateTime85.withCenturyOfEra(1);
        org.joda.time.LocalDateTime localDateTime92 = localDateTime85.minusMinutes((int) ' ');
        int int93 = localDateTime92.getHourOfDay();
        java.util.Locale locale95 = java.util.Locale.JAPAN;
        java.lang.String str96 = localDateTime92.toString("53169126", locale95);
        java.lang.String str97 = property12.getAsText(locale95);
        org.joda.time.ReadableInstant readableInstant98 = null;
        long long99 = property12.getDifferenceAsLong(readableInstant98);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 36000000 + "'", int3 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 36000000 + "'", int10 == 36000000);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "February" + "'", str13, "February");
        org.junit.Assert.assertNotNull(iSOChronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 36000000 + "'", int22 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 36000000 + "'", int29 == 36000000);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 36000000 + "'", int35 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2022 + "'", int37 == 2022);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 36000000 + "'", int42 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 36000000 + "'", int49 == 36000000);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "en_GB");
// flaky:         org.junit.Assert.assertEquals("'" + str55 + "' != '" + "3270047" + "'", str55, "3270047");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(dateTimeZone60);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 36000000 + "'", int62 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertNotNull(durationField67);
        org.junit.Assert.assertNotNull(durationField68);
        org.junit.Assert.assertNotNull(dateTimeField69);
        org.junit.Assert.assertNotNull(dateTimeZone71);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 36000000 + "'", int73 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime74);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[0, 0]");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 1 + "'", int78 == 1);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 1 + "'", int80 == 1);
        org.junit.Assert.assertNotNull(dateTimeZone82);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 36000000 + "'", int84 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime85);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 2022 + "'", int86 == 2022);
        org.junit.Assert.assertNotNull(property87);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 365 + "'", int88 == 365);
        org.junit.Assert.assertNotNull(localDateTime90);
        org.junit.Assert.assertNotNull(localDateTime92);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 0 + "'", int93 == 0);
        org.junit.Assert.assertNotNull(locale95);
        org.junit.Assert.assertEquals(locale95.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "53169126" + "'", str96, "53169126");
// flaky:         org.junit.Assert.assertEquals("'" + str97 + "' != '" + "\u6708" + "'", str97, "\u6708");
        org.junit.Assert.assertTrue("'" + long99 + "' != '" + 0L + "'", long99 == 0L);
    }

    @Test
    public void test11352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11352");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.yearOfEra();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.hourOfDay();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology0.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField6 = iSOChronology0.minuteOfDay();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        long long10 = iSOChronology0.add(readablePeriod7, 31500000000L, 896);
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology0.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology0.millisOfDay();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 31500000000L + "'", long10 == 31500000000L);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
    }

    @Test
    public void test11353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11353");
        org.joda.time.chrono.ISOChronology iSOChronology1 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology1.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology1.centuryOfEra();
        org.joda.time.DurationField durationField4 = iSOChronology1.eras();
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology1.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField6 = iSOChronology1.year();
        java.lang.String str7 = iSOChronology1.toString();
        org.joda.time.DateTimeField dateTimeField8 = iSOChronology1.hourOfDay();
        org.joda.time.DateTimeField dateTimeField9 = iSOChronology1.era();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime(928551L, (org.joda.time.Chronology) iSOChronology1);
        java.util.TimeZone timeZone11 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        int int14 = dateTimeZone12.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime15 = org.joda.time.LocalDateTime.now(dateTimeZone12);
        org.joda.time.LocalDateTime localDateTime16 = org.joda.time.LocalDateTime.now(dateTimeZone12);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.plusSeconds((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime16.minusWeeks((int) (byte) 10);
        java.util.TimeZone timeZone21 = null;
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forTimeZone(timeZone21);
        int int24 = dateTimeZone22.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime25 = org.joda.time.LocalDateTime.now(dateTimeZone22);
        org.joda.time.LocalDateTime localDateTime26 = org.joda.time.LocalDateTime.now(dateTimeZone22);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.plusSeconds((int) (short) 10);
        int int29 = localDateTime26.size();
        boolean boolean30 = localDateTime20.isBefore((org.joda.time.ReadablePartial) localDateTime26);
        int int31 = localDateTime26.getSecondOfMinute();
        boolean boolean32 = localDateTime10.isEqual((org.joda.time.ReadablePartial) localDateTime26);
        int[] intArray33 = localDateTime26.getValues();
        org.junit.Assert.assertNotNull(iSOChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "ISOChronology[+10:00]" + "'", str7, "ISOChronology[+10:00]");
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 36000000 + "'", int14 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 36000000 + "'", int24 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 4 + "'", int29 == 4);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int31 + "' != '" + 30 + "'", int31 == 30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(intArray33);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[2022, 2, 22, 3270208]");
    }

    @Test
    public void test11354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11354");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        java.util.TimeZone timeZone1 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        int int4 = dateTimeZone2.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime5 = org.joda.time.LocalDateTime.now(dateTimeZone2);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray6 = localDateTime5.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.hourOfDay();
        int int8 = localDateTime5.get(dateTimeFieldType7);
        org.joda.time.LocalDateTime.Property property9 = localDateTime5.dayOfWeek();
        boolean boolean10 = localDateTime0.isEqual((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.LocalDateTime.Property property11 = localDateTime5.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime12 = property11.roundHalfCeilingCopy();
        java.util.TimeZone timeZone13 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forTimeZone(timeZone13);
        int int16 = dateTimeZone14.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime17 = org.joda.time.LocalDateTime.now(dateTimeZone14);
        org.joda.time.LocalDateTime localDateTime18 = org.joda.time.LocalDateTime.now(dateTimeZone14);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.minusMinutes((int) ' ');
        int int21 = property11.compareTo((org.joda.time.ReadablePartial) localDateTime20);
        int int22 = property11.getMaximumValueOverall();
        org.joda.time.LocalDateTime localDateTime23 = property11.roundHalfCeilingCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = property11.getFieldType();
        org.joda.time.LocalDateTime localDateTime25 = property11.roundHalfFloorCopy();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 36000000 + "'", int4 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 36000000 + "'", int16 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 31 + "'", int22 == 31);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertNotNull(localDateTime25);
    }

    @Test
    public void test11355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11355");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.DateTime dateTime6 = localDateTime4.toDateTime(readableInstant5);
        java.util.TimeZone timeZone7 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forTimeZone(timeZone7);
        int int10 = dateTimeZone8.getOffset(100L);
        org.joda.time.DateTime dateTime11 = localDateTime4.toDateTime(dateTimeZone8);
        org.joda.time.LocalDateTime.Property property12 = localDateTime4.monthOfYear();
        java.util.TimeZone timeZone13 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forTimeZone(timeZone13);
        int int16 = dateTimeZone14.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime17 = org.joda.time.LocalDateTime.now(dateTimeZone14);
        int int18 = localDateTime17.getWeekyear();
        org.joda.time.LocalDateTime.Property property19 = localDateTime17.millisOfDay();
        java.util.TimeZone timeZone20 = null;
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forTimeZone(timeZone20);
        int int23 = dateTimeZone21.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime24 = org.joda.time.LocalDateTime.now(dateTimeZone21);
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.DateTime dateTime26 = localDateTime24.toDateTime(readableInstant25);
        java.util.TimeZone timeZone27 = null;
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forTimeZone(timeZone27);
        int int30 = dateTimeZone28.getOffset(100L);
        org.joda.time.DateTime dateTime31 = localDateTime24.toDateTime(dateTimeZone28);
        int int32 = property19.compareTo((org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.LocalDateTime localDateTime33 = property19.roundHalfEvenCopy();
        boolean boolean34 = localDateTime4.isAfter((org.joda.time.ReadablePartial) localDateTime33);
        int int35 = localDateTime4.getMillisOfSecond();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 36000000 + "'", int3 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 36000000 + "'", int10 == 36000000);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 36000000 + "'", int16 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2022 + "'", int18 == 2022);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 36000000 + "'", int23 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 36000000 + "'", int30 == 36000000);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int35 + "' != '" + 302 + "'", int35 == 302);
    }

    @Test
    public void test11356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11356");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffset(100L);
        java.util.TimeZone timeZone4 = dateTimeZone1.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forTimeZone(timeZone4);
        java.lang.String str7 = dateTimeZone5.getNameKey((long) '4');
        boolean boolean9 = dateTimeZone5.isStandardOffset((long) 52);
        java.lang.String str11 = dateTimeZone5.getNameKey(1645454787698L);
        int int13 = dateTimeZone5.getOffset(12847L);
        org.joda.time.chrono.ISOChronology iSOChronology14 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone5);
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology14.dayOfMonth();
        org.joda.time.DurationField durationField16 = iSOChronology14.weeks();
        int int19 = durationField16.getDifference(11860818494935L, 0L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 36000000 + "'", int3 == 36000000);
        org.junit.Assert.assertNotNull(timeZone4);
        org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 36000000 + "'", int13 == 36000000);
        org.junit.Assert.assertNotNull(iSOChronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 19611 + "'", int19 == 19611);
    }

    @Test
    public void test11357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11357");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray5 = localDateTime4.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.hourOfDay();
        int int7 = localDateTime4.get(dateTimeFieldType6);
        org.joda.time.LocalDateTime.Property property8 = localDateTime4.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime4.minusHours(20);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = localDateTime4.getFieldType((int) (byte) 1);
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.LocalDateTime localDateTime15 = localDateTime4.withDurationAdded(readableDuration13, 46);
        org.joda.time.DateTime dateTime16 = localDateTime15.toDateTime();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime15.withCenturyOfEra(798);
        java.util.TimeZone timeZone20 = null;
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forTimeZone(timeZone20);
        int int23 = dateTimeZone21.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime24 = org.joda.time.LocalDateTime.now(dateTimeZone21);
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.DateTime dateTime26 = localDateTime24.toDateTime(readableInstant25);
        org.joda.time.Chronology chronology27 = dateTime26.getChronology();
        org.joda.time.DurationField durationField28 = chronology27.hours();
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime((long) 52, chronology27);
        org.joda.time.DateTimeField[] dateTimeFieldArray30 = localDateTime29.getFields();
        org.joda.time.LocalDateTime.Property property31 = localDateTime29.weekOfWeekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = property31.getFieldType();
        int int33 = localDateTime15.indexOf(dateTimeFieldType32);
        org.joda.time.DurationFieldType durationFieldType34 = dateTimeFieldType32.getDurationType();
        java.lang.String str35 = durationFieldType34.toString();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 36000000 + "'", int3 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray5);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 36000000 + "'", int23 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(dateTimeFieldArray30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(dateTimeFieldType32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNotNull(durationFieldType34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "weeks" + "'", str35, "weeks");
    }

    @Test
    public void test11358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11358");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.centuryOfEra();
        org.joda.time.DurationField durationField3 = iSOChronology0.seconds();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.clockhourOfDay();
        org.joda.time.Chronology chronology5 = iSOChronology0.withUTC();
        org.joda.time.DateTimeField dateTimeField6 = iSOChronology0.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField7 = iSOChronology0.era();
        org.joda.time.Chronology chronology8 = iSOChronology0.withUTC();
        java.util.TimeZone timeZone9 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        int int12 = dateTimeZone10.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime13 = org.joda.time.LocalDateTime.now(dateTimeZone10);
        int int14 = localDateTime13.getWeekyear();
        org.joda.time.DurationFieldType durationFieldType15 = org.joda.time.DurationFieldType.centuries();
        java.lang.String str16 = durationFieldType15.getName();
        boolean boolean17 = localDateTime13.isSupported(durationFieldType15);
        int int18 = localDateTime13.getHourOfDay();
        java.lang.String str19 = localDateTime13.toString();
        int int20 = localDateTime13.getHourOfDay();
        org.joda.time.LocalDateTime.Property property21 = localDateTime13.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime13.minusMinutes(2812640);
        long long25 = iSOChronology0.set((org.joda.time.ReadablePartial) localDateTime23, 1666363692780L);
        org.joda.time.DateTimeField dateTimeField26 = iSOChronology0.weekyearOfCentury();
        java.util.TimeZone timeZone27 = null;
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forTimeZone(timeZone27);
        int int30 = dateTimeZone28.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime31 = org.joda.time.LocalDateTime.now(dateTimeZone28);
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.DateTime dateTime33 = localDateTime31.toDateTime(readableInstant32);
        java.util.TimeZone timeZone34 = null;
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forTimeZone(timeZone34);
        int int37 = dateTimeZone35.getOffset(100L);
        org.joda.time.DateTime dateTime38 = localDateTime31.toDateTime(dateTimeZone35);
        org.joda.time.LocalDateTime.Property property39 = localDateTime31.monthOfYear();
        java.util.TimeZone timeZone40 = null;
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forTimeZone(timeZone40);
        int int43 = dateTimeZone41.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime44 = org.joda.time.LocalDateTime.now(dateTimeZone41);
        int int45 = localDateTime44.getWeekyear();
        org.joda.time.LocalDateTime.Property property46 = localDateTime44.millisOfDay();
        java.util.TimeZone timeZone47 = null;
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.forTimeZone(timeZone47);
        int int50 = dateTimeZone48.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime51 = org.joda.time.LocalDateTime.now(dateTimeZone48);
        org.joda.time.ReadableInstant readableInstant52 = null;
        org.joda.time.DateTime dateTime53 = localDateTime51.toDateTime(readableInstant52);
        java.util.TimeZone timeZone54 = null;
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.forTimeZone(timeZone54);
        int int57 = dateTimeZone55.getOffset(100L);
        org.joda.time.DateTime dateTime58 = localDateTime51.toDateTime(dateTimeZone55);
        int int59 = property46.compareTo((org.joda.time.ReadableInstant) dateTime58);
        org.joda.time.LocalDateTime localDateTime60 = property46.roundHalfEvenCopy();
        boolean boolean61 = localDateTime31.isAfter((org.joda.time.ReadablePartial) localDateTime60);
        org.joda.time.ReadableDuration readableDuration62 = null;
        org.joda.time.LocalDateTime localDateTime63 = localDateTime60.minus(readableDuration62);
        org.joda.time.chrono.ISOChronology iSOChronology64 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField65 = iSOChronology64.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField66 = iSOChronology64.yearOfEra();
        org.joda.time.DateTimeField dateTimeField67 = iSOChronology64.year();
        org.joda.time.DateTimeField dateTimeField68 = iSOChronology64.monthOfYear();
        org.joda.time.DurationField durationField69 = iSOChronology64.seconds();
        org.joda.time.DurationField durationField70 = iSOChronology64.years();
        java.util.TimeZone timeZone71 = null;
        org.joda.time.DateTimeZone dateTimeZone72 = org.joda.time.DateTimeZone.forTimeZone(timeZone71);
        int int74 = dateTimeZone72.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime75 = org.joda.time.LocalDateTime.now(dateTimeZone72);
        org.joda.time.LocalDateTime localDateTime76 = org.joda.time.LocalDateTime.now(dateTimeZone72);
        org.joda.time.LocalDateTime localDateTime78 = localDateTime76.withMillisOfSecond((int) '4');
        org.joda.time.LocalDateTime localDateTime80 = localDateTime76.plusSeconds((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime82 = localDateTime80.plusMonths(8);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter83 = null;
        java.lang.String str84 = localDateTime82.toString(dateTimeFormatter83);
        int[] intArray86 = iSOChronology64.get((org.joda.time.ReadablePartial) localDateTime82, 1644850137571L);
        iSOChronology0.validate((org.joda.time.ReadablePartial) localDateTime60, intArray86);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 36000000 + "'", int12 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2022 + "'", int14 == 2022);
        org.junit.Assert.assertNotNull(durationFieldType15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "centuries" + "'", str16, "centuries");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "2022-02-22T00:54:30.419" + "'", str19, "2022-02-22T00:54:30.419");
// flaky:         org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(localDateTime23);
// flaky:         org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1476696870419L + "'", long25 == 1476696870419L);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 36000000 + "'", int30 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 36000000 + "'", int37 == 36000000);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 36000000 + "'", int43 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2022 + "'", int45 == 2022);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 36000000 + "'", int50 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTimeZone55);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 36000000 + "'", int57 == 36000000);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNotNull(iSOChronology64);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertNotNull(durationField69);
        org.junit.Assert.assertNotNull(durationField70);
        org.junit.Assert.assertNotNull(dateTimeZone72);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 36000000 + "'", int74 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime75);
        org.junit.Assert.assertNotNull(localDateTime76);
        org.junit.Assert.assertNotNull(localDateTime78);
        org.junit.Assert.assertNotNull(localDateTime80);
        org.junit.Assert.assertNotNull(localDateTime82);
// flaky:         org.junit.Assert.assertEquals("'" + str84 + "' != '" + "2022-10-22T00:54:31.419" + "'", str84, "2022-10-22T00:54:31.419");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[2022, 2, 15, 2937571]");
    }

    @Test
    public void test11359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11359");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("2010-02-21T14:19:22.428");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=2010-02-21t14:19:22.428");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test11360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11360");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.centuries();
        java.lang.String str1 = durationFieldType0.getName();
        org.joda.time.chrono.ISOChronology iSOChronology3 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology3.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology3.centuryOfEra();
        org.joda.time.DurationField durationField6 = iSOChronology3.seconds();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology3);
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(1645454858395L, (org.joda.time.Chronology) iSOChronology3);
        org.joda.time.DateTimeField dateTimeField9 = iSOChronology3.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology3.dayOfYear();
        org.joda.time.DurationField durationField11 = durationFieldType0.getField((org.joda.time.Chronology) iSOChronology3);
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "centuries" + "'", str1, "centuries");
        org.junit.Assert.assertNotNull(iSOChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
    }

    @Test
    public void test11361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11361");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet1 = locale0.getExtensionKeys();
        java.util.Iterator<java.lang.Character> charItor2 = charSet1.iterator();
        java.util.Locale locale3 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet4 = locale3.getExtensionKeys();
        java.util.Iterator<java.lang.Character> charItor5 = charSet4.iterator();
        boolean boolean6 = charSet1.containsAll((java.util.Collection<java.lang.Character>) charSet4);
        java.util.Locale.LanguageRange[] languageRangeArray7 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList8 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList8, languageRangeArray7);
        java.util.Locale.LanguageRange[] languageRangeArray10 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList11 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList11, languageRangeArray10);
        java.util.Locale locale13 = java.util.Locale.KOREAN;
        java.util.Locale locale14 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet15 = locale14.getExtensionKeys();
        java.util.Locale locale16 = java.util.Locale.GERMAN;
        java.util.Locale locale17 = java.util.Locale.GERMAN;
        java.lang.String str18 = locale16.getDisplayCountry(locale17);
        java.util.Locale locale19 = locale16.stripExtensions();
        java.util.Locale locale20 = java.util.Locale.JAPANESE;
        java.util.Locale locale21 = java.util.Locale.JAPANESE;
        java.util.Locale locale22 = java.util.Locale.GERMAN;
        java.util.Locale[] localeArray23 = new java.util.Locale[] { locale13, locale14, locale19, locale20, locale21, locale22 };
        java.util.ArrayList<java.util.Locale> localeList24 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList24, localeArray23);
        java.util.Locale locale26 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList11, (java.util.Collection<java.util.Locale>) localeList24);
        java.util.List<java.util.Locale> localeList27 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList8, (java.util.Collection<java.util.Locale>) localeList24);
        java.util.Locale.LanguageRange[] languageRangeArray28 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList29 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList29, languageRangeArray28);
        java.lang.String[] strArray35 = new java.lang.String[] { "jpn", "+00:00", "+00:00", "\uc77c\ubcf8\uc5b4" };
        java.util.ArrayList<java.lang.String> strList36 = new java.util.ArrayList<java.lang.String>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList36, strArray35);
        java.lang.String str38 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList29, (java.util.Collection<java.lang.String>) strList36);
        java.util.AbstractList[] abstractListArray40 = new java.util.AbstractList[2];
        @SuppressWarnings("unchecked")
        java.util.AbstractList<java.util.Locale.LanguageRange>[] languageRangeListArray41 = (java.util.AbstractList<java.util.Locale.LanguageRange>[]) abstractListArray40;
        languageRangeListArray41[0] = languageRangeList8;
        languageRangeListArray41[1] = languageRangeList29;
        java.util.AbstractList<java.util.Locale.LanguageRange>[] languageRangeListArray46 = charSet1.toArray(languageRangeListArray41);
        org.joda.time.chrono.ISOChronology iSOChronology47 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField48 = iSOChronology47.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField49 = iSOChronology47.yearOfEra();
        org.joda.time.DateTimeField dateTimeField50 = iSOChronology47.weekyearOfCentury();
        org.joda.time.DurationField durationField51 = iSOChronology47.weeks();
        org.joda.time.DateTimeField dateTimeField52 = iSOChronology47.yearOfEra();
        boolean boolean53 = charSet1.equals((java.lang.Object) iSOChronology47);
        java.util.stream.Stream<java.lang.Character> charStream54 = charSet1.stream();
        java.util.Locale locale55 = java.util.Locale.GERMAN;
        java.lang.String str56 = locale55.getDisplayScript();
        java.lang.String str58 = locale55.getExtension('x');
        java.util.Set<java.lang.Character> charSet59 = locale55.getExtensionKeys();
        java.util.Locale locale60 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet61 = locale60.getExtensionKeys();
        java.util.Iterator<java.lang.Character> charItor62 = charSet61.iterator();
        java.util.Locale locale63 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet64 = locale63.getExtensionKeys();
        java.util.Iterator<java.lang.Character> charItor65 = charSet64.iterator();
        boolean boolean66 = charSet61.containsAll((java.util.Collection<java.lang.Character>) charSet64);
        java.util.TimeZone timeZone67 = null;
        org.joda.time.DateTimeZone dateTimeZone68 = org.joda.time.DateTimeZone.forTimeZone(timeZone67);
        int int70 = dateTimeZone68.getOffset(100L);
        java.util.TimeZone timeZone71 = dateTimeZone68.toTimeZone();
        org.joda.time.DateTimeZone[] dateTimeZoneArray72 = new org.joda.time.DateTimeZone[] { dateTimeZone68 };
        org.joda.time.DateTimeZone[] dateTimeZoneArray73 = charSet64.toArray(dateTimeZoneArray72);
        java.util.Locale locale74 = java.util.Locale.GERMAN;
        java.lang.String str75 = locale74.getDisplayScript();
        java.lang.String str77 = locale74.getExtension('x');
        java.util.Set<java.lang.Character> charSet78 = locale74.getExtensionKeys();
        boolean boolean79 = charSet64.retainAll((java.util.Collection<java.lang.Character>) charSet78);
        boolean boolean80 = charSet59.addAll((java.util.Collection<java.lang.Character>) charSet78);
        boolean boolean81 = charSet1.retainAll((java.util.Collection<java.lang.Character>) charSet59);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet1);
        org.junit.Assert.assertNotNull(charItor2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet4);
        org.junit.Assert.assertNotNull(charItor5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(languageRangeArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(languageRangeArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ko");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "de");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "de");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "de");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ja");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "ja");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "de");
        org.junit.Assert.assertNotNull(localeArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNull(locale26);
        org.junit.Assert.assertNotNull(localeList27);
        org.junit.Assert.assertNotNull(languageRangeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNotNull(abstractListArray40);
        org.junit.Assert.assertNotNull(languageRangeListArray41);
        org.junit.Assert.assertNotNull(languageRangeListArray46);
        org.junit.Assert.assertNotNull(iSOChronology47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(durationField51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(charStream54);
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "de");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertNotNull(charSet59);
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet61);
        org.junit.Assert.assertNotNull(charItor62);
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet64);
        org.junit.Assert.assertNotNull(charItor65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(dateTimeZone68);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 36000000 + "'", int70 == 36000000);
        org.junit.Assert.assertNotNull(timeZone71);
        org.junit.Assert.assertEquals(timeZone71.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertNotNull(dateTimeZoneArray72);
        org.junit.Assert.assertNotNull(dateTimeZoneArray73);
        org.junit.Assert.assertNotNull(locale74);
        org.junit.Assert.assertEquals(locale74.toString(), "de");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "" + "'", str75, "");
        org.junit.Assert.assertNull(str77);
        org.junit.Assert.assertNotNull(charSet78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
    }

    @Test
    public void test11362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11362");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.DateTime dateTime6 = localDateTime4.toDateTime(readableInstant5);
        org.joda.time.Chronology chronology7 = dateTime6.getChronology();
        org.joda.time.DurationField durationField8 = chronology7.hours();
        java.lang.String str9 = chronology7.toString();
        org.joda.time.DateTimeField dateTimeField10 = chronology7.monthOfYear();
        org.joda.time.DateTimeField dateTimeField11 = chronology7.yearOfEra();
        org.joda.time.DateTimeField dateTimeField12 = chronology7.centuryOfEra();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 36000000 + "'", int3 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "ISOChronology[+10:00]" + "'", str9, "ISOChronology[+10:00]");
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
    }

    @Test
    public void test11363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11363");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        long long5 = dateTimeZone1.convertLocalToUTC((long) (byte) -1, true, (long) (short) -1);
        boolean boolean6 = dateTimeZone1.isFixed();
        org.joda.time.LocalDateTime localDateTime7 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        int int8 = localDateTime7.getWeekyear();
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.LocalDateTime localDateTime11 = localDateTime7.withDurationAdded(readableDuration9, 3);
        org.joda.time.LocalDateTime.Property property12 = localDateTime11.yearOfEra();
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology13.weekOfWeekyear();
        java.util.TimeZone timeZone15 = null;
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forTimeZone(timeZone15);
        java.lang.String str18 = dateTimeZone16.getName(31556995199999L);
        org.joda.time.Chronology chronology19 = iSOChronology13.withZone(dateTimeZone16);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        long long25 = dateTimeZone21.convertLocalToUTC((long) (byte) -1, true, (long) (short) -1);
        boolean boolean26 = dateTimeZone21.isFixed();
        org.joda.time.Chronology chronology27 = iSOChronology13.withZone(dateTimeZone21);
        java.util.TimeZone timeZone28 = null;
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forTimeZone(timeZone28);
        int int31 = dateTimeZone29.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime32 = org.joda.time.LocalDateTime.now(dateTimeZone29);
        int int33 = localDateTime32.getDayOfYear();
        org.joda.time.LocalDateTime localDateTime35 = localDateTime32.withYearOfEra(2022);
        java.util.TimeZone timeZone36 = null;
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forTimeZone(timeZone36);
        int int39 = dateTimeZone37.getOffset(100L);
        java.util.TimeZone timeZone40 = dateTimeZone37.toTimeZone();
        int int42 = dateTimeZone37.getStandardOffset((long) ' ');
        org.joda.time.DateTime dateTime43 = localDateTime35.toDateTime(dateTimeZone37);
        java.lang.String str45 = dateTimeZone37.getShortName(0L);
        long long47 = dateTimeZone21.getMillisKeepLocal(dateTimeZone37, 53194000L);
        int int49 = dateTimeZone37.getStandardOffset(53194727L);
        org.joda.time.LocalDateTime localDateTime50 = org.joda.time.LocalDateTime.now(dateTimeZone37);
        int int51 = localDateTime11.compareTo((org.joda.time.ReadablePartial) localDateTime50);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-36000001L) + "'", long5 == (-36000001L));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2022 + "'", int8 == 2022);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+10:00" + "'", str18, "+10:00");
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-36000001L) + "'", long25 == (-36000001L));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 36000000 + "'", int31 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 53 + "'", int33 == 53);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 36000000 + "'", int39 == 36000000);
        org.junit.Assert.assertNotNull(timeZone40);
        org.junit.Assert.assertEquals(timeZone40.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 36000000 + "'", int42 == 36000000);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "+10:00" + "'", str45, "+10:00");
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 53194000L + "'", long47 == 53194000L);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 36000000 + "'", int49 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
    }

    @Test
    public void test11364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11364");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime(528, 3039907, 3248, 0, 983, 287, 568);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 983 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test11365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11365");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.centuryOfEra();
        org.joda.time.DurationField durationField3 = iSOChronology0.seconds();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.clockhourOfDay();
        org.joda.time.Chronology chronology5 = iSOChronology0.withUTC();
        org.joda.time.DurationField durationField6 = iSOChronology0.days();
        org.joda.time.DurationField durationField7 = iSOChronology0.millis();
        org.joda.time.DurationField durationField8 = iSOChronology0.millis();
        org.joda.time.DateTimeField dateTimeField9 = iSOChronology0.minuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone10 = iSOChronology0.getZone();
        org.joda.time.chrono.ISOChronology iSOChronology11 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone10);
        java.lang.String str13 = dateTimeZone10.getShortName((-2208985200000L));
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(iSOChronology11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+10:00" + "'", str13, "+10:00");
    }

    @Test
    public void test11366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11366");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.DateTime dateTime6 = localDateTime4.toDateTime(readableInstant5);
        java.util.TimeZone timeZone7 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forTimeZone(timeZone7);
        int int10 = dateTimeZone8.getOffset(100L);
        org.joda.time.DateTime dateTime11 = localDateTime4.toDateTime(dateTimeZone8);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime4.plusMinutes((-1));
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.hourOfDay();
        org.joda.time.LocalDateTime localDateTime15 = property14.withMinimumValue();
        java.lang.String str16 = property14.getAsText();
        org.joda.time.LocalDateTime localDateTime17 = property14.roundCeilingCopy();
        java.lang.Object obj18 = null;
        boolean boolean19 = property14.equals(obj18);
        java.util.Locale locale20 = java.util.Locale.KOREA;
        java.util.Locale locale24 = new java.util.Locale("DurationField[weekyears]", "Deutsch", "deu");
        java.lang.String str25 = locale20.getDisplayScript(locale24);
        java.lang.String str26 = property14.getAsText(locale20);
        org.joda.time.ReadableInstant readableInstant27 = null;
        int int28 = property14.getDifference(readableInstant27);
        org.joda.time.DurationField durationField29 = property14.getDurationField();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 36000000 + "'", int3 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 36000000 + "'", int10 == 36000000);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDateTime15);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "0" + "'", str16, "0");
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ko_KR");
        org.junit.Assert.assertEquals(locale24.toString(), "durationfield[weekyears]_DEUTSCH_deu");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "0" + "'", str26, "0");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 9 + "'", int28 == 9);
        org.junit.Assert.assertNotNull(durationField29);
    }

    @Test
    public void test11367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11367");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        int int5 = localDateTime4.getWeekyear();
        org.joda.time.DurationFieldType durationFieldType6 = org.joda.time.DurationFieldType.days();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime4.withFieldAdded(durationFieldType6, 53166088);
        org.joda.time.chrono.ISOChronology iSOChronology9 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology9.hourOfHalfday();
        java.lang.String str11 = iSOChronology9.toString();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology9.era();
        org.joda.time.DurationField durationField13 = iSOChronology9.centuries();
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        long long17 = iSOChronology9.add(readablePeriod14, (long) 2022, (int) (byte) 100);
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology9.dayOfYear();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology9.year();
        boolean boolean20 = durationFieldType6.isSupported((org.joda.time.Chronology) iSOChronology9);
        java.lang.String str21 = iSOChronology9.toString();
        java.util.TimeZone timeZone22 = null;
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        int int25 = dateTimeZone23.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime26 = org.joda.time.LocalDateTime.now(dateTimeZone23);
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.DateTime dateTime28 = localDateTime26.toDateTime(readableInstant27);
        java.util.TimeZone timeZone29 = null;
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forTimeZone(timeZone29);
        int int32 = dateTimeZone30.getOffset(100L);
        org.joda.time.DateTime dateTime33 = localDateTime26.toDateTime(dateTimeZone30);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime26.plusMinutes((-1));
        org.joda.time.LocalDateTime.Property property36 = localDateTime35.hourOfDay();
        java.lang.String str37 = property36.getAsText();
        org.joda.time.LocalDateTime localDateTime38 = property36.roundHalfEvenCopy();
        long long40 = iSOChronology9.set((org.joda.time.ReadablePartial) localDateTime38, (long) 52);
        org.joda.time.DateTimeField dateTimeField41 = iSOChronology9.era();
        org.joda.time.DateTimeField dateTimeField42 = iSOChronology9.era();
        org.joda.time.DurationField durationField43 = iSOChronology9.halfdays();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 36000000 + "'", int3 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2022 + "'", int5 == 2022);
        org.junit.Assert.assertNotNull(durationFieldType6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(iSOChronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "ISOChronology[+10:00]" + "'", str11, "ISOChronology[+10:00]");
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 2022L + "'", long17 == 2022L);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "ISOChronology[+10:00]" + "'", str21, "ISOChronology[+10:00]");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 36000000 + "'", int25 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 36000000 + "'", int32 == 36000000);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(property36);
// flaky:         org.junit.Assert.assertEquals("'" + str37 + "' != '" + "0" + "'", str37, "0");
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 1645455600000L + "'", long40 == 1645455600000L);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(durationField43);
    }

    @Test
    public void test11368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11368");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime(2977515, 50038482, 53326140, 49903519, 49899, 798);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 49903519 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test11369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11369");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.weekOfWeekyear();
        java.util.TimeZone timeZone2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone2);
        java.lang.String str5 = dateTimeZone3.getName(31556995199999L);
        org.joda.time.Chronology chronology6 = iSOChronology0.withZone(dateTimeZone3);
        org.joda.time.DurationField durationField7 = iSOChronology0.hours();
        org.joda.time.DateTimeField dateTimeField8 = iSOChronology0.monthOfYear();
        org.joda.time.DateTimeField dateTimeField9 = iSOChronology0.dayOfWeek();
        org.joda.time.DurationField durationField10 = iSOChronology0.weeks();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology0.clockhourOfHalfday();
        long long13 = dateTimeField11.roundFloor(1644850245503L);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+10:00" + "'", str5, "+10:00");
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1644847200000L + "'", long13 == 1644847200000L);
    }

    @Test
    public void test11370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11370");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.hourOfHalfday();
        long long7 = iSOChronology0.getDateTimeMillis((-1), 8, 3, 365);
        org.joda.time.DurationField durationField8 = iSOChronology0.seconds();
        java.util.TimeZone timeZone9 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        int int12 = dateTimeZone10.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime13 = org.joda.time.LocalDateTime.now(dateTimeZone10);
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.DateTime dateTime15 = localDateTime13.toDateTime(readableInstant14);
        org.joda.time.Chronology chronology16 = dateTime15.getChronology();
        org.joda.time.DurationField durationField17 = chronology16.hours();
        org.joda.time.DateTimeField dateTimeField18 = chronology16.hourOfDay();
        org.joda.time.DurationField durationField19 = chronology16.weeks();
        boolean boolean20 = iSOChronology0.equals((java.lang.Object) chronology16);
        org.joda.time.DateTimeField dateTimeField21 = iSOChronology0.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField22 = iSOChronology0.year();
        int int23 = dateTimeField22.getMaximumValue();
        long long26 = dateTimeField22.add((-58312775394300L), 53183117);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-62180301599635L) + "'", long7 == (-62180301599635L));
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 36000000 + "'", int12 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 292278993 + "'", int23 == 292278993);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1678238757615005700L + "'", long26 == 1678238757615005700L);
    }

    @Test
    public void test11371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11371");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.hourOfHalfday();
        java.lang.String str2 = iSOChronology0.toString();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.era();
        org.joda.time.DurationField durationField4 = iSOChronology0.centuries();
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        long long8 = iSOChronology0.add(readablePeriod5, (long) 2022, (int) (byte) 100);
        org.joda.time.DateTimeZone dateTimeZone9 = iSOChronology0.getZone();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology0.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology0.dayOfYear();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology0.yearOfCentury();
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        long long16 = iSOChronology0.add(readablePeriod13, 2246400000L, 2843364);
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology0.centuryOfEra();
        org.joda.time.DurationField durationField18 = dateTimeField17.getDurationField();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ISOChronology[+10:00]" + "'", str2, "ISOChronology[+10:00]");
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 2022L + "'", long8 == 2022L);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 2246400000L + "'", long16 == 2246400000L);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
    }

    @Test
    public void test11372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11372");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffset(100L);
        java.util.TimeZone timeZone4 = dateTimeZone1.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forTimeZone(timeZone4);
        timeZone4.setID("");
        java.util.TimeZone timeZone8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        int int11 = dateTimeZone9.getOffset(100L);
        java.util.TimeZone timeZone12 = dateTimeZone9.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone12);
        java.util.TimeZone.setDefault(timeZone12);
        java.util.TimeZone.setDefault(timeZone12);
        boolean boolean16 = timeZone4.hasSameRules(timeZone12);
        java.lang.String str17 = timeZone12.getID();
        java.lang.Object obj18 = timeZone12.clone();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 36000000 + "'", int3 == 36000000);
        org.junit.Assert.assertNotNull(timeZone4);
        org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 36000000 + "'", int11 == 36000000);
        org.junit.Assert.assertNotNull(timeZone12);
        org.junit.Assert.assertEquals(timeZone12.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "GMT+10:00" + "'", str17, "GMT+10:00");
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertEquals(obj18.toString(), "sun.util.calendar.ZoneInfo[id=\"GMT+10:00\",offset=36000000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj18), "sun.util.calendar.ZoneInfo[id=\"GMT+10:00\",offset=36000000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj18), "sun.util.calendar.ZoneInfo[id=\"GMT+10:00\",offset=36000000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null]");
    }

    @Test
    public void test11373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11373");
        org.joda.time.tz.NameProvider nameProvider0 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet2 = locale1.getExtensionKeys();
        java.lang.String str5 = nameProvider0.getShortName(locale1, "Koordinierte Universalzeit", "+00:00");
        java.util.Locale.Builder builder6 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder9 = builder6.setExtension('x', "jpn");
        java.util.Locale locale10 = java.util.Locale.GERMAN;
        java.util.Locale locale11 = java.util.Locale.GERMAN;
        java.lang.String str12 = locale10.getDisplayCountry(locale11);
        java.util.Locale locale13 = locale10.stripExtensions();
        java.lang.String str14 = locale10.getDisplayName();
        java.util.Locale.Builder builder15 = builder9.setLocale(locale10);
        java.util.Locale locale16 = builder15.build();
        java.lang.String str17 = locale16.getScript();
        java.lang.String str20 = nameProvider0.getName(locale16, "hourOfDay", "");
        org.joda.time.tz.NameProvider nameProvider21 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale22 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet23 = locale22.getExtensionKeys();
        java.lang.String str26 = nameProvider21.getShortName(locale22, "Koordinierte Universalzeit", "+00:00");
        java.util.Locale.Builder builder27 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder30 = builder27.setExtension('x', "jpn");
        java.util.Locale locale31 = java.util.Locale.GERMAN;
        java.util.Locale locale32 = java.util.Locale.GERMAN;
        java.lang.String str33 = locale31.getDisplayCountry(locale32);
        java.util.Locale locale34 = locale31.stripExtensions();
        java.lang.String str35 = locale31.getDisplayName();
        java.util.Locale.Builder builder36 = builder30.setLocale(locale31);
        java.util.Locale locale37 = builder36.build();
        java.lang.String str38 = locale37.getScript();
        java.lang.String str41 = nameProvider21.getName(locale37, "hourOfDay", "");
        java.lang.String str42 = locale16.getDisplayName(locale37);
        java.lang.String str43 = locale16.toLanguageTag();
        org.joda.time.tz.NameProvider nameProvider44 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.TimeZone timeZone45 = null;
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.forTimeZone(timeZone45);
        int int48 = dateTimeZone46.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime49 = org.joda.time.LocalDateTime.now(dateTimeZone46);
        int int50 = localDateTime49.getWeekyear();
        org.joda.time.LocalDateTime.Property property51 = localDateTime49.millisOfDay();
        java.util.Locale locale52 = java.util.Locale.KOREAN;
        int int53 = property51.getMaximumTextLength(locale52);
        java.lang.String str54 = locale52.getVariant();
        java.lang.String str57 = nameProvider44.getName(locale52, "2022-02-21T14:46:31.592", "");
        java.util.TimeZone timeZone58 = null;
        org.joda.time.DateTimeZone dateTimeZone59 = org.joda.time.DateTimeZone.forTimeZone(timeZone58);
        int int61 = dateTimeZone59.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime62 = org.joda.time.LocalDateTime.now(dateTimeZone59);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray63 = localDateTime62.getFieldTypes();
        int int64 = localDateTime62.getCenturyOfEra();
        org.joda.time.LocalDateTime.Property property65 = localDateTime62.year();
        java.util.Locale locale66 = java.util.Locale.KOREAN;
        java.lang.String str67 = property65.getAsShortText(locale66);
        java.lang.String str70 = nameProvider44.getName(locale66, "53195776", "minuteOfHour");
        java.lang.String str71 = locale66.getCountry();
        java.lang.String str72 = locale66.getVariant();
        java.lang.String str73 = locale16.getDisplayName(locale66);
        org.junit.Assert.assertNotNull(nameProvider0);
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet2);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "de");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "de");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "de");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Deutsch" + "'", str14, "Deutsch");
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "de");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(nameProvider21);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet23);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "de");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "de");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "de");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Deutsch" + "'", str35, "Deutsch");
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "de");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "Deutsch" + "'", str42, "Deutsch");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "de" + "'", str43, "de");
        org.junit.Assert.assertNotNull(nameProvider44);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 36000000 + "'", int48 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2022 + "'", int50 == 2022);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "ko");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 8 + "'", int53 == 8);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertNotNull(dateTimeZone59);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 36000000 + "'", int61 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 20 + "'", int64 == 20);
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "2022" + "'", str67, "2022");
        org.junit.Assert.assertNull(str70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "\ub3c5\uc77c\uc5b4" + "'", str73, "\ub3c5\uc77c\uc5b4");
    }

    @Test
    public void test11374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11374");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.hourOfHalfday();
        java.lang.String str2 = iSOChronology0.toString();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.era();
        org.joda.time.DateTimeZone dateTimeZone4 = iSOChronology0.getZone();
        long long7 = dateTimeZone4.convertLocalToUTC(1645454771211L, false);
        java.util.TimeZone timeZone8 = dateTimeZone4.toTimeZone();
        boolean boolean9 = dateTimeZone4.isFixed();
        java.util.Locale locale13 = new java.util.Locale("allemand", "53195209");
        java.util.TimeZone timeZone14 = null;
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forTimeZone(timeZone14);
        int int17 = dateTimeZone15.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime18 = org.joda.time.LocalDateTime.now(dateTimeZone15);
        int int19 = localDateTime18.getWeekyear();
        org.joda.time.LocalDateTime.Property property20 = localDateTime18.minuteOfHour();
        org.joda.time.LocalDateTime.Property property21 = localDateTime18.dayOfYear();
        java.util.TimeZone timeZone22 = null;
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        int int25 = dateTimeZone23.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime26 = org.joda.time.LocalDateTime.now(dateTimeZone23);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray27 = localDateTime26.getFieldTypes();
        int int28 = property21.compareTo((org.joda.time.ReadablePartial) localDateTime26);
        java.util.Locale locale29 = java.util.Locale.SIMPLIFIED_CHINESE;
        boolean boolean30 = localDateTime26.equals((java.lang.Object) locale29);
        java.lang.String str31 = locale13.getDisplayLanguage(locale29);
        java.util.Locale.setDefault(locale13);
        java.lang.String str33 = dateTimeZone4.getName(1645460924346L, locale13);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ISOChronology[+10:00]" + "'", str2, "ISOChronology[+10:00]");
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1645418771211L + "'", long7 == 1645418771211L);
        org.junit.Assert.assertNotNull(timeZone8);
        org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertEquals(locale13.toString(), "allemand_53195209");
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 36000000 + "'", int17 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2022 + "'", int19 == 2022);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 36000000 + "'", int25 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "zh_CN");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "allemand" + "'", str31, "allemand");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "+10:00" + "'", str33, "+10:00");
    }

    @Test
    public void test11375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11375");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime5 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusMinutes((int) ' ');
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withYearOfCentury((int) (byte) 10);
        java.util.TimeZone timeZone10 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        int int13 = dateTimeZone11.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime14 = org.joda.time.LocalDateTime.now(dateTimeZone11);
        org.joda.time.LocalDateTime localDateTime15 = org.joda.time.LocalDateTime.now(dateTimeZone11);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.withMillisOfSecond((int) '4');
        org.joda.time.LocalDateTime localDateTime18 = localDateTime9.withFields((org.joda.time.ReadablePartial) localDateTime15);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.withMonthOfYear((int) (short) 1);
        java.lang.String str21 = localDateTime20.toString();
        java.util.TimeZone timeZone22 = null;
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        int int25 = dateTimeZone23.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime26 = org.joda.time.LocalDateTime.now(dateTimeZone23);
        int int27 = localDateTime26.getWeekyear();
        org.joda.time.LocalDateTime.Property property28 = localDateTime26.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime30 = localDateTime26.minusMillis(2022);
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.LocalDateTime localDateTime32 = localDateTime30.plus(readablePeriod31);
        java.util.TimeZone timeZone33 = null;
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forTimeZone(timeZone33);
        int int36 = dateTimeZone34.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime37 = org.joda.time.LocalDateTime.now(dateTimeZone34);
        org.joda.time.LocalDateTime localDateTime38 = org.joda.time.LocalDateTime.now(dateTimeZone34);
        int int39 = localDateTime38.getWeekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = localDateTime38.getFieldType(0);
        org.joda.time.chrono.ISOChronology iSOChronology42 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField43 = iSOChronology42.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField44 = iSOChronology42.centuryOfEra();
        org.joda.time.DurationField durationField45 = iSOChronology42.eras();
        org.joda.time.DateTimeField dateTimeField46 = iSOChronology42.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField47 = iSOChronology42.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField48 = iSOChronology42.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField49 = dateTimeFieldType41.getField((org.joda.time.Chronology) iSOChronology42);
        int int50 = localDateTime30.get(dateTimeFieldType41);
        int int51 = localDateTime30.getMinuteOfHour();
        java.util.TimeZone timeZone52 = null;
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.forTimeZone(timeZone52);
        int int55 = dateTimeZone53.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime56 = org.joda.time.LocalDateTime.now(dateTimeZone53);
        org.joda.time.ReadableInstant readableInstant57 = null;
        org.joda.time.DateTime dateTime58 = localDateTime56.toDateTime(readableInstant57);
        java.util.TimeZone timeZone59 = null;
        org.joda.time.DateTimeZone dateTimeZone60 = org.joda.time.DateTimeZone.forTimeZone(timeZone59);
        int int62 = dateTimeZone60.getOffset(100L);
        org.joda.time.DateTime dateTime63 = localDateTime56.toDateTime(dateTimeZone60);
        org.joda.time.DateTimeFieldType dateTimeFieldType64 = null;
        boolean boolean65 = dateTime63.isSupported(dateTimeFieldType64);
        org.joda.time.DateTimeFieldType dateTimeFieldType66 = org.joda.time.DateTimeFieldType.minuteOfHour();
        java.lang.String str67 = dateTimeFieldType66.getName();
        boolean boolean68 = dateTime63.isSupported(dateTimeFieldType66);
        int int69 = localDateTime30.get(dateTimeFieldType66);
        boolean boolean70 = localDateTime20.isSupported(dateTimeFieldType66);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 36000000 + "'", int3 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 36000000 + "'", int13 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "2022-01-22T00:54:31.160" + "'", str21, "2022-01-22T00:54:31.160");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 36000000 + "'", int25 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2022 + "'", int27 == 2022);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 36000000 + "'", int36 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2022 + "'", int39 == 2022);
        org.junit.Assert.assertNotNull(dateTimeFieldType41);
        org.junit.Assert.assertNotNull(iSOChronology42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(durationField45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2022 + "'", int50 == 2022);
// flaky:         org.junit.Assert.assertTrue("'" + int51 + "' != '" + 54 + "'", int51 == 54);
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 36000000 + "'", int55 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTimeZone60);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 36000000 + "'", int62 == 36000000);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "minuteOfHour" + "'", str67, "minuteOfHour");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int69 + "' != '" + 54 + "'", int69 == 54);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
    }

    @Test
    public void test11376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11376");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet1 = locale0.getExtensionKeys();
        java.util.Iterator<java.lang.Character> charItor2 = charSet1.iterator();
        java.util.ArrayList[] arrayListArray4 = new java.util.ArrayList[0];
        @SuppressWarnings("unchecked")
        java.util.ArrayList<java.util.Locale.LanguageRange>[] languageRangeListArray5 = (java.util.ArrayList<java.util.Locale.LanguageRange>[]) arrayListArray4;
        java.util.ArrayList<java.util.Locale.LanguageRange>[] languageRangeListArray6 = charSet1.toArray((java.util.ArrayList<java.util.Locale.LanguageRange>[]) arrayListArray4);
        java.util.TimeZone timeZone7 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forTimeZone(timeZone7);
        int int10 = dateTimeZone8.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now(dateTimeZone8);
        int int12 = localDateTime11.getWeekyear();
        org.joda.time.LocalDateTime.Property property13 = localDateTime11.millisOfDay();
        java.util.TimeZone timeZone14 = null;
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forTimeZone(timeZone14);
        int int17 = dateTimeZone15.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime18 = org.joda.time.LocalDateTime.now(dateTimeZone15);
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.DateTime dateTime20 = localDateTime18.toDateTime(readableInstant19);
        java.util.TimeZone timeZone21 = null;
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forTimeZone(timeZone21);
        int int24 = dateTimeZone22.getOffset(100L);
        org.joda.time.DateTime dateTime25 = localDateTime18.toDateTime(dateTimeZone22);
        int int26 = property13.compareTo((org.joda.time.ReadableInstant) dateTime25);
        boolean boolean27 = charSet1.equals((java.lang.Object) dateTime25);
        java.util.Locale locale28 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet29 = locale28.getExtensionKeys();
        java.util.Iterator<java.lang.Character> charItor30 = charSet29.iterator();
        java.util.Locale locale31 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet32 = locale31.getExtensionKeys();
        java.util.Iterator<java.lang.Character> charItor33 = charSet32.iterator();
        boolean boolean34 = charSet29.containsAll((java.util.Collection<java.lang.Character>) charSet32);
        java.util.TimeZone timeZone35 = null;
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forTimeZone(timeZone35);
        int int38 = dateTimeZone36.getOffset(100L);
        java.util.TimeZone timeZone39 = dateTimeZone36.toTimeZone();
        org.joda.time.DateTimeZone[] dateTimeZoneArray40 = new org.joda.time.DateTimeZone[] { dateTimeZone36 };
        org.joda.time.DateTimeZone[] dateTimeZoneArray41 = charSet32.toArray(dateTimeZoneArray40);
        boolean boolean42 = charSet1.removeAll((java.util.Collection<java.lang.Character>) charSet32);
        java.util.Locale locale43 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet44 = locale43.getExtensionKeys();
        java.util.Iterator<java.lang.Character> charItor45 = charSet44.iterator();
        java.util.Locale locale46 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet47 = locale46.getExtensionKeys();
        java.util.Iterator<java.lang.Character> charItor48 = charSet47.iterator();
        boolean boolean49 = charSet44.containsAll((java.util.Collection<java.lang.Character>) charSet47);
        java.util.stream.Stream<java.lang.Character> charStream50 = charSet47.stream();
        java.util.Locale locale51 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet52 = locale51.getExtensionKeys();
        java.util.Iterator<java.lang.Character> charItor53 = charSet52.iterator();
        java.util.ArrayList[] arrayListArray55 = new java.util.ArrayList[0];
        @SuppressWarnings("unchecked")
        java.util.ArrayList<java.util.Locale.LanguageRange>[] languageRangeListArray56 = (java.util.ArrayList<java.util.Locale.LanguageRange>[]) arrayListArray55;
        java.util.ArrayList<java.util.Locale.LanguageRange>[] languageRangeListArray57 = charSet52.toArray((java.util.ArrayList<java.util.Locale.LanguageRange>[]) arrayListArray55);
        java.util.stream.Stream<java.lang.Character> charStream58 = charSet52.stream();
        boolean boolean59 = charSet47.addAll((java.util.Collection<java.lang.Character>) charSet52);
        boolean boolean60 = charSet1.retainAll((java.util.Collection<java.lang.Character>) charSet47);
        boolean boolean61 = charSet47.isEmpty();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet1);
        org.junit.Assert.assertNotNull(charItor2);
        org.junit.Assert.assertNotNull(arrayListArray4);
        org.junit.Assert.assertNotNull(languageRangeListArray5);
        org.junit.Assert.assertNotNull(languageRangeListArray6);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 36000000 + "'", int10 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2022 + "'", int12 == 2022);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 36000000 + "'", int17 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 36000000 + "'", int24 == 36000000);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet29);
        org.junit.Assert.assertNotNull(charItor30);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet32);
        org.junit.Assert.assertNotNull(charItor33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 36000000 + "'", int38 == 36000000);
        org.junit.Assert.assertNotNull(timeZone39);
        org.junit.Assert.assertEquals(timeZone39.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertNotNull(dateTimeZoneArray40);
        org.junit.Assert.assertNotNull(dateTimeZoneArray41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet44);
        org.junit.Assert.assertNotNull(charItor45);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet47);
        org.junit.Assert.assertNotNull(charItor48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(charStream50);
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet52);
        org.junit.Assert.assertNotNull(charItor53);
        org.junit.Assert.assertNotNull(arrayListArray55);
        org.junit.Assert.assertNotNull(languageRangeListArray56);
        org.junit.Assert.assertNotNull(languageRangeListArray57);
        org.junit.Assert.assertNotNull(charStream58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
    }

    @Test
    public void test11377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11377");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.yearOfEra();
        java.util.TimeZone timeZone3 = null;
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forTimeZone(timeZone3);
        java.lang.String str6 = dateTimeZone4.getName(31556995199999L);
        org.joda.time.Chronology chronology7 = iSOChronology0.withZone(dateTimeZone4);
        org.joda.time.DateTimeField dateTimeField8 = iSOChronology0.weekyear();
        org.joda.time.DurationField durationField9 = iSOChronology0.weeks();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology0.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology0.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology0.yearOfCentury();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+10:00" + "'", str6, "+10:00");
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
    }

    @Test
    public void test11378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11378");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        org.joda.time.tz.NameProvider nameProvider1 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet3 = locale2.getExtensionKeys();
        java.lang.String str6 = nameProvider1.getShortName(locale2, "Koordinierte Universalzeit", "+00:00");
        java.lang.String str7 = locale2.toLanguageTag();
        java.util.Locale.setDefault(category0, locale2);
        java.util.Locale locale9 = java.util.Locale.getDefault(category0);
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(nameProvider1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet3);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "ko" + "'", str7, "ko");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "ko");
    }

    @Test
    public void test11379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11379");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray5 = localDateTime4.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.hourOfDay();
        int int7 = localDateTime4.get(dateTimeFieldType6);
        org.joda.time.LocalDateTime.Property property8 = localDateTime4.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime4.minusHours(20);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = localDateTime4.getFieldType((int) (byte) 1);
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.LocalDateTime localDateTime15 = localDateTime4.withDurationAdded(readableDuration13, 46);
        org.joda.time.Chronology chronology16 = localDateTime4.getChronology();
        org.joda.time.DateTimeField dateTimeField17 = chronology16.dayOfWeek();
        java.util.Locale locale19 = java.util.Locale.US;
        java.lang.String str20 = dateTimeField17.getAsText(1645454899250L, locale19);
        org.joda.time.LocalDateTime localDateTime21 = org.joda.time.LocalDateTime.now();
        java.util.TimeZone timeZone22 = null;
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        int int25 = dateTimeZone23.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime26 = org.joda.time.LocalDateTime.now(dateTimeZone23);
        int int27 = localDateTime26.getWeekyear();
        org.joda.time.LocalDateTime.Property property28 = localDateTime26.millisOfDay();
        java.util.TimeZone timeZone29 = null;
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forTimeZone(timeZone29);
        int int32 = dateTimeZone30.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime33 = org.joda.time.LocalDateTime.now(dateTimeZone30);
        org.joda.time.ReadableInstant readableInstant34 = null;
        org.joda.time.DateTime dateTime35 = localDateTime33.toDateTime(readableInstant34);
        java.util.TimeZone timeZone36 = null;
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forTimeZone(timeZone36);
        int int39 = dateTimeZone37.getOffset(100L);
        org.joda.time.DateTime dateTime40 = localDateTime33.toDateTime(dateTimeZone37);
        int int41 = property28.compareTo((org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.LocalDateTime localDateTime42 = property28.roundHalfEvenCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.LocalDateTime.Property property44 = localDateTime42.property(dateTimeFieldType43);
        org.joda.time.DateTimeFieldType dateTimeFieldType45 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.Chronology chronology46 = null;
        boolean boolean47 = dateTimeFieldType45.isSupported(chronology46);
        boolean boolean48 = localDateTime42.isSupported(dateTimeFieldType45);
        int int49 = localDateTime21.get(dateTimeFieldType45);
        org.joda.time.ReadablePeriod readablePeriod50 = null;
        org.joda.time.LocalDateTime localDateTime51 = localDateTime21.minus(readablePeriod50);
        org.joda.time.chrono.ISOChronology iSOChronology52 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField53 = iSOChronology52.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField54 = iSOChronology52.yearOfEra();
        org.joda.time.DateTimeField dateTimeField55 = iSOChronology52.weekyearOfCentury();
        java.lang.String str56 = iSOChronology52.toString();
        org.joda.time.DateTimeField dateTimeField57 = iSOChronology52.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField58 = iSOChronology52.dayOfYear();
        java.util.TimeZone timeZone59 = null;
        org.joda.time.DateTimeZone dateTimeZone60 = org.joda.time.DateTimeZone.forTimeZone(timeZone59);
        int int62 = dateTimeZone60.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime63 = org.joda.time.LocalDateTime.now(dateTimeZone60);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray64 = localDateTime63.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime66 = localDateTime63.plusWeeks(2022);
        org.joda.time.LocalDateTime localDateTime68 = localDateTime63.plusHours((int) '4');
        int int69 = dateTimeField58.getMinimumValue((org.joda.time.ReadablePartial) localDateTime68);
        org.joda.time.LocalDateTime.Property property70 = localDateTime68.dayOfWeek();
        int[] intArray71 = localDateTime68.getValues();
        int int72 = dateTimeField17.getMaximumValue((org.joda.time.ReadablePartial) localDateTime51, intArray71);
        org.joda.time.LocalDateTime localDateTime74 = localDateTime51.minusSeconds(49900503);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 36000000 + "'", int3 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray5);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Monday" + "'", str20, "Monday");
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 36000000 + "'", int25 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2022 + "'", int27 == 2022);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 36000000 + "'", int32 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 36000000 + "'", int39 == 36000000);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(dateTimeFieldType43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(dateTimeFieldType45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 53 + "'", int49 == 53);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(iSOChronology52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "ISOChronology[+10:00]" + "'", str56, "ISOChronology[+10:00]");
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(dateTimeZone60);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 36000000 + "'", int62 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray64);
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertNotNull(localDateTime68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 1 + "'", int69 == 1);
        org.junit.Assert.assertNotNull(property70);
        org.junit.Assert.assertNotNull(intArray71);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[2022, 2, 24, 17671362]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 7 + "'", int72 == 7);
        org.junit.Assert.assertNotNull(localDateTime74);
    }

    @Test
    public void test11380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11380");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.centuryOfEra();
        java.util.TimeZone timeZone3 = null;
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forTimeZone(timeZone3);
        int int6 = dateTimeZone4.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime7 = org.joda.time.LocalDateTime.now(dateTimeZone4);
        int int8 = localDateTime7.getWeekyear();
        org.joda.time.LocalDateTime.Property property9 = localDateTime7.millisOfDay();
        long long11 = iSOChronology0.set((org.joda.time.ReadablePartial) localDateTime7, (long) '4');
        org.joda.time.Chronology chronology12 = iSOChronology0.withUTC();
        org.joda.time.DateTimeField dateTimeField13 = iSOChronology0.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology0.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.minusMillis(52);
        java.util.Locale locale18 = java.util.Locale.US;
        java.lang.String str19 = locale18.getScript();
        java.lang.String str20 = dateTimeField14.getAsShortText((org.joda.time.ReadablePartial) localDateTime15, locale18);
        java.util.TimeZone timeZone21 = null;
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forTimeZone(timeZone21);
        int int24 = dateTimeZone22.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime25 = org.joda.time.LocalDateTime.now(dateTimeZone22);
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.DateTime dateTime27 = localDateTime25.toDateTime(readableInstant26);
        java.util.TimeZone timeZone28 = null;
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forTimeZone(timeZone28);
        int int31 = dateTimeZone29.getOffset(100L);
        org.joda.time.DateTime dateTime32 = localDateTime25.toDateTime(dateTimeZone29);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime25.withYear(52);
        java.util.Locale locale36 = java.util.Locale.ITALIAN;
        java.lang.String str37 = localDateTime34.toString("1", locale36);
        java.lang.String str38 = locale36.getVariant();
        java.lang.String str39 = locale18.getDisplayLanguage(locale36);
        java.util.TimeZone timeZone40 = null;
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forTimeZone(timeZone40);
        int int43 = dateTimeZone41.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime44 = org.joda.time.LocalDateTime.now(dateTimeZone41);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray45 = localDateTime44.getFieldTypes();
        int int46 = localDateTime44.getCenturyOfEra();
        org.joda.time.LocalDateTime.Property property47 = localDateTime44.year();
        java.util.Locale locale48 = java.util.Locale.KOREAN;
        java.lang.String str49 = property47.getAsShortText(locale48);
        org.joda.time.LocalDateTime localDateTime50 = property47.getLocalDateTime();
        java.util.Locale locale52 = new java.util.Locale("");
        boolean boolean53 = locale52.hasExtensions();
        int int54 = property47.getMaximumShortTextLength(locale52);
        java.lang.String str55 = locale52.getLanguage();
        java.lang.String str56 = locale36.getDisplayLanguage(locale52);
        boolean boolean57 = locale52.hasExtensions();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 36000000 + "'", int6 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2022 + "'", int8 == 2022);
        org.junit.Assert.assertNotNull(property9);
// flaky:         org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1645455271421L + "'", long11 == 1645455271421L);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "8" + "'", str20, "8");
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 36000000 + "'", int24 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 36000000 + "'", int31 == 36000000);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "it");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "1" + "'", str37, "1");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "inglese" + "'", str39, "inglese");
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 36000000 + "'", int43 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 20 + "'", int46 == 20);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "2022" + "'", str49, "2022");
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertEquals(locale52.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 9 + "'", int54 == 9);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "Italian" + "'", str56, "Italian");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
    }

    @Test
    public void test11381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11381");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        int int5 = localDateTime4.getWeekyear();
        org.joda.time.LocalDateTime.Property property6 = localDateTime4.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime4.minusMillis(2022);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.plus(readablePeriod9);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime12 = localDateTime10.withSecondOfMinute(3041);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 3041 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 36000000 + "'", int3 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2022 + "'", int5 == 2022);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
    }

    @Test
    public void test11382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11382");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.yearOfEra();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.weekyearOfCentury();
        org.joda.time.DurationField durationField4 = iSOChronology0.weeks();
        org.joda.time.DurationField durationField5 = iSOChronology0.millis();
        org.joda.time.DateTimeField dateTimeField6 = iSOChronology0.dayOfYear();
        org.joda.time.DateTimeField dateTimeField7 = iSOChronology0.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime8 = org.joda.time.LocalDateTime.now();
        java.util.TimeZone timeZone9 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        int int12 = dateTimeZone10.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime13 = org.joda.time.LocalDateTime.now(dateTimeZone10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray14 = localDateTime13.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.hourOfDay();
        int int16 = localDateTime13.get(dateTimeFieldType15);
        org.joda.time.LocalDateTime.Property property17 = localDateTime13.dayOfWeek();
        boolean boolean18 = localDateTime8.isEqual((org.joda.time.ReadablePartial) localDateTime13);
        org.joda.time.LocalDateTime.Property property19 = localDateTime13.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime20 = property19.roundHalfCeilingCopy();
        java.util.TimeZone timeZone21 = null;
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forTimeZone(timeZone21);
        int int24 = dateTimeZone22.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime25 = org.joda.time.LocalDateTime.now(dateTimeZone22);
        org.joda.time.LocalDateTime localDateTime26 = org.joda.time.LocalDateTime.now(dateTimeZone22);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.minusMinutes((int) ' ');
        int int29 = property19.compareTo((org.joda.time.ReadablePartial) localDateTime28);
        java.util.TimeZone timeZone30 = null;
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forTimeZone(timeZone30);
        int int33 = dateTimeZone31.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime34 = org.joda.time.LocalDateTime.now(dateTimeZone31);
        org.joda.time.LocalDateTime localDateTime35 = org.joda.time.LocalDateTime.now(dateTimeZone31);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime35.plusSeconds((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime35.minusWeeks((int) (byte) 10);
        java.util.TimeZone timeZone40 = null;
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forTimeZone(timeZone40);
        int int43 = dateTimeZone41.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime44 = org.joda.time.LocalDateTime.now(dateTimeZone41);
        org.joda.time.LocalDateTime localDateTime45 = org.joda.time.LocalDateTime.now(dateTimeZone41);
        org.joda.time.LocalDateTime localDateTime47 = localDateTime45.plusSeconds((int) (short) 10);
        int int48 = localDateTime45.size();
        boolean boolean49 = localDateTime39.isBefore((org.joda.time.ReadablePartial) localDateTime45);
        org.joda.time.LocalDateTime.Property property50 = localDateTime45.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime51 = localDateTime28.withFields((org.joda.time.ReadablePartial) localDateTime45);
        java.util.Locale locale53 = java.util.Locale.US;
        java.lang.String str54 = dateTimeField7.getAsShortText((org.joda.time.ReadablePartial) localDateTime45, 2852321, locale53);
        long long57 = dateTimeField7.add((long) 58, (long) 140);
        int int58 = dateTimeField7.getMaximumValue();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 36000000 + "'", int12 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray14);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
// flaky:         org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 36000000 + "'", int24 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 36000000 + "'", int33 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 36000000 + "'", int43 == 36000000);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 4 + "'", int48 == 4);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "2852321" + "'", str54, "2852321");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 4417977600058L + "'", long57 == 4417977600058L);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 99 + "'", int58 == 99);
    }

    @Test
    public void test11383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11383");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.chrono.ISOChronology iSOChronology1 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology1.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology1.centuryOfEra();
        org.joda.time.DurationField durationField4 = iSOChronology1.seconds();
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology1.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField6 = iSOChronology1.yearOfEra();
        org.joda.time.DateTimeField dateTimeField7 = iSOChronology1.monthOfYear();
        boolean boolean8 = dateTimeFieldType0.isSupported((org.joda.time.Chronology) iSOChronology1);
        org.joda.time.DurationField durationField9 = iSOChronology1.weekyears();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology1.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology1.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology1.secondOfDay();
        org.joda.time.DateTimeField dateTimeField13 = iSOChronology1.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology1.era();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(iSOChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
    }

    @Test
    public void test11384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11384");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.yearOfEra();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.secondOfMinute();
        java.lang.String str4 = iSOChronology0.toString();
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology0.hourOfHalfday();
        long long9 = iSOChronology0.add((long) 53178951, (long) (short) 10, (int) (byte) -1);
        org.joda.time.DurationField durationField10 = iSOChronology0.millis();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology0.weekyear();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone13 = iSOChronology0.getZone();
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology0.hourOfDay();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology0.weekOfWeekyear();
        org.joda.time.DurationField durationField16 = iSOChronology0.eras();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "ISOChronology[+10:00]" + "'", str4, "ISOChronology[+10:00]");
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 53178941L + "'", long9 == 53178941L);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
    }

    @Test
    public void test11385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11385");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) -1);
        long long3 = dateTimeZone1.convertUTCToLocal((long) 4);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        java.util.TimeZone timeZone6 = null;
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forTimeZone(timeZone6);
        int int9 = dateTimeZone7.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime10 = org.joda.time.LocalDateTime.now(dateTimeZone7);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray11 = localDateTime10.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime10.plusWeeks(2022);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime10.plusHours((int) '4');
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.plus(readableDuration16);
        java.util.TimeZone timeZone19 = null;
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forTimeZone(timeZone19);
        int int22 = dateTimeZone20.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime23 = org.joda.time.LocalDateTime.now(dateTimeZone20);
        int int24 = localDateTime23.getWeekyear();
        org.joda.time.LocalDateTime.Property property25 = localDateTime23.millisOfDay();
        int int26 = property25.get();
        org.joda.time.LocalDateTime localDateTime27 = property25.roundCeilingCopy();
        java.util.Locale locale28 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str29 = property25.getAsShortText(locale28);
        java.lang.String str30 = localDateTime17.toString("35", locale28);
        java.lang.String str31 = dateTimeZone1.getShortName((-1613897822909L), locale28);
        long long33 = dateTimeZone1.convertUTCToLocal(1645454873376L);
        org.joda.time.chrono.ISOChronology iSOChronology35 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField36 = iSOChronology35.hourOfHalfday();
        java.lang.String str37 = iSOChronology35.toString();
        org.joda.time.DateTimeField dateTimeField38 = iSOChronology35.era();
        org.joda.time.DurationField durationField39 = iSOChronology35.centuries();
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        long long43 = iSOChronology35.add(readablePeriod40, (long) 2022, (int) (byte) 100);
        org.joda.time.DateTimeField dateTimeField44 = iSOChronology35.hourOfDay();
        org.joda.time.tz.NameProvider nameProvider45 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale46 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet47 = locale46.getExtensionKeys();
        java.lang.String str50 = nameProvider45.getShortName(locale46, "Koordinierte Universalzeit", "+00:00");
        int int51 = dateTimeField44.getMaximumTextLength(locale46);
        java.lang.String str52 = locale46.getISO3Language();
        java.lang.String str53 = locale46.getDisplayScript();
        java.lang.String str54 = dateTimeZone1.getName(1703170352913L, locale46);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-3599996L) + "'", long3 == (-3599996L));
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-3600000) + "'", int9 == (-3600000));
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-3600000) + "'", int22 == (-3600000));
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2022 + "'", int24 == 2022);
        org.junit.Assert.assertNotNull(property25);
// flaky:         org.junit.Assert.assertTrue("'" + int26 + "' != '" + 50071616 + "'", int26 == 50071616);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "fr_CA");
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "50071616" + "'", str29, "50071616");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "35" + "'", str30, "35");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "-01:00" + "'", str31, "-01:00");
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 1645451273376L + "'", long33 == 1645451273376L);
        org.junit.Assert.assertNotNull(iSOChronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "ISOChronology[-01:00]" + "'", str37, "ISOChronology[-01:00]");
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 2022L + "'", long43 == 2022L);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(nameProvider45);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet47);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 2 + "'", int51 == 2);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "kor" + "'", str52, "kor");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "-01:00" + "'", str54, "-01:00");
    }

    @Test
    public void test11386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11386");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.chrono.ISOChronology iSOChronology1 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology1.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology1.centuryOfEra();
        org.joda.time.DurationField durationField4 = iSOChronology1.centuries();
        org.joda.time.DurationField durationField5 = iSOChronology1.hours();
        boolean boolean6 = dateTimeFieldType0.isSupported((org.joda.time.Chronology) iSOChronology1);
        org.joda.time.DurationField durationField7 = iSOChronology1.centuries();
        org.joda.time.DurationField durationField8 = iSOChronology1.years();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(iSOChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(durationField8);
    }

    @Test
    public void test11387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11387");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("en");
        double double2 = languageRange1.getWeight();
        java.lang.String str3 = languageRange1.getRange();
        java.lang.String str4 = languageRange1.getRange();
        double double5 = languageRange1.getWeight();
        double double6 = languageRange1.getWeight();
        double double7 = languageRange1.getWeight();
        double double8 = languageRange1.getWeight();
        double double9 = languageRange1.getWeight();
        double double10 = languageRange1.getWeight();
        java.lang.String str11 = languageRange1.getRange();
        java.lang.String str12 = languageRange1.getRange();
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.0d + "'", double2 == 1.0d);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "en" + "'", str3, "en");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "en" + "'", str4, "en");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 1.0d + "'", double7 == 1.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0d + "'", double8 == 1.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "en" + "'", str11, "en");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "en" + "'", str12, "en");
    }

    @Test
    public void test11388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11388");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.yearOfEra();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.year();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.monthOfYear();
        org.joda.time.DurationField durationField5 = iSOChronology0.seconds();
        org.joda.time.DurationField durationField6 = iSOChronology0.years();
        java.util.TimeZone timeZone7 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forTimeZone(timeZone7);
        int int10 = dateTimeZone8.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now(dateTimeZone8);
        org.joda.time.LocalDateTime localDateTime12 = org.joda.time.LocalDateTime.now(dateTimeZone8);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.withMillisOfSecond((int) '4');
        org.joda.time.LocalDateTime localDateTime16 = localDateTime12.plusSeconds((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.plusMonths(8);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = null;
        java.lang.String str20 = localDateTime18.toString(dateTimeFormatter19);
        int[] intArray22 = iSOChronology0.get((org.joda.time.ReadablePartial) localDateTime18, 1644850137571L);
        org.joda.time.DateTimeField dateTimeField23 = iSOChronology0.minuteOfHour();
        org.joda.time.DurationField durationField24 = iSOChronology0.minutes();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3600000) + "'", int10 == (-3600000));
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "2022-10-21T13:54:32.702" + "'", str20, "2022-10-21T13:54:32.702");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[2022, 2, 14, 49737571]");
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(durationField24);
    }

    @Test
    public void test11389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11389");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.hourOfHalfday();
        java.lang.String str2 = iSOChronology0.toString();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.era();
        org.joda.time.DurationField durationField4 = iSOChronology0.centuries();
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        long long8 = iSOChronology0.add(readablePeriod5, (long) 2022, (int) (byte) 100);
        org.joda.time.DateTimeField dateTimeField9 = iSOChronology0.dayOfYear();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology0.era();
        org.joda.time.DurationField durationField11 = iSOChronology0.halfdays();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology0.hourOfDay();
        org.joda.time.DateTimeField dateTimeField13 = iSOChronology0.weekyear();
        org.joda.time.DurationField durationField14 = iSOChronology0.millis();
        java.util.TimeZone timeZone15 = null;
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forTimeZone(timeZone15);
        int int18 = dateTimeZone16.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime19 = org.joda.time.LocalDateTime.now(dateTimeZone16);
        int int20 = localDateTime19.getWeekyear();
        org.joda.time.LocalDateTime.Property property21 = localDateTime19.millisOfDay();
        java.util.Locale locale22 = java.util.Locale.GERMAN;
        java.util.Locale locale23 = java.util.Locale.GERMAN;
        java.lang.String str24 = locale22.getDisplayCountry(locale23);
        java.util.Locale locale25 = locale22.stripExtensions();
        int int26 = property21.getMaximumShortTextLength(locale22);
        int int27 = property21.getMinimumValueOverall();
        org.joda.time.DurationField durationField28 = property21.getRangeDurationField();
        org.joda.time.DurationField durationField29 = property21.getRangeDurationField();
        org.joda.time.Interval interval30 = property21.toInterval();
        boolean boolean31 = property21.isLeap();
        org.joda.time.LocalDateTime localDateTime32 = property21.withMinimumValue();
        int int33 = localDateTime32.getYearOfCentury();
        boolean boolean34 = iSOChronology0.equals((java.lang.Object) localDateTime32);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ISOChronology[-01:00]" + "'", str2, "ISOChronology[-01:00]");
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 2022L + "'", long8 == 2022L);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3600000) + "'", int18 == (-3600000));
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2022 + "'", int20 == 2022);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "de");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "de");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "de");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 8 + "'", int26 == 8);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 22 + "'", int33 == 22);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test11390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11390");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.hourOfHalfday();
        java.lang.String str2 = iSOChronology0.toString();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.era();
        org.joda.time.DurationField durationField4 = iSOChronology0.centuries();
        org.joda.time.DurationField durationField5 = iSOChronology0.weeks();
        org.joda.time.DateTimeField dateTimeField6 = iSOChronology0.era();
        org.joda.time.DateTimeField dateTimeField7 = iSOChronology0.year();
        org.joda.time.DateTimeField dateTimeField8 = iSOChronology0.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField9 = iSOChronology0.era();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology0.hourOfHalfday();
        java.util.TimeZone timeZone11 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        int int14 = dateTimeZone12.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime15 = org.joda.time.LocalDateTime.now(dateTimeZone12);
        int int16 = localDateTime15.getWeekyear();
        org.joda.time.DurationFieldType durationFieldType17 = org.joda.time.DurationFieldType.centuries();
        java.lang.String str18 = durationFieldType17.getName();
        boolean boolean19 = localDateTime15.isSupported(durationFieldType17);
        int int20 = localDateTime15.getHourOfDay();
        java.lang.String str21 = localDateTime15.toString();
        int[] intArray23 = iSOChronology0.get((org.joda.time.ReadablePartial) localDateTime15, (long) 2827556);
        org.joda.time.DurationField durationField24 = iSOChronology0.weeks();
        org.joda.time.DateTimeField dateTimeField25 = iSOChronology0.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField26 = iSOChronology0.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField27 = iSOChronology0.secondOfDay();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ISOChronology[-01:00]" + "'", str2, "ISOChronology[-01:00]");
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3600000) + "'", int14 == (-3600000));
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2022 + "'", int16 == 2022);
        org.junit.Assert.assertNotNull(durationFieldType17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "centuries" + "'", str18, "centuries");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int20 + "' != '" + 13 + "'", int20 == 13);
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "2022-02-21T13:54:31.776" + "'", str21, "2022-02-21T13:54:31.776");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[1969, 12, 31, 85627556]");
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
    }

    @Test
    public void test11391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11391");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.centuryOfEra();
        org.joda.time.DurationField durationField3 = iSOChronology0.seconds();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.clockhourOfDay();
        org.joda.time.Chronology chronology5 = iSOChronology0.withUTC();
        org.joda.time.DateTimeField dateTimeField6 = iSOChronology0.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField7 = iSOChronology0.year();
        org.joda.time.DurationField durationField8 = iSOChronology0.seconds();
        org.joda.time.DateTimeZone dateTimeZone9 = iSOChronology0.getZone();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology0.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology0.hourOfDay();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology0.dayOfWeek();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
    }

    @Test
    public void test11392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11392");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime5 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.withMillisOfSecond((int) '4');
        org.joda.time.LocalDateTime localDateTime9 = localDateTime5.plusSeconds((int) (short) 1);
        org.joda.time.LocalDateTime.Property property10 = localDateTime5.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime11 = property10.roundHalfEvenCopy();
        // The following exception was thrown during execution in test generation
        try {
            int int13 = localDateTime11.getValue(53264153);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 53264153");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-3600000) + "'", int3 == (-3600000));
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDateTime11);
    }

    @Test
    public void test11393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11393");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffset(100L);
        java.util.TimeZone timeZone4 = dateTimeZone1.toTimeZone();
        int int6 = dateTimeZone1.getOffset((-36000001L));
        java.util.TimeZone timeZone7 = dateTimeZone1.toTimeZone();
        java.lang.String str9 = dateTimeZone1.getShortName(1L);
        boolean boolean10 = dateTimeZone1.isFixed();
        org.joda.time.chrono.ISOChronology iSOChronology11 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology11.hourOfHalfday();
        java.lang.String str13 = iSOChronology11.toString();
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology11.era();
        org.joda.time.DateTimeZone dateTimeZone15 = iSOChronology11.getZone();
        long long18 = dateTimeZone15.convertLocalToUTC(1645454771211L, false);
        java.util.TimeZone timeZone19 = dateTimeZone15.toTimeZone();
        boolean boolean20 = dateTimeZone15.isFixed();
        long long22 = dateTimeZone1.getMillisKeepLocal(dateTimeZone15, (long) 3039);
        long long25 = dateTimeZone1.adjustOffset((-35999986L), false);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-3600000) + "'", int3 == (-3600000));
        org.junit.Assert.assertNotNull(timeZone4);
        org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "GMT-01:00");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3600000) + "'", int6 == (-3600000));
        org.junit.Assert.assertNotNull(timeZone7);
        org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "GMT-01:00");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "-01:00" + "'", str9, "-01:00");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(iSOChronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ISOChronology[-01:00]" + "'", str13, "ISOChronology[-01:00]");
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1645458371211L + "'", long18 == 1645458371211L);
        org.junit.Assert.assertNotNull(timeZone19);
        org.junit.Assert.assertEquals(timeZone19.getDisplayName(), "GMT-01:00");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 3039L + "'", long22 == 3039L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-35999986L) + "'", long25 == (-35999986L));
    }

    @Test
    public void test11394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11394");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.hourOfHalfday();
        java.lang.String str2 = iSOChronology0.toString();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.era();
        java.util.TimeZone timeZone4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forTimeZone(timeZone4);
        int int7 = dateTimeZone5.getOffset(100L);
        java.util.TimeZone timeZone8 = dateTimeZone5.toTimeZone();
        java.lang.String str9 = dateTimeZone5.toString();
        org.joda.time.Chronology chronology10 = iSOChronology0.withZone(dateTimeZone5);
        java.util.TimeZone timeZone11 = dateTimeZone5.toTimeZone();
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime(dateTimeZone5);
        java.util.TimeZone timeZone13 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forTimeZone(timeZone13);
        int int16 = dateTimeZone14.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime17 = org.joda.time.LocalDateTime.now(dateTimeZone14);
        int int18 = localDateTime17.getWeekyear();
        org.joda.time.LocalDateTime.Property property19 = localDateTime17.millisOfDay();
        int int20 = property19.get();
        org.joda.time.LocalDateTime localDateTime21 = property19.roundCeilingCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = property19.getFieldType();
        org.joda.time.LocalDateTime.Property property23 = localDateTime12.property(dateTimeFieldType22);
        org.joda.time.LocalDateTime localDateTime24 = property23.roundHalfCeilingCopy();
        long long25 = property23.remainder();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ISOChronology[-01:00]" + "'", str2, "ISOChronology[-01:00]");
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3600000) + "'", int7 == (-3600000));
        org.junit.Assert.assertNotNull(timeZone8);
        org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "GMT-01:00");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "-01:00" + "'", str9, "-01:00");
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(timeZone11);
        org.junit.Assert.assertEquals(timeZone11.getDisplayName(), "GMT-01:00");
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3600000) + "'", int16 == (-3600000));
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2022 + "'", int18 == 2022);
        org.junit.Assert.assertNotNull(property19);
// flaky:         org.junit.Assert.assertTrue("'" + int20 + "' != '" + 50071887 + "'", int20 == 50071887);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
    }

    @Test
    public void test11395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11395");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.yearOfEra();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.hourOfDay();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.year();
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology0.dayOfYear();
        org.joda.time.DurationField durationField6 = iSOChronology0.weeks();
        java.util.TimeZone timeZone7 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forTimeZone(timeZone7);
        int int10 = dateTimeZone8.getOffset(100L);
        java.util.TimeZone timeZone11 = dateTimeZone8.toTimeZone();
        int int13 = dateTimeZone8.getStandardOffset((long) ' ');
        boolean boolean15 = dateTimeZone8.isStandardOffset((long) '4');
        org.joda.time.chrono.ISOChronology iSOChronology16 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone8);
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology16.dayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone18 = iSOChronology16.getZone();
        org.joda.time.Chronology chronology19 = iSOChronology0.withZone(dateTimeZone18);
        java.util.TimeZone timeZone20 = null;
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forTimeZone(timeZone20);
        int int23 = dateTimeZone21.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime24 = org.joda.time.LocalDateTime.now(dateTimeZone21);
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.DateTime dateTime26 = localDateTime24.toDateTime(readableInstant25);
        java.util.TimeZone timeZone27 = null;
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forTimeZone(timeZone27);
        int int30 = dateTimeZone28.getOffset(100L);
        org.joda.time.DateTime dateTime31 = localDateTime24.toDateTime(dateTimeZone28);
        org.joda.time.LocalDateTime.Property property32 = localDateTime24.monthOfYear();
        java.util.TimeZone timeZone33 = null;
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forTimeZone(timeZone33);
        int int36 = dateTimeZone34.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime37 = org.joda.time.LocalDateTime.now(dateTimeZone34);
        int int38 = localDateTime37.getWeekyear();
        org.joda.time.LocalDateTime.Property property39 = localDateTime37.millisOfDay();
        java.util.TimeZone timeZone40 = null;
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forTimeZone(timeZone40);
        int int43 = dateTimeZone41.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime44 = org.joda.time.LocalDateTime.now(dateTimeZone41);
        org.joda.time.ReadableInstant readableInstant45 = null;
        org.joda.time.DateTime dateTime46 = localDateTime44.toDateTime(readableInstant45);
        java.util.TimeZone timeZone47 = null;
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.forTimeZone(timeZone47);
        int int50 = dateTimeZone48.getOffset(100L);
        org.joda.time.DateTime dateTime51 = localDateTime44.toDateTime(dateTimeZone48);
        int int52 = property39.compareTo((org.joda.time.ReadableInstant) dateTime51);
        org.joda.time.LocalDateTime localDateTime53 = property39.roundHalfEvenCopy();
        boolean boolean54 = localDateTime24.isAfter((org.joda.time.ReadablePartial) localDateTime53);
        org.joda.time.chrono.ISOChronology iSOChronology55 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField56 = iSOChronology55.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField57 = iSOChronology55.yearOfEra();
        org.joda.time.DurationField durationField58 = iSOChronology55.minutes();
        org.joda.time.DurationField durationField59 = iSOChronology55.months();
        org.joda.time.DateTimeField dateTimeField60 = iSOChronology55.era();
        java.lang.String str62 = dateTimeField60.getAsShortText((-139813307279999990L));
        boolean boolean63 = localDateTime24.equals((java.lang.Object) str62);
        org.joda.time.LocalDateTime localDateTime65 = localDateTime24.withCenturyOfEra((int) 'u');
        long long67 = iSOChronology0.set((org.joda.time.ReadablePartial) localDateTime24, 1645454961739L);
        org.joda.time.DateTimeField dateTimeField68 = iSOChronology0.yearOfEra();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3600000) + "'", int10 == (-3600000));
        org.junit.Assert.assertNotNull(timeZone11);
        org.junit.Assert.assertEquals(timeZone11.getDisplayName(), "GMT-01:00");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3600000) + "'", int13 == (-3600000));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(iSOChronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-3600000) + "'", int23 == (-3600000));
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-3600000) + "'", int30 == (-3600000));
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3600000) + "'", int36 == (-3600000));
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2022 + "'", int38 == 2022);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-3600000) + "'", int43 == (-3600000));
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-3600000) + "'", int50 == (-3600000));
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(iSOChronology55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(durationField58);
        org.junit.Assert.assertNotNull(durationField59);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "BC" + "'", str62, "BC");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(localDateTime65);
// flaky:         org.junit.Assert.assertTrue("'" + long67 + "' != '" + 1645455271922L + "'", long67 == 1645455271922L);
        org.junit.Assert.assertNotNull(dateTimeField68);
    }

    @Test
    public void test11396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11396");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime5 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        int int6 = localDateTime5.getWeekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = localDateTime5.getFieldType(0);
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.LocalDateTime localDateTime11 = localDateTime5.withDurationAdded(readableDuration9, 36000000);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minus(readablePeriod12);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-3600000) + "'", int3 == (-3600000));
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2022 + "'", int6 == 2022);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
    }

    @Test
    public void test11397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11397");
        org.joda.time.tz.NameProvider nameProvider0 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.TimeZone timeZone1 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        int int4 = dateTimeZone2.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime5 = org.joda.time.LocalDateTime.now(dateTimeZone2);
        int int6 = localDateTime5.getWeekyear();
        org.joda.time.LocalDateTime.Property property7 = localDateTime5.millisOfDay();
        java.util.Locale locale8 = java.util.Locale.KOREAN;
        int int9 = property7.getMaximumTextLength(locale8);
        java.lang.String str10 = locale8.getVariant();
        java.lang.String str13 = nameProvider0.getName(locale8, "2022-02-21T14:46:31.592", "");
        java.util.TimeZone timeZone14 = null;
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forTimeZone(timeZone14);
        int int17 = dateTimeZone15.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime18 = org.joda.time.LocalDateTime.now(dateTimeZone15);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray19 = localDateTime18.getFieldTypes();
        int int20 = localDateTime18.getCenturyOfEra();
        org.joda.time.LocalDateTime.Property property21 = localDateTime18.year();
        java.util.Locale locale22 = java.util.Locale.KOREAN;
        java.lang.String str23 = property21.getAsShortText(locale22);
        java.lang.String str26 = nameProvider0.getName(locale22, "53195776", "minuteOfHour");
        java.util.Locale locale27 = null;
        java.lang.String str30 = nameProvider0.getShortName(locale27, "53167803", "100");
        java.util.Locale.Builder builder31 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder34 = builder31.setExtension('x', "jpn");
        java.util.Locale locale35 = java.util.Locale.GERMAN;
        java.util.Locale locale36 = java.util.Locale.GERMAN;
        java.lang.String str37 = locale35.getDisplayCountry(locale36);
        java.util.Locale locale38 = locale35.stripExtensions();
        java.lang.String str39 = locale35.getDisplayName();
        java.util.Locale.Builder builder40 = builder34.setLocale(locale35);
        java.util.Locale.Builder builder43 = builder40.setUnicodeLocaleKeyword("22", "deu");
        java.util.Locale.Builder builder44 = builder40.clear();
        java.util.Locale.Builder builder45 = builder40.clear();
        java.util.Locale locale46 = builder40.build();
        java.lang.String str49 = nameProvider0.getShortName(locale46, "85631", "147585-12-12T14:47:53.692");
        java.util.Locale locale50 = java.util.Locale.ENGLISH;
        java.lang.String str51 = locale50.getDisplayCountry();
        java.util.Locale.setDefault(locale50);
        java.lang.String str53 = locale50.getLanguage();
        java.lang.String str56 = nameProvider0.getShortName(locale50, "53302533", "millisOfSecond");
        org.joda.time.chrono.ISOChronology iSOChronology57 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField58 = iSOChronology57.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField59 = iSOChronology57.yearOfEra();
        org.joda.time.DurationField durationField60 = iSOChronology57.minutes();
        org.joda.time.DurationField durationField61 = iSOChronology57.months();
        org.joda.time.DateTimeField dateTimeField62 = iSOChronology57.era();
        org.joda.time.DurationField durationField63 = iSOChronology57.seconds();
        org.joda.time.DateTimeField dateTimeField64 = iSOChronology57.hourOfDay();
        java.util.Locale locale66 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str67 = dateTimeField64.getAsText(2815741, locale66);
        java.lang.String str68 = locale66.getScript();
        java.util.Set<java.lang.String> strSet69 = locale66.getUnicodeLocaleKeys();
        java.lang.String str72 = nameProvider0.getShortName(locale66, "50038817", "50024035");
        org.junit.Assert.assertNotNull(nameProvider0);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3600000) + "'", int4 == (-3600000));
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2022 + "'", int6 == 2022);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "ko");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8 + "'", int9 == 8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3600000) + "'", int17 == (-3600000));
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 20 + "'", int20 == 20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "2022" + "'", str23, "2022");
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "de");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "de");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "de");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "\ub3c5\uc77c\uc5b4" + "'", str39, "\ub3c5\uc77c\uc5b4");
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "");
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "en");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "en" + "'", str53, "en");
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertNotNull(iSOChronology57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(durationField60);
        org.junit.Assert.assertNotNull(durationField61);
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertNotNull(durationField63);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "2815741" + "'", str67, "2815741");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertNotNull(strSet69);
        org.junit.Assert.assertNull(str72);
    }

    @Test
    public void test11398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11398");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.hourOfHalfday();
        java.lang.String str2 = iSOChronology0.toString();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.era();
        org.joda.time.DurationField durationField4 = iSOChronology0.centuries();
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        long long8 = iSOChronology0.add(readablePeriod5, (long) 2022, (int) (byte) 100);
        org.joda.time.DateTimeZone dateTimeZone9 = iSOChronology0.getZone();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology0.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology0.dayOfYear();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology0.clockhourOfHalfday();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ISOChronology[-01:00]" + "'", str2, "ISOChronology[-01:00]");
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 2022L + "'", long8 == 2022L);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
    }

    @Test
    public void test11399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11399");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        int int5 = localDateTime4.getWeekyear();
        org.joda.time.LocalDateTime.Property property6 = localDateTime4.minuteOfHour();
        org.joda.time.chrono.ISOChronology iSOChronology7 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField8 = iSOChronology7.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField9 = iSOChronology7.centuryOfEra();
        org.joda.time.DurationField durationField10 = iSOChronology7.seconds();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology7.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology7.hourOfHalfday();
        java.util.TimeZone timeZone13 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forTimeZone(timeZone13);
        int int16 = dateTimeZone14.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime17 = org.joda.time.LocalDateTime.now(dateTimeZone14);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray18 = localDateTime17.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.hourOfDay();
        int int20 = localDateTime17.get(dateTimeFieldType19);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime17.minusWeeks(1);
        long long24 = iSOChronology7.set((org.joda.time.ReadablePartial) localDateTime22, (long) 0);
        boolean boolean25 = localDateTime4.isAfter((org.joda.time.ReadablePartial) localDateTime22);
        org.joda.time.ReadableDuration readableDuration26 = null;
        org.joda.time.LocalDateTime localDateTime28 = localDateTime4.withDurationAdded(readableDuration26, 53195994);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.plusYears(49853);
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.LocalDateTime localDateTime33 = localDateTime28.withPeriodAdded(readablePeriod31, 944);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-3600000) + "'", int3 == (-3600000));
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2022 + "'", int5 == 2022);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(iSOChronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3600000) + "'", int16 == (-3600000));
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray18);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
// flaky:         org.junit.Assert.assertTrue("'" + int20 + "' != '" + 13 + "'", int20 == 13);
        org.junit.Assert.assertNotNull(localDateTime22);
// flaky:         org.junit.Assert.assertTrue("'" + long24 + "' != '" + 1644850472135L + "'", long24 == 1644850472135L);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime33);
    }

    @Test
    public void test11400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11400");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.centuryOfEra();
        java.lang.String str3 = iSOChronology0.toString();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.yearOfEra();
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        int int8 = dateTimeZone6.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime9 = org.joda.time.LocalDateTime.now(dateTimeZone6);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.DateTime dateTime11 = localDateTime9.toDateTime(readableInstant10);
        org.joda.time.Chronology chronology12 = dateTime11.getChronology();
        org.joda.time.DurationField durationField13 = chronology12.hours();
        org.joda.time.DurationField durationField14 = chronology12.months();
        org.joda.time.DateTimeField dateTimeField15 = chronology12.dayOfYear();
        java.util.TimeZone timeZone16 = null;
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forTimeZone(timeZone16);
        int int19 = dateTimeZone17.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime20 = org.joda.time.LocalDateTime.now(dateTimeZone17);
        int[] intArray23 = new int[] { (short) 0, (short) 0 };
        int int24 = dateTimeField15.getMinimumValue((org.joda.time.ReadablePartial) localDateTime20, intArray23);
        java.lang.String str26 = dateTimeField15.getAsShortText((long) 53166088);
        java.util.TimeZone timeZone27 = null;
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forTimeZone(timeZone27);
        int int30 = dateTimeZone28.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime31 = org.joda.time.LocalDateTime.now(dateTimeZone28);
        int int32 = localDateTime31.getWeekyear();
        org.joda.time.DurationFieldType durationFieldType33 = org.joda.time.DurationFieldType.days();
        org.joda.time.LocalDateTime localDateTime35 = localDateTime31.withFieldAdded(durationFieldType33, 53166088);
        java.util.Locale locale36 = java.util.Locale.ROOT;
        java.lang.String str37 = dateTimeField15.getAsShortText((org.joda.time.ReadablePartial) localDateTime35, locale36);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter38 = null;
        java.lang.String str39 = localDateTime35.toString(dateTimeFormatter38);
        boolean boolean40 = iSOChronology0.equals((java.lang.Object) str39);
        org.joda.time.DateTimeField dateTimeField41 = iSOChronology0.centuryOfEra();
        org.joda.time.DurationField durationField42 = iSOChronology0.weekyears();
        long long45 = durationField42.getValueAsLong(2744400L, 1644850305899L);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "ISOChronology[-01:00]" + "'", str3, "ISOChronology[-01:00]");
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3600000) + "'", int8 == (-3600000));
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3600000) + "'", int19 == (-3600000));
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[0, 0]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "1" + "'", str26, "1");
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-3600000) + "'", int30 == (-3600000));
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2022 + "'", int32 == 2022);
        org.junit.Assert.assertNotNull(durationFieldType33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "346" + "'", str37, "346");
// flaky:         org.junit.Assert.assertEquals("'" + str39 + "' != '" + "147585-12-12T13:54:32.169" + "'", str39, "147585-12-12T13:54:32.169");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
    }

    @Test
    public void test11401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11401");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.yearOfEra();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.hourOfDay();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology0.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField6 = iSOChronology0.dayOfWeek();
        org.joda.time.DurationField durationField7 = iSOChronology0.eras();
        org.joda.time.DateTimeField dateTimeField8 = iSOChronology0.minuteOfDay();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
    }

    @Test
    public void test11402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11402");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DurationFieldType durationFieldType1 = dateTimeFieldType0.getDurationType();
        org.joda.time.chrono.ISOChronology iSOChronology2 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology2.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology2.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology2.weekyearOfCentury();
        org.joda.time.DurationField durationField6 = iSOChronology2.years();
        boolean boolean7 = dateTimeFieldType0.isSupported((org.joda.time.Chronology) iSOChronology2);
        org.joda.time.DateTimeField dateTimeField8 = iSOChronology2.yearOfCentury();
        long long10 = dateTimeField8.roundHalfEven((long) (short) 10);
        java.lang.String str11 = dateTimeField8.toString();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(durationFieldType1);
        org.junit.Assert.assertNotNull(iSOChronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 3600000L + "'", long10 == 3600000L);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "DateTimeField[yearOfCentury]" + "'", str11, "DateTimeField[yearOfCentury]");
    }

    @Test
    public void test11403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11403");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.centuryOfEra();
        org.joda.time.DurationField durationField3 = iSOChronology0.seconds();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology0.hourOfHalfday();
        long long9 = iSOChronology0.add((long) (short) 100, 1644849973425L, 2720);
        java.lang.String str10 = iSOChronology0.toString();
        org.joda.time.DateTimeZone dateTimeZone11 = iSOChronology0.getZone();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology0.secondOfMinute();
        org.joda.time.DurationField durationField13 = iSOChronology0.millis();
        long long14 = durationField13.getUnitMillis();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 4473991927716100L + "'", long9 == 4473991927716100L);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "ISOChronology[-01:00]" + "'", str10, "ISOChronology[-01:00]");
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1L + "'", long14 == 1L);
    }

    @Test
    public void test11404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11404");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.minuteOfDay();
        org.joda.time.DurationField durationField2 = iSOChronology0.hours();
        org.joda.time.DurationField durationField3 = iSOChronology0.weeks();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.dayOfMonth();
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        int int8 = dateTimeZone6.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime9 = org.joda.time.LocalDateTime.now(dateTimeZone6);
        int int10 = localDateTime9.getWeekyear();
        org.joda.time.LocalDateTime.Property property11 = localDateTime9.minuteOfHour();
        org.joda.time.LocalDateTime.Property property12 = localDateTime9.dayOfYear();
        java.util.TimeZone timeZone13 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forTimeZone(timeZone13);
        int int16 = dateTimeZone14.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime17 = org.joda.time.LocalDateTime.now(dateTimeZone14);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray18 = localDateTime17.getFieldTypes();
        int int19 = property12.compareTo((org.joda.time.ReadablePartial) localDateTime17);
        int int20 = localDateTime17.getYearOfCentury();
        org.joda.time.LocalDateTime.Property property21 = localDateTime17.millisOfDay();
        org.joda.time.LocalDateTime localDateTime22 = property21.roundHalfEvenCopy();
        int int23 = localDateTime22.getHourOfDay();
        int int24 = localDateTime22.getWeekyear();
        org.joda.time.chrono.ISOChronology iSOChronology26 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField27 = iSOChronology26.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField28 = iSOChronology26.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField29 = iSOChronology26.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField30 = iSOChronology26.hourOfDay();
        org.joda.time.Chronology chronology31 = iSOChronology26.withUTC();
        org.joda.time.DateTimeField dateTimeField32 = iSOChronology26.monthOfYear();
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology26);
        org.joda.time.DateTimeField dateTimeField34 = iSOChronology26.secondOfDay();
        org.joda.time.LocalDateTime localDateTime35 = org.joda.time.LocalDateTime.now();
        java.util.TimeZone timeZone36 = null;
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forTimeZone(timeZone36);
        int int39 = dateTimeZone37.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime40 = org.joda.time.LocalDateTime.now(dateTimeZone37);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray41 = localDateTime40.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = org.joda.time.DateTimeFieldType.hourOfDay();
        int int43 = localDateTime40.get(dateTimeFieldType42);
        org.joda.time.LocalDateTime.Property property44 = localDateTime40.dayOfWeek();
        boolean boolean45 = localDateTime35.isEqual((org.joda.time.ReadablePartial) localDateTime40);
        org.joda.time.LocalDateTime.Property property46 = localDateTime40.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime47 = property46.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime localDateTime49 = localDateTime47.withSecondOfMinute((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime51 = localDateTime47.plusMonths(23);
        int[] intArray53 = iSOChronology26.get((org.joda.time.ReadablePartial) localDateTime51, 89243185L);
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray55 = dateTimeField4.add((org.joda.time.ReadablePartial) localDateTime22, 53470700, intArray53, 669);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 53470700");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3600000) + "'", int8 == (-3600000));
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2022 + "'", int10 == 2022);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3600000) + "'", int16 == (-3600000));
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 22 + "'", int20 == 22);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(localDateTime22);
// flaky:         org.junit.Assert.assertTrue("'" + int23 + "' != '" + 13 + "'", int23 == 13);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2022 + "'", int24 == 2022);
        org.junit.Assert.assertNotNull(iSOChronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-3600000) + "'", int39 == (-3600000));
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray41);
        org.junit.Assert.assertNotNull(dateTimeFieldType42);
// flaky:         org.junit.Assert.assertTrue("'" + int43 + "' != '" + 13 + "'", int43 == 13);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[1970, 1, 1, 85643185]");
    }

    @Test
    public void test11405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11405");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.hourOfHalfday();
        java.lang.String str2 = iSOChronology0.toString();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.era();
        java.util.TimeZone timeZone4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forTimeZone(timeZone4);
        int int7 = dateTimeZone5.getOffset(100L);
        java.util.TimeZone timeZone8 = dateTimeZone5.toTimeZone();
        java.lang.String str9 = dateTimeZone5.toString();
        org.joda.time.Chronology chronology10 = iSOChronology0.withZone(dateTimeZone5);
        java.util.TimeZone timeZone11 = dateTimeZone5.toTimeZone();
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime(dateTimeZone5);
        java.util.TimeZone timeZone13 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forTimeZone(timeZone13);
        int int16 = dateTimeZone14.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime17 = org.joda.time.LocalDateTime.now(dateTimeZone14);
        int int18 = localDateTime17.getWeekyear();
        org.joda.time.LocalDateTime.Property property19 = localDateTime17.millisOfDay();
        int int20 = property19.get();
        org.joda.time.LocalDateTime localDateTime21 = property19.roundCeilingCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = property19.getFieldType();
        org.joda.time.LocalDateTime.Property property23 = localDateTime12.property(dateTimeFieldType22);
        org.joda.time.LocalDateTime.Property property24 = localDateTime12.dayOfWeek();
        java.lang.String str25 = property24.getAsText();
        java.lang.String str26 = property24.getAsText();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ISOChronology[-01:00]" + "'", str2, "ISOChronology[-01:00]");
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3600000) + "'", int7 == (-3600000));
        org.junit.Assert.assertNotNull(timeZone8);
        org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "GMT-01:00");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "-01:00" + "'", str9, "-01:00");
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(timeZone11);
        org.junit.Assert.assertEquals(timeZone11.getDisplayName(), "GMT-01:00");
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3600000) + "'", int16 == (-3600000));
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2022 + "'", int18 == 2022);
        org.junit.Assert.assertNotNull(property19);
// flaky:         org.junit.Assert.assertTrue("'" + int20 + "' != '" + 50072434 + "'", int20 == 50072434);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Monday" + "'", str25, "Monday");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Monday" + "'", str26, "Monday");
    }

    @Test
    public void test11406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11406");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.centuryOfEra();
        org.joda.time.DurationField durationField3 = iSOChronology0.seconds();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.clockhourOfDay();
        org.joda.time.Chronology chronology5 = iSOChronology0.withUTC();
        org.joda.time.DateTimeField dateTimeField6 = iSOChronology0.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField7 = iSOChronology0.era();
        org.joda.time.DateTimeField dateTimeField8 = iSOChronology0.yearOfEra();
        java.util.Locale locale11 = new java.util.Locale("0052-02-21T13:50:25.210", "49814996");
        int int12 = dateTimeField8.getMaximumShortTextLength(locale11);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertEquals(locale11.toString(), "0052-02-21t13:50:25.210_49814996");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 9 + "'", int12 == 9);
    }

    @Test
    public void test11407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11407");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray5 = localDateTime4.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.hourOfDay();
        int int7 = localDateTime4.get(dateTimeFieldType6);
        org.joda.time.LocalDateTime.Property property8 = localDateTime4.dayOfWeek();
        org.joda.time.LocalDateTime.Property property9 = localDateTime4.weekOfWeekyear();
        java.util.TimeZone timeZone10 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        int int13 = dateTimeZone11.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime14 = org.joda.time.LocalDateTime.now(dateTimeZone11);
        int int15 = localDateTime14.getWeekyear();
        org.joda.time.LocalDateTime.Property property16 = localDateTime14.minuteOfHour();
        int int17 = localDateTime14.getHourOfDay();
        org.joda.time.LocalDateTime.Property property18 = localDateTime14.dayOfWeek();
        java.util.TimeZone timeZone19 = null;
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forTimeZone(timeZone19);
        int int22 = dateTimeZone20.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime23 = org.joda.time.LocalDateTime.now(dateTimeZone20);
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.DateTime dateTime25 = localDateTime23.toDateTime(readableInstant24);
        java.util.TimeZone timeZone26 = null;
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forTimeZone(timeZone26);
        int int29 = dateTimeZone27.getOffset(100L);
        org.joda.time.DateTime dateTime30 = localDateTime23.toDateTime(dateTimeZone27);
        org.joda.time.LocalDateTime.Property property31 = localDateTime23.monthOfYear();
        java.util.TimeZone timeZone32 = null;
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forTimeZone(timeZone32);
        int int35 = dateTimeZone33.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime36 = org.joda.time.LocalDateTime.now(dateTimeZone33);
        int int37 = localDateTime36.getWeekyear();
        org.joda.time.LocalDateTime.Property property38 = localDateTime36.millisOfDay();
        java.util.TimeZone timeZone39 = null;
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forTimeZone(timeZone39);
        int int42 = dateTimeZone40.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime43 = org.joda.time.LocalDateTime.now(dateTimeZone40);
        org.joda.time.ReadableInstant readableInstant44 = null;
        org.joda.time.DateTime dateTime45 = localDateTime43.toDateTime(readableInstant44);
        java.util.TimeZone timeZone46 = null;
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.forTimeZone(timeZone46);
        int int49 = dateTimeZone47.getOffset(100L);
        org.joda.time.DateTime dateTime50 = localDateTime43.toDateTime(dateTimeZone47);
        int int51 = property38.compareTo((org.joda.time.ReadableInstant) dateTime50);
        org.joda.time.LocalDateTime localDateTime52 = property38.roundHalfEvenCopy();
        boolean boolean53 = localDateTime23.isAfter((org.joda.time.ReadablePartial) localDateTime52);
        org.joda.time.ReadableDuration readableDuration54 = null;
        org.joda.time.LocalDateTime localDateTime55 = localDateTime52.minus(readableDuration54);
        org.joda.time.LocalDateTime localDateTime56 = localDateTime14.withFields((org.joda.time.ReadablePartial) localDateTime52);
        int int57 = localDateTime4.compareTo((org.joda.time.ReadablePartial) localDateTime56);
        int[] intArray58 = localDateTime4.getValues();
        org.joda.time.ReadablePeriod readablePeriod59 = null;
        org.joda.time.LocalDateTime localDateTime60 = localDateTime4.plus(readablePeriod59);
        int int61 = localDateTime60.getWeekyear();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-3600000) + "'", int3 == (-3600000));
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray5);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 13 + "'", int7 == 13);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3600000) + "'", int13 == (-3600000));
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2022 + "'", int15 == 2022);
        org.junit.Assert.assertNotNull(property16);
// flaky:         org.junit.Assert.assertTrue("'" + int17 + "' != '" + 13 + "'", int17 == 13);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-3600000) + "'", int22 == (-3600000));
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3600000) + "'", int29 == (-3600000));
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3600000) + "'", int35 == (-3600000));
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2022 + "'", int37 == 2022);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-3600000) + "'", int42 == (-3600000));
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-3600000) + "'", int49 == (-3600000));
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(intArray58);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[2022, 2, 21, 50072495]");
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 2022 + "'", int61 == 2022);
    }

    @Test
    public void test11408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11408");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.yearOfEra();
        org.joda.time.DurationField durationField3 = iSOChronology0.minutes();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.weekyear();
        org.joda.time.DurationField durationField5 = iSOChronology0.centuries();
        org.joda.time.DateTimeField dateTimeField6 = iSOChronology0.centuryOfEra();
        org.joda.time.DurationField durationField7 = iSOChronology0.minutes();
        org.joda.time.DateTimeField dateTimeField8 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField9 = iSOChronology0.centuryOfEra();
        org.joda.time.DurationField durationField10 = iSOChronology0.months();
        org.joda.time.DurationField durationField11 = iSOChronology0.years();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology0.secondOfDay();
        org.joda.time.DateTimeField dateTimeField13 = iSOChronology0.monthOfYear();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
    }

    @Test
    public void test11409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11409");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.hourOfHalfday();
        java.util.TimeZone timeZone3 = null;
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forTimeZone(timeZone3);
        int int6 = dateTimeZone4.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime7 = org.joda.time.LocalDateTime.now(dateTimeZone4);
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.DateTime dateTime9 = localDateTime7.toDateTime(readableInstant8);
        java.util.TimeZone timeZone10 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        int int13 = dateTimeZone11.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime14 = org.joda.time.LocalDateTime.now(dateTimeZone11);
        org.joda.time.LocalDateTime localDateTime15 = org.joda.time.LocalDateTime.now(dateTimeZone11);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.minusYears(2022);
        org.joda.time.LocalDateTime.Property property18 = localDateTime17.era();
        int int19 = localDateTime7.compareTo((org.joda.time.ReadablePartial) localDateTime17);
        org.joda.time.chrono.ISOChronology iSOChronology20 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField21 = iSOChronology20.hourOfHalfday();
        java.lang.String str22 = iSOChronology20.toString();
        java.util.TimeZone timeZone23 = null;
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forTimeZone(timeZone23);
        int int26 = dateTimeZone24.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime27 = org.joda.time.LocalDateTime.now(dateTimeZone24);
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.DateTime dateTime29 = localDateTime27.toDateTime(readableInstant28);
        org.joda.time.Chronology chronology30 = dateTime29.getChronology();
        org.joda.time.DurationField durationField31 = chronology30.hours();
        org.joda.time.DurationField durationField32 = chronology30.months();
        org.joda.time.DateTimeField dateTimeField33 = chronology30.dayOfYear();
        java.util.TimeZone timeZone34 = null;
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forTimeZone(timeZone34);
        int int37 = dateTimeZone35.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime38 = org.joda.time.LocalDateTime.now(dateTimeZone35);
        int[] intArray41 = new int[] { (short) 0, (short) 0 };
        int int42 = dateTimeField33.getMinimumValue((org.joda.time.ReadablePartial) localDateTime38, intArray41);
        java.lang.String str44 = dateTimeField33.getAsShortText((long) 53166088);
        java.util.TimeZone timeZone45 = null;
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.forTimeZone(timeZone45);
        int int48 = dateTimeZone46.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime49 = org.joda.time.LocalDateTime.now(dateTimeZone46);
        int int50 = localDateTime49.getWeekyear();
        org.joda.time.DurationFieldType durationFieldType51 = org.joda.time.DurationFieldType.days();
        org.joda.time.LocalDateTime localDateTime53 = localDateTime49.withFieldAdded(durationFieldType51, 53166088);
        java.util.Locale locale54 = java.util.Locale.ROOT;
        java.lang.String str55 = dateTimeField33.getAsShortText((org.joda.time.ReadablePartial) localDateTime53, locale54);
        java.util.TimeZone timeZone56 = null;
        org.joda.time.DateTimeZone dateTimeZone57 = org.joda.time.DateTimeZone.forTimeZone(timeZone56);
        int int59 = dateTimeZone57.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime60 = org.joda.time.LocalDateTime.now(dateTimeZone57);
        int int61 = localDateTime60.getWeekyear();
        boolean boolean62 = localDateTime53.isEqual((org.joda.time.ReadablePartial) localDateTime60);
        int[] intArray64 = iSOChronology20.get((org.joda.time.ReadablePartial) localDateTime60, (long) 53166088);
        iSOChronology0.validate((org.joda.time.ReadablePartial) localDateTime7, intArray64);
        org.joda.time.DurationField durationField66 = iSOChronology0.minutes();
        org.joda.time.DurationField durationField67 = iSOChronology0.weeks();
        org.joda.time.DateTimeField dateTimeField68 = iSOChronology0.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField69 = iSOChronology0.halfdayOfDay();
        org.joda.time.DurationField durationField70 = iSOChronology0.millis();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3600000) + "'", int6 == (-3600000));
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3600000) + "'", int13 == (-3600000));
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(iSOChronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "ISOChronology[-01:00]" + "'", str22, "ISOChronology[-01:00]");
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3600000) + "'", int26 == (-3600000));
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3600000) + "'", int37 == (-3600000));
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[0, 0]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "1" + "'", str44, "1");
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-3600000) + "'", int48 == (-3600000));
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2022 + "'", int50 == 2022);
        org.junit.Assert.assertNotNull(durationFieldType51);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "346" + "'", str55, "346");
        org.junit.Assert.assertNotNull(dateTimeZone57);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-3600000) + "'", int59 == (-3600000));
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 2022 + "'", int61 == 2022);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[1970, 1, 1, 49566088]");
        org.junit.Assert.assertNotNull(durationField66);
        org.junit.Assert.assertNotNull(durationField67);
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertNotNull(dateTimeField69);
        org.junit.Assert.assertNotNull(durationField70);
    }

    @Test
    public void test11410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11410");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.yearOfEra();
        org.joda.time.DurationField durationField3 = iSOChronology0.minutes();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.weekyear();
        org.joda.time.DurationField durationField5 = iSOChronology0.centuries();
        org.joda.time.DateTimeField dateTimeField6 = iSOChronology0.centuryOfEra();
        org.joda.time.DurationField durationField7 = iSOChronology0.minutes();
        org.joda.time.DateTimeField dateTimeField8 = iSOChronology0.weekyear();
        java.util.TimeZone timeZone9 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        int int12 = dateTimeZone10.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime13 = org.joda.time.LocalDateTime.now(dateTimeZone10);
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.DateTime dateTime15 = localDateTime13.toDateTime(readableInstant14);
        org.joda.time.Chronology chronology16 = dateTime15.getChronology();
        org.joda.time.DurationField durationField17 = chronology16.hours();
        org.joda.time.DurationField durationField18 = chronology16.months();
        org.joda.time.DateTimeField dateTimeField19 = chronology16.dayOfYear();
        java.util.TimeZone timeZone20 = null;
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forTimeZone(timeZone20);
        int int23 = dateTimeZone21.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime24 = org.joda.time.LocalDateTime.now(dateTimeZone21);
        int[] intArray27 = new int[] { (short) 0, (short) 0 };
        int int28 = dateTimeField19.getMinimumValue((org.joda.time.ReadablePartial) localDateTime24, intArray27);
        int int30 = dateTimeField19.getMinimumValue((long) 100);
        java.util.TimeZone timeZone31 = null;
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forTimeZone(timeZone31);
        int int34 = dateTimeZone32.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime35 = org.joda.time.LocalDateTime.now(dateTimeZone32);
        int int36 = localDateTime35.getWeekyear();
        org.joda.time.LocalDateTime.Property property37 = localDateTime35.minuteOfHour();
        int int38 = dateTimeField19.getMaximumValue((org.joda.time.ReadablePartial) localDateTime35);
        long long40 = iSOChronology0.set((org.joda.time.ReadablePartial) localDateTime35, 4473991927716100L);
        org.joda.time.LocalDateTime.Property property41 = localDateTime35.secondOfMinute();
        org.joda.time.LocalDateTime.Property property42 = localDateTime35.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime44 = localDateTime35.plusDays(2798859);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3600000) + "'", int12 == (-3600000));
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-3600000) + "'", int23 == (-3600000));
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[0, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3600000) + "'", int34 == (-3600000));
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2022 + "'", int36 == 2022);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 365 + "'", int38 == 365);
// flaky:         org.junit.Assert.assertTrue("'" + long40 + "' != '" + 1645455272597L + "'", long40 == 1645455272597L);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(localDateTime44);
    }

    @Test
    public void test11411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11411");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.hourOfHalfday();
        java.lang.String str2 = iSOChronology0.toString();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.era();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.yearOfEra();
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology0.weekOfWeekyear();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ISOChronology[-01:00]" + "'", str2, "ISOChronology[-01:00]");
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
    }

    @Test
    public void test11412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11412");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.centuryOfEra();
        org.joda.time.DurationField durationField3 = iSOChronology0.centuries();
        org.joda.time.DurationField durationField4 = iSOChronology0.centuries();
        org.joda.time.DurationField durationField5 = iSOChronology0.halfdays();
        org.joda.time.Chronology chronology6 = iSOChronology0.withUTC();
        org.joda.time.DurationField durationField7 = iSOChronology0.weeks();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
    }

    @Test
    public void test11413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11413");
        java.util.Locale locale0 = java.util.Locale.GERMAN;
        java.util.Locale locale1 = java.util.Locale.GERMAN;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        java.lang.String str3 = locale1.getDisplayCountry(locale2);
        java.util.Locale locale4 = locale1.stripExtensions();
        java.lang.String str5 = locale0.getDisplayCountry(locale1);
        org.joda.time.chrono.ISOChronology iSOChronology6 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField7 = iSOChronology6.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField8 = iSOChronology6.yearOfEra();
        org.joda.time.DurationField durationField9 = iSOChronology6.minutes();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology6.weekyear();
        org.joda.time.DurationField durationField11 = iSOChronology6.centuries();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology6.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField13 = iSOChronology6.hourOfHalfday();
        long long15 = dateTimeField13.roundHalfCeiling((long) 20);
        java.util.Locale.Builder builder17 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder20 = builder17.setExtension('x', "jpn");
        java.util.Locale locale21 = java.util.Locale.GERMAN;
        java.util.Locale locale22 = java.util.Locale.GERMAN;
        java.lang.String str23 = locale21.getDisplayCountry(locale22);
        java.util.Locale locale24 = locale21.stripExtensions();
        java.lang.String str25 = locale21.getDisplayName();
        java.util.Locale.Builder builder26 = builder20.setLocale(locale21);
        java.util.Locale locale27 = builder26.build();
        java.lang.String str28 = locale27.getScript();
        java.lang.String str29 = dateTimeField13.getAsText((long) 20, locale27);
        java.lang.String str30 = locale0.getDisplayScript(locale27);
        boolean boolean31 = locale27.hasExtensions();
        java.lang.String str32 = locale27.getDisplayLanguage();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "de");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "de");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "de");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(iSOChronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "de");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "de");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "de");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "German" + "'", str25, "German");
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "de");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "11" + "'", str29, "11");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "German" + "'", str32, "German");
    }

    @Test
    public void test11414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11414");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime5 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.withMillisOfSecond((int) '4');
        org.joda.time.LocalDateTime localDateTime9 = localDateTime5.plusSeconds((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.plusMonths(8);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.LocalDateTime.Property property13 = localDateTime11.property(dateTimeFieldType12);
        org.joda.time.Chronology chronology14 = localDateTime11.getChronology();
        org.joda.time.chrono.ISOChronology iSOChronology15 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology15.hourOfHalfday();
        java.lang.String str17 = iSOChronology15.toString();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology15.era();
        org.joda.time.DurationField durationField19 = iSOChronology15.centuries();
        org.joda.time.DurationField durationField20 = iSOChronology15.weeks();
        org.joda.time.DateTimeField dateTimeField21 = iSOChronology15.dayOfYear();
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology15);
        int[] intArray23 = localDateTime22.getValues();
        org.joda.time.LocalDateTime.Property property24 = localDateTime22.dayOfMonth();
        int int25 = localDateTime22.getYearOfCentury();
        int int26 = localDateTime11.compareTo((org.joda.time.ReadablePartial) localDateTime22);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-3600000) + "'", int3 == (-3600000));
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(iSOChronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "ISOChronology[-01:00]" + "'", str17, "ISOChronology[-01:00]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(intArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[2022, 2, 21, 50072755]");
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 22 + "'", int25 == 22);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
    }

    @Test
    public void test11415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11415");
        org.joda.time.tz.NameProvider nameProvider0 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.TimeZone timeZone1 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        int int4 = dateTimeZone2.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime5 = org.joda.time.LocalDateTime.now(dateTimeZone2);
        int int6 = localDateTime5.getWeekyear();
        org.joda.time.LocalDateTime.Property property7 = localDateTime5.millisOfDay();
        java.util.Locale locale8 = java.util.Locale.KOREAN;
        int int9 = property7.getMaximumTextLength(locale8);
        java.lang.String str10 = locale8.getVariant();
        java.lang.String str13 = nameProvider0.getName(locale8, "2022-02-21T14:46:31.592", "");
        org.joda.time.DateTimeZone.setNameProvider(nameProvider0);
        org.joda.time.DateTimeZone.setNameProvider(nameProvider0);
        java.util.TimeZone timeZone16 = null;
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forTimeZone(timeZone16);
        int int19 = dateTimeZone17.getOffset(100L);
        java.util.TimeZone timeZone21 = null;
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forTimeZone(timeZone21);
        int int24 = dateTimeZone22.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime25 = org.joda.time.LocalDateTime.now(dateTimeZone22);
        int int26 = localDateTime25.getWeekyear();
        org.joda.time.LocalDateTime.Property property27 = localDateTime25.millisOfDay();
        java.util.Locale locale28 = java.util.Locale.GERMAN;
        java.util.Locale locale29 = java.util.Locale.GERMAN;
        java.lang.String str30 = locale28.getDisplayCountry(locale29);
        java.util.Locale locale31 = locale28.stripExtensions();
        int int32 = property27.getMaximumShortTextLength(locale28);
        java.lang.String str33 = locale28.getDisplayScript();
        java.lang.String str34 = dateTimeZone17.getShortName((long) 0, locale28);
        java.lang.String str35 = locale28.getVariant();
        java.lang.String str38 = nameProvider0.getShortName(locale28, "2848516", "2833411");
        org.joda.time.chrono.ISOChronology iSOChronology39 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeZone dateTimeZone40 = iSOChronology39.getZone();
        boolean boolean41 = dateTimeZone40.isFixed();
        java.util.TimeZone timeZone43 = null;
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forTimeZone(timeZone43);
        int int46 = dateTimeZone44.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime47 = org.joda.time.LocalDateTime.now(dateTimeZone44);
        org.joda.time.ReadableInstant readableInstant48 = null;
        org.joda.time.DateTime dateTime49 = localDateTime47.toDateTime(readableInstant48);
        org.joda.time.Chronology chronology50 = dateTime49.getChronology();
        org.joda.time.DurationField durationField51 = chronology50.hours();
        org.joda.time.DurationField durationField52 = chronology50.months();
        org.joda.time.DateTimeField dateTimeField53 = chronology50.dayOfYear();
        java.util.TimeZone timeZone54 = null;
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.forTimeZone(timeZone54);
        int int57 = dateTimeZone55.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime58 = org.joda.time.LocalDateTime.now(dateTimeZone55);
        int[] intArray61 = new int[] { (short) 0, (short) 0 };
        int int62 = dateTimeField53.getMinimumValue((org.joda.time.ReadablePartial) localDateTime58, intArray61);
        java.lang.String str64 = dateTimeField53.getAsShortText((long) 53166088);
        java.util.Locale locale66 = java.util.Locale.JAPANESE;
        java.lang.String str67 = locale66.getDisplayLanguage();
        java.util.Locale locale68 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet69 = locale68.getExtensionKeys();
        java.lang.String str70 = locale66.getDisplayLanguage(locale68);
        java.lang.String str71 = dateTimeField53.getAsText(0L, locale68);
        java.lang.String str72 = dateTimeZone40.getShortName(4595195457998052L, locale68);
        java.lang.String str75 = nameProvider0.getName(locale68, "53304530", "2");
        org.joda.time.DateTimeZone.setNameProvider(nameProvider0);
        org.junit.Assert.assertNotNull(nameProvider0);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3600000) + "'", int4 == (-3600000));
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2022 + "'", int6 == 2022);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "ko");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8 + "'", int9 == 8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3600000) + "'", int19 == (-3600000));
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3600000) + "'", int24 == (-3600000));
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2022 + "'", int26 == 2022);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "de");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "de");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "de");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 8 + "'", int32 == 8);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "-01:00" + "'", str34, "-01:00");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNotNull(iSOChronology39);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-3600000) + "'", int46 == (-3600000));
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(durationField51);
        org.junit.Assert.assertNotNull(durationField52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(dateTimeZone55);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-3600000) + "'", int57 == (-3600000));
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[0, 0]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "1" + "'", str64, "1");
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "Japanese" + "'", str67, "Japanese");
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "\uc77c\ubcf8\uc5b4" + "'", str70, "\uc77c\ubcf8\uc5b4");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "365" + "'", str71, "365");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "-01:00" + "'", str72, "-01:00");
        org.junit.Assert.assertNull(str75);
    }

    @Test
    public void test11416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11416");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.DateTime dateTime6 = localDateTime4.toDateTime(readableInstant5);
        java.util.TimeZone timeZone7 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forTimeZone(timeZone7);
        int int10 = dateTimeZone8.getOffset(100L);
        org.joda.time.DateTime dateTime11 = localDateTime4.toDateTime(dateTimeZone8);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime4.plusMinutes((-1));
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.hourOfDay();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime13.plusSeconds((int) (byte) -1);
        org.joda.time.LocalDateTime.Property property17 = localDateTime16.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime18 = property17.roundHalfEvenCopy();
        org.joda.time.LocalDateTime.Property property19 = localDateTime18.monthOfYear();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-3600000) + "'", int3 == (-3600000));
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3600000) + "'", int10 == (-3600000));
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(property19);
    }

    @Test
    public void test11417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11417");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.centuryOfEra();
        org.joda.time.DurationField durationField3 = iSOChronology0.centuries();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.millisOfDay();
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology0.hourOfDay();
        org.joda.time.DateTimeField dateTimeField6 = iSOChronology0.year();
        org.joda.time.DateTimeField dateTimeField7 = iSOChronology0.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField8 = iSOChronology0.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField9 = iSOChronology0.secondOfMinute();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
    }

    @Test
    public void test11418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11418");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet1 = locale0.getExtensionKeys();
        java.util.Iterator<java.lang.Character> charItor2 = charSet1.iterator();
        java.util.ArrayList[] arrayListArray4 = new java.util.ArrayList[0];
        @SuppressWarnings("unchecked")
        java.util.ArrayList<java.util.Locale.LanguageRange>[] languageRangeListArray5 = (java.util.ArrayList<java.util.Locale.LanguageRange>[]) arrayListArray4;
        java.util.ArrayList<java.util.Locale.LanguageRange>[] languageRangeListArray6 = charSet1.toArray((java.util.ArrayList<java.util.Locale.LanguageRange>[]) arrayListArray4);
        java.util.TimeZone timeZone7 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forTimeZone(timeZone7);
        int int10 = dateTimeZone8.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now(dateTimeZone8);
        int int12 = localDateTime11.getWeekyear();
        org.joda.time.LocalDateTime.Property property13 = localDateTime11.millisOfDay();
        java.util.TimeZone timeZone14 = null;
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forTimeZone(timeZone14);
        int int17 = dateTimeZone15.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime18 = org.joda.time.LocalDateTime.now(dateTimeZone15);
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.DateTime dateTime20 = localDateTime18.toDateTime(readableInstant19);
        java.util.TimeZone timeZone21 = null;
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forTimeZone(timeZone21);
        int int24 = dateTimeZone22.getOffset(100L);
        org.joda.time.DateTime dateTime25 = localDateTime18.toDateTime(dateTimeZone22);
        int int26 = property13.compareTo((org.joda.time.ReadableInstant) dateTime25);
        boolean boolean27 = charSet1.equals((java.lang.Object) dateTime25);
        org.joda.time.DateTimeZone dateTimeZone28 = dateTime25.getZone();
        org.joda.time.chrono.ISOChronology iSOChronology29 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField30 = iSOChronology29.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField31 = iSOChronology29.centuryOfEra();
        int int34 = dateTimeField31.getDifference((long) 'x', (long) (short) 10);
        int int36 = dateTimeField31.getMaximumValue(53176349L);
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = dateTimeField31.getType();
        int int38 = dateTime25.get(dateTimeFieldType37);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet1);
        org.junit.Assert.assertNotNull(charItor2);
        org.junit.Assert.assertNotNull(arrayListArray4);
        org.junit.Assert.assertNotNull(languageRangeListArray5);
        org.junit.Assert.assertNotNull(languageRangeListArray6);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3600000) + "'", int10 == (-3600000));
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2022 + "'", int12 == 2022);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3600000) + "'", int17 == (-3600000));
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3600000) + "'", int24 == (-3600000));
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(iSOChronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2922789 + "'", int36 == 2922789);
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 20 + "'", int38 == 20);
    }

    @Test
    public void test11419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11419");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray5 = localDateTime4.getFieldTypes();
        int int6 = localDateTime4.getWeekyear();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime4.plusYears(2927034);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime4.plusDays(6);
        org.joda.time.LocalDateTime.Property property11 = localDateTime4.year();
        org.joda.time.LocalDateTime localDateTime12 = org.joda.time.LocalDateTime.now();
        java.util.TimeZone timeZone13 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forTimeZone(timeZone13);
        int int16 = dateTimeZone14.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime17 = org.joda.time.LocalDateTime.now(dateTimeZone14);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray18 = localDateTime17.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.hourOfDay();
        int int20 = localDateTime17.get(dateTimeFieldType19);
        org.joda.time.LocalDateTime.Property property21 = localDateTime17.dayOfWeek();
        boolean boolean22 = localDateTime12.isEqual((org.joda.time.ReadablePartial) localDateTime17);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.LocalDateTime localDateTime25 = localDateTime12.withPeriodAdded(readablePeriod23, (int) (short) -1);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.withYear(53189779);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.withYearOfEra(32);
        java.util.TimeZone timeZone30 = null;
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forTimeZone(timeZone30);
        int int33 = dateTimeZone31.getOffset(100L);
        java.util.TimeZone timeZone34 = dateTimeZone31.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forTimeZone(timeZone34);
        java.lang.String str37 = dateTimeZone35.getNameKey((long) '4');
        java.lang.String str39 = dateTimeZone35.getNameKey(1645454784654L);
        org.joda.time.DateTime dateTime40 = localDateTime27.toDateTime(dateTimeZone35);
        org.joda.time.DateTimeZone dateTimeZone41 = dateTime40.getZone();
        java.util.TimeZone timeZone42 = null;
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forTimeZone(timeZone42);
        int int45 = dateTimeZone43.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime46 = org.joda.time.LocalDateTime.now(dateTimeZone43);
        org.joda.time.LocalDateTime localDateTime47 = org.joda.time.LocalDateTime.now(dateTimeZone43);
        org.joda.time.LocalDateTime localDateTime49 = localDateTime47.minusMinutes((int) ' ');
        org.joda.time.LocalDateTime localDateTime51 = localDateTime49.withYearOfCentury((int) (byte) 10);
        java.util.TimeZone timeZone52 = null;
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.forTimeZone(timeZone52);
        int int55 = dateTimeZone53.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime56 = org.joda.time.LocalDateTime.now(dateTimeZone53);
        org.joda.time.LocalDateTime localDateTime57 = org.joda.time.LocalDateTime.now(dateTimeZone53);
        org.joda.time.LocalDateTime localDateTime59 = localDateTime57.withMillisOfSecond((int) '4');
        org.joda.time.LocalDateTime localDateTime60 = localDateTime51.withFields((org.joda.time.ReadablePartial) localDateTime57);
        org.joda.time.DurationFieldType durationFieldType61 = org.joda.time.DurationFieldType.weekyears();
        org.joda.time.LocalDateTime localDateTime63 = localDateTime51.withFieldAdded(durationFieldType61, 4);
        org.joda.time.LocalDateTime.Property property64 = localDateTime51.yearOfCentury();
        org.joda.time.DateTimeFieldType dateTimeFieldType65 = property64.getFieldType();
        org.joda.time.DurationFieldType durationFieldType66 = dateTimeFieldType65.getDurationType();
        boolean boolean67 = dateTime40.isSupported(dateTimeFieldType65);
        int int68 = property11.compareTo((org.joda.time.ReadableInstant) dateTime40);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-3600000) + "'", int3 == (-3600000));
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2022 + "'", int6 == 2022);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3600000) + "'", int16 == (-3600000));
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray18);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
// flaky:         org.junit.Assert.assertTrue("'" + int20 + "' != '" + 13 + "'", int20 == 13);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3600000) + "'", int33 == (-3600000));
        org.junit.Assert.assertNotNull(timeZone34);
        org.junit.Assert.assertEquals(timeZone34.getDisplayName(), "GMT-01:00");
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-3600000) + "'", int45 == (-3600000));
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-3600000) + "'", int55 == (-3600000));
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(durationFieldType61);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertNotNull(dateTimeFieldType65);
        org.junit.Assert.assertNotNull(durationFieldType66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
    }

    @Test
    public void test11420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11420");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.hourOfHalfday();
        java.util.TimeZone timeZone3 = null;
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forTimeZone(timeZone3);
        int int6 = dateTimeZone4.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime7 = org.joda.time.LocalDateTime.now(dateTimeZone4);
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.DateTime dateTime9 = localDateTime7.toDateTime(readableInstant8);
        java.util.TimeZone timeZone10 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        int int13 = dateTimeZone11.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime14 = org.joda.time.LocalDateTime.now(dateTimeZone11);
        org.joda.time.LocalDateTime localDateTime15 = org.joda.time.LocalDateTime.now(dateTimeZone11);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.minusYears(2022);
        org.joda.time.LocalDateTime.Property property18 = localDateTime17.era();
        int int19 = localDateTime7.compareTo((org.joda.time.ReadablePartial) localDateTime17);
        org.joda.time.chrono.ISOChronology iSOChronology20 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField21 = iSOChronology20.hourOfHalfday();
        java.lang.String str22 = iSOChronology20.toString();
        java.util.TimeZone timeZone23 = null;
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forTimeZone(timeZone23);
        int int26 = dateTimeZone24.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime27 = org.joda.time.LocalDateTime.now(dateTimeZone24);
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.DateTime dateTime29 = localDateTime27.toDateTime(readableInstant28);
        org.joda.time.Chronology chronology30 = dateTime29.getChronology();
        org.joda.time.DurationField durationField31 = chronology30.hours();
        org.joda.time.DurationField durationField32 = chronology30.months();
        org.joda.time.DateTimeField dateTimeField33 = chronology30.dayOfYear();
        java.util.TimeZone timeZone34 = null;
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forTimeZone(timeZone34);
        int int37 = dateTimeZone35.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime38 = org.joda.time.LocalDateTime.now(dateTimeZone35);
        int[] intArray41 = new int[] { (short) 0, (short) 0 };
        int int42 = dateTimeField33.getMinimumValue((org.joda.time.ReadablePartial) localDateTime38, intArray41);
        java.lang.String str44 = dateTimeField33.getAsShortText((long) 53166088);
        java.util.TimeZone timeZone45 = null;
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.forTimeZone(timeZone45);
        int int48 = dateTimeZone46.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime49 = org.joda.time.LocalDateTime.now(dateTimeZone46);
        int int50 = localDateTime49.getWeekyear();
        org.joda.time.DurationFieldType durationFieldType51 = org.joda.time.DurationFieldType.days();
        org.joda.time.LocalDateTime localDateTime53 = localDateTime49.withFieldAdded(durationFieldType51, 53166088);
        java.util.Locale locale54 = java.util.Locale.ROOT;
        java.lang.String str55 = dateTimeField33.getAsShortText((org.joda.time.ReadablePartial) localDateTime53, locale54);
        java.util.TimeZone timeZone56 = null;
        org.joda.time.DateTimeZone dateTimeZone57 = org.joda.time.DateTimeZone.forTimeZone(timeZone56);
        int int59 = dateTimeZone57.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime60 = org.joda.time.LocalDateTime.now(dateTimeZone57);
        int int61 = localDateTime60.getWeekyear();
        boolean boolean62 = localDateTime53.isEqual((org.joda.time.ReadablePartial) localDateTime60);
        int[] intArray64 = iSOChronology20.get((org.joda.time.ReadablePartial) localDateTime60, (long) 53166088);
        iSOChronology0.validate((org.joda.time.ReadablePartial) localDateTime7, intArray64);
        org.joda.time.DurationField durationField66 = iSOChronology0.minutes();
        org.joda.time.DateTimeField dateTimeField67 = iSOChronology0.dayOfMonth();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3600000) + "'", int6 == (-3600000));
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3600000) + "'", int13 == (-3600000));
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(iSOChronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "ISOChronology[-01:00]" + "'", str22, "ISOChronology[-01:00]");
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3600000) + "'", int26 == (-3600000));
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3600000) + "'", int37 == (-3600000));
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[0, 0]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "1" + "'", str44, "1");
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-3600000) + "'", int48 == (-3600000));
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2022 + "'", int50 == 2022);
        org.junit.Assert.assertNotNull(durationFieldType51);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "346" + "'", str55, "346");
        org.junit.Assert.assertNotNull(dateTimeZone57);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-3600000) + "'", int59 == (-3600000));
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 2022 + "'", int61 == 2022);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[1970, 1, 1, 49566088]");
        org.junit.Assert.assertNotNull(durationField66);
        org.junit.Assert.assertNotNull(dateTimeField67);
    }

    @Test
    public void test11421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11421");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.yearOfEra();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.weekyearOfCentury();
        java.lang.String str4 = iSOChronology0.toString();
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology0.clockhourOfHalfday();
        org.joda.time.Chronology chronology6 = iSOChronology0.withUTC();
        org.joda.time.DurationField durationField7 = iSOChronology0.years();
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField9 = iSOChronology8.hourOfHalfday();
        java.lang.String str10 = iSOChronology8.toString();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology8.era();
        java.util.TimeZone timeZone12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone12);
        int int15 = dateTimeZone13.getOffset(100L);
        java.util.TimeZone timeZone16 = dateTimeZone13.toTimeZone();
        java.lang.String str17 = dateTimeZone13.toString();
        org.joda.time.Chronology chronology18 = iSOChronology8.withZone(dateTimeZone13);
        java.util.TimeZone timeZone19 = dateTimeZone13.toTimeZone();
        org.joda.time.Chronology chronology20 = iSOChronology0.withZone(dateTimeZone13);
        org.joda.time.DateTimeField dateTimeField21 = iSOChronology0.secondOfDay();
        org.joda.time.DateTimeField dateTimeField22 = iSOChronology0.yearOfEra();
        org.joda.time.DateTimeField dateTimeField23 = iSOChronology0.clockhourOfHalfday();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "ISOChronology[-01:00]" + "'", str4, "ISOChronology[-01:00]");
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "ISOChronology[-01:00]" + "'", str10, "ISOChronology[-01:00]");
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3600000) + "'", int15 == (-3600000));
        org.junit.Assert.assertNotNull(timeZone16);
        org.junit.Assert.assertEquals(timeZone16.getDisplayName(), "GMT-01:00");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "-01:00" + "'", str17, "-01:00");
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(timeZone19);
        org.junit.Assert.assertEquals(timeZone19.getDisplayName(), "GMT-01:00");
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
    }

    @Test
    public void test11422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11422");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.hourOfHalfday();
        java.lang.String str2 = iSOChronology0.toString();
        org.joda.time.DurationField durationField3 = iSOChronology0.centuries();
        boolean boolean4 = durationField3.isPrecise();
        boolean boolean5 = durationField3.isSupported();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ISOChronology[-01:00]" + "'", str2, "ISOChronology[-01:00]");
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
    }

    @Test
    public void test11423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11423");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.centuryOfEra();
        org.joda.time.DurationField durationField3 = iSOChronology0.seconds();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.weekyearOfCentury();
        org.joda.time.DurationField durationField5 = dateTimeField4.getDurationField();
        java.util.TimeZone timeZone6 = null;
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forTimeZone(timeZone6);
        int int9 = dateTimeZone7.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime10 = org.joda.time.LocalDateTime.now(dateTimeZone7);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray11 = localDateTime10.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.hourOfDay();
        int int13 = localDateTime10.get(dateTimeFieldType12);
        org.joda.time.LocalDateTime.Property property14 = localDateTime10.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime10.minusHours(20);
        java.util.Locale locale17 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet18 = locale17.getExtensionKeys();
        java.util.Iterator<java.lang.Character> charItor19 = charSet18.iterator();
        java.util.ArrayList[] arrayListArray21 = new java.util.ArrayList[0];
        @SuppressWarnings("unchecked")
        java.util.ArrayList<java.util.Locale.LanguageRange>[] languageRangeListArray22 = (java.util.ArrayList<java.util.Locale.LanguageRange>[]) arrayListArray21;
        java.util.ArrayList<java.util.Locale.LanguageRange>[] languageRangeListArray23 = charSet18.toArray((java.util.ArrayList<java.util.Locale.LanguageRange>[]) arrayListArray21);
        java.util.TimeZone timeZone24 = null;
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forTimeZone(timeZone24);
        int int27 = dateTimeZone25.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime28 = org.joda.time.LocalDateTime.now(dateTimeZone25);
        int int29 = localDateTime28.getWeekyear();
        org.joda.time.LocalDateTime.Property property30 = localDateTime28.millisOfDay();
        java.util.TimeZone timeZone31 = null;
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forTimeZone(timeZone31);
        int int34 = dateTimeZone32.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime35 = org.joda.time.LocalDateTime.now(dateTimeZone32);
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.DateTime dateTime37 = localDateTime35.toDateTime(readableInstant36);
        java.util.TimeZone timeZone38 = null;
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forTimeZone(timeZone38);
        int int41 = dateTimeZone39.getOffset(100L);
        org.joda.time.DateTime dateTime42 = localDateTime35.toDateTime(dateTimeZone39);
        int int43 = property30.compareTo((org.joda.time.ReadableInstant) dateTime42);
        boolean boolean44 = charSet18.equals((java.lang.Object) dateTime42);
        org.joda.time.DateTime dateTime45 = localDateTime16.toDateTime((org.joda.time.ReadableInstant) dateTime42);
        int int46 = localDateTime16.getYear();
        java.util.Locale.Builder builder48 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder51 = builder48.setExtension('x', "jpn");
        java.util.Locale locale52 = java.util.Locale.GERMAN;
        java.util.Locale locale53 = java.util.Locale.GERMAN;
        java.lang.String str54 = locale52.getDisplayCountry(locale53);
        java.util.Locale locale55 = locale52.stripExtensions();
        java.lang.String str56 = locale52.getDisplayName();
        java.util.Locale.Builder builder57 = builder51.setLocale(locale52);
        java.util.Locale locale58 = builder51.build();
        java.lang.String str59 = dateTimeField4.getAsShortText((org.joda.time.ReadablePartial) localDateTime16, 21, locale58);
        java.lang.String str60 = locale58.getVariant();
        java.lang.String str61 = locale58.getLanguage();
        java.lang.String str62 = locale58.getCountry();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-3600000) + "'", int9 == (-3600000));
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray11);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 13 + "'", int13 == 13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet18);
        org.junit.Assert.assertNotNull(charItor19);
        org.junit.Assert.assertNotNull(arrayListArray21);
        org.junit.Assert.assertNotNull(languageRangeListArray22);
        org.junit.Assert.assertNotNull(languageRangeListArray23);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3600000) + "'", int27 == (-3600000));
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2022 + "'", int29 == 2022);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3600000) + "'", int34 == (-3600000));
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-3600000) + "'", int41 == (-3600000));
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2022 + "'", int46 == 2022);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "de");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "de");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "de");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "German" + "'", str56, "German");
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "de");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "21" + "'", str59, "21");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "de" + "'", str61, "de");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
    }

    @Test
    public void test11424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11424");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.DateTime dateTime6 = localDateTime4.toDateTime(readableInstant5);
        java.util.TimeZone timeZone7 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forTimeZone(timeZone7);
        int int10 = dateTimeZone8.getOffset(100L);
        org.joda.time.DateTime dateTime11 = localDateTime4.toDateTime(dateTimeZone8);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = null;
        boolean boolean13 = dateTime11.isSupported(dateTimeFieldType12);
        long long14 = dateTime11.getMillis();
        java.util.TimeZone timeZone15 = null;
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forTimeZone(timeZone15);
        int int18 = dateTimeZone16.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime19 = org.joda.time.LocalDateTime.now(dateTimeZone16);
        int int20 = localDateTime19.getWeekyear();
        org.joda.time.LocalDateTime.Property property21 = localDateTime19.minuteOfHour();
        org.joda.time.LocalDateTime.Property property22 = localDateTime19.dayOfYear();
        java.util.TimeZone timeZone23 = null;
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forTimeZone(timeZone23);
        int int26 = dateTimeZone24.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime27 = org.joda.time.LocalDateTime.now(dateTimeZone24);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray28 = localDateTime27.getFieldTypes();
        int int29 = property22.compareTo((org.joda.time.ReadablePartial) localDateTime27);
        int int30 = localDateTime27.getYearOfCentury();
        org.joda.time.DateTime dateTime31 = localDateTime27.toDateTime();
        boolean boolean32 = dateTime11.isEqual((org.joda.time.ReadableInstant) dateTime31);
        java.lang.String str33 = dateTime11.toString();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-3600000) + "'", int3 == (-3600000));
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3600000) + "'", int10 == (-3600000));
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1645455273119L + "'", long14 == 1645455273119L);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3600000) + "'", int18 == (-3600000));
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2022 + "'", int20 == 2022);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3600000) + "'", int26 == (-3600000));
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 22 + "'", int30 == 22);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str33 + "' != '" + "2022-02-21T13:54:33.119-01:00" + "'", str33, "2022-02-21T13:54:33.119-01:00");
    }

    @Test
    public void test11425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11425");
        java.util.TimeZone timeZone1 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        int int4 = dateTimeZone2.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime5 = org.joda.time.LocalDateTime.now(dateTimeZone2);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.DateTime dateTime7 = localDateTime5.toDateTime(readableInstant6);
        org.joda.time.Chronology chronology8 = dateTime7.getChronology();
        org.joda.time.DurationField durationField9 = chronology8.hours();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((long) 52, chronology8);
        int int11 = localDateTime10.getMillisOfDay();
        org.joda.time.LocalDateTime.Property property12 = localDateTime10.era();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime10.plusWeeks(53309346);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime10.withDayOfYear((int) (byte) 100);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3600000) + "'", int4 == (-3600000));
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 82800052 + "'", int11 == 82800052);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
    }

    @Test
    public void test11426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11426");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        int int5 = localDateTime4.getWeekyear();
        org.joda.time.LocalDateTime.Property property6 = localDateTime4.minuteOfHour();
        org.joda.time.LocalDateTime.Property property7 = localDateTime4.dayOfYear();
        java.util.TimeZone timeZone8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        int int11 = dateTimeZone9.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime12 = org.joda.time.LocalDateTime.now(dateTimeZone9);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray13 = localDateTime12.getFieldTypes();
        int int14 = property7.compareTo((org.joda.time.ReadablePartial) localDateTime12);
        int int15 = localDateTime12.getCenturyOfEra();
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.LocalDateTime localDateTime17 = localDateTime12.plus(readablePeriod16);
        org.joda.time.LocalDateTime.Property property18 = localDateTime12.hourOfDay();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime12.minusYears(2818);
        java.util.TimeZone timeZone21 = null;
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forTimeZone(timeZone21);
        int int24 = dateTimeZone22.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime25 = org.joda.time.LocalDateTime.now(dateTimeZone22);
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.DateTime dateTime27 = localDateTime25.toDateTime(readableInstant26);
        java.util.TimeZone timeZone28 = null;
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forTimeZone(timeZone28);
        int int31 = dateTimeZone29.getOffset(100L);
        org.joda.time.DateTime dateTime32 = localDateTime25.toDateTime(dateTimeZone29);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime25.withYear(52);
        java.util.Locale locale36 = java.util.Locale.ITALIAN;
        java.lang.String str37 = localDateTime34.toString("1", locale36);
        org.joda.time.chrono.ISOChronology iSOChronology38 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField39 = iSOChronology38.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField40 = iSOChronology38.yearOfEra();
        org.joda.time.DateTimeField dateTimeField41 = iSOChronology38.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField42 = iSOChronology38.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField43 = iSOChronology38.dayOfYear();
        java.util.TimeZone timeZone44 = null;
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forTimeZone(timeZone44);
        java.lang.String str47 = dateTimeZone45.getName(31556995199999L);
        java.lang.String str48 = dateTimeZone45.getID();
        org.joda.time.Chronology chronology49 = iSOChronology38.withZone(dateTimeZone45);
        org.joda.time.DateTime dateTime50 = localDateTime34.toDateTime(dateTimeZone45);
        org.joda.time.Chronology chronology51 = localDateTime34.getChronology();
        int int52 = localDateTime20.compareTo((org.joda.time.ReadablePartial) localDateTime34);
        org.joda.time.LocalDateTime.Property property53 = localDateTime20.dayOfWeek();
        org.joda.time.LocalDateTime.Property property54 = localDateTime20.dayOfWeek();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime56 = property54.setCopy(53464835);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 53464835 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-3600000) + "'", int3 == (-3600000));
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2022 + "'", int5 == 2022);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3600000) + "'", int11 == (-3600000));
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 20 + "'", int15 == 20);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3600000) + "'", int24 == (-3600000));
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-3600000) + "'", int31 == (-3600000));
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "it");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "1" + "'", str37, "1");
        org.junit.Assert.assertNotNull(iSOChronology38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "-01:00" + "'", str47, "-01:00");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "-01:00" + "'", str48, "-01:00");
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(property54);
    }

    @Test
    public void test11427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11427");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.yearOfEra();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.weekyearOfCentury();
        org.joda.time.DurationField durationField4 = iSOChronology0.weeks();
        org.joda.time.DurationField durationField5 = iSOChronology0.millis();
        org.joda.time.DateTimeField dateTimeField6 = iSOChronology0.dayOfYear();
        java.lang.String str8 = dateTimeField6.getAsShortText(1645454871238L);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "52" + "'", str8, "52");
    }

    @Test
    public void test11428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11428");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setExtension('x', "jpn");
        java.util.Locale locale4 = builder0.build();
        java.util.Locale locale5 = builder0.build();
        java.util.Locale.Builder builder6 = builder0.clearExtensions();
        java.util.Locale.Builder builder7 = builder6.clearExtensions();
        java.util.Locale locale8 = builder7.build();
        java.util.Locale.Builder builder9 = builder7.clearExtensions();
        java.util.Locale.Builder builder11 = builder9.addUnicodeLocaleAttribute("2971803");
        java.util.Locale.Builder builder13 = builder9.addUnicodeLocaleAttribute("53590845");
        java.util.Locale locale14 = builder9.build();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "");
    }

    @Test
    public void test11429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11429");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours(53480154);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Offset is too large");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test11430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11430");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.yearOfEra();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.weekOfWeekyear();
        org.joda.time.DurationField durationField5 = iSOChronology0.weekyears();
        long long7 = durationField5.getMillis(2808227);
        long long10 = durationField5.getDifferenceAsLong(1645454862119L, 1645454822584L);
        int int13 = durationField5.getValue(1645455110441L, 53467000L);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 88619084644104000L + "'", long7 == 88619084644104000L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 52 + "'", int13 == 52);
    }

    @Test
    public void test11431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11431");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        int int5 = localDateTime4.getWeekyear();
        org.joda.time.LocalDateTime.Property property6 = localDateTime4.millisOfDay();
        java.util.Locale locale7 = java.util.Locale.GERMAN;
        java.util.Locale locale8 = java.util.Locale.GERMAN;
        java.lang.String str9 = locale7.getDisplayCountry(locale8);
        java.util.Locale locale10 = locale7.stripExtensions();
        int int11 = property6.getMaximumShortTextLength(locale7);
        org.joda.time.Interval interval12 = property6.toInterval();
        org.joda.time.LocalDateTime localDateTime14 = property6.setCopy(1);
        int int15 = localDateTime14.getMonthOfYear();
        org.joda.time.chrono.ISOChronology iSOChronology16 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology16.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology16.hourOfHalfday();
        java.util.TimeZone timeZone19 = null;
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forTimeZone(timeZone19);
        int int22 = dateTimeZone20.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime23 = org.joda.time.LocalDateTime.now(dateTimeZone20);
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.DateTime dateTime25 = localDateTime23.toDateTime(readableInstant24);
        java.util.TimeZone timeZone26 = null;
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forTimeZone(timeZone26);
        int int29 = dateTimeZone27.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime30 = org.joda.time.LocalDateTime.now(dateTimeZone27);
        org.joda.time.LocalDateTime localDateTime31 = org.joda.time.LocalDateTime.now(dateTimeZone27);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime31.minusYears(2022);
        org.joda.time.LocalDateTime.Property property34 = localDateTime33.era();
        int int35 = localDateTime23.compareTo((org.joda.time.ReadablePartial) localDateTime33);
        org.joda.time.chrono.ISOChronology iSOChronology36 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField37 = iSOChronology36.hourOfHalfday();
        java.lang.String str38 = iSOChronology36.toString();
        java.util.TimeZone timeZone39 = null;
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forTimeZone(timeZone39);
        int int42 = dateTimeZone40.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime43 = org.joda.time.LocalDateTime.now(dateTimeZone40);
        org.joda.time.ReadableInstant readableInstant44 = null;
        org.joda.time.DateTime dateTime45 = localDateTime43.toDateTime(readableInstant44);
        org.joda.time.Chronology chronology46 = dateTime45.getChronology();
        org.joda.time.DurationField durationField47 = chronology46.hours();
        org.joda.time.DurationField durationField48 = chronology46.months();
        org.joda.time.DateTimeField dateTimeField49 = chronology46.dayOfYear();
        java.util.TimeZone timeZone50 = null;
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.forTimeZone(timeZone50);
        int int53 = dateTimeZone51.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime54 = org.joda.time.LocalDateTime.now(dateTimeZone51);
        int[] intArray57 = new int[] { (short) 0, (short) 0 };
        int int58 = dateTimeField49.getMinimumValue((org.joda.time.ReadablePartial) localDateTime54, intArray57);
        java.lang.String str60 = dateTimeField49.getAsShortText((long) 53166088);
        java.util.TimeZone timeZone61 = null;
        org.joda.time.DateTimeZone dateTimeZone62 = org.joda.time.DateTimeZone.forTimeZone(timeZone61);
        int int64 = dateTimeZone62.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime65 = org.joda.time.LocalDateTime.now(dateTimeZone62);
        int int66 = localDateTime65.getWeekyear();
        org.joda.time.DurationFieldType durationFieldType67 = org.joda.time.DurationFieldType.days();
        org.joda.time.LocalDateTime localDateTime69 = localDateTime65.withFieldAdded(durationFieldType67, 53166088);
        java.util.Locale locale70 = java.util.Locale.ROOT;
        java.lang.String str71 = dateTimeField49.getAsShortText((org.joda.time.ReadablePartial) localDateTime69, locale70);
        java.util.TimeZone timeZone72 = null;
        org.joda.time.DateTimeZone dateTimeZone73 = org.joda.time.DateTimeZone.forTimeZone(timeZone72);
        int int75 = dateTimeZone73.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime76 = org.joda.time.LocalDateTime.now(dateTimeZone73);
        int int77 = localDateTime76.getWeekyear();
        boolean boolean78 = localDateTime69.isEqual((org.joda.time.ReadablePartial) localDateTime76);
        int[] intArray80 = iSOChronology36.get((org.joda.time.ReadablePartial) localDateTime76, (long) 53166088);
        iSOChronology16.validate((org.joda.time.ReadablePartial) localDateTime23, intArray80);
        org.joda.time.chrono.ISOChronology iSOChronology82 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField83 = iSOChronology82.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField84 = iSOChronology82.yearOfEra();
        org.joda.time.DateTimeField dateTimeField85 = iSOChronology82.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField86 = iSOChronology82.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField87 = iSOChronology82.dayOfYear();
        java.util.TimeZone timeZone88 = null;
        org.joda.time.DateTimeZone dateTimeZone89 = org.joda.time.DateTimeZone.forTimeZone(timeZone88);
        java.lang.String str91 = dateTimeZone89.getName(31556995199999L);
        java.lang.String str92 = dateTimeZone89.getID();
        org.joda.time.Chronology chronology93 = iSOChronology82.withZone(dateTimeZone89);
        org.joda.time.Chronology chronology94 = iSOChronology16.withZone(dateTimeZone89);
        org.joda.time.DateTimeField dateTimeField95 = iSOChronology16.monthOfYear();
        org.joda.time.DateTimeField dateTimeField96 = iSOChronology16.year();
        java.lang.String str97 = dateTimeField96.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType98 = dateTimeField96.getType();
        org.joda.time.LocalDateTime.Property property99 = localDateTime14.property(dateTimeFieldType98);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-3600000) + "'", int3 == (-3600000));
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2022 + "'", int5 == 2022);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "de");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "de");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "de");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 8 + "'", int11 == 8);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2 + "'", int15 == 2);
        org.junit.Assert.assertNotNull(iSOChronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-3600000) + "'", int22 == (-3600000));
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3600000) + "'", int29 == (-3600000));
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(iSOChronology36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "ISOChronology[-01:00]" + "'", str38, "ISOChronology[-01:00]");
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-3600000) + "'", int42 == (-3600000));
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(durationField47);
        org.junit.Assert.assertNotNull(durationField48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-3600000) + "'", int53 == (-3600000));
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[0, 0]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "1" + "'", str60, "1");
        org.junit.Assert.assertNotNull(dateTimeZone62);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-3600000) + "'", int64 == (-3600000));
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2022 + "'", int66 == 2022);
        org.junit.Assert.assertNotNull(durationFieldType67);
        org.junit.Assert.assertNotNull(localDateTime69);
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "346" + "'", str71, "346");
        org.junit.Assert.assertNotNull(dateTimeZone73);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-3600000) + "'", int75 == (-3600000));
        org.junit.Assert.assertNotNull(localDateTime76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 2022 + "'", int77 == 2022);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[1970, 1, 1, 49566088]");
        org.junit.Assert.assertNotNull(iSOChronology82);
        org.junit.Assert.assertNotNull(dateTimeField83);
        org.junit.Assert.assertNotNull(dateTimeField84);
        org.junit.Assert.assertNotNull(dateTimeField85);
        org.junit.Assert.assertNotNull(dateTimeField86);
        org.junit.Assert.assertNotNull(dateTimeField87);
        org.junit.Assert.assertNotNull(dateTimeZone89);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "-01:00" + "'", str91, "-01:00");
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "-01:00" + "'", str92, "-01:00");
        org.junit.Assert.assertNotNull(chronology93);
        org.junit.Assert.assertNotNull(chronology94);
        org.junit.Assert.assertNotNull(dateTimeField95);
        org.junit.Assert.assertNotNull(dateTimeField96);
        org.junit.Assert.assertEquals("'" + str97 + "' != '" + "DateTimeField[year]" + "'", str97, "DateTimeField[year]");
        org.junit.Assert.assertNotNull(dateTimeFieldType98);
        org.junit.Assert.assertNotNull(property99);
    }

    @Test
    public void test11432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11432");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime5 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusMinutes((int) ' ');
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime7.withWeekOfWeekyear(52);
        org.joda.time.LocalDateTime.Property property11 = localDateTime7.monthOfYear();
        org.joda.time.DurationField durationField12 = property11.getLeapDurationField();
        org.joda.time.Interval interval13 = property11.toInterval();
        org.joda.time.chrono.ISOChronology iSOChronology14 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology14.hourOfHalfday();
        java.lang.String str16 = iSOChronology14.toString();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology14.era();
        org.joda.time.DurationField durationField18 = iSOChronology14.centuries();
        org.joda.time.DurationField durationField19 = iSOChronology14.weeks();
        org.joda.time.DateTimeField dateTimeField20 = iSOChronology14.era();
        org.joda.time.DateTimeField dateTimeField21 = iSOChronology14.year();
        org.joda.time.DateTimeField dateTimeField22 = iSOChronology14.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField23 = iSOChronology14.era();
        org.joda.time.DateTimeField dateTimeField24 = iSOChronology14.hourOfHalfday();
        java.util.TimeZone timeZone25 = null;
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forTimeZone(timeZone25);
        int int28 = dateTimeZone26.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime29 = org.joda.time.LocalDateTime.now(dateTimeZone26);
        int int30 = localDateTime29.getWeekyear();
        org.joda.time.DurationFieldType durationFieldType31 = org.joda.time.DurationFieldType.centuries();
        java.lang.String str32 = durationFieldType31.getName();
        boolean boolean33 = localDateTime29.isSupported(durationFieldType31);
        int int34 = localDateTime29.getHourOfDay();
        java.lang.String str35 = localDateTime29.toString();
        int[] intArray37 = iSOChronology14.get((org.joda.time.ReadablePartial) localDateTime29, (long) 2827556);
        org.joda.time.DurationField durationField38 = iSOChronology14.weeks();
        java.lang.String str39 = iSOChronology14.toString();
        java.lang.String str40 = iSOChronology14.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime((java.lang.Object) property11, (org.joda.time.Chronology) iSOChronology14);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: org.joda.time.LocalDateTime$Property");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-3600000) + "'", int3 == (-3600000));
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(iSOChronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "ISOChronology[-01:00]" + "'", str16, "ISOChronology[-01:00]");
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3600000) + "'", int28 == (-3600000));
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2022 + "'", int30 == 2022);
        org.junit.Assert.assertNotNull(durationFieldType31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "centuries" + "'", str32, "centuries");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int34 + "' != '" + 13 + "'", int34 == 13);
// flaky:         org.junit.Assert.assertEquals("'" + str35 + "' != '" + "2022-02-21T13:54:33.344" + "'", str35, "2022-02-21T13:54:33.344");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1969, 12, 31, 85627556]");
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "ISOChronology[-01:00]" + "'", str39, "ISOChronology[-01:00]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "ISOChronology[-01:00]" + "'", str40, "ISOChronology[-01:00]");
    }

    @Test
    public void test11433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11433");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.centuryOfEra();
        org.joda.time.DurationField durationField3 = iSOChronology0.seconds();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology0.hourOfHalfday();
        long long9 = iSOChronology0.add((long) (short) 100, 1644849973425L, 2720);
        org.joda.time.DurationField durationField10 = iSOChronology0.weekyears();
        long long14 = iSOChronology0.add(57854412000L, (long) 'x', 5);
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology0.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime16 = org.joda.time.LocalDateTime.now();
        java.util.TimeZone timeZone17 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forTimeZone(timeZone17);
        int int20 = dateTimeZone18.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime21 = org.joda.time.LocalDateTime.now(dateTimeZone18);
        int int22 = localDateTime21.getWeekyear();
        org.joda.time.LocalDateTime.Property property23 = localDateTime21.millisOfDay();
        java.util.TimeZone timeZone24 = null;
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forTimeZone(timeZone24);
        int int27 = dateTimeZone25.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime28 = org.joda.time.LocalDateTime.now(dateTimeZone25);
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.DateTime dateTime30 = localDateTime28.toDateTime(readableInstant29);
        java.util.TimeZone timeZone31 = null;
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forTimeZone(timeZone31);
        int int34 = dateTimeZone32.getOffset(100L);
        org.joda.time.DateTime dateTime35 = localDateTime28.toDateTime(dateTimeZone32);
        int int36 = property23.compareTo((org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.LocalDateTime localDateTime37 = property23.roundHalfEvenCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.LocalDateTime.Property property39 = localDateTime37.property(dateTimeFieldType38);
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.Chronology chronology41 = null;
        boolean boolean42 = dateTimeFieldType40.isSupported(chronology41);
        boolean boolean43 = localDateTime37.isSupported(dateTimeFieldType40);
        int int44 = localDateTime16.get(dateTimeFieldType40);
        org.joda.time.LocalDateTime localDateTime46 = localDateTime16.withCenturyOfEra(52);
        org.joda.time.LocalDateTime.Property property47 = localDateTime16.yearOfCentury();
        int[] intArray49 = iSOChronology0.get((org.joda.time.ReadablePartial) localDateTime16, (long) 2807077);
        org.joda.time.DurationField durationField50 = iSOChronology0.millis();
        java.util.TimeZone timeZone51 = null;
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.forTimeZone(timeZone51);
        int int54 = dateTimeZone52.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime55 = org.joda.time.LocalDateTime.now(dateTimeZone52);
        org.joda.time.ReadableInstant readableInstant56 = null;
        org.joda.time.DateTime dateTime57 = localDateTime55.toDateTime(readableInstant56);
        java.util.TimeZone timeZone58 = null;
        org.joda.time.DateTimeZone dateTimeZone59 = org.joda.time.DateTimeZone.forTimeZone(timeZone58);
        int int61 = dateTimeZone59.getOffset(100L);
        org.joda.time.DateTime dateTime62 = localDateTime55.toDateTime(dateTimeZone59);
        org.joda.time.LocalDateTime.Property property63 = localDateTime55.monthOfYear();
        org.joda.time.LocalDateTime localDateTime65 = localDateTime55.minusHours(53183117);
        long long67 = iSOChronology0.set((org.joda.time.ReadablePartial) localDateTime55, 4473991927716100L);
        org.joda.time.DateTimeField dateTimeField68 = iSOChronology0.millisOfSecond();
        java.lang.String str69 = iSOChronology0.toString();
        org.joda.time.DateTimeField dateTimeField70 = iSOChronology0.clockhourOfDay();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 4473991927716100L + "'", long9 == 4473991927716100L);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 57854412600L + "'", long14 == 57854412600L);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-3600000) + "'", int20 == (-3600000));
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2022 + "'", int22 == 2022);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3600000) + "'", int27 == (-3600000));
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3600000) + "'", int34 == (-3600000));
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(dateTimeFieldType38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(dateTimeFieldType40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 52 + "'", int44 == 52);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[1969, 12, 31, 85607077]");
        org.junit.Assert.assertNotNull(durationField50);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-3600000) + "'", int54 == (-3600000));
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTimeZone59);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-3600000) + "'", int61 == (-3600000));
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertNotNull(localDateTime65);
// flaky:         org.junit.Assert.assertTrue("'" + long67 + "' != '" + 1645455273377L + "'", long67 == 1645455273377L);
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "ISOChronology[-01:00]" + "'", str69, "ISOChronology[-01:00]");
        org.junit.Assert.assertNotNull(dateTimeField70);
    }

    @Test
    public void test11434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11434");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        int int5 = localDateTime4.getWeekyear();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.withSecondOfMinute((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.minusMillis((-292275054));
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = null;
        java.lang.String str11 = localDateTime9.toString(dateTimeFormatter10);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DurationFieldType durationFieldType13 = dateTimeFieldType12.getDurationType();
        java.lang.String str14 = dateTimeFieldType12.getName();
        int int15 = localDateTime9.get(dateTimeFieldType12);
        org.joda.time.DurationFieldType durationFieldType16 = org.joda.time.DurationFieldType.hours();
        org.joda.time.chrono.ISOChronology iSOChronology17 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology17.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology17.centuryOfEra();
        org.joda.time.DurationField durationField20 = iSOChronology17.centuries();
        org.joda.time.DurationField durationField21 = iSOChronology17.hours();
        org.joda.time.DurationField durationField22 = iSOChronology17.years();
        boolean boolean23 = durationFieldType16.isSupported((org.joda.time.Chronology) iSOChronology17);
        org.joda.time.chrono.ISOChronology iSOChronology24 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField25 = iSOChronology24.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField26 = iSOChronology24.yearOfEra();
        org.joda.time.DateTimeField dateTimeField27 = iSOChronology24.hourOfDay();
        org.joda.time.DateTimeField dateTimeField28 = iSOChronology24.dayOfMonth();
        org.joda.time.DurationField durationField29 = iSOChronology24.centuries();
        org.joda.time.DurationField durationField30 = durationFieldType16.getField((org.joda.time.Chronology) iSOChronology24);
        org.joda.time.DateTimeField dateTimeField31 = dateTimeFieldType12.getField((org.joda.time.Chronology) iSOChronology24);
        int int33 = dateTimeField31.get((-2L));
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-3600000) + "'", int3 == (-3600000));
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2022 + "'", int5 == 2022);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "2022-02-24T23:05:25.499" + "'", str11, "2022-02-24T23:05:25.499");
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(durationFieldType13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "year" + "'", str14, "year");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2022 + "'", int15 == 2022);
        org.junit.Assert.assertNotNull(durationFieldType16);
        org.junit.Assert.assertNotNull(iSOChronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(iSOChronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1969 + "'", int33 == 1969);
    }

    @Test
    public void test11435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11435");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.hourOfHalfday();
        java.lang.String str2 = iSOChronology0.toString();
        org.joda.time.DurationField durationField3 = iSOChronology0.eras();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.year();
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology0.hourOfDay();
        org.joda.time.DateTimeField dateTimeField6 = iSOChronology0.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField7 = iSOChronology0.clockhourOfDay();
        long long9 = dateTimeField7.roundHalfEven((long) 3039);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ISOChronology[-01:00]" + "'", str2, "ISOChronology[-01:00]");
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
    }

    @Test
    public void test11436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11436");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.clockhourOfHalfday();
        org.joda.time.DurationField durationField3 = iSOChronology0.halfdays();
        org.joda.time.DurationField durationField4 = iSOChronology0.days();
        org.joda.time.DurationField durationField5 = iSOChronology0.hours();
        org.joda.time.DateTimeField dateTimeField6 = iSOChronology0.yearOfCentury();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
    }

    @Test
    public void test11437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11437");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.hourOfHalfday();
        java.lang.String str2 = iSOChronology0.toString();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.era();
        org.joda.time.DurationField durationField4 = iSOChronology0.centuries();
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        long long8 = iSOChronology0.add(readablePeriod5, (long) 2022, (int) (byte) 100);
        org.joda.time.DateTimeField dateTimeField9 = iSOChronology0.dayOfYear();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology0.yearOfEra();
        org.joda.time.DurationField durationField11 = iSOChronology0.months();
        java.util.TimeZone timeZone12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone12);
        int int15 = dateTimeZone13.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime16 = org.joda.time.LocalDateTime.now(dateTimeZone13);
        int int17 = localDateTime16.getWeekyear();
        org.joda.time.LocalDateTime.Property property18 = localDateTime16.minuteOfHour();
        org.joda.time.LocalDateTime.Property property19 = localDateTime16.dayOfYear();
        java.util.TimeZone timeZone20 = null;
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forTimeZone(timeZone20);
        int int23 = dateTimeZone21.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime24 = org.joda.time.LocalDateTime.now(dateTimeZone21);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray25 = localDateTime24.getFieldTypes();
        int int26 = property19.compareTo((org.joda.time.ReadablePartial) localDateTime24);
        int int27 = localDateTime24.getYearOfCentury();
        org.joda.time.DateTime dateTime28 = localDateTime24.toDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        boolean boolean30 = dateTime28.isSupported(dateTimeFieldType29);
        long long31 = dateTime28.getMillis();
        org.joda.time.DateTimeZone dateTimeZone32 = dateTime28.getZone();
        org.joda.time.Chronology chronology33 = iSOChronology0.withZone(dateTimeZone32);
        org.joda.time.DateTimeField dateTimeField34 = chronology33.hourOfDay();
        boolean boolean35 = dateTimeField34.isLenient();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ISOChronology[-01:00]" + "'", str2, "ISOChronology[-01:00]");
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 2022L + "'", long8 == 2022L);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3600000) + "'", int15 == (-3600000));
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2022 + "'", int17 == 2022);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-3600000) + "'", int23 == (-3600000));
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 22 + "'", int27 == 22);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTimeFieldType29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
// flaky:         org.junit.Assert.assertTrue("'" + long31 + "' != '" + 1645455273533L + "'", long31 == 1645455273533L);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test11438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11438");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("2022-02-22T00:49:24.664");
        java.lang.String str2 = locale1.getCountry();
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
    }

    @Test
    public void test11439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11439");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime5 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.plusSeconds((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime5.minusWeeks((int) (byte) 10);
        java.util.TimeZone timeZone10 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        int int13 = dateTimeZone11.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime14 = org.joda.time.LocalDateTime.now(dateTimeZone11);
        org.joda.time.LocalDateTime localDateTime15 = org.joda.time.LocalDateTime.now(dateTimeZone11);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.plusSeconds((int) (short) 10);
        int int18 = localDateTime15.size();
        boolean boolean19 = localDateTime9.isBefore((org.joda.time.ReadablePartial) localDateTime15);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime15.withMillisOfSecond(52);
        org.joda.time.Chronology chronology22 = localDateTime15.getChronology();
        org.joda.time.LocalDateTime.Property property23 = localDateTime15.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField24 = property23.getField();
        org.joda.time.DurationField durationField25 = property23.getRangeDurationField();
        org.joda.time.LocalDateTime localDateTime27 = property23.addWrapFieldToCopy(0);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-3600000) + "'", int3 == (-3600000));
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3600000) + "'", int13 == (-3600000));
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 4 + "'", int18 == 4);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(localDateTime27);
    }

    @Test
    public void test11440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11440");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffset(100L);
        java.util.TimeZone timeZone4 = dateTimeZone1.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forTimeZone(timeZone4);
        org.joda.time.chrono.ISOChronology iSOChronology6 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone5);
        org.joda.time.LocalDateTime localDateTime7 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) iSOChronology6);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.minusMonths(2846360);
        org.joda.time.LocalDateTime.Property property10 = localDateTime9.era();
        org.joda.time.LocalDateTime localDateTime11 = property10.roundHalfEvenCopy();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime12 = localDateTime11.toDateTime();
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -292275055 for year must be in the range [-292275054,292278993]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-3600000) + "'", int3 == (-3600000));
        org.junit.Assert.assertNotNull(timeZone4);
        org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "GMT-01:00");
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(iSOChronology6);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDateTime11);
    }

    @Test
    public void test11441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11441");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        int int5 = localDateTime4.getWeekyear();
        org.joda.time.LocalDateTime.Property property6 = localDateTime4.millisOfDay();
        java.util.Locale locale7 = java.util.Locale.GERMAN;
        java.util.Locale locale8 = java.util.Locale.GERMAN;
        java.lang.String str9 = locale7.getDisplayCountry(locale8);
        java.util.Locale locale10 = locale7.stripExtensions();
        int int11 = property6.getMaximumShortTextLength(locale7);
        org.joda.time.Interval interval12 = property6.toInterval();
        org.joda.time.LocalDateTime localDateTime13 = property6.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.minusSeconds(365);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.plus(readablePeriod16);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-3600000) + "'", int3 == (-3600000));
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2022 + "'", int5 == 2022);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "de");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "de");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "de");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 8 + "'", int11 == 8);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
    }

    @Test
    public void test11442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11442");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffset(100L);
        java.util.TimeZone timeZone4 = dateTimeZone1.toTimeZone();
        int int6 = dateTimeZone1.getStandardOffset((long) ' ');
        java.util.TimeZone timeZone7 = dateTimeZone1.toTimeZone();
        org.joda.time.tz.NameProvider nameProvider9 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale.Builder builder10 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder13 = builder10.setExtension('x', "jpn");
        java.util.Locale locale14 = java.util.Locale.GERMAN;
        java.util.Locale locale15 = java.util.Locale.GERMAN;
        java.lang.String str16 = locale14.getDisplayCountry(locale15);
        java.util.Locale locale17 = locale14.stripExtensions();
        java.lang.String str18 = locale14.getDisplayName();
        java.util.Locale.Builder builder19 = builder13.setLocale(locale14);
        java.lang.String str22 = nameProvider9.getName(locale14, "Japanese", "UTC");
        java.lang.String str23 = locale14.getISO3Language();
        java.lang.String str24 = dateTimeZone1.getName(1644849999329L, locale14);
        java.util.TimeZone timeZone25 = dateTimeZone1.toTimeZone();
        java.time.ZoneId zoneId26 = timeZone25.toZoneId();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-3600000) + "'", int3 == (-3600000));
        org.junit.Assert.assertNotNull(timeZone4);
        org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "GMT-01:00");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3600000) + "'", int6 == (-3600000));
        org.junit.Assert.assertNotNull(timeZone7);
        org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "GMT-01:00");
        org.junit.Assert.assertNotNull(nameProvider9);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "de");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "de");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "de");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "German" + "'", str18, "German");
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "deu" + "'", str23, "deu");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "-01:00" + "'", str24, "-01:00");
        org.junit.Assert.assertNotNull(timeZone25);
        org.junit.Assert.assertEquals(timeZone25.getDisplayName(), "GMT-01:00");
        org.junit.Assert.assertNotNull(zoneId26);
    }

    @Test
    public void test11443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11443");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("49992815", strMap1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=49992815");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test11444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11444");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.yearOfEra();
        org.joda.time.DurationField durationField3 = iSOChronology0.minutes();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.weekyear();
        org.joda.time.DurationField durationField5 = iSOChronology0.centuries();
        org.joda.time.DateTimeField dateTimeField6 = iSOChronology0.centuryOfEra();
        int int8 = dateTimeField6.getLeapAmount(1644850035094L);
        int int9 = dateTimeField6.getMinimumValue();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }

    @Test
    public void test11445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11445");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime5 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.plusSeconds((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime5.withSecondOfMinute(18);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime5.plusHours(2938);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.LocalDateTime localDateTime14 = localDateTime5.withPeriodAdded(readablePeriod12, 3158241);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-3600000) + "'", int3 == (-3600000));
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime14);
    }

    @Test
    public void test11446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11446");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.hourOfHalfday();
        java.lang.String str2 = iSOChronology0.toString();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.era();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.yearOfEra();
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology0.secondOfMinute();
        java.util.TimeZone timeZone6 = null;
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forTimeZone(timeZone6);
        int int9 = dateTimeZone7.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime10 = org.joda.time.LocalDateTime.now(dateTimeZone7);
        int int11 = localDateTime10.getWeekyear();
        org.joda.time.LocalDateTime.Property property12 = localDateTime10.minuteOfHour();
        org.joda.time.LocalDateTime.Property property13 = localDateTime10.dayOfYear();
        java.util.TimeZone timeZone14 = null;
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forTimeZone(timeZone14);
        int int17 = dateTimeZone15.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime18 = org.joda.time.LocalDateTime.now(dateTimeZone15);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray19 = localDateTime18.getFieldTypes();
        int int20 = property13.compareTo((org.joda.time.ReadablePartial) localDateTime18);
        int int21 = localDateTime18.getCenturyOfEra();
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.LocalDateTime localDateTime23 = localDateTime18.plus(readablePeriod22);
        java.util.TimeZone timeZone26 = null;
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forTimeZone(timeZone26);
        int int29 = dateTimeZone27.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime30 = org.joda.time.LocalDateTime.now(dateTimeZone27);
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.DateTime dateTime32 = localDateTime30.toDateTime(readableInstant31);
        org.joda.time.Chronology chronology33 = dateTime32.getChronology();
        org.joda.time.DurationField durationField34 = chronology33.hours();
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime((long) 52, chronology33);
        org.joda.time.DateTimeField dateTimeField36 = chronology33.secondOfDay();
        org.joda.time.DateTimeField dateTimeField37 = chronology33.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime38 = org.joda.time.LocalDateTime.now(chronology33);
        int[] intArray39 = localDateTime38.getValues();
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray41 = dateTimeField5.addWrapField((org.joda.time.ReadablePartial) localDateTime18, 47, intArray39, 239);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 47");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ISOChronology[-01:00]" + "'", str2, "ISOChronology[-01:00]");
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-3600000) + "'", int9 == (-3600000));
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2022 + "'", int11 == 2022);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3600000) + "'", int17 == (-3600000));
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 20 + "'", int21 == 20);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3600000) + "'", int29 == (-3600000));
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(intArray39);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[2022, 2, 21, 50073786]");
    }

    @Test
    public void test11447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11447");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.clockhourOfHalfday();
        org.joda.time.DurationField durationField3 = iSOChronology0.halfdays();
        org.joda.time.DurationField durationField4 = iSOChronology0.days();
        org.joda.time.DurationField durationField5 = iSOChronology0.hours();
        org.joda.time.DateTimeField dateTimeField6 = iSOChronology0.year();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
    }

    @Test
    public void test11448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11448");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.yearOfEra();
        java.util.TimeZone timeZone3 = null;
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forTimeZone(timeZone3);
        int int6 = dateTimeZone4.getOffset(100L);
        java.util.TimeZone timeZone7 = dateTimeZone4.toTimeZone();
        int int9 = dateTimeZone4.getStandardOffset((long) ' ');
        org.joda.time.Chronology chronology10 = iSOChronology0.withZone(dateTimeZone4);
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology0.hourOfHalfday();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3600000) + "'", int6 == (-3600000));
        org.junit.Assert.assertNotNull(timeZone7);
        org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "GMT-01:00");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-3600000) + "'", int9 == (-3600000));
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
    }

    @Test
    public void test11449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11449");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        int int5 = localDateTime4.getWeekyear();
        org.joda.time.LocalDateTime.Property property6 = localDateTime4.minuteOfHour();
        org.joda.time.LocalDateTime.Property property7 = localDateTime4.dayOfYear();
        java.util.TimeZone timeZone8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        int int11 = dateTimeZone9.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime12 = org.joda.time.LocalDateTime.now(dateTimeZone9);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray13 = localDateTime12.getFieldTypes();
        int int14 = property7.compareTo((org.joda.time.ReadablePartial) localDateTime12);
        int int15 = localDateTime12.getCenturyOfEra();
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.LocalDateTime localDateTime17 = localDateTime12.plus(readablePeriod16);
        org.joda.time.LocalDateTime.Property property18 = localDateTime12.hourOfDay();
        org.joda.time.LocalDateTime localDateTime20 = property18.addToCopy(53271064);
        java.util.TimeZone timeZone21 = null;
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forTimeZone(timeZone21);
        int int24 = dateTimeZone22.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime25 = org.joda.time.LocalDateTime.now(dateTimeZone22);
        int int26 = localDateTime25.getWeekyear();
        org.joda.time.LocalDateTime.Property property27 = localDateTime25.millisOfDay();
        java.util.TimeZone timeZone28 = null;
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forTimeZone(timeZone28);
        int int31 = dateTimeZone29.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime32 = org.joda.time.LocalDateTime.now(dateTimeZone29);
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.DateTime dateTime34 = localDateTime32.toDateTime(readableInstant33);
        java.util.TimeZone timeZone35 = null;
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forTimeZone(timeZone35);
        int int38 = dateTimeZone36.getOffset(100L);
        org.joda.time.DateTime dateTime39 = localDateTime32.toDateTime(dateTimeZone36);
        int int40 = property27.compareTo((org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.LocalDateTime localDateTime41 = property27.roundHalfEvenCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.LocalDateTime.Property property43 = localDateTime41.property(dateTimeFieldType42);
        java.util.TimeZone timeZone44 = null;
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forTimeZone(timeZone44);
        int int47 = dateTimeZone45.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime48 = org.joda.time.LocalDateTime.now(dateTimeZone45);
        int int49 = localDateTime48.getWeekyear();
        org.joda.time.LocalDateTime.Property property50 = localDateTime48.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime52 = localDateTime48.minusMillis(2022);
        org.joda.time.ReadablePeriod readablePeriod53 = null;
        org.joda.time.LocalDateTime localDateTime54 = localDateTime52.plus(readablePeriod53);
        org.joda.time.LocalDateTime localDateTime56 = localDateTime54.withCenturyOfEra((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime57 = localDateTime41.withFields((org.joda.time.ReadablePartial) localDateTime56);
        org.joda.time.DateTimeFieldType dateTimeFieldType58 = org.joda.time.DateTimeFieldType.dayOfYear();
        java.lang.String str59 = dateTimeFieldType58.getName();
        org.joda.time.chrono.ISOChronology iSOChronology60 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField61 = iSOChronology60.hourOfHalfday();
        java.lang.String str62 = iSOChronology60.toString();
        org.joda.time.DateTimeField dateTimeField63 = iSOChronology60.era();
        org.joda.time.DurationField durationField64 = iSOChronology60.centuries();
        org.joda.time.ReadablePeriod readablePeriod65 = null;
        long long68 = iSOChronology60.add(readablePeriod65, (long) 2022, (int) (byte) 100);
        org.joda.time.DateTimeField dateTimeField69 = iSOChronology60.dayOfYear();
        org.joda.time.DateTimeField dateTimeField70 = iSOChronology60.yearOfEra();
        org.joda.time.DateTimeField dateTimeField71 = iSOChronology60.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField72 = iSOChronology60.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField73 = dateTimeFieldType58.getField((org.joda.time.Chronology) iSOChronology60);
        org.joda.time.LocalDateTime.Property property74 = localDateTime56.property(dateTimeFieldType58);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter75 = null;
        java.lang.String str76 = localDateTime56.toString(dateTimeFormatter75);
        org.joda.time.LocalDateTime.Property property77 = localDateTime56.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime78 = localDateTime20.withFields((org.joda.time.ReadablePartial) localDateTime56);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime80 = localDateTime20.withEra(356400000);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 356400000 for era must be in the range [0,1]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-3600000) + "'", int3 == (-3600000));
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2022 + "'", int5 == 2022);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3600000) + "'", int11 == (-3600000));
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 20 + "'", int15 == 20);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3600000) + "'", int24 == (-3600000));
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2022 + "'", int26 == 2022);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-3600000) + "'", int31 == (-3600000));
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3600000) + "'", int38 == (-3600000));
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(dateTimeFieldType42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-3600000) + "'", int47 == (-3600000));
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 2022 + "'", int49 == 2022);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(dateTimeFieldType58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "dayOfYear" + "'", str59, "dayOfYear");
        org.junit.Assert.assertNotNull(iSOChronology60);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "ISOChronology[-01:00]" + "'", str62, "ISOChronology[-01:00]");
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertNotNull(durationField64);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 2022L + "'", long68 == 2022L);
        org.junit.Assert.assertNotNull(dateTimeField69);
        org.junit.Assert.assertNotNull(dateTimeField70);
        org.junit.Assert.assertNotNull(dateTimeField71);
        org.junit.Assert.assertNotNull(dateTimeField72);
        org.junit.Assert.assertNotNull(dateTimeField73);
        org.junit.Assert.assertNotNull(property74);
// flaky:         org.junit.Assert.assertEquals("'" + str76 + "' != '" + "0122-02-21T13:54:31.877" + "'", str76, "0122-02-21T13:54:31.877");
        org.junit.Assert.assertNotNull(property77);
        org.junit.Assert.assertNotNull(localDateTime78);
    }

    @Test
    public void test11450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11450");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray5 = localDateTime4.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.plusWeeks(2022);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime4.plusHours((int) '4');
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.plus(readableDuration10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray12 = localDateTime11.getFieldTypes();
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.LocalDateTime localDateTime15 = localDateTime11.withPeriodAdded(readablePeriod13, 0);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime11.plusHours(7097469);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.withMillisOfDay(33);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime21 = localDateTime17.withSecondOfMinute(49996291);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 49996291 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-3600000) + "'", int3 == (-3600000));
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray12);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
    }

    @Test
    public void test11451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11451");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.yearOfEra();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.hourOfDay();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.dayOfMonth();
        org.joda.time.DurationField durationField5 = iSOChronology0.halfdays();
        org.joda.time.DateTimeField dateTimeField6 = iSOChronology0.hourOfHalfday();
        org.joda.time.DurationField durationField7 = iSOChronology0.months();
        org.joda.time.DurationField durationField8 = iSOChronology0.hours();
        java.util.TimeZone timeZone9 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        int int12 = dateTimeZone10.getOffset(100L);
        java.util.TimeZone timeZone13 = dateTimeZone10.toTimeZone();
        java.lang.String str14 = dateTimeZone10.getID();
        java.util.TimeZone timeZone15 = null;
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forTimeZone(timeZone15);
        int int18 = dateTimeZone16.getOffset(100L);
        long long20 = dateTimeZone16.nextTransition((long) (short) -1);
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime(dateTimeZone16);
        long long23 = dateTimeZone10.getMillisKeepLocal(dateTimeZone16, 0L);
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime(dateTimeZone10);
        org.joda.time.Chronology chronology25 = iSOChronology0.withZone(dateTimeZone10);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3600000) + "'", int12 == (-3600000));
        org.junit.Assert.assertNotNull(timeZone13);
        org.junit.Assert.assertEquals(timeZone13.getDisplayName(), "GMT-01:00");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "-01:00" + "'", str14, "-01:00");
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3600000) + "'", int18 == (-3600000));
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-1L) + "'", long20 == (-1L));
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertNotNull(chronology25);
    }

    @Test
    public void test11452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11452");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        org.joda.time.DurationFieldType durationFieldType1 = dateTimeFieldType0.getDurationType();
        org.joda.time.chrono.ISOChronology iSOChronology2 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology2.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology2.yearOfEra();
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology2.weekyearOfCentury();
        java.lang.String str6 = iSOChronology2.toString();
        org.joda.time.DateTimeField dateTimeField7 = iSOChronology2.clockhourOfHalfday();
        java.lang.String str8 = iSOChronology2.toString();
        org.joda.time.DateTimeField dateTimeField9 = iSOChronology2.monthOfYear();
        org.joda.time.DurationField durationField10 = durationFieldType1.getField((org.joda.time.Chronology) iSOChronology2);
        int int12 = durationField10.getValue((long) '4');
        long long15 = durationField10.subtract(7870L, (long) 2899250);
        int int18 = durationField10.getDifference((-58312775471564L), 1645455115799L);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(durationFieldType1);
        org.junit.Assert.assertNotNull(iSOChronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "ISOChronology[-01:00]" + "'", str6, "ISOChronology[-01:00]");
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "ISOChronology[-01:00]" + "'", str8, "ISOChronology[-01:00]");
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-10437299992130L) + "'", long15 == (-10437299992130L));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-16655064) + "'", int18 == (-16655064));
    }

    @Test
    public void test11453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11453");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.yearOfEra();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology0.yearOfEra();
        org.joda.time.LocalDateTime localDateTime6 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) iSOChronology0);
        org.joda.time.DurationField durationField7 = iSOChronology0.minutes();
        org.joda.time.DateTimeField dateTimeField8 = iSOChronology0.secondOfDay();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
    }

    @Test
    public void test11454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11454");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.hourOfHalfday();
        java.lang.String str2 = iSOChronology0.toString();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.year();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.secondOfDay();
        org.joda.time.Chronology chronology5 = iSOChronology0.withUTC();
        org.joda.time.DurationField durationField6 = iSOChronology0.centuries();
        org.joda.time.DateTimeField dateTimeField7 = iSOChronology0.hourOfDay();
        org.joda.time.DurationField durationField8 = iSOChronology0.millis();
        // The following exception was thrown during execution in test generation
        try {
            long long16 = iSOChronology0.getDateTimeMillis(399, 38075, 53480, 2809, 49824466, (int) (short) 100, 50031812);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2809 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ISOChronology[-01:00]" + "'", str2, "ISOChronology[-01:00]");
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
    }

    @Test
    public void test11455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11455");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.weekOfWeekyear();
        java.util.TimeZone timeZone2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone2);
        java.lang.String str5 = dateTimeZone3.getName(31556995199999L);
        org.joda.time.Chronology chronology6 = iSOChronology0.withZone(dateTimeZone3);
        org.joda.time.DateTimeField dateTimeField7 = iSOChronology0.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField8 = iSOChronology0.dayOfWeek();
        org.joda.time.DurationField durationField9 = iSOChronology0.months();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology0.secondOfDay();
        java.lang.String str11 = dateTimeField10.getName();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "-01:00" + "'", str5, "-01:00");
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "secondOfDay" + "'", str11, "secondOfDay");
    }

    @Test
    public void test11456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11456");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray5 = localDateTime4.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.hourOfDay();
        int int7 = localDateTime4.get(dateTimeFieldType6);
        org.joda.time.LocalDateTime.Property property8 = localDateTime4.dayOfWeek();
        boolean boolean9 = property8.isLeap();
        long long10 = property8.remainder();
        org.joda.time.LocalDateTime localDateTime11 = property8.getLocalDateTime();
        org.joda.time.Chronology chronology12 = localDateTime11.getChronology();
        int int13 = localDateTime11.getDayOfYear();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime11.withMillisOfDay(0);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime11.withYear(2963940);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime19 = localDateTime11.withDayOfMonth(53470700);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 53470700 for dayOfMonth must be in the range [1,28]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-3600000) + "'", int3 == (-3600000));
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray5);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 13 + "'", int7 == 13);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long10 + "' != '" + 50074202L + "'", long10 == 50074202L);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 52 + "'", int13 == 52);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
    }

    @Test
    public void test11457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11457");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.weekOfWeekyear();
        java.util.TimeZone timeZone2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone2);
        java.lang.String str5 = dateTimeZone3.getName(31556995199999L);
        org.joda.time.Chronology chronology6 = iSOChronology0.withZone(dateTimeZone3);
        org.joda.time.DateTimeField dateTimeField7 = iSOChronology0.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField8 = iSOChronology0.hourOfHalfday();
        org.joda.time.DurationField durationField9 = iSOChronology0.days();
        int int12 = durationField9.getValue(50001104L, 7418221618194000L);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "-01:00" + "'", str5, "-01:00");
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test11458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11458");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("allemand (53195209)", strMap1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=allemand(53195209)");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test11459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11459");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.yearOfEra();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.weekyearOfCentury();
        java.lang.String str4 = iSOChronology0.toString();
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology0.clockhourOfHalfday();
        org.joda.time.Chronology chronology6 = iSOChronology0.withUTC();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.UTC;
        boolean boolean8 = dateTimeZone7.isFixed();
        org.joda.time.Chronology chronology9 = iSOChronology0.withZone(dateTimeZone7);
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        long long13 = iSOChronology0.add(readablePeriod10, (long) 19, 0);
        org.joda.time.DurationField durationField14 = iSOChronology0.seconds();
        org.joda.time.LocalDateTime localDateTime15 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) iSOChronology0);
        org.joda.time.Chronology chronology16 = localDateTime15.getChronology();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "ISOChronology[-01:00]" + "'", str4, "ISOChronology[-01:00]");
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 19L + "'", long13 == 19L);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(chronology16);
    }

    @Test
    public void test11460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11460");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime5 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusMinutes((int) ' ');
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.LocalDateTime localDateTime9 = localDateTime5.plus(readablePeriod8);
        org.joda.time.LocalDateTime.Property property10 = localDateTime5.dayOfMonth();
        boolean boolean11 = property10.isLeap();
        int int12 = property10.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime13 = property10.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime15 = property14.getLocalDateTime();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-3600000) + "'", int3 == (-3600000));
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDateTime15);
    }

    @Test
    public void test11461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11461");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(2843364, 2935067, 365, (int) 'a', 3033166);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 97 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test11462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11462");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet1 = locale0.getExtensionKeys();
        java.util.Iterator<java.lang.Character> charItor2 = charSet1.iterator();
        java.util.Locale locale3 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet4 = locale3.getExtensionKeys();
        java.util.Iterator<java.lang.Character> charItor5 = charSet4.iterator();
        java.util.ArrayList[] arrayListArray7 = new java.util.ArrayList[0];
        @SuppressWarnings("unchecked")
        java.util.ArrayList<java.util.Locale.LanguageRange>[] languageRangeListArray8 = (java.util.ArrayList<java.util.Locale.LanguageRange>[]) arrayListArray7;
        java.util.ArrayList<java.util.Locale.LanguageRange>[] languageRangeListArray9 = charSet4.toArray((java.util.ArrayList<java.util.Locale.LanguageRange>[]) arrayListArray7);
        java.util.stream.Stream<java.lang.Character> charStream10 = charSet4.stream();
        java.util.Locale locale11 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet12 = locale11.getExtensionKeys();
        java.util.Iterator<java.lang.Character> charItor13 = charSet12.iterator();
        java.util.Locale locale14 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet15 = locale14.getExtensionKeys();
        java.util.Iterator<java.lang.Character> charItor16 = charSet15.iterator();
        boolean boolean17 = charSet12.containsAll((java.util.Collection<java.lang.Character>) charSet15);
        java.util.TimeZone timeZone18 = null;
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forTimeZone(timeZone18);
        int int21 = dateTimeZone19.getOffset(100L);
        java.util.TimeZone timeZone22 = dateTimeZone19.toTimeZone();
        org.joda.time.DateTimeZone[] dateTimeZoneArray23 = new org.joda.time.DateTimeZone[] { dateTimeZone19 };
        org.joda.time.DateTimeZone[] dateTimeZoneArray24 = charSet15.toArray(dateTimeZoneArray23);
        java.util.Locale locale25 = java.util.Locale.GERMAN;
        java.lang.String str26 = locale25.getDisplayScript();
        java.lang.String str28 = locale25.getExtension('x');
        java.util.Set<java.lang.Character> charSet29 = locale25.getExtensionKeys();
        boolean boolean30 = charSet15.retainAll((java.util.Collection<java.lang.Character>) charSet29);
        boolean boolean31 = charSet4.addAll((java.util.Collection<java.lang.Character>) charSet29);
        org.joda.time.chrono.ISOChronology iSOChronology32 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField33 = iSOChronology32.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField34 = iSOChronology32.yearOfEra();
        org.joda.time.DateTimeField dateTimeField35 = iSOChronology32.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField36 = iSOChronology32.weekOfWeekyear();
        org.joda.time.chrono.ISOChronology iSOChronology37 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField38 = iSOChronology37.hourOfHalfday();
        org.joda.time.tz.NameProvider nameProvider39 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale40 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet41 = locale40.getExtensionKeys();
        java.lang.String str44 = nameProvider39.getShortName(locale40, "Koordinierte Universalzeit", "+00:00");
        java.util.Locale locale45 = java.util.Locale.GERMAN;
        java.lang.String str48 = nameProvider39.getShortName(locale45, "53167803", "jpn");
        int int49 = dateTimeField38.getMaximumTextLength(locale45);
        int int50 = dateTimeField36.getMaximumTextLength(locale45);
        java.util.Set<java.lang.Character> charSet51 = locale45.getExtensionKeys();
        boolean boolean52 = charSet29.removeAll((java.util.Collection<java.lang.Character>) charSet51);
        boolean boolean53 = charSet1.addAll((java.util.Collection<java.lang.Character>) charSet29);
        java.util.Iterator<java.lang.Character> charItor54 = charSet29.iterator();
        boolean boolean56 = charSet29.equals((java.lang.Object) 2865453L);
        java.util.stream.Stream<java.lang.Character> charStream57 = charSet29.parallelStream();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet1);
        org.junit.Assert.assertNotNull(charItor2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet4);
        org.junit.Assert.assertNotNull(charItor5);
        org.junit.Assert.assertNotNull(arrayListArray7);
        org.junit.Assert.assertNotNull(languageRangeListArray8);
        org.junit.Assert.assertNotNull(languageRangeListArray9);
        org.junit.Assert.assertNotNull(charStream10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet12);
        org.junit.Assert.assertNotNull(charItor13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet15);
        org.junit.Assert.assertNotNull(charItor16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-3600000) + "'", int21 == (-3600000));
        org.junit.Assert.assertNotNull(timeZone22);
        org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "GMT-01:00");
        org.junit.Assert.assertNotNull(dateTimeZoneArray23);
        org.junit.Assert.assertNotNull(dateTimeZoneArray24);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "de");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(charSet29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(iSOChronology32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(iSOChronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(nameProvider39);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet41);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "de");
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 2 + "'", int49 == 2);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2 + "'", int50 == 2);
        org.junit.Assert.assertNotNull(charSet51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(charItor54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(charStream57);
    }

    @Test
    public void test11463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11463");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffset(100L);
        java.util.TimeZone timeZone4 = dateTimeZone1.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forTimeZone(timeZone4);
        timeZone4.setID("");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str10 = timeZone4.getDisplayName(false, 3188319);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal style: 3188319");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-3600000) + "'", int3 == (-3600000));
        org.junit.Assert.assertNotNull(timeZone4);
        org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "GMT-01:00");
        org.junit.Assert.assertNotNull(dateTimeZone5);
    }

    @Test
    public void test11464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11464");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.DateTime dateTime6 = localDateTime4.toDateTime(readableInstant5);
        org.joda.time.Chronology chronology7 = dateTime6.getChronology();
        org.joda.time.DurationField durationField8 = chronology7.hours();
        org.joda.time.DateTimeField dateTimeField9 = chronology7.hourOfDay();
        org.joda.time.DurationField durationField10 = dateTimeField9.getRangeDurationField();
        int int11 = dateTimeField9.getMaximumValue();
        java.lang.String str12 = dateTimeField9.getName();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-3600000) + "'", int3 == (-3600000));
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 23 + "'", int11 == 23);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hourOfDay" + "'", str12, "hourOfDay");
    }

    @Test
    public void test11465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11465");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setExtension('x', "jpn");
        java.util.Locale locale4 = java.util.Locale.GERMAN;
        java.util.Locale locale5 = java.util.Locale.GERMAN;
        java.lang.String str6 = locale4.getDisplayCountry(locale5);
        java.util.Locale locale7 = locale4.stripExtensions();
        java.lang.String str8 = locale4.getDisplayName();
        java.util.Locale.Builder builder9 = builder3.setLocale(locale4);
        java.util.Locale.Builder builder12 = builder9.setUnicodeLocaleKeyword("22", "deu");
        java.util.Locale locale13 = java.util.Locale.ENGLISH;
        java.lang.String str14 = locale13.getDisplayCountry();
        java.util.Locale.setDefault(locale13);
        java.util.Locale.Builder builder16 = builder9.setLocale(locale13);
        java.util.Locale.Builder builder18 = builder16.setScript("");
        java.util.Locale.Builder builder19 = builder16.clearExtensions();
        java.util.Locale.Builder builder20 = builder19.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder23 = builder20.setUnicodeLocaleKeyword("GBR", "2853941");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale keyword key: GBR [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "de");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "de");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "German" + "'", str8, "German");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "en");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder20);
    }

    @Test
    public void test11466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11466");
        org.joda.time.tz.NameProvider nameProvider0 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.DateTimeZone.setNameProvider(nameProvider0);
        java.util.TimeZone timeZone2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone2);
        int int5 = dateTimeZone3.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime6 = org.joda.time.LocalDateTime.now(dateTimeZone3);
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.DateTime dateTime8 = localDateTime6.toDateTime(readableInstant7);
        org.joda.time.Chronology chronology9 = dateTime8.getChronology();
        org.joda.time.DurationField durationField10 = chronology9.hours();
        org.joda.time.DurationField durationField11 = chronology9.months();
        org.joda.time.DateTimeField dateTimeField12 = chronology9.dayOfYear();
        java.util.TimeZone timeZone13 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forTimeZone(timeZone13);
        int int16 = dateTimeZone14.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime17 = org.joda.time.LocalDateTime.now(dateTimeZone14);
        int[] intArray20 = new int[] { (short) 0, (short) 0 };
        int int21 = dateTimeField12.getMinimumValue((org.joda.time.ReadablePartial) localDateTime17, intArray20);
        java.lang.String str23 = dateTimeField12.getAsShortText((long) 53166088);
        java.util.TimeZone timeZone24 = null;
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forTimeZone(timeZone24);
        int int27 = dateTimeZone25.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime28 = org.joda.time.LocalDateTime.now(dateTimeZone25);
        int int29 = localDateTime28.getWeekyear();
        org.joda.time.DurationFieldType durationFieldType30 = org.joda.time.DurationFieldType.days();
        org.joda.time.LocalDateTime localDateTime32 = localDateTime28.withFieldAdded(durationFieldType30, 53166088);
        java.util.Locale locale33 = java.util.Locale.ROOT;
        java.lang.String str34 = dateTimeField12.getAsShortText((org.joda.time.ReadablePartial) localDateTime32, locale33);
        java.lang.String str37 = nameProvider0.getShortName(locale33, "53169175", "+00:00");
        java.util.Locale locale38 = java.util.Locale.GERMAN;
        java.lang.String str39 = locale38.getDisplayScript();
        java.lang.String str42 = nameProvider0.getName(locale38, "era", "12");
        org.joda.time.DateTimeZone.setNameProvider(nameProvider0);
        org.joda.time.chrono.ISOChronology iSOChronology44 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField45 = iSOChronology44.hourOfHalfday();
        java.lang.String str46 = iSOChronology44.toString();
        org.joda.time.DateTimeField dateTimeField47 = iSOChronology44.era();
        org.joda.time.DurationField durationField48 = iSOChronology44.centuries();
        org.joda.time.ReadablePeriod readablePeriod49 = null;
        long long52 = iSOChronology44.add(readablePeriod49, (long) 2022, (int) (byte) 100);
        org.joda.time.DateTimeField dateTimeField53 = iSOChronology44.hourOfDay();
        org.joda.time.tz.NameProvider nameProvider54 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale55 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet56 = locale55.getExtensionKeys();
        java.lang.String str59 = nameProvider54.getShortName(locale55, "Koordinierte Universalzeit", "+00:00");
        int int60 = dateTimeField53.getMaximumTextLength(locale55);
        java.lang.String str61 = locale55.getISO3Country();
        org.joda.time.chrono.ISOChronology iSOChronology62 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField63 = iSOChronology62.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField64 = iSOChronology62.centuryOfEra();
        org.joda.time.DurationField durationField65 = iSOChronology62.centuries();
        org.joda.time.DurationField durationField66 = iSOChronology62.hours();
        java.util.TimeZone timeZone67 = null;
        org.joda.time.DateTimeZone dateTimeZone68 = org.joda.time.DateTimeZone.forTimeZone(timeZone67);
        int int70 = dateTimeZone68.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime71 = org.joda.time.LocalDateTime.now(dateTimeZone68);
        int int72 = localDateTime71.getDayOfYear();
        org.joda.time.LocalDateTime localDateTime74 = localDateTime71.withYearOfEra(2022);
        long long76 = iSOChronology62.set((org.joda.time.ReadablePartial) localDateTime74, (long) 0);
        org.joda.time.DateTimeField dateTimeField77 = iSOChronology62.monthOfYear();
        org.joda.time.DateTimeField dateTimeField78 = iSOChronology62.clockhourOfDay();
        long long80 = dateTimeField78.roundFloor(3155695200000L);
        java.util.Locale locale82 = java.util.Locale.GERMAN;
        java.util.Locale locale83 = java.util.Locale.GERMAN;
        java.lang.String str84 = locale82.getDisplayCountry(locale83);
        java.util.Locale locale85 = locale82.stripExtensions();
        java.util.Locale.setDefault(locale82);
        java.lang.String str87 = dateTimeField78.getAsText(1644849991855L, locale82);
        java.lang.String str88 = locale55.getDisplayScript(locale82);
        java.lang.String str89 = locale82.getDisplayLanguage();
        java.lang.String str92 = nameProvider0.getShortName(locale82, "2022-02-22T00:48:40.753", "ISOChronology[+10:00]");
        org.joda.time.DateTimeZone.setNameProvider(nameProvider0);
        org.joda.time.DateTimeZone.setNameProvider(nameProvider0);
        org.junit.Assert.assertNotNull(nameProvider0);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3600000) + "'", int5 == (-3600000));
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3600000) + "'", int16 == (-3600000));
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[0, 0]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "1" + "'", str23, "1");
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3600000) + "'", int27 == (-3600000));
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2022 + "'", int29 == 2022);
        org.junit.Assert.assertNotNull(durationFieldType30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "346" + "'", str34, "346");
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "de");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(iSOChronology44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "ISOChronology[-01:00]" + "'", str46, "ISOChronology[-01:00]");
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(durationField48);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 2022L + "'", long52 == 2022L);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(nameProvider54);
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet56);
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 2 + "'", int60 == 2);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertNotNull(iSOChronology62);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertNotNull(durationField65);
        org.junit.Assert.assertNotNull(durationField66);
        org.junit.Assert.assertNotNull(dateTimeZone68);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-3600000) + "'", int70 == (-3600000));
        org.junit.Assert.assertNotNull(localDateTime71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 52 + "'", int72 == 52);
        org.junit.Assert.assertNotNull(localDateTime74);
// flaky:         org.junit.Assert.assertTrue("'" + long76 + "' != '" + 1645455274438L + "'", long76 == 1645455274438L);
        org.junit.Assert.assertNotNull(dateTimeField77);
        org.junit.Assert.assertNotNull(dateTimeField78);
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + 3155695200000L + "'", long80 == 3155695200000L);
        org.junit.Assert.assertNotNull(locale82);
        org.junit.Assert.assertEquals(locale82.toString(), "de");
        org.junit.Assert.assertNotNull(locale83);
        org.junit.Assert.assertEquals(locale83.toString(), "de");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "" + "'", str84, "");
        org.junit.Assert.assertNotNull(locale85);
        org.junit.Assert.assertEquals(locale85.toString(), "de");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "13" + "'", str87, "13");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "" + "'", str88, "");
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "Deutsch" + "'", str89, "Deutsch");
        org.junit.Assert.assertNull(str92);
    }

    @Test
    public void test11467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11467");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.minuteOfHour();
        org.joda.time.Chronology chronology4 = iSOChronology0.withUTC();
        org.joda.time.DurationField durationField5 = iSOChronology0.eras();
        org.joda.time.DateTimeField dateTimeField6 = iSOChronology0.era();
        org.joda.time.DateTimeField dateTimeField7 = iSOChronology0.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField8 = iSOChronology0.millisOfDay();
        org.joda.time.DateTimeField dateTimeField9 = iSOChronology0.millisOfDay();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
    }

    @Test
    public void test11468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11468");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray5 = localDateTime4.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.hourOfDay();
        int int7 = localDateTime4.get(dateTimeFieldType6);
        org.joda.time.LocalDateTime.Property property8 = localDateTime4.dayOfWeek();
        boolean boolean9 = property8.isLeap();
        long long10 = property8.remainder();
        org.joda.time.LocalDateTime localDateTime11 = property8.getLocalDateTime();
        org.joda.time.Chronology chronology12 = localDateTime11.getChronology();
        java.util.TimeZone timeZone13 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forTimeZone(timeZone13);
        int int16 = dateTimeZone14.getOffset(100L);
        java.util.TimeZone timeZone17 = dateTimeZone14.toTimeZone();
        java.lang.String str18 = dateTimeZone14.getID();
        java.util.TimeZone timeZone19 = dateTimeZone14.toTimeZone();
        long long21 = dateTimeZone14.nextTransition((long) 100);
        java.lang.String str23 = dateTimeZone14.getNameKey(1645454778469L);
        org.joda.time.DateTime dateTime24 = localDateTime11.toDateTime(dateTimeZone14);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DurationFieldType durationFieldType26 = dateTimeFieldType25.getDurationType();
        boolean boolean27 = dateTime24.isSupported(dateTimeFieldType25);
        java.util.TimeZone timeZone28 = null;
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forTimeZone(timeZone28);
        int int31 = dateTimeZone29.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime32 = org.joda.time.LocalDateTime.now(dateTimeZone29);
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.DateTime dateTime34 = localDateTime32.toDateTime(readableInstant33);
        java.util.TimeZone timeZone35 = null;
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forTimeZone(timeZone35);
        int int38 = dateTimeZone36.getOffset(100L);
        java.util.TimeZone timeZone39 = dateTimeZone36.toTimeZone();
        int int41 = dateTimeZone36.getStandardOffset((long) ' ');
        boolean boolean43 = dateTimeZone36.isStandardOffset((long) '4');
        boolean boolean44 = dateTimeZone36.isFixed();
        long long46 = dateTimeZone36.convertUTCToLocal(0L);
        boolean boolean47 = dateTimeZone36.isFixed();
        org.joda.time.DateTime dateTime48 = localDateTime32.toDateTime(dateTimeZone36);
        boolean boolean49 = dateTime24.isBefore((org.joda.time.ReadableInstant) dateTime48);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-3600000) + "'", int3 == (-3600000));
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray5);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 13 + "'", int7 == 13);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long10 + "' != '" + 50074510L + "'", long10 == 50074510L);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3600000) + "'", int16 == (-3600000));
        org.junit.Assert.assertNotNull(timeZone17);
        org.junit.Assert.assertEquals(timeZone17.getDisplayName(), "GMT-01:00");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "-01:00" + "'", str18, "-01:00");
        org.junit.Assert.assertNotNull(timeZone19);
        org.junit.Assert.assertEquals(timeZone19.getDisplayName(), "GMT-01:00");
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 100L + "'", long21 == 100L);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertNotNull(durationFieldType26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-3600000) + "'", int31 == (-3600000));
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3600000) + "'", int38 == (-3600000));
        org.junit.Assert.assertNotNull(timeZone39);
        org.junit.Assert.assertEquals(timeZone39.getDisplayName(), "GMT-01:00");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-3600000) + "'", int41 == (-3600000));
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + (-3600000L) + "'", long46 == (-3600000L));
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(dateTime48);
// flaky:         org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test11469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11469");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.centuryOfEra();
        org.joda.time.DurationField durationField3 = iSOChronology0.centuries();
        org.joda.time.DurationField durationField4 = iSOChronology0.hours();
        org.joda.time.DurationField durationField5 = iSOChronology0.years();
        org.joda.time.DurationField durationField6 = iSOChronology0.halfdays();
        org.joda.time.DateTimeField dateTimeField7 = iSOChronology0.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone8 = iSOChronology0.getZone();
        org.joda.time.LocalDateTime localDateTime9 = org.joda.time.LocalDateTime.now();
        java.util.TimeZone timeZone10 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        int int13 = dateTimeZone11.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime14 = org.joda.time.LocalDateTime.now(dateTimeZone11);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray15 = localDateTime14.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.hourOfDay();
        int int17 = localDateTime14.get(dateTimeFieldType16);
        org.joda.time.LocalDateTime.Property property18 = localDateTime14.dayOfWeek();
        boolean boolean19 = localDateTime9.isEqual((org.joda.time.ReadablePartial) localDateTime14);
        org.joda.time.LocalDateTime.Property property20 = localDateTime14.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime14.withYearOfEra((int) (byte) 10);
        boolean boolean23 = dateTimeZone8.equals((java.lang.Object) localDateTime22);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime22.withYearOfCentury((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime22.plusHours(49623);
        org.joda.time.chrono.ISOChronology iSOChronology28 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField29 = iSOChronology28.hourOfHalfday();
        java.lang.String str30 = iSOChronology28.toString();
        org.joda.time.DateTimeField dateTimeField31 = iSOChronology28.era();
        org.joda.time.DateTimeZone dateTimeZone32 = iSOChronology28.getZone();
        long long35 = dateTimeZone32.convertLocalToUTC(1645454771211L, false);
        org.joda.time.DateTime dateTime36 = localDateTime27.toDateTime(dateTimeZone32);
        long long37 = dateTime36.getMillis();
        java.util.TimeZone timeZone38 = null;
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forTimeZone(timeZone38);
        int int41 = dateTimeZone39.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime42 = org.joda.time.LocalDateTime.now(dateTimeZone39);
        int int43 = localDateTime42.getWeekyear();
        org.joda.time.LocalDateTime.Property property44 = localDateTime42.millisOfDay();
        java.lang.String str45 = property44.getAsString();
        java.util.TimeZone timeZone46 = null;
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.forTimeZone(timeZone46);
        int int49 = dateTimeZone47.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime50 = org.joda.time.LocalDateTime.now(dateTimeZone47);
        org.joda.time.ReadableInstant readableInstant51 = null;
        org.joda.time.DateTime dateTime52 = localDateTime50.toDateTime(readableInstant51);
        org.joda.time.Instant instant53 = dateTime52.toInstant();
        long long54 = property44.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime52);
        org.joda.time.Instant instant55 = dateTime52.toInstant();
        int int56 = dateTime36.compareTo((org.joda.time.ReadableInstant) dateTime52);
        org.joda.time.Instant instant57 = dateTime52.toInstant();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3600000) + "'", int13 == (-3600000));
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray15);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
// flaky:         org.junit.Assert.assertTrue("'" + int17 + "' != '" + 13 + "'", int17 == 13);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(iSOChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "ISOChronology[-01:00]" + "'", str30, "ISOChronology[-01:00]");
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 1645458371211L + "'", long35 == 1645458371211L);
        org.junit.Assert.assertNotNull(dateTime36);
// flaky:         org.junit.Assert.assertTrue("'" + long37 + "' != '" + (-61668497125453L) + "'", long37 == (-61668497125453L));
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-3600000) + "'", int41 == (-3600000));
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2022 + "'", int43 == 2022);
        org.junit.Assert.assertNotNull(property44);
// flaky:         org.junit.Assert.assertEquals("'" + str45 + "' != '" + "50074547" + "'", str45, "50074547");
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-3600000) + "'", int49 == (-3600000));
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(instant53);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + (-3600000L) + "'", long54 == (-3600000L));
        org.junit.Assert.assertNotNull(instant55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertNotNull(instant57);
    }

    @Test
    public void test11470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11470");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.chrono.ISOChronology iSOChronology1 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology1.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology1.centuryOfEra();
        org.joda.time.DurationField durationField4 = iSOChronology1.centuries();
        org.joda.time.DurationField durationField5 = iSOChronology1.hours();
        boolean boolean6 = dateTimeFieldType0.isSupported((org.joda.time.Chronology) iSOChronology1);
        org.joda.time.DurationField durationField7 = iSOChronology1.millis();
        org.joda.time.DateTimeField dateTimeField8 = iSOChronology1.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField9 = iSOChronology1.centuryOfEra();
        org.joda.time.Chronology chronology10 = iSOChronology1.withUTC();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(iSOChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(chronology10);
    }

    @Test
    public void test11471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11471");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.hourOfHalfday();
        java.lang.String str2 = iSOChronology0.toString();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.era();
        java.util.TimeZone timeZone4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forTimeZone(timeZone4);
        int int7 = dateTimeZone5.getOffset(100L);
        java.util.TimeZone timeZone8 = dateTimeZone5.toTimeZone();
        java.lang.String str9 = dateTimeZone5.toString();
        org.joda.time.Chronology chronology10 = iSOChronology0.withZone(dateTimeZone5);
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology0.weekyearOfCentury();
        org.joda.time.DurationField durationField12 = iSOChronology0.minutes();
        long long14 = durationField12.getMillis((int) (short) 0);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ISOChronology[-01:00]" + "'", str2, "ISOChronology[-01:00]");
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3600000) + "'", int7 == (-3600000));
        org.junit.Assert.assertNotNull(timeZone8);
        org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "GMT-01:00");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "-01:00" + "'", str9, "-01:00");
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
    }

    @Test
    public void test11472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11472");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours(53478);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Offset is too large");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test11473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11473");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.DateTime dateTime6 = localDateTime4.toDateTime(readableInstant5);
        org.joda.time.Chronology chronology7 = dateTime6.getChronology();
        org.joda.time.DurationField durationField8 = chronology7.hours();
        org.joda.time.DateTimeField dateTimeField9 = chronology7.hourOfDay();
        org.joda.time.DurationField durationField10 = dateTimeField9.getRangeDurationField();
        int int13 = dateTimeField9.getDifference(57854412600L, 34922022L);
        java.util.TimeZone timeZone14 = null;
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forTimeZone(timeZone14);
        int int17 = dateTimeZone15.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime18 = org.joda.time.LocalDateTime.now(dateTimeZone15);
        int int19 = localDateTime18.getDayOfYear();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime18.withYearOfEra(2022);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.minusHours(49690248);
        java.util.TimeZone timeZone25 = null;
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forTimeZone(timeZone25);
        int int28 = dateTimeZone26.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime29 = org.joda.time.LocalDateTime.now(dateTimeZone26);
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.DateTime dateTime31 = localDateTime29.toDateTime(readableInstant30);
        java.util.TimeZone timeZone32 = null;
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forTimeZone(timeZone32);
        int int35 = dateTimeZone33.getOffset(100L);
        org.joda.time.DateTime dateTime36 = localDateTime29.toDateTime(dateTimeZone33);
        org.joda.time.LocalDateTime.Property property37 = localDateTime29.monthOfYear();
        org.joda.time.LocalDateTime localDateTime39 = localDateTime29.minusHours(53183117);
        int[] intArray40 = localDateTime29.getValues();
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray42 = dateTimeField9.add((org.joda.time.ReadablePartial) localDateTime21, 49847546, intArray40, 785822831);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 49847546");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-3600000) + "'", int3 == (-3600000));
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 16060 + "'", int13 == 16060);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3600000) + "'", int17 == (-3600000));
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 52 + "'", int19 == 52);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3600000) + "'", int28 == (-3600000));
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3600000) + "'", int35 == (-3600000));
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(intArray40);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[2022, 2, 21, 50074669]");
    }

    @Test
    public void test11474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11474");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffset(100L);
        java.util.TimeZone timeZone4 = dateTimeZone1.toTimeZone();
        java.lang.String str5 = dateTimeZone1.getID();
        java.util.TimeZone timeZone6 = dateTimeZone1.toTimeZone();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime(dateTimeZone1);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.plus(readablePeriod8);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime7.withCenturyOfEra(2972);
        org.joda.time.LocalDateTime.Property property12 = localDateTime7.dayOfMonth();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-3600000) + "'", int3 == (-3600000));
        org.junit.Assert.assertNotNull(timeZone4);
        org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "GMT-01:00");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "-01:00" + "'", str5, "-01:00");
        org.junit.Assert.assertNotNull(timeZone6);
        org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "GMT-01:00");
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
    }

    @Test
    public void test11475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11475");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.centuryOfEra();
        org.joda.time.DurationField durationField3 = iSOChronology0.centuries();
        org.joda.time.DurationField durationField4 = iSOChronology0.halfdays();
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology0.weekyear();
        org.joda.time.DateTimeField dateTimeField6 = iSOChronology0.dayOfYear();
        org.joda.time.DurationField durationField7 = iSOChronology0.weeks();
        org.joda.time.DateTimeField dateTimeField8 = iSOChronology0.millisOfDay();
        long long11 = dateTimeField8.add((long) 49900647, 49787918);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 99688565L + "'", long11 == 99688565L);
    }

    @Test
    public void test11476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11476");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.centuryOfEra();
        org.joda.time.DurationField durationField3 = iSOChronology0.seconds();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology0.minuteOfDay();
        java.lang.String str6 = iSOChronology0.toString();
        org.joda.time.DateTimeField dateTimeField7 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField8 = iSOChronology0.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField9 = iSOChronology0.weekOfWeekyear();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "ISOChronology[-01:00]" + "'", str6, "ISOChronology[-01:00]");
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
    }

    @Test
    public void test11477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11477");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        long long6 = iSOChronology0.add(readablePeriod3, (long) 100, 11);
        org.joda.time.Chronology chronology7 = iSOChronology0.withUTC();
        org.joda.time.DateTimeField dateTimeField8 = iSOChronology0.hourOfHalfday();
        org.joda.time.chrono.ISOChronology iSOChronology9 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology9.hourOfHalfday();
        java.lang.String str11 = iSOChronology9.toString();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology9.era();
        org.joda.time.DurationField durationField13 = iSOChronology9.centuries();
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        long long17 = iSOChronology9.add(readablePeriod14, (long) 2022, (int) (byte) 100);
        org.joda.time.DateTimeZone dateTimeZone18 = iSOChronology9.getZone();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology9.yearOfEra();
        org.joda.time.chrono.ISOChronology iSOChronology20 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField21 = iSOChronology20.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField22 = iSOChronology20.yearOfEra();
        org.joda.time.DateTimeField dateTimeField23 = iSOChronology20.weekyearOfCentury();
        org.joda.time.DurationField durationField24 = iSOChronology20.weeks();
        org.joda.time.DateTimeField dateTimeField25 = iSOChronology20.yearOfEra();
        org.joda.time.DurationField durationField26 = iSOChronology20.centuries();
        org.joda.time.DurationField durationField27 = iSOChronology20.hours();
        org.joda.time.LocalDateTime localDateTime28 = org.joda.time.LocalDateTime.now();
        java.util.TimeZone timeZone29 = null;
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forTimeZone(timeZone29);
        int int32 = dateTimeZone30.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime33 = org.joda.time.LocalDateTime.now(dateTimeZone30);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray34 = localDateTime33.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = org.joda.time.DateTimeFieldType.hourOfDay();
        int int36 = localDateTime33.get(dateTimeFieldType35);
        org.joda.time.LocalDateTime.Property property37 = localDateTime33.dayOfWeek();
        boolean boolean38 = localDateTime28.isEqual((org.joda.time.ReadablePartial) localDateTime33);
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.chrono.ISOChronology iSOChronology40 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField41 = iSOChronology40.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField42 = iSOChronology40.centuryOfEra();
        org.joda.time.DurationField durationField43 = iSOChronology40.seconds();
        org.joda.time.DateTimeField dateTimeField44 = iSOChronology40.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField45 = iSOChronology40.hourOfHalfday();
        java.util.TimeZone timeZone46 = null;
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.forTimeZone(timeZone46);
        int int49 = dateTimeZone47.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime50 = org.joda.time.LocalDateTime.now(dateTimeZone47);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray51 = localDateTime50.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType52 = org.joda.time.DateTimeFieldType.hourOfDay();
        int int53 = localDateTime50.get(dateTimeFieldType52);
        org.joda.time.LocalDateTime localDateTime55 = localDateTime50.minusWeeks(1);
        long long57 = iSOChronology40.set((org.joda.time.ReadablePartial) localDateTime55, (long) 0);
        boolean boolean58 = dateTimeFieldType39.isSupported((org.joda.time.Chronology) iSOChronology40);
        int int59 = localDateTime28.get(dateTimeFieldType39);
        java.util.TimeZone timeZone60 = null;
        org.joda.time.DateTimeZone dateTimeZone61 = org.joda.time.DateTimeZone.forTimeZone(timeZone60);
        int int63 = dateTimeZone61.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime64 = org.joda.time.LocalDateTime.now(dateTimeZone61);
        int int65 = localDateTime64.getWeekyear();
        org.joda.time.LocalDateTime.Property property66 = localDateTime64.millisOfDay();
        java.util.Locale locale67 = java.util.Locale.GERMAN;
        java.util.Locale locale68 = java.util.Locale.GERMAN;
        java.lang.String str69 = locale67.getDisplayCountry(locale68);
        java.util.Locale locale70 = locale67.stripExtensions();
        int int71 = property66.getMaximumShortTextLength(locale67);
        org.joda.time.Interval interval72 = property66.toInterval();
        org.joda.time.LocalDateTime localDateTime73 = property66.getLocalDateTime();
        int int74 = localDateTime73.getYearOfEra();
        int int75 = localDateTime73.getCenturyOfEra();
        int int76 = localDateTime28.compareTo((org.joda.time.ReadablePartial) localDateTime73);
        int int77 = localDateTime28.getWeekOfWeekyear();
        int[] intArray79 = iSOChronology20.get((org.joda.time.ReadablePartial) localDateTime28, 0L);
        int int80 = dateTimeField19.getMaximumValue((org.joda.time.ReadablePartial) localDateTime28);
        long long82 = iSOChronology0.set((org.joda.time.ReadablePartial) localDateTime28, 1644850283445L);
        org.joda.time.LocalDateTime.Property property83 = localDateTime28.yearOfEra();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 100L + "'", long6 == 100L);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(iSOChronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "ISOChronology[-01:00]" + "'", str11, "ISOChronology[-01:00]");
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 2022L + "'", long17 == 2022L);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(iSOChronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3600000) + "'", int32 == (-3600000));
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray34);
        org.junit.Assert.assertNotNull(dateTimeFieldType35);
// flaky:         org.junit.Assert.assertTrue("'" + int36 + "' != '" + 13 + "'", int36 == 13);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertNotNull(iSOChronology40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(durationField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-3600000) + "'", int49 == (-3600000));
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray51);
        org.junit.Assert.assertNotNull(dateTimeFieldType52);
// flaky:         org.junit.Assert.assertTrue("'" + int53 + "' != '" + 13 + "'", int53 == 13);
        org.junit.Assert.assertNotNull(localDateTime55);
// flaky:         org.junit.Assert.assertTrue("'" + long57 + "' != '" + 1644850474765L + "'", long57 == 1644850474765L);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int59 + "' != '" + 50074 + "'", int59 == 50074);
        org.junit.Assert.assertNotNull(dateTimeZone61);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-3600000) + "'", int63 == (-3600000));
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 2022 + "'", int65 == 2022);
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "de");
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "de");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "de");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 8 + "'", int71 == 8);
        org.junit.Assert.assertNotNull(interval72);
        org.junit.Assert.assertNotNull(localDateTime73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 2022 + "'", int74 == 2022);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 20 + "'", int75 == 20);
// flaky:         org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 8 + "'", int77 == 8);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[1969, 12, 31, 82800000]");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 292278993 + "'", int80 == 292278993);
// flaky:         org.junit.Assert.assertTrue("'" + long82 + "' != '" + 1645455274765L + "'", long82 == 1645455274765L);
        org.junit.Assert.assertNotNull(property83);
    }

    @Test
    public void test11478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11478");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.yearOfEra();
        org.joda.time.DurationField durationField3 = iSOChronology0.minutes();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.weekyear();
        org.joda.time.DurationField durationField5 = iSOChronology0.centuries();
        org.joda.time.DateTimeField dateTimeField6 = iSOChronology0.centuryOfEra();
        org.joda.time.DurationField durationField7 = iSOChronology0.minutes();
        org.joda.time.DateTimeField dateTimeField8 = iSOChronology0.weekyear();
        java.util.TimeZone timeZone9 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        int int12 = dateTimeZone10.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime13 = org.joda.time.LocalDateTime.now(dateTimeZone10);
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.DateTime dateTime15 = localDateTime13.toDateTime(readableInstant14);
        org.joda.time.Chronology chronology16 = dateTime15.getChronology();
        org.joda.time.DurationField durationField17 = chronology16.hours();
        org.joda.time.DurationField durationField18 = chronology16.months();
        org.joda.time.DateTimeField dateTimeField19 = chronology16.dayOfYear();
        java.util.TimeZone timeZone20 = null;
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forTimeZone(timeZone20);
        int int23 = dateTimeZone21.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime24 = org.joda.time.LocalDateTime.now(dateTimeZone21);
        int[] intArray27 = new int[] { (short) 0, (short) 0 };
        int int28 = dateTimeField19.getMinimumValue((org.joda.time.ReadablePartial) localDateTime24, intArray27);
        int int30 = dateTimeField19.getMinimumValue((long) 100);
        java.util.TimeZone timeZone31 = null;
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forTimeZone(timeZone31);
        int int34 = dateTimeZone32.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime35 = org.joda.time.LocalDateTime.now(dateTimeZone32);
        int int36 = localDateTime35.getWeekyear();
        org.joda.time.LocalDateTime.Property property37 = localDateTime35.minuteOfHour();
        int int38 = dateTimeField19.getMaximumValue((org.joda.time.ReadablePartial) localDateTime35);
        long long40 = iSOChronology0.set((org.joda.time.ReadablePartial) localDateTime35, 4473991927716100L);
        org.joda.time.DurationField durationField41 = iSOChronology0.months();
        org.joda.time.DateTimeField dateTimeField42 = iSOChronology0.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField43 = iSOChronology0.millisOfDay();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3600000) + "'", int12 == (-3600000));
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-3600000) + "'", int23 == (-3600000));
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[0, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3600000) + "'", int34 == (-3600000));
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2022 + "'", int36 == 2022);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 365 + "'", int38 == 365);
// flaky:         org.junit.Assert.assertTrue("'" + long40 + "' != '" + 1645455274814L + "'", long40 == 1645455274814L);
        org.junit.Assert.assertNotNull(durationField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
    }

    @Test
    public void test11479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11479");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        long long5 = dateTimeZone1.convertLocalToUTC((long) (byte) -1, true, (long) (short) -1);
        long long8 = dateTimeZone1.adjustOffset(4595195458023052L, false);
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime(dateTimeZone1);
        org.joda.time.LocalDateTime.Property property10 = localDateTime9.yearOfEra();
        int int11 = localDateTime9.size();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-36000001L) + "'", long5 == (-36000001L));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 4595195458023052L + "'", long8 == 4595195458023052L);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 4 + "'", int11 == 4);
    }

    @Test
    public void test11480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11480");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.hourOfDay();
        org.joda.time.Chronology chronology5 = iSOChronology0.withUTC();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 100);
        org.joda.time.Chronology chronology8 = iSOChronology0.withZone(dateTimeZone7);
        org.joda.time.chrono.ISOChronology iSOChronology10 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology10.hourOfHalfday();
        java.lang.String str12 = iSOChronology10.toString();
        org.joda.time.DateTimeField dateTimeField13 = iSOChronology10.era();
        org.joda.time.DurationField durationField14 = iSOChronology10.centuries();
        org.joda.time.DurationField durationField15 = iSOChronology10.weeks();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology10.era();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology10.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology10.centuryOfEra();
        org.joda.time.chrono.ISOChronology iSOChronology19 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField20 = iSOChronology19.hourOfHalfday();
        java.lang.String str21 = iSOChronology19.toString();
        org.joda.time.DateTimeField dateTimeField22 = iSOChronology19.era();
        org.joda.time.DurationField durationField23 = iSOChronology19.centuries();
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        long long27 = iSOChronology19.add(readablePeriod24, (long) 2022, (int) (byte) 100);
        org.joda.time.DateTimeZone dateTimeZone28 = iSOChronology19.getZone();
        org.joda.time.Chronology chronology29 = iSOChronology10.withZone(dateTimeZone28);
        org.joda.time.DateTimeField dateTimeField30 = iSOChronology10.year();
        org.joda.time.DurationField durationField31 = dateTimeField30.getDurationField();
        java.util.TimeZone timeZone34 = null;
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forTimeZone(timeZone34);
        int int37 = dateTimeZone35.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime38 = org.joda.time.LocalDateTime.now(dateTimeZone35);
        int int39 = localDateTime38.getWeekyear();
        org.joda.time.LocalDateTime.Property property40 = localDateTime38.millisOfDay();
        java.util.Locale locale41 = java.util.Locale.KOREAN;
        java.lang.String str42 = property40.getAsText(locale41);
        java.lang.String str43 = locale41.getCountry();
        long long44 = dateTimeField30.set(345601970L, "49713967", locale41);
        java.lang.String str45 = dateTimeZone7.getShortName(1644850105990L, locale41);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(iSOChronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "ISOChronology[-01:00]" + "'", str12, "ISOChronology[-01:00]");
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(iSOChronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "ISOChronology[-01:00]" + "'", str21, "ISOChronology[-01:00]");
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 2022L + "'", long27 == 2022L);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3600000) + "'", int37 == (-3600000));
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2022 + "'", int39 == 2022);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str42 + "' != '" + "50074864" + "'", str42, "50074864");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 1568759103475201970L + "'", long44 == 1568759103475201970L);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "+100:00" + "'", str45, "+100:00");
    }

    @Test
    public void test11481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11481");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.hourOfDay();
        org.joda.time.Chronology chronology5 = iSOChronology0.withUTC();
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime(chronology5);
        java.util.TimeZone timeZone7 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forTimeZone(timeZone7);
        int int10 = dateTimeZone8.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now(dateTimeZone8);
        org.joda.time.LocalDateTime localDateTime12 = org.joda.time.LocalDateTime.now(dateTimeZone8);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.minusMinutes((int) ' ');
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.withYearOfCentury((int) (byte) 10);
        java.util.TimeZone timeZone17 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forTimeZone(timeZone17);
        int int20 = dateTimeZone18.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime21 = org.joda.time.LocalDateTime.now(dateTimeZone18);
        org.joda.time.LocalDateTime localDateTime22 = org.joda.time.LocalDateTime.now(dateTimeZone18);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.withMillisOfSecond((int) '4');
        org.joda.time.LocalDateTime localDateTime25 = localDateTime16.withFields((org.joda.time.ReadablePartial) localDateTime22);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.withMonthOfYear((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime25.minusHours(47);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.minusSeconds((int) (byte) 100);
        boolean boolean32 = localDateTime6.isEqual((org.joda.time.ReadablePartial) localDateTime29);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime34 = localDateTime6.withDayOfYear(49821793);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 49821793 for dayOfYear must be in the range [1,365]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3600000) + "'", int10 == (-3600000));
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-3600000) + "'", int20 == (-3600000));
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test11482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11482");
        java.util.Locale locale0 = java.util.Locale.JAPANESE;
        java.lang.String str1 = locale0.getDisplayLanguage();
        java.lang.String str2 = locale0.getISO3Language();
        java.util.Set<java.lang.String> strSet3 = locale0.getUnicodeLocaleAttributes();
        java.util.Set<java.lang.Character> charSet4 = locale0.getExtensionKeys();
        java.lang.Object[] objArray5 = charSet4.toArray();
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet7 = locale6.getExtensionKeys();
        java.util.Iterator<java.lang.Character> charItor8 = charSet7.iterator();
        java.util.ArrayList[] arrayListArray10 = new java.util.ArrayList[0];
        @SuppressWarnings("unchecked")
        java.util.ArrayList<java.util.Locale.LanguageRange>[] languageRangeListArray11 = (java.util.ArrayList<java.util.Locale.LanguageRange>[]) arrayListArray10;
        java.util.ArrayList<java.util.Locale.LanguageRange>[] languageRangeListArray12 = charSet7.toArray((java.util.ArrayList<java.util.Locale.LanguageRange>[]) arrayListArray10);
        java.util.stream.Stream<java.lang.Character> charStream13 = charSet7.stream();
        java.util.Locale locale14 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet15 = locale14.getExtensionKeys();
        java.util.Iterator<java.lang.Character> charItor16 = charSet15.iterator();
        java.util.ArrayList[] arrayListArray18 = new java.util.ArrayList[0];
        @SuppressWarnings("unchecked")
        java.util.ArrayList<java.util.Locale.LanguageRange>[] languageRangeListArray19 = (java.util.ArrayList<java.util.Locale.LanguageRange>[]) arrayListArray18;
        java.util.ArrayList<java.util.Locale.LanguageRange>[] languageRangeListArray20 = charSet15.toArray((java.util.ArrayList<java.util.Locale.LanguageRange>[]) arrayListArray18);
        java.util.stream.Stream<java.lang.Character> charStream21 = charSet15.stream();
        java.util.Locale locale22 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet23 = locale22.getExtensionKeys();
        java.util.Iterator<java.lang.Character> charItor24 = charSet23.iterator();
        java.util.Locale locale25 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet26 = locale25.getExtensionKeys();
        java.util.Iterator<java.lang.Character> charItor27 = charSet26.iterator();
        boolean boolean28 = charSet23.containsAll((java.util.Collection<java.lang.Character>) charSet26);
        java.util.TimeZone timeZone29 = null;
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forTimeZone(timeZone29);
        int int32 = dateTimeZone30.getOffset(100L);
        java.util.TimeZone timeZone33 = dateTimeZone30.toTimeZone();
        org.joda.time.DateTimeZone[] dateTimeZoneArray34 = new org.joda.time.DateTimeZone[] { dateTimeZone30 };
        org.joda.time.DateTimeZone[] dateTimeZoneArray35 = charSet26.toArray(dateTimeZoneArray34);
        java.util.Locale locale36 = java.util.Locale.GERMAN;
        java.lang.String str37 = locale36.getDisplayScript();
        java.lang.String str39 = locale36.getExtension('x');
        java.util.Set<java.lang.Character> charSet40 = locale36.getExtensionKeys();
        boolean boolean41 = charSet26.retainAll((java.util.Collection<java.lang.Character>) charSet40);
        boolean boolean42 = charSet15.addAll((java.util.Collection<java.lang.Character>) charSet40);
        org.joda.time.chrono.ISOChronology iSOChronology43 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField44 = iSOChronology43.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField45 = iSOChronology43.yearOfEra();
        org.joda.time.DateTimeField dateTimeField46 = iSOChronology43.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField47 = iSOChronology43.weekOfWeekyear();
        org.joda.time.chrono.ISOChronology iSOChronology48 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField49 = iSOChronology48.hourOfHalfday();
        org.joda.time.tz.NameProvider nameProvider50 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale51 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet52 = locale51.getExtensionKeys();
        java.lang.String str55 = nameProvider50.getShortName(locale51, "Koordinierte Universalzeit", "+00:00");
        java.util.Locale locale56 = java.util.Locale.GERMAN;
        java.lang.String str59 = nameProvider50.getShortName(locale56, "53167803", "jpn");
        int int60 = dateTimeField49.getMaximumTextLength(locale56);
        int int61 = dateTimeField47.getMaximumTextLength(locale56);
        java.util.Set<java.lang.Character> charSet62 = locale56.getExtensionKeys();
        boolean boolean63 = charSet40.removeAll((java.util.Collection<java.lang.Character>) charSet62);
        java.util.Locale locale64 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet65 = locale64.getExtensionKeys();
        java.util.Iterator<java.lang.Character> charItor66 = charSet65.iterator();
        boolean boolean67 = charSet65.isEmpty();
        boolean boolean68 = charSet62.addAll((java.util.Collection<java.lang.Character>) charSet65);
        java.util.stream.Stream<java.lang.Character> charStream69 = charSet65.parallelStream();
        java.util.Iterator<java.lang.Character> charItor70 = charSet65.iterator();
        java.util.Spliterator<java.lang.Character> charSpliterator71 = charSet65.spliterator();
        boolean boolean72 = charSet7.retainAll((java.util.Collection<java.lang.Character>) charSet65);
        boolean boolean73 = charSet4.addAll((java.util.Collection<java.lang.Character>) charSet7);
        java.util.stream.Stream<java.lang.Character> charStream74 = charSet7.parallelStream();
        java.util.stream.Stream<java.lang.Character> charStream75 = charSet7.stream();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Japanisch" + "'", str1, "Japanisch");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "jpn" + "'", str2, "jpn");
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNotNull(charSet4);
        org.junit.Assert.assertNotNull(objArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray5), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray5), "[]");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet7);
        org.junit.Assert.assertNotNull(charItor8);
        org.junit.Assert.assertNotNull(arrayListArray10);
        org.junit.Assert.assertNotNull(languageRangeListArray11);
        org.junit.Assert.assertNotNull(languageRangeListArray12);
        org.junit.Assert.assertNotNull(charStream13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet15);
        org.junit.Assert.assertNotNull(charItor16);
        org.junit.Assert.assertNotNull(arrayListArray18);
        org.junit.Assert.assertNotNull(languageRangeListArray19);
        org.junit.Assert.assertNotNull(languageRangeListArray20);
        org.junit.Assert.assertNotNull(charStream21);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet23);
        org.junit.Assert.assertNotNull(charItor24);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet26);
        org.junit.Assert.assertNotNull(charItor27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3600000) + "'", int32 == (-3600000));
        org.junit.Assert.assertNotNull(timeZone33);
        org.junit.Assert.assertEquals(timeZone33.getDisplayName(), "GMT-01:00");
        org.junit.Assert.assertNotNull(dateTimeZoneArray34);
        org.junit.Assert.assertNotNull(dateTimeZoneArray35);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "de");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNotNull(charSet40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(iSOChronology43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(iSOChronology48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(nameProvider50);
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet52);
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "de");
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 2 + "'", int60 == 2);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 2 + "'", int61 == 2);
        org.junit.Assert.assertNotNull(charSet62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet65);
        org.junit.Assert.assertNotNull(charItor66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(charStream69);
        org.junit.Assert.assertNotNull(charItor70);
        org.junit.Assert.assertNotNull(charSpliterator71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(charStream74);
        org.junit.Assert.assertNotNull(charStream75);
    }

    @Test
    public void test11483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11483");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.centuryOfEra();
        org.joda.time.DurationField durationField3 = iSOChronology0.centuries();
        org.joda.time.DurationField durationField4 = iSOChronology0.hours();
        org.joda.time.DurationField durationField5 = iSOChronology0.years();
        org.joda.time.DateTimeField dateTimeField6 = iSOChronology0.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField7 = iSOChronology0.millisOfSecond();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
    }

    @Test
    public void test11484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11484");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.yearOfEra();
        org.joda.time.DurationField durationField3 = iSOChronology0.minutes();
        org.joda.time.DurationField durationField4 = iSOChronology0.months();
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology0.era();
        org.joda.time.DurationField durationField6 = iSOChronology0.halfdays();
        org.joda.time.DurationField durationField7 = iSOChronology0.weeks();
        org.joda.time.DurationField durationField8 = iSOChronology0.weekyears();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(durationField8);
    }

    @Test
    public void test11485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11485");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.yearOfEra();
        org.joda.time.DurationField durationField3 = iSOChronology0.minutes();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.weekyear();
        org.joda.time.Chronology chronology5 = iSOChronology0.withUTC();
        org.joda.time.DurationField durationField6 = chronology5.centuries();
        org.joda.time.DurationField durationField7 = chronology5.days();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
    }

    @Test
    public void test11486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11486");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.centuryOfEra();
        org.joda.time.DurationField durationField3 = iSOChronology0.centuries();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.millisOfDay();
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology0.minuteOfHour();
        org.joda.time.DurationField durationField6 = iSOChronology0.millis();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
    }

    @Test
    public void test11487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11487");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffset(100L);
        java.util.TimeZone timeZone4 = dateTimeZone1.toTimeZone();
        int int6 = timeZone4.getOffset((-3155637599905L));
        java.lang.String str7 = timeZone4.getID();
        java.util.TimeZone timeZone8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        int int11 = dateTimeZone9.getOffset(100L);
        java.util.TimeZone timeZone12 = dateTimeZone9.toTimeZone();
        int int14 = dateTimeZone9.getStandardOffset((long) ' ');
        boolean boolean16 = dateTimeZone9.isStandardOffset((long) '4');
        boolean boolean17 = dateTimeZone9.isFixed();
        java.util.TimeZone timeZone18 = dateTimeZone9.toTimeZone();
        java.util.TimeZone.setDefault(timeZone18);
        timeZone18.setRawOffset(27);
        java.time.ZoneId zoneId22 = timeZone18.toZoneId();
        java.util.TimeZone timeZone23 = java.util.TimeZone.getTimeZone(zoneId22);
        int int25 = timeZone23.getOffset(36000000L);
        java.util.TimeZone timeZone26 = null;
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forTimeZone(timeZone26);
        int int29 = dateTimeZone27.getOffset(100L);
        java.util.TimeZone timeZone30 = dateTimeZone27.toTimeZone();
        int int32 = dateTimeZone27.getOffset((-36000001L));
        java.util.TimeZone timeZone33 = dateTimeZone27.toTimeZone();
        int int34 = timeZone33.getRawOffset();
        java.util.TimeZone.setDefault(timeZone33);
        java.util.TimeZone timeZone37 = java.util.TimeZone.getTimeZone("97");
        java.util.TimeZone timeZone38 = null;
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forTimeZone(timeZone38);
        int int41 = dateTimeZone39.getOffset(100L);
        java.util.TimeZone timeZone42 = dateTimeZone39.toTimeZone();
        int int44 = dateTimeZone39.getStandardOffset((long) ' ');
        boolean boolean46 = dateTimeZone39.isStandardOffset((long) '4');
        boolean boolean47 = dateTimeZone39.isFixed();
        java.util.TimeZone timeZone48 = dateTimeZone39.toTimeZone();
        boolean boolean49 = timeZone37.hasSameRules(timeZone48);
        java.lang.String str50 = timeZone48.getID();
        timeZone48.setID("2022-02-21T14:46:39.468Z");
        boolean boolean53 = timeZone33.hasSameRules(timeZone48);
        boolean boolean54 = timeZone23.hasSameRules(timeZone48);
        timeZone48.setRawOffset(49712);
        boolean boolean57 = timeZone4.hasSameRules(timeZone48);
        org.joda.time.DateTimeZone dateTimeZone58 = org.joda.time.DateTimeZone.forTimeZone(timeZone4);
        java.lang.String str59 = dateTimeZone58.getID();
        org.joda.time.chrono.ISOChronology iSOChronology60 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField61 = iSOChronology60.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField62 = iSOChronology60.yearOfEra();
        org.joda.time.DateTimeField dateTimeField63 = iSOChronology60.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField64 = iSOChronology60.weekOfWeekyear();
        org.joda.time.DurationField durationField65 = iSOChronology60.weekyears();
        org.joda.time.Chronology chronology66 = iSOChronology60.withUTC();
        org.joda.time.DurationField durationField67 = iSOChronology60.hours();
        org.joda.time.DateTimeField dateTimeField68 = iSOChronology60.minuteOfHour();
        boolean boolean69 = dateTimeZone58.equals((java.lang.Object) dateTimeField68);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-3600000) + "'", int3 == (-3600000));
        org.junit.Assert.assertNotNull(timeZone4);
        org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "GMT-01:00");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3600000) + "'", int6 == (-3600000));
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "GMT-01:00" + "'", str7, "GMT-01:00");
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3600000) + "'", int11 == (-3600000));
        org.junit.Assert.assertNotNull(timeZone12);
        org.junit.Assert.assertEquals(timeZone12.getDisplayName(), "GMT-01:00");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3600000) + "'", int14 == (-3600000));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(timeZone18);
        org.junit.Assert.assertEquals(timeZone18.getDisplayName(), "GMT-01:00");
        org.junit.Assert.assertNotNull(zoneId22);
        org.junit.Assert.assertNotNull(timeZone23);
        org.junit.Assert.assertEquals(timeZone23.getDisplayName(), "GMT-01:00");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3600000) + "'", int25 == (-3600000));
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3600000) + "'", int29 == (-3600000));
        org.junit.Assert.assertNotNull(timeZone30);
        org.junit.Assert.assertEquals(timeZone30.getDisplayName(), "GMT-01:00");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3600000) + "'", int32 == (-3600000));
        org.junit.Assert.assertNotNull(timeZone33);
        org.junit.Assert.assertEquals(timeZone33.getDisplayName(), "GMT-01:00");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3600000) + "'", int34 == (-3600000));
        org.junit.Assert.assertNotNull(timeZone37);
        org.junit.Assert.assertEquals(timeZone37.getDisplayName(), "Greenwich Zeit");
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-3600000) + "'", int41 == (-3600000));
        org.junit.Assert.assertNotNull(timeZone42);
        org.junit.Assert.assertEquals(timeZone42.getDisplayName(), "GMT-01:00");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-3600000) + "'", int44 == (-3600000));
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(timeZone48);
        org.junit.Assert.assertEquals(timeZone48.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "GMT-01:00" + "'", str50, "GMT-01:00");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(dateTimeZone58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "-01:00" + "'", str59, "-01:00");
        org.junit.Assert.assertNotNull(iSOChronology60);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertNotNull(durationField65);
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertNotNull(durationField67);
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
    }

    @Test
    public void test11488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11488");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.hourOfHalfday();
        java.lang.String str2 = iSOChronology0.toString();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.era();
        org.joda.time.Chronology chronology4 = iSOChronology0.withUTC();
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        long long8 = iSOChronology0.add(readablePeriod5, 38469L, 110);
        org.joda.time.DateTimeField dateTimeField9 = iSOChronology0.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology0.yearOfEra();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology0.secondOfMinute();
        org.joda.time.DurationField durationField12 = iSOChronology0.eras();
        // The following exception was thrown during execution in test generation
        try {
            int int15 = durationField12.getValue(2932567L, 4454335650L);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: eras field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ISOChronology[-01:00]" + "'", str2, "ISOChronology[-01:00]");
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 38469L + "'", long8 == 38469L);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
    }

    @Test
    public void test11489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11489");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.yearOfEra();
        org.joda.time.DurationField durationField3 = iSOChronology0.minutes();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.weekyear();
        org.joda.time.DurationField durationField5 = iSOChronology0.centuries();
        org.joda.time.DateTimeField dateTimeField6 = iSOChronology0.centuryOfEra();
        org.joda.time.DurationField durationField7 = iSOChronology0.minutes();
        org.joda.time.DateTimeField dateTimeField8 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField9 = iSOChronology0.centuryOfEra();
        org.joda.time.DurationField durationField10 = iSOChronology0.months();
        org.joda.time.DurationField durationField11 = iSOChronology0.weekyears();
        long long14 = durationField11.subtract(1645455074263L, (int) (short) 10);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1329749474263L + "'", long14 == 1329749474263L);
    }

    @Test
    public void test11490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11490");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        int int5 = localDateTime4.getWeekyear();
        org.joda.time.LocalDateTime.Property property6 = localDateTime4.millisOfDay();
        java.util.Locale locale7 = java.util.Locale.GERMAN;
        java.util.Locale locale8 = java.util.Locale.GERMAN;
        java.lang.String str9 = locale7.getDisplayCountry(locale8);
        java.util.Locale locale10 = locale7.stripExtensions();
        int int11 = property6.getMaximumShortTextLength(locale7);
        org.joda.time.Interval interval12 = property6.toInterval();
        org.joda.time.LocalDateTime localDateTime14 = property6.setCopy(1);
        org.joda.time.LocalDateTime.Property property15 = localDateTime14.era();
        org.joda.time.LocalDateTime localDateTime16 = property15.roundFloorCopy();
        org.joda.time.LocalDateTime localDateTime18 = property15.addWrapFieldToCopy((-191969722));
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-3600000) + "'", int3 == (-3600000));
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2022 + "'", int5 == 2022);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "de");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "de");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "de");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 8 + "'", int11 == 8);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
    }

    @Test
    public void test11491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11491");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.DateTime dateTime6 = localDateTime4.toDateTime(readableInstant5);
        org.joda.time.Chronology chronology7 = dateTime6.getChronology();
        org.joda.time.DurationField durationField8 = chronology7.hours();
        org.joda.time.DurationField durationField9 = chronology7.months();
        org.joda.time.DateTimeField dateTimeField10 = chronology7.dayOfYear();
        java.util.TimeZone timeZone11 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        int int14 = dateTimeZone12.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime15 = org.joda.time.LocalDateTime.now(dateTimeZone12);
        int[] intArray18 = new int[] { (short) 0, (short) 0 };
        int int19 = dateTimeField10.getMinimumValue((org.joda.time.ReadablePartial) localDateTime15, intArray18);
        int int21 = dateTimeField10.getMinimumValue((long) 100);
        java.util.TimeZone timeZone22 = null;
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        int int25 = dateTimeZone23.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime26 = org.joda.time.LocalDateTime.now(dateTimeZone23);
        int int27 = localDateTime26.getWeekyear();
        org.joda.time.LocalDateTime.Property property28 = localDateTime26.minuteOfHour();
        int int29 = dateTimeField10.getMaximumValue((org.joda.time.ReadablePartial) localDateTime26);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime26.withCenturyOfEra(1);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime26.minusMinutes((int) ' ');
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.Chronology chronology35 = null;
        boolean boolean36 = dateTimeFieldType34.isSupported(chronology35);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime33.withField(dateTimeFieldType34, 11);
        java.lang.String str39 = dateTimeFieldType34.getName();
        org.joda.time.chrono.ISOChronology iSOChronology40 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField41 = iSOChronology40.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField42 = iSOChronology40.yearOfEra();
        org.joda.time.DurationField durationField43 = iSOChronology40.minutes();
        org.joda.time.DateTimeField dateTimeField44 = iSOChronology40.weekyear();
        org.joda.time.DurationField durationField45 = iSOChronology40.centuries();
        org.joda.time.DateTimeField dateTimeField46 = iSOChronology40.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField47 = iSOChronology40.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField48 = dateTimeFieldType34.getField((org.joda.time.Chronology) iSOChronology40);
        org.joda.time.DateTimeField dateTimeField49 = iSOChronology40.era();
        org.joda.time.ReadablePeriod readablePeriod50 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray52 = iSOChronology40.get(readablePeriod50, 1644850410683L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-3600000) + "'", int3 == (-3600000));
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3600000) + "'", int14 == (-3600000));
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[0, 0]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3600000) + "'", int25 == (-3600000));
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2022 + "'", int27 == 2022);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 365 + "'", int29 == 365);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "dayOfYear" + "'", str39, "dayOfYear");
        org.junit.Assert.assertNotNull(iSOChronology40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(durationField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(durationField45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(dateTimeField49);
    }

    @Test
    public void test11492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11492");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        int int5 = localDateTime4.getWeekyear();
        org.joda.time.LocalDateTime.Property property6 = localDateTime4.millisOfDay();
        java.util.TimeZone timeZone7 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forTimeZone(timeZone7);
        int int10 = dateTimeZone8.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now(dateTimeZone8);
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.DateTime dateTime13 = localDateTime11.toDateTime(readableInstant12);
        java.util.TimeZone timeZone14 = null;
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forTimeZone(timeZone14);
        int int17 = dateTimeZone15.getOffset(100L);
        org.joda.time.DateTime dateTime18 = localDateTime11.toDateTime(dateTimeZone15);
        int int19 = property6.compareTo((org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.chrono.ISOChronology iSOChronology20 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField21 = iSOChronology20.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField22 = iSOChronology20.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField23 = iSOChronology20.yearOfEra();
        boolean boolean24 = dateTime18.equals((java.lang.Object) iSOChronology20);
        org.joda.time.DateTimeField dateTimeField25 = iSOChronology20.weekOfWeekyear();
        org.joda.time.DurationField durationField26 = iSOChronology20.eras();
        boolean boolean27 = durationField26.isSupported();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-3600000) + "'", int3 == (-3600000));
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2022 + "'", int5 == 2022);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3600000) + "'", int10 == (-3600000));
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3600000) + "'", int17 == (-3600000));
        org.junit.Assert.assertNotNull(dateTime18);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(iSOChronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test11493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11493");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.yearOfEra();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.weekyearOfCentury();
        java.lang.String str4 = iSOChronology0.toString();
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology0.clockhourOfHalfday();
        java.lang.String str6 = iSOChronology0.toString();
        java.lang.String str7 = iSOChronology0.toString();
        org.joda.time.DateTimeField dateTimeField8 = iSOChronology0.weekyear();
        org.joda.time.DurationField durationField9 = iSOChronology0.weekyears();
        boolean boolean10 = durationField9.isSupported();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "ISOChronology[-01:00]" + "'", str4, "ISOChronology[-01:00]");
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "ISOChronology[-01:00]" + "'", str6, "ISOChronology[-01:00]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "ISOChronology[-01:00]" + "'", str7, "ISOChronology[-01:00]");
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    }

    @Test
    public void test11494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11494");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.yearOfEra();
        org.joda.time.DurationField durationField3 = iSOChronology0.minutes();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.weekyear();
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        int int8 = dateTimeZone6.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime9 = org.joda.time.LocalDateTime.now(dateTimeZone6);
        org.joda.time.LocalDateTime localDateTime10 = org.joda.time.LocalDateTime.now(dateTimeZone6);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.plusSeconds((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime10.minusWeeks((int) (byte) 10);
        java.util.TimeZone timeZone15 = null;
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forTimeZone(timeZone15);
        int int18 = dateTimeZone16.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime19 = org.joda.time.LocalDateTime.now(dateTimeZone16);
        int int20 = localDateTime19.getWeekyear();
        org.joda.time.LocalDateTime.Property property21 = localDateTime19.millisOfDay();
        java.util.TimeZone timeZone22 = null;
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        int int25 = dateTimeZone23.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime26 = org.joda.time.LocalDateTime.now(dateTimeZone23);
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.DateTime dateTime28 = localDateTime26.toDateTime(readableInstant27);
        java.util.TimeZone timeZone29 = null;
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forTimeZone(timeZone29);
        int int32 = dateTimeZone30.getOffset(100L);
        org.joda.time.DateTime dateTime33 = localDateTime26.toDateTime(dateTimeZone30);
        int int34 = property21.compareTo((org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.LocalDateTime localDateTime35 = property21.roundHalfEvenCopy();
        java.util.TimeZone timeZone36 = null;
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forTimeZone(timeZone36);
        int int39 = dateTimeZone37.getOffset(100L);
        java.lang.String str40 = dateTimeZone37.getID();
        java.util.Locale locale42 = java.util.Locale.ENGLISH;
        java.lang.String str43 = dateTimeZone37.getName(31556952000000L, locale42);
        java.lang.String str44 = property21.getAsText(locale42);
        java.lang.String str45 = dateTimeField4.getAsText((org.joda.time.ReadablePartial) localDateTime14, locale42);
        // The following exception was thrown during execution in test generation
        try {
            long long48 = dateTimeField4.set(44078L, "2022-02-22T00:53:01.052");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2022-02-22T00:53:01.052\" for weekyear is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3600000) + "'", int8 == (-3600000));
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3600000) + "'", int18 == (-3600000));
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2022 + "'", int20 == 2022);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3600000) + "'", int25 == (-3600000));
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3600000) + "'", int32 == (-3600000));
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-3600000) + "'", int39 == (-3600000));
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "-01:00" + "'", str40, "-01:00");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "en");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "-01:00" + "'", str43, "-01:00");
// flaky:         org.junit.Assert.assertEquals("'" + str44 + "' != '" + "50075348" + "'", str44, "50075348");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "2021" + "'", str45, "2021");
    }

    @Test
    public void test11495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11495");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.yearOfEra();
        org.joda.time.DurationField durationField3 = iSOChronology0.minutes();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.weekyear();
        org.joda.time.DurationField durationField5 = iSOChronology0.centuries();
        org.joda.time.DateTimeField dateTimeField6 = iSOChronology0.centuryOfEra();
        org.joda.time.DurationField durationField7 = iSOChronology0.minutes();
        org.joda.time.DateTimeField dateTimeField8 = iSOChronology0.minuteOfDay();
        org.joda.time.DurationField durationField9 = iSOChronology0.days();
        org.joda.time.DurationField durationField10 = iSOChronology0.days();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology0.secondOfDay();
        org.joda.time.DurationField durationField12 = iSOChronology0.weekyears();
        org.joda.time.DurationField durationField13 = iSOChronology0.millis();
        long long17 = iSOChronology0.add(1645454947589L, 1890917265948L, 53264);
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology0);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField20 = localDateTime18.getField((-27422765));
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: -27422765");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 100719462708401861L + "'", long17 == 100719462708401861L);
    }

    @Test
    public void test11496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11496");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        java.util.TimeZone timeZone1 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        int int4 = dateTimeZone2.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime5 = org.joda.time.LocalDateTime.now(dateTimeZone2);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray6 = localDateTime5.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.hourOfDay();
        int int8 = localDateTime5.get(dateTimeFieldType7);
        org.joda.time.LocalDateTime.Property property9 = localDateTime5.dayOfWeek();
        boolean boolean10 = localDateTime0.isEqual((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.LocalDateTime.Property property11 = localDateTime5.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime12 = property11.roundHalfCeilingCopy();
        java.util.TimeZone timeZone13 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forTimeZone(timeZone13);
        int int16 = dateTimeZone14.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime17 = org.joda.time.LocalDateTime.now(dateTimeZone14);
        org.joda.time.LocalDateTime localDateTime18 = org.joda.time.LocalDateTime.now(dateTimeZone14);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.minusMinutes((int) ' ');
        int int21 = property11.compareTo((org.joda.time.ReadablePartial) localDateTime20);
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.LocalDateTime localDateTime23 = localDateTime20.plus(readablePeriod22);
        org.joda.time.ReadableDuration readableDuration24 = null;
        org.joda.time.LocalDateTime localDateTime26 = localDateTime20.withDurationAdded(readableDuration24, 100);
        org.joda.time.LocalDateTime.Property property27 = localDateTime26.minuteOfHour();
        org.joda.time.LocalDateTime.Property property28 = localDateTime26.weekOfWeekyear();
        int int29 = property28.getMinimumValueOverall();
        java.util.Locale locale30 = null;
        java.lang.String str31 = property28.getAsShortText(locale30);
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = property28.getFieldType();
        org.joda.time.LocalDateTime localDateTime33 = property28.withMinimumValue();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3600000) + "'", int4 == (-3600000));
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 13 + "'", int8 == 13);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3600000) + "'", int16 == (-3600000));
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "8" + "'", str31, "8");
        org.junit.Assert.assertNotNull(dateTimeFieldType32);
        org.junit.Assert.assertNotNull(localDateTime33);
    }

    @Test
    public void test11497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11497");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.centuryOfEra();
        org.joda.time.DurationField durationField3 = iSOChronology0.days();
        org.joda.time.DurationField durationField4 = iSOChronology0.centuries();
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        int int8 = dateTimeZone6.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime9 = org.joda.time.LocalDateTime.now(dateTimeZone6);
        int int10 = localDateTime9.getWeekyear();
        org.joda.time.LocalDateTime.Property property11 = localDateTime9.millisOfDay();
        int int12 = property11.get();
        org.joda.time.LocalDateTime localDateTime13 = property11.roundCeilingCopy();
        org.joda.time.chrono.ISOChronology iSOChronology14 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology14.minuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone16 = iSOChronology14.getZone();
        java.util.TimeZone timeZone17 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forTimeZone(timeZone17);
        int int20 = dateTimeZone18.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime21 = org.joda.time.LocalDateTime.now(dateTimeZone18);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray22 = localDateTime21.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.hourOfDay();
        int int24 = localDateTime21.get(dateTimeFieldType23);
        org.joda.time.LocalDateTime.Property property25 = localDateTime21.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime21.minusHours(20);
        java.util.Locale locale28 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet29 = locale28.getExtensionKeys();
        java.util.Iterator<java.lang.Character> charItor30 = charSet29.iterator();
        java.util.ArrayList[] arrayListArray32 = new java.util.ArrayList[0];
        @SuppressWarnings("unchecked")
        java.util.ArrayList<java.util.Locale.LanguageRange>[] languageRangeListArray33 = (java.util.ArrayList<java.util.Locale.LanguageRange>[]) arrayListArray32;
        java.util.ArrayList<java.util.Locale.LanguageRange>[] languageRangeListArray34 = charSet29.toArray((java.util.ArrayList<java.util.Locale.LanguageRange>[]) arrayListArray32);
        java.util.TimeZone timeZone35 = null;
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forTimeZone(timeZone35);
        int int38 = dateTimeZone36.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime39 = org.joda.time.LocalDateTime.now(dateTimeZone36);
        int int40 = localDateTime39.getWeekyear();
        org.joda.time.LocalDateTime.Property property41 = localDateTime39.millisOfDay();
        java.util.TimeZone timeZone42 = null;
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forTimeZone(timeZone42);
        int int45 = dateTimeZone43.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime46 = org.joda.time.LocalDateTime.now(dateTimeZone43);
        org.joda.time.ReadableInstant readableInstant47 = null;
        org.joda.time.DateTime dateTime48 = localDateTime46.toDateTime(readableInstant47);
        java.util.TimeZone timeZone49 = null;
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.forTimeZone(timeZone49);
        int int52 = dateTimeZone50.getOffset(100L);
        org.joda.time.DateTime dateTime53 = localDateTime46.toDateTime(dateTimeZone50);
        int int54 = property41.compareTo((org.joda.time.ReadableInstant) dateTime53);
        boolean boolean55 = charSet29.equals((java.lang.Object) dateTime53);
        org.joda.time.DateTime dateTime56 = localDateTime27.toDateTime((org.joda.time.ReadableInstant) dateTime53);
        int int57 = localDateTime27.getMinuteOfHour();
        org.joda.time.DateTimeField dateTimeField59 = localDateTime27.getField(0);
        java.util.TimeZone timeZone60 = null;
        org.joda.time.DateTimeZone dateTimeZone61 = org.joda.time.DateTimeZone.forTimeZone(timeZone60);
        int int63 = dateTimeZone61.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime64 = org.joda.time.LocalDateTime.now(dateTimeZone61);
        org.joda.time.LocalDateTime localDateTime65 = org.joda.time.LocalDateTime.now(dateTimeZone61);
        org.joda.time.LocalDateTime localDateTime67 = localDateTime65.minusMinutes((int) ' ');
        org.joda.time.ReadablePeriod readablePeriod68 = null;
        org.joda.time.LocalDateTime localDateTime69 = localDateTime65.plus(readablePeriod68);
        int[] intArray70 = localDateTime69.getValues();
        iSOChronology14.validate((org.joda.time.ReadablePartial) localDateTime27, intArray70);
        iSOChronology0.validate((org.joda.time.ReadablePartial) localDateTime13, intArray70);
        org.joda.time.DateTimeField dateTimeField73 = iSOChronology0.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField74 = iSOChronology0.weekyearOfCentury();
        org.joda.time.DurationField durationField75 = iSOChronology0.seconds();
        org.joda.time.DateTimeField dateTimeField76 = iSOChronology0.clockhourOfHalfday();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3600000) + "'", int8 == (-3600000));
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2022 + "'", int10 == 2022);
        org.junit.Assert.assertNotNull(property11);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 50075430 + "'", int12 == 50075430);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(iSOChronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-3600000) + "'", int20 == (-3600000));
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray22);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
// flaky:         org.junit.Assert.assertTrue("'" + int24 + "' != '" + 13 + "'", int24 == 13);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet29);
        org.junit.Assert.assertNotNull(charItor30);
        org.junit.Assert.assertNotNull(arrayListArray32);
        org.junit.Assert.assertNotNull(languageRangeListArray33);
        org.junit.Assert.assertNotNull(languageRangeListArray34);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3600000) + "'", int38 == (-3600000));
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 2022 + "'", int40 == 2022);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-3600000) + "'", int45 == (-3600000));
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-3600000) + "'", int52 == (-3600000));
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(dateTime56);
// flaky:         org.junit.Assert.assertTrue("'" + int57 + "' != '" + 54 + "'", int57 == 54);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(dateTimeZone61);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-3600000) + "'", int63 == (-3600000));
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertNotNull(localDateTime69);
        org.junit.Assert.assertNotNull(intArray70);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[2022, 2, 21, 50075431]");
        org.junit.Assert.assertNotNull(dateTimeField73);
        org.junit.Assert.assertNotNull(dateTimeField74);
        org.junit.Assert.assertNotNull(durationField75);
        org.junit.Assert.assertNotNull(dateTimeField76);
    }

    @Test
    public void test11498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11498");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setExtension('x', "jpn");
        java.util.Locale locale4 = java.util.Locale.GERMAN;
        java.util.Locale locale5 = java.util.Locale.GERMAN;
        java.lang.String str6 = locale4.getDisplayCountry(locale5);
        java.util.Locale locale7 = locale4.stripExtensions();
        java.lang.String str8 = locale4.getDisplayName();
        java.util.Locale.Builder builder9 = builder3.setLocale(locale4);
        java.util.Locale.Builder builder12 = builder9.setUnicodeLocaleKeyword("22", "deu");
        java.util.Locale.Builder builder13 = builder9.clearExtensions();
        java.util.Locale.Builder builder15 = builder9.addUnicodeLocaleAttribute("allemand");
        java.util.Locale.Builder builder16 = builder15.clearExtensions();
        java.util.Locale.Builder builder18 = builder16.setVariant("2852321");
        java.util.Locale.Builder builder20 = builder16.setVariant("53166807");
        java.util.Locale.Builder builder21 = builder20.clearExtensions();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "de");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "de");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Deutsch" + "'", str8, "Deutsch");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder21);
    }

    @Test
    public void test11499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11499");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffset(100L);
        java.util.TimeZone timeZone4 = dateTimeZone1.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forTimeZone(timeZone4);
        timeZone4.setID("");
        java.util.TimeZone.setDefault(timeZone4);
        java.lang.String str9 = timeZone4.getID();
        boolean boolean10 = timeZone4.observesDaylightTime();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-3600000) + "'", int3 == (-3600000));
        org.junit.Assert.assertNotNull(timeZone4);
        org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "GMT-01:00");
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test11500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11500");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.hourOfHalfday();
        java.lang.String str2 = iSOChronology0.toString();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.era();
        org.joda.time.DurationField durationField4 = iSOChronology0.centuries();
        org.joda.time.DurationField durationField5 = iSOChronology0.weeks();
        org.joda.time.DateTimeField dateTimeField6 = iSOChronology0.era();
        org.joda.time.DateTimeField dateTimeField7 = iSOChronology0.year();
        org.joda.time.DateTimeField dateTimeField8 = iSOChronology0.minuteOfDay();
        org.joda.time.chrono.ISOChronology iSOChronology10 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology10.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology10.centuryOfEra();
        org.joda.time.DurationField durationField13 = iSOChronology10.seconds();
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology10.dayOfYear();
        java.util.Locale locale16 = java.util.Locale.GERMAN;
        java.util.Locale locale17 = java.util.Locale.GERMAN;
        java.lang.String str18 = locale16.getDisplayCountry(locale17);
        java.util.Locale locale19 = locale16.stripExtensions();
        java.lang.String str20 = locale16.getDisplayName();
        java.util.Locale locale21 = java.util.Locale.PRC;
        java.lang.String str22 = locale16.getDisplayScript(locale21);
        java.util.TimeZone timeZone23 = null;
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forTimeZone(timeZone23);
        int int26 = dateTimeZone24.getOffset(100L);
        org.joda.time.LocalDateTime localDateTime27 = org.joda.time.LocalDateTime.now(dateTimeZone24);
        int int28 = localDateTime27.getWeekyear();
        org.joda.time.LocalDateTime.Property property29 = localDateTime27.millisOfDay();
        java.util.Locale locale30 = java.util.Locale.GERMAN;
        java.util.Locale locale31 = java.util.Locale.GERMAN;
        java.lang.String str32 = locale30.getDisplayCountry(locale31);
        java.util.Locale locale33 = locale30.stripExtensions();
        int int34 = property29.getMaximumShortTextLength(locale30);
        java.lang.String str35 = locale30.getDisplayVariant();
        java.lang.String str36 = locale21.getDisplayScript(locale30);
        java.lang.String str37 = dateTimeField14.getAsText(1970, locale30);
        java.lang.String str38 = dateTimeField8.getAsShortText((int) (byte) 1, locale30);
        java.lang.Object obj39 = locale30.clone();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ISOChronology[-01:00]" + "'", str2, "ISOChronology[-01:00]");
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(iSOChronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "de");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "de");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "de");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Deutsch" + "'", str20, "Deutsch");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3600000) + "'", int26 == (-3600000));
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2022 + "'", int28 == 2022);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "de");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "de");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "de");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 8 + "'", int34 == 8);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "1970" + "'", str37, "1970");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "1" + "'", str38, "1");
        org.junit.Assert.assertNotNull(obj39);
        org.junit.Assert.assertEquals(obj39.toString(), "de");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj39), "de");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj39), "de");
    }
}

import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest3 {

    public static boolean debug = false;

    @Test
    public void test1501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1501");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.now();
        java.time.temporal.ChronoField chronoField1 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime3 = localDateTime0.with((java.time.temporal.TemporalField) chronoField1, (long) 10);
        java.time.LocalDateTime localDateTime5 = localDateTime0.minusMinutes((long) 12);
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.now();
        java.time.temporal.ChronoField chronoField7 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime9 = localDateTime6.with((java.time.temporal.TemporalField) chronoField7, (long) 10);
        java.time.Duration duration11 = java.time.Duration.ofSeconds((long) 0);
        java.time.temporal.Temporal temporal12 = localDateTime6.minus((java.time.temporal.TemporalAmount) duration11);
        boolean boolean13 = localDateTime5.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime6);
        java.time.LocalDateTime localDateTime14 = java.time.LocalDateTime.now();
        java.time.LocalDateTime localDateTime15 = java.time.LocalDateTime.now();
        java.time.temporal.ChronoField chronoField16 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime18 = localDateTime15.with((java.time.temporal.TemporalField) chronoField16, (long) 10);
        boolean boolean19 = localDateTime14.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime15);
        int int20 = localDateTime6.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertTrue("'" + chronoField1 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField1.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertTrue("'" + chronoField7 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField7.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(temporal12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertTrue("'" + chronoField16 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField16.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
    }

    @Test
    public void test1502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1502");
        java.util.Set<java.lang.String> strSet0 = java.time.ZoneId.getAvailableZoneIds();
        java.util.stream.Stream<java.lang.String> strStream1 = strSet0.parallelStream();
        boolean boolean3 = strSet0.remove((java.lang.Object) 0);
        java.time.LocalTime localTime8 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime9 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime8);
        java.time.LocalTime localTime14 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime15 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime14);
        java.time.temporal.ChronoField chronoField16 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime18 = localTime14.with((java.time.temporal.TemporalField) chronoField16, (long) (short) 1);
        long long19 = localTime8.getLong((java.time.temporal.TemporalField) chronoField16);
        java.time.LocalTime localTime21 = localTime8.withSecond((int) (short) 1);
        java.time.temporal.ChronoField chronoField22 = java.time.temporal.ChronoField.SECOND_OF_DAY;
        java.time.temporal.ValueRange valueRange23 = localTime21.range((java.time.temporal.TemporalField) chronoField22);
        boolean boolean24 = strSet0.remove((java.lang.Object) chronoField22);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((long) 3, chronology26);
        org.joda.time.DateTime.Property property28 = dateTime27.dayOfYear();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.DateMidnight dateMidnight30 = new org.joda.time.DateMidnight((java.lang.Object) dateTime27, chronology29);
        org.joda.time.MutableDateTime mutableDateTime31 = dateTime27.toMutableDateTime();
        org.joda.time.Days days32 = org.joda.time.Days.ONE;
        org.joda.time.MutableInterval mutableInterval33 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime27, (org.joda.time.ReadablePeriod) days32);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((long) 3, chronology35);
        org.joda.time.DateTime.Property property37 = dateTime36.dayOfYear();
        org.joda.time.Interval interval38 = property37.toInterval();
        mutableInterval33.setInterval((org.joda.time.ReadableInterval) interval38);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime((long) 3, chronology41);
        org.joda.time.DateTime.Property property43 = dateTime42.dayOfYear();
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.DateMidnight dateMidnight45 = new org.joda.time.DateMidnight((java.lang.Object) dateTime42, chronology44);
        org.joda.time.DateMidnight.Property property46 = dateMidnight45.dayOfMonth();
        org.joda.time.ReadableInstant readableInstant47 = null;
        org.joda.time.ReadableInstant readableInstant48 = null;
        org.joda.time.Duration duration49 = new org.joda.time.Duration(readableInstant47, readableInstant48);
        org.joda.time.Duration duration51 = duration49.withMillis((-1L));
        org.joda.time.ReadableDuration readableDuration52 = null;
        org.joda.time.Duration duration53 = duration49.minus(readableDuration52);
        org.joda.time.DateMidnight dateMidnight54 = dateMidnight45.plus((org.joda.time.ReadableDuration) duration53);
        mutableInterval33.setDurationAfterStart((org.joda.time.ReadableDuration) duration53);
        boolean boolean56 = strSet0.contains((java.lang.Object) mutableInterval33);
        java.util.Set<java.lang.String> strSet57 = java.time.ZoneId.getAvailableZoneIds();
        java.util.stream.Stream<java.lang.String> strStream58 = strSet57.parallelStream();
        java.util.stream.Stream<java.lang.String> strStream59 = strSet57.parallelStream();
        boolean boolean60 = strSet0.addAll((java.util.Collection<java.lang.String>) strSet57);
        java.nio.charset.Charset charset61 = java.nio.charset.Charset.defaultCharset();
        java.nio.charset.CharsetDecoder charsetDecoder62 = charset61.newDecoder();
        java.nio.charset.Charset charset63 = java.nio.charset.Charset.defaultCharset();
        boolean boolean64 = charset61.contains(charset63);
        java.nio.charset.CharsetEncoder charsetEncoder65 = charset61.newEncoder();
        byte[] byteArray66 = charsetEncoder65.replacement();
        java.nio.charset.Charset charset67 = java.nio.charset.Charset.defaultCharset();
        java.nio.charset.CharsetDecoder charsetDecoder68 = charset67.newDecoder();
        float float69 = charsetDecoder68.maxCharsPerByte();
        float float70 = charsetDecoder68.averageCharsPerByte();
        java.nio.charset.CodingErrorAction codingErrorAction71 = charsetDecoder68.unmappableCharacterAction();
        java.nio.charset.CharsetEncoder charsetEncoder72 = charsetEncoder65.onUnmappableCharacter(codingErrorAction71);
        java.nio.charset.Charset charset73 = java.nio.charset.Charset.defaultCharset();
        java.nio.charset.CharsetDecoder charsetDecoder74 = charset73.newDecoder();
        java.nio.charset.Charset charset75 = java.nio.charset.Charset.defaultCharset();
        boolean boolean76 = charset73.contains(charset75);
        java.nio.charset.CharsetEncoder charsetEncoder77 = charset73.newEncoder();
        char[] charArray78 = new char[] {};
        java.nio.CharBuffer charBuffer79 = java.nio.CharBuffer.wrap(charArray78);
        java.nio.ByteBuffer byteBuffer80 = charsetEncoder77.encode(charBuffer79);
        java.nio.CharBuffer charBuffer81 = charBuffer79.slice();
        java.nio.ByteBuffer byteBuffer82 = charsetEncoder72.encode(charBuffer81);
        boolean boolean84 = charsetEncoder72.canEncode('4');
        boolean boolean85 = strSet57.remove((java.lang.Object) charsetEncoder72);
        java.nio.charset.CharsetEncoder charsetEncoder86 = charsetEncoder72.reset();
        org.junit.Assert.assertNotNull(strSet0);
        org.junit.Assert.assertNotNull(strStream1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertTrue("'" + chronoField16 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField16.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 3601000000001L + "'", long19 == 3601000000001L);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertTrue("'" + chronoField22 + "' != '" + java.time.temporal.ChronoField.SECOND_OF_DAY + "'", chronoField22.equals(java.time.temporal.ChronoField.SECOND_OF_DAY));
        org.junit.Assert.assertNotNull(valueRange23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(mutableDateTime31);
        org.junit.Assert.assertNotNull(days32);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertNotNull(dateMidnight54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(strSet57);
        org.junit.Assert.assertNotNull(strStream58);
        org.junit.Assert.assertNotNull(strStream59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(charset61);
        org.junit.Assert.assertNotNull(charsetDecoder62);
        org.junit.Assert.assertNotNull(charset63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(charsetEncoder65);
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[63]");
        org.junit.Assert.assertNotNull(charset67);
        org.junit.Assert.assertNotNull(charsetDecoder68);
        org.junit.Assert.assertTrue("'" + float69 + "' != '" + 1.0f + "'", float69 == 1.0f);
        org.junit.Assert.assertTrue("'" + float70 + "' != '" + 1.0f + "'", float70 == 1.0f);
        org.junit.Assert.assertNotNull(codingErrorAction71);
        org.junit.Assert.assertNotNull(charsetEncoder72);
        org.junit.Assert.assertNotNull(charset73);
        org.junit.Assert.assertNotNull(charsetDecoder74);
        org.junit.Assert.assertNotNull(charset75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(charsetEncoder77);
        org.junit.Assert.assertNotNull(charArray78);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray78), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray78), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray78), "[]");
        org.junit.Assert.assertNotNull(charBuffer79);
        org.junit.Assert.assertNotNull(byteBuffer80);
        org.junit.Assert.assertNotNull(charBuffer81);
        org.junit.Assert.assertNotNull(byteBuffer82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(charsetEncoder86);
    }

    @Test
    public void test1503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1503");
        java.time.Period period1 = java.time.Period.ofYears(28);
        java.time.Period period3 = java.time.Period.ofYears(28);
        java.time.Period period4 = period1.minus((java.time.temporal.TemporalAmount) period3);
        java.time.Instant instant5 = java.time.Instant.now();
        java.time.Instant instant6 = java.time.Instant.now();
        boolean boolean7 = instant5.isAfter(instant6);
        java.time.LocalDate localDate9 = java.time.LocalDate.ofEpochDay((long) ' ');
        int int10 = localDate9.getMonthValue();
        org.joda.time.Period period11 = org.joda.time.Period.ZERO;
        org.joda.time.Period period12 = period11.normalizedStandard();
        org.joda.time.Period period14 = period11.plusHours(2);
        java.time.chrono.IsoEra isoEra15 = java.time.chrono.IsoEra.CE;
        boolean boolean16 = period14.equals((java.lang.Object) isoEra15);
        java.time.LocalTime localTime21 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime22 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime21);
        java.time.LocalTime localTime27 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime28 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime27);
        java.time.temporal.ChronoField chronoField29 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime31 = localTime27.with((java.time.temporal.TemporalField) chronoField29, (long) (short) 1);
        long long32 = localTime21.getLong((java.time.temporal.TemporalField) chronoField29);
        boolean boolean33 = isoEra15.isSupported((java.time.temporal.TemporalField) chronoField29);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery34 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period35 = isoEra15.query(periodTemporalQuery34);
        boolean boolean36 = period35.isNegative();
        java.time.Period period38 = period35.plusDays((long) ' ');
        java.time.temporal.ChronoField chronoField39 = java.time.temporal.ChronoField.SECOND_OF_DAY;
        boolean boolean40 = period35.equals((java.lang.Object) chronoField39);
        boolean boolean41 = localDate9.isSupported((java.time.temporal.TemporalField) chronoField39);
        java.time.temporal.TemporalUnit temporalUnit42 = chronoField39.getRangeUnit();
        java.time.Instant instant43 = instant6.truncatedTo(temporalUnit42);
        long long44 = period1.get(temporalUnit42);
        // The following exception was thrown during execution in test generation
        try {
            java.time.Period period46 = period1.minusDays(4924800047L);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: integer overflow");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(instant5);
        org.junit.Assert.assertNotNull(instant6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertTrue("'" + isoEra15 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra15.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertNotNull(localTime27);
        org.junit.Assert.assertNotNull(localTime28);
        org.junit.Assert.assertTrue("'" + chronoField29 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField29.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime31);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 3601000000001L + "'", long32 == 3601000000001L);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(periodTemporalQuery34);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertTrue("'" + chronoField39 + "' != '" + java.time.temporal.ChronoField.SECOND_OF_DAY + "'", chronoField39.equals(java.time.temporal.ChronoField.SECOND_OF_DAY));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + temporalUnit42 + "' != '" + java.time.temporal.ChronoUnit.DAYS + "'", temporalUnit42.equals(java.time.temporal.ChronoUnit.DAYS));
        org.junit.Assert.assertNotNull(instant43);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
    }

    @Test
    public void test1504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1504");
        java.net.InetAddress inetAddress0 = java.net.InetAddress.getLocalHost();
        java.lang.String str1 = inetAddress0.getCanonicalHostName();
        java.lang.String str2 = inetAddress0.toString();
        boolean boolean3 = inetAddress0.isSiteLocalAddress();
        org.junit.Assert.assertNotNull(inetAddress0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "599b081c1808" + "'", str1, "599b081c1808");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "599b081c1808/172.17.0.2" + "'", str2, "599b081c1808/172.17.0.2");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
    }

    @Test
    public void test1505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1505");
        // The following exception was thrown during execution in test generation
        try {
            java.time.DayOfWeek dayOfWeek1 = java.time.DayOfWeek.of((int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for DayOfWeek: 100");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1506");
        org.joda.time.Weeks weeks0 = org.joda.time.Weeks.ONE;
        java.util.concurrent.TimeUnit timeUnit1 = java.util.concurrent.TimeUnit.NANOSECONDS;
        boolean boolean2 = weeks0.equals((java.lang.Object) timeUnit1);
        org.joda.time.MutablePeriod mutablePeriod3 = weeks0.toMutablePeriod();
        int int4 = mutablePeriod3.getSeconds();
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.Duration duration7 = new org.joda.time.Duration(readableInstant5, readableInstant6);
        long long8 = duration7.getMillis();
        org.joda.time.Duration duration10 = duration7.plus((long) (byte) 1);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.LocalTime localTime14 = new org.joda.time.LocalTime((long) 0, chronology13);
        org.joda.time.Chronology chronology15 = localTime14.getChronology();
        java.util.Locale locale16 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale locale17 = java.util.Locale.GERMANY;
        java.lang.String str18 = locale16.getDisplayScript(locale17);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket20 = new org.joda.time.format.DateTimeParserBucket((long) 1970, chronology15, locale16, (java.lang.Integer) 1);
        mutablePeriod3.setPeriod((org.joda.time.ReadableDuration) duration7, chronology15);
        mutablePeriod3.setMonths(14);
        org.junit.Assert.assertNotNull(weeks0);
        org.junit.Assert.assertNotNull(timeUnit1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(mutablePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
    }

    @Test
    public void test1507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1507");
        java.time.OffsetTime offsetTime0 = java.time.OffsetTime.MAX;
        java.time.LocalTime localTime1 = offsetTime0.toLocalTime();
        java.lang.String str2 = offsetTime0.toString();
        java.time.Duration duration3 = java.time.Duration.ZERO;
        java.lang.String str4 = duration3.toString();
        java.time.OffsetTime offsetTime5 = offsetTime0.plus((java.time.temporal.TemporalAmount) duration3);
        int int6 = offsetTime0.getMinute();
        java.time.temporal.ChronoField chronoField7 = java.time.temporal.ChronoField.DAY_OF_WEEK;
        java.time.LocalDateTime localDateTime8 = java.time.LocalDateTime.now();
        java.time.temporal.ChronoField chronoField9 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime11 = localDateTime8.with((java.time.temporal.TemporalField) chronoField9, (long) 10);
        java.time.Duration duration13 = java.time.Duration.ofSeconds((long) 0);
        java.time.temporal.Temporal temporal14 = localDateTime8.minus((java.time.temporal.TemporalAmount) duration13);
        long long15 = chronoField7.getFrom((java.time.temporal.TemporalAccessor) temporal14);
        java.time.LocalTime localTime20 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime21 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime20);
        java.time.temporal.ChronoField chronoField22 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime24 = localTime20.with((java.time.temporal.TemporalField) chronoField22, (long) (short) 1);
        java.util.Locale locale25 = java.util.Locale.GERMANY;
        java.lang.String str26 = chronoField22.getDisplayName(locale25);
        java.lang.String str27 = chronoField7.getDisplayName(locale25);
        // The following exception was thrown during execution in test generation
        try {
            java.time.OffsetTime offsetTime29 = offsetTime0.with((java.time.temporal.TemporalField) chronoField7, (long) (-1));
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for DayOfWeek (valid values 1 - 7): -1");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(offsetTime0);
        org.junit.Assert.assertNotNull(localTime1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "23:59:59.999999999-18:00" + "'", str2, "23:59:59.999999999-18:00");
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "PT0S" + "'", str4, "PT0S");
        org.junit.Assert.assertNotNull(offsetTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 59 + "'", int6 == 59);
        org.junit.Assert.assertTrue("'" + chronoField7 + "' != '" + java.time.temporal.ChronoField.DAY_OF_WEEK + "'", chronoField7.equals(java.time.temporal.ChronoField.DAY_OF_WEEK));
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertTrue("'" + chronoField9 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField9.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(temporal14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1L + "'", long15 == 1L);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertTrue("'" + chronoField22 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField22.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime24);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "NanoOfDay" + "'", str26, "NanoOfDay");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Wochentag" + "'", str27, "Wochentag");
    }

    @Test
    public void test1508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1508");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withYearOfCentury((int) 'a');
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.plusSeconds(6);
        org.joda.time.DateTime dateTime6 = localDateTime3.toDateTime();
        int int7 = localDateTime3.getMinuteOfHour();
        org.joda.time.PeriodType periodType8 = org.joda.time.PeriodType.years();
        org.joda.time.DurationFieldType durationFieldType9 = org.joda.time.DurationFieldType.halfdays();
        int int10 = periodType8.indexOf(durationFieldType9);
        java.lang.String str11 = durationFieldType9.toString();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime3.withFieldAdded(durationFieldType9, (int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withMinuteOfHour((int) (byte) 0);
        int int16 = localDateTime15.getHourOfDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType18 = localDateTime15.getFieldType(127);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 127");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(dateTime6);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 36 + "'", int7 == 36);
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertNotNull(durationFieldType9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "halfdays" + "'", str11, "halfdays");
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 9 + "'", int16 == 9);
    }

    @Test
    public void test1509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1509");
        org.joda.time.TimeOfDay timeOfDay1 = org.joda.time.TimeOfDay.fromMillisOfDay((long) (short) 0);
        org.joda.time.TimeOfDay timeOfDay3 = org.joda.time.TimeOfDay.fromMillisOfDay((long) (short) 0);
        org.joda.time.Hours hours4 = org.joda.time.Hours.hoursBetween((org.joda.time.ReadablePartial) timeOfDay1, (org.joda.time.ReadablePartial) timeOfDay3);
        org.joda.time.DurationFieldType durationFieldType5 = org.joda.time.DurationFieldType.hours();
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay3.withFieldAdded(durationFieldType5, (int) (byte) 0);
        int int8 = timeOfDay3.getMillisOfSecond();
        org.joda.time.TimeOfDay timeOfDay10 = timeOfDay3.plusHours(9);
        org.joda.time.TimeOfDay.Property property11 = timeOfDay3.secondOfMinute();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) 3, chronology13);
        org.joda.time.DateTime.Property property15 = dateTime14.dayOfYear();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight((java.lang.Object) dateTime14, chronology16);
        org.joda.time.MutableDateTime mutableDateTime18 = dateTime14.toMutableDateTime();
        mutableDateTime18.addYears((int) (short) 100);
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime18.millisOfDay();
        org.joda.time.PeriodType periodType22 = org.joda.time.PeriodType.years();
        org.joda.time.DurationFieldType durationFieldType23 = org.joda.time.DurationFieldType.halfdays();
        int int24 = periodType22.indexOf(durationFieldType23);
        mutableDateTime18.add(durationFieldType23, (int) 'a');
        java.util.TimeZone timeZone28 = null;
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forTimeZone(timeZone28);
        org.joda.time.DateMidnight dateMidnight30 = new org.joda.time.DateMidnight((long) 1970, dateTimeZone29);
        mutableDateTime18.setTime((org.joda.time.ReadableInstant) dateMidnight30);
        int int32 = property11.compareTo((org.joda.time.ReadableInstant) dateMidnight30);
        java.util.Locale locale33 = java.util.Locale.JAPANESE;
        java.lang.String str34 = property11.getAsShortText(locale33);
        org.junit.Assert.assertNotNull(timeOfDay1);
        org.junit.Assert.assertNotNull(timeOfDay3);
        org.junit.Assert.assertNotNull(hours4);
        org.junit.Assert.assertNotNull(durationFieldType5);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(mutableDateTime18);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(periodType22);
        org.junit.Assert.assertNotNull(durationFieldType23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "0" + "'", str34, "0");
    }

    @Test
    public void test1510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1510");
        java.lang.Throwable throwable1 = null;
        java.security.InvalidKeyException invalidKeyException2 = new java.security.InvalidKeyException("Feb 21, 2022 9:34:32 AM", throwable1);
    }

    @Test
    public void test1511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1511");
        // The following exception was thrown during execution in test generation
        try {
            java.time.ZoneOffset zoneOffset3 = java.time.ZoneOffset.ofHoursMinutesSeconds(2022, 19043, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Zone offset hours not in valid range: value 2022 is not in the range -18 to 18");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1512");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime(100L, chronology1);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str4 = localTime2.toString("Optional.empty");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: O");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1513");
        java.util.function.DoubleUnaryOperator doubleUnaryOperator0 = java.util.function.DoubleUnaryOperator.identity();
        double double2 = doubleUnaryOperator0.applyAsDouble((double) (-1L));
        double double4 = doubleUnaryOperator0.applyAsDouble((double) 52);
        org.junit.Assert.assertNotNull(doubleUnaryOperator0);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + (-1.0d) + "'", double2 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 52.0d + "'", double4 == 52.0d);
    }

    @Test
    public void test1514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1514");
        java.util.MissingResourceException missingResourceException3 = new java.util.MissingResourceException("599b081c1808/172.17.0.2", "OptionalDouble.empty", "German");
    }

    @Test
    public void test1515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1515");
        java.net.ContentHandlerFactory contentHandlerFactory0 = null;
        java.net.URLConnection.setContentHandlerFactory(contentHandlerFactory0);
    }

    @Test
    public void test1516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1516");
        org.joda.time.TimeOfDay timeOfDay1 = org.joda.time.TimeOfDay.fromMillisOfDay((long) (short) 0);
        org.joda.time.TimeOfDay timeOfDay3 = org.joda.time.TimeOfDay.fromMillisOfDay((long) (short) 0);
        org.joda.time.Hours hours4 = org.joda.time.Hours.hoursBetween((org.joda.time.ReadablePartial) timeOfDay1, (org.joda.time.ReadablePartial) timeOfDay3);
        org.joda.time.DurationFieldType durationFieldType5 = org.joda.time.DurationFieldType.hours();
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay3.withFieldAdded(durationFieldType5, (int) (byte) 0);
        int int8 = timeOfDay3.getMillisOfSecond();
        org.joda.time.TimeOfDay timeOfDay10 = timeOfDay3.plusHours(9);
        org.joda.time.TimeOfDay.Property property11 = timeOfDay3.secondOfMinute();
        java.time.ZoneOffset zoneOffset14 = java.time.ZoneOffset.ofHoursMinutes(1, 10);
        java.time.LocalDate localDate15 = java.time.LocalDate.now((java.time.ZoneId) zoneOffset14);
        boolean boolean16 = property11.equals((java.lang.Object) localDate15);
        org.joda.time.DateTimeField dateTimeField17 = property11.getField();
        int int18 = property11.get();
        org.junit.Assert.assertNotNull(timeOfDay1);
        org.junit.Assert.assertNotNull(timeOfDay3);
        org.junit.Assert.assertNotNull(hours4);
        org.junit.Assert.assertNotNull(durationFieldType5);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(zoneOffset14);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
    }

    @Test
    public void test1517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1517");
        java.security.CodeSource codeSource0 = null;
        java.security.PermissionCollection permissionCollection1 = null;
        java.lang.ClassLoader classLoader2 = null;
        java.security.Principal[] principalArray3 = new java.security.Principal[] {};
        java.security.ProtectionDomain protectionDomain4 = new java.security.ProtectionDomain(codeSource0, permissionCollection1, classLoader2, principalArray3);
        org.junit.Assert.assertNotNull(principalArray3);
        org.junit.Assert.assertEquals(protectionDomain4.toString(), "ProtectionDomain  null\n null\n <no principals>\n null\n");
    }

    @Test
    public void test1518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1518");
        org.joda.time.Weeks weeks0 = org.joda.time.Weeks.ONE;
        java.util.concurrent.TimeUnit timeUnit1 = java.util.concurrent.TimeUnit.NANOSECONDS;
        boolean boolean2 = weeks0.equals((java.lang.Object) timeUnit1);
        org.joda.time.MutablePeriod mutablePeriod3 = weeks0.toMutablePeriod();
        mutablePeriod3.add((int) '#', 0, 10, 0, (int) (byte) 0, (int) (short) 0, 1, (-1));
        mutablePeriod3.clear();
        org.joda.time.Period period14 = org.joda.time.Period.ZERO;
        org.joda.time.Period period15 = period14.normalizedStandard();
        org.joda.time.Period period17 = period14.plusHours(2);
        org.joda.time.DurationFieldType durationFieldType18 = org.joda.time.DurationFieldType.hours();
        int int19 = period14.indexOf(durationFieldType18);
        mutablePeriod3.set(durationFieldType18, (int) (byte) 10);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.LocalTime localTime25 = new org.joda.time.LocalTime((long) 0, chronology24);
        org.joda.time.Chronology chronology26 = localTime25.getChronology();
        java.util.Locale locale27 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale locale28 = java.util.Locale.GERMANY;
        java.lang.String str29 = locale27.getDisplayScript(locale28);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket31 = new org.joda.time.format.DateTimeParserBucket((long) 1970, chronology26, locale27, (java.lang.Integer) 1);
        org.joda.time.DateTime dateTime32 = org.joda.time.DateTime.now(chronology26);
        org.joda.time.DurationField durationField33 = durationFieldType18.getField(chronology26);
        long long36 = durationField33.add(57L, 365);
        int int38 = durationField33.getValue((long) 4200);
        org.junit.Assert.assertNotNull(weeks0);
        org.junit.Assert.assertNotNull(timeUnit1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(mutablePeriod3);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(durationFieldType18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 4 + "'", int19 == 4);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 1314000057L + "'", long36 == 1314000057L);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
    }

    @Test
    public void test1519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1519");
        // The following exception was thrown during execution in test generation
        try {
            java.time.ZoneId zoneId1 = java.time.ZoneId.of("minuteOfDay");
            org.junit.Assert.fail("Expected exception of type java.time.zone.ZoneRulesException; message: Unknown time-zone ID: minuteOfDay");
        } catch (java.time.zone.ZoneRulesException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1520");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.Interval interval1 = localDate0.toInterval();
        org.joda.time.LocalDate.Property property2 = localDate0.dayOfMonth();
        org.joda.time.LocalDate.Property property3 = localDate0.weekOfWeekyear();
        org.joda.time.LocalDate.Property property4 = localDate0.weekyear();
        org.joda.time.LocalDate localDate6 = localDate0.plusMonths(86);
        org.junit.Assert.assertNotNull(interval1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDate6);
    }

    @Test
    public void test1521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1521");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 3, chronology1);
        org.joda.time.DateTime.Property property3 = dateTime2.dayOfYear();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight((java.lang.Object) dateTime2, chronology4);
        org.joda.time.MutableDateTime mutableDateTime6 = dateTime2.toMutableDateTime();
        org.joda.time.Days days7 = org.joda.time.Days.ONE;
        org.joda.time.MutableInterval mutableInterval8 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadablePeriod) days7);
        java.lang.String[] strArray11 = new java.lang.String[] { "halfdays", "Optional.empty" };
        java.util.ArrayList<java.lang.String> strList12 = new java.util.ArrayList<java.lang.String>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList12, strArray11);
        java.util.Iterator<java.lang.String> strItor14 = strList12.iterator();
        boolean boolean15 = days7.equals((java.lang.Object) strItor14);
        boolean boolean16 = strItor14.hasNext();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(days7);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(strItor14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    }

    @Test
    public void test1522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1522");
        java.io.OutputStream outputStream0 = null;
        java.io.FilterOutputStream filterOutputStream1 = new java.io.FilterOutputStream(outputStream0);
        java.io.PrintStream printStream3 = new java.io.PrintStream((java.io.OutputStream) filterOutputStream1, false);
        // The following exception was thrown during execution in test generation
        try {
            filterOutputStream1.write(32769);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1523");
        java.util.concurrent.TimeUnit timeUnit1 = java.util.concurrent.TimeUnit.NANOSECONDS;
        long long3 = timeUnit1.toNanos((long) (short) 10);
        java.nio.file.attribute.FileTime fileTime4 = java.nio.file.attribute.FileTime.from((long) 16384, timeUnit1);
        timeUnit1.sleep((long) 292269054);
        org.junit.Assert.assertNotNull(timeUnit1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 10L + "'", long3 == 10L);
        org.junit.Assert.assertNotNull(fileTime4);
    }

    @Test
    public void test1524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1524");
        org.joda.time.TimeOfDay timeOfDay1 = org.joda.time.TimeOfDay.fromMillisOfDay((long) (short) 0);
        org.joda.time.TimeOfDay timeOfDay3 = org.joda.time.TimeOfDay.fromMillisOfDay((long) (short) 0);
        org.joda.time.Hours hours4 = org.joda.time.Hours.hoursBetween((org.joda.time.ReadablePartial) timeOfDay1, (org.joda.time.ReadablePartial) timeOfDay3);
        org.joda.time.DurationFieldType durationFieldType5 = org.joda.time.DurationFieldType.hours();
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay3.withFieldAdded(durationFieldType5, (int) (byte) 0);
        int int8 = timeOfDay3.getMillisOfSecond();
        org.joda.time.TimeOfDay timeOfDay10 = timeOfDay3.plusHours(9);
        org.joda.time.TimeOfDay.Property property11 = timeOfDay3.secondOfMinute();
        java.time.ZoneOffset zoneOffset14 = java.time.ZoneOffset.ofHoursMinutes(1, 10);
        java.time.LocalDate localDate15 = java.time.LocalDate.now((java.time.ZoneId) zoneOffset14);
        boolean boolean16 = property11.equals((java.lang.Object) localDate15);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = property11.getFieldType();
        int int18 = property11.get();
        java.util.Locale locale19 = java.util.Locale.GERMANY;
        java.lang.String str20 = locale19.getDisplayName();
        java.lang.String str21 = property11.getAsShortText(locale19);
        boolean boolean22 = locale19.hasExtensions();
        org.junit.Assert.assertNotNull(timeOfDay1);
        org.junit.Assert.assertNotNull(timeOfDay3);
        org.junit.Assert.assertNotNull(hours4);
        org.junit.Assert.assertNotNull(durationFieldType5);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(zoneOffset14);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "German (Germany)" + "'", str20, "German (Germany)");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "0" + "'", str21, "0");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test1525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1525");
        int int0 = java.util.Calendar.DAY_OF_WEEK_IN_MONTH;
        org.junit.Assert.assertTrue("'" + int0 + "' != '" + 8 + "'", int0 == 8);
    }

    @Test
    public void test1526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1526");
        java.util.Locale locale0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.time.format.DecimalStyle decimalStyle1 = java.time.format.DecimalStyle.of(locale0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: locale");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1527");
        java.util.Optional<java.lang.Exception> exceptionOptional0 = java.util.Optional.empty();
        java.lang.String str1 = exceptionOptional0.toString();
        java.time.LocalDateTime localDateTime2 = java.time.LocalDateTime.now();
        java.time.temporal.ChronoField chronoField3 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime5 = localDateTime2.with((java.time.temporal.TemporalField) chronoField3, (long) 10);
        java.time.LocalDateTime localDateTime7 = localDateTime2.withDayOfYear((int) '/');
        boolean boolean8 = exceptionOptional0.equals((java.lang.Object) localDateTime7);
        java.time.LocalTime localTime13 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime14 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime13);
        java.time.LocalTime localTime19 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime20 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime19);
        java.time.temporal.ChronoField chronoField21 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime23 = localTime19.with((java.time.temporal.TemporalField) chronoField21, (long) (short) 1);
        long long24 = localTime13.getLong((java.time.temporal.TemporalField) chronoField21);
        java.time.LocalTime localTime26 = localTime13.withSecond((int) (short) 1);
        java.time.temporal.ChronoField chronoField27 = java.time.temporal.ChronoField.SECOND_OF_DAY;
        java.time.temporal.ValueRange valueRange28 = localTime26.range((java.time.temporal.TemporalField) chronoField27);
        java.time.Duration duration30 = java.time.Duration.ofSeconds((long) 0);
        java.time.LocalTime localTime31 = localTime26.plus((java.time.temporal.TemporalAmount) duration30);
        java.time.LocalDateTime localDateTime32 = localDateTime7.plus((java.time.temporal.TemporalAmount) duration30);
        java.time.LocalDateTime localDateTime34 = localDateTime32.withDayOfYear(22);
        // The following exception was thrown during execution in test generation
        try {
            java.time.LocalDateTime localDateTime36 = localDateTime32.withHour(1970);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for HourOfDay (valid values 0 - 23): 1970");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(exceptionOptional0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Optional.empty" + "'", str1, "Optional.empty");
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertTrue("'" + chronoField3 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField3.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertTrue("'" + chronoField21 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField21.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime23);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 3601000000001L + "'", long24 == 3601000000001L);
        org.junit.Assert.assertNotNull(localTime26);
        org.junit.Assert.assertTrue("'" + chronoField27 + "' != '" + java.time.temporal.ChronoField.SECOND_OF_DAY + "'", chronoField27.equals(java.time.temporal.ChronoField.SECOND_OF_DAY));
        org.junit.Assert.assertNotNull(valueRange28);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(localTime31);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(localDateTime34);
    }

    @Test
    public void test1528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1528");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        int int1 = localDate0.getCenturyOfEra();
        org.joda.time.LocalDate.Property property2 = localDate0.dayOfWeek();
        org.joda.time.LocalDate localDate4 = property2.addToCopy(2097);
        org.joda.time.DateTime dateTime5 = localDate4.toDateTimeAtStartOfDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate7 = localDate4.withDayOfWeek(25);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 25 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 20 + "'", int1 == 20);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(dateTime5);
    }

    @Test
    public void test1529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1529");
        float[] floatArray2 = new float[] { (-1L), (byte) -1 };
        java.nio.FloatBuffer floatBuffer3 = java.nio.FloatBuffer.wrap(floatArray2);
        java.nio.FloatBuffer floatBuffer4 = floatBuffer3.compact();
        java.nio.FloatBuffer floatBuffer5 = floatBuffer3.asReadOnlyBuffer();
        java.nio.ByteOrder byteOrder6 = floatBuffer3.order();
        // The following exception was thrown during execution in test generation
        try {
            java.nio.FloatBuffer floatBuffer8 = floatBuffer3.put((float) 3600000);
            org.junit.Assert.fail("Expected exception of type java.nio.BufferOverflowException; message: null");
        } catch (java.nio.BufferOverflowException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[-1.0, -1.0]");
        org.junit.Assert.assertNotNull(floatBuffer3);
        org.junit.Assert.assertNotNull(floatBuffer4);
        org.junit.Assert.assertNotNull(floatBuffer5);
        org.junit.Assert.assertNotNull(byteOrder6);
    }

    @Test
    public void test1530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1530");
        java.util.GregorianCalendar gregorianCalendar5 = new java.util.GregorianCalendar(12, 4096, 7, (-1), (int) (short) 10);
        int int6 = gregorianCalendar5.getWeeksInWeekYear();
        java.lang.String str7 = gregorianCalendar5.getCalendarType();
        java.time.ZonedDateTime zonedDateTime8 = gregorianCalendar5.toZonedDateTime();
        java.time.ZonedDateTime zonedDateTime10 = zonedDateTime8.minusMonths((long) 10);
        java.time.chrono.ChronoZonedDateTime<java.time.LocalDate> localDateChronoZonedDateTime11 = zonedDateTime8.withEarlierOffsetAtOverlap();
        int int12 = zonedDateTime8.getDayOfYear();
        java.time.ZonedDateTime zonedDateTime14 = zonedDateTime8.withMinute(34);
        java.time.Instant instant15 = java.time.Instant.from((java.time.temporal.TemporalAccessor) zonedDateTime8);
        int int16 = zonedDateTime8.getHour();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 52 + "'", int6 == 52);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "gregory" + "'", str7, "gregory");
        org.junit.Assert.assertNotNull(zonedDateTime8);
        org.junit.Assert.assertNotNull(zonedDateTime10);
        org.junit.Assert.assertNotNull(localDateChronoZonedDateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 127 + "'", int12 == 127);
        org.junit.Assert.assertNotNull(zonedDateTime14);
        org.junit.Assert.assertNotNull(instant15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 23 + "'", int16 == 23);
    }

    @Test
    public void test1531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1531");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableInterval mutableInterval1 = org.joda.time.MutableInterval.parse("\ufffd");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Format requires a '/' separator: ?");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1532");
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.ofHoursMinutes(1, 10);
        java.time.LocalDate localDate3 = java.time.LocalDate.now((java.time.ZoneId) zoneOffset2);
        java.time.Clock clock4 = java.time.Clock.system((java.time.ZoneId) zoneOffset2);
        java.lang.String str5 = zoneOffset2.toString();
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.now();
        java.time.LocalDateTime localDateTime8 = localDateTime6.minusYears((long) (byte) 10);
        java.time.LocalDateTime localDateTime9 = java.time.LocalDateTime.now();
        java.time.LocalDateTime localDateTime11 = localDateTime9.minusYears((long) (byte) 10);
        boolean boolean12 = localDateTime6.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime11);
        java.time.temporal.ChronoField chronoField13 = java.time.temporal.ChronoField.MICRO_OF_DAY;
        java.time.LocalTime localTime18 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime19 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime18);
        java.time.LocalTime localTime24 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime25 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime24);
        java.time.temporal.ChronoField chronoField26 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime28 = localTime24.with((java.time.temporal.TemporalField) chronoField26, (long) (short) 1);
        long long29 = localTime18.getLong((java.time.temporal.TemporalField) chronoField26);
        java.time.LocalTime localTime31 = chronoField13.adjustInto(localTime18, (long) (byte) 1);
        boolean boolean32 = localDateTime6.isSupported((java.time.temporal.TemporalField) chronoField13);
        java.time.LocalDateTime localDateTime33 = java.time.LocalDateTime.now();
        java.time.LocalDateTime localDateTime35 = localDateTime33.minusYears((long) (byte) 10);
        java.time.LocalDateTime localDateTime36 = java.time.LocalDateTime.now();
        java.time.LocalDateTime localDateTime38 = localDateTime36.minusYears((long) (byte) 10);
        boolean boolean39 = localDateTime33.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime38);
        java.time.LocalDateTime localDateTime40 = java.time.LocalDateTime.now();
        java.time.temporal.ChronoField chronoField41 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime43 = localDateTime40.with((java.time.temporal.TemporalField) chronoField41, (long) 10);
        java.time.LocalDateTime localDateTime45 = localDateTime40.minusMinutes((long) 12);
        boolean boolean46 = localDateTime38.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime40);
        int int47 = localDateTime38.getYear();
        boolean boolean48 = chronoField13.isSupportedBy((java.time.temporal.TemporalAccessor) localDateTime38);
        // The following exception was thrown during execution in test generation
        try {
            long long49 = zoneOffset2.getLong((java.time.temporal.TemporalField) chronoField13);
            org.junit.Assert.fail("Expected exception of type java.time.temporal.UnsupportedTemporalTypeException; message: Unsupported field: MicroOfDay");
        } catch (java.time.temporal.UnsupportedTemporalTypeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(clock4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+01:10" + "'", str5, "+01:10");
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + chronoField13 + "' != '" + java.time.temporal.ChronoField.MICRO_OF_DAY + "'", chronoField13.equals(java.time.temporal.ChronoField.MICRO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertNotNull(localTime24);
        org.junit.Assert.assertNotNull(localTime25);
        org.junit.Assert.assertTrue("'" + chronoField26 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField26.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime28);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 3601000000001L + "'", long29 == 3601000000001L);
        org.junit.Assert.assertNotNull(localTime31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertTrue("'" + chronoField41 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField41.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime43);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2012 + "'", int47 == 2012);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
    }

    @Test
    public void test1533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1533");
        java.util.function.DoubleSupplier doubleSupplier0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.DoubleStream doubleStream1 = java.util.stream.DoubleStream.generate(doubleSupplier0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1534");
        java.io.OutputStream outputStream0 = null;
        java.io.FilterOutputStream filterOutputStream1 = new java.io.FilterOutputStream(outputStream0);
        byte[] byteArray3 = new byte[] { (byte) 100 };
        filterOutputStream1.write(byteArray3, (int) (byte) 0, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer7 = java.nio.ByteBuffer.wrap(byteArray3);
        java.nio.LongBuffer longBuffer8 = byteBuffer7.asLongBuffer();
        // The following exception was thrown during execution in test generation
        try {
            byte byte10 = byteBuffer7.get((int) '0');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: 48");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[100]");
        org.junit.Assert.assertNotNull(byteBuffer7);
        org.junit.Assert.assertNotNull(longBuffer8);
    }

    @Test
    public void test1535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1535");
        java.time.format.DateTimeFormatter dateTimeFormatter0 = java.time.format.DateTimeFormatter.ISO_DATE;
        java.text.Format format1 = dateTimeFormatter0.toFormat();
        java.text.Format format2 = dateTimeFormatter0.toFormat();
        java.time.ZoneId zoneId3 = null;
        java.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter0.withZone(zoneId3);
        java.text.Format format5 = dateTimeFormatter0.toFormat();
        java.text.ParsePosition parsePosition8 = new java.text.ParsePosition((-624));
        java.lang.Object obj9 = format5.parseObject("2022-02-21T09:34:42.358Z", parsePosition8);
        int int10 = parsePosition8.getIndex();
        int int11 = parsePosition8.getIndex();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(format1);
        org.junit.Assert.assertNotNull(format2);
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(format5);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-624) + "'", int10 == (-624));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-624) + "'", int11 == (-624));
    }

    @Test
    public void test1536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1536");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((long) 0, chronology1);
        org.joda.time.Chronology chronology3 = localTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField4 = chronology3.weekyearOfCentury();
        long long6 = dateTimeField4.roundHalfEven((long) 16);
        boolean boolean7 = dateTimeField4.isSupported();
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
    }

    @Test
    public void test1537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1537");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.now();
        java.time.LocalDateTime localDateTime2 = localDateTime0.minusYears((long) (byte) 10);
        int int3 = localDateTime0.getHour();
        java.time.LocalDateTime localDateTime5 = localDateTime0.plusWeeks((long) 5);
        java.time.temporal.ChronoField chronoField6 = java.time.temporal.ChronoField.NANO_OF_SECOND;
        java.time.OffsetTime offsetTime7 = java.time.OffsetTime.MAX;
        java.time.LocalTime localTime8 = offsetTime7.toLocalTime();
        java.lang.String str9 = offsetTime7.toString();
        java.time.temporal.ValueRange valueRange10 = chronoField6.rangeRefinedBy((java.time.temporal.TemporalAccessor) offsetTime7);
        java.util.GregorianCalendar gregorianCalendar16 = new java.util.GregorianCalendar(12, 4096, 7, (-1), (int) (short) 10);
        int int17 = gregorianCalendar16.getWeeksInWeekYear();
        java.lang.String str18 = gregorianCalendar16.getCalendarType();
        java.time.ZonedDateTime zonedDateTime19 = gregorianCalendar16.toZonedDateTime();
        java.time.ZonedDateTime zonedDateTime21 = zonedDateTime19.minusMonths((long) 10);
        java.time.ZonedDateTime zonedDateTime23 = zonedDateTime21.minusHours((long) 9);
        java.time.LocalTime localTime28 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime29 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime28);
        java.time.LocalTime localTime34 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime35 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime34);
        java.time.temporal.ChronoField chronoField36 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime38 = localTime34.with((java.time.temporal.TemporalField) chronoField36, (long) (short) 1);
        long long39 = localTime28.getLong((java.time.temporal.TemporalField) chronoField36);
        java.time.LocalTime localTime41 = localTime28.withSecond((int) (short) 1);
        int int42 = localTime41.getMinute();
        java.time.LocalTime localTime44 = localTime41.plusHours((long) (-1));
        java.time.LocalDateTime localDateTime45 = java.time.LocalDateTime.now();
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery46 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period47 = localDateTime45.query(periodTemporalQuery46);
        java.time.Period period48 = localTime44.query(periodTemporalQuery46);
        java.time.Period period49 = zonedDateTime23.query(periodTemporalQuery46);
        java.time.Period period50 = offsetTime7.query(periodTemporalQuery46);
        java.time.Period period51 = localDateTime0.query(periodTemporalQuery46);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 9 + "'", int3 == 9);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + chronoField6 + "' != '" + java.time.temporal.ChronoField.NANO_OF_SECOND + "'", chronoField6.equals(java.time.temporal.ChronoField.NANO_OF_SECOND));
        org.junit.Assert.assertNotNull(offsetTime7);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "23:59:59.999999999-18:00" + "'", str9, "23:59:59.999999999-18:00");
        org.junit.Assert.assertNotNull(valueRange10);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 52 + "'", int17 == 52);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "gregory" + "'", str18, "gregory");
        org.junit.Assert.assertNotNull(zonedDateTime19);
        org.junit.Assert.assertNotNull(zonedDateTime21);
        org.junit.Assert.assertNotNull(zonedDateTime23);
        org.junit.Assert.assertNotNull(localTime28);
        org.junit.Assert.assertNotNull(localTime29);
        org.junit.Assert.assertNotNull(localTime34);
        org.junit.Assert.assertNotNull(localTime35);
        org.junit.Assert.assertTrue("'" + chronoField36 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField36.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime38);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 3601000000001L + "'", long39 == 3601000000001L);
        org.junit.Assert.assertNotNull(localTime41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(localTime44);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(periodTemporalQuery46);
        org.junit.Assert.assertNotNull(period47);
        org.junit.Assert.assertNotNull(period48);
        org.junit.Assert.assertNotNull(period49);
        org.junit.Assert.assertNotNull(period50);
        org.junit.Assert.assertNotNull(period51);
    }

    @Test
    public void test1538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1538");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.Duration duration2 = new org.joda.time.Duration(readableInstant0, readableInstant1);
        org.joda.time.Duration duration4 = duration2.withMillis((-1L));
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((long) 3, chronology6);
        org.joda.time.DateTime.Property property8 = dateTime7.dayOfYear();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight((java.lang.Object) dateTime7, chronology9);
        org.joda.time.DateMidnight dateMidnight12 = dateMidnight10.minusMonths((-1));
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight10.withDayOfYear((int) ' ');
        org.joda.time.PeriodType periodType15 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period16 = duration4.toPeriodFrom((org.joda.time.ReadableInstant) dateMidnight10, periodType15);
        org.joda.time.PeriodType periodType17 = period16.getPeriodType();
        org.joda.time.Minutes minutes18 = period16.toStandardMinutes();
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(periodType15);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(periodType17);
        org.junit.Assert.assertNotNull(minutes18);
    }

    @Test
    public void test1539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1539");
        java.util.Set<java.lang.String> strSet0 = java.time.ZoneId.getAvailableZoneIds();
        java.util.stream.Stream<java.lang.String> strStream1 = strSet0.parallelStream();
        java.lang.Object[] objArray2 = strSet0.toArray();
        java.util.Spliterator<java.lang.String> strSpliterator3 = strSet0.spliterator();
        java.util.Set<java.lang.String> strSet4 = java.time.ZoneId.getAvailableZoneIds();
        java.util.stream.Stream<java.lang.String> strStream5 = strSet4.parallelStream();
        boolean boolean7 = strSet4.remove((java.lang.Object) 0);
        java.time.LocalTime localTime12 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime13 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime12);
        java.time.LocalTime localTime18 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime19 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime18);
        java.time.temporal.ChronoField chronoField20 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime22 = localTime18.with((java.time.temporal.TemporalField) chronoField20, (long) (short) 1);
        long long23 = localTime12.getLong((java.time.temporal.TemporalField) chronoField20);
        java.time.LocalTime localTime25 = localTime12.withSecond((int) (short) 1);
        java.time.temporal.ChronoField chronoField26 = java.time.temporal.ChronoField.SECOND_OF_DAY;
        java.time.temporal.ValueRange valueRange27 = localTime25.range((java.time.temporal.TemporalField) chronoField26);
        boolean boolean28 = strSet4.remove((java.lang.Object) chronoField26);
        boolean boolean29 = strSet0.retainAll((java.util.Collection<java.lang.String>) strSet4);
        java.util.Spliterator<java.lang.String> strSpliterator30 = strSet0.spliterator();
        java.util.Set<java.lang.String> strSet31 = java.time.ZoneId.getAvailableZoneIds();
        java.util.Set<java.lang.String> strSet32 = java.time.ZoneId.getAvailableZoneIds();
        java.util.stream.Stream<java.lang.String> strStream33 = strSet32.parallelStream();
        java.lang.Object[] objArray34 = strSet32.toArray();
        java.util.Spliterator<java.lang.String> strSpliterator35 = strSet32.spliterator();
        boolean boolean36 = strSet31.containsAll((java.util.Collection<java.lang.String>) strSet32);
        boolean boolean37 = strSet0.removeAll((java.util.Collection<java.lang.String>) strSet32);
        java.nio.charset.CoderResult coderResult38 = java.nio.charset.CoderResult.UNDERFLOW;
        boolean boolean39 = strSet0.contains((java.lang.Object) coderResult38);
        java.lang.Object[] objArray40 = strSet0.toArray();
        org.junit.Assert.assertNotNull(strSet0);
        org.junit.Assert.assertNotNull(strStream1);
        org.junit.Assert.assertNotNull(objArray2);
        org.junit.Assert.assertNotNull(strSpliterator3);
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertNotNull(strStream5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertTrue("'" + chronoField20 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField20.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 3601000000001L + "'", long23 == 3601000000001L);
        org.junit.Assert.assertNotNull(localTime25);
        org.junit.Assert.assertTrue("'" + chronoField26 + "' != '" + java.time.temporal.ChronoField.SECOND_OF_DAY + "'", chronoField26.equals(java.time.temporal.ChronoField.SECOND_OF_DAY));
        org.junit.Assert.assertNotNull(valueRange27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(strSpliterator30);
        org.junit.Assert.assertNotNull(strSet31);
        org.junit.Assert.assertNotNull(strSet32);
        org.junit.Assert.assertNotNull(strStream33);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertNotNull(strSpliterator35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(coderResult38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[]");
    }

    @Test
    public void test1540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1540");
        // The following exception was thrown during execution in test generation
        try {
            long long1 = java.util.Date.parse("2022-02-21T09:36:19.151");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1541");
        java.time.Instant instant0 = java.time.Instant.now();
        java.nio.file.attribute.FileTime fileTime1 = java.nio.file.attribute.FileTime.from(instant0);
        long long2 = instant0.toEpochMilli();
        org.junit.Assert.assertNotNull(instant0);
        org.junit.Assert.assertNotNull(fileTime1);
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645436199819L + "'", long2 == 1645436199819L);
    }

    @Test
    public void test1542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1542");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        org.joda.time.PeriodType periodType3 = org.joda.time.PeriodType.years();
        org.joda.time.format.PeriodFormatter periodFormatter4 = periodFormatter2.withParseType(periodType3);
        java.util.Locale locale6 = new java.util.Locale("hi!");
        org.joda.time.format.PeriodFormatter periodFormatter7 = periodFormatter2.withLocale(locale6);
        java.util.Locale.LanguageRange[] languageRangeArray8 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList9 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList9, languageRangeArray8);
        java.util.Locale.LanguageRange[] languageRangeArray11 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList12 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList12, languageRangeArray11);
        java.util.Locale locale14 = java.util.Locale.JAPAN;
        java.util.Locale[] localeArray15 = new java.util.Locale[] { locale14 };
        java.util.ArrayList<java.util.Locale> localeList16 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList16, localeArray15);
        java.util.List<java.util.Locale> localeList18 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList12, (java.util.Collection<java.util.Locale>) localeList16);
        localeList18.clear();
        java.util.List<java.util.Locale> localeList20 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList9, (java.util.Collection<java.util.Locale>) localeList18);
        java.util.Locale.LanguageRange[] languageRangeArray21 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList22 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList22, languageRangeArray21);
        java.util.Locale.LanguageRange[] languageRangeArray24 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList25 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList25, languageRangeArray24);
        java.util.Locale locale27 = java.util.Locale.JAPAN;
        java.util.Locale[] localeArray28 = new java.util.Locale[] { locale27 };
        java.util.ArrayList<java.util.Locale> localeList29 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList29, localeArray28);
        java.util.List<java.util.Locale> localeList31 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList25, (java.util.Collection<java.util.Locale>) localeList29);
        localeList31.clear();
        java.util.List<java.util.Locale> localeList33 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList22, (java.util.Collection<java.util.Locale>) localeList31);
        java.util.List<java.util.Locale> localeList34 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList9, (java.util.Collection<java.util.Locale>) localeList33);
        java.util.ListIterator<java.util.Locale> localeItor35 = localeList33.listIterator();
        java.util.Locale locale36 = java.util.Locale.ENGLISH;
        localeItor35.add(locale36);
        org.joda.time.format.PeriodFormatter periodFormatter38 = periodFormatter2.withLocale(locale36);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime((long) 3, chronology40);
        org.joda.time.DateTime.Property property42 = dateTime41.dayOfYear();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.DateMidnight dateMidnight44 = new org.joda.time.DateMidnight((java.lang.Object) dateTime41, chronology43);
        org.joda.time.MutableDateTime mutableDateTime45 = dateTime41.toMutableDateTime();
        mutableDateTime45.addYears((int) (short) 100);
        org.joda.time.MutableDateTime.Property property48 = mutableDateTime45.dayOfWeek();
        org.joda.time.MutableDateTime.Property property49 = mutableDateTime45.year();
        java.util.TimeZone timeZone50 = null;
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.forTimeZone(timeZone50);
        mutableDateTime45.setZone(dateTimeZone51);
        java.util.Locale locale54 = java.util.Locale.TAIWAN;
        java.lang.String str55 = dateTimeZone51.getShortName((long) 64, locale54);
        java.lang.String str56 = locale54.getDisplayName();
        org.joda.time.format.PeriodFormatter periodFormatter57 = periodFormatter38.withLocale(locale54);
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(periodFormatter4);
        org.junit.Assert.assertEquals(locale6.toString(), "hi!");
        org.junit.Assert.assertNotNull(periodFormatter7);
        org.junit.Assert.assertNotNull(languageRangeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(languageRangeArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(localeArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(localeList18);
        org.junit.Assert.assertNotNull(localeList20);
        org.junit.Assert.assertNotNull(languageRangeArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(languageRangeArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(localeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(localeList31);
        org.junit.Assert.assertNotNull(localeList33);
        org.junit.Assert.assertNotNull(localeList34);
        org.junit.Assert.assertNotNull(localeItor35);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "en");
        org.junit.Assert.assertNotNull(periodFormatter38);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(mutableDateTime45);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "+00:00" + "'", str55, "+00:00");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "Chinese (Taiwan)" + "'", str56, "Chinese (Taiwan)");
        org.junit.Assert.assertNotNull(periodFormatter57);
    }

    @Test
    public void test1543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1543");
        java.util.Map<java.lang.String, java.lang.String> strMap0 = java.time.ZoneId.SHORT_IDS;
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        boolean boolean2 = strMap0.containsValue((java.lang.Object) dateTimeFieldType1);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str5 = strMap0.put("2022-02-21T09:36:20.701Z", "2022-02-21T09:34:20.882Z");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strMap0);
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test1544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1544");
        org.joda.time.YearMonthDay yearMonthDay0 = new org.joda.time.YearMonthDay();
        java.util.TimeZone timeZone3 = null;
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forTimeZone(timeZone3);
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight((long) 1970, dateTimeZone4);
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((long) 3600000, dateTimeZone4);
        org.joda.time.DateMidnight dateMidnight7 = yearMonthDay0.toDateMidnight(dateTimeZone4);
        org.joda.time.LocalDate localDate8 = yearMonthDay0.toLocalDate();
        org.joda.time.DateTime dateTime9 = localDate8.toDateTimeAtMidnight();
        org.joda.time.DateTime dateTime11 = dateTime9.plusWeeks(679);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
    }

    @Test
    public void test1545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1545");
        short[] shortArray2 = new short[] { (short) 1, (byte) 10 };
        java.nio.ShortBuffer shortBuffer3 = java.nio.ShortBuffer.wrap(shortArray2);
        short[] shortArray6 = new short[] { (short) 1, (byte) 10 };
        java.nio.ShortBuffer shortBuffer7 = java.nio.ShortBuffer.wrap(shortArray6);
        java.nio.ShortBuffer shortBuffer8 = shortBuffer3.put(shortBuffer7);
        short[] shortArray11 = new short[] { (byte) 0, (short) 1 };
        java.nio.ShortBuffer shortBuffer12 = java.nio.ShortBuffer.wrap(shortArray11);
        short[] shortArray15 = new short[] { (short) 1, (byte) 10 };
        java.nio.ShortBuffer shortBuffer16 = java.nio.ShortBuffer.wrap(shortArray15);
        short[] shortArray19 = new short[] { (short) 1, (byte) 10 };
        java.nio.ShortBuffer shortBuffer20 = java.nio.ShortBuffer.wrap(shortArray19);
        java.nio.ShortBuffer shortBuffer21 = shortBuffer16.put(shortBuffer20);
        int int22 = shortBuffer21.limit();
        boolean boolean23 = shortBuffer21.isReadOnly();
        java.nio.ShortBuffer shortBuffer24 = shortBuffer12.put(shortBuffer21);
        boolean boolean25 = shortBuffer24.hasArray();
        int int26 = shortBuffer7.compareTo(shortBuffer24);
        short[] shortArray29 = new short[] { (short) 1, (byte) 10 };
        java.nio.ShortBuffer shortBuffer30 = java.nio.ShortBuffer.wrap(shortArray29);
        short[] shortArray33 = new short[] { (short) 1, (byte) 10 };
        java.nio.ShortBuffer shortBuffer34 = java.nio.ShortBuffer.wrap(shortArray33);
        java.nio.ShortBuffer shortBuffer35 = shortBuffer30.put(shortBuffer34);
        int int36 = shortBuffer35.limit();
        java.nio.ShortBuffer shortBuffer37 = shortBuffer35.asReadOnlyBuffer();
        short[] shortArray38 = shortBuffer35.array();
        java.nio.ShortBuffer shortBuffer39 = java.nio.ShortBuffer.wrap(shortArray38);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ShortBuffer shortBuffer42 = shortBuffer24.put(shortArray38, (-2), 2097);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(shortArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray2), "[1, 10]");
        org.junit.Assert.assertNotNull(shortBuffer3);
        org.junit.Assert.assertNotNull(shortArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray6), "[1, 10]");
        org.junit.Assert.assertNotNull(shortBuffer7);
        org.junit.Assert.assertNotNull(shortBuffer8);
        org.junit.Assert.assertNotNull(shortArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray11), "[0, 1]");
        org.junit.Assert.assertNotNull(shortBuffer12);
        org.junit.Assert.assertNotNull(shortArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray15), "[1, 10]");
        org.junit.Assert.assertNotNull(shortBuffer16);
        org.junit.Assert.assertNotNull(shortArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray19), "[1, 10]");
        org.junit.Assert.assertNotNull(shortBuffer20);
        org.junit.Assert.assertNotNull(shortBuffer21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(shortBuffer24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-2) + "'", int26 == (-2));
        org.junit.Assert.assertNotNull(shortArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray29), "[1, 10]");
        org.junit.Assert.assertNotNull(shortBuffer30);
        org.junit.Assert.assertNotNull(shortArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray33), "[1, 10]");
        org.junit.Assert.assertNotNull(shortBuffer34);
        org.junit.Assert.assertNotNull(shortBuffer35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2 + "'", int36 == 2);
        org.junit.Assert.assertNotNull(shortBuffer37);
        org.junit.Assert.assertNotNull(shortArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray38), "[1, 10]");
        org.junit.Assert.assertNotNull(shortBuffer39);
    }

    @Test
    public void test1546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1546");
        java.util.Set<java.lang.String> strSet0 = java.time.ZoneId.getAvailableZoneIds();
        java.util.stream.Stream<java.lang.String> strStream1 = strSet0.parallelStream();
        boolean boolean3 = strSet0.remove((java.lang.Object) 0);
        boolean boolean5 = strSet0.add("0 - 86399");
        org.joda.time.Days days6 = org.joda.time.Days.ONE;
        org.joda.time.PeriodType periodType7 = days6.getPeriodType();
        org.joda.time.Days days9 = days6.multipliedBy(1024);
        org.joda.time.Days days10 = days9.negated();
        boolean boolean11 = strSet0.equals((java.lang.Object) days10);
        int int12 = strSet0.size();
        org.junit.Assert.assertNotNull(strSet0);
        org.junit.Assert.assertNotNull(strStream1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(days6);
        org.junit.Assert.assertNotNull(periodType7);
        org.junit.Assert.assertNotNull(days9);
        org.junit.Assert.assertNotNull(days10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 601 + "'", int12 == 601);
    }

    @Test
    public void test1547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1547");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 3, chronology1);
        org.joda.time.DateTime.Property property3 = dateTime2.dayOfYear();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight((java.lang.Object) dateTime2, chronology4);
        org.joda.time.MutableDateTime mutableDateTime6 = dateTime2.toMutableDateTime();
        mutableDateTime6.addYears((int) (short) 100);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime6.millisOfDay();
        org.joda.time.PeriodType periodType10 = org.joda.time.PeriodType.years();
        org.joda.time.DurationFieldType durationFieldType11 = org.joda.time.DurationFieldType.halfdays();
        int int12 = periodType10.indexOf(durationFieldType11);
        mutableDateTime6.add(durationFieldType11, (int) 'a');
        org.joda.time.MutableDateTime.Property property15 = mutableDateTime6.millisOfSecond();
        org.joda.time.MutableDateTime mutableDateTime16 = property15.roundHalfFloor();
        float[] floatArray19 = new float[] { (-1L), (byte) -1 };
        java.nio.FloatBuffer floatBuffer20 = java.nio.FloatBuffer.wrap(floatArray19);
        java.nio.FloatBuffer floatBuffer21 = floatBuffer20.compact();
        java.nio.FloatBuffer floatBuffer22 = floatBuffer20.asReadOnlyBuffer();
        java.nio.ByteOrder byteOrder23 = floatBuffer20.order();
        java.nio.FloatBuffer floatBuffer24 = floatBuffer20.slice();
        int int25 = floatBuffer20.arrayOffset();
        boolean boolean26 = mutableDateTime16.equals((java.lang.Object) floatBuffer20);
        boolean boolean27 = floatBuffer20.isDirect();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(periodType10);
        org.junit.Assert.assertNotNull(durationFieldType11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertNotNull(floatArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray19), "[-1.0, -1.0]");
        org.junit.Assert.assertNotNull(floatBuffer20);
        org.junit.Assert.assertNotNull(floatBuffer21);
        org.junit.Assert.assertNotNull(floatBuffer22);
        org.junit.Assert.assertNotNull(byteOrder23);
        org.junit.Assert.assertNotNull(floatBuffer24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test1548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1548");
        java.util.GregorianCalendar gregorianCalendar5 = new java.util.GregorianCalendar(12, 4096, 7, (-1), (int) (short) 10);
        int int6 = gregorianCalendar5.getWeeksInWeekYear();
        java.util.TimeZone timeZone7 = gregorianCalendar5.getTimeZone();
        int int9 = timeZone7.getOffset((long) 14);
        java.util.TimeZone.setDefault(timeZone7);
        java.time.ZoneId zoneId11 = timeZone7.toZoneId();
        int int12 = timeZone7.getDSTSavings();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 52 + "'", int6 == 52);
        org.junit.Assert.assertNotNull(timeZone7);
        org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(zoneId11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test1549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1549");
        java.util.concurrent.TimeUnit timeUnit0 = java.util.concurrent.TimeUnit.SECONDS;
        org.junit.Assert.assertNotNull(timeUnit0);
    }

    @Test
    public void test1550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1550");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        org.joda.time.PeriodType periodType3 = org.joda.time.PeriodType.years();
        org.joda.time.format.PeriodFormatter periodFormatter4 = periodFormatter2.withParseType(periodType3);
        java.util.Locale locale6 = new java.util.Locale("hi!");
        org.joda.time.format.PeriodFormatter periodFormatter7 = periodFormatter2.withLocale(locale6);
        java.util.Locale.LanguageRange[] languageRangeArray8 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList9 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList9, languageRangeArray8);
        java.util.Locale.LanguageRange[] languageRangeArray11 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList12 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList12, languageRangeArray11);
        java.util.Locale locale14 = java.util.Locale.JAPAN;
        java.util.Locale[] localeArray15 = new java.util.Locale[] { locale14 };
        java.util.ArrayList<java.util.Locale> localeList16 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList16, localeArray15);
        java.util.List<java.util.Locale> localeList18 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList12, (java.util.Collection<java.util.Locale>) localeList16);
        localeList18.clear();
        java.util.List<java.util.Locale> localeList20 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList9, (java.util.Collection<java.util.Locale>) localeList18);
        java.util.Locale.LanguageRange[] languageRangeArray21 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList22 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList22, languageRangeArray21);
        java.util.Locale.LanguageRange[] languageRangeArray24 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList25 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList25, languageRangeArray24);
        java.util.Locale locale27 = java.util.Locale.JAPAN;
        java.util.Locale[] localeArray28 = new java.util.Locale[] { locale27 };
        java.util.ArrayList<java.util.Locale> localeList29 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList29, localeArray28);
        java.util.List<java.util.Locale> localeList31 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList25, (java.util.Collection<java.util.Locale>) localeList29);
        localeList31.clear();
        java.util.List<java.util.Locale> localeList33 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList22, (java.util.Collection<java.util.Locale>) localeList31);
        java.util.List<java.util.Locale> localeList34 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList9, (java.util.Collection<java.util.Locale>) localeList33);
        java.util.ListIterator<java.util.Locale> localeItor35 = localeList33.listIterator();
        java.util.Locale locale36 = java.util.Locale.ENGLISH;
        localeItor35.add(locale36);
        org.joda.time.format.PeriodFormatter periodFormatter38 = periodFormatter2.withLocale(locale36);
        org.joda.time.format.PeriodPrinter periodPrinter39 = periodFormatter38.getPrinter();
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(periodFormatter4);
        org.junit.Assert.assertEquals(locale6.toString(), "hi!");
        org.junit.Assert.assertNotNull(periodFormatter7);
        org.junit.Assert.assertNotNull(languageRangeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(languageRangeArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(localeArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(localeList18);
        org.junit.Assert.assertNotNull(localeList20);
        org.junit.Assert.assertNotNull(languageRangeArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(languageRangeArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(localeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(localeList31);
        org.junit.Assert.assertNotNull(localeList33);
        org.junit.Assert.assertNotNull(localeList34);
        org.junit.Assert.assertNotNull(localeItor35);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "en");
        org.junit.Assert.assertNotNull(periodFormatter38);
        org.junit.Assert.assertNull(periodPrinter39);
    }

    @Test
    public void test1551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1551");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 3, chronology1);
        org.joda.time.Period period3 = org.joda.time.Period.ZERO;
        org.joda.time.Period period4 = period3.normalizedStandard();
        org.joda.time.Period period6 = period4.minusMinutes((int) ' ');
        org.joda.time.Period period8 = period6.minusMonths((int) (byte) 0);
        org.joda.time.PeriodType periodType9 = period8.getPeriodType();
        org.joda.time.DateTime dateTime10 = dateTime2.minus((org.joda.time.ReadablePeriod) period8);
        org.joda.time.DateTime dateTime12 = dateTime2.plusHours(34);
        org.joda.time.DateTime dateTime14 = dateTime2.plusMonths(5);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.LocalTime localTime17 = new org.joda.time.LocalTime((long) 0, chronology16);
        org.joda.time.Chronology chronology18 = localTime17.getChronology();
        org.joda.time.DateTimeField dateTimeField19 = chronology18.weekyearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime20 = org.joda.time.MutableDateTime.now(chronology18);
        mutableDateTime20.setWeekOfWeekyear((int) '#');
        mutableDateTime20.addHours(0);
        org.joda.time.Days days25 = org.joda.time.Days.daysBetween((org.joda.time.ReadableInstant) dateTime14, (org.joda.time.ReadableInstant) mutableDateTime20);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.LocalTime localTime29 = new org.joda.time.LocalTime((long) 0, chronology28);
        org.joda.time.Chronology chronology30 = localTime29.getChronology();
        java.util.Locale locale31 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale locale32 = java.util.Locale.GERMANY;
        java.lang.String str33 = locale31.getDisplayScript(locale32);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket35 = new org.joda.time.format.DateTimeParserBucket((long) 1970, chronology30, locale31, (java.lang.Integer) 1);
        long long41 = chronology30.getDateTimeMillis(1L, (int) (short) 10, 8, 4, 3);
        org.joda.time.DurationField durationField42 = chronology30.halfdays();
        org.joda.time.DateTimeField dateTimeField43 = chronology30.weekyear();
        int int44 = mutableDateTime20.get(dateTimeField43);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime20.setDateTime(3601, (int) (short) 0, 10, 601, 576, 624, 86);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 601 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(mutableDateTime20);
        org.junit.Assert.assertNotNull(days25);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 36484003L + "'", long41 == 36484003L);
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2022 + "'", int44 == 2022);
    }

    @Test
    public void test1552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1552");
        java.util.stream.Stream<java.lang.Object> objStream0 = java.util.stream.Stream.empty();
        java.lang.Object[] objArray1 = objStream0.toArray();
        java.util.stream.Stream<java.lang.Object> objStream2 = objStream0.parallel();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Optional<java.lang.Object> objOptional3 = objStream0.findAny();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: stream has already been operated upon or closed");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objStream0);
        org.junit.Assert.assertNotNull(objArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray1), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray1), "[]");
        org.junit.Assert.assertNotNull(objStream2);
    }

    @Test
    public void test1553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1553");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.OffsetDateTime offsetDateTime1 = java.time.OffsetDateTime.now();
        java.time.LocalDate localDate3 = java.time.LocalDate.ofEpochDay((long) ' ');
        int int4 = localDate3.getMonthValue();
        org.joda.time.Period period5 = org.joda.time.Period.ZERO;
        org.joda.time.Period period6 = period5.normalizedStandard();
        org.joda.time.Period period8 = period5.plusHours(2);
        java.time.chrono.IsoEra isoEra9 = java.time.chrono.IsoEra.CE;
        boolean boolean10 = period8.equals((java.lang.Object) isoEra9);
        java.time.LocalTime localTime15 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime16 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime15);
        java.time.LocalTime localTime21 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime22 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime21);
        java.time.temporal.ChronoField chronoField23 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime25 = localTime21.with((java.time.temporal.TemporalField) chronoField23, (long) (short) 1);
        long long26 = localTime15.getLong((java.time.temporal.TemporalField) chronoField23);
        boolean boolean27 = isoEra9.isSupported((java.time.temporal.TemporalField) chronoField23);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery28 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period29 = isoEra9.query(periodTemporalQuery28);
        boolean boolean30 = period29.isNegative();
        java.time.Period period32 = period29.plusDays((long) ' ');
        java.time.temporal.ChronoField chronoField33 = java.time.temporal.ChronoField.SECOND_OF_DAY;
        boolean boolean34 = period29.equals((java.lang.Object) chronoField33);
        boolean boolean35 = localDate3.isSupported((java.time.temporal.TemporalField) chronoField33);
        java.time.temporal.TemporalUnit temporalUnit36 = chronoField33.getRangeUnit();
        java.time.OffsetDateTime offsetDateTime37 = offsetDateTime1.truncatedTo(temporalUnit36);
        java.time.LocalDate localDate40 = java.time.LocalDate.ofEpochDay((long) ' ');
        int int41 = localDate40.getMonthValue();
        org.joda.time.Period period42 = org.joda.time.Period.ZERO;
        org.joda.time.Period period43 = period42.normalizedStandard();
        org.joda.time.Period period45 = period42.plusHours(2);
        java.time.chrono.IsoEra isoEra46 = java.time.chrono.IsoEra.CE;
        boolean boolean47 = period45.equals((java.lang.Object) isoEra46);
        java.time.LocalTime localTime52 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime53 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime52);
        java.time.LocalTime localTime58 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime59 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime58);
        java.time.temporal.ChronoField chronoField60 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime62 = localTime58.with((java.time.temporal.TemporalField) chronoField60, (long) (short) 1);
        long long63 = localTime52.getLong((java.time.temporal.TemporalField) chronoField60);
        boolean boolean64 = isoEra46.isSupported((java.time.temporal.TemporalField) chronoField60);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery65 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period66 = isoEra46.query(periodTemporalQuery65);
        boolean boolean67 = period66.isNegative();
        java.time.Period period69 = period66.plusDays((long) ' ');
        java.time.temporal.ChronoField chronoField70 = java.time.temporal.ChronoField.SECOND_OF_DAY;
        boolean boolean71 = period66.equals((java.lang.Object) chronoField70);
        boolean boolean72 = localDate40.isSupported((java.time.temporal.TemporalField) chronoField70);
        java.time.temporal.TemporalUnit temporalUnit73 = chronoField70.getRangeUnit();
        java.time.OffsetDateTime offsetDateTime74 = offsetDateTime37.minus(8L, temporalUnit73);
        java.time.OffsetDateTime offsetDateTime76 = offsetDateTime74.plusMonths((long) 28);
        // The following exception was thrown during execution in test generation
        try {
            java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime77 = localDateTime0.with((java.time.temporal.TemporalAdjuster) offsetDateTime74);
            org.junit.Assert.fail("Expected exception of type java.time.temporal.UnsupportedTemporalTypeException; message: Unsupported field: OffsetSeconds");
        } catch (java.time.temporal.UnsupportedTemporalTypeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(offsetDateTime1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2 + "'", int4 == 2);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertTrue("'" + isoEra9 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra9.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertTrue("'" + chronoField23 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField23.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime25);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 3601000000001L + "'", long26 == 3601000000001L);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(periodTemporalQuery28);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertTrue("'" + chronoField33 + "' != '" + java.time.temporal.ChronoField.SECOND_OF_DAY + "'", chronoField33.equals(java.time.temporal.ChronoField.SECOND_OF_DAY));
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + temporalUnit36 + "' != '" + java.time.temporal.ChronoUnit.DAYS + "'", temporalUnit36.equals(java.time.temporal.ChronoUnit.DAYS));
        org.junit.Assert.assertNotNull(offsetDateTime37);
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 2 + "'", int41 == 2);
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertTrue("'" + isoEra46 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra46.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(localTime52);
        org.junit.Assert.assertNotNull(localTime53);
        org.junit.Assert.assertNotNull(localTime58);
        org.junit.Assert.assertNotNull(localTime59);
        org.junit.Assert.assertTrue("'" + chronoField60 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField60.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime62);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 3601000000001L + "'", long63 == 3601000000001L);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(periodTemporalQuery65);
        org.junit.Assert.assertNotNull(period66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(period69);
        org.junit.Assert.assertTrue("'" + chronoField70 + "' != '" + java.time.temporal.ChronoField.SECOND_OF_DAY + "'", chronoField70.equals(java.time.temporal.ChronoField.SECOND_OF_DAY));
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + temporalUnit73 + "' != '" + java.time.temporal.ChronoUnit.DAYS + "'", temporalUnit73.equals(java.time.temporal.ChronoUnit.DAYS));
        org.junit.Assert.assertNotNull(offsetDateTime74);
        org.junit.Assert.assertNotNull(offsetDateTime76);
    }

    @Test
    public void test1554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1554");
        java.io.File file0 = null;
        java.io.File file2 = new java.io.File(file0, "1970-01-01T00:00:00.003Z");
        java.net.URL uRL3 = file2.toURL();
        java.io.File file4 = null;
        java.io.File file6 = new java.io.File(file4, "1970-01-01T00:00:00.003Z");
        java.net.URL uRL7 = file6.toURL();
        boolean boolean8 = uRL3.sameFile(uRL7);
        java.lang.String str9 = uRL7.toString();
        org.junit.Assert.assertNull("file2.getParent() == null", file2.getParent());
        org.junit.Assert.assertEquals(file2.toString(), "1970-01-01T00:00:00.003Z");
        org.junit.Assert.assertNotNull(uRL3);
// flaky:         org.junit.Assert.assertEquals(uRL3.toString(), "file:/experiment/1970-01-01T00:00:00.003Z/");
        org.junit.Assert.assertNull("file6.getParent() == null", file6.getParent());
        org.junit.Assert.assertEquals(file6.toString(), "1970-01-01T00:00:00.003Z");
        org.junit.Assert.assertNotNull(uRL7);
// flaky:         org.junit.Assert.assertEquals(uRL7.toString(), "file:/experiment/1970-01-01T00:00:00.003Z/");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "file:/experiment/1970-01-01T00:00:00.003Z/" + "'", str9, "file:/experiment/1970-01-01T00:00:00.003Z/");
    }

    @Test
    public void test1555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1555");
        java.time.OffsetDateTime offsetDateTime0 = java.time.OffsetDateTime.now();
        java.time.LocalDate localDate2 = java.time.LocalDate.ofEpochDay((long) ' ');
        int int3 = localDate2.getMonthValue();
        org.joda.time.Period period4 = org.joda.time.Period.ZERO;
        org.joda.time.Period period5 = period4.normalizedStandard();
        org.joda.time.Period period7 = period4.plusHours(2);
        java.time.chrono.IsoEra isoEra8 = java.time.chrono.IsoEra.CE;
        boolean boolean9 = period7.equals((java.lang.Object) isoEra8);
        java.time.LocalTime localTime14 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime15 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime14);
        java.time.LocalTime localTime20 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime21 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime20);
        java.time.temporal.ChronoField chronoField22 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime24 = localTime20.with((java.time.temporal.TemporalField) chronoField22, (long) (short) 1);
        long long25 = localTime14.getLong((java.time.temporal.TemporalField) chronoField22);
        boolean boolean26 = isoEra8.isSupported((java.time.temporal.TemporalField) chronoField22);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery27 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period28 = isoEra8.query(periodTemporalQuery27);
        boolean boolean29 = period28.isNegative();
        java.time.Period period31 = period28.plusDays((long) ' ');
        java.time.temporal.ChronoField chronoField32 = java.time.temporal.ChronoField.SECOND_OF_DAY;
        boolean boolean33 = period28.equals((java.lang.Object) chronoField32);
        boolean boolean34 = localDate2.isSupported((java.time.temporal.TemporalField) chronoField32);
        boolean boolean35 = offsetDateTime0.isSupported((java.time.temporal.TemporalField) chronoField32);
        java.time.Clock clock36 = java.time.Clock.systemUTC();
        java.time.Duration duration38 = java.time.Duration.ofSeconds((long) 256);
        java.time.Clock clock39 = java.time.Clock.tick(clock36, duration38);
        java.time.OffsetTime offsetTime40 = java.time.OffsetTime.MAX;
        java.time.LocalTime localTime41 = offsetTime40.toLocalTime();
        java.lang.String str42 = offsetTime40.toString();
        java.time.Duration duration43 = java.time.Duration.ZERO;
        java.lang.String str44 = duration43.toString();
        java.time.OffsetTime offsetTime45 = offsetTime40.plus((java.time.temporal.TemporalAmount) duration43);
        int int46 = duration38.compareTo(duration43);
        java.time.OffsetDateTime offsetDateTime47 = offsetDateTime0.plus((java.time.temporal.TemporalAmount) duration43);
        java.time.Duration duration49 = duration43.multipliedBy((long) (-32769));
        java.lang.String str50 = duration49.toString();
        org.junit.Assert.assertNotNull(offsetDateTime0);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2 + "'", int3 == 2);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertTrue("'" + isoEra8 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra8.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertTrue("'" + chronoField22 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField22.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime24);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 3601000000001L + "'", long25 == 3601000000001L);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(periodTemporalQuery27);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertTrue("'" + chronoField32 + "' != '" + java.time.temporal.ChronoField.SECOND_OF_DAY + "'", chronoField32.equals(java.time.temporal.ChronoField.SECOND_OF_DAY));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(clock36);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(clock39);
        org.junit.Assert.assertNotNull(offsetTime40);
        org.junit.Assert.assertNotNull(localTime41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "23:59:59.999999999-18:00" + "'", str42, "23:59:59.999999999-18:00");
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "PT0S" + "'", str44, "PT0S");
        org.junit.Assert.assertNotNull(offsetTime45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertNotNull(offsetDateTime47);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "PT0S" + "'", str50, "PT0S");
    }

    @Test
    public void test1556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1556");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 3, chronology1);
        org.joda.time.DateTime.Property property3 = dateTime2.dayOfYear();
        org.joda.time.Interval interval4 = property3.toInterval();
        org.joda.time.DateTimeField dateTimeField5 = property3.getField();
        org.joda.time.DateTime dateTime7 = property3.addToCopy((long) (byte) 1);
        org.joda.time.DateTime dateTime9 = dateTime7.withYear(4);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) 3, chronology11);
        org.joda.time.Period period13 = org.joda.time.Period.ZERO;
        org.joda.time.Period period14 = period13.normalizedStandard();
        org.joda.time.Period period16 = period14.minusMinutes((int) ' ');
        org.joda.time.Period period18 = period16.minusMonths((int) (byte) 0);
        org.joda.time.PeriodType periodType19 = period18.getPeriodType();
        org.joda.time.DateTime dateTime20 = dateTime12.minus((org.joda.time.ReadablePeriod) period18);
        org.joda.time.Duration duration21 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.DateTime dateTime23 = dateTime20.plusMonths((int) (short) -1);
        org.joda.time.DateTime.Property property24 = dateTime23.year();
        org.joda.time.DateTime dateTime25 = property24.roundFloorCopy();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(periodType19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTime25);
    }

    @Test
    public void test1557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1557");
        java.io.File file0 = null;
        java.io.File file2 = new java.io.File(file0, "1970-01-01T00:00:00.003Z");
        boolean boolean3 = file2.exists();
        java.lang.String str4 = file2.toString();
        org.junit.Assert.assertNull("file2.getParent() == null", file2.getParent());
        org.junit.Assert.assertEquals(file2.toString(), "1970-01-01T00:00:00.003Z");
// flaky:         org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1970-01-01T00:00:00.003Z" + "'", str4, "1970-01-01T00:00:00.003Z");
    }

    @Test
    public void test1558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1558");
        java.util.GregorianCalendar gregorianCalendar5 = new java.util.GregorianCalendar(12, 4096, 7, (-1), (int) (short) 10);
        int int6 = gregorianCalendar5.getWeeksInWeekYear();
        java.lang.String str7 = gregorianCalendar5.getCalendarType();
        java.time.ZonedDateTime zonedDateTime8 = gregorianCalendar5.toZonedDateTime();
        java.time.ZonedDateTime zonedDateTime10 = zonedDateTime8.minusMonths((long) 10);
        int int11 = zonedDateTime8.getMonthValue();
        int int12 = zonedDateTime8.getSecond();
        java.util.GregorianCalendar gregorianCalendar18 = new java.util.GregorianCalendar(12, 4096, 7, (-1), (int) (short) 10);
        int int19 = gregorianCalendar18.getWeeksInWeekYear();
        java.lang.String str20 = gregorianCalendar18.getCalendarType();
        java.time.ZonedDateTime zonedDateTime21 = gregorianCalendar18.toZonedDateTime();
        java.time.ZonedDateTime zonedDateTime23 = zonedDateTime21.minusMonths((long) 10);
        java.time.chrono.ChronoZonedDateTime<java.time.LocalDate> localDateChronoZonedDateTime24 = zonedDateTime21.withEarlierOffsetAtOverlap();
        java.time.ZonedDateTime zonedDateTime26 = zonedDateTime21.minusMonths((long) 4200);
        boolean boolean27 = zonedDateTime8.isBefore((java.time.chrono.ChronoZonedDateTime<java.time.LocalDate>) zonedDateTime26);
        int int28 = zonedDateTime8.getMonthValue();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 52 + "'", int6 == 52);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "gregory" + "'", str7, "gregory");
        org.junit.Assert.assertNotNull(zonedDateTime8);
        org.junit.Assert.assertNotNull(zonedDateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 5 + "'", int11 == 5);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 52 + "'", int19 == 52);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "gregory" + "'", str20, "gregory");
        org.junit.Assert.assertNotNull(zonedDateTime21);
        org.junit.Assert.assertNotNull(zonedDateTime23);
        org.junit.Assert.assertNotNull(localDateChronoZonedDateTime24);
        org.junit.Assert.assertNotNull(zonedDateTime26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 5 + "'", int28 == 5);
    }

    @Test
    public void test1559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1559");
        org.joda.time.Weeks weeks5 = org.joda.time.Weeks.ONE;
        java.util.concurrent.TimeUnit timeUnit6 = java.util.concurrent.TimeUnit.NANOSECONDS;
        boolean boolean7 = weeks5.equals((java.lang.Object) timeUnit6);
        org.joda.time.MutablePeriod mutablePeriod8 = weeks5.toMutablePeriod();
        mutablePeriod8.add((int) '#', 0, 10, 0, (int) (byte) 0, (int) (short) 0, 1, (-1));
        mutablePeriod8.clear();
        org.joda.time.Period period19 = org.joda.time.Period.ZERO;
        org.joda.time.Period period20 = period19.normalizedStandard();
        org.joda.time.Period period22 = period19.plusHours(2);
        org.joda.time.DurationFieldType durationFieldType23 = org.joda.time.DurationFieldType.hours();
        int int24 = period19.indexOf(durationFieldType23);
        mutablePeriod8.set(durationFieldType23, (int) (byte) 10);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.LocalTime localTime30 = new org.joda.time.LocalTime((long) 0, chronology29);
        org.joda.time.Chronology chronology31 = localTime30.getChronology();
        java.util.Locale locale32 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale locale33 = java.util.Locale.GERMANY;
        java.lang.String str34 = locale32.getDisplayScript(locale33);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket36 = new org.joda.time.format.DateTimeParserBucket((long) 1970, chronology31, locale32, (java.lang.Integer) 1);
        org.joda.time.DateTime dateTime37 = org.joda.time.DateTime.now(chronology31);
        org.joda.time.DurationField durationField38 = durationFieldType23.getField(chronology31);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime(2, 601, 679, 2, (-46800000), chronology31);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -46800000 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(weeks5);
        org.junit.Assert.assertNotNull(timeUnit6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(mutablePeriod8);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(durationFieldType23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 4 + "'", int24 == 4);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(durationField38);
    }

    @Test
    public void test1560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1560");
        java.nio.LongBuffer longBuffer1 = java.nio.LongBuffer.allocate((int) (short) 0);
        long[] longArray2 = longBuffer1.array();
        java.nio.LongBuffer longBuffer3 = java.nio.LongBuffer.wrap(longArray2);
        java.nio.LongBuffer longBuffer4 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.nio.LongBuffer longBuffer5 = longBuffer3.put(longBuffer4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(longBuffer1);
        org.junit.Assert.assertNotNull(longArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray2), "[]");
        org.junit.Assert.assertNotNull(longBuffer3);
    }

    @Test
    public void test1561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1561");
        org.joda.time.Hours hours0 = org.joda.time.Hours.TWO;
        java.lang.String str1 = hours0.toString();
        org.junit.Assert.assertNotNull(hours0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "PT2H" + "'", str1, "PT2H");
    }

    @Test
    public void test1562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1562");
        org.joda.time.Period period0 = org.joda.time.Period.ZERO;
        org.joda.time.Period period1 = period0.normalizedStandard();
        org.joda.time.Period period3 = period0.plusHours(2);
        java.time.chrono.IsoEra isoEra4 = java.time.chrono.IsoEra.CE;
        boolean boolean5 = period3.equals((java.lang.Object) isoEra4);
        java.time.LocalTime localTime10 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime11 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime10);
        java.time.LocalTime localTime16 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime17 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime16);
        java.time.temporal.ChronoField chronoField18 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime20 = localTime16.with((java.time.temporal.TemporalField) chronoField18, (long) (short) 1);
        long long21 = localTime10.getLong((java.time.temporal.TemporalField) chronoField18);
        boolean boolean22 = isoEra4.isSupported((java.time.temporal.TemporalField) chronoField18);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery23 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period24 = isoEra4.query(periodTemporalQuery23);
        boolean boolean25 = period24.isNegative();
        java.time.Period period27 = period24.plusDays((long) ' ');
        java.time.temporal.ChronoField chronoField28 = java.time.temporal.ChronoField.SECOND_OF_DAY;
        boolean boolean29 = period24.equals((java.lang.Object) chronoField28);
        java.time.chrono.ChronoPeriod chronoPeriod30 = period24.negated();
        java.time.OffsetDateTime offsetDateTime31 = java.time.OffsetDateTime.now();
        java.time.temporal.ChronoField chronoField32 = java.time.temporal.ChronoField.HOUR_OF_DAY;
        boolean boolean33 = offsetDateTime31.isSupported((java.time.temporal.TemporalField) chronoField32);
        java.time.Month month34 = offsetDateTime31.getMonth();
        java.time.temporal.Temporal temporal35 = period24.addTo((java.time.temporal.Temporal) offsetDateTime31);
        java.time.OffsetDateTime offsetDateTime37 = offsetDateTime31.minusMinutes((long) '4');
        java.time.OffsetDateTime offsetDateTime39 = offsetDateTime37.plusDays(10L);
        // The following exception was thrown during execution in test generation
        try {
            java.time.OffsetDateTime offsetDateTime41 = offsetDateTime39.withHour((int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for HourOfDay (valid values 0 - 23): 100");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period0);
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertTrue("'" + isoEra4 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra4.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertTrue("'" + chronoField18 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField18.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 3601000000001L + "'", long21 == 3601000000001L);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(periodTemporalQuery23);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertTrue("'" + chronoField28 + "' != '" + java.time.temporal.ChronoField.SECOND_OF_DAY + "'", chronoField28.equals(java.time.temporal.ChronoField.SECOND_OF_DAY));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(chronoPeriod30);
        org.junit.Assert.assertNotNull(offsetDateTime31);
        org.junit.Assert.assertTrue("'" + chronoField32 + "' != '" + java.time.temporal.ChronoField.HOUR_OF_DAY + "'", chronoField32.equals(java.time.temporal.ChronoField.HOUR_OF_DAY));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + month34 + "' != '" + java.time.Month.FEBRUARY + "'", month34.equals(java.time.Month.FEBRUARY));
        org.junit.Assert.assertNotNull(temporal35);
        org.junit.Assert.assertNotNull(offsetDateTime37);
        org.junit.Assert.assertNotNull(offsetDateTime39);
    }

    @Test
    public void test1563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1563");
        java.io.OutputStream outputStream0 = null;
        java.io.FilterOutputStream filterOutputStream1 = new java.io.FilterOutputStream(outputStream0);
        java.net.InetAddress inetAddress2 = java.net.InetAddress.getLocalHost();
        java.lang.String str3 = inetAddress2.getCanonicalHostName();
        java.lang.String str4 = inetAddress2.toString();
        byte[] byteArray5 = inetAddress2.getAddress();
        // The following exception was thrown during execution in test generation
        try {
            filterOutputStream1.write(byteArray5, 366, 241);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(inetAddress2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "599b081c1808" + "'", str3, "599b081c1808");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "599b081c1808/172.17.0.2" + "'", str4, "599b081c1808/172.17.0.2");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-84, 17, 0, 2]");
    }

    @Test
    public void test1564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1564");
        java.util.GregorianCalendar gregorianCalendar5 = new java.util.GregorianCalendar(12, 4096, 7, (-1), (int) (short) 10);
        int int6 = gregorianCalendar5.getWeeksInWeekYear();
        java.lang.String str7 = gregorianCalendar5.getCalendarType();
        java.time.ZonedDateTime zonedDateTime8 = gregorianCalendar5.toZonedDateTime();
        java.time.ZonedDateTime zonedDateTime10 = zonedDateTime8.minusMonths((long) 10);
        int int11 = zonedDateTime8.getMonthValue();
        java.time.LocalTime localTime16 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime17 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime16);
        java.time.LocalTime localTime22 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime23 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime22);
        java.time.temporal.ChronoField chronoField24 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime26 = localTime22.with((java.time.temporal.TemporalField) chronoField24, (long) (short) 1);
        long long27 = localTime16.getLong((java.time.temporal.TemporalField) chronoField24);
        long long28 = zonedDateTime8.getLong((java.time.temporal.TemporalField) chronoField24);
        java.util.GregorianCalendar gregorianCalendar34 = new java.util.GregorianCalendar(12, 4096, 7, (-1), (int) (short) 10);
        int int35 = gregorianCalendar34.getWeeksInWeekYear();
        java.lang.String str36 = gregorianCalendar34.getCalendarType();
        java.time.ZonedDateTime zonedDateTime37 = gregorianCalendar34.toZonedDateTime();
        java.time.ZonedDateTime zonedDateTime39 = zonedDateTime37.minusMonths((long) 10);
        int int40 = zonedDateTime37.getMonthValue();
        java.time.LocalTime localTime45 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime46 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime45);
        java.time.LocalTime localTime51 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime52 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime51);
        java.time.temporal.ChronoField chronoField53 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime55 = localTime51.with((java.time.temporal.TemporalField) chronoField53, (long) (short) 1);
        long long56 = localTime45.getLong((java.time.temporal.TemporalField) chronoField53);
        long long57 = zonedDateTime37.getLong((java.time.temporal.TemporalField) chronoField53);
        java.time.ZoneOffset zoneOffset60 = java.time.ZoneOffset.ofHoursMinutes(1, 10);
        java.time.LocalDate localDate61 = java.time.LocalDate.now((java.time.ZoneId) zoneOffset60);
        java.time.LocalDate localDate62 = java.time.LocalDate.now((java.time.ZoneId) zoneOffset60);
        java.time.chrono.ChronoZonedDateTime<java.time.LocalDate> localDateChronoZonedDateTime63 = zonedDateTime37.withZoneSameLocal((java.time.ZoneId) zoneOffset60);
        boolean boolean64 = zonedDateTime8.isBefore(localDateChronoZonedDateTime63);
        java.util.GregorianCalendar gregorianCalendar70 = new java.util.GregorianCalendar(12, 4096, 7, (-1), (int) (short) 10);
        int int71 = gregorianCalendar70.getWeeksInWeekYear();
        java.lang.String str72 = gregorianCalendar70.getCalendarType();
        java.time.ZonedDateTime zonedDateTime73 = gregorianCalendar70.toZonedDateTime();
        java.time.ZonedDateTime zonedDateTime75 = zonedDateTime73.minusMonths((long) 10);
        boolean boolean76 = zonedDateTime8.isEqual((java.time.chrono.ChronoZonedDateTime<java.time.LocalDate>) zonedDateTime73);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 52 + "'", int6 == 52);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "gregory" + "'", str7, "gregory");
        org.junit.Assert.assertNotNull(zonedDateTime8);
        org.junit.Assert.assertNotNull(zonedDateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 5 + "'", int11 == 5);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertNotNull(localTime23);
        org.junit.Assert.assertTrue("'" + chronoField24 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField24.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime26);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 3601000000001L + "'", long27 == 3601000000001L);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 83400000000000L + "'", long28 == 83400000000000L);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 52 + "'", int35 == 52);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "gregory" + "'", str36, "gregory");
        org.junit.Assert.assertNotNull(zonedDateTime37);
        org.junit.Assert.assertNotNull(zonedDateTime39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 5 + "'", int40 == 5);
        org.junit.Assert.assertNotNull(localTime45);
        org.junit.Assert.assertNotNull(localTime46);
        org.junit.Assert.assertNotNull(localTime51);
        org.junit.Assert.assertNotNull(localTime52);
        org.junit.Assert.assertTrue("'" + chronoField53 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField53.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime55);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 3601000000001L + "'", long56 == 3601000000001L);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 83400000000000L + "'", long57 == 83400000000000L);
        org.junit.Assert.assertNotNull(zoneOffset60);
        org.junit.Assert.assertNotNull(localDate61);
        org.junit.Assert.assertNotNull(localDate62);
        org.junit.Assert.assertNotNull(localDateChronoZonedDateTime63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 52 + "'", int71 == 52);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "gregory" + "'", str72, "gregory");
        org.junit.Assert.assertNotNull(zonedDateTime73);
        org.junit.Assert.assertNotNull(zonedDateTime75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
    }

    @Test
    public void test1565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1565");
        java.util.GregorianCalendar gregorianCalendar5 = new java.util.GregorianCalendar(12, 4096, 7, (-1), (int) (short) 10);
        int int6 = gregorianCalendar5.getWeeksInWeekYear();
        java.util.TimeZone timeZone7 = gregorianCalendar5.getTimeZone();
        java.util.Locale locale9 = new java.util.Locale("hi!");
        java.util.Calendar calendar10 = java.util.Calendar.getInstance(timeZone7, locale9);
        java.time.Instant instant11 = calendar10.toInstant();
        java.time.Instant instant12 = calendar10.toInstant();
        // The following exception was thrown during execution in test generation
        try {
            int int14 = calendar10.getMaximum(22);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 22");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 52 + "'", int6 == 52);
        org.junit.Assert.assertNotNull(timeZone7);
        org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertEquals(locale9.toString(), "hi!");
        org.junit.Assert.assertNotNull(calendar10);
// flaky:         org.junit.Assert.assertEquals(calendar10.toString(), "java.util.GregorianCalendar[time=1645436200962,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=36,SECOND=40,MILLISECOND=962,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertNotNull(instant12);
    }

    @Test
    public void test1566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1566");
        java.time.Month month1 = java.time.Month.DECEMBER;
        java.time.Month month2 = month1.firstMonthOfQuarter();
        // The following exception was thrown during execution in test generation
        try {
            java.time.LocalDateTime localDateTime8 = java.time.LocalDateTime.of(36, month1, 1936, 2097, (int) (byte) 0, (int) (byte) 1, 11);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for DayOfMonth (valid values 1 - 28/31): 1936");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + month1 + "' != '" + java.time.Month.DECEMBER + "'", month1.equals(java.time.Month.DECEMBER));
        org.junit.Assert.assertTrue("'" + month2 + "' != '" + java.time.Month.OCTOBER + "'", month2.equals(java.time.Month.OCTOBER));
    }

    @Test
    public void test1567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1567");
        java.util.GregorianCalendar gregorianCalendar5 = new java.util.GregorianCalendar(12, 4096, 7, (-1), (int) (short) 10);
        int int6 = gregorianCalendar5.getWeeksInWeekYear();
        java.lang.String str7 = gregorianCalendar5.getCalendarType();
        java.time.ZonedDateTime zonedDateTime8 = gregorianCalendar5.toZonedDateTime();
        java.time.ZonedDateTime zonedDateTime10 = zonedDateTime8.minusMonths((long) 10);
        int int11 = zonedDateTime8.getMonthValue();
        java.time.ZoneId zoneId12 = zonedDateTime8.getZone();
        long long13 = zonedDateTime8.toEpochSecond();
        java.time.ZoneId zoneId14 = java.time.ZoneId.from((java.time.temporal.TemporalAccessor) zonedDateTime8);
        int int15 = zonedDateTime8.getYear();
        java.util.Properties properties17 = null;
        java.util.Properties properties18 = new java.util.Properties(properties17);
        java.time.LocalTime localTime23 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime24 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime23);
        java.time.LocalTime localTime29 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime30 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime29);
        java.time.temporal.ChronoField chronoField31 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime33 = localTime29.with((java.time.temporal.TemporalField) chronoField31, (long) (short) 1);
        long long34 = localTime23.getLong((java.time.temporal.TemporalField) chronoField31);
        java.time.LocalTime localTime36 = localTime23.withSecond((int) (short) 1);
        java.lang.Object obj38 = properties18.put((java.lang.Object) localTime36, (java.lang.Object) "117");
        boolean boolean40 = properties18.containsValue((java.lang.Object) 6);
        java.time.LocalDate localDate43 = java.time.LocalDate.ofEpochDay((long) ' ');
        int int44 = localDate43.getMonthValue();
        java.lang.Object obj45 = properties18.replace((java.lang.Object) 21, (java.lang.Object) localDate43);
        java.time.LocalDateTime localDateTime46 = java.time.LocalDateTime.MIN;
        java.time.Month month47 = java.time.Month.NOVEMBER;
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime48 = localDateTime46.with((java.time.temporal.TemporalAdjuster) month47);
        java.time.LocalDate localDate51 = java.time.LocalDate.ofEpochDay((long) ' ');
        int int52 = localDate51.getMonthValue();
        org.joda.time.Period period53 = org.joda.time.Period.ZERO;
        org.joda.time.Period period54 = period53.normalizedStandard();
        org.joda.time.Period period56 = period53.plusHours(2);
        java.time.chrono.IsoEra isoEra57 = java.time.chrono.IsoEra.CE;
        boolean boolean58 = period56.equals((java.lang.Object) isoEra57);
        java.time.LocalTime localTime63 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime64 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime63);
        java.time.LocalTime localTime69 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime70 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime69);
        java.time.temporal.ChronoField chronoField71 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime73 = localTime69.with((java.time.temporal.TemporalField) chronoField71, (long) (short) 1);
        long long74 = localTime63.getLong((java.time.temporal.TemporalField) chronoField71);
        boolean boolean75 = isoEra57.isSupported((java.time.temporal.TemporalField) chronoField71);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery76 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period77 = isoEra57.query(periodTemporalQuery76);
        boolean boolean78 = period77.isNegative();
        java.time.Period period80 = period77.plusDays((long) ' ');
        java.time.temporal.ChronoField chronoField81 = java.time.temporal.ChronoField.SECOND_OF_DAY;
        boolean boolean82 = period77.equals((java.lang.Object) chronoField81);
        boolean boolean83 = localDate51.isSupported((java.time.temporal.TemporalField) chronoField81);
        java.time.temporal.TemporalUnit temporalUnit84 = chronoField81.getRangeUnit();
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime85 = localDateChronoLocalDateTime48.plus(1L, temporalUnit84);
        boolean boolean86 = localDate43.isSupported(temporalUnit84);
        java.time.temporal.Temporal temporal87 = zonedDateTime8.minus((long) (byte) 10, temporalUnit84);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 52 + "'", int6 == 52);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "gregory" + "'", str7, "gregory");
        org.junit.Assert.assertNotNull(zonedDateTime8);
        org.junit.Assert.assertNotNull(zonedDateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 5 + "'", int11 == 5);
        org.junit.Assert.assertNotNull(zoneId12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-51016611000L) + "'", long13 == (-51016611000L));
        org.junit.Assert.assertNotNull(zoneId14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 353 + "'", int15 == 353);
        org.junit.Assert.assertNotNull(localTime23);
        org.junit.Assert.assertNotNull(localTime24);
        org.junit.Assert.assertNotNull(localTime29);
        org.junit.Assert.assertNotNull(localTime30);
        org.junit.Assert.assertTrue("'" + chronoField31 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField31.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime33);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 3601000000001L + "'", long34 == 3601000000001L);
        org.junit.Assert.assertNotNull(localTime36);
        org.junit.Assert.assertNull(obj38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(localDate43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2 + "'", int44 == 2);
        org.junit.Assert.assertNull(obj45);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertTrue("'" + month47 + "' != '" + java.time.Month.NOVEMBER + "'", month47.equals(java.time.Month.NOVEMBER));
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime48);
        org.junit.Assert.assertNotNull(localDate51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2 + "'", int52 == 2);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertNotNull(period54);
        org.junit.Assert.assertNotNull(period56);
        org.junit.Assert.assertTrue("'" + isoEra57 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra57.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(localTime63);
        org.junit.Assert.assertNotNull(localTime64);
        org.junit.Assert.assertNotNull(localTime69);
        org.junit.Assert.assertNotNull(localTime70);
        org.junit.Assert.assertTrue("'" + chronoField71 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField71.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime73);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 3601000000001L + "'", long74 == 3601000000001L);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(periodTemporalQuery76);
        org.junit.Assert.assertNotNull(period77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(period80);
        org.junit.Assert.assertTrue("'" + chronoField81 + "' != '" + java.time.temporal.ChronoField.SECOND_OF_DAY + "'", chronoField81.equals(java.time.temporal.ChronoField.SECOND_OF_DAY));
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + temporalUnit84 + "' != '" + java.time.temporal.ChronoUnit.DAYS + "'", temporalUnit84.equals(java.time.temporal.ChronoUnit.DAYS));
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNotNull(temporal87);
    }

    @Test
    public void test1568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1568");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight2 = org.joda.time.DateMidnight.parse("Feb 21, 2022 9:34:19 AM", dateTimeFormatter1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1569");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.Duration duration2 = new org.joda.time.Duration(readableInstant0, readableInstant1);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = duration2.toPeriodTo(readableInstant3, periodType4);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.Duration duration8 = new org.joda.time.Duration(readableInstant6, readableInstant7);
        long long9 = duration8.getMillis();
        boolean boolean10 = duration2.isShorterThan((org.joda.time.ReadableDuration) duration8);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) 3, chronology12);
        org.joda.time.DateTime.Property property14 = dateTime13.dayOfYear();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight((java.lang.Object) dateTime13, chronology15);
        org.joda.time.MutableDateTime mutableDateTime17 = dateTime13.toMutableDateTime();
        mutableDateTime17.addYears((int) (short) 100);
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime17.dayOfWeek();
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime17.year();
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime17.weekyear();
        boolean boolean23 = duration2.equals((java.lang.Object) mutableDateTime17);
        mutableDateTime17.addMonths((int) ' ');
        mutableDateTime17.add((long) (byte) 10);
        org.joda.time.Period period28 = org.joda.time.Period.ZERO;
        org.joda.time.Period period29 = period28.normalizedStandard();
        org.joda.time.Period period31 = period28.plusHours(2);
        java.time.chrono.IsoEra isoEra32 = java.time.chrono.IsoEra.CE;
        boolean boolean33 = period31.equals((java.lang.Object) isoEra32);
        int int34 = period31.getMinutes();
        mutableDateTime17.add((org.joda.time.ReadablePeriod) period31);
        java.util.TimeZone timeZone37 = null;
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forTimeZone(timeZone37);
        org.joda.time.DateMidnight dateMidnight39 = new org.joda.time.DateMidnight((long) 1970, dateTimeZone38);
        long long42 = dateTimeZone38.convertLocalToUTC((long) 3, false);
        long long45 = dateTimeZone38.convertLocalToUTC(0L, true);
        mutableDateTime17.setZoneRetainFields(dateTimeZone38);
        java.lang.String str47 = dateTimeZone38.toString();
        org.joda.time.chrono.EthiopicChronology ethiopicChronology48 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone38);
        org.joda.time.DateTimeField dateTimeField49 = ethiopicChronology48.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone50 = ethiopicChronology48.getZone();
        org.joda.time.DateTimeField dateTimeField51 = ethiopicChronology48.era();
        org.joda.time.DateTimeField dateTimeField52 = ethiopicChronology48.weekOfWeekyear();
        org.joda.time.DurationField durationField53 = ethiopicChronology48.months();
        org.joda.time.Weeks weeks54 = org.joda.time.Weeks.MAX_VALUE;
        org.joda.time.Weeks weeks55 = weeks54.negated();
        // The following exception was thrown during execution in test generation
        try {
            long long58 = ethiopicChronology48.add((org.joda.time.ReadablePeriod) weeks54, (-1265349601L), 16);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows a long: 34359738352 * 604800000");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertTrue("'" + isoEra32 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra32.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 3L + "'", long42 == 3L);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Etc/UTC" + "'", str47, "Etc/UTC");
        org.junit.Assert.assertNotNull(ethiopicChronology48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(durationField53);
        org.junit.Assert.assertNotNull(weeks54);
        org.junit.Assert.assertNotNull(weeks55);
    }

    @Test
    public void test1570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1570");
        java.nio.ByteOrder byteOrder0 = java.nio.ByteOrder.LITTLE_ENDIAN;
        org.junit.Assert.assertNotNull(byteOrder0);
    }

    @Test
    public void test1571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1571");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.Duration duration2 = new org.joda.time.Duration(readableInstant0, readableInstant1);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = duration2.toPeriodTo(readableInstant3, periodType4);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.Duration duration8 = new org.joda.time.Duration(readableInstant6, readableInstant7);
        long long9 = duration8.getMillis();
        boolean boolean10 = duration2.isShorterThan((org.joda.time.ReadableDuration) duration8);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) 3, chronology12);
        org.joda.time.DateTime.Property property14 = dateTime13.dayOfYear();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight((java.lang.Object) dateTime13, chronology15);
        org.joda.time.MutableDateTime mutableDateTime17 = dateTime13.toMutableDateTime();
        mutableDateTime17.addYears((int) (short) 100);
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime17.dayOfWeek();
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime17.year();
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime17.weekyear();
        boolean boolean23 = duration2.equals((java.lang.Object) mutableDateTime17);
        mutableDateTime17.addMonths((int) ' ');
        mutableDateTime17.add((long) (byte) 10);
        org.joda.time.Period period28 = org.joda.time.Period.ZERO;
        org.joda.time.Period period29 = period28.normalizedStandard();
        org.joda.time.Period period31 = period28.plusHours(2);
        java.time.chrono.IsoEra isoEra32 = java.time.chrono.IsoEra.CE;
        boolean boolean33 = period31.equals((java.lang.Object) isoEra32);
        int int34 = period31.getMinutes();
        mutableDateTime17.add((org.joda.time.ReadablePeriod) period31);
        java.util.TimeZone timeZone37 = null;
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forTimeZone(timeZone37);
        org.joda.time.DateMidnight dateMidnight39 = new org.joda.time.DateMidnight((long) 1970, dateTimeZone38);
        long long42 = dateTimeZone38.convertLocalToUTC((long) 3, false);
        long long45 = dateTimeZone38.convertLocalToUTC(0L, true);
        mutableDateTime17.setZoneRetainFields(dateTimeZone38);
        java.lang.String str47 = dateTimeZone38.toString();
        org.joda.time.chrono.EthiopicChronology ethiopicChronology48 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone38);
        org.joda.time.DateTimeField dateTimeField49 = ethiopicChronology48.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone50 = ethiopicChronology48.getZone();
        org.joda.time.DurationField durationField51 = ethiopicChronology48.seconds();
        int int54 = durationField51.getDifference((long) 1, 201327L);
        boolean boolean55 = durationField51.isSupported();
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertTrue("'" + isoEra32 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra32.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 3L + "'", long42 == 3L);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Etc/UTC" + "'", str47, "Etc/UTC");
        org.junit.Assert.assertNotNull(ethiopicChronology48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(durationField51);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-201) + "'", int54 == (-201));
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
    }

    @Test
    public void test1572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1572");
        java.nio.LongBuffer longBuffer1 = java.nio.LongBuffer.allocate((int) (short) 0);
        java.nio.Buffer buffer2 = longBuffer1.mark();
        boolean boolean3 = buffer2.isDirect();
        org.junit.Assert.assertNotNull(longBuffer1);
        org.junit.Assert.assertNotNull(buffer2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test1573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1573");
        java.util.GregorianCalendar gregorianCalendar5 = new java.util.GregorianCalendar(12, 4096, 7, (-1), (int) (short) 10);
        int int6 = gregorianCalendar5.getWeeksInWeekYear();
        java.lang.String str7 = gregorianCalendar5.getCalendarType();
        java.time.ZonedDateTime zonedDateTime8 = gregorianCalendar5.toZonedDateTime();
        java.util.GregorianCalendar gregorianCalendar14 = new java.util.GregorianCalendar(12, 4096, 7, (-1), (int) (short) 10);
        int int15 = gregorianCalendar14.getWeeksInWeekYear();
        java.lang.String str16 = gregorianCalendar14.getCalendarType();
        java.time.ZonedDateTime zonedDateTime17 = gregorianCalendar14.toZonedDateTime();
        int int18 = zonedDateTime8.compareTo((java.time.chrono.ChronoZonedDateTime<java.time.LocalDate>) zonedDateTime17);
        java.time.ZonedDateTime zonedDateTime20 = zonedDateTime8.plusDays((long) 2022);
        java.time.ZonedDateTime zonedDateTime22 = zonedDateTime8.minusHours((long) (byte) 1);
        java.time.DayOfWeek dayOfWeek23 = zonedDateTime22.getDayOfWeek();
        java.time.LocalDate localDate25 = java.time.LocalDate.ofEpochDay((long) ' ');
        java.time.OffsetTime offsetTime26 = java.time.OffsetTime.MAX;
        java.time.LocalTime localTime27 = offsetTime26.toLocalTime();
        java.lang.String str28 = offsetTime26.toString();
        java.time.Duration duration29 = java.time.Duration.ZERO;
        java.lang.String str30 = duration29.toString();
        java.time.OffsetTime offsetTime31 = offsetTime26.plus((java.time.temporal.TemporalAmount) duration29);
        java.time.LocalTime localTime32 = offsetTime26.toLocalTime();
        java.time.chrono.ChronoLocalDateTime<?> wildcardChronoLocalDateTime33 = localDate25.atTime(localTime32);
        java.time.LocalDate localDate35 = localDate25.minusWeeks((long) 2097);
        java.util.TimeZone timeZone37 = null;
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forTimeZone(timeZone37);
        org.joda.time.DateMidnight dateMidnight39 = new org.joda.time.DateMidnight((long) 1970, dateTimeZone38);
        long long42 = dateTimeZone38.convertLocalToUTC((long) 3, false);
        long long45 = dateTimeZone38.convertLocalToUTC(0L, true);
        boolean boolean46 = localDate25.equals((java.lang.Object) true);
        int int47 = localDate25.lengthOfMonth();
        java.time.LocalDate localDate50 = java.time.LocalDate.ofEpochDay((long) ' ');
        int int51 = localDate50.getMonthValue();
        org.joda.time.Period period52 = org.joda.time.Period.ZERO;
        org.joda.time.Period period53 = period52.normalizedStandard();
        org.joda.time.Period period55 = period52.plusHours(2);
        java.time.chrono.IsoEra isoEra56 = java.time.chrono.IsoEra.CE;
        boolean boolean57 = period55.equals((java.lang.Object) isoEra56);
        java.time.LocalTime localTime62 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime63 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime62);
        java.time.LocalTime localTime68 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime69 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime68);
        java.time.temporal.ChronoField chronoField70 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime72 = localTime68.with((java.time.temporal.TemporalField) chronoField70, (long) (short) 1);
        long long73 = localTime62.getLong((java.time.temporal.TemporalField) chronoField70);
        boolean boolean74 = isoEra56.isSupported((java.time.temporal.TemporalField) chronoField70);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery75 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period76 = isoEra56.query(periodTemporalQuery75);
        boolean boolean77 = period76.isNegative();
        java.time.Period period79 = period76.plusDays((long) ' ');
        java.time.temporal.ChronoField chronoField80 = java.time.temporal.ChronoField.SECOND_OF_DAY;
        boolean boolean81 = period76.equals((java.lang.Object) chronoField80);
        boolean boolean82 = localDate50.isSupported((java.time.temporal.TemporalField) chronoField80);
        java.time.temporal.TemporalUnit temporalUnit83 = chronoField80.getRangeUnit();
        java.time.chrono.ChronoLocalDate chronoLocalDate84 = localDate25.minus((long) (-1), temporalUnit83);
        java.time.format.DateTimeFormatter dateTimeFormatter85 = java.time.format.DateTimeFormatter.ISO_DATE;
        java.lang.String str86 = dateTimeFormatter85.toString();
        java.time.LocalDateTime localDateTime87 = java.time.LocalDateTime.now();
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery88 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period89 = localDateTime87.query(periodTemporalQuery88);
        java.text.Format format90 = dateTimeFormatter85.toFormat(periodTemporalQuery88);
        java.time.Period period91 = chronoLocalDate84.query(periodTemporalQuery88);
        java.time.Period period92 = zonedDateTime22.query(periodTemporalQuery88);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 52 + "'", int6 == 52);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "gregory" + "'", str7, "gregory");
        org.junit.Assert.assertNotNull(zonedDateTime8);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 52 + "'", int15 == 52);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "gregory" + "'", str16, "gregory");
        org.junit.Assert.assertNotNull(zonedDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(zonedDateTime20);
        org.junit.Assert.assertNotNull(zonedDateTime22);
        org.junit.Assert.assertTrue("'" + dayOfWeek23 + "' != '" + java.time.DayOfWeek.THURSDAY + "'", dayOfWeek23.equals(java.time.DayOfWeek.THURSDAY));
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(offsetTime26);
        org.junit.Assert.assertNotNull(localTime27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "23:59:59.999999999-18:00" + "'", str28, "23:59:59.999999999-18:00");
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "PT0S" + "'", str30, "PT0S");
        org.junit.Assert.assertNotNull(offsetTime31);
        org.junit.Assert.assertNotNull(localTime32);
        org.junit.Assert.assertNotNull(wildcardChronoLocalDateTime33);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 3L + "'", long42 == 3L);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 28 + "'", int47 == 28);
        org.junit.Assert.assertNotNull(localDate50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 2 + "'", int51 == 2);
        org.junit.Assert.assertNotNull(period52);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertNotNull(period55);
        org.junit.Assert.assertTrue("'" + isoEra56 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra56.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(localTime62);
        org.junit.Assert.assertNotNull(localTime63);
        org.junit.Assert.assertNotNull(localTime68);
        org.junit.Assert.assertNotNull(localTime69);
        org.junit.Assert.assertTrue("'" + chronoField70 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField70.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime72);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 3601000000001L + "'", long73 == 3601000000001L);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(periodTemporalQuery75);
        org.junit.Assert.assertNotNull(period76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(period79);
        org.junit.Assert.assertTrue("'" + chronoField80 + "' != '" + java.time.temporal.ChronoField.SECOND_OF_DAY + "'", chronoField80.equals(java.time.temporal.ChronoField.SECOND_OF_DAY));
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + temporalUnit83 + "' != '" + java.time.temporal.ChronoUnit.DAYS + "'", temporalUnit83.equals(java.time.temporal.ChronoUnit.DAYS));
        org.junit.Assert.assertNotNull(chronoLocalDate84);
        org.junit.Assert.assertNotNull(dateTimeFormatter85);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "ParseCaseSensitive(false)(Value(Year,4,10,EXCEEDS_PAD)'-'Value(MonthOfYear,2)'-'Value(DayOfMonth,2))[Offset(+HH:MM:ss,'Z')]" + "'", str86, "ParseCaseSensitive(false)(Value(Year,4,10,EXCEEDS_PAD)'-'Value(MonthOfYear,2)'-'Value(DayOfMonth,2))[Offset(+HH:MM:ss,'Z')]");
        org.junit.Assert.assertNotNull(localDateTime87);
        org.junit.Assert.assertNotNull(periodTemporalQuery88);
        org.junit.Assert.assertNotNull(period89);
        org.junit.Assert.assertNotNull(format90);
        org.junit.Assert.assertNotNull(period91);
        org.junit.Assert.assertNotNull(period92);
    }

    @Test
    public void test1574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1574");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Instant instant1 = org.joda.time.Instant.parse("+09:00");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"+09:00\" is malformed at \":00\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1575");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 3, chronology1);
        org.joda.time.DateTime.Property property3 = dateTime2.dayOfYear();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight((java.lang.Object) dateTime2, chronology4);
        org.joda.time.MutableDateTime mutableDateTime6 = dateTime2.toMutableDateTime();
        org.joda.time.Days days7 = org.joda.time.Days.ONE;
        org.joda.time.MutableInterval mutableInterval8 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadablePeriod) days7);
        java.lang.String[] strArray11 = new java.lang.String[] { "halfdays", "Optional.empty" };
        java.util.ArrayList<java.lang.String> strList12 = new java.util.ArrayList<java.lang.String>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList12, strArray11);
        java.util.Iterator<java.lang.String> strItor14 = strList12.iterator();
        boolean boolean15 = days7.equals((java.lang.Object) strItor14);
        java.lang.String str16 = strItor14.next();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(days7);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(strItor14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "halfdays" + "'", str16, "halfdays");
    }

    @Test
    public void test1576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1576");
        java.nio.charset.Charset charset0 = java.nio.charset.Charset.defaultCharset();
        java.nio.charset.CharsetDecoder charsetDecoder1 = charset0.newDecoder();
        java.util.concurrent.TimeUnit timeUnit2 = java.util.concurrent.TimeUnit.NANOSECONDS;
        long long4 = timeUnit2.toNanos((long) (short) 10);
        boolean boolean5 = charset0.equals((java.lang.Object) long4);
        java.nio.charset.CharsetEncoder charsetEncoder6 = charset0.newEncoder();
        java.lang.String str7 = charset0.toString();
        org.junit.Assert.assertNotNull(charset0);
        org.junit.Assert.assertNotNull(charsetDecoder1);
        org.junit.Assert.assertNotNull(timeUnit2);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10L + "'", long4 == 10L);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(charsetEncoder6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "US-ASCII" + "'", str7, "US-ASCII");
    }

    @Test
    public void test1577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1577");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(2022, 256);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minutes out of range: 256");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1578");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((long) 0, chronology1);
        org.joda.time.LocalTime localTime4 = localTime2.minusMillis(2022);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.monthOfYear();
        boolean boolean6 = localTime4.isSupported(dateTimeFieldType5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.centuryOfEra();
        int int8 = localTime4.indexOf(dateTimeFieldType7);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.LocalTime localTime11 = new org.joda.time.LocalTime((long) 0, chronology10);
        org.joda.time.LocalTime localTime13 = localTime11.minusMillis(2022);
        org.joda.time.LocalTime localTime15 = localTime11.plusMillis((int) (byte) 0);
        org.joda.time.LocalTime localTime16 = localTime4.withFields((org.joda.time.ReadablePartial) localTime15);
        org.joda.time.Minutes minutes17 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes19 = minutes17.minus(12);
        org.joda.time.Minutes minutes20 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes22 = minutes20.minus(12);
        org.joda.time.Minutes minutes23 = minutes17.minus(minutes20);
        org.joda.time.Minutes minutes24 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes26 = minutes24.minus(12);
        org.joda.time.Minutes minutes27 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes29 = minutes27.minus(12);
        java.lang.String str30 = minutes27.toString();
        org.joda.time.Minutes minutes31 = minutes24.minus(minutes27);
        boolean boolean32 = minutes23.isLessThan(minutes27);
        org.joda.time.LocalTime localTime33 = localTime15.minus((org.joda.time.ReadablePeriod) minutes23);
        org.joda.time.DurationFieldType durationFieldType34 = minutes23.getFieldType();
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(minutes17);
        org.junit.Assert.assertNotNull(minutes19);
        org.junit.Assert.assertNotNull(minutes20);
        org.junit.Assert.assertNotNull(minutes22);
        org.junit.Assert.assertNotNull(minutes23);
        org.junit.Assert.assertNotNull(minutes24);
        org.junit.Assert.assertNotNull(minutes26);
        org.junit.Assert.assertNotNull(minutes27);
        org.junit.Assert.assertNotNull(minutes29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "PT2147483647M" + "'", str30, "PT2147483647M");
        org.junit.Assert.assertNotNull(minutes31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(localTime33);
        org.junit.Assert.assertNotNull(durationFieldType34);
    }

    @Test
    public void test1579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1579");
        java.util.TimeZone timeZone4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forTimeZone(timeZone4);
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight((long) 1970, dateTimeZone5);
        long long9 = dateTimeZone5.convertLocalToUTC((long) 3, false);
        org.joda.time.Interval interval10 = new org.joda.time.Interval(10L, (long) 2097, dateTimeZone5);
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(dateTimeZone5);
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight(28L, dateTimeZone5);
        org.joda.time.DateMidnight.Property property13 = dateMidnight12.weekOfWeekyear();
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 3L + "'", long9 == 3L);
        org.junit.Assert.assertNotNull(property13);
    }

    @Test
    public void test1580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1580");
        java.nio.charset.Charset charset0 = java.nio.charset.Charset.defaultCharset();
        java.nio.charset.CharsetDecoder charsetDecoder1 = charset0.newDecoder();
        float float2 = charsetDecoder1.maxCharsPerByte();
        java.nio.charset.Charset charset3 = java.nio.charset.Charset.defaultCharset();
        java.nio.charset.CharsetDecoder charsetDecoder4 = charset3.newDecoder();
        java.nio.charset.Charset charset5 = java.nio.charset.Charset.defaultCharset();
        boolean boolean6 = charset3.contains(charset5);
        java.nio.charset.CharsetEncoder charsetEncoder7 = charset3.newEncoder();
        char[] charArray8 = new char[] {};
        java.nio.CharBuffer charBuffer9 = java.nio.CharBuffer.wrap(charArray8);
        java.nio.ByteBuffer byteBuffer10 = charsetEncoder7.encode(charBuffer9);
        char[] charArray17 = new char[] { '#', '/', '4', 'a', '4', 'u' };
        java.nio.CharBuffer charBuffer18 = java.nio.CharBuffer.wrap(charArray17);
        java.nio.charset.CoderResult coderResult20 = charsetDecoder1.decode(byteBuffer10, charBuffer18, false);
        java.nio.ByteBuffer byteBuffer21 = byteBuffer10.asReadOnlyBuffer();
        java.nio.charset.Charset charset22 = java.nio.charset.Charset.defaultCharset();
        java.nio.charset.CharsetDecoder charsetDecoder23 = charset22.newDecoder();
        java.nio.charset.Charset charset24 = java.nio.charset.Charset.defaultCharset();
        boolean boolean25 = charset22.contains(charset24);
        java.nio.charset.CharsetEncoder charsetEncoder26 = charset22.newEncoder();
        byte[] byteArray27 = charsetEncoder26.replacement();
        java.nio.charset.Charset charset28 = java.nio.charset.Charset.defaultCharset();
        java.nio.charset.CharsetDecoder charsetDecoder29 = charset28.newDecoder();
        float float30 = charsetDecoder29.maxCharsPerByte();
        float float31 = charsetDecoder29.averageCharsPerByte();
        java.nio.charset.CodingErrorAction codingErrorAction32 = charsetDecoder29.unmappableCharacterAction();
        java.nio.charset.CharsetEncoder charsetEncoder33 = charsetEncoder26.onUnmappableCharacter(codingErrorAction32);
        java.nio.charset.Charset charset34 = java.nio.charset.Charset.defaultCharset();
        java.nio.charset.CharsetDecoder charsetDecoder35 = charset34.newDecoder();
        java.nio.charset.Charset charset36 = java.nio.charset.Charset.defaultCharset();
        boolean boolean37 = charset34.contains(charset36);
        java.nio.charset.CharsetEncoder charsetEncoder38 = charset34.newEncoder();
        byte[] byteArray39 = charsetEncoder38.replacement();
        java.nio.charset.CharsetEncoder charsetEncoder40 = charsetEncoder26.replaceWith(byteArray39);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer43 = byteBuffer10.put(byteArray39, 20, 86);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charset0);
        org.junit.Assert.assertNotNull(charsetDecoder1);
        org.junit.Assert.assertTrue("'" + float2 + "' != '" + 1.0f + "'", float2 == 1.0f);
        org.junit.Assert.assertNotNull(charset3);
        org.junit.Assert.assertNotNull(charsetDecoder4);
        org.junit.Assert.assertNotNull(charset5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(charsetEncoder7);
        org.junit.Assert.assertNotNull(charArray8);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray8), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray8), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray8), "[]");
        org.junit.Assert.assertNotNull(charBuffer9);
        org.junit.Assert.assertNotNull(byteBuffer10);
        org.junit.Assert.assertNotNull(charArray17);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray17), "#/4a4u");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray17), "#/4a4u");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray17), "[#, /, 4, a, 4, u]");
        org.junit.Assert.assertNotNull(charBuffer18);
        org.junit.Assert.assertNotNull(coderResult20);
        org.junit.Assert.assertNotNull(byteBuffer21);
        org.junit.Assert.assertNotNull(charset22);
        org.junit.Assert.assertNotNull(charsetDecoder23);
        org.junit.Assert.assertNotNull(charset24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(charsetEncoder26);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[63]");
        org.junit.Assert.assertNotNull(charset28);
        org.junit.Assert.assertNotNull(charsetDecoder29);
        org.junit.Assert.assertTrue("'" + float30 + "' != '" + 1.0f + "'", float30 == 1.0f);
        org.junit.Assert.assertTrue("'" + float31 + "' != '" + 1.0f + "'", float31 == 1.0f);
        org.junit.Assert.assertNotNull(codingErrorAction32);
        org.junit.Assert.assertNotNull(charsetEncoder33);
        org.junit.Assert.assertNotNull(charset34);
        org.junit.Assert.assertNotNull(charsetDecoder35);
        org.junit.Assert.assertNotNull(charset36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(charsetEncoder38);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[63]");
        org.junit.Assert.assertNotNull(charsetEncoder40);
    }

    @Test
    public void test1581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1581");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.Duration duration2 = new org.joda.time.Duration(readableInstant0, readableInstant1);
        org.joda.time.Duration duration4 = duration2.withMillis((-1L));
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((long) 3, chronology6);
        org.joda.time.DateTime.Property property8 = dateTime7.dayOfYear();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight((java.lang.Object) dateTime7, chronology9);
        org.joda.time.DateMidnight dateMidnight12 = dateMidnight10.minusMonths((-1));
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight10.withDayOfYear((int) ' ');
        org.joda.time.PeriodType periodType15 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period16 = duration4.toPeriodFrom((org.joda.time.ReadableInstant) dateMidnight10, periodType15);
        org.joda.time.Duration duration18 = org.joda.time.Duration.standardHours((long) 1);
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight10.plus((org.joda.time.ReadableDuration) duration18);
        long long20 = duration18.getMillis();
        org.joda.time.Duration duration22 = org.joda.time.Duration.standardMinutes((long) 292269054);
        boolean boolean23 = duration18.isLongerThan((org.joda.time.ReadableDuration) duration22);
        org.joda.time.Hours hours24 = duration22.toStandardHours();
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(periodType15);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 3600000L + "'", long20 == 3600000L);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(hours24);
    }

    @Test
    public void test1582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1582");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 3, chronology1);
        org.joda.time.DateTime.Property property3 = dateTime2.dayOfYear();
        org.joda.time.Interval interval4 = property3.toInterval();
        org.joda.time.DateTimeField dateTimeField5 = property3.getField();
        org.joda.time.DateTime dateTime7 = property3.addWrapFieldToCopy(0);
        org.joda.time.DateTime dateTime9 = property3.setCopy(34);
        org.joda.time.DateTime dateTime11 = dateTime9.plusHours(70);
        org.joda.time.DateTime dateTime13 = dateTime11.withWeekyear(624);
        org.joda.time.DateTime dateTime14 = dateTime13.withLaterOffsetAtOverlap();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
    }

    @Test
    public void test1583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1583");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 3, chronology1);
        org.joda.time.DateTime.Property property3 = dateTime2.dayOfYear();
        org.joda.time.Interval interval4 = property3.toInterval();
        org.joda.time.DateTimeField dateTimeField5 = property3.getField();
        org.joda.time.DateTime dateTime7 = property3.addToCopy((long) (byte) 1);
        org.joda.time.DateTime dateTime9 = dateTime7.withYear(4);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) 3, chronology11);
        org.joda.time.Period period13 = org.joda.time.Period.ZERO;
        org.joda.time.Period period14 = period13.normalizedStandard();
        org.joda.time.Period period16 = period14.minusMinutes((int) ' ');
        org.joda.time.Period period18 = period16.minusMonths((int) (byte) 0);
        org.joda.time.PeriodType periodType19 = period18.getPeriodType();
        org.joda.time.DateTime dateTime20 = dateTime12.minus((org.joda.time.ReadablePeriod) period18);
        org.joda.time.Duration duration21 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((long) 3, chronology23);
        org.joda.time.DateTime.Property property25 = dateTime24.dayOfYear();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateMidnight dateMidnight27 = new org.joda.time.DateMidnight((java.lang.Object) dateTime24, chronology26);
        org.joda.time.MutableDateTime mutableDateTime28 = dateTime24.toMutableDateTime();
        mutableDateTime28.addYears((int) (short) 100);
        mutableDateTime28.setMillis((long) 21);
        org.joda.time.MutableDateTime.Property property33 = mutableDateTime28.weekOfWeekyear();
        org.joda.time.TimeOfDay timeOfDay35 = org.joda.time.TimeOfDay.fromMillisOfDay((long) (short) 0);
        org.joda.time.TimeOfDay timeOfDay37 = org.joda.time.TimeOfDay.fromMillisOfDay((long) (short) 0);
        org.joda.time.Hours hours38 = org.joda.time.Hours.hoursBetween((org.joda.time.ReadablePartial) timeOfDay35, (org.joda.time.ReadablePartial) timeOfDay37);
        org.joda.time.DurationFieldType durationFieldType39 = org.joda.time.DurationFieldType.hours();
        org.joda.time.TimeOfDay timeOfDay41 = timeOfDay37.withFieldAdded(durationFieldType39, (int) (byte) 0);
        org.joda.time.TimeOfDay timeOfDay43 = org.joda.time.TimeOfDay.fromMillisOfDay((long) (short) 0);
        org.joda.time.TimeOfDay timeOfDay45 = org.joda.time.TimeOfDay.fromMillisOfDay((long) (short) 0);
        org.joda.time.Hours hours46 = org.joda.time.Hours.hoursBetween((org.joda.time.ReadablePartial) timeOfDay43, (org.joda.time.ReadablePartial) timeOfDay45);
        org.joda.time.TimeOfDay timeOfDay48 = timeOfDay43.withSecondOfMinute(0);
        boolean boolean49 = timeOfDay41.isAfter((org.joda.time.ReadablePartial) timeOfDay48);
        org.joda.time.TimeOfDay timeOfDay51 = timeOfDay41.minusSeconds(32769);
        org.joda.time.DateTime dateTime52 = timeOfDay41.toDateTimeToday();
        boolean boolean53 = mutableDateTime28.isBefore((org.joda.time.ReadableInstant) dateTime52);
        org.joda.time.MutableInterval mutableInterval54 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration21, (org.joda.time.ReadableInstant) mutableDateTime28);
        org.joda.time.MutableDateTime.Property property55 = mutableDateTime28.hourOfDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime57 = property55.set("yearOfCentury");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"yearOfCentury\" for hourOfDay is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(periodType19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(mutableDateTime28);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(timeOfDay35);
        org.junit.Assert.assertNotNull(timeOfDay37);
        org.junit.Assert.assertNotNull(hours38);
        org.junit.Assert.assertNotNull(durationFieldType39);
        org.junit.Assert.assertNotNull(timeOfDay41);
        org.junit.Assert.assertNotNull(timeOfDay43);
        org.junit.Assert.assertNotNull(timeOfDay45);
        org.junit.Assert.assertNotNull(hours46);
        org.junit.Assert.assertNotNull(timeOfDay48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(timeOfDay51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(property55);
    }

    @Test
    public void test1584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1584");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Locale locale3 = java.util.Locale.JAPAN;
        java.util.Locale[] localeArray4 = new java.util.Locale[] { locale3 };
        java.util.ArrayList<java.util.Locale> localeList5 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList5, localeArray4);
        java.util.List<java.util.Locale> localeList7 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.util.Locale>) localeList5);
        localeList7.clear();
        java.util.Spliterator<java.util.Locale> localeSpliterator9 = localeList7.spliterator();
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(localeArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(localeList7);
        org.junit.Assert.assertNotNull(localeSpliterator9);
    }

    @Test
    public void test1585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1585");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 365);
    }

    @Test
    public void test1586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1586");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((long) 0, chronology2);
        org.joda.time.Chronology chronology4 = localTime3.getChronology();
        java.util.Locale locale5 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale locale6 = java.util.Locale.GERMANY;
        java.lang.String str7 = locale5.getDisplayScript(locale6);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket9 = new org.joda.time.format.DateTimeParserBucket((long) 1970, chronology4, locale5, (java.lang.Integer) 1);
        long long15 = chronology4.getDateTimeMillis(1L, (int) (short) 10, 8, 4, 3);
        org.joda.time.DurationField durationField16 = chronology4.halfdays();
        org.joda.time.DateTimeField dateTimeField17 = chronology4.dayOfYear();
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 36484003L + "'", long15 == 36484003L);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
    }

    @Test
    public void test1587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1587");
        org.joda.time.Period period8 = org.joda.time.Period.ZERO;
        org.joda.time.Period period9 = period8.normalizedStandard();
        org.joda.time.Period period11 = period9.minusMinutes((int) ' ');
        org.joda.time.Period period13 = period11.minusMonths((int) (byte) 0);
        org.joda.time.PeriodType periodType14 = period11.getPeriodType();
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod(292269054, (int) ':', (int) (short) 10, (int) ':', 9, (int) 'a', 57, 2097, periodType14);
        mutablePeriod15.addMonths((-1));
        mutablePeriod15.addMonths((int) (byte) 10);
        int int20 = mutablePeriod15.getHours();
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(periodType14);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 9 + "'", int20 == 9);
    }

    @Test
    public void test1588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1588");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withYearOfCentury((int) 'a');
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.plusSeconds(6);
        org.joda.time.DateTime dateTime6 = localDateTime3.toDateTime();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime3.minusMillis((int) '/');
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minusMonths(100);
        org.joda.time.LocalTime localTime12 = org.joda.time.LocalTime.parse("1");
        int int13 = localTime12.getMillisOfDay();
        org.joda.time.LocalTime localTime15 = localTime12.withMillisOfDay((int) 'u');
        java.util.Map<java.lang.String, java.lang.String> strMap16 = java.time.ZoneId.SHORT_IDS;
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        boolean boolean18 = strMap16.containsValue((java.lang.Object) dateTimeFieldType17);
        boolean boolean19 = localTime15.isSupported(dateTimeFieldType17);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean20 = localDateTime8.isEqual((org.joda.time.ReadablePartial) localTime15);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: ReadablePartial objects must have matching field types");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 3600000 + "'", int13 == 3600000);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
    }

    @Test
    public void test1589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1589");
        // The following exception was thrown during execution in test generation
        try {
            java.time.ZoneId zoneId1 = java.time.ZoneId.of("PT2147483647M");
            org.junit.Assert.fail("Expected exception of type java.time.zone.ZoneRulesException; message: Unknown time-zone ID: PT2147483647M");
        } catch (java.time.zone.ZoneRulesException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1590");
        java.io.InvalidObjectException invalidObjectException1 = new java.io.InvalidObjectException("Chinese (China)");
    }

    @Test
    public void test1591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1591");
        // The following exception was thrown during execution in test generation
        try {
            java.net.URL uRL3 = new java.net.URL("Feb 21, 2022 9:34:32 AM", "599b081c1808", "PT2H");
            org.junit.Assert.fail("Expected exception of type java.net.MalformedURLException; message: unknown protocol: feb 21, 2022 9:34:32 am");
        } catch (java.net.MalformedURLException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1592");
        org.joda.time.Weeks weeks0 = org.joda.time.Weeks.ONE;
        java.util.concurrent.TimeUnit timeUnit1 = java.util.concurrent.TimeUnit.NANOSECONDS;
        boolean boolean2 = weeks0.equals((java.lang.Object) timeUnit1);
        org.joda.time.MutablePeriod mutablePeriod3 = weeks0.toMutablePeriod();
        int int4 = mutablePeriod3.getSeconds();
        mutablePeriod3.addSeconds(10);
        org.joda.time.Weeks weeks8 = org.joda.time.Weeks.ONE;
        java.util.concurrent.TimeUnit timeUnit9 = java.util.concurrent.TimeUnit.NANOSECONDS;
        boolean boolean10 = weeks8.equals((java.lang.Object) timeUnit9);
        org.joda.time.MutablePeriod mutablePeriod11 = weeks8.toMutablePeriod();
        int int12 = mutablePeriod11.getSeconds();
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.Duration duration15 = new org.joda.time.Duration(readableInstant13, readableInstant14);
        long long16 = duration15.getMillis();
        org.joda.time.Duration duration18 = duration15.plus((long) (byte) 1);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.LocalTime localTime22 = new org.joda.time.LocalTime((long) 0, chronology21);
        org.joda.time.Chronology chronology23 = localTime22.getChronology();
        java.util.Locale locale24 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale locale25 = java.util.Locale.GERMANY;
        java.lang.String str26 = locale24.getDisplayScript(locale25);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket28 = new org.joda.time.format.DateTimeParserBucket((long) 1970, chronology23, locale24, (java.lang.Integer) 1);
        mutablePeriod11.setPeriod((org.joda.time.ReadableDuration) duration15, chronology23);
        mutablePeriod3.setPeriod(86399L, chronology23);
        org.joda.time.DurationFieldType durationFieldType31 = org.joda.time.DurationFieldType.halfdays();
        java.lang.String str32 = durationFieldType31.toString();
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod3.set(durationFieldType31, (int) ':');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'halfdays'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(weeks0);
        org.junit.Assert.assertNotNull(timeUnit1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(mutablePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(weeks8);
        org.junit.Assert.assertNotNull(timeUnit9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(mutablePeriod11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(durationFieldType31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "halfdays" + "'", str32, "halfdays");
    }

    @Test
    public void test1593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1593");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.Duration duration2 = new org.joda.time.Duration(readableInstant0, readableInstant1);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = duration2.toPeriodTo(readableInstant3, periodType4);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.Duration duration8 = new org.joda.time.Duration(readableInstant6, readableInstant7);
        long long9 = duration8.getMillis();
        boolean boolean10 = duration2.isShorterThan((org.joda.time.ReadableDuration) duration8);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) 3, chronology12);
        org.joda.time.DateTime.Property property14 = dateTime13.dayOfYear();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight((java.lang.Object) dateTime13, chronology15);
        org.joda.time.MutableDateTime mutableDateTime17 = dateTime13.toMutableDateTime();
        mutableDateTime17.addYears((int) (short) 100);
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime17.dayOfWeek();
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime17.year();
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime17.weekyear();
        boolean boolean23 = duration2.equals((java.lang.Object) mutableDateTime17);
        mutableDateTime17.addMonths((int) ' ');
        mutableDateTime17.add((long) (byte) 10);
        org.joda.time.Period period28 = org.joda.time.Period.ZERO;
        org.joda.time.Period period29 = period28.normalizedStandard();
        org.joda.time.Period period31 = period28.plusHours(2);
        java.time.chrono.IsoEra isoEra32 = java.time.chrono.IsoEra.CE;
        boolean boolean33 = period31.equals((java.lang.Object) isoEra32);
        int int34 = period31.getMinutes();
        mutableDateTime17.add((org.joda.time.ReadablePeriod) period31);
        java.util.TimeZone timeZone37 = null;
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forTimeZone(timeZone37);
        org.joda.time.DateMidnight dateMidnight39 = new org.joda.time.DateMidnight((long) 1970, dateTimeZone38);
        long long42 = dateTimeZone38.convertLocalToUTC((long) 3, false);
        long long45 = dateTimeZone38.convertLocalToUTC(0L, true);
        mutableDateTime17.setZoneRetainFields(dateTimeZone38);
        org.joda.time.MutableDateTime mutableDateTime47 = org.joda.time.MutableDateTime.now(dateTimeZone38);
        org.joda.time.LocalTime localTime48 = org.joda.time.LocalTime.now(dateTimeZone38);
        java.lang.String str50 = dateTimeZone38.getName((long) 45);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertTrue("'" + isoEra32 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra32.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 3L + "'", long42 == 3L);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertNotNull(mutableDateTime47);
        org.junit.Assert.assertNotNull(localTime48);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "+00:00" + "'", str50, "+00:00");
    }

    @Test
    public void test1594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1594");
        java.util.stream.IntStream intStream2 = java.util.stream.IntStream.rangeClosed(100, (int) '4');
        java.util.stream.IntStream intStream3 = intStream2.sequential();
        java.util.function.IntUnaryOperator intUnaryOperator4 = java.util.function.IntUnaryOperator.identity();
        java.util.stream.IntStream intStream5 = intStream2.map(intUnaryOperator4);
        boolean boolean6 = intStream2.isParallel();
        org.junit.Assert.assertNotNull(intStream2);
        org.junit.Assert.assertNotNull(intStream3);
        org.junit.Assert.assertNotNull(intUnaryOperator4);
        org.junit.Assert.assertNotNull(intStream5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test1595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1595");
        org.joda.time.Weeks weeks0 = org.joda.time.Weeks.ONE;
        java.util.concurrent.TimeUnit timeUnit1 = java.util.concurrent.TimeUnit.NANOSECONDS;
        boolean boolean2 = weeks0.equals((java.lang.Object) timeUnit1);
        org.joda.time.MutablePeriod mutablePeriod3 = weeks0.toMutablePeriod();
        int int4 = mutablePeriod3.getSeconds();
        mutablePeriod3.addHours((int) 'a');
        org.joda.time.Period period7 = org.joda.time.Period.ZERO;
        org.joda.time.Period period8 = period7.normalizedStandard();
        org.joda.time.Period period10 = period8.minusMinutes((int) ' ');
        mutablePeriod3.setPeriod((org.joda.time.ReadablePeriod) period10);
        org.junit.Assert.assertNotNull(weeks0);
        org.junit.Assert.assertNotNull(timeUnit1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(mutablePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(period10);
    }

    @Test
    public void test1596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1596");
        java.util.GregorianCalendar gregorianCalendar5 = new java.util.GregorianCalendar(12, 4096, 7, (-1), (int) (short) 10);
        int int6 = gregorianCalendar5.getWeeksInWeekYear();
        java.util.TimeZone timeZone7 = gregorianCalendar5.getTimeZone();
        java.util.Locale locale9 = new java.util.Locale("hi!");
        java.util.Calendar calendar10 = java.util.Calendar.getInstance(timeZone7, locale9);
        java.time.Instant instant11 = calendar10.toInstant();
        java.time.Instant instant12 = calendar10.toInstant();
        java.time.LocalDate localDate14 = java.time.LocalDate.ofEpochDay((long) ' ');
        java.time.OffsetTime offsetTime15 = java.time.OffsetTime.MAX;
        java.time.LocalTime localTime16 = offsetTime15.toLocalTime();
        java.lang.String str17 = offsetTime15.toString();
        java.time.Duration duration18 = java.time.Duration.ZERO;
        java.lang.String str19 = duration18.toString();
        java.time.OffsetTime offsetTime20 = offsetTime15.plus((java.time.temporal.TemporalAmount) duration18);
        java.time.LocalTime localTime21 = offsetTime15.toLocalTime();
        java.time.chrono.ChronoLocalDateTime<?> wildcardChronoLocalDateTime22 = localDate14.atTime(localTime21);
        java.time.LocalDate localDate24 = localDate14.minusYears((long) 34);
        // The following exception was thrown during execution in test generation
        try {
            java.time.Instant instant25 = instant12.with((java.time.temporal.TemporalAdjuster) localDate14);
            org.junit.Assert.fail("Expected exception of type java.time.temporal.UnsupportedTemporalTypeException; message: Unsupported field: EpochDay");
        } catch (java.time.temporal.UnsupportedTemporalTypeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 52 + "'", int6 == 52);
        org.junit.Assert.assertNotNull(timeZone7);
        org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertEquals(locale9.toString(), "hi!");
        org.junit.Assert.assertNotNull(calendar10);
// flaky:         org.junit.Assert.assertEquals(calendar10.toString(), "java.util.GregorianCalendar[time=1645436202279,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=36,SECOND=42,MILLISECOND=279,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertNotNull(instant12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(offsetTime15);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "23:59:59.999999999-18:00" + "'", str17, "23:59:59.999999999-18:00");
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "PT0S" + "'", str19, "PT0S");
        org.junit.Assert.assertNotNull(offsetTime20);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertNotNull(wildcardChronoLocalDateTime22);
        org.junit.Assert.assertNotNull(localDate24);
    }

    @Test
    public void test1597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1597");
        java.util.GregorianCalendar gregorianCalendar5 = new java.util.GregorianCalendar(12, 4096, 7, (-1), (int) (short) 10);
        int int6 = gregorianCalendar5.getWeeksInWeekYear();
        java.util.TimeZone timeZone7 = gregorianCalendar5.getTimeZone();
        int int9 = timeZone7.getOffset((long) 14);
        java.util.TimeZone.setDefault(timeZone7);
        java.lang.String str11 = timeZone7.getID();
        int int13 = timeZone7.getOffset((long) 'u');
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 52 + "'", int6 == 52);
        org.junit.Assert.assertNotNull(timeZone7);
        org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Etc/UTC" + "'", str11, "Etc/UTC");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
    }

    @Test
    public void test1598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1598");
        org.joda.time.TimeOfDay timeOfDay1 = org.joda.time.TimeOfDay.fromMillisOfDay((long) (short) 0);
        org.joda.time.TimeOfDay timeOfDay3 = org.joda.time.TimeOfDay.fromMillisOfDay((long) (short) 0);
        org.joda.time.Hours hours4 = org.joda.time.Hours.hoursBetween((org.joda.time.ReadablePartial) timeOfDay1, (org.joda.time.ReadablePartial) timeOfDay3);
        org.joda.time.DurationFieldType durationFieldType5 = org.joda.time.DurationFieldType.hours();
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay3.withFieldAdded(durationFieldType5, (int) (byte) 0);
        org.joda.time.TimeOfDay timeOfDay9 = timeOfDay3.minusMillis((int) '#');
        org.joda.time.TimeOfDay timeOfDay11 = timeOfDay9.withMillisOfSecond(86);
        org.junit.Assert.assertNotNull(timeOfDay1);
        org.junit.Assert.assertNotNull(timeOfDay3);
        org.junit.Assert.assertNotNull(hours4);
        org.junit.Assert.assertNotNull(durationFieldType5);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(timeOfDay9);
        org.junit.Assert.assertNotNull(timeOfDay11);
    }

    @Test
    public void test1599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1599");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((long) 0, chronology1);
        org.joda.time.Chronology chronology3 = localTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField4 = chronology3.weekyearOfCentury();
        long long6 = dateTimeField4.roundHalfEven((long) 16);
        org.joda.time.DurationField durationField7 = dateTimeField4.getRangeDurationField();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime(chronology8);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime9.withField(dateTimeFieldType10, (int) 'a');
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime(chronology13);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.withYearOfCentury((int) 'a');
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.plusSeconds(6);
        boolean boolean19 = localDateTime12.isBefore((org.joda.time.ReadablePartial) localDateTime16);
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.Duration duration22 = new org.joda.time.Duration(readableInstant20, readableInstant21);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.PeriodType periodType24 = null;
        org.joda.time.Period period25 = duration22.toPeriodTo(readableInstant23, periodType24);
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.Duration duration28 = new org.joda.time.Duration(readableInstant26, readableInstant27);
        long long29 = duration28.getMillis();
        boolean boolean30 = duration22.isShorterThan((org.joda.time.ReadableDuration) duration28);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((long) 3, chronology32);
        org.joda.time.DateTime.Property property34 = dateTime33.dayOfYear();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.DateMidnight dateMidnight36 = new org.joda.time.DateMidnight((java.lang.Object) dateTime33, chronology35);
        org.joda.time.MutableDateTime mutableDateTime37 = dateTime33.toMutableDateTime();
        mutableDateTime37.addYears((int) (short) 100);
        org.joda.time.MutableDateTime.Property property40 = mutableDateTime37.dayOfWeek();
        org.joda.time.MutableDateTime.Property property41 = mutableDateTime37.year();
        org.joda.time.MutableDateTime.Property property42 = mutableDateTime37.weekyear();
        boolean boolean43 = duration22.equals((java.lang.Object) mutableDateTime37);
        mutableDateTime37.addMonths((int) ' ');
        mutableDateTime37.add((long) (byte) 10);
        org.joda.time.Period period48 = org.joda.time.Period.ZERO;
        org.joda.time.Period period49 = period48.normalizedStandard();
        org.joda.time.Period period51 = period48.plusHours(2);
        java.time.chrono.IsoEra isoEra52 = java.time.chrono.IsoEra.CE;
        boolean boolean53 = period51.equals((java.lang.Object) isoEra52);
        int int54 = period51.getMinutes();
        mutableDateTime37.add((org.joda.time.ReadablePeriod) period51);
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.LocalDateTime localDateTime57 = new org.joda.time.LocalDateTime(chronology56);
        org.joda.time.LocalDateTime localDateTime59 = localDateTime57.withYearOfCentury((int) 'a');
        int int60 = localDateTime59.getDayOfMonth();
        org.joda.time.LocalDateTime localDateTime62 = localDateTime59.withMinuteOfHour((int) ' ');
        org.joda.time.DateTimeFieldType dateTimeFieldType63 = org.joda.time.DateTimeFieldType.weekyear();
        int int64 = localDateTime59.get(dateTimeFieldType63);
        org.joda.time.MutableDateTime.Property property65 = mutableDateTime37.property(dateTimeFieldType63);
        boolean boolean66 = localDateTime12.isSupported(dateTimeFieldType63);
        int int67 = localDateTime12.getYearOfEra();
        org.joda.time.TimeOfDay timeOfDay70 = org.joda.time.TimeOfDay.fromMillisOfDay((long) (short) 0);
        org.joda.time.TimeOfDay timeOfDay72 = org.joda.time.TimeOfDay.fromMillisOfDay((long) (short) 0);
        org.joda.time.Hours hours73 = org.joda.time.Hours.hoursBetween((org.joda.time.ReadablePartial) timeOfDay70, (org.joda.time.ReadablePartial) timeOfDay72);
        org.joda.time.TimeOfDay timeOfDay75 = timeOfDay70.withSecondOfMinute(0);
        int int76 = timeOfDay70.size();
        int[] intArray77 = timeOfDay70.getValues();
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray79 = dateTimeField4.addWrapField((org.joda.time.ReadablePartial) localDateTime12, 7, intArray77, 2147483647);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 7");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(mutableDateTime37);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(period48);
        org.junit.Assert.assertNotNull(period49);
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertTrue("'" + isoEra52 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra52.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 21 + "'", int60 == 21);
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertNotNull(dateTimeFieldType63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 2097 + "'", int64 == 2097);
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 97 + "'", int67 == 97);
        org.junit.Assert.assertNotNull(timeOfDay70);
        org.junit.Assert.assertNotNull(timeOfDay72);
        org.junit.Assert.assertNotNull(hours73);
        org.junit.Assert.assertNotNull(timeOfDay75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 4 + "'", int76 == 4);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[0, 0, 0, 0]");
    }

    @Test
    public void test1600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1600");
        java.nio.charset.CoderResult coderResult1 = java.nio.charset.CoderResult.malformedForLength(65);
        org.junit.Assert.assertNotNull(coderResult1);
    }

    @Test
    public void test1601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1601");
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.ofHoursMinutes(1, 10);
        java.time.LocalDate localDate3 = java.time.LocalDate.now((java.time.ZoneId) zoneOffset2);
        java.util.Properties properties5 = null;
        java.util.Properties properties6 = new java.util.Properties(properties5);
        java.time.LocalTime localTime11 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime12 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime11);
        java.time.LocalTime localTime17 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime18 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime17);
        java.time.temporal.ChronoField chronoField19 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime21 = localTime17.with((java.time.temporal.TemporalField) chronoField19, (long) (short) 1);
        long long22 = localTime11.getLong((java.time.temporal.TemporalField) chronoField19);
        java.time.LocalTime localTime24 = localTime11.withSecond((int) (short) 1);
        java.lang.Object obj26 = properties6.put((java.lang.Object) localTime24, (java.lang.Object) "117");
        java.time.LocalDateTime localDateTime27 = java.time.LocalDateTime.MIN;
        java.time.Month month28 = java.time.Month.NOVEMBER;
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime29 = localDateTime27.with((java.time.temporal.TemporalAdjuster) month28);
        java.time.LocalDate localDate32 = java.time.LocalDate.ofEpochDay((long) ' ');
        int int33 = localDate32.getMonthValue();
        org.joda.time.Period period34 = org.joda.time.Period.ZERO;
        org.joda.time.Period period35 = period34.normalizedStandard();
        org.joda.time.Period period37 = period34.plusHours(2);
        java.time.chrono.IsoEra isoEra38 = java.time.chrono.IsoEra.CE;
        boolean boolean39 = period37.equals((java.lang.Object) isoEra38);
        java.time.LocalTime localTime44 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime45 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime44);
        java.time.LocalTime localTime50 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime51 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime50);
        java.time.temporal.ChronoField chronoField52 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime54 = localTime50.with((java.time.temporal.TemporalField) chronoField52, (long) (short) 1);
        long long55 = localTime44.getLong((java.time.temporal.TemporalField) chronoField52);
        boolean boolean56 = isoEra38.isSupported((java.time.temporal.TemporalField) chronoField52);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery57 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period58 = isoEra38.query(periodTemporalQuery57);
        boolean boolean59 = period58.isNegative();
        java.time.Period period61 = period58.plusDays((long) ' ');
        java.time.temporal.ChronoField chronoField62 = java.time.temporal.ChronoField.SECOND_OF_DAY;
        boolean boolean63 = period58.equals((java.lang.Object) chronoField62);
        boolean boolean64 = localDate32.isSupported((java.time.temporal.TemporalField) chronoField62);
        java.time.temporal.TemporalUnit temporalUnit65 = chronoField62.getRangeUnit();
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime66 = localDateChronoLocalDateTime29.plus(1L, temporalUnit65);
        java.time.LocalTime localTime67 = localTime24.truncatedTo(temporalUnit65);
        java.time.chrono.ChronoLocalDate chronoLocalDate68 = localDate3.minus((long) 3600000, temporalUnit65);
        // The following exception was thrown during execution in test generation
        try {
            java.time.LocalDateTime localDateTime73 = localDate3.atTime(1936, 21, (int) (short) 100, 52);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for HourOfDay (valid values 0 - 23): 1936");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertTrue("'" + chronoField19 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField19.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 3601000000001L + "'", long22 == 3601000000001L);
        org.junit.Assert.assertNotNull(localTime24);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertTrue("'" + month28 + "' != '" + java.time.Month.NOVEMBER + "'", month28.equals(java.time.Month.NOVEMBER));
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime29);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2 + "'", int33 == 2);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertTrue("'" + isoEra38 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra38.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(localTime44);
        org.junit.Assert.assertNotNull(localTime45);
        org.junit.Assert.assertNotNull(localTime50);
        org.junit.Assert.assertNotNull(localTime51);
        org.junit.Assert.assertTrue("'" + chronoField52 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField52.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime54);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 3601000000001L + "'", long55 == 3601000000001L);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(periodTemporalQuery57);
        org.junit.Assert.assertNotNull(period58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(period61);
        org.junit.Assert.assertTrue("'" + chronoField62 + "' != '" + java.time.temporal.ChronoField.SECOND_OF_DAY + "'", chronoField62.equals(java.time.temporal.ChronoField.SECOND_OF_DAY));
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + temporalUnit65 + "' != '" + java.time.temporal.ChronoUnit.DAYS + "'", temporalUnit65.equals(java.time.temporal.ChronoUnit.DAYS));
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime66);
        org.junit.Assert.assertNotNull(localTime67);
        org.junit.Assert.assertNotNull(chronoLocalDate68);
    }

    @Test
    public void test1602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1602");
        org.joda.time.PeriodType periodType8 = org.joda.time.PeriodType.years();
        org.joda.time.PeriodType periodType9 = periodType8.withMinutesRemoved();
        org.joda.time.PeriodType periodType10 = periodType8.withMinutesRemoved();
        org.joda.time.PeriodType periodType11 = periodType10.withHoursRemoved();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period12 = new org.joda.time.Period(52, 241, 13, (int) '/', 4200, (-624), 741000000, 508, periodType10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'months'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertNotNull(periodType10);
        org.junit.Assert.assertNotNull(periodType11);
    }

    @Test
    public void test1603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1603");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.Duration duration2 = new org.joda.time.Duration(readableInstant0, readableInstant1);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = duration2.toPeriodTo(readableInstant3, periodType4);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.Duration duration8 = new org.joda.time.Duration(readableInstant6, readableInstant7);
        long long9 = duration8.getMillis();
        boolean boolean10 = duration2.isShorterThan((org.joda.time.ReadableDuration) duration8);
        org.joda.time.Duration duration12 = duration2.withMillis((long) 2097);
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.Duration duration15 = new org.joda.time.Duration(readableInstant13, readableInstant14);
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.PeriodType periodType17 = null;
        org.joda.time.Period period18 = duration15.toPeriodTo(readableInstant16, periodType17);
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.Duration duration21 = new org.joda.time.Duration(readableInstant19, readableInstant20);
        long long22 = duration21.getMillis();
        boolean boolean23 = duration15.isShorterThan((org.joda.time.ReadableDuration) duration21);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((long) 3, chronology25);
        org.joda.time.DateTime.Property property27 = dateTime26.dayOfYear();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateMidnight dateMidnight29 = new org.joda.time.DateMidnight((java.lang.Object) dateTime26, chronology28);
        org.joda.time.MutableDateTime mutableDateTime30 = dateTime26.toMutableDateTime();
        mutableDateTime30.addYears((int) (short) 100);
        org.joda.time.MutableDateTime.Property property33 = mutableDateTime30.dayOfWeek();
        org.joda.time.MutableDateTime.Property property34 = mutableDateTime30.year();
        org.joda.time.MutableDateTime.Property property35 = mutableDateTime30.weekyear();
        boolean boolean36 = duration15.equals((java.lang.Object) mutableDateTime30);
        org.joda.time.ReadableInstant readableInstant37 = null;
        org.joda.time.ReadableInstant readableInstant38 = null;
        org.joda.time.Duration duration39 = new org.joda.time.Duration(readableInstant37, readableInstant38);
        org.joda.time.ReadableInstant readableInstant40 = null;
        org.joda.time.PeriodType periodType41 = null;
        org.joda.time.Period period42 = duration39.toPeriodTo(readableInstant40, periodType41);
        org.joda.time.ReadableInstant readableInstant43 = null;
        org.joda.time.ReadableInstant readableInstant44 = null;
        org.joda.time.Duration duration45 = new org.joda.time.Duration(readableInstant43, readableInstant44);
        long long46 = duration45.getMillis();
        boolean boolean47 = duration39.isShorterThan((org.joda.time.ReadableDuration) duration45);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime((long) 3, chronology49);
        org.joda.time.DateTime.Property property51 = dateTime50.dayOfYear();
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.DateMidnight dateMidnight53 = new org.joda.time.DateMidnight((java.lang.Object) dateTime50, chronology52);
        org.joda.time.MutableDateTime mutableDateTime54 = dateTime50.toMutableDateTime();
        mutableDateTime54.addYears((int) (short) 100);
        org.joda.time.MutableDateTime.Property property57 = mutableDateTime54.dayOfWeek();
        org.joda.time.MutableDateTime.Property property58 = mutableDateTime54.year();
        org.joda.time.MutableDateTime.Property property59 = mutableDateTime54.weekyear();
        boolean boolean60 = duration39.equals((java.lang.Object) mutableDateTime54);
        mutableDateTime54.addMonths((int) ' ');
        mutableDateTime54.add((long) (byte) 10);
        org.joda.time.Period period65 = org.joda.time.Period.ZERO;
        org.joda.time.Period period66 = period65.normalizedStandard();
        org.joda.time.Period period68 = period65.plusHours(2);
        java.time.chrono.IsoEra isoEra69 = java.time.chrono.IsoEra.CE;
        boolean boolean70 = period68.equals((java.lang.Object) isoEra69);
        int int71 = period68.getMinutes();
        mutableDateTime54.add((org.joda.time.ReadablePeriod) period68);
        org.joda.time.MutablePeriod mutablePeriod73 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration15, (org.joda.time.ReadableInstant) mutableDateTime54);
        org.joda.time.Interval interval74 = new org.joda.time.Interval((org.joda.time.ReadableDuration) duration2, (org.joda.time.ReadableInstant) mutableDateTime54);
        org.joda.time.DateTime dateTime75 = interval74.getStart();
        java.lang.String str76 = interval74.toString();
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(mutableDateTime30);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(mutableDateTime54);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(period65);
        org.junit.Assert.assertNotNull(period66);
        org.junit.Assert.assertNotNull(period68);
        org.junit.Assert.assertTrue("'" + isoEra69 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra69.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "2072-09-01T02:00:00.013Z/2072-09-01T02:00:00.013Z" + "'", str76, "2072-09-01T02:00:00.013Z/2072-09-01T02:00:00.013Z");
    }

    @Test
    public void test1604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1604");
        java.time.OffsetDateTime offsetDateTime1 = java.time.OffsetDateTime.now();
        java.time.temporal.ChronoField chronoField2 = java.time.temporal.ChronoField.HOUR_OF_DAY;
        boolean boolean3 = offsetDateTime1.isSupported((java.time.temporal.TemporalField) chronoField2);
        java.time.Month month4 = offsetDateTime1.getMonth();
        java.time.LocalDate localDate6 = java.time.LocalDate.of(10800000, month4, 9);
        java.time.LocalDate localDate8 = java.time.LocalDate.ofEpochDay((long) ' ');
        java.time.OffsetTime offsetTime9 = java.time.OffsetTime.MAX;
        java.time.LocalTime localTime10 = offsetTime9.toLocalTime();
        java.lang.String str11 = offsetTime9.toString();
        java.time.Duration duration12 = java.time.Duration.ZERO;
        java.lang.String str13 = duration12.toString();
        java.time.OffsetTime offsetTime14 = offsetTime9.plus((java.time.temporal.TemporalAmount) duration12);
        java.time.LocalTime localTime15 = offsetTime9.toLocalTime();
        java.time.chrono.ChronoLocalDateTime<?> wildcardChronoLocalDateTime16 = localDate8.atTime(localTime15);
        java.time.LocalDate localDate18 = localDate8.minusWeeks((long) 2097);
        boolean boolean19 = localDate6.isAfter((java.time.chrono.ChronoLocalDate) localDate8);
        java.time.temporal.TemporalUnit temporalUnit21 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.time.chrono.ChronoLocalDate chronoLocalDate22 = localDate8.minus(14L, temporalUnit21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(offsetDateTime1);
        org.junit.Assert.assertTrue("'" + chronoField2 + "' != '" + java.time.temporal.ChronoField.HOUR_OF_DAY + "'", chronoField2.equals(java.time.temporal.ChronoField.HOUR_OF_DAY));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + month4 + "' != '" + java.time.Month.FEBRUARY + "'", month4.equals(java.time.Month.FEBRUARY));
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(offsetTime9);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "23:59:59.999999999-18:00" + "'", str11, "23:59:59.999999999-18:00");
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "PT0S" + "'", str13, "PT0S");
        org.junit.Assert.assertNotNull(offsetTime14);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(wildcardChronoLocalDateTime16);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
    }

    @Test
    public void test1605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1605");
        java.util.stream.LongStream longStream2 = java.util.stream.LongStream.rangeClosed((long) (short) -1, (long) 7);
        java.util.stream.LongStream longStream4 = longStream2.limit((long) 16384);
        java.util.function.LongBinaryOperator longBinaryOperator5 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.OptionalLong optionalLong6 = longStream4.reduce(longBinaryOperator5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(longStream2);
        org.junit.Assert.assertNotNull(longStream4);
    }

    @Test
    public void test1606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1606");
        java.util.stream.DoubleStream doubleStream0 = java.util.stream.DoubleStream.empty();
        java.util.stream.DoubleStream doubleStream2 = doubleStream0.skip(0L);
        java.util.OptionalDouble optionalDouble3 = doubleStream0.average();
        java.util.function.DoublePredicate doublePredicate4 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.DoubleStream doubleStream5 = doubleStream0.filter(doublePredicate4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleStream0);
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertNotNull(optionalDouble3);
    }

    @Test
    public void test1607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1607");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((long) 0, chronology4);
        org.joda.time.Chronology chronology6 = localTime5.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.weekyearOfCentury();
        org.joda.time.DurationField durationField8 = chronology6.weekyears();
        org.joda.time.TimeOfDay timeOfDay9 = new org.joda.time.TimeOfDay(8, 20, (int) '+', chronology6);
        org.joda.time.Period period14 = new org.joda.time.Period((int) '#', 0, 2, (int) (short) 100);
        org.joda.time.Period period16 = period14.withSeconds(12);
        org.joda.time.Days days17 = period14.toStandardDays();
        long long20 = chronology6.add((org.joda.time.ReadablePeriod) days17, (long) '/', 57);
        org.joda.time.Days days22 = days17.multipliedBy(30);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(days17);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 4924800047L + "'", long20 == 4924800047L);
        org.junit.Assert.assertNotNull(days22);
    }

    @Test
    public void test1608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1608");
        int[] intArray6 = new int[] { 3600000, 3600000, 256, 21, (byte) 100, (short) -1 };
        java.util.stream.IntStream intStream7 = java.util.stream.IntStream.of(intArray6);
        java.lang.Runnable runnable8 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.IntStream intStream9 = intStream7.onClose(runnable8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[3600000, 3600000, 256, 21, 100, -1]");
        org.junit.Assert.assertNotNull(intStream7);
    }

    @Test
    public void test1609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1609");
        java.util.GregorianCalendar gregorianCalendar5 = new java.util.GregorianCalendar(12, 4096, 7, (-1), (int) (short) 10);
        int int6 = gregorianCalendar5.getWeeksInWeekYear();
        java.lang.String str7 = gregorianCalendar5.getCalendarType();
        java.time.ZonedDateTime zonedDateTime8 = gregorianCalendar5.toZonedDateTime();
        java.time.ZonedDateTime zonedDateTime10 = zonedDateTime8.minusMonths((long) 10);
        int int11 = zonedDateTime8.getMonthValue();
        int int12 = zonedDateTime8.getSecond();
        // The following exception was thrown during execution in test generation
        try {
            java.time.ZonedDateTime zonedDateTime14 = zonedDateTime8.withHour(2012);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for HourOfDay (valid values 0 - 23): 2012");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 52 + "'", int6 == 52);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "gregory" + "'", str7, "gregory");
        org.junit.Assert.assertNotNull(zonedDateTime8);
        org.junit.Assert.assertNotNull(zonedDateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 5 + "'", int11 == 5);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test1610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1610");
        java.util.Set<java.lang.String> strSet0 = java.time.ZoneId.getAvailableZoneIds();
        java.util.Set<java.lang.String> strSet1 = java.time.ZoneId.getAvailableZoneIds();
        java.util.stream.Stream<java.lang.String> strStream2 = strSet1.parallelStream();
        java.lang.Object[] objArray3 = strSet1.toArray();
        java.util.Spliterator<java.lang.String> strSpliterator4 = strSet1.spliterator();
        boolean boolean5 = strSet0.containsAll((java.util.Collection<java.lang.String>) strSet1);
        boolean boolean7 = strSet0.add("gregory");
        boolean boolean8 = strSet0.isEmpty();
        org.junit.Assert.assertNotNull(strSet0);
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNotNull(strStream2);
        org.junit.Assert.assertNotNull(objArray3);
        org.junit.Assert.assertNotNull(strSpliterator4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test1611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1611");
        java.util.function.UnaryOperator<org.joda.time.DurationFieldType> durationFieldTypeUnaryOperator0 = java.util.function.UnaryOperator.identity();
        org.junit.Assert.assertNotNull(durationFieldTypeUnaryOperator0);
    }

    @Test
    public void test1612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1612");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 3, chronology1);
        int int3 = dateTime2.getYear();
        boolean boolean4 = dateTime2.isEqualNow();
        int int5 = dateTime2.getWeekOfWeekyear();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
    }

    @Test
    public void test1613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1613");
        java.lang.String str1 = java.net.URLConnection.guessContentTypeFromName("2022-02-21T09:36:03.019Z");
        org.junit.Assert.assertNull(str1);
    }

    @Test
    public void test1614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1614");
        double[] doubleArray4 = new double[] { (byte) 0, 59, 83400000000000L, '4' };
        java.util.stream.DoubleStream doubleStream5 = java.util.stream.DoubleStream.of(doubleArray4);
        java.nio.DoubleBuffer doubleBuffer6 = java.nio.DoubleBuffer.wrap(doubleArray4);
        double[] doubleArray11 = new double[] { (byte) 0, 59, 83400000000000L, '4' };
        java.util.stream.DoubleStream doubleStream12 = java.util.stream.DoubleStream.of(doubleArray11);
        java.nio.DoubleBuffer doubleBuffer13 = java.nio.DoubleBuffer.wrap(doubleArray11);
        java.nio.DoubleBuffer doubleBuffer14 = doubleBuffer6.put(doubleBuffer13);
        java.lang.String str15 = doubleBuffer14.toString();
        double[] doubleArray20 = new double[] { (byte) 0, 59, 83400000000000L, '4' };
        java.util.stream.DoubleStream doubleStream21 = java.util.stream.DoubleStream.of(doubleArray20);
        java.nio.DoubleBuffer doubleBuffer22 = java.nio.DoubleBuffer.wrap(doubleArray20);
        double[] doubleArray27 = new double[] { (byte) 0, 59, 83400000000000L, '4' };
        java.util.stream.DoubleStream doubleStream28 = java.util.stream.DoubleStream.of(doubleArray27);
        java.nio.DoubleBuffer doubleBuffer29 = java.nio.DoubleBuffer.wrap(doubleArray27);
        java.nio.DoubleBuffer doubleBuffer30 = doubleBuffer22.put(doubleBuffer29);
        java.nio.DoubleBuffer doubleBuffer31 = doubleBuffer14.put(doubleBuffer30);
        int int32 = doubleBuffer30.arrayOffset();
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[0.0, 59.0, 8.34E13, 52.0]");
        org.junit.Assert.assertNotNull(doubleStream5);
        org.junit.Assert.assertNotNull(doubleBuffer6);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0, 59.0, 8.34E13, 52.0]");
        org.junit.Assert.assertNotNull(doubleStream12);
        org.junit.Assert.assertNotNull(doubleBuffer13);
        org.junit.Assert.assertNotNull(doubleBuffer14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "java.nio.HeapDoubleBuffer[pos=4 lim=4 cap=4]" + "'", str15, "java.nio.HeapDoubleBuffer[pos=4 lim=4 cap=4]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[0.0, 59.0, 8.34E13, 52.0]");
        org.junit.Assert.assertNotNull(doubleStream21);
        org.junit.Assert.assertNotNull(doubleBuffer22);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[0.0, 59.0, 8.34E13, 52.0]");
        org.junit.Assert.assertNotNull(doubleStream28);
        org.junit.Assert.assertNotNull(doubleBuffer29);
        org.junit.Assert.assertNotNull(doubleBuffer30);
        org.junit.Assert.assertNotNull(doubleBuffer31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
    }

    @Test
    public void test1615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1615");
        java.util.stream.Stream.Builder<java.io.OutputStream> outputStreamBuilder0 = java.util.stream.Stream.builder();
        java.io.OutputStream outputStream1 = null;
        java.io.FilterOutputStream filterOutputStream2 = new java.io.FilterOutputStream(outputStream1);
        java.io.PrintStream printStream4 = new java.io.PrintStream((java.io.OutputStream) filterOutputStream2, false);
        char[] charArray5 = new char[] {};
        java.nio.CharBuffer charBuffer6 = java.nio.CharBuffer.wrap(charArray5);
        printStream4.print(charArray5);
        java.util.stream.Stream.Builder<java.io.OutputStream> outputStreamBuilder8 = outputStreamBuilder0.add((java.io.OutputStream) printStream4);
        byte[] byteArray11 = new byte[] { (byte) -1, (byte) 0 };
        // The following exception was thrown during execution in test generation
        try {
            printStream4.write(byteArray11, 59, 13);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(outputStreamBuilder0);
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[]");
        org.junit.Assert.assertNotNull(charBuffer6);
        org.junit.Assert.assertNotNull(outputStreamBuilder8);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-1, 0]");
    }

    @Test
    public void test1616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1616");
        java.util.GregorianCalendar gregorianCalendar5 = new java.util.GregorianCalendar(12, 4096, 7, (-1), (int) (short) 10);
        int int6 = gregorianCalendar5.getWeeksInWeekYear();
        java.lang.String str7 = gregorianCalendar5.getCalendarType();
        java.time.ZonedDateTime zonedDateTime8 = gregorianCalendar5.toZonedDateTime();
        java.time.ZonedDateTime zonedDateTime10 = zonedDateTime8.minusMonths((long) 10);
        int int11 = zonedDateTime8.getMonthValue();
        int int12 = zonedDateTime8.getSecond();
        java.time.ZoneOffset zoneOffset13 = zonedDateTime8.getOffset();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) 3, chronology15);
        org.joda.time.DateTime.Property property17 = dateTime16.dayOfYear();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight((java.lang.Object) dateTime16, chronology18);
        org.joda.time.MutableDateTime mutableDateTime20 = dateTime16.toMutableDateTime();
        mutableDateTime20.addYears((int) (short) 100);
        mutableDateTime20.setMillis((long) 21);
        org.joda.time.MutableDateTime.Property property25 = mutableDateTime20.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime26 = property25.roundHalfCeiling();
        java.time.LocalTime localTime31 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime32 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime31);
        long long33 = localTime32.toNanoOfDay();
        java.util.GregorianCalendar gregorianCalendar39 = new java.util.GregorianCalendar(12, 4096, 7, (-1), (int) (short) 10);
        int int40 = gregorianCalendar39.getWeeksInWeekYear();
        java.lang.String str41 = gregorianCalendar39.getCalendarType();
        java.time.ZonedDateTime zonedDateTime42 = gregorianCalendar39.toZonedDateTime();
        java.time.ZonedDateTime zonedDateTime44 = zonedDateTime42.minusMonths((long) 10);
        java.time.temporal.Temporal temporal45 = localTime32.adjustInto((java.time.temporal.Temporal) zonedDateTime44);
        boolean boolean46 = mutableDateTime26.equals((java.lang.Object) zonedDateTime44);
        java.util.GregorianCalendar gregorianCalendar52 = new java.util.GregorianCalendar(12, 4096, 7, (-1), (int) (short) 10);
        int int53 = gregorianCalendar52.getWeeksInWeekYear();
        java.lang.String str54 = gregorianCalendar52.getCalendarType();
        java.time.ZonedDateTime zonedDateTime55 = gregorianCalendar52.toZonedDateTime();
        java.util.GregorianCalendar gregorianCalendar61 = new java.util.GregorianCalendar(12, 4096, 7, (-1), (int) (short) 10);
        int int62 = gregorianCalendar61.getWeeksInWeekYear();
        java.lang.String str63 = gregorianCalendar61.getCalendarType();
        java.time.ZonedDateTime zonedDateTime64 = gregorianCalendar61.toZonedDateTime();
        int int65 = zonedDateTime55.compareTo((java.time.chrono.ChronoZonedDateTime<java.time.LocalDate>) zonedDateTime64);
        java.time.ZonedDateTime zonedDateTime67 = zonedDateTime55.plusDays((long) 2022);
        java.time.Instant instant68 = zonedDateTime55.toInstant();
        java.time.chrono.Chronology chronology69 = zonedDateTime55.getChronology();
        boolean boolean70 = zonedDateTime44.isAfter((java.time.chrono.ChronoZonedDateTime<java.time.LocalDate>) zonedDateTime55);
        boolean boolean71 = zonedDateTime8.isBefore((java.time.chrono.ChronoZonedDateTime<java.time.LocalDate>) zonedDateTime55);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 52 + "'", int6 == 52);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "gregory" + "'", str7, "gregory");
        org.junit.Assert.assertNotNull(zonedDateTime8);
        org.junit.Assert.assertNotNull(zonedDateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 5 + "'", int11 == 5);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(zoneOffset13);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(mutableDateTime20);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(mutableDateTime26);
        org.junit.Assert.assertNotNull(localTime31);
        org.junit.Assert.assertNotNull(localTime32);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 3601000000001L + "'", long33 == 3601000000001L);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 52 + "'", int40 == 52);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "gregory" + "'", str41, "gregory");
        org.junit.Assert.assertNotNull(zonedDateTime42);
        org.junit.Assert.assertNotNull(zonedDateTime44);
        org.junit.Assert.assertNotNull(temporal45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 52 + "'", int53 == 52);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "gregory" + "'", str54, "gregory");
        org.junit.Assert.assertNotNull(zonedDateTime55);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 52 + "'", int62 == 52);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "gregory" + "'", str63, "gregory");
        org.junit.Assert.assertNotNull(zonedDateTime64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(zonedDateTime67);
        org.junit.Assert.assertNotNull(instant68);
        org.junit.Assert.assertNotNull(chronology69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
    }

    @Test
    public void test1617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1617");
        org.joda.time.Seconds seconds1 = org.joda.time.Seconds.seconds(64);
        org.joda.time.chrono.EthiopicChronology ethiopicChronology2 = org.joda.time.chrono.EthiopicChronology.getInstanceUTC();
        boolean boolean3 = seconds1.equals((java.lang.Object) ethiopicChronology2);
        org.joda.time.DateTimeField dateTimeField4 = ethiopicChronology2.secondOfDay();
        org.junit.Assert.assertNotNull(seconds1);
        org.junit.Assert.assertNotNull(ethiopicChronology2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(dateTimeField4);
    }

    @Test
    public void test1618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1618");
        java.time.LocalTime localTime4 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime5 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime4);
        java.time.LocalTime localTime10 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime11 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime10);
        java.time.temporal.ChronoField chronoField12 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime14 = localTime10.with((java.time.temporal.TemporalField) chronoField12, (long) (short) 1);
        long long15 = localTime4.getLong((java.time.temporal.TemporalField) chronoField12);
        java.time.LocalTime localTime17 = localTime4.withSecond((int) (short) 1);
        java.time.temporal.ChronoField chronoField18 = java.time.temporal.ChronoField.SECOND_OF_DAY;
        java.time.temporal.ValueRange valueRange19 = localTime17.range((java.time.temporal.TemporalField) chronoField18);
        java.time.LocalTime localTime25 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime26 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime25);
        java.time.LocalTime localTime31 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime32 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime31);
        java.time.temporal.ChronoField chronoField33 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime35 = localTime31.with((java.time.temporal.TemporalField) chronoField33, (long) (short) 1);
        long long36 = localTime25.getLong((java.time.temporal.TemporalField) chronoField33);
        java.time.LocalTime localTime38 = localTime25.withSecond((int) (short) 1);
        java.time.temporal.ChronoField chronoField39 = java.time.temporal.ChronoField.SECOND_OF_DAY;
        java.time.temporal.ValueRange valueRange40 = localTime38.range((java.time.temporal.TemporalField) chronoField39);
        int int41 = valueRange19.checkValidIntValue((long) 2022, (java.time.temporal.TemporalField) chronoField39);
        java.time.OffsetDateTime offsetDateTime42 = java.time.OffsetDateTime.now();
        java.time.LocalDate localDate43 = offsetDateTime42.toLocalDate();
        java.time.OffsetDateTime offsetDateTime44 = java.time.OffsetDateTime.now();
        java.time.LocalDate localDate45 = offsetDateTime44.toLocalDate();
        java.time.OffsetDateTime offsetDateTime46 = java.time.OffsetDateTime.now();
        java.time.temporal.ChronoField chronoField47 = java.time.temporal.ChronoField.HOUR_OF_DAY;
        boolean boolean48 = offsetDateTime46.isSupported((java.time.temporal.TemporalField) chronoField47);
        boolean boolean49 = offsetDateTime44.isEqual(offsetDateTime46);
        java.lang.String str50 = offsetDateTime46.toString();
        boolean boolean51 = offsetDateTime42.isAfter(offsetDateTime46);
        java.util.GregorianCalendar gregorianCalendar57 = new java.util.GregorianCalendar(12, 4096, 7, (-1), (int) (short) 10);
        int int58 = gregorianCalendar57.getWeeksInWeekYear();
        java.lang.String str59 = gregorianCalendar57.getCalendarType();
        java.time.ZonedDateTime zonedDateTime60 = gregorianCalendar57.toZonedDateTime();
        java.time.ZonedDateTime zonedDateTime62 = zonedDateTime60.minusMonths((long) 10);
        int int63 = zonedDateTime60.getMonthValue();
        java.time.LocalTime localTime68 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime69 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime68);
        java.time.LocalTime localTime74 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime75 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime74);
        java.time.temporal.ChronoField chronoField76 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime78 = localTime74.with((java.time.temporal.TemporalField) chronoField76, (long) (short) 1);
        long long79 = localTime68.getLong((java.time.temporal.TemporalField) chronoField76);
        long long80 = zonedDateTime60.getLong((java.time.temporal.TemporalField) chronoField76);
        java.time.ZoneOffset zoneOffset83 = java.time.ZoneOffset.ofHoursMinutes(1, 10);
        java.time.LocalDate localDate84 = java.time.LocalDate.now((java.time.ZoneId) zoneOffset83);
        java.time.LocalDate localDate85 = java.time.LocalDate.now((java.time.ZoneId) zoneOffset83);
        java.time.chrono.ChronoZonedDateTime<java.time.LocalDate> localDateChronoZonedDateTime86 = zonedDateTime60.withZoneSameLocal((java.time.ZoneId) zoneOffset83);
        java.time.ZonedDateTime zonedDateTime87 = offsetDateTime42.atZoneSimilarLocal((java.time.ZoneId) zoneOffset83);
        java.time.zone.ZoneRules zoneRules88 = java.time.zone.ZoneRules.of(zoneOffset83);
        boolean boolean89 = chronoField39.isSupportedBy((java.time.temporal.TemporalAccessor) zoneOffset83);
        java.time.OffsetTime offsetTime90 = java.time.OffsetTime.now((java.time.ZoneId) zoneOffset83);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertTrue("'" + chronoField12 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField12.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 3601000000001L + "'", long15 == 3601000000001L);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertTrue("'" + chronoField18 + "' != '" + java.time.temporal.ChronoField.SECOND_OF_DAY + "'", chronoField18.equals(java.time.temporal.ChronoField.SECOND_OF_DAY));
        org.junit.Assert.assertNotNull(valueRange19);
        org.junit.Assert.assertNotNull(localTime25);
        org.junit.Assert.assertNotNull(localTime26);
        org.junit.Assert.assertNotNull(localTime31);
        org.junit.Assert.assertNotNull(localTime32);
        org.junit.Assert.assertTrue("'" + chronoField33 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField33.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime35);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 3601000000001L + "'", long36 == 3601000000001L);
        org.junit.Assert.assertNotNull(localTime38);
        org.junit.Assert.assertTrue("'" + chronoField39 + "' != '" + java.time.temporal.ChronoField.SECOND_OF_DAY + "'", chronoField39.equals(java.time.temporal.ChronoField.SECOND_OF_DAY));
        org.junit.Assert.assertNotNull(valueRange40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 2022 + "'", int41 == 2022);
        org.junit.Assert.assertNotNull(offsetDateTime42);
        org.junit.Assert.assertNotNull(localDate43);
        org.junit.Assert.assertNotNull(offsetDateTime44);
        org.junit.Assert.assertNotNull(localDate45);
        org.junit.Assert.assertNotNull(offsetDateTime46);
        org.junit.Assert.assertTrue("'" + chronoField47 + "' != '" + java.time.temporal.ChronoField.HOUR_OF_DAY + "'", chronoField47.equals(java.time.temporal.ChronoField.HOUR_OF_DAY));
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str50 + "' != '" + "2022-02-21T09:36:43.545Z" + "'", str50, "2022-02-21T09:36:43.545Z");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 52 + "'", int58 == 52);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "gregory" + "'", str59, "gregory");
        org.junit.Assert.assertNotNull(zonedDateTime60);
        org.junit.Assert.assertNotNull(zonedDateTime62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 5 + "'", int63 == 5);
        org.junit.Assert.assertNotNull(localTime68);
        org.junit.Assert.assertNotNull(localTime69);
        org.junit.Assert.assertNotNull(localTime74);
        org.junit.Assert.assertNotNull(localTime75);
        org.junit.Assert.assertTrue("'" + chronoField76 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField76.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime78);
        org.junit.Assert.assertTrue("'" + long79 + "' != '" + 3601000000001L + "'", long79 == 3601000000001L);
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + 83400000000000L + "'", long80 == 83400000000000L);
        org.junit.Assert.assertNotNull(zoneOffset83);
        org.junit.Assert.assertNotNull(localDate84);
        org.junit.Assert.assertNotNull(localDate85);
        org.junit.Assert.assertNotNull(localDateChronoZonedDateTime86);
        org.junit.Assert.assertNotNull(zonedDateTime87);
        org.junit.Assert.assertNotNull(zoneRules88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(offsetTime90);
    }

    @Test
    public void test1619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1619");
        java.time.LocalDate localDate1 = java.time.LocalDate.ofEpochDay((long) ' ');
        java.time.OffsetTime offsetTime2 = java.time.OffsetTime.MAX;
        java.time.LocalTime localTime3 = offsetTime2.toLocalTime();
        java.lang.String str4 = offsetTime2.toString();
        java.time.Duration duration5 = java.time.Duration.ZERO;
        java.lang.String str6 = duration5.toString();
        java.time.OffsetTime offsetTime7 = offsetTime2.plus((java.time.temporal.TemporalAmount) duration5);
        java.time.LocalTime localTime8 = offsetTime2.toLocalTime();
        java.time.chrono.ChronoLocalDateTime<?> wildcardChronoLocalDateTime9 = localDate1.atTime(localTime8);
        java.time.LocalDate localDate11 = localDate1.minusWeeks((long) 2097);
        java.util.TimeZone timeZone13 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forTimeZone(timeZone13);
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight((long) 1970, dateTimeZone14);
        long long18 = dateTimeZone14.convertLocalToUTC((long) 3, false);
        long long21 = dateTimeZone14.convertLocalToUTC(0L, true);
        boolean boolean22 = localDate1.equals((java.lang.Object) true);
        java.util.GregorianCalendar gregorianCalendar28 = new java.util.GregorianCalendar(12, 4096, 7, (-1), (int) (short) 10);
        int int29 = gregorianCalendar28.getWeeksInWeekYear();
        java.lang.String str30 = gregorianCalendar28.getCalendarType();
        java.time.ZonedDateTime zonedDateTime31 = gregorianCalendar28.toZonedDateTime();
        java.time.ZonedDateTime zonedDateTime33 = zonedDateTime31.minusMonths((long) 10);
        java.time.chrono.ChronoZonedDateTime<java.time.LocalDate> localDateChronoZonedDateTime34 = zonedDateTime31.withEarlierOffsetAtOverlap();
        int int35 = zonedDateTime31.getDayOfYear();
        java.time.temporal.ChronoField chronoField36 = java.time.temporal.ChronoField.NANO_OF_SECOND;
        java.time.ZonedDateTime zonedDateTime38 = zonedDateTime31.with((java.time.temporal.TemporalField) chronoField36, (long) 2012);
        boolean boolean39 = localDate1.isSupported((java.time.temporal.TemporalField) chronoField36);
        java.util.GregorianCalendar gregorianCalendar45 = new java.util.GregorianCalendar(12, 4096, 7, (-1), (int) (short) 10);
        int int46 = gregorianCalendar45.getWeeksInWeekYear();
        java.lang.String str47 = gregorianCalendar45.getCalendarType();
        java.time.ZonedDateTime zonedDateTime48 = gregorianCalendar45.toZonedDateTime();
        java.time.ZonedDateTime zonedDateTime50 = zonedDateTime48.minusMonths((long) 10);
        java.time.chrono.ChronoZonedDateTime<java.time.LocalDate> localDateChronoZonedDateTime51 = zonedDateTime48.withEarlierOffsetAtOverlap();
        java.time.ZonedDateTime zonedDateTime53 = zonedDateTime48.minusMonths((long) 4200);
        boolean boolean54 = chronoField36.isSupportedBy((java.time.temporal.TemporalAccessor) zonedDateTime48);
        // The following exception was thrown during execution in test generation
        try {
            java.time.ZonedDateTime zonedDateTime56 = zonedDateTime48.plusMonths(3600201600000L);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for Year (valid values -999999999 - 999999999): 300016800353");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate1);
        org.junit.Assert.assertNotNull(offsetTime2);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "23:59:59.999999999-18:00" + "'", str4, "23:59:59.999999999-18:00");
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "PT0S" + "'", str6, "PT0S");
        org.junit.Assert.assertNotNull(offsetTime7);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(wildcardChronoLocalDateTime9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 3L + "'", long18 == 3L);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 52 + "'", int29 == 52);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "gregory" + "'", str30, "gregory");
        org.junit.Assert.assertNotNull(zonedDateTime31);
        org.junit.Assert.assertNotNull(zonedDateTime33);
        org.junit.Assert.assertNotNull(localDateChronoZonedDateTime34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 127 + "'", int35 == 127);
        org.junit.Assert.assertTrue("'" + chronoField36 + "' != '" + java.time.temporal.ChronoField.NANO_OF_SECOND + "'", chronoField36.equals(java.time.temporal.ChronoField.NANO_OF_SECOND));
        org.junit.Assert.assertNotNull(zonedDateTime38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 52 + "'", int46 == 52);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "gregory" + "'", str47, "gregory");
        org.junit.Assert.assertNotNull(zonedDateTime48);
        org.junit.Assert.assertNotNull(zonedDateTime50);
        org.junit.Assert.assertNotNull(localDateChronoZonedDateTime51);
        org.junit.Assert.assertNotNull(zonedDateTime53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
    }

    @Test
    public void test1620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1620");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.yearOfCentury();
        int int3 = property2.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime5 = property2.addToCopy((long) (-1));
        org.joda.time.LocalDateTime localDateTime6 = property2.roundHalfFloorCopy();
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.minuteOfHour();
        org.joda.time.Minutes minutes8 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.LocalDateTime localDateTime9 = localDateTime6.minus((org.joda.time.ReadablePeriod) minutes8);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Minutes minutes11 = minutes8.plus(365);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: The calculation caused an overflow: 2147483647 + 365");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 99 + "'", int3 == 99);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(minutes8);
        org.junit.Assert.assertNotNull(localDateTime9);
    }

    @Test
    public void test1621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1621");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime2 = org.joda.time.LocalTime.parse("PeriodType[Weeks]", dateTimeFormatter1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1622");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Locale.LanguageRange[] languageRangeArray3 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList4 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList4, languageRangeArray3);
        java.util.Locale locale6 = java.util.Locale.JAPAN;
        java.util.Locale[] localeArray7 = new java.util.Locale[] { locale6 };
        java.util.ArrayList<java.util.Locale> localeList8 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList8, localeArray7);
        java.util.List<java.util.Locale> localeList10 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList4, (java.util.Collection<java.util.Locale>) localeList8);
        localeList10.clear();
        java.util.List<java.util.Locale> localeList12 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.util.Locale>) localeList10);
        java.util.Set<java.lang.String> strSet13 = java.time.ZoneId.getAvailableZoneIds();
        java.util.stream.Stream<java.lang.String> strStream14 = strSet13.parallelStream();
        boolean boolean16 = strSet13.contains((java.lang.Object) 1.0d);
        boolean boolean17 = localeList10.retainAll((java.util.Collection<java.lang.String>) strSet13);
        boolean boolean18 = localeList10.isEmpty();
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(languageRangeArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(localeArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(localeList10);
        org.junit.Assert.assertNotNull(localeList12);
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertNotNull(strStream14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
    }

    @Test
    public void test1623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1623");
        java.util.Date date0 = new java.util.Date();
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.fromDateFields(date0);
        org.joda.time.Weeks weeks2 = org.joda.time.Weeks.ONE;
        java.util.concurrent.TimeUnit timeUnit3 = java.util.concurrent.TimeUnit.NANOSECONDS;
        boolean boolean4 = weeks2.equals((java.lang.Object) timeUnit3);
        org.joda.time.MutablePeriod mutablePeriod5 = weeks2.toMutablePeriod();
        mutablePeriod5.add((int) '#', 0, 10, 0, (int) (byte) 0, (int) (short) 0, 1, (-1));
        mutablePeriod5.clear();
        int int16 = mutablePeriod5.getWeeks();
        org.joda.time.LocalTime localTime18 = localTime1.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod5, 679);
// flaky:         org.junit.Assert.assertEquals(date0.toString(), "Mon Feb 21 09:36:44 UTC 2022");
        org.junit.Assert.assertNotNull(localTime1);
        org.junit.Assert.assertNotNull(weeks2);
        org.junit.Assert.assertNotNull(timeUnit3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(mutablePeriod5);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(localTime18);
    }

    @Test
    public void test1624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1624");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Locale.LanguageRange[] languageRangeArray3 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList4 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList4, languageRangeArray3);
        java.util.Locale locale6 = java.util.Locale.JAPAN;
        java.util.Locale[] localeArray7 = new java.util.Locale[] { locale6 };
        java.util.ArrayList<java.util.Locale> localeList8 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList8, localeArray7);
        java.util.List<java.util.Locale> localeList10 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList4, (java.util.Collection<java.util.Locale>) localeList8);
        localeList10.clear();
        java.util.List<java.util.Locale> localeList12 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.util.Locale>) localeList10);
        java.util.Locale.LanguageRange[] languageRangeArray13 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList14 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList14, languageRangeArray13);
        java.util.Locale.LanguageRange[] languageRangeArray16 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList17 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList17, languageRangeArray16);
        java.util.Locale locale19 = java.util.Locale.JAPAN;
        java.util.Locale[] localeArray20 = new java.util.Locale[] { locale19 };
        java.util.ArrayList<java.util.Locale> localeList21 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList21, localeArray20);
        java.util.List<java.util.Locale> localeList23 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList17, (java.util.Collection<java.util.Locale>) localeList21);
        localeList23.clear();
        java.util.List<java.util.Locale> localeList25 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList14, (java.util.Collection<java.util.Locale>) localeList23);
        java.util.List<java.util.Locale> localeList26 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.util.Locale>) localeList25);
        java.util.stream.Collector.Characteristics characteristics27 = java.util.stream.Collector.Characteristics.UNORDERED;
        boolean boolean28 = localeList25.contains((java.lang.Object) characteristics27);
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate();
        int int30 = localDate29.getCenturyOfEra();
        org.joda.time.LocalDate.Property property31 = localDate29.dayOfWeek();
        org.joda.time.LocalDate localDate33 = property31.addToCopy(7);
        org.joda.time.LocalDate localDate34 = property31.roundCeilingCopy();
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime((long) 3, chronology36);
        org.joda.time.DateTime.Property property38 = dateTime37.dayOfYear();
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.DateMidnight dateMidnight40 = new org.joda.time.DateMidnight((java.lang.Object) dateTime37, chronology39);
        org.joda.time.MutableDateTime mutableDateTime41 = dateTime37.toMutableDateTime();
        org.joda.time.DateTime dateTime43 = dateTime37.minusSeconds(256);
        int int44 = property31.getDifference((org.joda.time.ReadableInstant) dateTime37);
        int int45 = localeList25.indexOf((java.lang.Object) dateTime37);
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(languageRangeArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(localeArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(localeList10);
        org.junit.Assert.assertNotNull(localeList12);
        org.junit.Assert.assertNotNull(languageRangeArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(languageRangeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(localeArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(localeList23);
        org.junit.Assert.assertNotNull(localeList25);
        org.junit.Assert.assertNotNull(localeList26);
        org.junit.Assert.assertTrue("'" + characteristics27 + "' != '" + java.util.stream.Collector.Characteristics.UNORDERED + "'", characteristics27.equals(java.util.stream.Collector.Characteristics.UNORDERED));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 20 + "'", int30 == 20);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(mutableDateTime41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 19043 + "'", int44 == 19043);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
    }

    @Test
    public void test1625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1625");
        java.time.LocalDate localDate1 = java.time.LocalDate.ofEpochDay((long) ' ');
        java.time.OffsetTime offsetTime2 = java.time.OffsetTime.MAX;
        java.time.LocalTime localTime3 = offsetTime2.toLocalTime();
        java.lang.String str4 = offsetTime2.toString();
        java.time.Duration duration5 = java.time.Duration.ZERO;
        java.lang.String str6 = duration5.toString();
        java.time.OffsetTime offsetTime7 = offsetTime2.plus((java.time.temporal.TemporalAmount) duration5);
        java.time.LocalTime localTime8 = offsetTime2.toLocalTime();
        java.time.chrono.ChronoLocalDateTime<?> wildcardChronoLocalDateTime9 = localDate1.atTime(localTime8);
        java.time.LocalDate localDate11 = localDate1.minusWeeks((long) 2097);
        java.time.LocalDate localDate13 = localDate1.minusYears((long) 32769);
        java.time.temporal.ChronoField chronoField14 = java.time.temporal.ChronoField.SECOND_OF_DAY;
        // The following exception was thrown during execution in test generation
        try {
            java.time.LocalDate localDate16 = localDate13.with((java.time.temporal.TemporalField) chronoField14, 34999L);
            org.junit.Assert.fail("Expected exception of type java.time.temporal.UnsupportedTemporalTypeException; message: Unsupported field: SecondOfDay");
        } catch (java.time.temporal.UnsupportedTemporalTypeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate1);
        org.junit.Assert.assertNotNull(offsetTime2);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "23:59:59.999999999-18:00" + "'", str4, "23:59:59.999999999-18:00");
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "PT0S" + "'", str6, "PT0S");
        org.junit.Assert.assertNotNull(offsetTime7);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(wildcardChronoLocalDateTime9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertTrue("'" + chronoField14 + "' != '" + java.time.temporal.ChronoField.SECOND_OF_DAY + "'", chronoField14.equals(java.time.temporal.ChronoField.SECOND_OF_DAY));
    }

    @Test
    public void test1626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1626");
        java.time.OffsetDateTime offsetDateTime0 = java.time.OffsetDateTime.now();
        java.time.temporal.ChronoField chronoField1 = java.time.temporal.ChronoField.HOUR_OF_DAY;
        boolean boolean2 = offsetDateTime0.isSupported((java.time.temporal.TemporalField) chronoField1);
        java.time.OffsetTime offsetTime3 = java.time.OffsetTime.MAX;
        java.time.LocalTime localTime4 = offsetTime3.toLocalTime();
        boolean boolean5 = chronoField1.isSupportedBy((java.time.temporal.TemporalAccessor) localTime4);
        java.time.LocalTime localTime7 = localTime4.withNano(28);
        java.util.Properties properties8 = null;
        java.util.Properties properties9 = new java.util.Properties(properties8);
        java.time.LocalTime localTime14 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime15 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime14);
        java.time.LocalTime localTime20 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime21 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime20);
        java.time.temporal.ChronoField chronoField22 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime24 = localTime20.with((java.time.temporal.TemporalField) chronoField22, (long) (short) 1);
        long long25 = localTime14.getLong((java.time.temporal.TemporalField) chronoField22);
        java.time.LocalTime localTime27 = localTime14.withSecond((int) (short) 1);
        java.lang.Object obj29 = properties9.put((java.lang.Object) localTime27, (java.lang.Object) "117");
        boolean boolean31 = properties9.containsValue((java.lang.Object) 6);
        java.time.LocalDate localDate34 = java.time.LocalDate.ofEpochDay((long) ' ');
        int int35 = localDate34.getMonthValue();
        java.lang.Object obj36 = properties9.replace((java.lang.Object) 21, (java.lang.Object) localDate34);
        java.time.LocalDateTime localDateTime37 = java.time.LocalDateTime.MIN;
        java.time.Month month38 = java.time.Month.NOVEMBER;
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime39 = localDateTime37.with((java.time.temporal.TemporalAdjuster) month38);
        java.time.LocalDate localDate42 = java.time.LocalDate.ofEpochDay((long) ' ');
        int int43 = localDate42.getMonthValue();
        org.joda.time.Period period44 = org.joda.time.Period.ZERO;
        org.joda.time.Period period45 = period44.normalizedStandard();
        org.joda.time.Period period47 = period44.plusHours(2);
        java.time.chrono.IsoEra isoEra48 = java.time.chrono.IsoEra.CE;
        boolean boolean49 = period47.equals((java.lang.Object) isoEra48);
        java.time.LocalTime localTime54 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime55 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime54);
        java.time.LocalTime localTime60 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime61 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime60);
        java.time.temporal.ChronoField chronoField62 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime64 = localTime60.with((java.time.temporal.TemporalField) chronoField62, (long) (short) 1);
        long long65 = localTime54.getLong((java.time.temporal.TemporalField) chronoField62);
        boolean boolean66 = isoEra48.isSupported((java.time.temporal.TemporalField) chronoField62);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery67 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period68 = isoEra48.query(periodTemporalQuery67);
        boolean boolean69 = period68.isNegative();
        java.time.Period period71 = period68.plusDays((long) ' ');
        java.time.temporal.ChronoField chronoField72 = java.time.temporal.ChronoField.SECOND_OF_DAY;
        boolean boolean73 = period68.equals((java.lang.Object) chronoField72);
        boolean boolean74 = localDate42.isSupported((java.time.temporal.TemporalField) chronoField72);
        java.time.temporal.TemporalUnit temporalUnit75 = chronoField72.getRangeUnit();
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime76 = localDateChronoLocalDateTime39.plus(1L, temporalUnit75);
        boolean boolean77 = localDate34.isSupported(temporalUnit75);
        java.time.LocalDateTime localDateTime78 = localTime4.atDate(localDate34);
        java.time.format.DateTimeFormatter dateTimeFormatter79 = java.time.format.DateTimeFormatter.ISO_LOCAL_DATE;
        java.lang.String str80 = localDateTime78.format(dateTimeFormatter79);
        org.junit.Assert.assertNotNull(offsetDateTime0);
        org.junit.Assert.assertTrue("'" + chronoField1 + "' != '" + java.time.temporal.ChronoField.HOUR_OF_DAY + "'", chronoField1.equals(java.time.temporal.ChronoField.HOUR_OF_DAY));
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(offsetTime3);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertTrue("'" + chronoField22 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField22.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime24);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 3601000000001L + "'", long25 == 3601000000001L);
        org.junit.Assert.assertNotNull(localTime27);
        org.junit.Assert.assertNull(obj29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2 + "'", int35 == 2);
        org.junit.Assert.assertNull(obj36);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertTrue("'" + month38 + "' != '" + java.time.Month.NOVEMBER + "'", month38.equals(java.time.Month.NOVEMBER));
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime39);
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertNotNull(period47);
        org.junit.Assert.assertTrue("'" + isoEra48 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra48.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(localTime54);
        org.junit.Assert.assertNotNull(localTime55);
        org.junit.Assert.assertNotNull(localTime60);
        org.junit.Assert.assertNotNull(localTime61);
        org.junit.Assert.assertTrue("'" + chronoField62 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField62.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime64);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 3601000000001L + "'", long65 == 3601000000001L);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(periodTemporalQuery67);
        org.junit.Assert.assertNotNull(period68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(period71);
        org.junit.Assert.assertTrue("'" + chronoField72 + "' != '" + java.time.temporal.ChronoField.SECOND_OF_DAY + "'", chronoField72.equals(java.time.temporal.ChronoField.SECOND_OF_DAY));
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + temporalUnit75 + "' != '" + java.time.temporal.ChronoUnit.DAYS + "'", temporalUnit75.equals(java.time.temporal.ChronoUnit.DAYS));
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(localDateTime78);
        org.junit.Assert.assertNotNull(dateTimeFormatter79);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "1970-02-02" + "'", str80, "1970-02-02");
    }

    @Test
    public void test1627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1627");
        org.joda.time.Period period0 = org.joda.time.Period.ZERO;
        org.joda.time.Period period1 = period0.normalizedStandard();
        org.joda.time.Period period3 = period0.plusHours(2);
        java.time.chrono.IsoEra isoEra4 = java.time.chrono.IsoEra.CE;
        boolean boolean5 = period3.equals((java.lang.Object) isoEra4);
        java.time.LocalTime localTime10 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime11 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime10);
        java.time.LocalTime localTime16 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime17 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime16);
        java.time.temporal.ChronoField chronoField18 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime20 = localTime16.with((java.time.temporal.TemporalField) chronoField18, (long) (short) 1);
        long long21 = localTime10.getLong((java.time.temporal.TemporalField) chronoField18);
        boolean boolean22 = isoEra4.isSupported((java.time.temporal.TemporalField) chronoField18);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery23 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period24 = isoEra4.query(periodTemporalQuery23);
        boolean boolean25 = period24.isNegative();
        java.time.Period period27 = period24.plusDays((long) ' ');
        boolean boolean28 = period24.isNegative();
        java.time.Period period30 = period24.minusYears((long) 10);
        org.joda.time.Period period31 = org.joda.time.Period.ZERO;
        org.joda.time.Period period32 = period31.normalizedStandard();
        org.joda.time.Period period34 = period31.plusHours(2);
        java.time.chrono.IsoEra isoEra35 = java.time.chrono.IsoEra.CE;
        boolean boolean36 = period34.equals((java.lang.Object) isoEra35);
        java.time.LocalTime localTime41 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime42 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime41);
        java.time.LocalTime localTime47 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime48 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime47);
        java.time.temporal.ChronoField chronoField49 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime51 = localTime47.with((java.time.temporal.TemporalField) chronoField49, (long) (short) 1);
        long long52 = localTime41.getLong((java.time.temporal.TemporalField) chronoField49);
        boolean boolean53 = isoEra35.isSupported((java.time.temporal.TemporalField) chronoField49);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery54 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period55 = isoEra35.query(periodTemporalQuery54);
        java.time.chrono.ChronoPeriod chronoPeriod56 = period30.minus((java.time.temporal.TemporalAmount) period55);
        java.time.chrono.ChronoPeriod chronoPeriod58 = period30.multipliedBy(4096);
        int int59 = period30.getMonths();
        java.time.chrono.IsoChronology isoChronology60 = period30.getChronology();
        java.time.ZoneOffset zoneOffset63 = java.time.ZoneOffset.ofHoursMinutes(1, 10);
        java.time.LocalDate localDate64 = java.time.LocalDate.now((java.time.ZoneId) zoneOffset63);
        java.time.Clock clock65 = java.time.Clock.system((java.time.ZoneId) zoneOffset63);
        java.time.Duration duration67 = java.time.Duration.ofSeconds((long) 0);
        java.time.Duration duration69 = duration67.multipliedBy((long) (byte) -1);
        java.time.Clock clock70 = java.time.Clock.offset(clock65, duration67);
        java.time.chrono.ChronoLocalDate chronoLocalDate71 = isoChronology60.dateNow(clock65);
        java.time.ZoneOffset zoneOffset74 = java.time.ZoneOffset.ofHoursMinutes(1, 10);
        java.time.LocalDate localDate75 = java.time.LocalDate.now((java.time.ZoneId) zoneOffset74);
        java.time.LocalDate localDate76 = java.time.LocalDate.now((java.time.ZoneId) zoneOffset74);
        java.time.LocalDate localDate77 = isoChronology60.dateNow((java.time.ZoneId) zoneOffset74);
        java.util.GregorianCalendar gregorianCalendar83 = new java.util.GregorianCalendar(12, 4096, 7, (-1), (int) (short) 10);
        int int84 = gregorianCalendar83.getWeeksInWeekYear();
        java.lang.String str85 = gregorianCalendar83.getCalendarType();
        java.time.ZonedDateTime zonedDateTime86 = gregorianCalendar83.toZonedDateTime();
        java.time.ZonedDateTime zonedDateTime88 = zonedDateTime86.minusMonths((long) 10);
        java.time.chrono.ChronoZonedDateTime<java.time.LocalDate> localDateChronoZonedDateTime89 = zonedDateTime86.withEarlierOffsetAtOverlap();
        java.time.ZonedDateTime zonedDateTime91 = zonedDateTime86.minusMonths((long) 4200);
        java.time.ZonedDateTime zonedDateTime93 = zonedDateTime91.plusNanos(8L);
        java.time.ZonedDateTime zonedDateTime95 = zonedDateTime93.minusSeconds((long) 83400);
        java.time.chrono.Chronology chronology96 = zonedDateTime93.getChronology();
        int int97 = isoChronology60.compareTo(chronology96);
        org.junit.Assert.assertNotNull(period0);
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertTrue("'" + isoEra4 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra4.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertTrue("'" + chronoField18 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField18.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 3601000000001L + "'", long21 == 3601000000001L);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(periodTemporalQuery23);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertTrue("'" + isoEra35 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra35.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(localTime41);
        org.junit.Assert.assertNotNull(localTime42);
        org.junit.Assert.assertNotNull(localTime47);
        org.junit.Assert.assertNotNull(localTime48);
        org.junit.Assert.assertTrue("'" + chronoField49 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField49.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime51);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 3601000000001L + "'", long52 == 3601000000001L);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(periodTemporalQuery54);
        org.junit.Assert.assertNotNull(period55);
        org.junit.Assert.assertNotNull(chronoPeriod56);
        org.junit.Assert.assertNotNull(chronoPeriod58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(isoChronology60);
        org.junit.Assert.assertNotNull(zoneOffset63);
        org.junit.Assert.assertNotNull(localDate64);
        org.junit.Assert.assertNotNull(clock65);
        org.junit.Assert.assertNotNull(duration67);
        org.junit.Assert.assertNotNull(duration69);
        org.junit.Assert.assertNotNull(clock70);
        org.junit.Assert.assertNotNull(chronoLocalDate71);
        org.junit.Assert.assertNotNull(zoneOffset74);
        org.junit.Assert.assertNotNull(localDate75);
        org.junit.Assert.assertNotNull(localDate76);
        org.junit.Assert.assertNotNull(localDate77);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 52 + "'", int84 == 52);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "gregory" + "'", str85, "gregory");
        org.junit.Assert.assertNotNull(zonedDateTime86);
        org.junit.Assert.assertNotNull(zonedDateTime88);
        org.junit.Assert.assertNotNull(localDateChronoZonedDateTime89);
        org.junit.Assert.assertNotNull(zonedDateTime91);
        org.junit.Assert.assertNotNull(zonedDateTime93);
        org.junit.Assert.assertNotNull(zonedDateTime95);
        org.junit.Assert.assertNotNull(chronology96);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 0 + "'", int97 == 0);
    }

    @Test
    public void test1628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1628");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(2097, 31, 4, (int) ' ', 292269054, 35);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 32 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1629");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 3, chronology1);
        org.joda.time.DateTime.Property property3 = dateTime2.dayOfYear();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight((java.lang.Object) dateTime2, chronology4);
        org.joda.time.MutableDateTime mutableDateTime6 = dateTime2.toMutableDateTime();
        org.joda.time.Days days7 = org.joda.time.Days.ONE;
        org.joda.time.MutableInterval mutableInterval8 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadablePeriod) days7);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) 3, chronology10);
        org.joda.time.DateTime.Property property12 = dateTime11.dayOfYear();
        org.joda.time.Interval interval13 = property12.toInterval();
        mutableInterval8.setInterval((org.joda.time.ReadableInterval) interval13);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) 3, chronology16);
        org.joda.time.DateTime.Property property18 = dateTime17.dayOfYear();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight((java.lang.Object) dateTime17, chronology19);
        org.joda.time.DateMidnight.Property property21 = dateMidnight20.dayOfMonth();
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.Duration duration24 = new org.joda.time.Duration(readableInstant22, readableInstant23);
        org.joda.time.Duration duration26 = duration24.withMillis((-1L));
        org.joda.time.ReadableDuration readableDuration27 = null;
        org.joda.time.Duration duration28 = duration24.minus(readableDuration27);
        org.joda.time.DateMidnight dateMidnight29 = dateMidnight20.plus((org.joda.time.ReadableDuration) duration28);
        mutableInterval8.setDurationAfterStart((org.joda.time.ReadableDuration) duration28);
        org.joda.time.MutableDateTime mutableDateTime31 = new org.joda.time.MutableDateTime();
        boolean boolean32 = mutableInterval8.isBefore((org.joda.time.ReadableInstant) mutableDateTime31);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime((long) 3, chronology34);
        org.joda.time.DateTime.Property property36 = dateTime35.dayOfYear();
        int int37 = dateTime35.getHourOfDay();
        boolean boolean39 = dateTime35.isBefore((long) '/');
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime((long) 3, chronology41);
        org.joda.time.DateTime.Property property43 = dateTime42.dayOfYear();
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.DateMidnight dateMidnight45 = new org.joda.time.DateMidnight((java.lang.Object) dateTime42, chronology44);
        org.joda.time.DateMidnight dateMidnight47 = dateMidnight45.minusMonths((-1));
        org.joda.time.DateMidnight dateMidnight49 = dateMidnight45.withDayOfYear((int) ' ');
        mutableInterval8.setInterval((org.joda.time.ReadableInstant) dateTime35, (org.joda.time.ReadableInstant) dateMidnight49);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight52 = dateMidnight49.withEra(25);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 25 for era must be in the range [0,1]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(days7);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(dateMidnight29);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(dateMidnight47);
        org.junit.Assert.assertNotNull(dateMidnight49);
    }

    @Test
    public void test1630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1630");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 3, chronology1);
        org.joda.time.DateTime.Property property3 = dateTime2.dayOfYear();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((long) 3, chronology5);
        org.joda.time.DateTime.Property property7 = dateTime6.dayOfYear();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight((java.lang.Object) dateTime6, chronology8);
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight9.minusMonths((-1));
        org.joda.time.DateMidnight dateMidnight13 = dateMidnight9.withDayOfYear((int) ' ');
        int int14 = dateMidnight9.getWeekOfWeekyear();
        long long15 = property3.getDifferenceAsLong((org.joda.time.ReadableInstant) dateMidnight9);
        int int16 = property3.get();
        org.joda.time.DateTime dateTime17 = property3.roundFloorCopy();
        org.joda.time.DateTime.Property property18 = dateTime17.dayOfWeek();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property18);
    }

    @Test
    public void test1631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1631");
        java.util.Locale locale0 = java.util.Locale.PRC;
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
    }

    @Test
    public void test1632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1632");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((long) 0, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) 3, chronology4);
        org.joda.time.DateTime.Property property6 = dateTime5.dayOfYear();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateMidnight dateMidnight8 = new org.joda.time.DateMidnight((java.lang.Object) dateTime5, chronology7);
        org.joda.time.DateTime dateTime9 = localTime2.toDateTime((org.joda.time.ReadableInstant) dateTime5);
        int int10 = localTime2.size();
        org.joda.time.LocalTime localTime12 = localTime2.withMinuteOfHour(30);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 4 + "'", int10 == 4);
        org.junit.Assert.assertNotNull(localTime12);
    }

    @Test
    public void test1633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1633");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((long) 0, chronology2);
        org.joda.time.Chronology chronology4 = localTime3.getChronology();
        org.joda.time.DateTimeField dateTimeField5 = chronology4.weekyearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime6 = org.joda.time.MutableDateTime.now(chronology4);
        org.joda.time.DateTimeField dateTimeField7 = chronology4.monthOfYear();
        java.util.Locale locale8 = java.util.Locale.getDefault();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket10 = new org.joda.time.format.DateTimeParserBucket((long) 28, chronology4, locale8, (java.lang.Integer) 0);
        org.joda.time.Hours hours11 = org.joda.time.Hours.EIGHT;
        org.joda.time.Hours hours13 = hours11.minus((-1));
        int[] intArray16 = chronology4.get((org.joda.time.ReadablePeriod) hours11, (long) 7, 0L);
        org.joda.time.Hours hours17 = org.joda.time.Hours.MAX_VALUE;
        int int18 = hours17.getHours();
        boolean boolean19 = hours11.isLessThan(hours17);
        org.joda.time.Hours hours21 = hours11.dividedBy(59);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "en_US");
        org.junit.Assert.assertNotNull(hours11);
        org.junit.Assert.assertNotNull(hours13);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[0]");
        org.junit.Assert.assertNotNull(hours17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2147483647 + "'", int18 == 2147483647);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(hours21);
    }

    @Test
    public void test1634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1634");
        org.joda.time.Period period0 = org.joda.time.Period.ZERO;
        org.joda.time.Period period1 = period0.normalizedStandard();
        org.joda.time.Period period3 = period0.plusHours(2);
        java.time.chrono.IsoEra isoEra4 = java.time.chrono.IsoEra.CE;
        boolean boolean5 = period3.equals((java.lang.Object) isoEra4);
        java.time.LocalTime localTime10 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime11 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime10);
        java.time.LocalTime localTime16 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime17 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime16);
        java.time.temporal.ChronoField chronoField18 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime20 = localTime16.with((java.time.temporal.TemporalField) chronoField18, (long) (short) 1);
        long long21 = localTime10.getLong((java.time.temporal.TemporalField) chronoField18);
        boolean boolean22 = isoEra4.isSupported((java.time.temporal.TemporalField) chronoField18);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery23 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period24 = isoEra4.query(periodTemporalQuery23);
        boolean boolean25 = period24.isNegative();
        java.time.Period period27 = period24.plusDays((long) ' ');
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.LocalTime localTime30 = new org.joda.time.LocalTime((long) 0, chronology29);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((long) 3, chronology32);
        org.joda.time.DateTime.Property property34 = dateTime33.dayOfYear();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.DateMidnight dateMidnight36 = new org.joda.time.DateMidnight((java.lang.Object) dateTime33, chronology35);
        org.joda.time.DateTime dateTime37 = localTime30.toDateTime((org.joda.time.ReadableInstant) dateTime33);
        boolean boolean38 = period27.equals((java.lang.Object) localTime30);
        org.joda.time.Period period40 = org.joda.time.Period.hours((int) (short) 1);
        org.joda.time.LocalTime localTime42 = localTime30.withPeriodAdded((org.joda.time.ReadablePeriod) period40, 4);
        org.joda.time.Period period44 = period40.withSeconds((int) '+');
        org.junit.Assert.assertNotNull(period0);
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertTrue("'" + isoEra4 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra4.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertTrue("'" + chronoField18 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField18.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 3601000000001L + "'", long21 == 3601000000001L);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(periodTemporalQuery23);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertNotNull(localTime42);
        org.junit.Assert.assertNotNull(period44);
    }

    @Test
    public void test1635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1635");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((long) 0, chronology1);
        org.joda.time.Chronology chronology3 = localTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField4 = chronology3.weekyearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime5 = org.joda.time.MutableDateTime.now(chronology3);
        org.joda.time.DateTimeField dateTimeField6 = chronology3.monthOfYear();
        int int8 = dateTimeField6.getLeapAmount((long) (byte) 100);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.LocalTime localTime11 = new org.joda.time.LocalTime((long) 0, chronology10);
        org.joda.time.LocalTime localTime13 = localTime11.minusMillis(2022);
        org.joda.time.LocalTime localTime15 = localTime13.minusHours(3);
        java.util.stream.IntStream intStream18 = java.util.stream.IntStream.rangeClosed(100, (int) '4');
        int[] intArray19 = intStream18.toArray();
        int int20 = dateTimeField6.getMaximumValue((org.joda.time.ReadablePartial) localTime13, intArray19);
        int int22 = dateTimeField6.get((long) (byte) -1);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(intStream18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 12 + "'", int20 == 12);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 12 + "'", int22 == 12);
    }

    @Test
    public void test1636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1636");
        java.util.GregorianCalendar gregorianCalendar5 = new java.util.GregorianCalendar(12, 4096, 7, (-1), (int) (short) 10);
        int int6 = gregorianCalendar5.getWeeksInWeekYear();
        java.util.Date date7 = new java.util.Date();
        org.joda.time.LocalTime localTime8 = org.joda.time.LocalTime.fromDateFields(date7);
        gregorianCalendar5.setGregorianChange(date7);
        date7.setHours(22);
        date7.setTime((long) 6);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 52 + "'", int6 == 52);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(localTime8);
    }

    @Test
    public void test1637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1637");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Locale.LanguageRange[] languageRangeArray3 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList4 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList4, languageRangeArray3);
        java.util.Locale locale6 = java.util.Locale.JAPAN;
        java.util.Locale[] localeArray7 = new java.util.Locale[] { locale6 };
        java.util.ArrayList<java.util.Locale> localeList8 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList8, localeArray7);
        java.util.List<java.util.Locale> localeList10 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList4, (java.util.Collection<java.util.Locale>) localeList8);
        localeList10.clear();
        java.util.List<java.util.Locale> localeList12 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.util.Locale>) localeList10);
        java.util.Locale.LanguageRange[] languageRangeArray13 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList14 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList14, languageRangeArray13);
        java.util.Locale.LanguageRange[] languageRangeArray16 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList17 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList17, languageRangeArray16);
        java.util.Locale locale19 = java.util.Locale.JAPAN;
        java.util.Locale[] localeArray20 = new java.util.Locale[] { locale19 };
        java.util.ArrayList<java.util.Locale> localeList21 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList21, localeArray20);
        java.util.List<java.util.Locale> localeList23 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList17, (java.util.Collection<java.util.Locale>) localeList21);
        localeList23.clear();
        java.util.List<java.util.Locale> localeList25 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList14, (java.util.Collection<java.util.Locale>) localeList23);
        java.util.List<java.util.Locale> localeList26 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.util.Locale>) localeList25);
        java.util.ListIterator<java.util.Locale> localeItor27 = localeList25.listIterator();
        // The following exception was thrown during execution in test generation
        try {
            java.util.ListIterator<java.util.Locale> localeItor29 = localeList25.listIterator(64);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 64");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(languageRangeArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(localeArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(localeList10);
        org.junit.Assert.assertNotNull(localeList12);
        org.junit.Assert.assertNotNull(languageRangeArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(languageRangeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(localeArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(localeList23);
        org.junit.Assert.assertNotNull(localeList25);
        org.junit.Assert.assertNotNull(localeList26);
        org.junit.Assert.assertNotNull(localeItor27);
    }

    @Test
    public void test1638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1638");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.Duration duration2 = new org.joda.time.Duration(readableInstant0, readableInstant1);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = duration2.toPeriodTo(readableInstant3, periodType4);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.Duration duration8 = new org.joda.time.Duration(readableInstant6, readableInstant7);
        long long9 = duration8.getMillis();
        boolean boolean10 = duration2.isShorterThan((org.joda.time.ReadableDuration) duration8);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) 3, chronology12);
        org.joda.time.DateTime.Property property14 = dateTime13.dayOfYear();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight((java.lang.Object) dateTime13, chronology15);
        org.joda.time.MutableDateTime mutableDateTime17 = dateTime13.toMutableDateTime();
        mutableDateTime17.addYears((int) (short) 100);
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime17.dayOfWeek();
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime17.year();
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime17.weekyear();
        boolean boolean23 = duration2.equals((java.lang.Object) mutableDateTime17);
        mutableDateTime17.addMonths((int) ' ');
        mutableDateTime17.add((long) (byte) 10);
        org.joda.time.Period period28 = org.joda.time.Period.ZERO;
        org.joda.time.Period period29 = period28.normalizedStandard();
        org.joda.time.Period period31 = period28.plusHours(2);
        java.time.chrono.IsoEra isoEra32 = java.time.chrono.IsoEra.CE;
        boolean boolean33 = period31.equals((java.lang.Object) isoEra32);
        int int34 = period31.getMinutes();
        mutableDateTime17.add((org.joda.time.ReadablePeriod) period31);
        java.util.TimeZone timeZone37 = null;
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forTimeZone(timeZone37);
        org.joda.time.DateMidnight dateMidnight39 = new org.joda.time.DateMidnight((long) 1970, dateTimeZone38);
        long long42 = dateTimeZone38.convertLocalToUTC((long) 3, false);
        long long45 = dateTimeZone38.convertLocalToUTC(0L, true);
        mutableDateTime17.setZoneRetainFields(dateTimeZone38);
        java.lang.String str47 = dateTimeZone38.toString();
        org.joda.time.chrono.EthiopicChronology ethiopicChronology48 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone38);
        org.joda.time.DateTimeField dateTimeField49 = ethiopicChronology48.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone50 = ethiopicChronology48.getZone();
        org.joda.time.DateTimeField dateTimeField51 = ethiopicChronology48.era();
        org.joda.time.DateTimeField dateTimeField52 = ethiopicChronology48.secondOfDay();
        org.joda.time.DateTimeField dateTimeField53 = ethiopicChronology48.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField54 = ethiopicChronology48.halfdayOfDay();
        org.joda.time.DurationField durationField55 = ethiopicChronology48.weekyears();
        org.joda.time.DateTime dateTime56 = org.joda.time.DateTime.now((org.joda.time.Chronology) ethiopicChronology48);
        // The following exception was thrown during execution in test generation
        try {
            long long62 = ethiopicChronology48.getDateTimeMillis((long) 366, 59, 14, 2, (int) '/');
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 59 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertTrue("'" + isoEra32 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra32.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 3L + "'", long42 == 3L);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Etc/UTC" + "'", str47, "Etc/UTC");
        org.junit.Assert.assertNotNull(ethiopicChronology48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(durationField55);
        org.junit.Assert.assertNotNull(dateTime56);
    }

    @Test
    public void test1639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1639");
        java.util.GregorianCalendar gregorianCalendar5 = new java.util.GregorianCalendar(12, 4096, 7, (-1), (int) (short) 10);
        int int6 = gregorianCalendar5.getWeeksInWeekYear();
        java.lang.String str7 = gregorianCalendar5.getCalendarType();
        java.time.ZonedDateTime zonedDateTime8 = gregorianCalendar5.toZonedDateTime();
        java.time.ZonedDateTime zonedDateTime10 = zonedDateTime8.minusMonths((long) 10);
        java.time.chrono.ChronoZonedDateTime<java.time.LocalDate> localDateChronoZonedDateTime11 = zonedDateTime8.withEarlierOffsetAtOverlap();
        java.time.ZonedDateTime zonedDateTime13 = zonedDateTime8.minusMonths((long) 4200);
        java.time.ZonedDateTime zonedDateTime15 = zonedDateTime13.plusNanos(8L);
        org.joda.time.Period period16 = org.joda.time.Period.ZERO;
        org.joda.time.Period period17 = period16.normalizedStandard();
        org.joda.time.Period period19 = period16.plusHours(2);
        java.time.chrono.IsoEra isoEra20 = java.time.chrono.IsoEra.CE;
        boolean boolean21 = period19.equals((java.lang.Object) isoEra20);
        java.time.LocalTime localTime26 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime27 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime26);
        java.time.LocalTime localTime32 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime33 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime32);
        java.time.temporal.ChronoField chronoField34 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime36 = localTime32.with((java.time.temporal.TemporalField) chronoField34, (long) (short) 1);
        long long37 = localTime26.getLong((java.time.temporal.TemporalField) chronoField34);
        boolean boolean38 = isoEra20.isSupported((java.time.temporal.TemporalField) chronoField34);
        boolean boolean39 = zonedDateTime13.isSupported((java.time.temporal.TemporalField) chronoField34);
        java.time.Instant instant40 = java.time.Instant.now();
        java.nio.file.attribute.FileTime fileTime41 = java.nio.file.attribute.FileTime.from(instant40);
        org.joda.time.Period period42 = org.joda.time.Period.ZERO;
        org.joda.time.Period period43 = period42.normalizedStandard();
        org.joda.time.Period period45 = period42.plusHours(2);
        java.time.chrono.IsoEra isoEra46 = java.time.chrono.IsoEra.CE;
        boolean boolean47 = period45.equals((java.lang.Object) isoEra46);
        java.time.LocalTime localTime52 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime53 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime52);
        java.time.LocalTime localTime58 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime59 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime58);
        java.time.temporal.ChronoField chronoField60 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime62 = localTime58.with((java.time.temporal.TemporalField) chronoField60, (long) (short) 1);
        long long63 = localTime52.getLong((java.time.temporal.TemporalField) chronoField60);
        boolean boolean64 = isoEra46.isSupported((java.time.temporal.TemporalField) chronoField60);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery65 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period66 = isoEra46.query(periodTemporalQuery65);
        boolean boolean67 = period66.isNegative();
        java.time.Period period69 = period66.plusDays((long) ' ');
        java.time.temporal.ChronoField chronoField70 = java.time.temporal.ChronoField.SECOND_OF_DAY;
        boolean boolean71 = period66.equals((java.lang.Object) chronoField70);
        java.time.chrono.ChronoPeriod chronoPeriod72 = period66.negated();
        java.time.Instant instant73 = instant40.minus((java.time.temporal.TemporalAmount) chronoPeriod72);
        java.time.LocalDateTime localDateTime74 = java.time.LocalDateTime.now();
        java.time.temporal.ChronoField chronoField75 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime77 = localDateTime74.with((java.time.temporal.TemporalField) chronoField75, (long) 10);
        java.time.Duration duration79 = java.time.Duration.ofSeconds((long) 0);
        java.time.temporal.Temporal temporal80 = localDateTime74.minus((java.time.temporal.TemporalAmount) duration79);
        java.time.Duration duration82 = duration79.plusHours((long) '.');
        java.time.Instant instant83 = instant40.minus((java.time.temporal.TemporalAmount) duration82);
        // The following exception was thrown during execution in test generation
        try {
            long long84 = chronoField34.getFrom((java.time.temporal.TemporalAccessor) instant40);
            org.junit.Assert.fail("Expected exception of type java.time.temporal.UnsupportedTemporalTypeException; message: Unsupported field: NanoOfDay");
        } catch (java.time.temporal.UnsupportedTemporalTypeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 52 + "'", int6 == 52);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "gregory" + "'", str7, "gregory");
        org.junit.Assert.assertNotNull(zonedDateTime8);
        org.junit.Assert.assertNotNull(zonedDateTime10);
        org.junit.Assert.assertNotNull(localDateChronoZonedDateTime11);
        org.junit.Assert.assertNotNull(zonedDateTime13);
        org.junit.Assert.assertNotNull(zonedDateTime15);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertTrue("'" + isoEra20 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra20.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(localTime26);
        org.junit.Assert.assertNotNull(localTime27);
        org.junit.Assert.assertNotNull(localTime32);
        org.junit.Assert.assertNotNull(localTime33);
        org.junit.Assert.assertTrue("'" + chronoField34 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField34.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime36);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 3601000000001L + "'", long37 == 3601000000001L);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(instant40);
        org.junit.Assert.assertNotNull(fileTime41);
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertTrue("'" + isoEra46 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra46.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(localTime52);
        org.junit.Assert.assertNotNull(localTime53);
        org.junit.Assert.assertNotNull(localTime58);
        org.junit.Assert.assertNotNull(localTime59);
        org.junit.Assert.assertTrue("'" + chronoField60 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField60.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime62);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 3601000000001L + "'", long63 == 3601000000001L);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(periodTemporalQuery65);
        org.junit.Assert.assertNotNull(period66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(period69);
        org.junit.Assert.assertTrue("'" + chronoField70 + "' != '" + java.time.temporal.ChronoField.SECOND_OF_DAY + "'", chronoField70.equals(java.time.temporal.ChronoField.SECOND_OF_DAY));
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(chronoPeriod72);
        org.junit.Assert.assertNotNull(instant73);
        org.junit.Assert.assertNotNull(localDateTime74);
        org.junit.Assert.assertTrue("'" + chronoField75 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField75.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime77);
        org.junit.Assert.assertNotNull(duration79);
        org.junit.Assert.assertNotNull(temporal80);
        org.junit.Assert.assertNotNull(duration82);
        org.junit.Assert.assertNotNull(instant83);
    }

    @Test
    public void test1640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1640");
        java.time.OffsetTime offsetTime0 = java.time.OffsetTime.MAX;
        java.time.LocalTime localTime1 = offsetTime0.toLocalTime();
        java.lang.String str2 = offsetTime0.toString();
        java.time.Duration duration3 = java.time.Duration.ZERO;
        java.lang.String str4 = duration3.toString();
        java.time.OffsetTime offsetTime5 = offsetTime0.plus((java.time.temporal.TemporalAmount) duration3);
        java.time.OffsetTime offsetTime7 = offsetTime0.plusNanos((long) 0);
        java.time.LocalTime localTime12 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime13 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime12);
        java.time.temporal.ChronoField chronoField14 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime16 = localTime12.with((java.time.temporal.TemporalField) chronoField14, (long) (short) 1);
        java.util.Locale locale17 = java.util.Locale.GERMANY;
        java.lang.String str18 = chronoField14.getDisplayName(locale17);
        java.time.OffsetTime offsetTime20 = offsetTime7.with((java.time.temporal.TemporalField) chronoField14, (long) 28);
        org.joda.time.Period period21 = org.joda.time.Period.ZERO;
        org.joda.time.Period period22 = period21.normalizedStandard();
        org.joda.time.Period period24 = period21.plusHours(2);
        java.time.chrono.IsoEra isoEra25 = java.time.chrono.IsoEra.CE;
        boolean boolean26 = period24.equals((java.lang.Object) isoEra25);
        java.time.LocalTime localTime31 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime32 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime31);
        java.time.LocalTime localTime37 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime38 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime37);
        java.time.temporal.ChronoField chronoField39 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime41 = localTime37.with((java.time.temporal.TemporalField) chronoField39, (long) (short) 1);
        long long42 = localTime31.getLong((java.time.temporal.TemporalField) chronoField39);
        boolean boolean43 = isoEra25.isSupported((java.time.temporal.TemporalField) chronoField39);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery44 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period45 = isoEra25.query(periodTemporalQuery44);
        boolean boolean46 = period45.isNegative();
        java.time.Period period48 = period45.plusDays((long) ' ');
        java.time.temporal.ChronoField chronoField49 = java.time.temporal.ChronoField.SECOND_OF_DAY;
        boolean boolean50 = period45.equals((java.lang.Object) chronoField49);
        java.time.chrono.ChronoPeriod chronoPeriod51 = period45.negated();
        java.time.OffsetTime offsetTime52 = offsetTime7.minus((java.time.temporal.TemporalAmount) period45);
        java.lang.String str53 = period45.toString();
        org.junit.Assert.assertNotNull(offsetTime0);
        org.junit.Assert.assertNotNull(localTime1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "23:59:59.999999999-18:00" + "'", str2, "23:59:59.999999999-18:00");
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "PT0S" + "'", str4, "PT0S");
        org.junit.Assert.assertNotNull(offsetTime5);
        org.junit.Assert.assertNotNull(offsetTime7);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertTrue("'" + chronoField14 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField14.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "NanoOfDay" + "'", str18, "NanoOfDay");
        org.junit.Assert.assertNotNull(offsetTime20);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertTrue("'" + isoEra25 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra25.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(localTime31);
        org.junit.Assert.assertNotNull(localTime32);
        org.junit.Assert.assertNotNull(localTime37);
        org.junit.Assert.assertNotNull(localTime38);
        org.junit.Assert.assertTrue("'" + chronoField39 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField39.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime41);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 3601000000001L + "'", long42 == 3601000000001L);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(periodTemporalQuery44);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(period48);
        org.junit.Assert.assertTrue("'" + chronoField49 + "' != '" + java.time.temporal.ChronoField.SECOND_OF_DAY + "'", chronoField49.equals(java.time.temporal.ChronoField.SECOND_OF_DAY));
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(chronoPeriod51);
        org.junit.Assert.assertNotNull(offsetTime52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "P0D" + "'", str53, "P0D");
    }

    @Test
    public void test1641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1641");
        java.time.LocalTime localTime4 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime5 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime4);
        java.time.temporal.ChronoField chronoField6 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime8 = localTime4.with((java.time.temporal.TemporalField) chronoField6, (long) (short) 1);
        java.time.Duration duration10 = java.time.Duration.ofMinutes((long) 3);
        java.time.LocalTime localTime11 = localTime4.minus((java.time.temporal.TemporalAmount) duration10);
        // The following exception was thrown during execution in test generation
        try {
            java.time.Period period12 = java.time.Period.from((java.time.temporal.TemporalAmount) duration10);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Unit must be Years, Months or Days, but was Seconds");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertTrue("'" + chronoField6 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField6.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(localTime11);
    }

    @Test
    public void test1642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1642");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withYearOfCentury((int) 'a');
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.plusSeconds(6);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime3.withWeekyear(10);
        org.joda.time.LocalDateTime.Property property8 = localDateTime3.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime10 = property8.addToCopy(3601000000001L);
        int int11 = localDateTime10.getMillisOfSecond();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime10.minusMonths((int) (short) -1);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime10);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 710 + "'", int11 == 710);
        org.junit.Assert.assertNotNull(localDateTime13);
    }

    @Test
    public void test1643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1643");
        java.io.OutputStream outputStream0 = null;
        java.io.FilterOutputStream filterOutputStream1 = new java.io.FilterOutputStream(outputStream0);
        java.io.PrintStream printStream3 = new java.io.PrintStream((java.io.OutputStream) filterOutputStream1, false);
        // The following exception was thrown during execution in test generation
        try {
            printStream3.print((long) 34595674);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1644");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((long) 0, chronology1);
        org.joda.time.Chronology chronology3 = localTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField4 = chronology3.weekyearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime5 = org.joda.time.MutableDateTime.now(chronology3);
        mutableDateTime5.setTime((long) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime5.setTime((int) '/', (int) (short) 0, (int) 'a', 3601);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 47 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(mutableDateTime5);
    }

    @Test
    public void test1645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1645");
        java.nio.charset.Charset charset0 = java.nio.charset.Charset.defaultCharset();
        java.nio.charset.CharsetDecoder charsetDecoder1 = charset0.newDecoder();
        java.nio.charset.Charset charset2 = java.nio.charset.Charset.defaultCharset();
        boolean boolean3 = charset0.contains(charset2);
        java.nio.charset.CharsetEncoder charsetEncoder4 = charset0.newEncoder();
        byte[] byteArray5 = charsetEncoder4.replacement();
        java.nio.charset.Charset charset6 = java.nio.charset.Charset.defaultCharset();
        java.nio.charset.CharsetDecoder charsetDecoder7 = charset6.newDecoder();
        float float8 = charsetDecoder7.maxCharsPerByte();
        float float9 = charsetDecoder7.averageCharsPerByte();
        java.nio.charset.CodingErrorAction codingErrorAction10 = charsetDecoder7.unmappableCharacterAction();
        java.nio.charset.CharsetEncoder charsetEncoder11 = charsetEncoder4.onUnmappableCharacter(codingErrorAction10);
        java.nio.charset.Charset charset12 = java.nio.charset.Charset.defaultCharset();
        java.nio.charset.CharsetDecoder charsetDecoder13 = charset12.newDecoder();
        java.nio.charset.Charset charset14 = java.nio.charset.Charset.defaultCharset();
        boolean boolean15 = charset12.contains(charset14);
        java.nio.charset.CharsetEncoder charsetEncoder16 = charset12.newEncoder();
        char[] charArray17 = new char[] {};
        java.nio.CharBuffer charBuffer18 = java.nio.CharBuffer.wrap(charArray17);
        java.nio.ByteBuffer byteBuffer19 = charsetEncoder16.encode(charBuffer18);
        java.nio.CharBuffer charBuffer20 = charBuffer18.slice();
        java.nio.ByteBuffer byteBuffer21 = charsetEncoder11.encode(charBuffer20);
        java.nio.ByteBuffer byteBuffer22 = byteBuffer21.asReadOnlyBuffer();
        // The following exception was thrown during execution in test generation
        try {
            short short24 = byteBuffer21.getShort((int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charset0);
        org.junit.Assert.assertNotNull(charsetDecoder1);
        org.junit.Assert.assertNotNull(charset2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(charsetEncoder4);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[63]");
        org.junit.Assert.assertNotNull(charset6);
        org.junit.Assert.assertNotNull(charsetDecoder7);
        org.junit.Assert.assertTrue("'" + float8 + "' != '" + 1.0f + "'", float8 == 1.0f);
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + 1.0f + "'", float9 == 1.0f);
        org.junit.Assert.assertNotNull(codingErrorAction10);
        org.junit.Assert.assertNotNull(charsetEncoder11);
        org.junit.Assert.assertNotNull(charset12);
        org.junit.Assert.assertNotNull(charsetDecoder13);
        org.junit.Assert.assertNotNull(charset14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(charsetEncoder16);
        org.junit.Assert.assertNotNull(charArray17);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray17), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray17), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray17), "[]");
        org.junit.Assert.assertNotNull(charBuffer18);
        org.junit.Assert.assertNotNull(byteBuffer19);
        org.junit.Assert.assertNotNull(charBuffer20);
        org.junit.Assert.assertNotNull(byteBuffer21);
        org.junit.Assert.assertNotNull(byteBuffer22);
    }

    @Test
    public void test1646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1646");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((long) 0, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) 3, chronology4);
        org.joda.time.DateTime.Property property6 = dateTime5.dayOfYear();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateMidnight dateMidnight8 = new org.joda.time.DateMidnight((java.lang.Object) dateTime5, chronology7);
        org.joda.time.DateTime dateTime9 = localTime2.toDateTime((org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.LocalTime localTime11 = localTime2.plusHours(3);
        int int12 = localTime11.getMillisOfDay();
        org.joda.time.LocalTime.Property property13 = localTime11.millisOfSecond();
        org.joda.time.LocalTime localTime15 = property13.setCopy(59);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 10800000 + "'", int12 == 10800000);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localTime15);
    }

    @Test
    public void test1647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1647");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 3, chronology1);
        org.joda.time.DateTime.Property property3 = dateTime2.dayOfYear();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight((java.lang.Object) dateTime2, chronology4);
        org.joda.time.MutableDateTime mutableDateTime6 = dateTime2.toMutableDateTime();
        mutableDateTime6.addYears((int) (short) 100);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime6.dayOfWeek();
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime6.year();
        java.util.TimeZone timeZone11 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        mutableDateTime6.setZone(dateTimeZone12);
        java.util.TimeZone timeZone14 = dateTimeZone12.toTimeZone();
        int int16 = timeZone14.getOffset((long) (byte) -1);
        java.time.ZoneId zoneId17 = timeZone14.toZoneId();
        java.lang.String str18 = zoneId17.getId();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(timeZone14);
        org.junit.Assert.assertEquals(timeZone14.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(zoneId17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Etc/UTC" + "'", str18, "Etc/UTC");
    }

    @Test
    public void test1648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1648");
        java.util.MissingResourceException missingResourceException4 = new java.util.MissingResourceException("22", "", "hours");
        java.security.KeyException keyException5 = new java.security.KeyException("ja-JP", (java.lang.Throwable) missingResourceException4);
    }

    @Test
    public void test1649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1649");
        java.util.GregorianCalendar gregorianCalendar5 = new java.util.GregorianCalendar(12, 4096, 7, (-1), (int) (short) 10);
        int int6 = gregorianCalendar5.getMinimalDaysInFirstWeek();
        java.time.Instant instant7 = gregorianCalendar5.toInstant();
        java.util.Date date14 = new java.util.Date((int) (byte) 100, 4, 306, (int) ':', 52, (int) ' ');
        int int15 = date14.getMonth();
        gregorianCalendar5.setTime(date14);
        date14.setSeconds(1936);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertEquals(date14.toString(), "Sun Mar 04 11:24:16 UTC 2001");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2 + "'", int15 == 2);
    }

    @Test
    public void test1650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1650");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((long) 0, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) 3, chronology4);
        org.joda.time.DateTime.Property property6 = dateTime5.dayOfYear();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateMidnight dateMidnight8 = new org.joda.time.DateMidnight((java.lang.Object) dateTime5, chronology7);
        org.joda.time.DateTime dateTime9 = localTime2.toDateTime((org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateTime dateTime11 = dateTime9.minusMillis((int) (byte) 0);
        int int12 = dateTime9.getYearOfCentury();
        org.joda.time.DateTime dateTime14 = dateTime9.minusMonths((int) 'a');
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 70 + "'", int12 == 70);
        org.junit.Assert.assertNotNull(dateTime14);
    }

    @Test
    public void test1651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1651");
        java.time.LocalDateTime localDateTime7 = java.time.LocalDateTime.now();
        java.time.temporal.ChronoField chronoField8 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime10 = localDateTime7.with((java.time.temporal.TemporalField) chronoField8, (long) 10);
        java.time.LocalDateTime localDateTime12 = localDateTime7.minusMinutes((long) 12);
        java.time.OffsetDateTime offsetDateTime13 = java.time.OffsetDateTime.now();
        java.time.ZoneOffset zoneOffset15 = java.time.ZoneOffset.ofHours(9);
        java.time.OffsetDateTime offsetDateTime16 = offsetDateTime13.withOffsetSameLocal(zoneOffset15);
        java.time.ZoneOffset zoneOffset18 = java.time.ZoneOffset.ofHours(9);
        java.time.ZonedDateTime zonedDateTime19 = java.time.ZonedDateTime.ofInstant(localDateTime7, zoneOffset15, (java.time.ZoneId) zoneOffset18);
        java.time.zone.ZoneRules zoneRules20 = java.time.zone.ZoneRules.of(zoneOffset15);
        // The following exception was thrown during execution in test generation
        try {
            java.time.ZonedDateTime zonedDateTime21 = java.time.ZonedDateTime.of(0, 624, 3600000, 23, 32, 52, 52, (java.time.ZoneId) zoneOffset15);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for MonthOfYear (valid values 1 - 12): 624");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertTrue("'" + chronoField8 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField8.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(offsetDateTime13);
        org.junit.Assert.assertNotNull(zoneOffset15);
        org.junit.Assert.assertNotNull(offsetDateTime16);
        org.junit.Assert.assertNotNull(zoneOffset18);
        org.junit.Assert.assertNotNull(zonedDateTime19);
        org.junit.Assert.assertNotNull(zoneRules20);
    }

    @Test
    public void test1652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1652");
        java.time.OffsetDateTime offsetDateTime0 = java.time.OffsetDateTime.now();
        int int1 = offsetDateTime0.getDayOfMonth();
        java.time.OffsetDateTime offsetDateTime3 = offsetDateTime0.withMinute((int) (byte) 10);
        java.time.temporal.TemporalUnit temporalUnit5 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.time.OffsetDateTime offsetDateTime6 = offsetDateTime0.minus(0L, temporalUnit5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(offsetDateTime0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 21 + "'", int1 == 21);
        org.junit.Assert.assertNotNull(offsetDateTime3);
    }

    @Test
    public void test1653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1653");
        org.joda.time.Weeks weeks0 = org.joda.time.Weeks.THREE;
        org.joda.time.Weeks weeks1 = org.joda.time.Weeks.ONE;
        java.util.concurrent.TimeUnit timeUnit2 = java.util.concurrent.TimeUnit.NANOSECONDS;
        boolean boolean3 = weeks1.equals((java.lang.Object) timeUnit2);
        org.joda.time.MutablePeriod mutablePeriod4 = weeks1.toMutablePeriod();
        boolean boolean5 = weeks0.isGreaterThan(weeks1);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.Duration duration8 = new org.joda.time.Duration(readableInstant6, readableInstant7);
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.PeriodType periodType10 = null;
        org.joda.time.Period period11 = duration8.toPeriodTo(readableInstant9, periodType10);
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.Duration duration14 = new org.joda.time.Duration(readableInstant12, readableInstant13);
        long long15 = duration14.getMillis();
        boolean boolean16 = duration8.isShorterThan((org.joda.time.ReadableDuration) duration14);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) 3, chronology18);
        org.joda.time.DateTime.Property property20 = dateTime19.dayOfYear();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight((java.lang.Object) dateTime19, chronology21);
        org.joda.time.MutableDateTime mutableDateTime23 = dateTime19.toMutableDateTime();
        mutableDateTime23.addYears((int) (short) 100);
        org.joda.time.MutableDateTime.Property property26 = mutableDateTime23.dayOfWeek();
        org.joda.time.MutableDateTime.Property property27 = mutableDateTime23.year();
        org.joda.time.MutableDateTime.Property property28 = mutableDateTime23.weekyear();
        boolean boolean29 = duration8.equals((java.lang.Object) mutableDateTime23);
        mutableDateTime23.addMonths((int) ' ');
        mutableDateTime23.add((long) (byte) 10);
        org.joda.time.Period period34 = org.joda.time.Period.ZERO;
        org.joda.time.Period period35 = period34.normalizedStandard();
        org.joda.time.Period period37 = period34.plusHours(2);
        java.time.chrono.IsoEra isoEra38 = java.time.chrono.IsoEra.CE;
        boolean boolean39 = period37.equals((java.lang.Object) isoEra38);
        int int40 = period37.getMinutes();
        mutableDateTime23.add((org.joda.time.ReadablePeriod) period37);
        java.util.TimeZone timeZone43 = null;
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forTimeZone(timeZone43);
        org.joda.time.DateMidnight dateMidnight45 = new org.joda.time.DateMidnight((long) 1970, dateTimeZone44);
        long long48 = dateTimeZone44.convertLocalToUTC((long) 3, false);
        long long51 = dateTimeZone44.convertLocalToUTC(0L, true);
        mutableDateTime23.setZoneRetainFields(dateTimeZone44);
        org.joda.time.Interval interval53 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) weeks0, (org.joda.time.ReadableInstant) mutableDateTime23);
        org.joda.time.MutableInterval mutableInterval54 = interval53.toMutableInterval();
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.LocalTime localTime58 = new org.joda.time.LocalTime((long) 0, chronology57);
        org.joda.time.Chronology chronology59 = localTime58.getChronology();
        java.util.Locale locale60 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale locale61 = java.util.Locale.GERMANY;
        java.lang.String str62 = locale60.getDisplayScript(locale61);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket64 = new org.joda.time.format.DateTimeParserBucket((long) 1970, chronology59, locale60, (java.lang.Integer) 1);
        org.joda.time.DateTime dateTime65 = org.joda.time.DateTime.now(chronology59);
        mutableInterval54.setChronology(chronology59);
        org.junit.Assert.assertNotNull(weeks0);
        org.junit.Assert.assertNotNull(weeks1);
        org.junit.Assert.assertNotNull(timeUnit2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(mutablePeriod4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(mutableDateTime23);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertTrue("'" + isoEra38 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra38.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 3L + "'", long48 == 3L);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 0L + "'", long51 == 0L);
        org.junit.Assert.assertNotNull(mutableInterval54);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertNotNull(dateTime65);
    }

    @Test
    public void test1654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1654");
        java.net.URI uRI1 = new java.net.URI("hi!");
        java.lang.String str2 = uRI1.getRawAuthority();
        java.lang.String str3 = uRI1.toString();
        java.lang.String str4 = uRI1.getRawFragment();
        // The following exception was thrown during execution in test generation
        try {
            java.net.URL uRL5 = uRI1.toURL();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: URI is not absolute");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "hi!" + "'", str3, "hi!");
        org.junit.Assert.assertNull(str4);
    }

    @Test
    public void test1655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1655");
        java.util.stream.DoubleStream doubleStream0 = java.util.stream.DoubleStream.empty();
        java.util.stream.DoubleStream doubleStream1 = doubleStream0.unordered();
        java.util.OptionalDouble optionalDouble2 = doubleStream0.max();
        org.joda.time.Weeks weeks3 = org.joda.time.Weeks.ONE;
        java.util.concurrent.TimeUnit timeUnit4 = java.util.concurrent.TimeUnit.NANOSECONDS;
        boolean boolean5 = weeks3.equals((java.lang.Object) timeUnit4);
        org.joda.time.MutablePeriod mutablePeriod6 = weeks3.toMutablePeriod();
        mutablePeriod6.add((int) '#', 0, 10, 0, (int) (byte) 0, (int) (short) 0, 1, (-1));
        mutablePeriod6.clear();
        org.joda.time.Period period17 = org.joda.time.Period.ZERO;
        org.joda.time.Period period18 = period17.normalizedStandard();
        org.joda.time.Period period20 = period17.plusHours(2);
        org.joda.time.DurationFieldType durationFieldType21 = org.joda.time.DurationFieldType.hours();
        int int22 = period17.indexOf(durationFieldType21);
        mutablePeriod6.set(durationFieldType21, (int) (byte) 10);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.LocalTime localTime28 = new org.joda.time.LocalTime((long) 0, chronology27);
        org.joda.time.Chronology chronology29 = localTime28.getChronology();
        java.util.Locale locale30 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale locale31 = java.util.Locale.GERMANY;
        java.lang.String str32 = locale30.getDisplayScript(locale31);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket34 = new org.joda.time.format.DateTimeParserBucket((long) 1970, chronology29, locale30, (java.lang.Integer) 1);
        org.joda.time.DateTime dateTime35 = org.joda.time.DateTime.now(chronology29);
        org.joda.time.DurationField durationField36 = durationFieldType21.getField(chronology29);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod((java.lang.Object) optionalDouble2, chronology29);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No period converter found for type: java.util.OptionalDouble");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleStream0);
        org.junit.Assert.assertNotNull(doubleStream1);
        org.junit.Assert.assertNotNull(optionalDouble2);
        org.junit.Assert.assertNotNull(weeks3);
        org.junit.Assert.assertNotNull(timeUnit4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(mutablePeriod6);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(durationFieldType21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 4 + "'", int22 == 4);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(durationField36);
    }

    @Test
    public void test1656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1656");
        java.time.OffsetTime offsetTime0 = java.time.OffsetTime.MAX;
        java.time.LocalTime localTime1 = offsetTime0.toLocalTime();
        java.lang.String str2 = offsetTime0.toString();
        java.time.Duration duration3 = java.time.Duration.ZERO;
        java.lang.String str4 = duration3.toString();
        java.time.OffsetTime offsetTime5 = offsetTime0.plus((java.time.temporal.TemporalAmount) duration3);
        java.time.OffsetTime offsetTime7 = offsetTime0.plusNanos((long) 0);
        java.time.OffsetTime offsetTime9 = offsetTime0.plusNanos((-1L));
        java.time.OffsetTime offsetTime11 = offsetTime0.plusHours((long) (short) 1);
        java.time.OffsetTime offsetTime13 = offsetTime11.minusSeconds((long) 3601);
        org.junit.Assert.assertNotNull(offsetTime0);
        org.junit.Assert.assertNotNull(localTime1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "23:59:59.999999999-18:00" + "'", str2, "23:59:59.999999999-18:00");
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "PT0S" + "'", str4, "PT0S");
        org.junit.Assert.assertNotNull(offsetTime5);
        org.junit.Assert.assertNotNull(offsetTime7);
        org.junit.Assert.assertNotNull(offsetTime9);
        org.junit.Assert.assertNotNull(offsetTime11);
        org.junit.Assert.assertNotNull(offsetTime13);
    }

    @Test
    public void test1657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1657");
        java.security.CodeSource codeSource0 = null;
        java.security.PermissionCollection permissionCollection1 = null;
        java.security.ProtectionDomain protectionDomain2 = new java.security.ProtectionDomain(codeSource0, permissionCollection1);
        java.lang.ClassLoader classLoader3 = protectionDomain2.getClassLoader();
        java.security.CodeSource codeSource4 = protectionDomain2.getCodeSource();
        org.junit.Assert.assertEquals(protectionDomain2.toString(), "ProtectionDomain  null\n null\n <no principals>\n null\n");
        org.junit.Assert.assertNull(classLoader3);
        org.junit.Assert.assertNull(codeSource4);
    }

    @Test
    public void test1658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1658");
        org.joda.time.Period period4 = new org.joda.time.Period((int) '#', 0, 2, (int) (short) 100);
        org.joda.time.Period period6 = period4.withSeconds(12);
        java.util.Locale locale7 = java.util.Locale.JAPAN;
        java.lang.Object obj8 = locale7.clone();
        boolean boolean9 = period4.equals((java.lang.Object) locale7);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertEquals(obj8.toString(), "ja_JP");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj8), "ja_JP");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj8), "ja_JP");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test1659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1659");
        org.joda.time.Period period0 = org.joda.time.Period.ZERO;
        org.joda.time.Period period1 = period0.normalizedStandard();
        org.joda.time.Period period3 = period0.plusHours(2);
        java.time.chrono.IsoEra isoEra4 = java.time.chrono.IsoEra.CE;
        boolean boolean5 = period3.equals((java.lang.Object) isoEra4);
        java.time.LocalTime localTime10 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime11 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime10);
        java.time.LocalTime localTime16 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime17 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime16);
        java.time.temporal.ChronoField chronoField18 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime20 = localTime16.with((java.time.temporal.TemporalField) chronoField18, (long) (short) 1);
        long long21 = localTime10.getLong((java.time.temporal.TemporalField) chronoField18);
        boolean boolean22 = isoEra4.isSupported((java.time.temporal.TemporalField) chronoField18);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery23 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period24 = isoEra4.query(periodTemporalQuery23);
        boolean boolean25 = period24.isNegative();
        java.time.Period period27 = period24.plusDays((long) ' ');
        boolean boolean28 = period24.isNegative();
        java.time.Period period30 = period24.minusYears((long) 10);
        org.joda.time.Period period31 = org.joda.time.Period.ZERO;
        org.joda.time.Period period32 = period31.normalizedStandard();
        org.joda.time.Period period34 = period31.plusHours(2);
        java.time.chrono.IsoEra isoEra35 = java.time.chrono.IsoEra.CE;
        boolean boolean36 = period34.equals((java.lang.Object) isoEra35);
        java.time.LocalTime localTime41 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime42 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime41);
        java.time.LocalTime localTime47 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime48 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime47);
        java.time.temporal.ChronoField chronoField49 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime51 = localTime47.with((java.time.temporal.TemporalField) chronoField49, (long) (short) 1);
        long long52 = localTime41.getLong((java.time.temporal.TemporalField) chronoField49);
        boolean boolean53 = isoEra35.isSupported((java.time.temporal.TemporalField) chronoField49);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery54 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period55 = isoEra35.query(periodTemporalQuery54);
        java.time.chrono.ChronoPeriod chronoPeriod56 = period30.minus((java.time.temporal.TemporalAmount) period55);
        java.time.chrono.ChronoPeriod chronoPeriod58 = period30.multipliedBy(4096);
        int int59 = period30.getMonths();
        java.time.chrono.IsoChronology isoChronology60 = period30.getChronology();
        java.time.ZoneOffset zoneOffset63 = java.time.ZoneOffset.ofHoursMinutes(1, 10);
        java.time.LocalDate localDate64 = java.time.LocalDate.now((java.time.ZoneId) zoneOffset63);
        java.time.Clock clock65 = java.time.Clock.system((java.time.ZoneId) zoneOffset63);
        java.time.Duration duration67 = java.time.Duration.ofSeconds((long) 0);
        java.time.Duration duration69 = duration67.multipliedBy((long) (byte) -1);
        java.time.Clock clock70 = java.time.Clock.offset(clock65, duration67);
        java.time.chrono.ChronoLocalDate chronoLocalDate71 = isoChronology60.dateNow(clock65);
        org.joda.time.Period period72 = org.joda.time.Period.ZERO;
        org.joda.time.Period period73 = period72.normalizedStandard();
        org.joda.time.Period period75 = period72.plusHours(2);
        java.time.chrono.IsoEra isoEra76 = java.time.chrono.IsoEra.CE;
        boolean boolean77 = period75.equals((java.lang.Object) isoEra76);
        java.time.LocalTime localTime82 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime83 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime82);
        java.time.LocalTime localTime88 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime89 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime88);
        java.time.temporal.ChronoField chronoField90 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime92 = localTime88.with((java.time.temporal.TemporalField) chronoField90, (long) (short) 1);
        long long93 = localTime82.getLong((java.time.temporal.TemporalField) chronoField90);
        boolean boolean94 = isoEra76.isSupported((java.time.temporal.TemporalField) chronoField90);
        java.time.temporal.ValueRange valueRange95 = isoChronology60.range(chronoField90);
        java.time.temporal.TemporalUnit temporalUnit96 = chronoField90.getRangeUnit();
        org.junit.Assert.assertNotNull(period0);
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertTrue("'" + isoEra4 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra4.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertTrue("'" + chronoField18 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField18.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 3601000000001L + "'", long21 == 3601000000001L);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(periodTemporalQuery23);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertTrue("'" + isoEra35 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra35.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(localTime41);
        org.junit.Assert.assertNotNull(localTime42);
        org.junit.Assert.assertNotNull(localTime47);
        org.junit.Assert.assertNotNull(localTime48);
        org.junit.Assert.assertTrue("'" + chronoField49 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField49.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime51);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 3601000000001L + "'", long52 == 3601000000001L);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(periodTemporalQuery54);
        org.junit.Assert.assertNotNull(period55);
        org.junit.Assert.assertNotNull(chronoPeriod56);
        org.junit.Assert.assertNotNull(chronoPeriod58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(isoChronology60);
        org.junit.Assert.assertNotNull(zoneOffset63);
        org.junit.Assert.assertNotNull(localDate64);
        org.junit.Assert.assertNotNull(clock65);
        org.junit.Assert.assertNotNull(duration67);
        org.junit.Assert.assertNotNull(duration69);
        org.junit.Assert.assertNotNull(clock70);
        org.junit.Assert.assertNotNull(chronoLocalDate71);
        org.junit.Assert.assertNotNull(period72);
        org.junit.Assert.assertNotNull(period73);
        org.junit.Assert.assertNotNull(period75);
        org.junit.Assert.assertTrue("'" + isoEra76 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra76.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(localTime82);
        org.junit.Assert.assertNotNull(localTime83);
        org.junit.Assert.assertNotNull(localTime88);
        org.junit.Assert.assertNotNull(localTime89);
        org.junit.Assert.assertTrue("'" + chronoField90 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField90.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime92);
        org.junit.Assert.assertTrue("'" + long93 + "' != '" + 3601000000001L + "'", long93 == 3601000000001L);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNotNull(valueRange95);
        org.junit.Assert.assertTrue("'" + temporalUnit96 + "' != '" + java.time.temporal.ChronoUnit.DAYS + "'", temporalUnit96.equals(java.time.temporal.ChronoUnit.DAYS));
    }

    @Test
    public void test1660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1660");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.Duration duration2 = new org.joda.time.Duration(readableInstant0, readableInstant1);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = duration2.toPeriodTo(readableInstant3, periodType4);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.Duration duration8 = new org.joda.time.Duration(readableInstant6, readableInstant7);
        long long9 = duration8.getMillis();
        boolean boolean10 = duration2.isShorterThan((org.joda.time.ReadableDuration) duration8);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) 3, chronology12);
        org.joda.time.DateTime.Property property14 = dateTime13.dayOfYear();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight((java.lang.Object) dateTime13, chronology15);
        org.joda.time.MutableDateTime mutableDateTime17 = dateTime13.toMutableDateTime();
        mutableDateTime17.addYears((int) (short) 100);
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime17.dayOfWeek();
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime17.year();
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime17.weekyear();
        boolean boolean23 = duration2.equals((java.lang.Object) mutableDateTime17);
        mutableDateTime17.addMonths((int) ' ');
        mutableDateTime17.add((long) (byte) 10);
        org.joda.time.Period period28 = org.joda.time.Period.ZERO;
        org.joda.time.Period period29 = period28.normalizedStandard();
        org.joda.time.Period period31 = period28.plusHours(2);
        java.time.chrono.IsoEra isoEra32 = java.time.chrono.IsoEra.CE;
        boolean boolean33 = period31.equals((java.lang.Object) isoEra32);
        int int34 = period31.getMinutes();
        mutableDateTime17.add((org.joda.time.ReadablePeriod) period31);
        java.util.TimeZone timeZone37 = null;
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forTimeZone(timeZone37);
        org.joda.time.DateMidnight dateMidnight39 = new org.joda.time.DateMidnight((long) 1970, dateTimeZone38);
        long long42 = dateTimeZone38.convertLocalToUTC((long) 3, false);
        long long45 = dateTimeZone38.convertLocalToUTC(0L, true);
        mutableDateTime17.setZoneRetainFields(dateTimeZone38);
        java.lang.String str47 = dateTimeZone38.toString();
        org.joda.time.chrono.EthiopicChronology ethiopicChronology48 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone38);
        org.joda.time.DateTimeField dateTimeField49 = ethiopicChronology48.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone50 = ethiopicChronology48.getZone();
        org.joda.time.DateTimeField dateTimeField51 = ethiopicChronology48.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField52 = ethiopicChronology48.minuteOfDay();
        org.joda.time.format.PeriodPrinter periodPrinter54 = null;
        org.joda.time.format.PeriodParser periodParser55 = null;
        org.joda.time.format.PeriodFormatter periodFormatter56 = new org.joda.time.format.PeriodFormatter(periodPrinter54, periodParser55);
        org.joda.time.PeriodType periodType57 = org.joda.time.PeriodType.years();
        org.joda.time.format.PeriodFormatter periodFormatter58 = periodFormatter56.withParseType(periodType57);
        java.util.Locale locale60 = new java.util.Locale("hi!");
        org.joda.time.format.PeriodFormatter periodFormatter61 = periodFormatter56.withLocale(locale60);
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.DateTime dateTime64 = new org.joda.time.DateTime((long) 3, chronology63);
        org.joda.time.DateTime.Property property65 = dateTime64.dayOfYear();
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.DateMidnight dateMidnight67 = new org.joda.time.DateMidnight((java.lang.Object) dateTime64, chronology66);
        org.joda.time.MutableDateTime mutableDateTime68 = dateTime64.toMutableDateTime();
        mutableDateTime68.addYears((int) (short) 100);
        org.joda.time.MutableDateTime.Property property71 = mutableDateTime68.dayOfWeek();
        java.util.Locale locale72 = java.util.Locale.JAPAN;
        int int73 = property71.getMaximumTextLength(locale72);
        java.lang.String str74 = locale60.getDisplayName(locale72);
        java.lang.String str75 = dateTimeField52.getAsText(96000000, locale60);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertTrue("'" + isoEra32 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra32.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 3L + "'", long42 == 3L);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Etc/UTC" + "'", str47, "Etc/UTC");
        org.junit.Assert.assertNotNull(ethiopicChronology48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(periodType57);
        org.junit.Assert.assertNotNull(periodFormatter58);
        org.junit.Assert.assertEquals(locale60.toString(), "hi!");
        org.junit.Assert.assertNotNull(periodFormatter61);
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertNotNull(mutableDateTime68);
        org.junit.Assert.assertNotNull(property71);
        org.junit.Assert.assertNotNull(locale72);
        org.junit.Assert.assertEquals(locale72.toString(), "ja_JP");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 3 + "'", int73 == 3);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "hi!" + "'", str74, "hi!");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "96000000" + "'", str75, "96000000");
    }

    @Test
    public void test1661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1661");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.stream.IntStream intStream3 = java.util.stream.IntStream.rangeClosed(100, (int) '4');
        int[] intArray4 = intStream3.toArray();
        java.util.Calendar.Builder builder5 = builder0.setFields(intArray4);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar.Builder builder7 = builder0.setInstant((long) 624);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intStream3);
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[]");
        org.junit.Assert.assertNotNull(builder5);
    }

    @Test
    public void test1662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1662");
        // The following exception was thrown during execution in test generation
        try {
            java.net.URL uRL3 = new java.net.URL("+09:00", "P1W", "2022-02-21T09:34:15.864Z");
            org.junit.Assert.fail("Expected exception of type java.net.MalformedURLException; message: unknown protocol: +09:00");
        } catch (java.net.MalformedURLException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1663");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.nio.LongBuffer longBuffer3 = java.nio.LongBuffer.allocate((int) (short) 0);
        java.nio.Buffer buffer4 = longBuffer3.mark();
        boolean boolean5 = properties1.containsKey((java.lang.Object) longBuffer3);
        long[] longArray6 = longBuffer3.array();
        java.nio.LongBuffer longBuffer7 = longBuffer3.asReadOnlyBuffer();
        org.junit.Assert.assertNotNull(longBuffer3);
        org.junit.Assert.assertNotNull(buffer4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray6), "[]");
        org.junit.Assert.assertNotNull(longBuffer7);
    }

    @Test
    public void test1664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1664");
        java.security.CodeSource codeSource0 = null;
        java.security.PermissionCollection permissionCollection1 = null;
        java.security.ProtectionDomain protectionDomain2 = new java.security.ProtectionDomain(codeSource0, permissionCollection1);
        java.lang.ClassLoader classLoader3 = protectionDomain2.getClassLoader();
        java.security.CodeSource codeSource4 = null;
        java.security.PermissionCollection permissionCollection5 = null;
        java.security.ProtectionDomain protectionDomain6 = new java.security.ProtectionDomain(codeSource4, permissionCollection5);
        java.security.Permission permission7 = null;
        boolean boolean8 = protectionDomain6.implies(permission7);
        java.security.CodeSource codeSource9 = null;
        java.security.PermissionCollection permissionCollection10 = null;
        java.security.ProtectionDomain protectionDomain11 = new java.security.ProtectionDomain(codeSource9, permissionCollection10);
        java.security.CodeSource codeSource12 = null;
        java.security.PermissionCollection permissionCollection13 = null;
        java.security.ProtectionDomain protectionDomain14 = new java.security.ProtectionDomain(codeSource12, permissionCollection13);
        java.security.ProtectionDomain[] protectionDomainArray15 = new java.security.ProtectionDomain[] { protectionDomain2, protectionDomain6, protectionDomain11, protectionDomain14 };
        java.security.AccessControlContext accessControlContext16 = new java.security.AccessControlContext(protectionDomainArray15);
        javax.security.auth.Subject subject17 = javax.security.auth.Subject.getSubject(accessControlContext16);
        java.security.Permission permission18 = null;
        // The following exception was thrown during execution in test generation
        try {
            accessControlContext16.checkPermission(permission18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: permission can't be null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(protectionDomain2.toString(), "ProtectionDomain  null\n null\n <no principals>\n null\n");
        org.junit.Assert.assertNull(classLoader3);
        org.junit.Assert.assertEquals(protectionDomain6.toString(), "ProtectionDomain  null\n null\n <no principals>\n null\n");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals(protectionDomain11.toString(), "ProtectionDomain  null\n null\n <no principals>\n null\n");
        org.junit.Assert.assertEquals(protectionDomain14.toString(), "ProtectionDomain  null\n null\n <no principals>\n null\n");
        org.junit.Assert.assertNotNull(protectionDomainArray15);
        org.junit.Assert.assertNull(subject17);
    }

    @Test
    public void test1665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1665");
        int int0 = java.util.Spliterator.DISTINCT;
        org.junit.Assert.assertTrue("'" + int0 + "' != '" + 1 + "'", int0 == 1);
    }

    @Test
    public void test1666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1666");
        java.util.stream.DoubleStream doubleStream1 = java.util.stream.DoubleStream.of((double) (short) 1);
        long long2 = doubleStream1.count();
        java.util.function.DoubleBinaryOperator doubleBinaryOperator4 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double5 = doubleStream1.reduce((double) '+', doubleBinaryOperator4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleStream1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
    }

    @Test
    public void test1667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1667");
        java.util.stream.LongStream longStream0 = java.util.stream.LongStream.empty();
        long long1 = longStream0.sum();
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.LongStream longStream2 = longStream0.sorted();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: stream has already been operated upon or closed");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(longStream0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
    }

    @Test
    public void test1668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1668");
        java.time.Month month0 = java.time.Month.JUNE;
        java.time.OffsetDateTime offsetDateTime2 = java.time.OffsetDateTime.now();
        java.time.LocalDate localDate4 = java.time.LocalDate.ofEpochDay((long) ' ');
        int int5 = localDate4.getMonthValue();
        org.joda.time.Period period6 = org.joda.time.Period.ZERO;
        org.joda.time.Period period7 = period6.normalizedStandard();
        org.joda.time.Period period9 = period6.plusHours(2);
        java.time.chrono.IsoEra isoEra10 = java.time.chrono.IsoEra.CE;
        boolean boolean11 = period9.equals((java.lang.Object) isoEra10);
        java.time.LocalTime localTime16 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime17 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime16);
        java.time.LocalTime localTime22 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime23 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime22);
        java.time.temporal.ChronoField chronoField24 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime26 = localTime22.with((java.time.temporal.TemporalField) chronoField24, (long) (short) 1);
        long long27 = localTime16.getLong((java.time.temporal.TemporalField) chronoField24);
        boolean boolean28 = isoEra10.isSupported((java.time.temporal.TemporalField) chronoField24);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery29 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period30 = isoEra10.query(periodTemporalQuery29);
        boolean boolean31 = period30.isNegative();
        java.time.Period period33 = period30.plusDays((long) ' ');
        java.time.temporal.ChronoField chronoField34 = java.time.temporal.ChronoField.SECOND_OF_DAY;
        boolean boolean35 = period30.equals((java.lang.Object) chronoField34);
        boolean boolean36 = localDate4.isSupported((java.time.temporal.TemporalField) chronoField34);
        java.time.temporal.TemporalUnit temporalUnit37 = chronoField34.getRangeUnit();
        java.time.OffsetDateTime offsetDateTime38 = offsetDateTime2.truncatedTo(temporalUnit37);
        java.time.LocalDate localDate41 = java.time.LocalDate.ofEpochDay((long) ' ');
        int int42 = localDate41.getMonthValue();
        org.joda.time.Period period43 = org.joda.time.Period.ZERO;
        org.joda.time.Period period44 = period43.normalizedStandard();
        org.joda.time.Period period46 = period43.plusHours(2);
        java.time.chrono.IsoEra isoEra47 = java.time.chrono.IsoEra.CE;
        boolean boolean48 = period46.equals((java.lang.Object) isoEra47);
        java.time.LocalTime localTime53 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime54 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime53);
        java.time.LocalTime localTime59 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime60 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime59);
        java.time.temporal.ChronoField chronoField61 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime63 = localTime59.with((java.time.temporal.TemporalField) chronoField61, (long) (short) 1);
        long long64 = localTime53.getLong((java.time.temporal.TemporalField) chronoField61);
        boolean boolean65 = isoEra47.isSupported((java.time.temporal.TemporalField) chronoField61);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery66 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period67 = isoEra47.query(periodTemporalQuery66);
        boolean boolean68 = period67.isNegative();
        java.time.Period period70 = period67.plusDays((long) ' ');
        java.time.temporal.ChronoField chronoField71 = java.time.temporal.ChronoField.SECOND_OF_DAY;
        boolean boolean72 = period67.equals((java.lang.Object) chronoField71);
        boolean boolean73 = localDate41.isSupported((java.time.temporal.TemporalField) chronoField71);
        java.time.temporal.TemporalUnit temporalUnit74 = chronoField71.getRangeUnit();
        java.time.OffsetDateTime offsetDateTime75 = offsetDateTime38.minus(8L, temporalUnit74);
        java.time.DayOfWeek dayOfWeek76 = offsetDateTime75.getDayOfWeek();
        java.time.temporal.ChronoField chronoField77 = java.time.temporal.ChronoField.MILLI_OF_SECOND;
        boolean boolean78 = dayOfWeek76.isSupported((java.time.temporal.TemporalField) chronoField77);
        java.time.OffsetTime offsetTime79 = java.time.OffsetTime.MAX;
        java.time.LocalTime localTime80 = offsetTime79.toLocalTime();
        java.time.zone.ZoneOffsetTransitionRule.TimeDefinition timeDefinition82 = java.time.zone.ZoneOffsetTransitionRule.TimeDefinition.WALL;
        java.time.ZoneOffset zoneOffset85 = java.time.ZoneOffset.ofHoursMinutes(1, 10);
        java.time.LocalDate localDate86 = java.time.LocalDate.now((java.time.ZoneId) zoneOffset85);
        java.time.Clock clock87 = java.time.Clock.system((java.time.ZoneId) zoneOffset85);
        java.time.Clock clock88 = java.time.Clock.tickSeconds((java.time.ZoneId) zoneOffset85);
        java.time.ZoneOffset zoneOffset90 = java.time.ZoneOffset.ofHours(9);
        java.lang.String str91 = zoneOffset90.toString();
        java.time.format.DateTimeFormatter dateTimeFormatter92 = java.time.format.DateTimeFormatter.ISO_LOCAL_DATE_TIME;
        java.time.ZoneOffset zoneOffset95 = java.time.ZoneOffset.ofHoursMinutes(1, 10);
        java.time.LocalDate localDate96 = java.time.LocalDate.now((java.time.ZoneId) zoneOffset95);
        java.time.LocalDate localDate97 = java.time.LocalDate.now((java.time.ZoneId) zoneOffset95);
        java.time.format.DateTimeFormatter dateTimeFormatter98 = dateTimeFormatter92.withZone((java.time.ZoneId) zoneOffset95);
        // The following exception was thrown during execution in test generation
        try {
            java.time.zone.ZoneOffsetTransitionRule zoneOffsetTransitionRule99 = java.time.zone.ZoneOffsetTransitionRule.of(month0, (int) '\uffff', dayOfWeek76, localTime80, true, timeDefinition82, zoneOffset85, zoneOffset90, zoneOffset95);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Day of month indicator must be between -28 and 31 inclusive excluding zero");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + month0 + "' != '" + java.time.Month.JUNE + "'", month0.equals(java.time.Month.JUNE));
        org.junit.Assert.assertNotNull(offsetDateTime2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2 + "'", int5 == 2);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertTrue("'" + isoEra10 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra10.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertNotNull(localTime23);
        org.junit.Assert.assertTrue("'" + chronoField24 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField24.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime26);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 3601000000001L + "'", long27 == 3601000000001L);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(periodTemporalQuery29);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertTrue("'" + chronoField34 + "' != '" + java.time.temporal.ChronoField.SECOND_OF_DAY + "'", chronoField34.equals(java.time.temporal.ChronoField.SECOND_OF_DAY));
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + temporalUnit37 + "' != '" + java.time.temporal.ChronoUnit.DAYS + "'", temporalUnit37.equals(java.time.temporal.ChronoUnit.DAYS));
        org.junit.Assert.assertNotNull(offsetDateTime38);
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2 + "'", int42 == 2);
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertTrue("'" + isoEra47 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra47.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(localTime53);
        org.junit.Assert.assertNotNull(localTime54);
        org.junit.Assert.assertNotNull(localTime59);
        org.junit.Assert.assertNotNull(localTime60);
        org.junit.Assert.assertTrue("'" + chronoField61 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField61.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime63);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 3601000000001L + "'", long64 == 3601000000001L);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(periodTemporalQuery66);
        org.junit.Assert.assertNotNull(period67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(period70);
        org.junit.Assert.assertTrue("'" + chronoField71 + "' != '" + java.time.temporal.ChronoField.SECOND_OF_DAY + "'", chronoField71.equals(java.time.temporal.ChronoField.SECOND_OF_DAY));
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + temporalUnit74 + "' != '" + java.time.temporal.ChronoUnit.DAYS + "'", temporalUnit74.equals(java.time.temporal.ChronoUnit.DAYS));
        org.junit.Assert.assertNotNull(offsetDateTime75);
        org.junit.Assert.assertTrue("'" + dayOfWeek76 + "' != '" + java.time.DayOfWeek.SUNDAY + "'", dayOfWeek76.equals(java.time.DayOfWeek.SUNDAY));
        org.junit.Assert.assertTrue("'" + chronoField77 + "' != '" + java.time.temporal.ChronoField.MILLI_OF_SECOND + "'", chronoField77.equals(java.time.temporal.ChronoField.MILLI_OF_SECOND));
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(offsetTime79);
        org.junit.Assert.assertNotNull(localTime80);
        org.junit.Assert.assertTrue("'" + timeDefinition82 + "' != '" + java.time.zone.ZoneOffsetTransitionRule.TimeDefinition.WALL + "'", timeDefinition82.equals(java.time.zone.ZoneOffsetTransitionRule.TimeDefinition.WALL));
        org.junit.Assert.assertNotNull(zoneOffset85);
        org.junit.Assert.assertNotNull(localDate86);
        org.junit.Assert.assertNotNull(clock87);
        org.junit.Assert.assertNotNull(clock88);
        org.junit.Assert.assertNotNull(zoneOffset90);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "+09:00" + "'", str91, "+09:00");
        org.junit.Assert.assertNotNull(dateTimeFormatter92);
        org.junit.Assert.assertNotNull(zoneOffset95);
        org.junit.Assert.assertNotNull(localDate96);
        org.junit.Assert.assertNotNull(localDate97);
        org.junit.Assert.assertNotNull(dateTimeFormatter98);
    }

    @Test
    public void test1669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1669");
        java.time.OffsetTime offsetTime0 = java.time.OffsetTime.MAX;
        java.time.LocalTime localTime1 = offsetTime0.toLocalTime();
        java.lang.String str2 = offsetTime0.toString();
        java.time.Duration duration3 = java.time.Duration.ZERO;
        java.lang.String str4 = duration3.toString();
        java.time.OffsetTime offsetTime5 = offsetTime0.plus((java.time.temporal.TemporalAmount) duration3);
        java.time.OffsetTime offsetTime7 = offsetTime0.plusNanos((long) 0);
        java.time.LocalTime localTime12 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime13 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime12);
        java.time.temporal.ChronoField chronoField14 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime16 = localTime12.with((java.time.temporal.TemporalField) chronoField14, (long) (short) 1);
        java.util.Locale locale17 = java.util.Locale.GERMANY;
        java.lang.String str18 = chronoField14.getDisplayName(locale17);
        java.time.OffsetTime offsetTime20 = offsetTime7.with((java.time.temporal.TemporalField) chronoField14, (long) 28);
        org.joda.time.Period period21 = org.joda.time.Period.ZERO;
        org.joda.time.Period period22 = period21.normalizedStandard();
        org.joda.time.Period period24 = period21.plusHours(2);
        java.time.chrono.IsoEra isoEra25 = java.time.chrono.IsoEra.CE;
        boolean boolean26 = period24.equals((java.lang.Object) isoEra25);
        java.time.LocalTime localTime31 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime32 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime31);
        java.time.LocalTime localTime37 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime38 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime37);
        java.time.temporal.ChronoField chronoField39 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime41 = localTime37.with((java.time.temporal.TemporalField) chronoField39, (long) (short) 1);
        long long42 = localTime31.getLong((java.time.temporal.TemporalField) chronoField39);
        boolean boolean43 = isoEra25.isSupported((java.time.temporal.TemporalField) chronoField39);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery44 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period45 = isoEra25.query(periodTemporalQuery44);
        boolean boolean46 = period45.isNegative();
        java.time.Period period48 = period45.plusDays((long) ' ');
        java.time.temporal.ChronoField chronoField49 = java.time.temporal.ChronoField.SECOND_OF_DAY;
        boolean boolean50 = period45.equals((java.lang.Object) chronoField49);
        java.time.chrono.ChronoPeriod chronoPeriod51 = period45.negated();
        java.time.OffsetTime offsetTime52 = offsetTime7.minus((java.time.temporal.TemporalAmount) period45);
        java.time.Period period54 = period45.plusYears((long) 2022);
        java.time.Period period56 = period54.minusDays((long) (short) 100);
        java.time.Period period57 = java.time.Period.from((java.time.temporal.TemporalAmount) period56);
        int int58 = period56.getYears();
        org.junit.Assert.assertNotNull(offsetTime0);
        org.junit.Assert.assertNotNull(localTime1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "23:59:59.999999999-18:00" + "'", str2, "23:59:59.999999999-18:00");
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "PT0S" + "'", str4, "PT0S");
        org.junit.Assert.assertNotNull(offsetTime5);
        org.junit.Assert.assertNotNull(offsetTime7);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertTrue("'" + chronoField14 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField14.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "NanoOfDay" + "'", str18, "NanoOfDay");
        org.junit.Assert.assertNotNull(offsetTime20);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertTrue("'" + isoEra25 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra25.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(localTime31);
        org.junit.Assert.assertNotNull(localTime32);
        org.junit.Assert.assertNotNull(localTime37);
        org.junit.Assert.assertNotNull(localTime38);
        org.junit.Assert.assertTrue("'" + chronoField39 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField39.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime41);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 3601000000001L + "'", long42 == 3601000000001L);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(periodTemporalQuery44);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(period48);
        org.junit.Assert.assertTrue("'" + chronoField49 + "' != '" + java.time.temporal.ChronoField.SECOND_OF_DAY + "'", chronoField49.equals(java.time.temporal.ChronoField.SECOND_OF_DAY));
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(chronoPeriod51);
        org.junit.Assert.assertNotNull(offsetTime52);
        org.junit.Assert.assertNotNull(period54);
        org.junit.Assert.assertNotNull(period56);
        org.junit.Assert.assertNotNull(period57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 2022 + "'", int58 == 2022);
    }

    @Test
    public void test1670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1670");
        org.joda.time.TimeOfDay timeOfDay1 = org.joda.time.TimeOfDay.fromMillisOfDay((long) (short) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = timeOfDay1.getFieldType((int) (short) 0);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.LocalTime localTime6 = new org.joda.time.LocalTime((long) 0, chronology5);
        org.joda.time.Chronology chronology7 = localTime6.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.weekyearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime9 = org.joda.time.MutableDateTime.now(chronology7);
        org.joda.time.TimeOfDay timeOfDay10 = timeOfDay1.withChronologyRetainFields(chronology7);
        int int11 = timeOfDay1.getMillisOfSecond();
        org.joda.time.TimeOfDay.Property property12 = timeOfDay1.secondOfMinute();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray13 = timeOfDay1.getFieldTypes();
        org.junit.Assert.assertNotNull(timeOfDay1);
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray13);
    }

    @Test
    public void test1671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1671");
        java.util.stream.DoubleStream doubleStream0 = java.util.stream.DoubleStream.empty();
        java.util.function.DoublePredicate doublePredicate1 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean2 = doubleStream0.allMatch(doublePredicate1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleStream0);
    }

    @Test
    public void test1672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1672");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.parse("halfdays", dateTimeFormatter1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1673");
        java.nio.file.attribute.FileTime fileTime1 = java.nio.file.attribute.FileTime.fromMillis((long) 2147483647);
        org.junit.Assert.assertNotNull(fileTime1);
    }

    @Test
    public void test1674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1674");
        org.joda.time.Interval interval2 = new org.joda.time.Interval(100L, (long) 1970);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.Duration duration5 = new org.joda.time.Duration(readableInstant3, readableInstant4);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.PeriodType periodType7 = null;
        org.joda.time.Period period8 = duration5.toPeriodTo(readableInstant6, periodType7);
        long long9 = duration5.getStandardSeconds();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) 3, chronology11);
        org.joda.time.DateTime.Property property13 = dateTime12.dayOfYear();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight((java.lang.Object) dateTime12, chronology14);
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight15.minusMonths((-1));
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight15.withDayOfYear((int) ' ');
        org.joda.time.Interval interval20 = duration5.toIntervalTo((org.joda.time.ReadableInstant) dateMidnight19);
        org.joda.time.DateMidnight dateMidnight22 = dateMidnight19.withDayOfYear((int) (short) 100);
        boolean boolean23 = interval2.isBefore((org.joda.time.ReadableInstant) dateMidnight19);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((long) 3, chronology25);
        org.joda.time.DateTime.Property property27 = dateTime26.dayOfYear();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateMidnight dateMidnight29 = new org.joda.time.DateMidnight((java.lang.Object) dateTime26, chronology28);
        org.joda.time.DateMidnight.Property property30 = dateMidnight29.dayOfMonth();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((long) 3, chronology32);
        org.joda.time.DateTime.Property property34 = dateTime33.dayOfYear();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.DateMidnight dateMidnight36 = new org.joda.time.DateMidnight((java.lang.Object) dateTime33, chronology35);
        org.joda.time.DateMidnight dateMidnight38 = dateMidnight36.minusMonths((-1));
        org.joda.time.DateMidnight dateMidnight40 = dateMidnight36.withDayOfYear((int) ' ');
        org.joda.time.Weeks weeks41 = org.joda.time.Weeks.weeksBetween((org.joda.time.ReadableInstant) dateMidnight29, (org.joda.time.ReadableInstant) dateMidnight40);
        org.joda.time.DateMidnight.Property property42 = dateMidnight29.year();
        org.joda.time.DateMidnight dateMidnight43 = property42.roundHalfEvenCopy();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval44 = interval2.withEnd((org.joda.time.ReadableInstant) dateMidnight43);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(dateMidnight38);
        org.junit.Assert.assertNotNull(dateMidnight40);
        org.junit.Assert.assertNotNull(weeks41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(dateMidnight43);
    }

    @Test
    public void test1675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1675");
        java.security.GeneralSecurityException generalSecurityException2 = new java.security.GeneralSecurityException("");
        java.security.cert.CertificateEncodingException certificateEncodingException3 = new java.security.cert.CertificateEncodingException("599b081c1808", (java.lang.Throwable) generalSecurityException2);
    }

    @Test
    public void test1676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1676");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Locale locale3 = java.util.Locale.JAPAN;
        java.util.Locale[] localeArray4 = new java.util.Locale[] { locale3 };
        java.util.ArrayList<java.util.Locale> localeList5 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList5, localeArray4);
        java.util.List<java.util.Locale> localeList7 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.util.Locale>) localeList5);
        // The following exception was thrown during execution in test generation
        try {
            java.util.ListIterator<java.util.Locale> localeItor9 = localeList5.listIterator((int) '\uffff');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 65535");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(localeArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(localeList7);
    }

    @Test
    public void test1677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1677");
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.fromMillisOfDay(86400000L);
        org.junit.Assert.assertNotNull(localTime1);
    }

    @Test
    public void test1678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1678");
        java.util.stream.DoubleStream doubleStream0 = java.util.stream.DoubleStream.empty();
        java.util.stream.DoubleStream doubleStream2 = doubleStream0.skip(0L);
        java.util.OptionalDouble optionalDouble3 = doubleStream0.average();
        // The following exception was thrown during execution in test generation
        try {
            java.util.OptionalDouble optionalDouble4 = doubleStream0.findAny();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: stream has already been operated upon or closed");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleStream0);
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertNotNull(optionalDouble3);
    }

    @Test
    public void test1679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1679");
        // The following exception was thrown during execution in test generation
        try {
            java.time.Instant instant1 = java.time.Instant.parse((java.lang.CharSequence) "96000000");
            org.junit.Assert.fail("Expected exception of type java.time.format.DateTimeParseException; message: Text '96000000' could not be parsed at index 0");
        } catch (java.time.format.DateTimeParseException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1680");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((long) 0, chronology1);
        org.joda.time.LocalTime localTime4 = localTime2.minusMillis(2022);
        org.joda.time.LocalTime localTime6 = localTime2.plusMillis((int) (byte) 0);
        int int7 = localTime6.getMillisOfDay();
        java.util.TimeZone timeZone12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone12);
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight((long) 1970, dateTimeZone13);
        long long17 = dateTimeZone13.convertLocalToUTC((long) 3, false);
        org.joda.time.Interval interval18 = new org.joda.time.Interval(10L, (long) 2097, dateTimeZone13);
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(dateTimeZone13);
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight(28L, dateTimeZone13);
        org.joda.time.DateTime dateTime21 = localTime6.toDateTimeToday(dateTimeZone13);
        org.joda.time.Period period23 = org.joda.time.Period.hours((int) (short) 1);
        org.joda.time.DateTime dateTime24 = dateTime21.minus((org.joda.time.ReadablePeriod) period23);
        org.joda.time.DateTime dateTime26 = dateTime21.plusYears((int) 'a');
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 3L + "'", long17 == 3L);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
    }

    @Test
    public void test1681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1681");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(25, 52, (int) 'x', 6, 86, 574, 35);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 86 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1682");
        java.lang.String[] strArray2 = new java.lang.String[] { "halfdays", "Optional.empty" };
        java.util.ArrayList<java.lang.String> strList3 = new java.util.ArrayList<java.lang.String>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList3, strArray2);
        java.util.Iterator<java.lang.String> strItor5 = strList3.iterator();
        boolean boolean6 = strItor5.hasNext();
        java.lang.String str7 = strItor5.next();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(strItor5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "halfdays" + "'", str7, "halfdays");
    }

    @Test
    public void test1683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1683");
        java.util.TimeZone timeZone1 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        java.util.TimeZone timeZone4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forTimeZone(timeZone4);
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight((long) 1970, dateTimeZone5);
        long long9 = dateTimeZone5.convertLocalToUTC((long) 3, false);
        long long11 = dateTimeZone2.getMillisKeepLocal(dateTimeZone5, (long) ':');
        long long14 = dateTimeZone2.adjustOffset(0L, false);
        org.joda.time.LocalTime localTime15 = new org.joda.time.LocalTime((long) 0, dateTimeZone2);
        long long18 = dateTimeZone2.convertLocalToUTC(624L, true);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 3L + "'", long9 == 3L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 58L + "'", long11 == 58L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 624L + "'", long18 == 624L);
    }

    @Test
    public void test1684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1684");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.Duration duration2 = new org.joda.time.Duration(readableInstant0, readableInstant1);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = duration2.toPeriodTo(readableInstant3, periodType4);
        long long6 = duration2.getStandardSeconds();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 3, chronology8);
        org.joda.time.DateTime.Property property10 = dateTime9.dayOfYear();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight((java.lang.Object) dateTime9, chronology11);
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight12.minusMonths((-1));
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight12.withDayOfYear((int) ' ');
        org.joda.time.Interval interval17 = duration2.toIntervalTo((org.joda.time.ReadableInstant) dateMidnight16);
        org.joda.time.DateMidnight.Property property18 = dateMidnight16.dayOfYear();
        org.joda.time.DateMidnight dateMidnight20 = property18.addToCopy(22);
        int int21 = dateMidnight20.getDayOfWeek();
        int int22 = dateMidnight20.getDayOfMonth();
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 23 + "'", int22 == 23);
    }

    @Test
    public void test1685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1685");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.now();
        java.time.LocalDateTime localDateTime2 = localDateTime0.minusYears((long) (byte) 10);
        java.time.LocalDateTime localDateTime3 = java.time.LocalDateTime.now();
        java.time.LocalDateTime localDateTime5 = localDateTime3.minusYears((long) (byte) 10);
        boolean boolean6 = localDateTime0.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime5);
        java.time.temporal.ChronoField chronoField7 = java.time.temporal.ChronoField.MICRO_OF_DAY;
        java.time.LocalTime localTime12 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime13 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime12);
        java.time.LocalTime localTime18 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime19 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime18);
        java.time.temporal.ChronoField chronoField20 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime22 = localTime18.with((java.time.temporal.TemporalField) chronoField20, (long) (short) 1);
        long long23 = localTime12.getLong((java.time.temporal.TemporalField) chronoField20);
        java.time.LocalTime localTime25 = chronoField7.adjustInto(localTime12, (long) (byte) 1);
        boolean boolean26 = localDateTime0.isSupported((java.time.temporal.TemporalField) chronoField7);
        java.time.Instant instant27 = java.time.Instant.now();
        java.time.Instant instant28 = java.time.Instant.now();
        boolean boolean29 = instant27.isAfter(instant28);
        java.time.LocalDate localDate31 = java.time.LocalDate.ofEpochDay((long) ' ');
        int int32 = localDate31.getMonthValue();
        org.joda.time.Period period33 = org.joda.time.Period.ZERO;
        org.joda.time.Period period34 = period33.normalizedStandard();
        org.joda.time.Period period36 = period33.plusHours(2);
        java.time.chrono.IsoEra isoEra37 = java.time.chrono.IsoEra.CE;
        boolean boolean38 = period36.equals((java.lang.Object) isoEra37);
        java.time.LocalTime localTime43 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime44 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime43);
        java.time.LocalTime localTime49 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime50 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime49);
        java.time.temporal.ChronoField chronoField51 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime53 = localTime49.with((java.time.temporal.TemporalField) chronoField51, (long) (short) 1);
        long long54 = localTime43.getLong((java.time.temporal.TemporalField) chronoField51);
        boolean boolean55 = isoEra37.isSupported((java.time.temporal.TemporalField) chronoField51);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery56 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period57 = isoEra37.query(periodTemporalQuery56);
        boolean boolean58 = period57.isNegative();
        java.time.Period period60 = period57.plusDays((long) ' ');
        java.time.temporal.ChronoField chronoField61 = java.time.temporal.ChronoField.SECOND_OF_DAY;
        boolean boolean62 = period57.equals((java.lang.Object) chronoField61);
        boolean boolean63 = localDate31.isSupported((java.time.temporal.TemporalField) chronoField61);
        java.time.temporal.TemporalUnit temporalUnit64 = chronoField61.getRangeUnit();
        java.time.Instant instant65 = instant28.truncatedTo(temporalUnit64);
        int int66 = instant65.getNano();
        java.time.OffsetDateTime offsetDateTime67 = java.time.OffsetDateTime.now();
        java.time.LocalDate localDate68 = offsetDateTime67.toLocalDate();
        java.time.OffsetDateTime offsetDateTime69 = java.time.OffsetDateTime.now();
        java.time.LocalDate localDate70 = offsetDateTime69.toLocalDate();
        java.time.OffsetDateTime offsetDateTime71 = java.time.OffsetDateTime.now();
        java.time.temporal.ChronoField chronoField72 = java.time.temporal.ChronoField.HOUR_OF_DAY;
        boolean boolean73 = offsetDateTime71.isSupported((java.time.temporal.TemporalField) chronoField72);
        boolean boolean74 = offsetDateTime69.isEqual(offsetDateTime71);
        java.lang.String str75 = offsetDateTime71.toString();
        boolean boolean76 = offsetDateTime67.isAfter(offsetDateTime71);
        java.time.chrono.IsoEra isoEra77 = java.time.chrono.IsoEra.CE;
        java.time.format.DateTimeFormatter dateTimeFormatter78 = java.time.format.DateTimeFormatter.ISO_DATE;
        java.lang.String str79 = dateTimeFormatter78.toString();
        java.time.LocalDateTime localDateTime80 = java.time.LocalDateTime.now();
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery81 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period82 = localDateTime80.query(periodTemporalQuery81);
        java.text.Format format83 = dateTimeFormatter78.toFormat(periodTemporalQuery81);
        java.time.Period period84 = isoEra77.query(periodTemporalQuery81);
        java.time.Period period85 = offsetDateTime67.query(periodTemporalQuery81);
        java.time.Period period86 = instant65.query(periodTemporalQuery81);
        java.time.Period period87 = localDateTime0.query(periodTemporalQuery81);
        java.time.LocalDateTime localDateTime88 = java.time.LocalDateTime.now();
        java.time.LocalDateTime localDateTime90 = localDateTime88.minusYears((long) (byte) 10);
        java.time.LocalDateTime localDateTime91 = java.time.LocalDateTime.now();
        java.time.LocalDateTime localDateTime93 = localDateTime91.minusYears((long) (byte) 10);
        boolean boolean94 = localDateTime88.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime93);
        java.time.LocalDateTime localDateTime96 = localDateTime93.withSecond((int) '+');
        java.time.chrono.Chronology chronology97 = localDateTime93.getChronology();
        java.time.temporal.Temporal temporal98 = period87.addTo((java.time.temporal.Temporal) localDateTime93);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + chronoField7 + "' != '" + java.time.temporal.ChronoField.MICRO_OF_DAY + "'", chronoField7.equals(java.time.temporal.ChronoField.MICRO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertTrue("'" + chronoField20 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField20.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 3601000000001L + "'", long23 == 3601000000001L);
        org.junit.Assert.assertNotNull(localTime25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(instant27);
        org.junit.Assert.assertNotNull(instant28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2 + "'", int32 == 2);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertTrue("'" + isoEra37 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra37.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(localTime43);
        org.junit.Assert.assertNotNull(localTime44);
        org.junit.Assert.assertNotNull(localTime49);
        org.junit.Assert.assertNotNull(localTime50);
        org.junit.Assert.assertTrue("'" + chronoField51 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField51.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime53);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 3601000000001L + "'", long54 == 3601000000001L);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(periodTemporalQuery56);
        org.junit.Assert.assertNotNull(period57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(period60);
        org.junit.Assert.assertTrue("'" + chronoField61 + "' != '" + java.time.temporal.ChronoField.SECOND_OF_DAY + "'", chronoField61.equals(java.time.temporal.ChronoField.SECOND_OF_DAY));
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + temporalUnit64 + "' != '" + java.time.temporal.ChronoUnit.DAYS + "'", temporalUnit64.equals(java.time.temporal.ChronoUnit.DAYS));
        org.junit.Assert.assertNotNull(instant65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(offsetDateTime67);
        org.junit.Assert.assertNotNull(localDate68);
        org.junit.Assert.assertNotNull(offsetDateTime69);
        org.junit.Assert.assertNotNull(localDate70);
        org.junit.Assert.assertNotNull(offsetDateTime71);
        org.junit.Assert.assertTrue("'" + chronoField72 + "' != '" + java.time.temporal.ChronoField.HOUR_OF_DAY + "'", chronoField72.equals(java.time.temporal.ChronoField.HOUR_OF_DAY));
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str75 + "' != '" + "2022-02-21T09:36:47.334Z" + "'", str75, "2022-02-21T09:36:47.334Z");
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + isoEra77 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra77.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertNotNull(dateTimeFormatter78);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "ParseCaseSensitive(false)(Value(Year,4,10,EXCEEDS_PAD)'-'Value(MonthOfYear,2)'-'Value(DayOfMonth,2))[Offset(+HH:MM:ss,'Z')]" + "'", str79, "ParseCaseSensitive(false)(Value(Year,4,10,EXCEEDS_PAD)'-'Value(MonthOfYear,2)'-'Value(DayOfMonth,2))[Offset(+HH:MM:ss,'Z')]");
        org.junit.Assert.assertNotNull(localDateTime80);
        org.junit.Assert.assertNotNull(periodTemporalQuery81);
        org.junit.Assert.assertNotNull(period82);
        org.junit.Assert.assertNotNull(format83);
        org.junit.Assert.assertNotNull(period84);
        org.junit.Assert.assertNotNull(period85);
        org.junit.Assert.assertNotNull(period86);
        org.junit.Assert.assertNotNull(period87);
        org.junit.Assert.assertNotNull(localDateTime88);
        org.junit.Assert.assertNotNull(localDateTime90);
        org.junit.Assert.assertNotNull(localDateTime91);
        org.junit.Assert.assertNotNull(localDateTime93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNotNull(localDateTime96);
        org.junit.Assert.assertNotNull(chronology97);
        org.junit.Assert.assertNotNull(temporal98);
    }

    @Test
    public void test1686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1686");
        java.io.UnsupportedEncodingException unsupportedEncodingException1 = new java.io.UnsupportedEncodingException("PT3600S");
    }

    @Test
    public void test1687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1687");
        java.io.OutputStream outputStream0 = null;
        java.io.FilterOutputStream filterOutputStream1 = new java.io.FilterOutputStream(outputStream0);
        java.io.PrintStream printStream3 = new java.io.PrintStream((java.io.OutputStream) filterOutputStream1, false);
        char[] charArray4 = new char[] {};
        java.nio.CharBuffer charBuffer5 = java.nio.CharBuffer.wrap(charArray4);
        printStream3.print(charArray4);
        // The following exception was thrown during execution in test generation
        try {
            printStream3.flush();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray4);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray4), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray4), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray4), "[]");
        org.junit.Assert.assertNotNull(charBuffer5);
    }

    @Test
    public void test1688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1688");
        java.util.GregorianCalendar gregorianCalendar5 = new java.util.GregorianCalendar(12, 4096, 7, (-1), (int) (short) 10);
        int int6 = gregorianCalendar5.getWeeksInWeekYear();
        java.util.TimeZone timeZone7 = gregorianCalendar5.getTimeZone();
        java.time.ZoneId zoneId8 = timeZone7.toZoneId();
        java.time.zone.ZoneRules zoneRules9 = zoneId8.getRules();
        java.time.Instant instant10 = java.time.Instant.now();
        java.time.Instant instant11 = java.time.Instant.now();
        boolean boolean12 = instant10.isAfter(instant11);
        java.time.LocalDate localDate14 = java.time.LocalDate.ofEpochDay((long) ' ');
        int int15 = localDate14.getMonthValue();
        org.joda.time.Period period16 = org.joda.time.Period.ZERO;
        org.joda.time.Period period17 = period16.normalizedStandard();
        org.joda.time.Period period19 = period16.plusHours(2);
        java.time.chrono.IsoEra isoEra20 = java.time.chrono.IsoEra.CE;
        boolean boolean21 = period19.equals((java.lang.Object) isoEra20);
        java.time.LocalTime localTime26 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime27 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime26);
        java.time.LocalTime localTime32 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime33 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime32);
        java.time.temporal.ChronoField chronoField34 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime36 = localTime32.with((java.time.temporal.TemporalField) chronoField34, (long) (short) 1);
        long long37 = localTime26.getLong((java.time.temporal.TemporalField) chronoField34);
        boolean boolean38 = isoEra20.isSupported((java.time.temporal.TemporalField) chronoField34);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery39 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period40 = isoEra20.query(periodTemporalQuery39);
        boolean boolean41 = period40.isNegative();
        java.time.Period period43 = period40.plusDays((long) ' ');
        java.time.temporal.ChronoField chronoField44 = java.time.temporal.ChronoField.SECOND_OF_DAY;
        boolean boolean45 = period40.equals((java.lang.Object) chronoField44);
        boolean boolean46 = localDate14.isSupported((java.time.temporal.TemporalField) chronoField44);
        java.time.temporal.TemporalUnit temporalUnit47 = chronoField44.getRangeUnit();
        java.time.Instant instant48 = instant11.truncatedTo(temporalUnit47);
        java.time.ZoneOffset zoneOffset51 = java.time.ZoneOffset.ofHoursMinutes(1, 10);
        java.time.LocalDate localDate52 = java.time.LocalDate.now((java.time.ZoneId) zoneOffset51);
        java.time.ZonedDateTime zonedDateTime53 = java.time.ZonedDateTime.ofInstant(instant48, (java.time.ZoneId) zoneOffset51);
        java.time.Instant instant55 = instant48.minusMillis(0L);
        java.time.ZoneOffset zoneOffset56 = zoneRules9.getStandardOffset(instant48);
        boolean boolean57 = zoneRules9.isFixedOffset();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 52 + "'", int6 == 52);
        org.junit.Assert.assertNotNull(timeZone7);
        org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(zoneId8);
        org.junit.Assert.assertNotNull(zoneRules9);
        org.junit.Assert.assertNotNull(instant10);
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2 + "'", int15 == 2);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertTrue("'" + isoEra20 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra20.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(localTime26);
        org.junit.Assert.assertNotNull(localTime27);
        org.junit.Assert.assertNotNull(localTime32);
        org.junit.Assert.assertNotNull(localTime33);
        org.junit.Assert.assertTrue("'" + chronoField34 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField34.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime36);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 3601000000001L + "'", long37 == 3601000000001L);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(periodTemporalQuery39);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertTrue("'" + chronoField44 + "' != '" + java.time.temporal.ChronoField.SECOND_OF_DAY + "'", chronoField44.equals(java.time.temporal.ChronoField.SECOND_OF_DAY));
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + temporalUnit47 + "' != '" + java.time.temporal.ChronoUnit.DAYS + "'", temporalUnit47.equals(java.time.temporal.ChronoUnit.DAYS));
        org.junit.Assert.assertNotNull(instant48);
        org.junit.Assert.assertNotNull(zoneOffset51);
        org.junit.Assert.assertNotNull(localDate52);
        org.junit.Assert.assertNotNull(zonedDateTime53);
        org.junit.Assert.assertNotNull(instant55);
        org.junit.Assert.assertNotNull(zoneOffset56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
    }

    @Test
    public void test1689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1689");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 3, chronology1);
        org.joda.time.DateTime.Property property3 = dateTime2.dayOfYear();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight((java.lang.Object) dateTime2, chronology4);
        org.joda.time.DateMidnight.Property property6 = dateMidnight5.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight7 = property6.roundCeilingCopy();
        org.joda.time.DateMidnight dateMidnight8 = property6.roundHalfFloorCopy();
        org.joda.time.DateMidnight dateMidnight10 = property6.addWrapFieldToCopy((int) 'x');
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(dateMidnight10);
    }

    @Test
    public void test1690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1690");
        java.io.File file0 = null;
        java.io.File file2 = new java.io.File(file0, "1970-01-01T00:00:00.003Z");
        java.net.URL uRL3 = file2.toURL();
        boolean boolean4 = file2.canRead();
        boolean boolean5 = file2.isHidden();
        org.junit.Assert.assertNull("file2.getParent() == null", file2.getParent());
        org.junit.Assert.assertEquals(file2.toString(), "1970-01-01T00:00:00.003Z");
        org.junit.Assert.assertNotNull(uRL3);
// flaky:         org.junit.Assert.assertEquals(uRL3.toString(), "file:/experiment/1970-01-01T00:00:00.003Z/");
// flaky:         org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test1691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1691");
        java.util.Set<java.lang.String> strSet0 = java.time.ZoneId.getAvailableZoneIds();
        java.util.stream.Stream<java.lang.String> strStream1 = strSet0.parallelStream();
        boolean boolean3 = strSet0.contains((java.lang.Object) 1.0d);
        java.util.Spliterator<java.lang.String> strSpliterator4 = strSet0.spliterator();
        org.junit.Assert.assertNotNull(strSet0);
        org.junit.Assert.assertNotNull(strStream1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(strSpliterator4);
    }

    @Test
    public void test1692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1692");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 3, chronology1);
        org.joda.time.DateTime.Property property3 = dateTime2.dayOfYear();
        org.joda.time.Interval interval4 = property3.toInterval();
        org.joda.time.DateTimeField dateTimeField5 = property3.getField();
        org.joda.time.DateTime dateTime7 = property3.addToCopy((long) (byte) 1);
        org.joda.time.DateTime dateTime9 = dateTime7.withYear(4);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) 3, chronology11);
        org.joda.time.Period period13 = org.joda.time.Period.ZERO;
        org.joda.time.Period period14 = period13.normalizedStandard();
        org.joda.time.Period period16 = period14.minusMinutes((int) ' ');
        org.joda.time.Period period18 = period16.minusMonths((int) (byte) 0);
        org.joda.time.PeriodType periodType19 = period18.getPeriodType();
        org.joda.time.DateTime dateTime20 = dateTime12.minus((org.joda.time.ReadablePeriod) period18);
        org.joda.time.Duration duration21 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.LocalTime localTime24 = new org.joda.time.LocalTime((long) 0, chronology23);
        org.joda.time.Chronology chronology25 = localTime24.getChronology();
        org.joda.time.DateTimeField dateTimeField26 = chronology25.weekyearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime27 = org.joda.time.MutableDateTime.now(chronology25);
        mutableDateTime27.setWeekOfWeekyear((int) '#');
        mutableDateTime27.addHours(0);
        boolean boolean32 = dateTime20.isBefore((org.joda.time.ReadableInstant) mutableDateTime27);
        int int33 = mutableDateTime27.getDayOfYear();
        java.util.stream.Stream<org.joda.time.ReadableInstant> readableInstantStream34 = java.util.stream.Stream.of((org.joda.time.ReadableInstant) mutableDateTime27);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(periodType19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(mutableDateTime27);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 241 + "'", int33 == 241);
        org.junit.Assert.assertNotNull(readableInstantStream34);
    }

    @Test
    public void test1693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1693");
        java.security.CodeSource codeSource0 = null;
        java.security.PermissionCollection permissionCollection1 = null;
        java.lang.ClassLoader classLoader2 = null;
        java.security.Principal[] principalArray3 = null;
        java.security.ProtectionDomain protectionDomain4 = new java.security.ProtectionDomain(codeSource0, permissionCollection1, classLoader2, principalArray3);
        java.security.PermissionCollection permissionCollection5 = protectionDomain4.getPermissions();
        org.junit.Assert.assertEquals(protectionDomain4.toString(), "ProtectionDomain  null\n null\n <no principals>\n null\n");
        org.junit.Assert.assertNull(permissionCollection5);
    }

    @Test
    public void test1694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1694");
        java.time.Clock clock0 = java.time.Clock.systemUTC();
        java.time.Duration duration2 = java.time.Duration.ofSeconds((long) 256);
        java.time.Clock clock3 = java.time.Clock.tick(clock0, duration2);
        java.time.Duration duration5 = java.time.Duration.ofMinutes((long) 3);
        java.time.Duration duration6 = duration5.abs();
        java.time.Clock clock7 = java.time.Clock.offset(clock0, duration5);
        java.time.LocalDate localDate8 = java.time.LocalDate.now(clock7);
        java.time.LocalDate localDate10 = java.time.LocalDate.ofEpochDay((long) ' ');
        java.time.OffsetTime offsetTime11 = java.time.OffsetTime.MAX;
        java.time.LocalTime localTime12 = offsetTime11.toLocalTime();
        java.lang.String str13 = offsetTime11.toString();
        java.time.Duration duration14 = java.time.Duration.ZERO;
        java.lang.String str15 = duration14.toString();
        java.time.OffsetTime offsetTime16 = offsetTime11.plus((java.time.temporal.TemporalAmount) duration14);
        java.time.LocalTime localTime17 = offsetTime11.toLocalTime();
        java.time.chrono.ChronoLocalDateTime<?> wildcardChronoLocalDateTime18 = localDate10.atTime(localTime17);
        java.time.LocalDate localDate20 = localDate10.minusWeeks((long) 2097);
        java.time.OffsetTime offsetTime21 = java.time.OffsetTime.MAX;
        java.time.LocalTime localTime22 = offsetTime21.toLocalTime();
        java.lang.String str23 = offsetTime21.toString();
        java.time.Duration duration24 = java.time.Duration.ZERO;
        java.lang.String str25 = duration24.toString();
        java.time.OffsetTime offsetTime26 = offsetTime21.plus((java.time.temporal.TemporalAmount) duration24);
        java.time.OffsetTime offsetTime28 = offsetTime21.plusNanos((long) 0);
        java.time.LocalTime localTime33 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime34 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime33);
        java.time.temporal.ChronoField chronoField35 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime37 = localTime33.with((java.time.temporal.TemporalField) chronoField35, (long) (short) 1);
        java.util.Locale locale38 = java.util.Locale.GERMANY;
        java.lang.String str39 = chronoField35.getDisplayName(locale38);
        java.time.OffsetTime offsetTime41 = offsetTime28.with((java.time.temporal.TemporalField) chronoField35, (long) 28);
        java.time.OffsetDateTime offsetDateTime42 = localDate20.atTime(offsetTime28);
        int int43 = localDate20.getYear();
        boolean boolean44 = localDate8.isBefore((java.time.chrono.ChronoLocalDate) localDate20);
        java.time.LocalTime localTime46 = java.time.LocalTime.ofNanoOfDay(1645401600000L);
        java.time.LocalDateTime localDateTime47 = java.time.LocalDateTime.of(localDate20, localTime46);
        int int48 = localDate20.lengthOfMonth();
        org.junit.Assert.assertNotNull(clock0);
        org.junit.Assert.assertNotNull(duration2);
        org.junit.Assert.assertNotNull(clock3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(clock7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(offsetTime11);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "23:59:59.999999999-18:00" + "'", str13, "23:59:59.999999999-18:00");
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "PT0S" + "'", str15, "PT0S");
        org.junit.Assert.assertNotNull(offsetTime16);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(wildcardChronoLocalDateTime18);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(offsetTime21);
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "23:59:59.999999999-18:00" + "'", str23, "23:59:59.999999999-18:00");
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "PT0S" + "'", str25, "PT0S");
        org.junit.Assert.assertNotNull(offsetTime26);
        org.junit.Assert.assertNotNull(offsetTime28);
        org.junit.Assert.assertNotNull(localTime33);
        org.junit.Assert.assertNotNull(localTime34);
        org.junit.Assert.assertTrue("'" + chronoField35 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField35.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime37);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "NanoOfDay" + "'", str39, "NanoOfDay");
        org.junit.Assert.assertNotNull(offsetTime41);
        org.junit.Assert.assertNotNull(offsetDateTime42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1929 + "'", int43 == 1929);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(localTime46);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 30 + "'", int48 == 30);
    }

    @Test
    public void test1695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1695");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 3, chronology1);
        org.joda.time.DateTime.Property property3 = dateTime2.dayOfYear();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight((java.lang.Object) dateTime2, chronology4);
        org.joda.time.MutableDateTime mutableDateTime6 = dateTime2.toMutableDateTime();
        boolean boolean7 = mutableDateTime6.isBeforeNow();
        mutableDateTime6.addYears(4200);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
    }

    @Test
    public void test1696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1696");
        java.util.LongSummaryStatistics longSummaryStatistics0 = new java.util.LongSummaryStatistics();
        java.util.LongSummaryStatistics longSummaryStatistics1 = new java.util.LongSummaryStatistics();
        longSummaryStatistics1.accept(3);
        long long4 = longSummaryStatistics1.getMax();
        java.util.LongSummaryStatistics longSummaryStatistics5 = new java.util.LongSummaryStatistics();
        longSummaryStatistics5.accept(3);
        java.util.function.LongConsumer longConsumer8 = longSummaryStatistics1.andThen((java.util.function.LongConsumer) longSummaryStatistics5);
        long long9 = longSummaryStatistics1.getMin();
        java.util.function.IntConsumer intConsumer10 = longSummaryStatistics0.andThen((java.util.function.IntConsumer) longSummaryStatistics1);
        org.junit.Assert.assertEquals(longSummaryStatistics0.toString(), "LongSummaryStatistics{count=0, sum=0, min=9223372036854775807, average=0.000000, max=-9223372036854775808}");
        org.junit.Assert.assertEquals(longSummaryStatistics1.toString(), "LongSummaryStatistics{count=1, sum=3, min=3, average=3.000000, max=3}");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 3L + "'", long4 == 3L);
        org.junit.Assert.assertEquals(longSummaryStatistics5.toString(), "LongSummaryStatistics{count=1, sum=3, min=3, average=3.000000, max=3}");
        org.junit.Assert.assertNotNull(longConsumer8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 3L + "'", long9 == 3L);
        org.junit.Assert.assertNotNull(intConsumer10);
    }

    @Test
    public void test1697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1697");
        java.io.OutputStream outputStream0 = null;
        java.io.FilterOutputStream filterOutputStream1 = new java.io.FilterOutputStream(outputStream0);
        byte[] byteArray3 = new byte[] { (byte) 100 };
        filterOutputStream1.write(byteArray3, (int) (byte) 0, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer7 = java.nio.ByteBuffer.wrap(byteArray3);
        java.nio.LongBuffer longBuffer8 = byteBuffer7.asLongBuffer();
        java.nio.ByteBuffer byteBuffer9 = byteBuffer7.duplicate();
        // The following exception was thrown during execution in test generation
        try {
            java.nio.Buffer buffer11 = byteBuffer7.position(23);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[100]");
        org.junit.Assert.assertNotNull(byteBuffer7);
        org.junit.Assert.assertNotNull(longBuffer8);
        org.junit.Assert.assertNotNull(byteBuffer9);
    }

    @Test
    public void test1698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1698");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        int int1 = localDate0.getCenturyOfEra();
        org.joda.time.LocalDate.Property property2 = localDate0.dayOfWeek();
        org.joda.time.LocalDate localDate4 = property2.addWrapFieldToCopy(2022);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate6 = localDate4.withEra(35);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35 for era must be in the range [0,1]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 20 + "'", int1 == 20);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDate4);
    }

    @Test
    public void test1699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1699");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 3, chronology1);
        org.joda.time.DateTime.Property property3 = dateTime2.dayOfYear();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((long) 3, chronology5);
        org.joda.time.DateTime.Property property7 = dateTime6.dayOfYear();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight((java.lang.Object) dateTime6, chronology8);
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight9.minusMonths((-1));
        org.joda.time.DateMidnight dateMidnight13 = dateMidnight9.withDayOfYear((int) ' ');
        int int14 = dateMidnight9.getWeekOfWeekyear();
        long long15 = property3.getDifferenceAsLong((org.joda.time.ReadableInstant) dateMidnight9);
        org.joda.time.DateMidnight dateMidnight18 = dateMidnight9.withDurationAdded((long) 25, 97);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight20 = dateMidnight9.withWeekOfWeekyear(122);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 122 for weekOfWeekyear must be in the range [1,53]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNotNull(dateMidnight18);
    }

    @Test
    public void test1700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1700");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.THREE;
        org.joda.time.Minutes minutes1 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes3 = minutes1.minus(12);
        java.lang.String str4 = minutes1.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Minutes minutes5 = minutes0.plus(minutes1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: The calculation caused an overflow: 3 + 2147483647");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes1);
        org.junit.Assert.assertNotNull(minutes3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "PT2147483647M" + "'", str4, "PT2147483647M");
    }

    @Test
    public void test1701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1701");
        java.util.stream.IntStream intStream2 = java.util.stream.IntStream.rangeClosed(100, (int) '4');
        java.util.stream.IntStream intStream3 = intStream2.sequential();
        java.util.stream.IntStream intStream4 = intStream3.sequential();
        java.util.function.IntPredicate intPredicate5 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean6 = intStream4.allMatch(intPredicate5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intStream2);
        org.junit.Assert.assertNotNull(intStream3);
        org.junit.Assert.assertNotNull(intStream4);
    }

    @Test
    public void test1702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1702");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.nio.LongBuffer longBuffer3 = java.nio.LongBuffer.allocate((int) (short) 0);
        java.nio.Buffer buffer4 = longBuffer3.mark();
        boolean boolean5 = properties1.containsKey((java.lang.Object) longBuffer3);
        java.nio.charset.Charset charset6 = java.nio.charset.Charset.defaultCharset();
        boolean boolean7 = charset6.canEncode();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) 3, chronology9);
        org.joda.time.DateTime.Property property11 = dateTime10.dayOfYear();
        java.lang.Object obj12 = properties1.getOrDefault((java.lang.Object) boolean7, (java.lang.Object) property11);
        properties1.clear();
        int int14 = properties1.size();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime(chronology15);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.withYearOfCentury((int) 'a');
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.plusSeconds(6);
        org.joda.time.DateTime dateTime21 = localDateTime18.toDateTime();
        int int22 = localDateTime18.getMinuteOfHour();
        org.joda.time.PeriodType periodType23 = org.joda.time.PeriodType.years();
        org.joda.time.DurationFieldType durationFieldType24 = org.joda.time.DurationFieldType.halfdays();
        int int25 = periodType23.indexOf(durationFieldType24);
        java.lang.String str26 = durationFieldType24.toString();
        org.joda.time.LocalDateTime localDateTime28 = localDateTime18.withFieldAdded(durationFieldType24, (int) (byte) 100);
        java.time.LocalTime localTime33 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime34 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime33);
        java.time.temporal.ChronoField chronoField35 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime37 = localTime33.with((java.time.temporal.TemporalField) chronoField35, (long) (short) 1);
        java.time.Duration duration39 = java.time.Duration.ofMinutes((long) 3);
        java.time.LocalTime localTime40 = localTime33.minus((java.time.temporal.TemporalAmount) duration39);
        boolean boolean41 = properties1.remove((java.lang.Object) (byte) 100, (java.lang.Object) localTime40);
        java.lang.Object obj44 = properties1.setProperty("Subject:\n", "1");
        java.nio.charset.CoderResult coderResult45 = java.nio.charset.CoderResult.UNDERFLOW;
        boolean boolean46 = coderResult45.isError();
        java.lang.String str47 = coderResult45.toString();
        java.lang.Object obj48 = properties1.get((java.lang.Object) str47);
        org.junit.Assert.assertNotNull(longBuffer3);
        org.junit.Assert.assertNotNull(buffer4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(charset6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(obj12);
        org.junit.Assert.assertEquals(obj12.toString(), "Property[dayOfYear]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj12), "Property[dayOfYear]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj12), "Property[dayOfYear]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(dateTime21);
// flaky:         org.junit.Assert.assertTrue("'" + int22 + "' != '" + 36 + "'", int22 == 36);
        org.junit.Assert.assertNotNull(periodType23);
        org.junit.Assert.assertNotNull(durationFieldType24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "halfdays" + "'", str26, "halfdays");
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localTime33);
        org.junit.Assert.assertNotNull(localTime34);
        org.junit.Assert.assertTrue("'" + chronoField35 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField35.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime37);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(localTime40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNull(obj44);
        org.junit.Assert.assertNotNull(coderResult45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "UNDERFLOW" + "'", str47, "UNDERFLOW");
        org.junit.Assert.assertNull(obj48);
    }

    @Test
    public void test1703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1703");
        java.time.OffsetDateTime offsetDateTime0 = java.time.OffsetDateTime.now();
        java.time.LocalDate localDate1 = offsetDateTime0.toLocalDate();
        java.time.OffsetDateTime offsetDateTime2 = java.time.OffsetDateTime.now();
        java.time.temporal.ChronoField chronoField3 = java.time.temporal.ChronoField.HOUR_OF_DAY;
        boolean boolean4 = offsetDateTime2.isSupported((java.time.temporal.TemporalField) chronoField3);
        boolean boolean5 = offsetDateTime0.isEqual(offsetDateTime2);
        java.time.OffsetDateTime offsetDateTime7 = offsetDateTime2.minusHours(3601000000001L);
        java.lang.String str8 = offsetDateTime7.toString();
        org.junit.Assert.assertNotNull(offsetDateTime0);
        org.junit.Assert.assertNotNull(localDate1);
        org.junit.Assert.assertNotNull(offsetDateTime2);
        org.junit.Assert.assertTrue("'" + chronoField3 + "' != '" + java.time.temporal.ChronoField.HOUR_OF_DAY + "'", chronoField3.equals(java.time.temporal.ChronoField.HOUR_OF_DAY));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(offsetDateTime7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "-410798109-08-20T16:36:47.999Z" + "'", str8, "-410798109-08-20T16:36:47.999Z");
    }

    @Test
    public void test1704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1704");
        java.time.format.DateTimeFormatter dateTimeFormatter0 = java.time.format.DateTimeFormatter.ISO_DATE;
        java.text.Format format1 = dateTimeFormatter0.toFormat();
        java.text.Format format2 = dateTimeFormatter0.toFormat();
        java.text.Format format3 = dateTimeFormatter0.toFormat();
        java.lang.StringBuffer stringBuffer5 = null;
        java.text.Format.Field field6 = null;
        java.text.FieldPosition fieldPosition7 = new java.text.FieldPosition(field6);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer8 = format3.format((java.lang.Object) 180000L, stringBuffer5, fieldPosition7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: toAppendTo");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(format1);
        org.junit.Assert.assertNotNull(format2);
        org.junit.Assert.assertNotNull(format3);
    }

    @Test
    public void test1705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1705");
        java.util.GregorianCalendar gregorianCalendar5 = new java.util.GregorianCalendar(12, 4096, 7, (-1), (int) (short) 10);
        gregorianCalendar5.set(16, (int) '\uffff', 19, 52, 127, 6);
        gregorianCalendar5.setTimeInMillis(3600201600000L);
        // The following exception was thrown during execution in test generation
        try {
            gregorianCalendar5.add(1024, 30);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1706");
        java.time.LocalTime localTime4 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime5 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime4);
        java.time.LocalTime localTime10 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime11 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime10);
        java.time.temporal.ChronoField chronoField12 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime14 = localTime10.with((java.time.temporal.TemporalField) chronoField12, (long) (short) 1);
        long long15 = localTime4.getLong((java.time.temporal.TemporalField) chronoField12);
        java.time.LocalTime localTime17 = localTime4.withSecond((int) (short) 1);
        java.time.temporal.ChronoField chronoField18 = java.time.temporal.ChronoField.SECOND_OF_DAY;
        java.time.temporal.ValueRange valueRange19 = localTime17.range((java.time.temporal.TemporalField) chronoField18);
        java.time.Duration duration21 = java.time.Duration.ofSeconds((long) 0);
        java.time.LocalTime localTime22 = localTime17.plus((java.time.temporal.TemporalAmount) duration21);
        java.time.Duration duration24 = duration21.plusDays((long) (short) 1);
        java.time.Duration duration26 = duration24.minusNanos((long) 1024);
        java.time.Duration duration28 = duration26.plusMillis((long) 88);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertTrue("'" + chronoField12 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField12.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 3601000000001L + "'", long15 == 3601000000001L);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertTrue("'" + chronoField18 + "' != '" + java.time.temporal.ChronoField.SECOND_OF_DAY + "'", chronoField18.equals(java.time.temporal.ChronoField.SECOND_OF_DAY));
        org.junit.Assert.assertNotNull(valueRange19);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(duration28);
    }

    @Test
    public void test1707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1707");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((int) 'u', 25, 0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 117 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1708");
        java.time.Duration duration0 = java.time.Duration.ZERO;
        java.time.Duration duration2 = duration0.multipliedBy((-9223372036854775808L));
        long long3 = duration2.toMillis();
        org.junit.Assert.assertNotNull(duration0);
        org.junit.Assert.assertNotNull(duration2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
    }

    @Test
    public void test1709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1709");
        java.time.Clock clock0 = java.time.Clock.systemUTC();
        java.time.Duration duration2 = java.time.Duration.ofSeconds((long) 256);
        java.time.Clock clock3 = java.time.Clock.tick(clock0, duration2);
        java.time.Duration duration5 = java.time.Duration.ofMinutes((long) 3);
        java.time.Duration duration6 = duration5.abs();
        java.time.Clock clock7 = java.time.Clock.offset(clock0, duration5);
        java.time.ZoneId zoneId8 = clock0.getZone();
        org.junit.Assert.assertNotNull(clock0);
        org.junit.Assert.assertNotNull(duration2);
        org.junit.Assert.assertNotNull(clock3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(clock7);
        org.junit.Assert.assertNotNull(zoneId8);
    }

    @Test
    public void test1710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1710");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.now();
        java.time.LocalTime localTime5 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime6 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime5);
        java.time.temporal.ChronoField chronoField7 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime9 = localTime5.with((java.time.temporal.TemporalField) chronoField7, (long) (short) 1);
        java.util.Locale locale10 = java.util.Locale.GERMANY;
        java.lang.String str11 = chronoField7.getDisplayName(locale10);
        long long12 = localDateTime0.getLong((java.time.temporal.TemporalField) chronoField7);
        java.time.LocalDateTime localDateTime14 = localDateTime0.plusHours((long) 10);
        java.time.Instant instant15 = java.time.Instant.MIN;
        java.time.format.DateTimeFormatter dateTimeFormatter16 = java.time.format.DateTimeFormatter.ISO_DATE;
        java.lang.String str17 = dateTimeFormatter16.toString();
        java.time.LocalDateTime localDateTime18 = java.time.LocalDateTime.now();
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery19 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period20 = localDateTime18.query(periodTemporalQuery19);
        java.text.Format format21 = dateTimeFormatter16.toFormat(periodTemporalQuery19);
        java.time.chrono.Chronology chronology22 = dateTimeFormatter16.getChronology();
        java.time.format.DateTimeFormatter dateTimeFormatter23 = java.time.format.DateTimeFormatter.ISO_DATE;
        java.lang.String str24 = dateTimeFormatter23.toString();
        java.time.LocalDateTime localDateTime25 = java.time.LocalDateTime.now();
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery26 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period27 = localDateTime25.query(periodTemporalQuery26);
        java.text.Format format28 = dateTimeFormatter23.toFormat(periodTemporalQuery26);
        java.time.chrono.Chronology chronology29 = dateTimeFormatter23.getChronology();
        int int30 = chronology22.compareTo(chronology29);
        java.util.List<java.time.chrono.Era> eraList31 = chronology29.eras();
        java.time.ZoneOffset zoneOffset34 = java.time.ZoneOffset.ofHoursMinutes(1, 10);
        java.time.LocalDate localDate35 = java.time.LocalDate.now((java.time.ZoneId) zoneOffset34);
        java.time.Clock clock36 = java.time.Clock.system((java.time.ZoneId) zoneOffset34);
        java.time.ZoneOffset zoneOffset39 = java.time.ZoneOffset.ofHoursMinutes(1, 10);
        java.time.LocalDate localDate40 = java.time.LocalDate.now((java.time.ZoneId) zoneOffset39);
        java.time.Clock clock41 = java.time.Clock.system((java.time.ZoneId) zoneOffset39);
        int int42 = zoneOffset34.compareTo(zoneOffset39);
        java.time.chrono.ChronoLocalDate chronoLocalDate43 = chronology29.dateNow((java.time.ZoneId) zoneOffset39);
        java.time.chrono.IsoEra isoEra44 = java.time.chrono.IsoEra.CE;
        int int45 = isoEra44.getValue();
        int int46 = isoEra44.getValue();
        int int48 = chronology29.prolepticYear((java.time.chrono.Era) isoEra44, 0);
        java.time.LocalTime localTime53 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime54 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime53);
        java.time.temporal.ChronoField chronoField55 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime57 = localTime53.with((java.time.temporal.TemporalField) chronoField55, (long) (short) 1);
        java.util.Locale locale58 = java.util.Locale.GERMANY;
        java.lang.String str59 = chronoField55.getDisplayName(locale58);
        boolean boolean60 = isoEra44.isSupported((java.time.temporal.TemporalField) chronoField55);
        boolean boolean61 = instant15.isSupported((java.time.temporal.TemporalField) chronoField55);
        // The following exception was thrown during execution in test generation
        try {
            int int62 = localDateTime14.get((java.time.temporal.TemporalField) chronoField55);
            org.junit.Assert.fail("Expected exception of type java.time.temporal.UnsupportedTemporalTypeException; message: Invalid field 'NanoOfDay' for get() method, use getLong() instead");
        } catch (java.time.temporal.UnsupportedTemporalTypeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertTrue("'" + chronoField7 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField7.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "NanoOfDay" + "'", str11, "NanoOfDay");
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + 34608174000000L + "'", long12 == 34608174000000L);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(instant15);
        org.junit.Assert.assertNotNull(dateTimeFormatter16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "ParseCaseSensitive(false)(Value(Year,4,10,EXCEEDS_PAD)'-'Value(MonthOfYear,2)'-'Value(DayOfMonth,2))[Offset(+HH:MM:ss,'Z')]" + "'", str17, "ParseCaseSensitive(false)(Value(Year,4,10,EXCEEDS_PAD)'-'Value(MonthOfYear,2)'-'Value(DayOfMonth,2))[Offset(+HH:MM:ss,'Z')]");
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(periodTemporalQuery19);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(format21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeFormatter23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "ParseCaseSensitive(false)(Value(Year,4,10,EXCEEDS_PAD)'-'Value(MonthOfYear,2)'-'Value(DayOfMonth,2))[Offset(+HH:MM:ss,'Z')]" + "'", str24, "ParseCaseSensitive(false)(Value(Year,4,10,EXCEEDS_PAD)'-'Value(MonthOfYear,2)'-'Value(DayOfMonth,2))[Offset(+HH:MM:ss,'Z')]");
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(periodTemporalQuery26);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(format28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(eraList31);
        org.junit.Assert.assertNotNull(zoneOffset34);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertNotNull(clock36);
        org.junit.Assert.assertNotNull(zoneOffset39);
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertNotNull(clock41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(chronoLocalDate43);
        org.junit.Assert.assertTrue("'" + isoEra44 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra44.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(localTime53);
        org.junit.Assert.assertNotNull(localTime54);
        org.junit.Assert.assertTrue("'" + chronoField55 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField55.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime57);
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "NanoOfDay" + "'", str59, "NanoOfDay");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
    }

    @Test
    public void test1711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1711");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 3, chronology1);
        org.joda.time.DateTime.Property property3 = dateTime2.dayOfYear();
        org.joda.time.Interval interval4 = property3.toInterval();
        org.joda.time.DateTimeField dateTimeField5 = property3.getField();
        org.joda.time.DateTime dateTime7 = property3.addToCopy((long) (byte) 1);
        org.joda.time.DateTime dateTime9 = dateTime7.withYear(4);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) 3, chronology11);
        org.joda.time.Period period13 = org.joda.time.Period.ZERO;
        org.joda.time.Period period14 = period13.normalizedStandard();
        org.joda.time.Period period16 = period14.minusMinutes((int) ' ');
        org.joda.time.Period period18 = period16.minusMonths((int) (byte) 0);
        org.joda.time.PeriodType periodType19 = period18.getPeriodType();
        org.joda.time.DateTime dateTime20 = dateTime12.minus((org.joda.time.ReadablePeriod) period18);
        org.joda.time.Duration duration21 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.DateTime dateTime22 = dateTime9.withTimeAtStartOfDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime27 = dateTime9.withTime((-4), 34595674, 508, (-46800000));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -4 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(periodType19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
    }

    @Test
    public void test1712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1712");
        java.time.Period period1 = java.time.Period.ofYears(28);
        java.time.chrono.IsoChronology isoChronology2 = period1.getChronology();
        java.util.List<java.time.chrono.Era> eraList3 = isoChronology2.eras();
        java.time.OffsetDateTime offsetDateTime4 = java.time.OffsetDateTime.now();
        java.time.LocalDate localDate6 = java.time.LocalDate.ofEpochDay((long) ' ');
        int int7 = localDate6.getMonthValue();
        org.joda.time.Period period8 = org.joda.time.Period.ZERO;
        org.joda.time.Period period9 = period8.normalizedStandard();
        org.joda.time.Period period11 = period8.plusHours(2);
        java.time.chrono.IsoEra isoEra12 = java.time.chrono.IsoEra.CE;
        boolean boolean13 = period11.equals((java.lang.Object) isoEra12);
        java.time.LocalTime localTime18 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime19 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime18);
        java.time.LocalTime localTime24 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime25 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime24);
        java.time.temporal.ChronoField chronoField26 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime28 = localTime24.with((java.time.temporal.TemporalField) chronoField26, (long) (short) 1);
        long long29 = localTime18.getLong((java.time.temporal.TemporalField) chronoField26);
        boolean boolean30 = isoEra12.isSupported((java.time.temporal.TemporalField) chronoField26);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery31 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period32 = isoEra12.query(periodTemporalQuery31);
        boolean boolean33 = period32.isNegative();
        java.time.Period period35 = period32.plusDays((long) ' ');
        java.time.temporal.ChronoField chronoField36 = java.time.temporal.ChronoField.SECOND_OF_DAY;
        boolean boolean37 = period32.equals((java.lang.Object) chronoField36);
        boolean boolean38 = localDate6.isSupported((java.time.temporal.TemporalField) chronoField36);
        java.time.temporal.TemporalUnit temporalUnit39 = chronoField36.getRangeUnit();
        java.time.OffsetDateTime offsetDateTime40 = offsetDateTime4.truncatedTo(temporalUnit39);
        java.time.LocalDate localDate43 = java.time.LocalDate.ofEpochDay((long) ' ');
        int int44 = localDate43.getMonthValue();
        org.joda.time.Period period45 = org.joda.time.Period.ZERO;
        org.joda.time.Period period46 = period45.normalizedStandard();
        org.joda.time.Period period48 = period45.plusHours(2);
        java.time.chrono.IsoEra isoEra49 = java.time.chrono.IsoEra.CE;
        boolean boolean50 = period48.equals((java.lang.Object) isoEra49);
        java.time.LocalTime localTime55 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime56 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime55);
        java.time.LocalTime localTime61 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime62 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime61);
        java.time.temporal.ChronoField chronoField63 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime65 = localTime61.with((java.time.temporal.TemporalField) chronoField63, (long) (short) 1);
        long long66 = localTime55.getLong((java.time.temporal.TemporalField) chronoField63);
        boolean boolean67 = isoEra49.isSupported((java.time.temporal.TemporalField) chronoField63);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery68 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period69 = isoEra49.query(periodTemporalQuery68);
        boolean boolean70 = period69.isNegative();
        java.time.Period period72 = period69.plusDays((long) ' ');
        java.time.temporal.ChronoField chronoField73 = java.time.temporal.ChronoField.SECOND_OF_DAY;
        boolean boolean74 = period69.equals((java.lang.Object) chronoField73);
        boolean boolean75 = localDate43.isSupported((java.time.temporal.TemporalField) chronoField73);
        java.time.temporal.TemporalUnit temporalUnit76 = chronoField73.getRangeUnit();
        java.time.OffsetDateTime offsetDateTime77 = offsetDateTime40.minus(8L, temporalUnit76);
        java.time.LocalTime localTime78 = offsetDateTime40.toLocalTime();
        java.time.LocalDate localDate79 = isoChronology2.date((java.time.temporal.TemporalAccessor) offsetDateTime40);
        java.lang.String str80 = isoChronology2.getCalendarType();
        java.time.chrono.ChronoLocalDate chronoLocalDate81 = isoChronology2.dateNow();
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(isoChronology2);
        org.junit.Assert.assertNotNull(eraList3);
        org.junit.Assert.assertNotNull(offsetDateTime4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2 + "'", int7 == 2);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertTrue("'" + isoEra12 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra12.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertNotNull(localTime24);
        org.junit.Assert.assertNotNull(localTime25);
        org.junit.Assert.assertTrue("'" + chronoField26 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField26.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime28);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 3601000000001L + "'", long29 == 3601000000001L);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(periodTemporalQuery31);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertTrue("'" + chronoField36 + "' != '" + java.time.temporal.ChronoField.SECOND_OF_DAY + "'", chronoField36.equals(java.time.temporal.ChronoField.SECOND_OF_DAY));
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + temporalUnit39 + "' != '" + java.time.temporal.ChronoUnit.DAYS + "'", temporalUnit39.equals(java.time.temporal.ChronoUnit.DAYS));
        org.junit.Assert.assertNotNull(offsetDateTime40);
        org.junit.Assert.assertNotNull(localDate43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2 + "'", int44 == 2);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertNotNull(period48);
        org.junit.Assert.assertTrue("'" + isoEra49 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra49.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(localTime55);
        org.junit.Assert.assertNotNull(localTime56);
        org.junit.Assert.assertNotNull(localTime61);
        org.junit.Assert.assertNotNull(localTime62);
        org.junit.Assert.assertTrue("'" + chronoField63 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField63.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime65);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 3601000000001L + "'", long66 == 3601000000001L);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(periodTemporalQuery68);
        org.junit.Assert.assertNotNull(period69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(period72);
        org.junit.Assert.assertTrue("'" + chronoField73 + "' != '" + java.time.temporal.ChronoField.SECOND_OF_DAY + "'", chronoField73.equals(java.time.temporal.ChronoField.SECOND_OF_DAY));
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + temporalUnit76 + "' != '" + java.time.temporal.ChronoUnit.DAYS + "'", temporalUnit76.equals(java.time.temporal.ChronoUnit.DAYS));
        org.junit.Assert.assertNotNull(offsetDateTime77);
        org.junit.Assert.assertNotNull(localTime78);
        org.junit.Assert.assertNotNull(localDate79);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "iso8601" + "'", str80, "iso8601");
        org.junit.Assert.assertNotNull(chronoLocalDate81);
    }

    @Test
    public void test1713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1713");
        java.util.stream.IntStream intStream2 = java.util.stream.IntStream.range(710, 2012);
        org.junit.Assert.assertNotNull(intStream2);
    }

    @Test
    public void test1714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1714");
        org.joda.time.chrono.EthiopicChronology ethiopicChronology0 = org.joda.time.chrono.EthiopicChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = ethiopicChronology0.dayOfWeek();
        org.joda.time.DurationField durationField2 = ethiopicChronology0.months();
        org.joda.time.DurationField durationField3 = ethiopicChronology0.hours();
        // The following exception was thrown during execution in test generation
        try {
            long long6 = durationField3.add((long) 100, 34461212000000L);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows a long: 34461212000000 * 3600000");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(ethiopicChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(durationField3);
    }

    @Test
    public void test1715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1715");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.Duration duration2 = new org.joda.time.Duration(readableInstant0, readableInstant1);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = duration2.toPeriodTo(readableInstant3, periodType4);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.Duration duration8 = new org.joda.time.Duration(readableInstant6, readableInstant7);
        long long9 = duration8.getMillis();
        boolean boolean10 = duration2.isShorterThan((org.joda.time.ReadableDuration) duration8);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) 3, chronology12);
        org.joda.time.DateTime.Property property14 = dateTime13.dayOfYear();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight((java.lang.Object) dateTime13, chronology15);
        org.joda.time.MutableDateTime mutableDateTime17 = dateTime13.toMutableDateTime();
        mutableDateTime17.addYears((int) (short) 100);
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime17.dayOfWeek();
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime17.year();
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime17.weekyear();
        boolean boolean23 = duration2.equals((java.lang.Object) mutableDateTime17);
        mutableDateTime17.addMonths((int) ' ');
        mutableDateTime17.add((long) (byte) 10);
        org.joda.time.Period period28 = org.joda.time.Period.ZERO;
        org.joda.time.Period period29 = period28.normalizedStandard();
        org.joda.time.Period period31 = period28.plusHours(2);
        java.time.chrono.IsoEra isoEra32 = java.time.chrono.IsoEra.CE;
        boolean boolean33 = period31.equals((java.lang.Object) isoEra32);
        int int34 = period31.getMinutes();
        mutableDateTime17.add((org.joda.time.ReadablePeriod) period31);
        java.util.TimeZone timeZone37 = null;
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forTimeZone(timeZone37);
        org.joda.time.DateMidnight dateMidnight39 = new org.joda.time.DateMidnight((long) 1970, dateTimeZone38);
        long long42 = dateTimeZone38.convertLocalToUTC((long) 3, false);
        long long45 = dateTimeZone38.convertLocalToUTC(0L, true);
        mutableDateTime17.setZoneRetainFields(dateTimeZone38);
        java.lang.String str47 = dateTimeZone38.toString();
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime((long) 3, chronology49);
        org.joda.time.DateTime.Property property51 = dateTime50.dayOfYear();
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.DateMidnight dateMidnight53 = new org.joda.time.DateMidnight((java.lang.Object) dateTime50, chronology52);
        org.joda.time.MutableDateTime mutableDateTime54 = dateTime50.toMutableDateTime();
        mutableDateTime54.addYears((int) (short) 100);
        org.joda.time.MutableDateTime.Property property57 = mutableDateTime54.dayOfWeek();
        org.joda.time.MutableDateTime.Property property58 = mutableDateTime54.year();
        java.util.TimeZone timeZone59 = null;
        org.joda.time.DateTimeZone dateTimeZone60 = org.joda.time.DateTimeZone.forTimeZone(timeZone59);
        mutableDateTime54.setZone(dateTimeZone60);
        java.util.Locale locale63 = java.util.Locale.TAIWAN;
        java.lang.String str64 = dateTimeZone60.getShortName((long) 64, locale63);
        long long66 = dateTimeZone38.getMillisKeepLocal(dateTimeZone60, (long) 7);
        java.time.LocalTime localTime72 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime73 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime72);
        java.time.temporal.ChronoField chronoField74 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime76 = localTime72.with((java.time.temporal.TemporalField) chronoField74, (long) (short) 1);
        java.util.Locale locale77 = java.util.Locale.GERMANY;
        java.lang.String str78 = chronoField74.getDisplayName(locale77);
        java.lang.String str79 = dateTimeZone60.getShortName((long) 306, locale77);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.chrono.EthiopicChronology ethiopicChronology81 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone60, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid min days in first week: 97");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertTrue("'" + isoEra32 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra32.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 3L + "'", long42 == 3L);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Etc/UTC" + "'", str47, "Etc/UTC");
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(mutableDateTime54);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNotNull(dateTimeZone60);
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "+00:00" + "'", str64, "+00:00");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 7L + "'", long66 == 7L);
        org.junit.Assert.assertNotNull(localTime72);
        org.junit.Assert.assertNotNull(localTime73);
        org.junit.Assert.assertTrue("'" + chronoField74 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField74.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime76);
        org.junit.Assert.assertNotNull(locale77);
        org.junit.Assert.assertEquals(locale77.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "NanoOfDay" + "'", str78, "NanoOfDay");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "+00:00" + "'", str79, "+00:00");
    }

    @Test
    public void test1716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1716");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.Duration duration2 = new org.joda.time.Duration(readableInstant0, readableInstant1);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = duration2.toPeriodTo(readableInstant3, periodType4);
        int[] intArray6 = period5.getValues();
        org.joda.time.Period period8 = period5.withHours(65);
        org.joda.time.Period period10 = period8.plusDays(127);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(period10);
    }

    @Test
    public void test1717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1717");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.Duration duration2 = new org.joda.time.Duration(readableInstant0, readableInstant1);
        long long3 = duration2.getMillis();
        org.joda.time.Duration duration5 = duration2.plus((long) (byte) 1);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) 3, chronology7);
        org.joda.time.DateTime.Property property9 = dateTime8.dayOfYear();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight((java.lang.Object) dateTime8, chronology10);
        org.joda.time.DateMidnight dateMidnight13 = dateMidnight11.minusMonths((-1));
        org.joda.time.DateMidnight dateMidnight15 = dateMidnight11.withDayOfYear((int) ' ');
        org.joda.time.Period period16 = duration5.toPeriodFrom((org.joda.time.ReadableInstant) dateMidnight11);
        org.joda.time.Period period18 = period16.minusDays((int) 'u');
        org.joda.time.Period period20 = period18.plusHours(3601);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(period20);
    }

    @Test
    public void test1718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1718");
        java.time.LocalDate localDate1 = java.time.LocalDate.ofEpochDay((long) ' ');
        java.time.OffsetTime offsetTime2 = java.time.OffsetTime.MAX;
        java.time.LocalTime localTime3 = offsetTime2.toLocalTime();
        java.lang.String str4 = offsetTime2.toString();
        java.time.Duration duration5 = java.time.Duration.ZERO;
        java.lang.String str6 = duration5.toString();
        java.time.OffsetTime offsetTime7 = offsetTime2.plus((java.time.temporal.TemporalAmount) duration5);
        java.time.LocalTime localTime8 = offsetTime2.toLocalTime();
        java.time.chrono.ChronoLocalDateTime<?> wildcardChronoLocalDateTime9 = localDate1.atTime(localTime8);
        java.time.LocalDate localDate11 = localDate1.minusWeeks((long) 2097);
        java.util.TimeZone timeZone13 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forTimeZone(timeZone13);
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight((long) 1970, dateTimeZone14);
        long long18 = dateTimeZone14.convertLocalToUTC((long) 3, false);
        long long21 = dateTimeZone14.convertLocalToUTC(0L, true);
        boolean boolean22 = localDate1.equals((java.lang.Object) true);
        int int23 = localDate1.lengthOfMonth();
        java.time.LocalDate localDate26 = java.time.LocalDate.ofEpochDay((long) ' ');
        int int27 = localDate26.getMonthValue();
        org.joda.time.Period period28 = org.joda.time.Period.ZERO;
        org.joda.time.Period period29 = period28.normalizedStandard();
        org.joda.time.Period period31 = period28.plusHours(2);
        java.time.chrono.IsoEra isoEra32 = java.time.chrono.IsoEra.CE;
        boolean boolean33 = period31.equals((java.lang.Object) isoEra32);
        java.time.LocalTime localTime38 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime39 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime38);
        java.time.LocalTime localTime44 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime45 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime44);
        java.time.temporal.ChronoField chronoField46 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime48 = localTime44.with((java.time.temporal.TemporalField) chronoField46, (long) (short) 1);
        long long49 = localTime38.getLong((java.time.temporal.TemporalField) chronoField46);
        boolean boolean50 = isoEra32.isSupported((java.time.temporal.TemporalField) chronoField46);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery51 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period52 = isoEra32.query(periodTemporalQuery51);
        boolean boolean53 = period52.isNegative();
        java.time.Period period55 = period52.plusDays((long) ' ');
        java.time.temporal.ChronoField chronoField56 = java.time.temporal.ChronoField.SECOND_OF_DAY;
        boolean boolean57 = period52.equals((java.lang.Object) chronoField56);
        boolean boolean58 = localDate26.isSupported((java.time.temporal.TemporalField) chronoField56);
        java.time.temporal.TemporalUnit temporalUnit59 = chronoField56.getRangeUnit();
        java.time.chrono.ChronoLocalDate chronoLocalDate60 = localDate1.minus((long) (-1), temporalUnit59);
        int int61 = localDate1.lengthOfYear();
        org.junit.Assert.assertNotNull(localDate1);
        org.junit.Assert.assertNotNull(offsetTime2);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "23:59:59.999999999-18:00" + "'", str4, "23:59:59.999999999-18:00");
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "PT0S" + "'", str6, "PT0S");
        org.junit.Assert.assertNotNull(offsetTime7);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(wildcardChronoLocalDateTime9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 3L + "'", long18 == 3L);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 28 + "'", int23 == 28);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2 + "'", int27 == 2);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertTrue("'" + isoEra32 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra32.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(localTime38);
        org.junit.Assert.assertNotNull(localTime39);
        org.junit.Assert.assertNotNull(localTime44);
        org.junit.Assert.assertNotNull(localTime45);
        org.junit.Assert.assertTrue("'" + chronoField46 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField46.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime48);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 3601000000001L + "'", long49 == 3601000000001L);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(periodTemporalQuery51);
        org.junit.Assert.assertNotNull(period52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(period55);
        org.junit.Assert.assertTrue("'" + chronoField56 + "' != '" + java.time.temporal.ChronoField.SECOND_OF_DAY + "'", chronoField56.equals(java.time.temporal.ChronoField.SECOND_OF_DAY));
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + temporalUnit59 + "' != '" + java.time.temporal.ChronoUnit.DAYS + "'", temporalUnit59.equals(java.time.temporal.ChronoUnit.DAYS));
        org.junit.Assert.assertNotNull(chronoLocalDate60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 365 + "'", int61 == 365);
    }

    @Test
    public void test1719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1719");
        java.util.GregorianCalendar gregorianCalendar5 = new java.util.GregorianCalendar(12, 4096, 7, (-1), (int) (short) 10);
        int int6 = gregorianCalendar5.getWeeksInWeekYear();
        java.lang.String str7 = gregorianCalendar5.getCalendarType();
        java.time.ZonedDateTime zonedDateTime8 = gregorianCalendar5.toZonedDateTime();
        java.util.Date date15 = new java.util.Date((int) 'a', 3, 0, (-1), (int) '/', 28);
        int int16 = date15.getTimezoneOffset();
        gregorianCalendar5.setGregorianChange(date15);
        // The following exception was thrown during execution in test generation
        try {
            int int19 = gregorianCalendar5.getMinimum(353);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 353");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 52 + "'", int6 == 52);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "gregory" + "'", str7, "gregory");
        org.junit.Assert.assertNotNull(zonedDateTime8);
        org.junit.Assert.assertEquals(date15.toString(), "Sun Mar 30 23:47:28 UTC 1997");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
    }

    @Test
    public void test1720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1720");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime2 = org.joda.time.LocalTime.parse("DurationField[months]", dateTimeFormatter1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1721");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((long) 0, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) 3, chronology4);
        org.joda.time.DateTime.Property property6 = dateTime5.dayOfYear();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateMidnight dateMidnight8 = new org.joda.time.DateMidnight((java.lang.Object) dateTime5, chronology7);
        org.joda.time.DateTime dateTime9 = localTime2.toDateTime((org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.LocalTime localTime11 = localTime2.plusHours(3);
        int int12 = localTime11.getMillisOfDay();
        org.joda.time.LocalTime.Property property13 = localTime11.millisOfDay();
        java.time.temporal.ChronoField chronoField15 = java.time.temporal.ChronoField.YEAR_OF_ERA;
        java.util.GregorianCalendar gregorianCalendar21 = new java.util.GregorianCalendar(12, 4096, 7, (-1), (int) (short) 10);
        gregorianCalendar21.setLenient(false);
        java.util.Locale locale26 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale locale27 = java.util.Locale.GERMANY;
        java.lang.String str28 = locale26.getDisplayScript(locale27);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.LocalTime localTime32 = new org.joda.time.LocalTime((long) 0, chronology31);
        org.joda.time.Chronology chronology33 = localTime32.getChronology();
        org.joda.time.DateTimeField dateTimeField34 = chronology33.weekyearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime35 = org.joda.time.MutableDateTime.now(chronology33);
        org.joda.time.DateTimeField dateTimeField36 = chronology33.monthOfYear();
        java.util.Locale locale37 = java.util.Locale.getDefault();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket39 = new org.joda.time.format.DateTimeParserBucket((long) 28, chronology33, locale37, (java.lang.Integer) 0);
        java.lang.String str40 = locale26.getDisplayName(locale37);
        java.util.Map<java.lang.String, java.lang.Integer> strMap41 = gregorianCalendar21.getDisplayNames(14, 1, locale37);
        java.lang.String str42 = chronoField15.getDisplayName(locale37);
        java.time.format.DecimalStyle decimalStyle43 = java.time.format.DecimalStyle.of(locale37);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime44 = property13.setCopy("Chinese (China)", locale37);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"Chinese (China)\" for millisOfDay is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 10800000 + "'", int12 == 10800000);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + chronoField15 + "' != '" + java.time.temporal.ChronoField.YEAR_OF_ERA + "'", chronoField15.equals(java.time.temporal.ChronoField.YEAR_OF_ERA));
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(mutableDateTime35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Chinese (China)" + "'", str40, "Chinese (China)");
        org.junit.Assert.assertNull(strMap41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "YearOfEra" + "'", str42, "YearOfEra");
        org.junit.Assert.assertNotNull(decimalStyle43);
    }

    @Test
    public void test1722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1722");
        java.security.NoSuchAlgorithmException noSuchAlgorithmException1 = new java.security.NoSuchAlgorithmException("2022-02-21T09:36:33.559Z");
    }

    @Test
    public void test1723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1723");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((long) 0, chronology2);
        org.joda.time.Chronology chronology4 = localTime3.getChronology();
        org.joda.time.DateTimeField dateTimeField5 = chronology4.weekyearOfCentury();
        org.joda.time.DurationField durationField6 = chronology4.weekyears();
        org.joda.time.DurationField durationField7 = chronology4.seconds();
        org.joda.time.LocalTime localTime8 = org.joda.time.LocalTime.fromMillisOfDay((long) (byte) 0, chronology4);
        org.joda.time.LocalTime.Property property9 = localTime8.millisOfSecond();
        org.joda.time.LocalTime.Property property10 = localTime8.hourOfDay();
        org.joda.time.LocalTime localTime11 = property10.roundCeilingCopy();
        org.joda.time.LocalTime localTime12 = property10.roundHalfCeilingCopy();
        org.joda.time.LocalTime localTime13 = property10.roundHalfCeilingCopy();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.LocalTime localTime16 = new org.joda.time.LocalTime((long) 0, chronology15);
        org.joda.time.LocalTime localTime18 = localTime16.minusMillis(2022);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.monthOfYear();
        boolean boolean20 = localTime18.isSupported(dateTimeFieldType19);
        org.joda.time.Minutes minutes21 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes23 = minutes21.minus(12);
        org.joda.time.Minutes minutes24 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes26 = minutes24.minus(12);
        java.lang.String str27 = minutes24.toString();
        org.joda.time.Minutes minutes28 = minutes21.minus(minutes24);
        org.joda.time.LocalTime localTime30 = localTime18.withPeriodAdded((org.joda.time.ReadablePeriod) minutes24, 2097);
        int int31 = localTime13.compareTo((org.joda.time.ReadablePartial) localTime18);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(minutes21);
        org.junit.Assert.assertNotNull(minutes23);
        org.junit.Assert.assertNotNull(minutes24);
        org.junit.Assert.assertNotNull(minutes26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "PT2147483647M" + "'", str27, "PT2147483647M");
        org.junit.Assert.assertNotNull(minutes28);
        org.junit.Assert.assertNotNull(localTime30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
    }

    @Test
    public void test1724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1724");
        java.time.format.DateTimeFormatter dateTimeFormatter0 = java.time.format.DateTimeFormatter.ISO_DATE;
        java.text.Format format1 = dateTimeFormatter0.toFormat();
        org.joda.time.Duration duration3 = org.joda.time.Duration.millis((long) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            java.text.AttributedCharacterIterator attributedCharacterIterator4 = format1.formatToCharacterIterator((java.lang.Object) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Format target must implement TemporalAccessor");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(format1);
        org.junit.Assert.assertNotNull(duration3);
    }

    @Test
    public void test1725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1725");
        java.util.function.Function<java.time.chrono.Era, java.time.chrono.Era> eraFunction0 = java.util.function.Function.identity();
        org.junit.Assert.assertNotNull(eraFunction0);
    }

    @Test
    public void test1726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1726");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.Duration duration2 = new org.joda.time.Duration(readableInstant0, readableInstant1);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = duration2.toPeriodTo(readableInstant3, periodType4);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.Duration duration8 = new org.joda.time.Duration(readableInstant6, readableInstant7);
        long long9 = duration8.getMillis();
        boolean boolean10 = duration2.isShorterThan((org.joda.time.ReadableDuration) duration8);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) 3, chronology12);
        org.joda.time.DateTime.Property property14 = dateTime13.dayOfYear();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight((java.lang.Object) dateTime13, chronology15);
        org.joda.time.MutableDateTime mutableDateTime17 = dateTime13.toMutableDateTime();
        mutableDateTime17.addYears((int) (short) 100);
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime17.dayOfWeek();
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime17.year();
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime17.weekyear();
        boolean boolean23 = duration2.equals((java.lang.Object) mutableDateTime17);
        mutableDateTime17.addMonths((int) ' ');
        mutableDateTime17.add((long) (byte) 10);
        org.joda.time.Period period28 = org.joda.time.Period.ZERO;
        org.joda.time.Period period29 = period28.normalizedStandard();
        org.joda.time.Period period31 = period28.plusHours(2);
        java.time.chrono.IsoEra isoEra32 = java.time.chrono.IsoEra.CE;
        boolean boolean33 = period31.equals((java.lang.Object) isoEra32);
        int int34 = period31.getMinutes();
        mutableDateTime17.add((org.joda.time.ReadablePeriod) period31);
        java.util.TimeZone timeZone37 = null;
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forTimeZone(timeZone37);
        org.joda.time.DateMidnight dateMidnight39 = new org.joda.time.DateMidnight((long) 1970, dateTimeZone38);
        long long42 = dateTimeZone38.convertLocalToUTC((long) 3, false);
        long long45 = dateTimeZone38.convertLocalToUTC(0L, true);
        mutableDateTime17.setZoneRetainFields(dateTimeZone38);
        java.lang.String str47 = dateTimeZone38.toString();
        org.joda.time.chrono.EthiopicChronology ethiopicChronology48 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone38);
        org.joda.time.DateTimeField dateTimeField49 = ethiopicChronology48.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone50 = ethiopicChronology48.getZone();
        org.joda.time.DateTimeField dateTimeField51 = ethiopicChronology48.era();
        org.joda.time.DateTimeField dateTimeField52 = ethiopicChronology48.secondOfDay();
        org.joda.time.DurationField durationField53 = ethiopicChronology48.eras();
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertTrue("'" + isoEra32 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra32.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 3L + "'", long42 == 3L);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Etc/UTC" + "'", str47, "Etc/UTC");
        org.junit.Assert.assertNotNull(ethiopicChronology48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(durationField53);
    }

    @Test
    public void test1727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1727");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.now();
        java.time.temporal.ChronoField chronoField1 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime3 = localDateTime0.with((java.time.temporal.TemporalField) chronoField1, (long) 10);
        java.time.LocalDateTime localDateTime5 = localDateTime0.minusMinutes((long) 12);
        org.joda.time.Period period6 = org.joda.time.Period.ZERO;
        org.joda.time.Period period7 = period6.normalizedStandard();
        org.joda.time.Period period9 = period6.plusHours(2);
        org.joda.time.DurationFieldType durationFieldType10 = org.joda.time.DurationFieldType.hours();
        int int11 = period6.indexOf(durationFieldType10);
        org.joda.time.Weeks weeks12 = period6.toStandardWeeks();
        boolean boolean13 = localDateTime5.equals((java.lang.Object) weeks12);
        int int14 = localDateTime5.getMinute();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertTrue("'" + chronoField1 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField1.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(durationFieldType10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 4 + "'", int11 == 4);
        org.junit.Assert.assertNotNull(weeks12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 24 + "'", int14 == 24);
    }

    @Test
    public void test1728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1728");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 99L);
        double double3 = optionalDouble1.orElse((double) 5L);
        double double4 = optionalDouble1.getAsDouble();
        org.junit.Assert.assertNotNull(optionalDouble1);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 99.0d + "'", double3 == 99.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 99.0d + "'", double4 == 99.0d);
    }

    @Test
    public void test1729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1729");
        java.time.LocalTime localTime4 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime5 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime4);
        java.time.LocalTime localTime10 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime11 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime10);
        java.time.temporal.ChronoField chronoField12 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime14 = localTime10.with((java.time.temporal.TemporalField) chronoField12, (long) (short) 1);
        long long15 = localTime4.getLong((java.time.temporal.TemporalField) chronoField12);
        java.time.LocalTime localTime17 = localTime4.withSecond((int) (short) 1);
        java.time.temporal.ChronoField chronoField18 = java.time.temporal.ChronoField.SECOND_OF_DAY;
        java.time.temporal.ValueRange valueRange19 = localTime17.range((java.time.temporal.TemporalField) chronoField18);
        long long20 = valueRange19.getMaximum();
        long long21 = valueRange19.getSmallestMaximum();
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertTrue("'" + chronoField12 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField12.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 3601000000001L + "'", long15 == 3601000000001L);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertTrue("'" + chronoField18 + "' != '" + java.time.temporal.ChronoField.SECOND_OF_DAY + "'", chronoField18.equals(java.time.temporal.ChronoField.SECOND_OF_DAY));
        org.junit.Assert.assertNotNull(valueRange19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 86399L + "'", long20 == 86399L);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 86399L + "'", long21 == 86399L);
    }

    @Test
    public void test1730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1730");
        java.util.SortedMap<java.lang.String, java.nio.charset.Charset> strMap0 = java.nio.charset.Charset.availableCharsets();
        java.util.SortedMap<java.lang.String, java.nio.charset.Charset> strMap2 = strMap0.headMap("Optional.empty");
        // The following exception was thrown during execution in test generation
        try {
            java.util.SortedMap<java.lang.String, java.nio.charset.Charset> strMap5 = strMap0.subMap("2022-02-21T09:36:47.334Z", "");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: fromKey > toKey");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strMap0);
        org.junit.Assert.assertNotNull(strMap2);
    }

    @Test
    public void test1731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1731");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.Interval interval1 = localDate0.toInterval();
        int int2 = localDate0.getDayOfYear();
        java.util.TimeZone timeZone6 = null;
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forTimeZone(timeZone6);
        org.joda.time.DateMidnight dateMidnight8 = new org.joda.time.DateMidnight((long) 1970, dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 3600000, dateTimeZone7);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) 22, dateTimeZone7);
        org.joda.time.Interval interval11 = localDate0.toInterval(dateTimeZone7);
        boolean boolean13 = interval11.contains(0L);
        boolean boolean14 = interval11.containsNow();
        org.junit.Assert.assertNotNull(interval1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 52 + "'", int2 == 52);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
    }

    @Test
    public void test1732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1732");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 3, chronology1);
        org.joda.time.Period period3 = org.joda.time.Period.ZERO;
        org.joda.time.Period period4 = period3.normalizedStandard();
        org.joda.time.Period period6 = period4.minusMinutes((int) ' ');
        org.joda.time.Period period8 = period6.minusMonths((int) (byte) 0);
        org.joda.time.PeriodType periodType9 = period8.getPeriodType();
        org.joda.time.DateTime dateTime10 = dateTime2.minus((org.joda.time.ReadablePeriod) period8);
        org.joda.time.DateTime dateTime12 = dateTime2.plusHours(34);
        org.joda.time.DateTime dateTime14 = dateTime12.minusSeconds((int) '#');
        org.joda.time.Period period19 = new org.joda.time.Period((int) '#', 0, 2, (int) (short) 100);
        org.joda.time.Period period21 = period19.withSeconds(12);
        int int22 = period21.getMillis();
        org.joda.time.DateTime dateTime23 = dateTime14.plus((org.joda.time.ReadablePeriod) period21);
        org.joda.time.YearMonthDay yearMonthDay24 = dateTime23.toYearMonthDay();
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 100 + "'", int22 == 100);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(yearMonthDay24);
    }

    @Test
    public void test1733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1733");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.Interval interval1 = localDate0.toInterval();
        org.joda.time.LocalDate.Property property2 = localDate0.dayOfMonth();
        org.joda.time.LocalDate.Property property3 = localDate0.weekOfWeekyear();
        org.joda.time.DurationField durationField4 = property3.getRangeDurationField();
        org.junit.Assert.assertNotNull(interval1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(durationField4);
    }

    @Test
    public void test1734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1734");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.Duration duration2 = new org.joda.time.Duration(readableInstant0, readableInstant1);
        org.joda.time.Duration duration4 = duration2.withMillis((-1L));
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((long) 3, chronology6);
        org.joda.time.DateTime.Property property8 = dateTime7.dayOfYear();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight((java.lang.Object) dateTime7, chronology9);
        org.joda.time.DateMidnight dateMidnight12 = dateMidnight10.minusMonths((-1));
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight10.withDayOfYear((int) ' ');
        org.joda.time.PeriodType periodType15 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period16 = duration4.toPeriodFrom((org.joda.time.ReadableInstant) dateMidnight10, periodType15);
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.Duration duration19 = new org.joda.time.Duration(readableInstant17, readableInstant18);
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.PeriodType periodType21 = null;
        org.joda.time.Period period22 = duration19.toPeriodTo(readableInstant20, periodType21);
        long long23 = duration19.getStandardSeconds();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((long) 3, chronology25);
        org.joda.time.DateTime.Property property27 = dateTime26.dayOfYear();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateMidnight dateMidnight29 = new org.joda.time.DateMidnight((java.lang.Object) dateTime26, chronology28);
        org.joda.time.DateMidnight dateMidnight31 = dateMidnight29.minusMonths((-1));
        org.joda.time.DateMidnight dateMidnight33 = dateMidnight29.withDayOfYear((int) ' ');
        org.joda.time.Interval interval34 = duration19.toIntervalTo((org.joda.time.ReadableInstant) dateMidnight33);
        org.joda.time.PeriodType periodType36 = org.joda.time.PeriodType.time();
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod((long) 'a', periodType36);
        org.joda.time.Period period38 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight10, (org.joda.time.ReadableDuration) duration19, periodType36);
        org.joda.time.ReadableInstant readableInstant39 = null;
        org.joda.time.ReadableInstant readableInstant40 = null;
        org.joda.time.Duration duration41 = new org.joda.time.Duration(readableInstant39, readableInstant40);
        org.joda.time.Seconds seconds42 = duration41.toStandardSeconds();
        int int43 = seconds42.getSeconds();
        org.joda.time.DateMidnight dateMidnight45 = dateMidnight10.withPeriodAdded((org.joda.time.ReadablePeriod) seconds42, 0);
        org.joda.time.ReadableInstant readableInstant46 = null;
        org.joda.time.MutableInterval mutableInterval47 = new org.joda.time.MutableInterval((org.joda.time.ReadablePeriod) seconds42, readableInstant46);
        org.joda.time.ReadableInstant readableInstant48 = null;
        org.joda.time.ReadableInstant readableInstant49 = null;
        org.joda.time.Duration duration50 = new org.joda.time.Duration(readableInstant48, readableInstant49);
        org.joda.time.Duration duration52 = duration50.withMillis((-1L));
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.DateTime dateTime55 = new org.joda.time.DateTime((long) 3, chronology54);
        org.joda.time.DateTime.Property property56 = dateTime55.dayOfYear();
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.DateMidnight dateMidnight58 = new org.joda.time.DateMidnight((java.lang.Object) dateTime55, chronology57);
        org.joda.time.DateMidnight dateMidnight60 = dateMidnight58.minusMonths((-1));
        org.joda.time.DateMidnight dateMidnight62 = dateMidnight58.withDayOfYear((int) ' ');
        org.joda.time.PeriodType periodType63 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period64 = duration52.toPeriodFrom((org.joda.time.ReadableInstant) dateMidnight58, periodType63);
        org.joda.time.ReadableInstant readableInstant65 = null;
        org.joda.time.ReadableInstant readableInstant66 = null;
        org.joda.time.Duration duration67 = new org.joda.time.Duration(readableInstant65, readableInstant66);
        org.joda.time.ReadableInstant readableInstant68 = null;
        org.joda.time.PeriodType periodType69 = null;
        org.joda.time.Period period70 = duration67.toPeriodTo(readableInstant68, periodType69);
        long long71 = duration67.getStandardSeconds();
        org.joda.time.Chronology chronology73 = null;
        org.joda.time.DateTime dateTime74 = new org.joda.time.DateTime((long) 3, chronology73);
        org.joda.time.DateTime.Property property75 = dateTime74.dayOfYear();
        org.joda.time.Chronology chronology76 = null;
        org.joda.time.DateMidnight dateMidnight77 = new org.joda.time.DateMidnight((java.lang.Object) dateTime74, chronology76);
        org.joda.time.DateMidnight dateMidnight79 = dateMidnight77.minusMonths((-1));
        org.joda.time.DateMidnight dateMidnight81 = dateMidnight77.withDayOfYear((int) ' ');
        org.joda.time.Interval interval82 = duration67.toIntervalTo((org.joda.time.ReadableInstant) dateMidnight81);
        org.joda.time.PeriodType periodType84 = org.joda.time.PeriodType.time();
        org.joda.time.MutablePeriod mutablePeriod85 = new org.joda.time.MutablePeriod((long) 'a', periodType84);
        org.joda.time.Period period86 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight58, (org.joda.time.ReadableDuration) duration67, periodType84);
        org.joda.time.ReadableInstant readableInstant87 = null;
        org.joda.time.ReadableInstant readableInstant88 = null;
        org.joda.time.Duration duration89 = new org.joda.time.Duration(readableInstant87, readableInstant88);
        org.joda.time.Seconds seconds90 = duration89.toStandardSeconds();
        int int91 = seconds90.getSeconds();
        org.joda.time.DateMidnight dateMidnight93 = dateMidnight58.withPeriodAdded((org.joda.time.ReadablePeriod) seconds90, 0);
        org.joda.time.ReadableInstant readableInstant94 = null;
        org.joda.time.MutableInterval mutableInterval95 = new org.joda.time.MutableInterval((org.joda.time.ReadablePeriod) seconds90, readableInstant94);
        org.joda.time.Seconds seconds96 = seconds42.plus(seconds90);
        org.joda.time.DurationFieldType durationFieldType97 = seconds96.getFieldType();
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(periodType15);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateMidnight31);
        org.junit.Assert.assertNotNull(dateMidnight33);
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertNotNull(periodType36);
        org.junit.Assert.assertNotNull(seconds42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(dateMidnight45);
        org.junit.Assert.assertNotNull(duration52);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(dateMidnight60);
        org.junit.Assert.assertNotNull(dateMidnight62);
        org.junit.Assert.assertNotNull(periodType63);
        org.junit.Assert.assertNotNull(period64);
        org.junit.Assert.assertNotNull(period70);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 0L + "'", long71 == 0L);
        org.junit.Assert.assertNotNull(property75);
        org.junit.Assert.assertNotNull(dateMidnight79);
        org.junit.Assert.assertNotNull(dateMidnight81);
        org.junit.Assert.assertNotNull(interval82);
        org.junit.Assert.assertNotNull(periodType84);
        org.junit.Assert.assertNotNull(seconds90);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 0 + "'", int91 == 0);
        org.junit.Assert.assertNotNull(dateMidnight93);
        org.junit.Assert.assertNotNull(seconds96);
        org.junit.Assert.assertNotNull(durationFieldType97);
    }

    @Test
    public void test1735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1735");
        java.util.stream.DoubleStream doubleStream1 = java.util.stream.DoubleStream.of((double) 1970);
        doubleStream1.close();
        org.junit.Assert.assertNotNull(doubleStream1);
    }

    @Test
    public void test1736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1736");
        java.util.stream.IntStream intStream2 = java.util.stream.IntStream.rangeClosed(100, (int) '4');
        java.util.stream.IntStream intStream3 = intStream2.sequential();
        java.util.stream.IntStream intStream4 = intStream3.sequential();
        java.util.function.IntToDoubleFunction intToDoubleFunction5 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.DoubleStream doubleStream6 = intStream3.mapToDouble(intToDoubleFunction5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intStream2);
        org.junit.Assert.assertNotNull(intStream3);
        org.junit.Assert.assertNotNull(intStream4);
    }

    @Test
    public void test1737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1737");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withYearOfCentury((int) 'a');
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.plusSeconds(6);
        org.joda.time.DateTime dateTime6 = localDateTime3.toDateTime();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime3.minusMillis((int) '/');
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minusMonths(100);
        org.joda.time.Period period11 = org.joda.time.Period.ZERO;
        org.joda.time.Period period12 = period11.normalizedStandard();
        org.joda.time.Period period14 = period11.plusHours(2);
        org.joda.time.DurationFieldType durationFieldType15 = org.joda.time.DurationFieldType.hours();
        int int16 = period11.indexOf(durationFieldType15);
        boolean boolean17 = localDateTime10.equals((java.lang.Object) int16);
        org.joda.time.LocalDateTime.Property property18 = localDateTime10.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime10.withMillisOfDay(0);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime22 = localDateTime20.withMonthOfYear(3600000);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 3600000 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(durationFieldType15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 4 + "'", int16 == 4);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localDateTime20);
    }

    @Test
    public void test1738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1738");
        java.time.Clock clock0 = java.time.Clock.systemUTC();
        java.time.Duration duration2 = java.time.Duration.ofSeconds((long) 256);
        java.time.Clock clock3 = java.time.Clock.tick(clock0, duration2);
        java.time.Duration duration5 = java.time.Duration.ofMinutes((long) 3);
        java.time.Duration duration6 = duration5.abs();
        java.time.Clock clock7 = java.time.Clock.offset(clock0, duration5);
        java.time.LocalDate localDate8 = java.time.LocalDate.now(clock7);
        java.util.GregorianCalendar gregorianCalendar14 = new java.util.GregorianCalendar(12, 4096, 7, (-1), (int) (short) 10);
        int int15 = gregorianCalendar14.getWeeksInWeekYear();
        java.lang.String str16 = gregorianCalendar14.getCalendarType();
        java.time.ZonedDateTime zonedDateTime17 = gregorianCalendar14.toZonedDateTime();
        java.time.ZonedDateTime zonedDateTime19 = zonedDateTime17.minusMonths((long) 10);
        int int20 = zonedDateTime17.getMonthValue();
        java.time.LocalTime localTime25 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime26 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime25);
        java.time.LocalTime localTime31 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime32 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime31);
        java.time.temporal.ChronoField chronoField33 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime35 = localTime31.with((java.time.temporal.TemporalField) chronoField33, (long) (short) 1);
        long long36 = localTime25.getLong((java.time.temporal.TemporalField) chronoField33);
        long long37 = zonedDateTime17.getLong((java.time.temporal.TemporalField) chronoField33);
        java.time.ZoneOffset zoneOffset40 = java.time.ZoneOffset.ofHoursMinutes(1, 10);
        java.time.LocalDate localDate41 = java.time.LocalDate.now((java.time.ZoneId) zoneOffset40);
        java.time.LocalDate localDate42 = java.time.LocalDate.now((java.time.ZoneId) zoneOffset40);
        java.time.chrono.ChronoZonedDateTime<java.time.LocalDate> localDateChronoZonedDateTime43 = zonedDateTime17.withZoneSameLocal((java.time.ZoneId) zoneOffset40);
        java.time.format.DateTimeFormatter dateTimeFormatter44 = java.time.format.DateTimeFormatter.ISO_DATE;
        java.lang.String str45 = zonedDateTime17.format(dateTimeFormatter44);
        java.time.chrono.ChronoZonedDateTime<?> wildcardChronoZonedDateTime46 = java.time.chrono.ChronoZonedDateTime.from((java.time.temporal.TemporalAccessor) zonedDateTime17);
        java.time.LocalDate localDate49 = java.time.LocalDate.ofEpochDay((long) ' ');
        int int50 = localDate49.getMonthValue();
        org.joda.time.Period period51 = org.joda.time.Period.ZERO;
        org.joda.time.Period period52 = period51.normalizedStandard();
        org.joda.time.Period period54 = period51.plusHours(2);
        java.time.chrono.IsoEra isoEra55 = java.time.chrono.IsoEra.CE;
        boolean boolean56 = period54.equals((java.lang.Object) isoEra55);
        java.time.LocalTime localTime61 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime62 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime61);
        java.time.LocalTime localTime67 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime68 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime67);
        java.time.temporal.ChronoField chronoField69 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime71 = localTime67.with((java.time.temporal.TemporalField) chronoField69, (long) (short) 1);
        long long72 = localTime61.getLong((java.time.temporal.TemporalField) chronoField69);
        boolean boolean73 = isoEra55.isSupported((java.time.temporal.TemporalField) chronoField69);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery74 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period75 = isoEra55.query(periodTemporalQuery74);
        boolean boolean76 = period75.isNegative();
        java.time.Period period78 = period75.plusDays((long) ' ');
        java.time.temporal.ChronoField chronoField79 = java.time.temporal.ChronoField.SECOND_OF_DAY;
        boolean boolean80 = period75.equals((java.lang.Object) chronoField79);
        boolean boolean81 = localDate49.isSupported((java.time.temporal.TemporalField) chronoField79);
        java.time.temporal.TemporalUnit temporalUnit82 = chronoField79.getRangeUnit();
        java.time.chrono.ChronoZonedDateTime<java.time.LocalDate> localDateChronoZonedDateTime83 = zonedDateTime17.minus(0L, temporalUnit82);
        boolean boolean84 = localDate8.isSupported(temporalUnit82);
        int int85 = localDate8.getMonthValue();
        org.junit.Assert.assertNotNull(clock0);
        org.junit.Assert.assertNotNull(duration2);
        org.junit.Assert.assertNotNull(clock3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(clock7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 52 + "'", int15 == 52);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "gregory" + "'", str16, "gregory");
        org.junit.Assert.assertNotNull(zonedDateTime17);
        org.junit.Assert.assertNotNull(zonedDateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 5 + "'", int20 == 5);
        org.junit.Assert.assertNotNull(localTime25);
        org.junit.Assert.assertNotNull(localTime26);
        org.junit.Assert.assertNotNull(localTime31);
        org.junit.Assert.assertNotNull(localTime32);
        org.junit.Assert.assertTrue("'" + chronoField33 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField33.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime35);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 3601000000001L + "'", long36 == 3601000000001L);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 83400000000000L + "'", long37 == 83400000000000L);
        org.junit.Assert.assertNotNull(zoneOffset40);
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertNotNull(localDateChronoZonedDateTime43);
        org.junit.Assert.assertNotNull(dateTimeFormatter44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "0353-05-07Z" + "'", str45, "0353-05-07Z");
        org.junit.Assert.assertNotNull(wildcardChronoZonedDateTime46);
        org.junit.Assert.assertNotNull(localDate49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2 + "'", int50 == 2);
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertNotNull(period52);
        org.junit.Assert.assertNotNull(period54);
        org.junit.Assert.assertTrue("'" + isoEra55 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra55.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(localTime61);
        org.junit.Assert.assertNotNull(localTime62);
        org.junit.Assert.assertNotNull(localTime67);
        org.junit.Assert.assertNotNull(localTime68);
        org.junit.Assert.assertTrue("'" + chronoField69 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField69.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime71);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 3601000000001L + "'", long72 == 3601000000001L);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(periodTemporalQuery74);
        org.junit.Assert.assertNotNull(period75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(period78);
        org.junit.Assert.assertTrue("'" + chronoField79 + "' != '" + java.time.temporal.ChronoField.SECOND_OF_DAY + "'", chronoField79.equals(java.time.temporal.ChronoField.SECOND_OF_DAY));
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + temporalUnit82 + "' != '" + java.time.temporal.ChronoUnit.DAYS + "'", temporalUnit82.equals(java.time.temporal.ChronoUnit.DAYS));
        org.junit.Assert.assertNotNull(localDateChronoZonedDateTime83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 2 + "'", int85 == 2);
    }

    @Test
    public void test1739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1739");
        java.util.GregorianCalendar gregorianCalendar5 = new java.util.GregorianCalendar(12, 4096, 7, (-1), (int) (short) 10);
        int int6 = gregorianCalendar5.getWeeksInWeekYear();
        java.lang.String str7 = gregorianCalendar5.getCalendarType();
        java.time.ZonedDateTime zonedDateTime8 = gregorianCalendar5.toZonedDateTime();
        java.util.Date date15 = new java.util.Date((int) 'a', 3, 0, (-1), (int) '/', 28);
        int int16 = date15.getTimezoneOffset();
        gregorianCalendar5.setGregorianChange(date15);
        boolean boolean19 = gregorianCalendar5.isLeapYear((int) 'u');
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 52 + "'", int6 == 52);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "gregory" + "'", str7, "gregory");
        org.junit.Assert.assertNotNull(zonedDateTime8);
        org.junit.Assert.assertEquals(date15.toString(), "Sun Mar 30 23:47:28 UTC 1997");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test1740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1740");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Instant instant2 = org.joda.time.Instant.parse("P1WT97H0.035S", dateTimeFormatter1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1741");
        org.joda.time.YearMonthDay yearMonthDay0 = new org.joda.time.YearMonthDay();
        java.util.TimeZone timeZone3 = null;
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forTimeZone(timeZone3);
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight((long) 1970, dateTimeZone4);
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((long) 3600000, dateTimeZone4);
        org.joda.time.DateMidnight dateMidnight7 = yearMonthDay0.toDateMidnight(dateTimeZone4);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime(chronology8);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime9.withField(dateTimeFieldType10, (int) 'a');
        java.time.LocalDateTime localDateTime13 = java.time.LocalDateTime.now();
        java.time.temporal.ChronoField chronoField14 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime16 = localDateTime13.with((java.time.temporal.TemporalField) chronoField14, (long) 10);
        java.time.LocalDateTime localDateTime18 = localDateTime13.minusMinutes((long) 12);
        org.joda.time.Period period19 = org.joda.time.Period.ZERO;
        org.joda.time.Period period20 = period19.normalizedStandard();
        org.joda.time.Period period22 = period19.plusHours(2);
        org.joda.time.DurationFieldType durationFieldType23 = org.joda.time.DurationFieldType.hours();
        int int24 = period19.indexOf(durationFieldType23);
        org.joda.time.Weeks weeks25 = period19.toStandardWeeks();
        boolean boolean26 = localDateTime18.equals((java.lang.Object) weeks25);
        org.joda.time.PeriodType periodType27 = weeks25.getPeriodType();
        org.joda.time.PeriodType periodType28 = periodType27.withDaysRemoved();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period29 = new org.joda.time.Period((org.joda.time.ReadablePartial) yearMonthDay0, (org.joda.time.ReadablePartial) localDateTime9, periodType27);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: ReadablePartial objects must have the same set of fields");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + chronoField14 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField14.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(durationFieldType23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 4 + "'", int24 == 4);
        org.junit.Assert.assertNotNull(weeks25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(periodType27);
        org.junit.Assert.assertNotNull(periodType28);
    }

    @Test
    public void test1742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1742");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 3, chronology1);
        org.joda.time.DateTime.Property property3 = dateTime2.dayOfYear();
        org.joda.time.Interval interval4 = property3.toInterval();
        org.joda.time.DateTime dateTime5 = property3.withMinimumValue();
        org.joda.time.DateTime dateTime6 = property3.getDateTime();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime6);
    }

    @Test
    public void test1743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1743");
        java.util.GregorianCalendar gregorianCalendar5 = new java.util.GregorianCalendar(12, 4096, 7, (-1), (int) (short) 10);
        int int6 = gregorianCalendar5.getWeeksInWeekYear();
        java.lang.String str7 = gregorianCalendar5.getCalendarType();
        java.time.ZonedDateTime zonedDateTime8 = gregorianCalendar5.toZonedDateTime();
        java.time.Instant instant9 = gregorianCalendar5.toInstant();
        // The following exception was thrown during execution in test generation
        try {
            int int11 = gregorianCalendar5.getMaximum(256);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 256");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 52 + "'", int6 == 52);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "gregory" + "'", str7, "gregory");
        org.junit.Assert.assertNotNull(zonedDateTime8);
        org.junit.Assert.assertNotNull(instant9);
    }

    @Test
    public void test1744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1744");
        java.util.GregorianCalendar gregorianCalendar5 = new java.util.GregorianCalendar(12, 4096, 7, (-1), (int) (short) 10);
        int int6 = gregorianCalendar5.getWeeksInWeekYear();
        java.lang.String str7 = gregorianCalendar5.getCalendarType();
        java.time.ZonedDateTime zonedDateTime8 = gregorianCalendar5.toZonedDateTime();
        java.util.Date date15 = new java.util.Date((int) 'a', 3, 0, (-1), (int) '/', 28);
        int int16 = date15.getTimezoneOffset();
        gregorianCalendar5.setGregorianChange(date15);
        // The following exception was thrown during execution in test generation
        try {
            int int19 = gregorianCalendar5.getGreatestMinimum(601);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 601");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 52 + "'", int6 == 52);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "gregory" + "'", str7, "gregory");
        org.junit.Assert.assertNotNull(zonedDateTime8);
        org.junit.Assert.assertEquals(date15.toString(), "Sun Mar 30 23:47:28 UTC 1997");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
    }

    @Test
    public void test1745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1745");
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay((long) 10800000);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime3.withField(dateTimeFieldType4, (int) 'a');
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay8 = timeOfDay1.withField(dateTimeFieldType4, 120);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'weekyear' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertNotNull(localDateTime6);
    }

    @Test
    public void test1746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1746");
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) 3, chronology7);
        org.joda.time.DateTime.Property property9 = dateTime8.dayOfYear();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight((java.lang.Object) dateTime8, chronology10);
        org.joda.time.MutableDateTime mutableDateTime12 = dateTime8.toMutableDateTime();
        mutableDateTime12.addYears((int) (short) 100);
        org.joda.time.MutableDateTime.Property property15 = mutableDateTime12.dayOfWeek();
        org.joda.time.MutableDateTime.Property property16 = mutableDateTime12.year();
        java.util.TimeZone timeZone17 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forTimeZone(timeZone17);
        mutableDateTime12.setZone(dateTimeZone18);
        java.util.Locale locale21 = java.util.Locale.TAIWAN;
        java.lang.String str22 = dateTimeZone18.getShortName((long) 64, locale21);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) 3, chronology24);
        org.joda.time.DateTime.Property property26 = dateTime25.dayOfYear();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.DateMidnight dateMidnight28 = new org.joda.time.DateMidnight((java.lang.Object) dateTime25, chronology27);
        org.joda.time.MutableDateTime mutableDateTime29 = dateTime25.toMutableDateTime();
        mutableDateTime29.addYears((int) (short) 100);
        org.joda.time.MutableDateTime.Property property32 = mutableDateTime29.dayOfWeek();
        org.joda.time.MutableDateTime.Property property33 = mutableDateTime29.year();
        java.util.TimeZone timeZone34 = null;
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forTimeZone(timeZone34);
        mutableDateTime29.setZone(dateTimeZone35);
        java.util.Locale locale38 = java.util.Locale.TAIWAN;
        java.lang.String str39 = dateTimeZone35.getShortName((long) 64, locale38);
        long long41 = dateTimeZone18.getMillisKeepLocal(dateTimeZone35, (long) 64);
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime(dateTimeZone18);
        org.joda.time.DateTime dateTime43 = org.joda.time.DateTime.now(dateTimeZone18);
        org.joda.time.chrono.EthiopicChronology ethiopicChronology44 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone18);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime(292269054, (int) '\uffff', 20, 17, 741000000, (-32769), dateTimeZone18);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 741000000 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+00:00" + "'", str22, "+00:00");
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(mutableDateTime29);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "+00:00" + "'", str39, "+00:00");
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 64L + "'", long41 == 64L);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(ethiopicChronology44);
    }

    @Test
    public void test1747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1747");
        java.time.Clock clock0 = java.time.Clock.systemUTC();
        java.time.Duration duration2 = java.time.Duration.ofSeconds((long) 256);
        java.time.Clock clock3 = java.time.Clock.tick(clock0, duration2);
        java.time.Duration duration5 = java.time.Duration.ofMinutes((long) 3);
        java.time.Duration duration6 = duration5.abs();
        java.time.Clock clock7 = java.time.Clock.offset(clock0, duration5);
        java.time.ZonedDateTime zonedDateTime8 = java.time.ZonedDateTime.now(clock7);
        java.time.LocalDateTime localDateTime9 = java.time.LocalDateTime.now(clock7);
        // The following exception was thrown during execution in test generation
        try {
            java.time.LocalDateTime localDateTime11 = localDateTime9.withSecond((-201));
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for SecondOfMinute (valid values 0 - 59): -201");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(clock0);
        org.junit.Assert.assertNotNull(duration2);
        org.junit.Assert.assertNotNull(clock3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(clock7);
        org.junit.Assert.assertNotNull(zonedDateTime8);
        org.junit.Assert.assertNotNull(localDateTime9);
    }

    @Test
    public void test1748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1748");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MIN;
        java.time.LocalDateTime localDateTime2 = localDateTime0.withMinute((int) ' ');
        java.util.Properties properties4 = null;
        java.util.Properties properties5 = new java.util.Properties(properties4);
        java.time.LocalTime localTime10 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime11 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime10);
        java.time.LocalTime localTime16 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime17 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime16);
        java.time.temporal.ChronoField chronoField18 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime20 = localTime16.with((java.time.temporal.TemporalField) chronoField18, (long) (short) 1);
        long long21 = localTime10.getLong((java.time.temporal.TemporalField) chronoField18);
        java.time.LocalTime localTime23 = localTime10.withSecond((int) (short) 1);
        java.lang.Object obj25 = properties5.put((java.lang.Object) localTime23, (java.lang.Object) "117");
        boolean boolean27 = properties5.containsValue((java.lang.Object) 6);
        java.time.LocalDate localDate30 = java.time.LocalDate.ofEpochDay((long) ' ');
        int int31 = localDate30.getMonthValue();
        java.lang.Object obj32 = properties5.replace((java.lang.Object) 21, (java.lang.Object) localDate30);
        java.time.LocalDateTime localDateTime33 = java.time.LocalDateTime.MIN;
        java.time.Month month34 = java.time.Month.NOVEMBER;
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime35 = localDateTime33.with((java.time.temporal.TemporalAdjuster) month34);
        java.time.LocalDate localDate38 = java.time.LocalDate.ofEpochDay((long) ' ');
        int int39 = localDate38.getMonthValue();
        org.joda.time.Period period40 = org.joda.time.Period.ZERO;
        org.joda.time.Period period41 = period40.normalizedStandard();
        org.joda.time.Period period43 = period40.plusHours(2);
        java.time.chrono.IsoEra isoEra44 = java.time.chrono.IsoEra.CE;
        boolean boolean45 = period43.equals((java.lang.Object) isoEra44);
        java.time.LocalTime localTime50 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime51 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime50);
        java.time.LocalTime localTime56 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime57 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime56);
        java.time.temporal.ChronoField chronoField58 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime60 = localTime56.with((java.time.temporal.TemporalField) chronoField58, (long) (short) 1);
        long long61 = localTime50.getLong((java.time.temporal.TemporalField) chronoField58);
        boolean boolean62 = isoEra44.isSupported((java.time.temporal.TemporalField) chronoField58);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery63 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period64 = isoEra44.query(periodTemporalQuery63);
        boolean boolean65 = period64.isNegative();
        java.time.Period period67 = period64.plusDays((long) ' ');
        java.time.temporal.ChronoField chronoField68 = java.time.temporal.ChronoField.SECOND_OF_DAY;
        boolean boolean69 = period64.equals((java.lang.Object) chronoField68);
        boolean boolean70 = localDate38.isSupported((java.time.temporal.TemporalField) chronoField68);
        java.time.temporal.TemporalUnit temporalUnit71 = chronoField68.getRangeUnit();
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime72 = localDateChronoLocalDateTime35.plus(1L, temporalUnit71);
        boolean boolean73 = localDate30.isSupported(temporalUnit71);
        // The following exception was thrown during execution in test generation
        try {
            java.time.LocalDateTime localDateTime74 = localDateTime2.minus(185068800000L, temporalUnit71);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for Year (valid values -999999999 - 999999999): -1506701164");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertTrue("'" + chronoField18 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField18.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 3601000000001L + "'", long21 == 3601000000001L);
        org.junit.Assert.assertNotNull(localTime23);
        org.junit.Assert.assertNull(obj25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2 + "'", int31 == 2);
        org.junit.Assert.assertNull(obj32);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertTrue("'" + month34 + "' != '" + java.time.Month.NOVEMBER + "'", month34.equals(java.time.Month.NOVEMBER));
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime35);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2 + "'", int39 == 2);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertTrue("'" + isoEra44 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra44.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(localTime50);
        org.junit.Assert.assertNotNull(localTime51);
        org.junit.Assert.assertNotNull(localTime56);
        org.junit.Assert.assertNotNull(localTime57);
        org.junit.Assert.assertTrue("'" + chronoField58 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField58.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime60);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 3601000000001L + "'", long61 == 3601000000001L);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(periodTemporalQuery63);
        org.junit.Assert.assertNotNull(period64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(period67);
        org.junit.Assert.assertTrue("'" + chronoField68 + "' != '" + java.time.temporal.ChronoField.SECOND_OF_DAY + "'", chronoField68.equals(java.time.temporal.ChronoField.SECOND_OF_DAY));
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + temporalUnit71 + "' != '" + java.time.temporal.ChronoUnit.DAYS + "'", temporalUnit71.equals(java.time.temporal.ChronoUnit.DAYS));
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
    }

    @Test
    public void test1749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1749");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.nio.LongBuffer longBuffer3 = java.nio.LongBuffer.allocate((int) (short) 0);
        java.nio.Buffer buffer4 = longBuffer3.mark();
        boolean boolean5 = properties1.containsKey((java.lang.Object) longBuffer3);
        java.nio.charset.Charset charset6 = java.nio.charset.Charset.defaultCharset();
        boolean boolean7 = charset6.canEncode();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) 3, chronology9);
        org.joda.time.DateTime.Property property11 = dateTime10.dayOfYear();
        java.lang.Object obj12 = properties1.getOrDefault((java.lang.Object) boolean7, (java.lang.Object) property11);
        properties1.clear();
        int int14 = properties1.size();
        java.util.Map<java.lang.String, java.lang.String> strMap15 = java.time.ZoneId.SHORT_IDS;
        int int16 = strMap15.size();
        properties1.putAll(strMap15);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str20 = strMap15.put("2022-02-21T09:36:42.851Z", "2021-12-02T09:35:53.233");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(longBuffer3);
        org.junit.Assert.assertNotNull(buffer4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(charset6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(obj12);
        org.junit.Assert.assertEquals(obj12.toString(), "Property[dayOfYear]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj12), "Property[dayOfYear]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj12), "Property[dayOfYear]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(strMap15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 28 + "'", int16 == 28);
    }

    @Test
    public void test1750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1750");
        java.nio.LongBuffer longBuffer1 = java.nio.LongBuffer.allocate((int) (short) 0);
        java.nio.LongBuffer longBuffer3 = java.nio.LongBuffer.allocate((int) (short) 0);
        long[] longArray4 = longBuffer3.array();
        java.nio.LongBuffer longBuffer5 = longBuffer1.put(longArray4);
        java.nio.LongBuffer longBuffer7 = java.nio.LongBuffer.allocate((int) (short) 0);
        long[] longArray8 = longBuffer7.array();
        java.nio.LongBuffer longBuffer9 = longBuffer1.put(longArray8);
        java.nio.LongBuffer longBuffer10 = longBuffer1.compact();
        org.junit.Assert.assertNotNull(longBuffer1);
        org.junit.Assert.assertNotNull(longBuffer3);
        org.junit.Assert.assertNotNull(longArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray4), "[]");
        org.junit.Assert.assertNotNull(longBuffer5);
        org.junit.Assert.assertNotNull(longBuffer7);
        org.junit.Assert.assertNotNull(longArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray8), "[]");
        org.junit.Assert.assertNotNull(longBuffer9);
        org.junit.Assert.assertNotNull(longBuffer10);
    }

    @Test
    public void test1751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1751");
        org.joda.time.PeriodType periodType0 = org.joda.time.PeriodType.days();
        org.joda.time.PeriodType periodType1 = periodType0.withMinutesRemoved();
        org.junit.Assert.assertNotNull(periodType0);
        org.junit.Assert.assertNotNull(periodType1);
    }

    @Test
    public void test1752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1752");
        java.nio.LongBuffer longBuffer1 = java.nio.LongBuffer.allocate((int) (short) 0);
        java.nio.Buffer buffer2 = longBuffer1.mark();
        java.nio.LongBuffer longBuffer4 = java.nio.LongBuffer.allocate((int) (short) 0);
        long[] longArray5 = longBuffer4.array();
        java.util.stream.LongStream longStream6 = java.util.stream.LongStream.of(longArray5);
        java.util.stream.LongStream longStream7 = java.util.stream.LongStream.of(longArray5);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.LongBuffer longBuffer10 = longBuffer1.put(longArray5, 2097, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(longBuffer1);
        org.junit.Assert.assertNotNull(buffer2);
        org.junit.Assert.assertNotNull(longBuffer4);
        org.junit.Assert.assertNotNull(longArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray5), "[]");
        org.junit.Assert.assertNotNull(longStream6);
        org.junit.Assert.assertNotNull(longStream7);
    }

    @Test
    public void test1753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1753");
        // The following exception was thrown during execution in test generation
        try {
            java.time.LocalDate localDate3 = java.time.LocalDate.of(576, 22, 46);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for MonthOfYear (valid values 1 - 12): 22");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1754");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.Duration duration2 = new org.joda.time.Duration(readableInstant0, readableInstant1);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = duration2.toPeriodTo(readableInstant3, periodType4);
        long long6 = duration2.getStandardSeconds();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 3, chronology8);
        org.joda.time.DateTime.Property property10 = dateTime9.dayOfYear();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight((java.lang.Object) dateTime9, chronology11);
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight12.minusMonths((-1));
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight12.withDayOfYear((int) ' ');
        org.joda.time.Interval interval17 = duration2.toIntervalTo((org.joda.time.ReadableInstant) dateMidnight16);
        org.joda.time.DateMidnight.Property property18 = dateMidnight16.dayOfYear();
        org.joda.time.DateMidnight dateMidnight20 = property18.addToCopy(22);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight22 = property18.setCopy("AD");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"AD\" for dayOfYear is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateMidnight20);
    }

    @Test
    public void test1755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1755");
        java.util.IntSummaryStatistics intSummaryStatistics0 = new java.util.IntSummaryStatistics();
        intSummaryStatistics0.accept(57);
        long long3 = intSummaryStatistics0.getSum();
        java.lang.String str4 = intSummaryStatistics0.toString();
        org.junit.Assert.assertEquals(intSummaryStatistics0.toString(), "IntSummaryStatistics{count=1, sum=57, min=57, average=57.000000, max=57}");
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 57L + "'", long3 == 57L);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "IntSummaryStatistics{count=1, sum=57, min=57, average=57.000000, max=57}" + "'", str4, "IntSummaryStatistics{count=1, sum=57, min=57, average=57.000000, max=57}");
    }

    @Test
    public void test1756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1756");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.Duration duration2 = new org.joda.time.Duration(readableInstant0, readableInstant1);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = duration2.toPeriodTo(readableInstant3, periodType4);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.Duration duration8 = new org.joda.time.Duration(readableInstant6, readableInstant7);
        long long9 = duration8.getMillis();
        boolean boolean10 = duration2.isShorterThan((org.joda.time.ReadableDuration) duration8);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) 3, chronology12);
        org.joda.time.DateTime.Property property14 = dateTime13.dayOfYear();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight((java.lang.Object) dateTime13, chronology15);
        org.joda.time.MutableDateTime mutableDateTime17 = dateTime13.toMutableDateTime();
        mutableDateTime17.addYears((int) (short) 100);
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime17.dayOfWeek();
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime17.year();
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime17.weekyear();
        boolean boolean23 = duration2.equals((java.lang.Object) mutableDateTime17);
        mutableDateTime17.addMonths((int) ' ');
        mutableDateTime17.add((long) (byte) 10);
        org.joda.time.Period period28 = org.joda.time.Period.ZERO;
        org.joda.time.Period period29 = period28.normalizedStandard();
        org.joda.time.Period period31 = period28.plusHours(2);
        java.time.chrono.IsoEra isoEra32 = java.time.chrono.IsoEra.CE;
        boolean boolean33 = period31.equals((java.lang.Object) isoEra32);
        int int34 = period31.getMinutes();
        mutableDateTime17.add((org.joda.time.ReadablePeriod) period31);
        java.util.TimeZone timeZone37 = null;
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forTimeZone(timeZone37);
        org.joda.time.DateMidnight dateMidnight39 = new org.joda.time.DateMidnight((long) 1970, dateTimeZone38);
        long long42 = dateTimeZone38.convertLocalToUTC((long) 3, false);
        long long45 = dateTimeZone38.convertLocalToUTC(0L, true);
        mutableDateTime17.setZoneRetainFields(dateTimeZone38);
        java.lang.String str47 = dateTimeZone38.toString();
        org.joda.time.chrono.EthiopicChronology ethiopicChronology48 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone38);
        org.joda.time.DateTimeField dateTimeField49 = ethiopicChronology48.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone50 = ethiopicChronology48.getZone();
        org.joda.time.DateTimeField dateTimeField51 = ethiopicChronology48.era();
        org.joda.time.DateTimeField dateTimeField52 = ethiopicChronology48.secondOfDay();
        org.joda.time.DateTimeField dateTimeField53 = ethiopicChronology48.minuteOfHour();
        org.joda.time.DurationField durationField54 = ethiopicChronology48.months();
        org.joda.time.DateTimeField dateTimeField55 = ethiopicChronology48.monthOfYear();
        org.joda.time.DateTimeField dateTimeField56 = ethiopicChronology48.hourOfHalfday();
        boolean boolean58 = dateTimeField56.isLeap(1870L);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertTrue("'" + isoEra32 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra32.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 3L + "'", long42 == 3L);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Etc/UTC" + "'", str47, "Etc/UTC");
        org.junit.Assert.assertNotNull(ethiopicChronology48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(durationField54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
    }

    @Test
    public void test1757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1757");
        java.time.LocalDate localDate1 = java.time.LocalDate.ofEpochDay((long) ' ');
        java.time.OffsetTime offsetTime2 = java.time.OffsetTime.MAX;
        java.time.LocalTime localTime3 = offsetTime2.toLocalTime();
        java.lang.String str4 = offsetTime2.toString();
        java.time.Duration duration5 = java.time.Duration.ZERO;
        java.lang.String str6 = duration5.toString();
        java.time.OffsetTime offsetTime7 = offsetTime2.plus((java.time.temporal.TemporalAmount) duration5);
        java.time.LocalTime localTime8 = offsetTime2.toLocalTime();
        java.time.chrono.ChronoLocalDateTime<?> wildcardChronoLocalDateTime9 = localDate1.atTime(localTime8);
        java.time.LocalDate localDate11 = localDate1.minusWeeks((long) 2097);
        java.util.TimeZone timeZone13 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forTimeZone(timeZone13);
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight((long) 1970, dateTimeZone14);
        long long18 = dateTimeZone14.convertLocalToUTC((long) 3, false);
        long long21 = dateTimeZone14.convertLocalToUTC(0L, true);
        boolean boolean22 = localDate1.equals((java.lang.Object) true);
        int int23 = localDate1.lengthOfMonth();
        java.time.LocalDate localDate26 = java.time.LocalDate.ofEpochDay((long) ' ');
        int int27 = localDate26.getMonthValue();
        org.joda.time.Period period28 = org.joda.time.Period.ZERO;
        org.joda.time.Period period29 = period28.normalizedStandard();
        org.joda.time.Period period31 = period28.plusHours(2);
        java.time.chrono.IsoEra isoEra32 = java.time.chrono.IsoEra.CE;
        boolean boolean33 = period31.equals((java.lang.Object) isoEra32);
        java.time.LocalTime localTime38 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime39 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime38);
        java.time.LocalTime localTime44 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime45 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime44);
        java.time.temporal.ChronoField chronoField46 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime48 = localTime44.with((java.time.temporal.TemporalField) chronoField46, (long) (short) 1);
        long long49 = localTime38.getLong((java.time.temporal.TemporalField) chronoField46);
        boolean boolean50 = isoEra32.isSupported((java.time.temporal.TemporalField) chronoField46);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery51 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period52 = isoEra32.query(periodTemporalQuery51);
        boolean boolean53 = period52.isNegative();
        java.time.Period period55 = period52.plusDays((long) ' ');
        java.time.temporal.ChronoField chronoField56 = java.time.temporal.ChronoField.SECOND_OF_DAY;
        boolean boolean57 = period52.equals((java.lang.Object) chronoField56);
        boolean boolean58 = localDate26.isSupported((java.time.temporal.TemporalField) chronoField56);
        java.time.temporal.TemporalUnit temporalUnit59 = chronoField56.getRangeUnit();
        java.time.chrono.ChronoLocalDate chronoLocalDate60 = localDate1.minus((long) (-1), temporalUnit59);
        java.time.format.DateTimeFormatter dateTimeFormatter61 = java.time.format.DateTimeFormatter.ISO_DATE;
        java.lang.String str62 = dateTimeFormatter61.toString();
        java.time.LocalDateTime localDateTime63 = java.time.LocalDateTime.now();
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery64 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period65 = localDateTime63.query(periodTemporalQuery64);
        java.text.Format format66 = dateTimeFormatter61.toFormat(periodTemporalQuery64);
        java.time.Period period67 = chronoLocalDate60.query(periodTemporalQuery64);
        java.util.Optional<java.time.Period> periodOptional68 = java.util.Optional.of(period67);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime69 = new org.joda.time.LocalTime((java.lang.Object) period67);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: java.time.Period");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate1);
        org.junit.Assert.assertNotNull(offsetTime2);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "23:59:59.999999999-18:00" + "'", str4, "23:59:59.999999999-18:00");
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "PT0S" + "'", str6, "PT0S");
        org.junit.Assert.assertNotNull(offsetTime7);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(wildcardChronoLocalDateTime9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 3L + "'", long18 == 3L);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 28 + "'", int23 == 28);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2 + "'", int27 == 2);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertTrue("'" + isoEra32 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra32.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(localTime38);
        org.junit.Assert.assertNotNull(localTime39);
        org.junit.Assert.assertNotNull(localTime44);
        org.junit.Assert.assertNotNull(localTime45);
        org.junit.Assert.assertTrue("'" + chronoField46 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField46.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime48);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 3601000000001L + "'", long49 == 3601000000001L);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(periodTemporalQuery51);
        org.junit.Assert.assertNotNull(period52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(period55);
        org.junit.Assert.assertTrue("'" + chronoField56 + "' != '" + java.time.temporal.ChronoField.SECOND_OF_DAY + "'", chronoField56.equals(java.time.temporal.ChronoField.SECOND_OF_DAY));
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + temporalUnit59 + "' != '" + java.time.temporal.ChronoUnit.DAYS + "'", temporalUnit59.equals(java.time.temporal.ChronoUnit.DAYS));
        org.junit.Assert.assertNotNull(chronoLocalDate60);
        org.junit.Assert.assertNotNull(dateTimeFormatter61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "ParseCaseSensitive(false)(Value(Year,4,10,EXCEEDS_PAD)'-'Value(MonthOfYear,2)'-'Value(DayOfMonth,2))[Offset(+HH:MM:ss,'Z')]" + "'", str62, "ParseCaseSensitive(false)(Value(Year,4,10,EXCEEDS_PAD)'-'Value(MonthOfYear,2)'-'Value(DayOfMonth,2))[Offset(+HH:MM:ss,'Z')]");
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNotNull(periodTemporalQuery64);
        org.junit.Assert.assertNotNull(period65);
        org.junit.Assert.assertNotNull(format66);
        org.junit.Assert.assertNotNull(period67);
        org.junit.Assert.assertNotNull(periodOptional68);
    }

    @Test
    public void test1758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1758");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes2 = minutes0.minus(12);
        java.lang.String str3 = minutes0.toString();
        org.joda.time.Minutes minutes4 = minutes0.negated();
        org.joda.time.Minutes minutes5 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes7 = minutes5.minus(12);
        java.lang.String str8 = minutes5.toString();
        org.joda.time.Minutes minutes9 = minutes5.negated();
        java.lang.String str10 = minutes5.toString();
        org.joda.time.Minutes minutes11 = minutes0.minus(minutes5);
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "PT2147483647M" + "'", str3, "PT2147483647M");
        org.junit.Assert.assertNotNull(minutes4);
        org.junit.Assert.assertNotNull(minutes5);
        org.junit.Assert.assertNotNull(minutes7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "PT2147483647M" + "'", str8, "PT2147483647M");
        org.junit.Assert.assertNotNull(minutes9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "PT2147483647M" + "'", str10, "PT2147483647M");
        org.junit.Assert.assertNotNull(minutes11);
    }

    @Test
    public void test1759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1759");
        // The following exception was thrown during execution in test generation
        try {
            java.net.URL uRL4 = new java.net.URL("zh-TW", "2022-02-21T09:34:48.151Z", 45, "NanoOfDay");
            org.junit.Assert.fail("Expected exception of type java.net.MalformedURLException; message: unknown protocol: zh-tw");
        } catch (java.net.MalformedURLException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1760");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 3, chronology1);
        org.joda.time.DateTime.Property property3 = dateTime2.dayOfYear();
        org.joda.time.Interval interval4 = property3.toInterval();
        org.joda.time.DateTimeField dateTimeField5 = property3.getField();
        org.joda.time.DateTime dateTime7 = property3.addToCopy((long) (byte) 1);
        org.joda.time.DateTimeField dateTimeField8 = property3.getField();
        boolean boolean9 = dateTimeField8.isLenient();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test1761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1761");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 3, chronology1);
        org.joda.time.DateTime.Property property3 = dateTime2.dayOfYear();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight((java.lang.Object) dateTime2, chronology4);
        org.joda.time.MutableDateTime mutableDateTime6 = dateTime2.toMutableDateTime();
        org.joda.time.Days days7 = org.joda.time.Days.ONE;
        org.joda.time.MutableInterval mutableInterval8 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadablePeriod) days7);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) 3, chronology10);
        org.joda.time.DateTime.Property property12 = dateTime11.dayOfYear();
        org.joda.time.Interval interval13 = property12.toInterval();
        mutableInterval8.setInterval((org.joda.time.ReadableInterval) interval13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.Duration duration17 = new org.joda.time.Duration(readableInstant15, readableInstant16);
        org.joda.time.Duration duration19 = duration17.withMillis((-1L));
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.Duration duration21 = duration17.minus(readableDuration20);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((long) 3, chronology23);
        org.joda.time.DateTime.Property property25 = dateTime24.dayOfYear();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateMidnight dateMidnight27 = new org.joda.time.DateMidnight((java.lang.Object) dateTime24, chronology26);
        org.joda.time.DateMidnight.Property property28 = dateMidnight27.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight29 = property28.getDateMidnight();
        org.joda.time.Interval interval30 = new org.joda.time.Interval((org.joda.time.ReadableDuration) duration21, (org.joda.time.ReadableInstant) dateMidnight29);
        mutableInterval8.setEnd((org.joda.time.ReadableInstant) dateMidnight29);
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.Duration duration34 = new org.joda.time.Duration(readableInstant32, readableInstant33);
        long long35 = duration34.getMillis();
        mutableInterval8.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration34);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime((long) 3, chronology38);
        org.joda.time.DateTime.Property property40 = dateTime39.dayOfYear();
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime((long) 3, chronology42);
        org.joda.time.DateTime.Property property44 = dateTime43.dayOfYear();
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.DateMidnight dateMidnight46 = new org.joda.time.DateMidnight((java.lang.Object) dateTime43, chronology45);
        org.joda.time.DateMidnight dateMidnight48 = dateMidnight46.minusMonths((-1));
        org.joda.time.DateMidnight dateMidnight50 = dateMidnight46.withDayOfYear((int) ' ');
        int int51 = dateMidnight46.getWeekOfWeekyear();
        long long52 = property40.getDifferenceAsLong((org.joda.time.ReadableInstant) dateMidnight46);
        boolean boolean54 = dateMidnight46.isAfter(10L);
        boolean boolean55 = mutableInterval8.isAfter((org.joda.time.ReadableInstant) dateMidnight46);
        boolean boolean56 = mutableInterval8.isBeforeNow();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(days7);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(dateMidnight29);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(dateMidnight48);
        org.junit.Assert.assertNotNull(dateMidnight50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
    }

    @Test
    public void test1762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1762");
        java.net.NetworkInterface networkInterface1 = java.net.NetworkInterface.getByName("Chinese (China)");
        org.junit.Assert.assertNull(networkInterface1);
    }

    @Test
    public void test1763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1763");
        org.joda.time.YearMonthDay yearMonthDay0 = new org.joda.time.YearMonthDay();
        java.util.TimeZone timeZone3 = null;
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forTimeZone(timeZone3);
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight((long) 1970, dateTimeZone4);
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((long) 3600000, dateTimeZone4);
        org.joda.time.DateMidnight dateMidnight7 = yearMonthDay0.toDateMidnight(dateTimeZone4);
        org.joda.time.LocalDate localDate8 = yearMonthDay0.toLocalDate();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) 3, chronology10);
        org.joda.time.DateTime.Property property12 = dateTime11.dayOfYear();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) 3, chronology14);
        org.joda.time.DateTime.Property property16 = dateTime15.dayOfYear();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight((java.lang.Object) dateTime15, chronology17);
        org.joda.time.DateMidnight dateMidnight20 = dateMidnight18.minusMonths((-1));
        org.joda.time.DateMidnight dateMidnight22 = dateMidnight18.withDayOfYear((int) ' ');
        int int23 = dateMidnight18.getWeekOfWeekyear();
        long long24 = property12.getDifferenceAsLong((org.joda.time.ReadableInstant) dateMidnight18);
        boolean boolean26 = dateMidnight18.isAfter(10L);
        boolean boolean27 = localDate8.equals((java.lang.Object) dateMidnight18);
        org.joda.time.Period period28 = org.joda.time.Period.ZERO;
        org.joda.time.Period period29 = period28.normalizedStandard();
        org.joda.time.Period period31 = period29.minusMinutes((int) ' ');
        org.joda.time.Period period33 = period31.minusMonths((int) (byte) 0);
        org.joda.time.LocalDate localDate34 = localDate8.plus((org.joda.time.ReadablePeriod) period33);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate36 = localDate8.withDayOfWeek(3601);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 3601 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(localDate34);
    }

    @Test
    public void test1764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1764");
        java.time.OffsetDateTime offsetDateTime0 = java.time.OffsetDateTime.now();
        java.time.LocalDate localDate2 = java.time.LocalDate.ofEpochDay((long) ' ');
        int int3 = localDate2.getMonthValue();
        org.joda.time.Period period4 = org.joda.time.Period.ZERO;
        org.joda.time.Period period5 = period4.normalizedStandard();
        org.joda.time.Period period7 = period4.plusHours(2);
        java.time.chrono.IsoEra isoEra8 = java.time.chrono.IsoEra.CE;
        boolean boolean9 = period7.equals((java.lang.Object) isoEra8);
        java.time.LocalTime localTime14 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime15 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime14);
        java.time.LocalTime localTime20 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime21 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime20);
        java.time.temporal.ChronoField chronoField22 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime24 = localTime20.with((java.time.temporal.TemporalField) chronoField22, (long) (short) 1);
        long long25 = localTime14.getLong((java.time.temporal.TemporalField) chronoField22);
        boolean boolean26 = isoEra8.isSupported((java.time.temporal.TemporalField) chronoField22);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery27 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period28 = isoEra8.query(periodTemporalQuery27);
        boolean boolean29 = period28.isNegative();
        java.time.Period period31 = period28.plusDays((long) ' ');
        java.time.temporal.ChronoField chronoField32 = java.time.temporal.ChronoField.SECOND_OF_DAY;
        boolean boolean33 = period28.equals((java.lang.Object) chronoField32);
        boolean boolean34 = localDate2.isSupported((java.time.temporal.TemporalField) chronoField32);
        boolean boolean35 = offsetDateTime0.isSupported((java.time.temporal.TemporalField) chronoField32);
        java.time.Clock clock36 = java.time.Clock.systemUTC();
        java.time.Duration duration38 = java.time.Duration.ofSeconds((long) 256);
        java.time.Clock clock39 = java.time.Clock.tick(clock36, duration38);
        java.time.OffsetTime offsetTime40 = java.time.OffsetTime.MAX;
        java.time.LocalTime localTime41 = offsetTime40.toLocalTime();
        java.lang.String str42 = offsetTime40.toString();
        java.time.Duration duration43 = java.time.Duration.ZERO;
        java.lang.String str44 = duration43.toString();
        java.time.OffsetTime offsetTime45 = offsetTime40.plus((java.time.temporal.TemporalAmount) duration43);
        int int46 = duration38.compareTo(duration43);
        java.time.OffsetDateTime offsetDateTime47 = offsetDateTime0.plus((java.time.temporal.TemporalAmount) duration43);
        int int48 = offsetDateTime47.getHour();
        int int49 = offsetDateTime47.getDayOfYear();
        org.junit.Assert.assertNotNull(offsetDateTime0);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2 + "'", int3 == 2);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertTrue("'" + isoEra8 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra8.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertTrue("'" + chronoField22 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField22.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime24);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 3601000000001L + "'", long25 == 3601000000001L);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(periodTemporalQuery27);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertTrue("'" + chronoField32 + "' != '" + java.time.temporal.ChronoField.SECOND_OF_DAY + "'", chronoField32.equals(java.time.temporal.ChronoField.SECOND_OF_DAY));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(clock36);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(clock39);
        org.junit.Assert.assertNotNull(offsetTime40);
        org.junit.Assert.assertNotNull(localTime41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "23:59:59.999999999-18:00" + "'", str42, "23:59:59.999999999-18:00");
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "PT0S" + "'", str44, "PT0S");
        org.junit.Assert.assertNotNull(offsetTime45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertNotNull(offsetDateTime47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 9 + "'", int48 == 9);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 52 + "'", int49 == 52);
    }

    @Test
    public void test1765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1765");
        java.util.TimeZone timeZone1 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight((long) 12, dateTimeZone2);
        org.joda.time.Instant instant4 = dateMidnight3.toInstant();
        org.joda.time.DateMidnight.Property property5 = dateMidnight3.centuryOfEra();
        int int6 = dateMidnight3.getWeekyear();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(instant4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1970 + "'", int6 == 1970);
    }

    @Test
    public void test1766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1766");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime4 = property2.setCopy((int) (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime6 = property2.setCopy("file:/experiment/1970-01-01T00:00:00.003Z/");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"file:/experiment/1970-01-01T00:00:00.003Z/\" for yearOfCentury is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDateTime4);
    }

    @Test
    public void test1767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1767");
        org.joda.time.TimeOfDay timeOfDay1 = org.joda.time.TimeOfDay.fromMillisOfDay((long) 274);
        org.junit.Assert.assertNotNull(timeOfDay1);
    }

    @Test
    public void test1768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1768");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.Duration duration2 = new org.joda.time.Duration(readableInstant0, readableInstant1);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = duration2.toPeriodTo(readableInstant3, periodType4);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.Duration duration8 = new org.joda.time.Duration(readableInstant6, readableInstant7);
        long long9 = duration8.getMillis();
        boolean boolean10 = duration2.isShorterThan((org.joda.time.ReadableDuration) duration8);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) 3, chronology12);
        org.joda.time.DateTime.Property property14 = dateTime13.dayOfYear();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight((java.lang.Object) dateTime13, chronology15);
        org.joda.time.MutableDateTime mutableDateTime17 = dateTime13.toMutableDateTime();
        mutableDateTime17.addYears((int) (short) 100);
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime17.dayOfWeek();
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime17.year();
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime17.weekyear();
        boolean boolean23 = duration2.equals((java.lang.Object) mutableDateTime17);
        mutableDateTime17.addMonths((int) ' ');
        mutableDateTime17.add((long) (byte) 10);
        org.joda.time.Period period28 = org.joda.time.Period.ZERO;
        org.joda.time.Period period29 = period28.normalizedStandard();
        org.joda.time.Period period31 = period28.plusHours(2);
        java.time.chrono.IsoEra isoEra32 = java.time.chrono.IsoEra.CE;
        boolean boolean33 = period31.equals((java.lang.Object) isoEra32);
        int int34 = period31.getMinutes();
        mutableDateTime17.add((org.joda.time.ReadablePeriod) period31);
        java.util.TimeZone timeZone37 = null;
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forTimeZone(timeZone37);
        org.joda.time.DateMidnight dateMidnight39 = new org.joda.time.DateMidnight((long) 1970, dateTimeZone38);
        long long42 = dateTimeZone38.convertLocalToUTC((long) 3, false);
        long long45 = dateTimeZone38.convertLocalToUTC(0L, true);
        mutableDateTime17.setZoneRetainFields(dateTimeZone38);
        java.lang.String str47 = dateTimeZone38.toString();
        org.joda.time.chrono.EthiopicChronology ethiopicChronology48 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone38);
        org.joda.time.DateTimeField dateTimeField49 = ethiopicChronology48.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone50 = ethiopicChronology48.getZone();
        org.joda.time.DateTimeField dateTimeField51 = ethiopicChronology48.era();
        org.joda.time.DateTimeField dateTimeField52 = ethiopicChronology48.weekOfWeekyear();
        org.joda.time.DurationField durationField53 = ethiopicChronology48.months();
        org.joda.time.DurationField durationField54 = ethiopicChronology48.eras();
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertTrue("'" + isoEra32 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra32.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 3L + "'", long42 == 3L);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Etc/UTC" + "'", str47, "Etc/UTC");
        org.junit.Assert.assertNotNull(ethiopicChronology48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(durationField53);
        org.junit.Assert.assertNotNull(durationField54);
    }

    @Test
    public void test1769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1769");
        java.util.stream.LongStream longStream1 = java.util.stream.LongStream.of(0L);
        java.util.OptionalLong optionalLong2 = longStream1.min();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Spliterator.OfLong ofLong3 = longStream1.spliterator();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: stream has already been operated upon or closed");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(longStream1);
        org.junit.Assert.assertNotNull(optionalLong2);
    }

    @Test
    public void test1770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1770");
        java.time.Duration duration1 = java.time.Duration.ofMinutes((long) 3);
        java.time.Duration duration2 = duration1.abs();
        java.time.Duration duration4 = duration2.plusMinutes(0L);
        boolean boolean5 = duration2.isZero();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration2);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test1771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1771");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 3, chronology1);
        org.joda.time.DateTime.Property property3 = dateTime2.dayOfYear();
        org.joda.time.Interval interval4 = property3.toInterval();
        org.joda.time.DateTime dateTime5 = interval4.getEnd();
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.Duration duration8 = new org.joda.time.Duration(readableInstant6, readableInstant7);
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.PeriodType periodType10 = null;
        org.joda.time.Period period11 = duration8.toPeriodTo(readableInstant9, periodType10);
        long long12 = duration8.getStandardSeconds();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) 3, chronology14);
        org.joda.time.DateTime.Property property16 = dateTime15.dayOfYear();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight((java.lang.Object) dateTime15, chronology17);
        org.joda.time.DateMidnight dateMidnight20 = dateMidnight18.minusMonths((-1));
        org.joda.time.DateMidnight dateMidnight22 = dateMidnight18.withDayOfYear((int) ' ');
        org.joda.time.Interval interval23 = duration8.toIntervalTo((org.joda.time.ReadableInstant) dateMidnight22);
        java.time.DayOfWeek dayOfWeek24 = java.time.DayOfWeek.MONDAY;
        boolean boolean25 = interval23.equals((java.lang.Object) dayOfWeek24);
        boolean boolean26 = interval4.isBefore((org.joda.time.ReadableInterval) interval23);
        long long27 = interval23.getStartMillis();
        java.lang.String str28 = interval23.toString();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertTrue("'" + dayOfWeek24 + "' != '" + java.time.DayOfWeek.MONDAY + "'", dayOfWeek24.equals(java.time.DayOfWeek.MONDAY));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 2678400000L + "'", long27 == 2678400000L);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "1970-02-01T00:00:00.000Z/1970-02-01T00:00:00.000Z" + "'", str28, "1970-02-01T00:00:00.000Z/1970-02-01T00:00:00.000Z");
    }

    @Test
    public void test1772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1772");
        java.util.TimeZone timeZone8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight((long) 12, dateTimeZone9);
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime(dateTimeZone9);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((-201), 0, 122, 88, (-32769), 710, 241, dateTimeZone9);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 88 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone9);
    }

    @Test
    public void test1773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1773");
        java.util.GregorianCalendar gregorianCalendar5 = new java.util.GregorianCalendar(12, 4096, 7, (-1), (int) (short) 10);
        int int6 = gregorianCalendar5.getWeeksInWeekYear();
        java.lang.String str7 = gregorianCalendar5.getCalendarType();
        java.time.ZonedDateTime zonedDateTime8 = gregorianCalendar5.toZonedDateTime();
        java.time.ZonedDateTime zonedDateTime10 = zonedDateTime8.minusMonths((long) 10);
        int int11 = zonedDateTime8.getMonthValue();
        java.time.ZoneId zoneId12 = zonedDateTime8.getZone();
        long long13 = zonedDateTime8.toEpochSecond();
        long long14 = zonedDateTime8.toEpochSecond();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 52 + "'", int6 == 52);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "gregory" + "'", str7, "gregory");
        org.junit.Assert.assertNotNull(zonedDateTime8);
        org.junit.Assert.assertNotNull(zonedDateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 5 + "'", int11 == 5);
        org.junit.Assert.assertNotNull(zoneId12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-51016611000L) + "'", long13 == (-51016611000L));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-51016611000L) + "'", long14 == (-51016611000L));
    }

    @Test
    public void test1774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1774");
        java.time.Month month0 = java.time.Month.JUNE;
        java.time.LocalDateTime localDateTime1 = java.time.LocalDateTime.now();
        java.time.temporal.ChronoField chronoField2 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime4 = localDateTime1.with((java.time.temporal.TemporalField) chronoField2, (long) 10);
        // The following exception was thrown during execution in test generation
        try {
            java.time.temporal.ValueRange valueRange5 = month0.range((java.time.temporal.TemporalField) chronoField2);
            org.junit.Assert.fail("Expected exception of type java.time.temporal.UnsupportedTemporalTypeException; message: Unsupported field: NanoOfDay");
        } catch (java.time.temporal.UnsupportedTemporalTypeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + month0 + "' != '" + java.time.Month.JUNE + "'", month0.equals(java.time.Month.JUNE));
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertTrue("'" + chronoField2 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField2.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime4);
    }

    @Test
    public void test1775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1775");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withYearOfCentury((int) 'a');
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.plusSeconds(6);
        org.joda.time.DateTime dateTime6 = localDateTime3.toDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.dayOfWeek();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime9 = dateTime6.withField(dateTimeFieldType7, 24);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 24 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
    }

    @Test
    public void test1776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1776");
        java.util.stream.IntStream intStream2 = java.util.stream.IntStream.rangeClosed(100, (int) '4');
        java.util.stream.IntStream intStream4 = intStream2.skip((long) 256);
        java.util.PrimitiveIterator.OfInt ofInt5 = intStream4.iterator();
        java.util.LongSummaryStatistics longSummaryStatistics6 = new java.util.LongSummaryStatistics();
        longSummaryStatistics6.accept(3);
        long long9 = longSummaryStatistics6.getMax();
        java.util.LongSummaryStatistics longSummaryStatistics10 = new java.util.LongSummaryStatistics();
        longSummaryStatistics10.accept(3);
        java.util.function.LongConsumer longConsumer13 = longSummaryStatistics6.andThen((java.util.function.LongConsumer) longSummaryStatistics10);
        java.util.LongSummaryStatistics longSummaryStatistics14 = new java.util.LongSummaryStatistics();
        longSummaryStatistics14.accept(3);
        long long17 = longSummaryStatistics14.getMax();
        double double18 = longSummaryStatistics14.getAverage();
        longSummaryStatistics14.accept(6);
        java.util.function.LongConsumer longConsumer21 = longSummaryStatistics6.andThen((java.util.function.LongConsumer) longSummaryStatistics14);
        double double22 = longSummaryStatistics6.getAverage();
        java.util.LongSummaryStatistics longSummaryStatistics23 = new java.util.LongSummaryStatistics();
        longSummaryStatistics23.accept(3);
        java.util.function.LongConsumer longConsumer26 = longSummaryStatistics6.andThen((java.util.function.LongConsumer) longSummaryStatistics23);
        long long27 = longSummaryStatistics23.getSum();
        ofInt5.forEachRemaining((java.util.function.IntConsumer) longSummaryStatistics23);
        boolean boolean29 = ofInt5.hasNext();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Integer int30 = ofInt5.next();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intStream2);
        org.junit.Assert.assertNotNull(intStream4);
        org.junit.Assert.assertNotNull(ofInt5);
        org.junit.Assert.assertEquals(longSummaryStatistics6.toString(), "LongSummaryStatistics{count=1, sum=3, min=3, average=3.000000, max=3}");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 3L + "'", long9 == 3L);
        org.junit.Assert.assertEquals(longSummaryStatistics10.toString(), "LongSummaryStatistics{count=1, sum=3, min=3, average=3.000000, max=3}");
        org.junit.Assert.assertNotNull(longConsumer13);
        org.junit.Assert.assertEquals(longSummaryStatistics14.toString(), "LongSummaryStatistics{count=2, sum=9, min=3, average=4.500000, max=6}");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 3L + "'", long17 == 3L);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 3.0d + "'", double18 == 3.0d);
        org.junit.Assert.assertNotNull(longConsumer21);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 3.0d + "'", double22 == 3.0d);
        org.junit.Assert.assertEquals(longSummaryStatistics23.toString(), "LongSummaryStatistics{count=1, sum=3, min=3, average=3.000000, max=3}");
        org.junit.Assert.assertNotNull(longConsumer26);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 3L + "'", long27 == 3L);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test1777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1777");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.Hours hours1 = org.joda.time.Hours.hoursIn(readableInterval0);
        org.joda.time.Period period2 = hours1.toPeriod();
        org.joda.time.Hours hours3 = period2.toStandardHours();
        org.junit.Assert.assertNotNull(hours1);
        org.junit.Assert.assertNotNull(period2);
        org.junit.Assert.assertNotNull(hours3);
    }

    @Test
    public void test1778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1778");
        // The following exception was thrown during execution in test generation
        try {
            long long1 = java.util.Date.parse("halfdays");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1779");
        java.util.concurrent.TimeoutException timeoutException1 = new java.util.concurrent.TimeoutException("2022-02-21T09:36:20.701Z");
    }

    @Test
    public void test1780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1780");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 3, chronology1);
        org.joda.time.DateTime.Property property3 = dateTime2.dayOfYear();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight((java.lang.Object) dateTime2, chronology4);
        org.joda.time.MutableDateTime mutableDateTime6 = dateTime2.toMutableDateTime();
        org.joda.time.Days days7 = org.joda.time.Days.ONE;
        org.joda.time.MutableInterval mutableInterval8 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadablePeriod) days7);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) 3, chronology10);
        org.joda.time.DateTime.Property property12 = dateTime11.dayOfYear();
        org.joda.time.Interval interval13 = property12.toInterval();
        mutableInterval8.setInterval((org.joda.time.ReadableInterval) interval13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.Duration duration17 = new org.joda.time.Duration(readableInstant15, readableInstant16);
        org.joda.time.Duration duration19 = duration17.withMillis((-1L));
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.Duration duration21 = duration17.minus(readableDuration20);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((long) 3, chronology23);
        org.joda.time.DateTime.Property property25 = dateTime24.dayOfYear();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateMidnight dateMidnight27 = new org.joda.time.DateMidnight((java.lang.Object) dateTime24, chronology26);
        org.joda.time.DateMidnight.Property property28 = dateMidnight27.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight29 = property28.getDateMidnight();
        org.joda.time.Interval interval30 = new org.joda.time.Interval((org.joda.time.ReadableDuration) duration21, (org.joda.time.ReadableInstant) dateMidnight29);
        mutableInterval8.setEnd((org.joda.time.ReadableInstant) dateMidnight29);
        org.joda.time.MutableInterval mutableInterval32 = mutableInterval8.toMutableInterval();
        org.joda.time.Period period33 = mutableInterval32.toPeriod();
        java.lang.String str34 = mutableInterval32.toString();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(days7);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(dateMidnight29);
        org.junit.Assert.assertNotNull(mutableInterval32);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z" + "'", str34, "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
    }

    @Test
    public void test1781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1781");
        long long0 = java.security.PublicKey.serialVersionUID;
        org.junit.Assert.assertTrue("'" + long0 + "' != '" + 7187392471159151072L + "'", long0 == 7187392471159151072L);
    }

    @Test
    public void test1782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1782");
        java.util.GregorianCalendar gregorianCalendar5 = new java.util.GregorianCalendar(12, 4096, 7, (-1), (int) (short) 10);
        int int6 = gregorianCalendar5.getWeeksInWeekYear();
        java.lang.String str7 = gregorianCalendar5.getCalendarType();
        java.time.ZonedDateTime zonedDateTime8 = gregorianCalendar5.toZonedDateTime();
        java.util.GregorianCalendar gregorianCalendar14 = new java.util.GregorianCalendar(12, 4096, 7, (-1), (int) (short) 10);
        int int15 = gregorianCalendar14.getWeeksInWeekYear();
        java.lang.String str16 = gregorianCalendar14.getCalendarType();
        java.time.ZonedDateTime zonedDateTime17 = gregorianCalendar14.toZonedDateTime();
        int int18 = zonedDateTime8.compareTo((java.time.chrono.ChronoZonedDateTime<java.time.LocalDate>) zonedDateTime17);
        java.time.ZonedDateTime zonedDateTime20 = zonedDateTime8.plusDays((long) 2022);
        java.time.ZonedDateTime zonedDateTime22 = zonedDateTime20.minusMonths((long) '\uffff');
        // The following exception was thrown during execution in test generation
        try {
            java.time.ZonedDateTime zonedDateTime24 = zonedDateTime22.withMonth((int) '4');
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for MonthOfYear (valid values 1 - 12): 52");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 52 + "'", int6 == 52);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "gregory" + "'", str7, "gregory");
        org.junit.Assert.assertNotNull(zonedDateTime8);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 52 + "'", int15 == 52);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "gregory" + "'", str16, "gregory");
        org.junit.Assert.assertNotNull(zonedDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(zonedDateTime20);
        org.junit.Assert.assertNotNull(zonedDateTime22);
    }

    @Test
    public void test1783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1783");
        org.joda.time.Period period4 = new org.joda.time.Period((int) '#', 0, 2, (int) (short) 100);
        org.joda.time.Period period6 = period4.withSeconds(12);
        int int7 = period6.getMillis();
        org.joda.time.PeriodType periodType8 = period6.getPeriodType();
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 100 + "'", int7 == 100);
        org.junit.Assert.assertNotNull(periodType8);
    }

    @Test
    public void test1784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1784");
        java.util.GregorianCalendar gregorianCalendar5 = new java.util.GregorianCalendar(12, 4096, 7, (-1), (int) (short) 10);
        gregorianCalendar5.set((int) ':', 3, 256, 5, 17, 3600000);
        int int13 = gregorianCalendar5.getWeekYear();
        int int14 = gregorianCalendar5.getFirstDayOfWeek();
        org.joda.time.LocalDateTime localDateTime15 = org.joda.time.LocalDateTime.fromCalendarFields((java.util.Calendar) gregorianCalendar5);
        org.joda.time.LocalDateTime.Property property16 = localDateTime15.weekyear();
        int int17 = localDateTime15.getYearOfEra();
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 59 + "'", int13 == 59);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 59 + "'", int17 == 59);
    }

    @Test
    public void test1785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1785");
        double[] doubleArray4 = new double[] { (byte) 0, 59, 83400000000000L, '4' };
        java.util.stream.DoubleStream doubleStream5 = java.util.stream.DoubleStream.of(doubleArray4);
        java.nio.DoubleBuffer doubleBuffer6 = java.nio.DoubleBuffer.wrap(doubleArray4);
        double[] doubleArray11 = new double[] { (byte) 0, 59, 83400000000000L, '4' };
        java.util.stream.DoubleStream doubleStream12 = java.util.stream.DoubleStream.of(doubleArray11);
        java.nio.DoubleBuffer doubleBuffer13 = java.nio.DoubleBuffer.wrap(doubleArray11);
        java.nio.DoubleBuffer doubleBuffer14 = doubleBuffer6.put(doubleBuffer13);
        double[] doubleArray19 = new double[] { (byte) 0, 59, 83400000000000L, '4' };
        java.util.stream.DoubleStream doubleStream20 = java.util.stream.DoubleStream.of(doubleArray19);
        java.nio.DoubleBuffer doubleBuffer21 = java.nio.DoubleBuffer.wrap(doubleArray19);
        double[] doubleArray26 = new double[] { (byte) 0, 59, 83400000000000L, '4' };
        java.util.stream.DoubleStream doubleStream27 = java.util.stream.DoubleStream.of(doubleArray26);
        java.nio.DoubleBuffer doubleBuffer28 = java.nio.DoubleBuffer.wrap(doubleArray26);
        java.nio.DoubleBuffer doubleBuffer29 = doubleBuffer21.put(doubleBuffer28);
        java.nio.DoubleBuffer doubleBuffer30 = doubleBuffer13.put(doubleBuffer21);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.DoubleBuffer doubleBuffer33 = doubleBuffer30.put((-4), (double) 52L);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[0.0, 59.0, 8.34E13, 52.0]");
        org.junit.Assert.assertNotNull(doubleStream5);
        org.junit.Assert.assertNotNull(doubleBuffer6);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0, 59.0, 8.34E13, 52.0]");
        org.junit.Assert.assertNotNull(doubleStream12);
        org.junit.Assert.assertNotNull(doubleBuffer13);
        org.junit.Assert.assertNotNull(doubleBuffer14);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0, 59.0, 8.34E13, 52.0]");
        org.junit.Assert.assertNotNull(doubleStream20);
        org.junit.Assert.assertNotNull(doubleBuffer21);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[0.0, 59.0, 8.34E13, 52.0]");
        org.junit.Assert.assertNotNull(doubleStream27);
        org.junit.Assert.assertNotNull(doubleBuffer28);
        org.junit.Assert.assertNotNull(doubleBuffer29);
        org.junit.Assert.assertNotNull(doubleBuffer30);
    }

    @Test
    public void test1786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1786");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.Duration duration2 = new org.joda.time.Duration(readableInstant0, readableInstant1);
        org.joda.time.Duration duration4 = duration2.withMillis((-1L));
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((long) 3, chronology6);
        org.joda.time.DateTime.Property property8 = dateTime7.dayOfYear();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight((java.lang.Object) dateTime7, chronology9);
        org.joda.time.DateMidnight dateMidnight12 = dateMidnight10.minusMonths((-1));
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight10.withDayOfYear((int) ' ');
        org.joda.time.PeriodType periodType15 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period16 = duration4.toPeriodFrom((org.joda.time.ReadableInstant) dateMidnight10, periodType15);
        org.joda.time.PeriodType periodType17 = period16.getPeriodType();
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod(periodType17);
        org.joda.time.PeriodType periodType19 = periodType17.withMillisRemoved();
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(periodType15);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(periodType17);
        org.junit.Assert.assertNotNull(periodType19);
    }

    @Test
    public void test1787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1787");
        java.util.Hashtable<java.util.RandomAccess, org.joda.time.chrono.AssembledChronology> randomAccessMap2 = new java.util.Hashtable<java.util.RandomAccess, org.joda.time.chrono.AssembledChronology>(197, (float) 11724424192L);
    }

    @Test
    public void test1788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1788");
        org.joda.time.TimeOfDay timeOfDay1 = org.joda.time.TimeOfDay.fromMillisOfDay((long) (short) 0);
        org.joda.time.TimeOfDay timeOfDay3 = org.joda.time.TimeOfDay.fromMillisOfDay((long) (short) 0);
        org.joda.time.Hours hours4 = org.joda.time.Hours.hoursBetween((org.joda.time.ReadablePartial) timeOfDay1, (org.joda.time.ReadablePartial) timeOfDay3);
        org.joda.time.DurationFieldType durationFieldType5 = org.joda.time.DurationFieldType.hours();
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay3.withFieldAdded(durationFieldType5, (int) (byte) 0);
        int int8 = timeOfDay3.getMillisOfSecond();
        org.joda.time.TimeOfDay timeOfDay10 = timeOfDay3.plusHours(9);
        org.joda.time.TimeOfDay.Property property11 = timeOfDay3.secondOfMinute();
        java.time.ZoneOffset zoneOffset14 = java.time.ZoneOffset.ofHoursMinutes(1, 10);
        java.time.LocalDate localDate15 = java.time.LocalDate.now((java.time.ZoneId) zoneOffset14);
        boolean boolean16 = property11.equals((java.lang.Object) localDate15);
        org.joda.time.DateTimeField dateTimeField17 = property11.getField();
        int int18 = property11.get();
        int int19 = property11.getMaximumValueOverall();
        org.junit.Assert.assertNotNull(timeOfDay1);
        org.junit.Assert.assertNotNull(timeOfDay3);
        org.junit.Assert.assertNotNull(hours4);
        org.junit.Assert.assertNotNull(durationFieldType5);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(zoneOffset14);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 59 + "'", int19 == 59);
    }

    @Test
    public void test1789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1789");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 3, chronology1);
        org.joda.time.DateTime.Property property3 = dateTime2.dayOfYear();
        org.joda.time.Interval interval4 = property3.toInterval();
        org.joda.time.DateTime dateTime5 = interval4.getEnd();
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.Duration duration8 = new org.joda.time.Duration(readableInstant6, readableInstant7);
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.PeriodType periodType10 = null;
        org.joda.time.Period period11 = duration8.toPeriodTo(readableInstant9, periodType10);
        long long12 = duration8.getStandardSeconds();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) 3, chronology14);
        org.joda.time.DateTime.Property property16 = dateTime15.dayOfYear();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight((java.lang.Object) dateTime15, chronology17);
        org.joda.time.DateMidnight dateMidnight20 = dateMidnight18.minusMonths((-1));
        org.joda.time.DateMidnight dateMidnight22 = dateMidnight18.withDayOfYear((int) ' ');
        org.joda.time.Interval interval23 = duration8.toIntervalTo((org.joda.time.ReadableInstant) dateMidnight22);
        java.time.DayOfWeek dayOfWeek24 = java.time.DayOfWeek.MONDAY;
        boolean boolean25 = interval23.equals((java.lang.Object) dayOfWeek24);
        boolean boolean26 = interval4.isBefore((org.joda.time.ReadableInterval) interval23);
        org.joda.time.PeriodType periodType27 = org.joda.time.PeriodType.years();
        org.joda.time.Period period28 = interval23.toPeriod(periodType27);
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.Duration duration31 = new org.joda.time.Duration(readableInstant29, readableInstant30);
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.PeriodType periodType33 = null;
        org.joda.time.Period period34 = duration31.toPeriodTo(readableInstant32, periodType33);
        org.joda.time.PeriodType periodType36 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.LocalTime localTime39 = new org.joda.time.LocalTime((long) 0, chronology38);
        org.joda.time.Chronology chronology40 = localTime39.getChronology();
        org.joda.time.DateTimeField dateTimeField41 = chronology40.weekyearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime42 = org.joda.time.MutableDateTime.now(chronology40);
        org.joda.time.DateTimeField dateTimeField43 = chronology40.monthOfYear();
        org.joda.time.Period period44 = new org.joda.time.Period(3601000000001L, periodType36, chronology40);
        org.joda.time.MutablePeriod mutablePeriod45 = period44.toMutablePeriod();
        org.joda.time.ReadableInstant readableInstant46 = null;
        org.joda.time.ReadableInstant readableInstant47 = null;
        org.joda.time.Duration duration48 = new org.joda.time.Duration(readableInstant46, readableInstant47);
        org.joda.time.Seconds seconds49 = duration48.toStandardSeconds();
        int int50 = seconds49.getSeconds();
        org.joda.time.Seconds seconds52 = seconds49.dividedBy(28);
        org.joda.time.Seconds seconds53 = seconds52.negated();
        org.joda.time.DurationFieldType durationFieldType54 = seconds53.getFieldType();
        boolean boolean55 = mutablePeriod45.isSupported(durationFieldType54);
        boolean boolean56 = period34.isSupported(durationFieldType54);
        boolean boolean57 = period28.isSupported(durationFieldType54);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertTrue("'" + dayOfWeek24 + "' != '" + java.time.DayOfWeek.MONDAY + "'", dayOfWeek24.equals(java.time.DayOfWeek.MONDAY));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(periodType27);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(periodType36);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(mutableDateTime42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(mutablePeriod45);
        org.junit.Assert.assertNotNull(seconds49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(seconds52);
        org.junit.Assert.assertNotNull(seconds53);
        org.junit.Assert.assertNotNull(durationFieldType54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
    }

    @Test
    public void test1790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1790");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.withField(dateTimeFieldType2, (int) 'a');
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime(chronology5);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.withYearOfCentury((int) 'a');
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.plusSeconds(6);
        boolean boolean11 = localDateTime4.isBefore((org.joda.time.ReadablePartial) localDateTime8);
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean13 = localDateTime8.isEqual((org.joda.time.ReadablePartial) localDate12);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: ReadablePartial objects must have matching field types");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    }

    @Test
    public void test1791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1791");
        java.util.stream.Stream.Builder<java.io.OutputStream> outputStreamBuilder0 = java.util.stream.Stream.builder();
        java.util.stream.Stream.Builder<java.io.OutputStream> outputStreamBuilder1 = java.util.stream.Stream.builder();
        java.util.function.Consumer<java.io.OutputStream> outputStreamConsumer2 = outputStreamBuilder0.andThen((java.util.function.Consumer<java.io.OutputStream>) outputStreamBuilder1);
        java.io.PrintStream printStream4 = new java.io.PrintStream("subject:\n (GERMAN)");
        java.util.stream.Stream.Builder<java.io.OutputStream> outputStreamBuilder5 = outputStreamBuilder1.add((java.io.OutputStream) printStream4);
        printStream4.print(83400);
        org.junit.Assert.assertNotNull(outputStreamBuilder0);
        org.junit.Assert.assertNotNull(outputStreamBuilder1);
        org.junit.Assert.assertNotNull(outputStreamConsumer2);
        org.junit.Assert.assertNotNull(outputStreamBuilder5);
    }

    @Test
    public void test1792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1792");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((long) 0, chronology2);
        org.joda.time.Chronology chronology4 = localTime3.getChronology();
        java.util.Locale locale5 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale locale6 = java.util.Locale.GERMANY;
        java.lang.String str7 = locale5.getDisplayScript(locale6);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket9 = new org.joda.time.format.DateTimeParserBucket((long) 1970, chronology4, locale5, (java.lang.Integer) 1);
        org.joda.time.DateTime dateTime10 = org.joda.time.DateTime.now(chronology4);
        org.joda.time.DateTime dateTime12 = dateTime10.withMillis((long) 1970);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
    }

    @Test
    public void test1793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1793");
        java.util.GregorianCalendar gregorianCalendar5 = new java.util.GregorianCalendar(12, 4096, 7, (-1), (int) (short) 10);
        int int6 = gregorianCalendar5.getWeeksInWeekYear();
        java.lang.String str7 = gregorianCalendar5.getCalendarType();
        java.time.ZonedDateTime zonedDateTime8 = gregorianCalendar5.toZonedDateTime();
        java.util.Date date15 = new java.util.Date((int) 'a', 3, 0, (-1), (int) '/', 28);
        int int16 = date15.getTimezoneOffset();
        gregorianCalendar5.setGregorianChange(date15);
        java.util.Locale locale20 = java.util.Locale.TAIWAN;
        java.util.Locale locale21 = java.util.Locale.ROOT;
        java.lang.String str22 = locale20.getDisplayName(locale21);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str23 = gregorianCalendar5.getDisplayName(24, (int) '+', locale20);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 52 + "'", int6 == 52);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "gregory" + "'", str7, "gregory");
        org.junit.Assert.assertNotNull(zonedDateTime8);
        org.junit.Assert.assertEquals(date15.toString(), "Sun Mar 30 23:47:28 UTC 1997");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Chinese (Taiwan)" + "'", str22, "Chinese (Taiwan)");
    }

    @Test
    public void test1794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1794");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.nio.LongBuffer longBuffer3 = java.nio.LongBuffer.allocate((int) (short) 0);
        java.nio.Buffer buffer4 = longBuffer3.mark();
        boolean boolean5 = properties1.containsKey((java.lang.Object) longBuffer3);
        java.util.Enumeration<java.lang.Object> objEnumeration6 = properties1.elements();
        java.io.Reader reader7 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.load(reader7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(longBuffer3);
        org.junit.Assert.assertNotNull(buffer4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(objEnumeration6);
    }

    @Test
    public void test1795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1795");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 3, chronology1);
        org.joda.time.DateTime.Property property3 = dateTime2.dayOfYear();
        org.joda.time.Interval interval4 = property3.toInterval();
        org.joda.time.DateTime dateTime5 = interval4.getEnd();
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.Duration duration8 = new org.joda.time.Duration(readableInstant6, readableInstant7);
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.PeriodType periodType10 = null;
        org.joda.time.Period period11 = duration8.toPeriodTo(readableInstant9, periodType10);
        long long12 = duration8.getStandardSeconds();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) 3, chronology14);
        org.joda.time.DateTime.Property property16 = dateTime15.dayOfYear();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight((java.lang.Object) dateTime15, chronology17);
        org.joda.time.DateMidnight dateMidnight20 = dateMidnight18.minusMonths((-1));
        org.joda.time.DateMidnight dateMidnight22 = dateMidnight18.withDayOfYear((int) ' ');
        org.joda.time.Interval interval23 = duration8.toIntervalTo((org.joda.time.ReadableInstant) dateMidnight22);
        java.time.DayOfWeek dayOfWeek24 = java.time.DayOfWeek.MONDAY;
        boolean boolean25 = interval23.equals((java.lang.Object) dayOfWeek24);
        boolean boolean26 = interval4.isBefore((org.joda.time.ReadableInterval) interval23);
        org.joda.time.PeriodType periodType27 = org.joda.time.PeriodType.years();
        org.joda.time.Period period28 = interval23.toPeriod(periodType27);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period30 = period28.minusDays(101);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Field is not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertTrue("'" + dayOfWeek24 + "' != '" + java.time.DayOfWeek.MONDAY + "'", dayOfWeek24.equals(java.time.DayOfWeek.MONDAY));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(periodType27);
        org.junit.Assert.assertNotNull(period28);
    }

    @Test
    public void test1796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1796");
        org.joda.time.TimeOfDay timeOfDay1 = org.joda.time.TimeOfDay.fromMillisOfDay((long) (short) 0);
        org.joda.time.TimeOfDay timeOfDay3 = org.joda.time.TimeOfDay.fromMillisOfDay((long) (short) 0);
        org.joda.time.Hours hours4 = org.joda.time.Hours.hoursBetween((org.joda.time.ReadablePartial) timeOfDay1, (org.joda.time.ReadablePartial) timeOfDay3);
        org.joda.time.TimeOfDay timeOfDay6 = timeOfDay1.withSecondOfMinute(0);
        int int7 = timeOfDay1.size();
        int[] intArray8 = timeOfDay1.getValues();
        org.joda.time.LocalTime localTime9 = timeOfDay1.toLocalTime();
        org.joda.time.TimeOfDay timeOfDay11 = timeOfDay1.withMinuteOfHour(52);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray12 = timeOfDay1.getFieldTypes();
        int int13 = timeOfDay1.size();
        org.junit.Assert.assertNotNull(timeOfDay1);
        org.junit.Assert.assertNotNull(timeOfDay3);
        org.junit.Assert.assertNotNull(hours4);
        org.junit.Assert.assertNotNull(timeOfDay6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 4 + "'", int7 == 4);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(timeOfDay11);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 4 + "'", int13 == 4);
    }

    @Test
    public void test1797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1797");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withYearOfCentury((int) 'a');
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.plusSeconds(6);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.Duration duration8 = new org.joda.time.Duration(readableInstant6, readableInstant7);
        long long9 = duration8.getMillis();
        org.joda.time.Duration duration11 = duration8.plus((long) (byte) 1);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime3.minus((org.joda.time.ReadableDuration) duration11);
        int int13 = localDateTime3.getEra();
        org.joda.time.Duration duration15 = org.joda.time.Duration.millis((long) '#');
        org.joda.time.LocalDateTime localDateTime16 = localDateTime3.plus((org.joda.time.ReadableDuration) duration15);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.withYear(2022);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
    }

    @Test
    public void test1798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1798");
        java.util.stream.LongStream longStream0 = java.util.stream.LongStream.empty();
        long long1 = longStream0.sum();
        java.util.function.LongPredicate longPredicate2 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.LongStream longStream3 = longStream0.filter(longPredicate2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(longStream0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
    }

    @Test
    public void test1799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1799");
        org.joda.time.Weeks weeks0 = org.joda.time.Weeks.ONE;
        java.util.concurrent.TimeUnit timeUnit1 = java.util.concurrent.TimeUnit.NANOSECONDS;
        boolean boolean2 = weeks0.equals((java.lang.Object) timeUnit1);
        org.joda.time.MutablePeriod mutablePeriod3 = weeks0.toMutablePeriod();
        int int4 = mutablePeriod3.getSeconds();
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.Duration duration7 = new org.joda.time.Duration(readableInstant5, readableInstant6);
        long long8 = duration7.getMillis();
        org.joda.time.Duration duration10 = duration7.plus((long) (byte) 1);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.LocalTime localTime14 = new org.joda.time.LocalTime((long) 0, chronology13);
        org.joda.time.Chronology chronology15 = localTime14.getChronology();
        java.util.Locale locale16 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale locale17 = java.util.Locale.GERMANY;
        java.lang.String str18 = locale16.getDisplayScript(locale17);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket20 = new org.joda.time.format.DateTimeParserBucket((long) 1970, chronology15, locale16, (java.lang.Integer) 1);
        mutablePeriod3.setPeriod((org.joda.time.ReadableDuration) duration7, chronology15);
        mutablePeriod3.addDays(1);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((long) 3, chronology25);
        org.joda.time.DateTime.Property property27 = dateTime26.dayOfYear();
        org.joda.time.Interval interval28 = property27.toInterval();
        org.joda.time.DateTimeField dateTimeField29 = property27.getField();
        org.joda.time.DateTime dateTime31 = property27.addWrapFieldToCopy(0);
        org.joda.time.DateTime dateTime33 = property27.setCopy(34);
        java.lang.String str34 = dateTime33.toString();
        org.joda.time.DateTime dateTime36 = dateTime33.withMillisOfDay(11);
        org.joda.time.ReadableInstant readableInstant37 = null;
        mutablePeriod3.setPeriod((org.joda.time.ReadableInstant) dateTime33, readableInstant37);
        org.junit.Assert.assertNotNull(weeks0);
        org.junit.Assert.assertNotNull(timeUnit1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(mutablePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "1970-02-03T00:00:00.003Z" + "'", str34, "1970-02-03T00:00:00.003Z");
        org.junit.Assert.assertNotNull(dateTime36);
    }

    @Test
    public void test1800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1800");
        java.util.stream.LongStream longStream1 = java.util.stream.LongStream.of(0L);
        java.util.stream.LongStream longStream2 = longStream1.unordered();
        java.util.stream.DoubleStream doubleStream3 = longStream2.asDoubleStream();
        java.util.OptionalDouble optionalDouble4 = doubleStream3.findFirst();
        java.util.DoubleSummaryStatistics doubleSummaryStatistics5 = new java.util.DoubleSummaryStatistics();
        doubleSummaryStatistics5.accept((double) 97);
        double double8 = doubleSummaryStatistics5.getMin();
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.DoubleStream doubleStream9 = doubleStream3.peek((java.util.function.DoubleConsumer) doubleSummaryStatistics5);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: stream has already been operated upon or closed");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(longStream1);
        org.junit.Assert.assertNotNull(longStream2);
        org.junit.Assert.assertNotNull(doubleStream3);
        org.junit.Assert.assertNotNull(optionalDouble4);
        org.junit.Assert.assertEquals(doubleSummaryStatistics5.toString(), "DoubleSummaryStatistics{count=1, sum=97.000000, min=97.000000, average=97.000000, max=97.000000}");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 97.0d + "'", double8 == 97.0d);
    }

    @Test
    public void test1801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1801");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forID("Thursday");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The datetime zone id 'Thursday' is not recognised");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1802");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 3, chronology1);
        org.joda.time.DateTime.Property property3 = dateTime2.dayOfYear();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight((java.lang.Object) dateTime2, chronology4);
        org.joda.time.MutableDateTime mutableDateTime6 = dateTime2.toMutableDateTime();
        mutableDateTime6.addYears((int) (short) 100);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime6.dayOfWeek();
        java.util.Locale locale10 = java.util.Locale.JAPAN;
        int int11 = property9.getMaximumTextLength(locale10);
        java.lang.String str12 = locale10.toLanguageTag();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.LocalTime localTime15 = new org.joda.time.LocalTime((long) 0, chronology14);
        org.joda.time.Chronology chronology16 = localTime15.getChronology();
        org.joda.time.DateTimeField dateTimeField17 = chronology16.weekyearOfCentury();
        long long19 = dateTimeField17.roundHalfEven((long) 16);
        java.util.Locale locale22 = new java.util.Locale("Subject:\n", "German");
        int int23 = dateTimeField17.getMaximumTextLength(locale22);
        java.lang.String str24 = locale10.getDisplayLanguage(locale22);
        java.time.format.DecimalStyle decimalStyle25 = java.time.format.DecimalStyle.of(locale10);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ja_JP");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 3 + "'", int11 == 3);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "ja-JP" + "'", str12, "ja-JP");
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertEquals(locale22.toString(), "subject:\n_GERMAN");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2 + "'", int23 == 2);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Japanese" + "'", str24, "Japanese");
        org.junit.Assert.assertNotNull(decimalStyle25);
    }

    @Test
    public void test1803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1803");
        java.time.OffsetTime offsetTime0 = java.time.OffsetTime.MAX;
        java.time.LocalTime localTime1 = offsetTime0.toLocalTime();
        java.lang.String str2 = offsetTime0.toString();
        java.time.Duration duration3 = java.time.Duration.ZERO;
        java.lang.String str4 = duration3.toString();
        java.time.OffsetTime offsetTime5 = offsetTime0.plus((java.time.temporal.TemporalAmount) duration3);
        java.time.OffsetTime offsetTime7 = offsetTime0.plusNanos((long) 0);
        java.time.LocalTime localTime12 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime13 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime12);
        java.time.temporal.ChronoField chronoField14 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime16 = localTime12.with((java.time.temporal.TemporalField) chronoField14, (long) (short) 1);
        java.util.Locale locale17 = java.util.Locale.GERMANY;
        java.lang.String str18 = chronoField14.getDisplayName(locale17);
        java.time.OffsetTime offsetTime20 = offsetTime7.with((java.time.temporal.TemporalField) chronoField14, (long) 28);
        org.joda.time.Period period21 = org.joda.time.Period.ZERO;
        org.joda.time.Period period22 = period21.normalizedStandard();
        org.joda.time.Period period24 = period21.plusHours(2);
        java.time.chrono.IsoEra isoEra25 = java.time.chrono.IsoEra.CE;
        boolean boolean26 = period24.equals((java.lang.Object) isoEra25);
        java.time.LocalTime localTime31 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime32 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime31);
        java.time.LocalTime localTime37 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime38 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime37);
        java.time.temporal.ChronoField chronoField39 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime41 = localTime37.with((java.time.temporal.TemporalField) chronoField39, (long) (short) 1);
        long long42 = localTime31.getLong((java.time.temporal.TemporalField) chronoField39);
        boolean boolean43 = isoEra25.isSupported((java.time.temporal.TemporalField) chronoField39);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery44 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period45 = isoEra25.query(periodTemporalQuery44);
        boolean boolean46 = period45.isNegative();
        java.time.Period period48 = period45.plusDays((long) ' ');
        java.time.temporal.ChronoField chronoField49 = java.time.temporal.ChronoField.SECOND_OF_DAY;
        boolean boolean50 = period45.equals((java.lang.Object) chronoField49);
        java.time.chrono.ChronoPeriod chronoPeriod51 = period45.negated();
        java.time.OffsetTime offsetTime52 = offsetTime7.minus((java.time.temporal.TemporalAmount) period45);
        java.time.OffsetTime offsetTime54 = offsetTime7.plusNanos((long) ' ');
        java.util.GregorianCalendar gregorianCalendar60 = new java.util.GregorianCalendar(12, 4096, 7, (-1), (int) (short) 10);
        int int61 = gregorianCalendar60.getWeeksInWeekYear();
        java.lang.String str62 = gregorianCalendar60.getCalendarType();
        java.time.ZonedDateTime zonedDateTime63 = gregorianCalendar60.toZonedDateTime();
        java.time.ZonedDateTime zonedDateTime65 = zonedDateTime63.minusMonths((long) 10);
        java.time.chrono.ChronoZonedDateTime<java.time.LocalDate> localDateChronoZonedDateTime66 = zonedDateTime63.withEarlierOffsetAtOverlap();
        java.time.ZonedDateTime zonedDateTime68 = zonedDateTime63.minusMonths((long) 4200);
        java.time.ZonedDateTime zonedDateTime70 = zonedDateTime68.plusNanos(8L);
        org.joda.time.Period period71 = org.joda.time.Period.ZERO;
        org.joda.time.Period period72 = period71.normalizedStandard();
        org.joda.time.Period period74 = period71.plusHours(2);
        java.time.chrono.IsoEra isoEra75 = java.time.chrono.IsoEra.CE;
        boolean boolean76 = period74.equals((java.lang.Object) isoEra75);
        java.time.LocalTime localTime81 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime82 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime81);
        java.time.LocalTime localTime87 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime88 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime87);
        java.time.temporal.ChronoField chronoField89 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime91 = localTime87.with((java.time.temporal.TemporalField) chronoField89, (long) (short) 1);
        long long92 = localTime81.getLong((java.time.temporal.TemporalField) chronoField89);
        boolean boolean93 = isoEra75.isSupported((java.time.temporal.TemporalField) chronoField89);
        boolean boolean94 = zonedDateTime68.isSupported((java.time.temporal.TemporalField) chronoField89);
        long long95 = offsetTime54.getLong((java.time.temporal.TemporalField) chronoField89);
        org.junit.Assert.assertNotNull(offsetTime0);
        org.junit.Assert.assertNotNull(localTime1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "23:59:59.999999999-18:00" + "'", str2, "23:59:59.999999999-18:00");
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "PT0S" + "'", str4, "PT0S");
        org.junit.Assert.assertNotNull(offsetTime5);
        org.junit.Assert.assertNotNull(offsetTime7);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertTrue("'" + chronoField14 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField14.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "NanoOfDay" + "'", str18, "NanoOfDay");
        org.junit.Assert.assertNotNull(offsetTime20);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertTrue("'" + isoEra25 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra25.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(localTime31);
        org.junit.Assert.assertNotNull(localTime32);
        org.junit.Assert.assertNotNull(localTime37);
        org.junit.Assert.assertNotNull(localTime38);
        org.junit.Assert.assertTrue("'" + chronoField39 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField39.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime41);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 3601000000001L + "'", long42 == 3601000000001L);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(periodTemporalQuery44);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(period48);
        org.junit.Assert.assertTrue("'" + chronoField49 + "' != '" + java.time.temporal.ChronoField.SECOND_OF_DAY + "'", chronoField49.equals(java.time.temporal.ChronoField.SECOND_OF_DAY));
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(chronoPeriod51);
        org.junit.Assert.assertNotNull(offsetTime52);
        org.junit.Assert.assertNotNull(offsetTime54);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 52 + "'", int61 == 52);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "gregory" + "'", str62, "gregory");
        org.junit.Assert.assertNotNull(zonedDateTime63);
        org.junit.Assert.assertNotNull(zonedDateTime65);
        org.junit.Assert.assertNotNull(localDateChronoZonedDateTime66);
        org.junit.Assert.assertNotNull(zonedDateTime68);
        org.junit.Assert.assertNotNull(zonedDateTime70);
        org.junit.Assert.assertNotNull(period71);
        org.junit.Assert.assertNotNull(period72);
        org.junit.Assert.assertNotNull(period74);
        org.junit.Assert.assertTrue("'" + isoEra75 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra75.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(localTime81);
        org.junit.Assert.assertNotNull(localTime82);
        org.junit.Assert.assertNotNull(localTime87);
        org.junit.Assert.assertNotNull(localTime88);
        org.junit.Assert.assertTrue("'" + chronoField89 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField89.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime91);
        org.junit.Assert.assertTrue("'" + long92 + "' != '" + 3601000000001L + "'", long92 == 3601000000001L);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
        org.junit.Assert.assertTrue("'" + long95 + "' != '" + 31L + "'", long95 == 31L);
    }

    @Test
    public void test1804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1804");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.now();
        java.time.LocalDateTime localDateTime2 = localDateTime0.minusYears((long) (byte) 10);
        java.time.LocalDateTime localDateTime3 = java.time.LocalDateTime.now();
        java.time.LocalDateTime localDateTime5 = localDateTime3.minusYears((long) (byte) 10);
        boolean boolean6 = localDateTime0.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime5);
        java.time.LocalDateTime localDateTime7 = java.time.LocalDateTime.now();
        java.time.temporal.ChronoField chronoField8 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime10 = localDateTime7.with((java.time.temporal.TemporalField) chronoField8, (long) 10);
        java.time.LocalDateTime localDateTime12 = localDateTime7.minusMinutes((long) 12);
        boolean boolean13 = localDateTime5.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime7);
        java.time.LocalDate localDate14 = localDateTime5.toLocalDate();
        java.util.GregorianCalendar gregorianCalendar20 = new java.util.GregorianCalendar(12, 4096, 7, (-1), (int) (short) 10);
        int int21 = gregorianCalendar20.getWeeksInWeekYear();
        java.lang.String str22 = gregorianCalendar20.getCalendarType();
        java.time.ZonedDateTime zonedDateTime23 = gregorianCalendar20.toZonedDateTime();
        java.time.ZonedDateTime zonedDateTime25 = zonedDateTime23.minusMonths((long) 10);
        java.time.chrono.ChronoZonedDateTime<java.time.LocalDate> localDateChronoZonedDateTime26 = zonedDateTime23.withEarlierOffsetAtOverlap();
        java.time.ZonedDateTime zonedDateTime28 = zonedDateTime23.minusMonths((long) 4200);
        java.time.ZonedDateTime zonedDateTime30 = zonedDateTime28.plusNanos(8L);
        org.joda.time.Period period31 = org.joda.time.Period.ZERO;
        org.joda.time.Period period32 = period31.normalizedStandard();
        org.joda.time.Period period34 = period31.plusHours(2);
        java.time.chrono.IsoEra isoEra35 = java.time.chrono.IsoEra.CE;
        boolean boolean36 = period34.equals((java.lang.Object) isoEra35);
        java.time.LocalTime localTime41 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime42 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime41);
        java.time.LocalTime localTime47 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime48 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime47);
        java.time.temporal.ChronoField chronoField49 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime51 = localTime47.with((java.time.temporal.TemporalField) chronoField49, (long) (short) 1);
        long long52 = localTime41.getLong((java.time.temporal.TemporalField) chronoField49);
        boolean boolean53 = isoEra35.isSupported((java.time.temporal.TemporalField) chronoField49);
        boolean boolean54 = zonedDateTime28.isSupported((java.time.temporal.TemporalField) chronoField49);
        // The following exception was thrown during execution in test generation
        try {
            java.time.LocalDate localDate56 = localDate14.with((java.time.temporal.TemporalField) chronoField49, 34603223000000L);
            org.junit.Assert.fail("Expected exception of type java.time.temporal.UnsupportedTemporalTypeException; message: Unsupported field: NanoOfDay");
        } catch (java.time.temporal.UnsupportedTemporalTypeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertTrue("'" + chronoField8 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField8.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 52 + "'", int21 == 52);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "gregory" + "'", str22, "gregory");
        org.junit.Assert.assertNotNull(zonedDateTime23);
        org.junit.Assert.assertNotNull(zonedDateTime25);
        org.junit.Assert.assertNotNull(localDateChronoZonedDateTime26);
        org.junit.Assert.assertNotNull(zonedDateTime28);
        org.junit.Assert.assertNotNull(zonedDateTime30);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertTrue("'" + isoEra35 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra35.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(localTime41);
        org.junit.Assert.assertNotNull(localTime42);
        org.junit.Assert.assertNotNull(localTime47);
        org.junit.Assert.assertNotNull(localTime48);
        org.junit.Assert.assertTrue("'" + chronoField49 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField49.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime51);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 3601000000001L + "'", long52 == 3601000000001L);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
    }

    @Test
    public void test1805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1805");
        java.time.OffsetDateTime offsetDateTime0 = java.time.OffsetDateTime.now();
        java.time.LocalDate localDate2 = java.time.LocalDate.ofEpochDay((long) ' ');
        int int3 = localDate2.getMonthValue();
        org.joda.time.Period period4 = org.joda.time.Period.ZERO;
        org.joda.time.Period period5 = period4.normalizedStandard();
        org.joda.time.Period period7 = period4.plusHours(2);
        java.time.chrono.IsoEra isoEra8 = java.time.chrono.IsoEra.CE;
        boolean boolean9 = period7.equals((java.lang.Object) isoEra8);
        java.time.LocalTime localTime14 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime15 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime14);
        java.time.LocalTime localTime20 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime21 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime20);
        java.time.temporal.ChronoField chronoField22 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime24 = localTime20.with((java.time.temporal.TemporalField) chronoField22, (long) (short) 1);
        long long25 = localTime14.getLong((java.time.temporal.TemporalField) chronoField22);
        boolean boolean26 = isoEra8.isSupported((java.time.temporal.TemporalField) chronoField22);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery27 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period28 = isoEra8.query(periodTemporalQuery27);
        boolean boolean29 = period28.isNegative();
        java.time.Period period31 = period28.plusDays((long) ' ');
        java.time.temporal.ChronoField chronoField32 = java.time.temporal.ChronoField.SECOND_OF_DAY;
        boolean boolean33 = period28.equals((java.lang.Object) chronoField32);
        boolean boolean34 = localDate2.isSupported((java.time.temporal.TemporalField) chronoField32);
        java.time.temporal.TemporalUnit temporalUnit35 = chronoField32.getRangeUnit();
        java.time.OffsetDateTime offsetDateTime36 = offsetDateTime0.truncatedTo(temporalUnit35);
        java.time.OffsetDateTime offsetDateTime37 = java.time.OffsetDateTime.now();
        java.time.temporal.ChronoField chronoField38 = java.time.temporal.ChronoField.HOUR_OF_DAY;
        boolean boolean39 = offsetDateTime37.isSupported((java.time.temporal.TemporalField) chronoField38);
        java.time.Month month40 = offsetDateTime37.getMonth();
        java.time.ZoneOffset zoneOffset43 = java.time.ZoneOffset.ofHoursMinutes(1, 10);
        java.time.LocalDate localDate44 = java.time.LocalDate.now((java.time.ZoneId) zoneOffset43);
        java.time.Clock clock45 = java.time.Clock.system((java.time.ZoneId) zoneOffset43);
        java.time.Duration duration47 = java.time.Duration.ofSeconds((long) 0);
        java.time.Duration duration49 = duration47.multipliedBy((long) (byte) -1);
        java.time.Clock clock50 = java.time.Clock.offset(clock45, duration47);
        java.time.OffsetDateTime offsetDateTime51 = offsetDateTime37.plus((java.time.temporal.TemporalAmount) duration47);
        java.time.Instant instant52 = offsetDateTime37.toInstant();
        java.time.Instant instant54 = temporalUnit35.addTo(instant52, 0L);
        org.junit.Assert.assertNotNull(offsetDateTime0);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2 + "'", int3 == 2);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertTrue("'" + isoEra8 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra8.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertTrue("'" + chronoField22 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField22.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime24);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 3601000000001L + "'", long25 == 3601000000001L);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(periodTemporalQuery27);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertTrue("'" + chronoField32 + "' != '" + java.time.temporal.ChronoField.SECOND_OF_DAY + "'", chronoField32.equals(java.time.temporal.ChronoField.SECOND_OF_DAY));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + temporalUnit35 + "' != '" + java.time.temporal.ChronoUnit.DAYS + "'", temporalUnit35.equals(java.time.temporal.ChronoUnit.DAYS));
        org.junit.Assert.assertNotNull(offsetDateTime36);
        org.junit.Assert.assertNotNull(offsetDateTime37);
        org.junit.Assert.assertTrue("'" + chronoField38 + "' != '" + java.time.temporal.ChronoField.HOUR_OF_DAY + "'", chronoField38.equals(java.time.temporal.ChronoField.HOUR_OF_DAY));
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + month40 + "' != '" + java.time.Month.FEBRUARY + "'", month40.equals(java.time.Month.FEBRUARY));
        org.junit.Assert.assertNotNull(zoneOffset43);
        org.junit.Assert.assertNotNull(localDate44);
        org.junit.Assert.assertNotNull(clock45);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(clock50);
        org.junit.Assert.assertNotNull(offsetDateTime51);
        org.junit.Assert.assertNotNull(instant52);
        org.junit.Assert.assertNotNull(instant54);
    }

    @Test
    public void test1806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1806");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 3, chronology1);
        org.joda.time.Period period3 = org.joda.time.Period.ZERO;
        org.joda.time.Period period4 = period3.normalizedStandard();
        org.joda.time.Period period6 = period4.minusMinutes((int) ' ');
        org.joda.time.Period period8 = period6.minusMonths((int) (byte) 0);
        org.joda.time.PeriodType periodType9 = period8.getPeriodType();
        org.joda.time.DateTime dateTime10 = dateTime2.minus((org.joda.time.ReadablePeriod) period8);
        org.joda.time.DateTime dateTime12 = dateTime2.plusHours(34);
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.Duration duration15 = new org.joda.time.Duration(readableInstant13, readableInstant14);
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.Duration duration18 = new org.joda.time.Duration(readableInstant16, readableInstant17);
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.PeriodType periodType20 = null;
        org.joda.time.Period period21 = duration18.toPeriodTo(readableInstant19, periodType20);
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.Duration duration24 = new org.joda.time.Duration(readableInstant22, readableInstant23);
        long long25 = duration24.getMillis();
        boolean boolean26 = duration18.isShorterThan((org.joda.time.ReadableDuration) duration24);
        boolean boolean27 = duration15.isLongerThan((org.joda.time.ReadableDuration) duration24);
        org.joda.time.DateTime dateTime29 = dateTime12.withDurationAdded((org.joda.time.ReadableDuration) duration15, 256);
        org.joda.time.YearMonthDay yearMonthDay30 = dateTime12.toYearMonthDay();
        org.joda.time.DateTime dateTime31 = yearMonthDay30.toDateTimeAtMidnight();
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(yearMonthDay30);
        org.junit.Assert.assertNotNull(dateTime31);
    }

    @Test
    public void test1807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1807");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        int int1 = localDate0.getCenturyOfEra();
        org.joda.time.LocalDate.Property property2 = localDate0.dayOfWeek();
        org.joda.time.LocalDate localDate4 = property2.addToCopy(2097);
        long long5 = property2.remainder();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 20 + "'", int1 == 20);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
    }

    @Test
    public void test1808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1808");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) 57);
    }

    @Test
    public void test1809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1809");
        java.util.GregorianCalendar gregorianCalendar0 = new java.util.GregorianCalendar();
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay();
        org.joda.time.DateMidnight dateMidnight2 = yearMonthDay1.toDateMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        boolean boolean4 = dateMidnight2.isSupported(dateTimeFieldType3);
        boolean boolean5 = gregorianCalendar0.before((java.lang.Object) dateTimeFieldType3);
        java.util.Date date6 = gregorianCalendar0.getGregorianChange();
        date6.setSeconds((int) '#');
        org.junit.Assert.assertNotNull(dateMidnight2);
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Fri Oct 15 00:00:35 UTC 1582");
    }

    @Test
    public void test1810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1810");
        java.util.stream.LongStream longStream2 = java.util.stream.LongStream.rangeClosed((long) (short) -1, (long) 7);
        java.util.stream.LongStream longStream4 = longStream2.limit((long) 16384);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Spliterator.OfLong ofLong5 = longStream2.spliterator();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: stream has already been operated upon or closed");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(longStream2);
        org.junit.Assert.assertNotNull(longStream4);
    }

    @Test
    public void test1811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1811");
        java.util.GregorianCalendar gregorianCalendar5 = new java.util.GregorianCalendar(12, 4096, 7, (-1), (int) (short) 10);
        int int6 = gregorianCalendar5.getWeeksInWeekYear();
        java.util.TimeZone timeZone7 = gregorianCalendar5.getTimeZone();
        int int9 = timeZone7.getOffset((long) 14);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalTime localTime13 = new org.joda.time.LocalTime((long) 0, chronology12);
        org.joda.time.Chronology chronology14 = localTime13.getChronology();
        java.util.Locale locale15 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale locale16 = java.util.Locale.GERMANY;
        java.lang.String str17 = locale15.getDisplayScript(locale16);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket19 = new org.joda.time.format.DateTimeParserBucket((long) 1970, chronology14, locale15, (java.lang.Integer) 1);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.LocalTime localTime22 = new org.joda.time.LocalTime((long) 0, chronology21);
        org.joda.time.Chronology chronology23 = localTime22.getChronology();
        org.joda.time.DateTimeField dateTimeField24 = chronology23.weekyearOfCentury();
        org.joda.time.DurationField durationField25 = dateTimeField24.getLeapDurationField();
        dateTimeParserBucket19.saveField(dateTimeField24, (int) 'u');
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = org.joda.time.DateTimeFieldType.yearOfCentury();
        java.time.temporal.ChronoField chronoField30 = java.time.temporal.ChronoField.DAY_OF_WEEK;
        java.time.LocalDateTime localDateTime31 = java.time.LocalDateTime.now();
        java.time.temporal.ChronoField chronoField32 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime34 = localDateTime31.with((java.time.temporal.TemporalField) chronoField32, (long) 10);
        java.time.Duration duration36 = java.time.Duration.ofSeconds((long) 0);
        java.time.temporal.Temporal temporal37 = localDateTime31.minus((java.time.temporal.TemporalAmount) duration36);
        long long38 = chronoField30.getFrom((java.time.temporal.TemporalAccessor) temporal37);
        java.time.LocalTime localTime43 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime44 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime43);
        java.time.temporal.ChronoField chronoField45 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime47 = localTime43.with((java.time.temporal.TemporalField) chronoField45, (long) (short) 1);
        java.util.Locale locale48 = java.util.Locale.GERMANY;
        java.lang.String str49 = chronoField45.getDisplayName(locale48);
        java.lang.String str50 = chronoField30.getDisplayName(locale48);
        dateTimeParserBucket19.saveField(dateTimeFieldType28, "Optional.empty", locale48);
        java.lang.String str52 = locale48.getScript();
        java.lang.String str53 = timeZone7.getDisplayName(locale48);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 52 + "'", int6 == 52);
        org.junit.Assert.assertNotNull(timeZone7);
        org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNull(durationField25);
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertTrue("'" + chronoField30 + "' != '" + java.time.temporal.ChronoField.DAY_OF_WEEK + "'", chronoField30.equals(java.time.temporal.ChronoField.DAY_OF_WEEK));
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertTrue("'" + chronoField32 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField32.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime34);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(temporal37);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 1L + "'", long38 == 1L);
        org.junit.Assert.assertNotNull(localTime43);
        org.junit.Assert.assertNotNull(localTime44);
        org.junit.Assert.assertTrue("'" + chronoField45 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField45.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime47);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "NanoOfDay" + "'", str49, "NanoOfDay");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "Wochentag" + "'", str50, "Wochentag");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "Koordinierte Universalzeit" + "'", str53, "Koordinierte Universalzeit");
    }

    @Test
    public void test1812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1812");
        java.io.File file0 = null;
        java.io.File file2 = new java.io.File(file0, "1970-01-01T00:00:00.003Z");
        java.net.URL uRL3 = file2.toURL();
        java.io.File file4 = null;
        java.io.File file6 = new java.io.File(file4, "1970-01-01T00:00:00.003Z");
        java.net.URL uRL7 = file6.toURL();
        boolean boolean8 = uRL3.sameFile(uRL7);
        java.lang.String str9 = uRL7.getProtocol();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime(chronology10);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.withYearOfCentury((int) 'a');
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.plusSeconds(6);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime13.withWeekyear(10);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.weekyear();
        boolean boolean19 = localDateTime17.isSupported(dateTimeFieldType18);
        boolean boolean20 = uRL7.equals((java.lang.Object) localDateTime17);
        org.junit.Assert.assertNull("file2.getParent() == null", file2.getParent());
        org.junit.Assert.assertEquals(file2.toString(), "1970-01-01T00:00:00.003Z");
        org.junit.Assert.assertNotNull(uRL3);
// flaky:         org.junit.Assert.assertEquals(uRL3.toString(), "file:/experiment/1970-01-01T00:00:00.003Z/");
        org.junit.Assert.assertNull("file6.getParent() == null", file6.getParent());
        org.junit.Assert.assertEquals(file6.toString(), "1970-01-01T00:00:00.003Z");
        org.junit.Assert.assertNotNull(uRL7);
// flaky:         org.junit.Assert.assertEquals(uRL7.toString(), "file:/experiment/1970-01-01T00:00:00.003Z/");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "file" + "'", str9, "file");
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test1813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1813");
        java.util.stream.DoubleStream doubleStream1 = java.util.stream.DoubleStream.of((double) 1024);
        java.util.stream.DoubleStream doubleStream2 = doubleStream1.sorted();
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray3 = doubleStream1.toArray();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: stream has already been operated upon or closed");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleStream1);
        org.junit.Assert.assertNotNull(doubleStream2);
    }

    @Test
    public void test1814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1814");
        java.net.URI uRI1 = new java.net.URI("hi!");
        java.lang.String str2 = uRI1.getRawAuthority();
        java.lang.String str3 = uRI1.toString();
        java.lang.String str4 = uRI1.getRawFragment();
        java.net.URI uRI6 = new java.net.URI("hi!");
        java.lang.String str7 = uRI6.toASCIIString();
        java.net.URI uRI8 = uRI1.resolve(uRI6);
        java.net.URI uRI9 = uRI6.parseServerAuthority();
        int int10 = uRI6.getPort();
        java.lang.String str11 = uRI6.getQuery();
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "hi!" + "'", str3, "hi!");
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertNotNull(uRI8);
        org.junit.Assert.assertNotNull(uRI9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test1815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1815");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((long) 0, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) 3, chronology4);
        org.joda.time.DateTime.Property property6 = dateTime5.dayOfYear();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateMidnight dateMidnight8 = new org.joda.time.DateMidnight((java.lang.Object) dateTime5, chronology7);
        org.joda.time.DateTime dateTime9 = localTime2.toDateTime((org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateTime dateTime11 = dateTime9.minusMillis((int) (byte) 0);
        org.joda.time.DateTime dateTime13 = dateTime9.withMillis((long) 28);
        org.joda.time.DateTimeZone dateTimeZone14 = dateTime13.getZone();
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
    }

    @Test
    public void test1816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1816");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.Duration duration2 = new org.joda.time.Duration(readableInstant0, readableInstant1);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = duration2.toPeriodTo(readableInstant3, periodType4);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.Duration duration8 = new org.joda.time.Duration(readableInstant6, readableInstant7);
        long long9 = duration8.getMillis();
        boolean boolean10 = duration2.isShorterThan((org.joda.time.ReadableDuration) duration8);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) 3, chronology12);
        org.joda.time.DateTime.Property property14 = dateTime13.dayOfYear();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight((java.lang.Object) dateTime13, chronology15);
        org.joda.time.MutableDateTime mutableDateTime17 = dateTime13.toMutableDateTime();
        mutableDateTime17.addYears((int) (short) 100);
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime17.dayOfWeek();
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime17.year();
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime17.weekyear();
        boolean boolean23 = duration2.equals((java.lang.Object) mutableDateTime17);
        mutableDateTime17.addMonths((int) ' ');
        mutableDateTime17.add((long) (byte) 10);
        org.joda.time.Period period28 = org.joda.time.Period.ZERO;
        org.joda.time.Period period29 = period28.normalizedStandard();
        org.joda.time.Period period31 = period28.plusHours(2);
        java.time.chrono.IsoEra isoEra32 = java.time.chrono.IsoEra.CE;
        boolean boolean33 = period31.equals((java.lang.Object) isoEra32);
        int int34 = period31.getMinutes();
        mutableDateTime17.add((org.joda.time.ReadablePeriod) period31);
        java.util.TimeZone timeZone37 = null;
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forTimeZone(timeZone37);
        org.joda.time.DateMidnight dateMidnight39 = new org.joda.time.DateMidnight((long) 1970, dateTimeZone38);
        long long42 = dateTimeZone38.convertLocalToUTC((long) 3, false);
        long long45 = dateTimeZone38.convertLocalToUTC(0L, true);
        mutableDateTime17.setZoneRetainFields(dateTimeZone38);
        java.lang.String str47 = dateTimeZone38.toString();
        org.joda.time.chrono.EthiopicChronology ethiopicChronology48 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone38);
        org.joda.time.DateTimeField dateTimeField49 = ethiopicChronology48.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone50 = ethiopicChronology48.getZone();
        org.joda.time.DateTimeField dateTimeField51 = ethiopicChronology48.era();
        org.joda.time.DateTimeField dateTimeField52 = ethiopicChronology48.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone53 = ethiopicChronology48.getZone();
        org.joda.time.DateTimeField dateTimeField54 = ethiopicChronology48.yearOfEra();
        int int56 = dateTimeField54.getLeapAmount(624L);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertTrue("'" + isoEra32 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra32.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 3L + "'", long42 == 3L);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Etc/UTC" + "'", str47, "Etc/UTC");
        org.junit.Assert.assertNotNull(ethiopicChronology48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
    }

    @Test
    public void test1817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1817");
        java.time.LocalTime localTime4 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime5 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime4);
        java.time.temporal.ChronoField chronoField6 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime8 = localTime4.with((java.time.temporal.TemporalField) chronoField6, (long) (short) 1);
        java.time.Duration duration10 = java.time.Duration.ofMinutes((long) 3);
        java.time.LocalTime localTime11 = localTime4.minus((java.time.temporal.TemporalAmount) duration10);
        java.time.Duration duration13 = duration10.minusNanos((long) 14);
        java.time.Duration duration15 = duration13.minusMillis(100L);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertTrue("'" + chronoField6 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField6.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration15);
    }

    @Test
    public void test1818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1818");
        java.time.Instant instant0 = java.time.Instant.now();
        java.time.Instant instant1 = java.time.Instant.now();
        boolean boolean2 = instant0.isAfter(instant1);
        java.time.LocalDate localDate4 = java.time.LocalDate.ofEpochDay((long) ' ');
        int int5 = localDate4.getMonthValue();
        org.joda.time.Period period6 = org.joda.time.Period.ZERO;
        org.joda.time.Period period7 = period6.normalizedStandard();
        org.joda.time.Period period9 = period6.plusHours(2);
        java.time.chrono.IsoEra isoEra10 = java.time.chrono.IsoEra.CE;
        boolean boolean11 = period9.equals((java.lang.Object) isoEra10);
        java.time.LocalTime localTime16 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime17 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime16);
        java.time.LocalTime localTime22 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime23 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime22);
        java.time.temporal.ChronoField chronoField24 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime26 = localTime22.with((java.time.temporal.TemporalField) chronoField24, (long) (short) 1);
        long long27 = localTime16.getLong((java.time.temporal.TemporalField) chronoField24);
        boolean boolean28 = isoEra10.isSupported((java.time.temporal.TemporalField) chronoField24);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery29 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period30 = isoEra10.query(periodTemporalQuery29);
        boolean boolean31 = period30.isNegative();
        java.time.Period period33 = period30.plusDays((long) ' ');
        java.time.temporal.ChronoField chronoField34 = java.time.temporal.ChronoField.SECOND_OF_DAY;
        boolean boolean35 = period30.equals((java.lang.Object) chronoField34);
        boolean boolean36 = localDate4.isSupported((java.time.temporal.TemporalField) chronoField34);
        java.time.temporal.TemporalUnit temporalUnit37 = chronoField34.getRangeUnit();
        java.time.Instant instant38 = instant1.truncatedTo(temporalUnit37);
        int int39 = instant38.getNano();
        java.nio.file.attribute.FileTime fileTime40 = java.nio.file.attribute.FileTime.from(instant38);
        java.time.OffsetTime offsetTime41 = java.time.OffsetTime.MAX;
        java.time.LocalTime localTime42 = offsetTime41.toLocalTime();
        java.time.LocalTime localTime47 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime48 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime47);
        java.time.LocalTime localTime53 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime54 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime53);
        java.time.temporal.ChronoField chronoField55 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime57 = localTime53.with((java.time.temporal.TemporalField) chronoField55, (long) (short) 1);
        long long58 = localTime47.getLong((java.time.temporal.TemporalField) chronoField55);
        java.time.LocalTime localTime60 = localTime47.withSecond((int) (short) 1);
        int int61 = localTime60.getMinute();
        java.time.LocalTime localTime63 = localTime60.plusHours((long) (-1));
        java.time.OffsetTime offsetTime64 = offsetTime41.with((java.time.temporal.TemporalAdjuster) localTime60);
        java.time.OffsetTime offsetTime66 = offsetTime41.minusHours((long) 3);
        java.time.OffsetTime offsetTime68 = offsetTime41.minusMinutes((long) 101);
        // The following exception was thrown during execution in test generation
        try {
            java.time.temporal.Temporal temporal69 = instant38.adjustInto((java.time.temporal.Temporal) offsetTime68);
            org.junit.Assert.fail("Expected exception of type java.time.temporal.UnsupportedTemporalTypeException; message: Unsupported field: InstantSeconds");
        } catch (java.time.temporal.UnsupportedTemporalTypeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(instant0);
        org.junit.Assert.assertNotNull(instant1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2 + "'", int5 == 2);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertTrue("'" + isoEra10 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra10.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertNotNull(localTime23);
        org.junit.Assert.assertTrue("'" + chronoField24 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField24.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime26);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 3601000000001L + "'", long27 == 3601000000001L);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(periodTemporalQuery29);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertTrue("'" + chronoField34 + "' != '" + java.time.temporal.ChronoField.SECOND_OF_DAY + "'", chronoField34.equals(java.time.temporal.ChronoField.SECOND_OF_DAY));
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + temporalUnit37 + "' != '" + java.time.temporal.ChronoUnit.DAYS + "'", temporalUnit37.equals(java.time.temporal.ChronoUnit.DAYS));
        org.junit.Assert.assertNotNull(instant38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(fileTime40);
        org.junit.Assert.assertNotNull(offsetTime41);
        org.junit.Assert.assertNotNull(localTime42);
        org.junit.Assert.assertNotNull(localTime47);
        org.junit.Assert.assertNotNull(localTime48);
        org.junit.Assert.assertNotNull(localTime53);
        org.junit.Assert.assertNotNull(localTime54);
        org.junit.Assert.assertTrue("'" + chronoField55 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField55.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime57);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 3601000000001L + "'", long58 == 3601000000001L);
        org.junit.Assert.assertNotNull(localTime60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(localTime63);
        org.junit.Assert.assertNotNull(offsetTime64);
        org.junit.Assert.assertNotNull(offsetTime66);
        org.junit.Assert.assertNotNull(offsetTime68);
    }

    @Test
    public void test1819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1819");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((long) 0, chronology2);
        org.joda.time.Chronology chronology4 = localTime3.getChronology();
        org.joda.time.DateTimeField dateTimeField5 = chronology4.weekyearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime6 = org.joda.time.MutableDateTime.now(chronology4);
        org.joda.time.DateTimeField dateTimeField7 = chronology4.monthOfYear();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) 1, chronology4);
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Duration duration11 = new org.joda.time.Duration(readableInstant9, readableInstant10);
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.PeriodType periodType13 = null;
        org.joda.time.Period period14 = duration11.toPeriodTo(readableInstant12, periodType13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.Duration duration17 = new org.joda.time.Duration(readableInstant15, readableInstant16);
        long long18 = duration17.getMillis();
        boolean boolean19 = duration11.isShorterThan((org.joda.time.ReadableDuration) duration17);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((long) 3, chronology21);
        org.joda.time.DateTime.Property property23 = dateTime22.dayOfYear();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateMidnight dateMidnight25 = new org.joda.time.DateMidnight((java.lang.Object) dateTime22, chronology24);
        org.joda.time.MutableDateTime mutableDateTime26 = dateTime22.toMutableDateTime();
        mutableDateTime26.addYears((int) (short) 100);
        org.joda.time.MutableDateTime.Property property29 = mutableDateTime26.dayOfWeek();
        org.joda.time.MutableDateTime.Property property30 = mutableDateTime26.year();
        org.joda.time.MutableDateTime.Property property31 = mutableDateTime26.weekyear();
        boolean boolean32 = duration11.equals((java.lang.Object) mutableDateTime26);
        mutableDateTime26.addMonths((int) ' ');
        mutableDateTime26.add((long) (byte) 10);
        org.joda.time.Period period37 = org.joda.time.Period.ZERO;
        org.joda.time.Period period38 = period37.normalizedStandard();
        org.joda.time.Period period40 = period37.plusHours(2);
        java.time.chrono.IsoEra isoEra41 = java.time.chrono.IsoEra.CE;
        boolean boolean42 = period40.equals((java.lang.Object) isoEra41);
        int int43 = period40.getMinutes();
        mutableDateTime26.add((org.joda.time.ReadablePeriod) period40);
        java.util.TimeZone timeZone46 = null;
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.forTimeZone(timeZone46);
        org.joda.time.DateMidnight dateMidnight48 = new org.joda.time.DateMidnight((long) 1970, dateTimeZone47);
        long long51 = dateTimeZone47.convertLocalToUTC((long) 3, false);
        long long54 = dateTimeZone47.convertLocalToUTC(0L, true);
        mutableDateTime26.setZoneRetainFields(dateTimeZone47);
        java.lang.String str56 = dateTimeZone47.toString();
        org.joda.time.chrono.EthiopicChronology ethiopicChronology57 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone47);
        org.joda.time.DateTimeField dateTimeField58 = ethiopicChronology57.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone59 = ethiopicChronology57.getZone();
        org.joda.time.DateTimeField dateTimeField60 = ethiopicChronology57.centuryOfEra();
        org.joda.time.DateTime dateTime61 = dateTime8.withChronology((org.joda.time.Chronology) ethiopicChronology57);
        org.joda.time.DateTime dateTime62 = dateTime61.toDateTimeISO();
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(mutableDateTime26);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertTrue("'" + isoEra41 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra41.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 3L + "'", long51 == 3L);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 0L + "'", long54 == 0L);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "Etc/UTC" + "'", str56, "Etc/UTC");
        org.junit.Assert.assertNotNull(ethiopicChronology57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(dateTimeZone59);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTime62);
    }

    @Test
    public void test1820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1820");
        java.nio.charset.CodingErrorAction codingErrorAction0 = java.nio.charset.CodingErrorAction.REPORT;
        org.junit.Assert.assertNotNull(codingErrorAction0);
    }

    @Test
    public void test1821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1821");
        org.joda.time.Weeks weeks0 = org.joda.time.Weeks.ONE;
        java.util.concurrent.TimeUnit timeUnit1 = java.util.concurrent.TimeUnit.NANOSECONDS;
        boolean boolean2 = weeks0.equals((java.lang.Object) timeUnit1);
        org.joda.time.MutablePeriod mutablePeriod3 = weeks0.toMutablePeriod();
        int int4 = mutablePeriod3.getSeconds();
        mutablePeriod3.addHours((int) 'a');
        org.joda.time.DurationFieldType[] durationFieldTypeArray7 = mutablePeriod3.getFieldTypes();
        mutablePeriod3.addMillis(508);
        org.junit.Assert.assertNotNull(weeks0);
        org.junit.Assert.assertNotNull(timeUnit1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(mutablePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(durationFieldTypeArray7);
    }

    @Test
    public void test1822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1822");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.now();
        java.time.LocalDateTime localDateTime2 = localDateTime0.minusYears((long) (byte) 10);
        java.time.LocalDateTime localDateTime3 = java.time.LocalDateTime.now();
        java.time.LocalDateTime localDateTime5 = localDateTime3.minusYears((long) (byte) 10);
        boolean boolean6 = localDateTime0.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime5);
        java.time.LocalDateTime localDateTime8 = localDateTime5.withSecond((int) '+');
        java.time.chrono.Chronology chronology9 = localDateTime5.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            java.time.chrono.ChronoLocalDate chronoLocalDate13 = chronology9.date((int) 'a', 59, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for MonthOfYear (valid values 1 - 12): 59");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(chronology9);
    }

    @Test
    public void test1823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1823");
        java.util.TimeZone timeZone4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forTimeZone(timeZone4);
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight((long) 1970, dateTimeZone5);
        long long9 = dateTimeZone5.convertLocalToUTC((long) 3, false);
        org.joda.time.Interval interval10 = new org.joda.time.Interval(10L, (long) 2097, dateTimeZone5);
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(dateTimeZone5);
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight(28L, dateTimeZone5);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) 3, chronology14);
        org.joda.time.DateTime.Property property16 = dateTime15.dayOfYear();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight((java.lang.Object) dateTime15, chronology17);
        org.joda.time.MutableDateTime mutableDateTime19 = dateTime15.toMutableDateTime();
        org.joda.time.Days days20 = org.joda.time.Days.ONE;
        org.joda.time.MutableInterval mutableInterval21 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime15, (org.joda.time.ReadablePeriod) days20);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((long) 3, chronology23);
        org.joda.time.DateTime.Property property25 = dateTime24.dayOfYear();
        org.joda.time.Interval interval26 = property25.toInterval();
        mutableInterval21.setInterval((org.joda.time.ReadableInterval) interval26);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((long) 3, chronology29);
        org.joda.time.DateTime.Property property31 = dateTime30.dayOfYear();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.DateMidnight dateMidnight33 = new org.joda.time.DateMidnight((java.lang.Object) dateTime30, chronology32);
        org.joda.time.DateMidnight.Property property34 = dateMidnight33.dayOfMonth();
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.Duration duration37 = new org.joda.time.Duration(readableInstant35, readableInstant36);
        org.joda.time.Duration duration39 = duration37.withMillis((-1L));
        org.joda.time.ReadableDuration readableDuration40 = null;
        org.joda.time.Duration duration41 = duration37.minus(readableDuration40);
        org.joda.time.DateMidnight dateMidnight42 = dateMidnight33.plus((org.joda.time.ReadableDuration) duration41);
        mutableInterval21.setDurationAfterStart((org.joda.time.ReadableDuration) duration41);
        org.joda.time.MutableDateTime mutableDateTime44 = new org.joda.time.MutableDateTime();
        boolean boolean45 = mutableInterval21.isBefore((org.joda.time.ReadableInstant) mutableDateTime44);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime((long) 3, chronology47);
        org.joda.time.DateTime.Property property49 = dateTime48.dayOfYear();
        int int50 = dateTime48.getHourOfDay();
        boolean boolean52 = dateTime48.isBefore((long) '/');
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.DateTime dateTime55 = new org.joda.time.DateTime((long) 3, chronology54);
        org.joda.time.DateTime.Property property56 = dateTime55.dayOfYear();
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.DateMidnight dateMidnight58 = new org.joda.time.DateMidnight((java.lang.Object) dateTime55, chronology57);
        org.joda.time.DateMidnight dateMidnight60 = dateMidnight58.minusMonths((-1));
        org.joda.time.DateMidnight dateMidnight62 = dateMidnight58.withDayOfYear((int) ' ');
        mutableInterval21.setInterval((org.joda.time.ReadableInstant) dateTime48, (org.joda.time.ReadableInstant) dateMidnight62);
        boolean boolean64 = dateTimeZone5.equals((java.lang.Object) mutableInterval21);
        org.joda.time.YearMonthDay yearMonthDay65 = new org.joda.time.YearMonthDay(dateTimeZone5);
        org.joda.time.Period period74 = org.joda.time.Period.ZERO;
        org.joda.time.Period period75 = period74.normalizedStandard();
        org.joda.time.Period period77 = period75.minusMinutes((int) ' ');
        org.joda.time.Period period79 = period77.minusMonths((int) (byte) 0);
        org.joda.time.PeriodType periodType80 = period77.getPeriodType();
        org.joda.time.MutablePeriod mutablePeriod81 = new org.joda.time.MutablePeriod(292269054, (int) ':', (int) (short) 10, (int) ':', 9, (int) 'a', 57, 2097, periodType80);
        mutablePeriod81.addMonths((-1));
        org.joda.time.YearMonthDay yearMonthDay84 = yearMonthDay65.minus((org.joda.time.ReadablePeriod) mutablePeriod81);
        org.joda.time.ReadablePeriod readablePeriod85 = null;
        org.joda.time.YearMonthDay yearMonthDay87 = yearMonthDay84.withPeriodAdded(readablePeriod85, 2097);
        org.joda.time.YearMonthDay yearMonthDay89 = yearMonthDay84.minusYears(0);
        org.joda.time.YearMonthDay yearMonthDay91 = yearMonthDay89.withYear((int) (byte) 10);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 3L + "'", long9 == 3L);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(mutableDateTime19);
        org.junit.Assert.assertNotNull(days20);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(dateMidnight42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(dateMidnight60);
        org.junit.Assert.assertNotNull(dateMidnight62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(period74);
        org.junit.Assert.assertNotNull(period75);
        org.junit.Assert.assertNotNull(period77);
        org.junit.Assert.assertNotNull(period79);
        org.junit.Assert.assertNotNull(periodType80);
        org.junit.Assert.assertNotNull(yearMonthDay84);
        org.junit.Assert.assertNotNull(yearMonthDay87);
        org.junit.Assert.assertNotNull(yearMonthDay89);
        org.junit.Assert.assertNotNull(yearMonthDay91);
    }

    @Test
    public void test1824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1824");
        java.net.URI uRI1 = new java.net.URI("hi!");
        java.lang.String str2 = uRI1.getRawAuthority();
        java.lang.String str3 = uRI1.toString();
        java.lang.String str4 = uRI1.getRawFragment();
        java.lang.String str5 = uRI1.getSchemeSpecificPart();
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "hi!" + "'", str3, "hi!");
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
    }

    @Test
    public void test1825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1825");
        java.nio.charset.Charset charset0 = java.nio.charset.Charset.defaultCharset();
        java.nio.charset.CharsetDecoder charsetDecoder1 = charset0.newDecoder();
        float float2 = charsetDecoder1.maxCharsPerByte();
        java.nio.charset.Charset charset3 = java.nio.charset.Charset.defaultCharset();
        java.nio.charset.CharsetDecoder charsetDecoder4 = charset3.newDecoder();
        java.nio.charset.Charset charset5 = java.nio.charset.Charset.defaultCharset();
        boolean boolean6 = charset3.contains(charset5);
        java.nio.charset.CharsetEncoder charsetEncoder7 = charset3.newEncoder();
        char[] charArray8 = new char[] {};
        java.nio.CharBuffer charBuffer9 = java.nio.CharBuffer.wrap(charArray8);
        java.nio.ByteBuffer byteBuffer10 = charsetEncoder7.encode(charBuffer9);
        char[] charArray17 = new char[] { '#', '/', '4', 'a', '4', 'u' };
        java.nio.CharBuffer charBuffer18 = java.nio.CharBuffer.wrap(charArray17);
        java.nio.charset.CoderResult coderResult20 = charsetDecoder1.decode(byteBuffer10, charBuffer18, false);
        java.nio.charset.Charset charset21 = java.nio.charset.Charset.defaultCharset();
        java.nio.charset.CharsetDecoder charsetDecoder22 = charset21.newDecoder();
        float float23 = charsetDecoder22.maxCharsPerByte();
        java.nio.charset.Charset charset24 = java.nio.charset.Charset.defaultCharset();
        java.nio.charset.CharsetDecoder charsetDecoder25 = charset24.newDecoder();
        java.nio.charset.Charset charset26 = java.nio.charset.Charset.defaultCharset();
        boolean boolean27 = charset24.contains(charset26);
        java.nio.charset.CharsetEncoder charsetEncoder28 = charset24.newEncoder();
        char[] charArray29 = new char[] {};
        java.nio.CharBuffer charBuffer30 = java.nio.CharBuffer.wrap(charArray29);
        java.nio.ByteBuffer byteBuffer31 = charsetEncoder28.encode(charBuffer30);
        char[] charArray38 = new char[] { '#', '/', '4', 'a', '4', 'u' };
        java.nio.CharBuffer charBuffer39 = java.nio.CharBuffer.wrap(charArray38);
        java.nio.charset.CoderResult coderResult41 = charsetDecoder22.decode(byteBuffer31, charBuffer39, false);
        boolean boolean42 = charBuffer39.isDirect();
        char[] charArray43 = charBuffer39.array();
        int int44 = charBuffer18.read(charBuffer39);
        java.time.LocalDateTime localDateTime45 = java.time.LocalDateTime.now();
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery46 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period47 = localDateTime45.query(periodTemporalQuery46);
        boolean boolean48 = charBuffer39.equals((java.lang.Object) period47);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.CharBuffer charBuffer52 = charBuffer39.append((java.lang.CharSequence) "0 - 86399", 0, 52);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: 52");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charset0);
        org.junit.Assert.assertNotNull(charsetDecoder1);
        org.junit.Assert.assertTrue("'" + float2 + "' != '" + 1.0f + "'", float2 == 1.0f);
        org.junit.Assert.assertNotNull(charset3);
        org.junit.Assert.assertNotNull(charsetDecoder4);
        org.junit.Assert.assertNotNull(charset5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(charsetEncoder7);
        org.junit.Assert.assertNotNull(charArray8);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray8), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray8), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray8), "[]");
        org.junit.Assert.assertNotNull(charBuffer9);
        org.junit.Assert.assertNotNull(byteBuffer10);
        org.junit.Assert.assertNotNull(charArray17);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray17), "#/4a4u");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray17), "#/4a4u");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray17), "[#, /, 4, a, 4, u]");
        org.junit.Assert.assertNotNull(charBuffer18);
        org.junit.Assert.assertNotNull(coderResult20);
        org.junit.Assert.assertNotNull(charset21);
        org.junit.Assert.assertNotNull(charsetDecoder22);
        org.junit.Assert.assertTrue("'" + float23 + "' != '" + 1.0f + "'", float23 == 1.0f);
        org.junit.Assert.assertNotNull(charset24);
        org.junit.Assert.assertNotNull(charsetDecoder25);
        org.junit.Assert.assertNotNull(charset26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(charsetEncoder28);
        org.junit.Assert.assertNotNull(charArray29);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray29), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray29), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray29), "[]");
        org.junit.Assert.assertNotNull(charBuffer30);
        org.junit.Assert.assertNotNull(byteBuffer31);
        org.junit.Assert.assertNotNull(charArray38);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray38), "#/4a4u");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray38), "#/4a4u");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray38), "[#, /, 4, a, 4, u]");
        org.junit.Assert.assertNotNull(charBuffer39);
        org.junit.Assert.assertNotNull(coderResult41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(charArray43);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray43), "#/4a4u");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray43), "#/4a4u");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray43), "[#, /, 4, a, 4, u]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 6 + "'", int44 == 6);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(periodTemporalQuery46);
        org.junit.Assert.assertNotNull(period47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test1826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1826");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        boolean boolean3 = periodFormatter2.isParser();
        java.util.TimeZone timeZone8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight((long) 1970, dateTimeZone9);
        long long13 = dateTimeZone9.convertLocalToUTC((long) 3, false);
        org.joda.time.Interval interval14 = new org.joda.time.Interval(10L, (long) 2097, dateTimeZone9);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(dateTimeZone9);
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight(28L, dateTimeZone9);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) 3, chronology18);
        org.joda.time.DateTime.Property property20 = dateTime19.dayOfYear();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight((java.lang.Object) dateTime19, chronology21);
        org.joda.time.MutableDateTime mutableDateTime23 = dateTime19.toMutableDateTime();
        org.joda.time.Days days24 = org.joda.time.Days.ONE;
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime19, (org.joda.time.ReadablePeriod) days24);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((long) 3, chronology27);
        org.joda.time.DateTime.Property property29 = dateTime28.dayOfYear();
        org.joda.time.Interval interval30 = property29.toInterval();
        mutableInterval25.setInterval((org.joda.time.ReadableInterval) interval30);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime((long) 3, chronology33);
        org.joda.time.DateTime.Property property35 = dateTime34.dayOfYear();
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.DateMidnight dateMidnight37 = new org.joda.time.DateMidnight((java.lang.Object) dateTime34, chronology36);
        org.joda.time.DateMidnight.Property property38 = dateMidnight37.dayOfMonth();
        org.joda.time.ReadableInstant readableInstant39 = null;
        org.joda.time.ReadableInstant readableInstant40 = null;
        org.joda.time.Duration duration41 = new org.joda.time.Duration(readableInstant39, readableInstant40);
        org.joda.time.Duration duration43 = duration41.withMillis((-1L));
        org.joda.time.ReadableDuration readableDuration44 = null;
        org.joda.time.Duration duration45 = duration41.minus(readableDuration44);
        org.joda.time.DateMidnight dateMidnight46 = dateMidnight37.plus((org.joda.time.ReadableDuration) duration45);
        mutableInterval25.setDurationAfterStart((org.joda.time.ReadableDuration) duration45);
        org.joda.time.MutableDateTime mutableDateTime48 = new org.joda.time.MutableDateTime();
        boolean boolean49 = mutableInterval25.isBefore((org.joda.time.ReadableInstant) mutableDateTime48);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime((long) 3, chronology51);
        org.joda.time.DateTime.Property property53 = dateTime52.dayOfYear();
        int int54 = dateTime52.getHourOfDay();
        boolean boolean56 = dateTime52.isBefore((long) '/');
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.DateTime dateTime59 = new org.joda.time.DateTime((long) 3, chronology58);
        org.joda.time.DateTime.Property property60 = dateTime59.dayOfYear();
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.DateMidnight dateMidnight62 = new org.joda.time.DateMidnight((java.lang.Object) dateTime59, chronology61);
        org.joda.time.DateMidnight dateMidnight64 = dateMidnight62.minusMonths((-1));
        org.joda.time.DateMidnight dateMidnight66 = dateMidnight62.withDayOfYear((int) ' ');
        mutableInterval25.setInterval((org.joda.time.ReadableInstant) dateTime52, (org.joda.time.ReadableInstant) dateMidnight66);
        boolean boolean68 = dateTimeZone9.equals((java.lang.Object) mutableInterval25);
        org.joda.time.YearMonthDay yearMonthDay69 = new org.joda.time.YearMonthDay(dateTimeZone9);
        org.joda.time.Period period78 = org.joda.time.Period.ZERO;
        org.joda.time.Period period79 = period78.normalizedStandard();
        org.joda.time.Period period81 = period79.minusMinutes((int) ' ');
        org.joda.time.Period period83 = period81.minusMonths((int) (byte) 0);
        org.joda.time.PeriodType periodType84 = period81.getPeriodType();
        org.joda.time.MutablePeriod mutablePeriod85 = new org.joda.time.MutablePeriod(292269054, (int) ':', (int) (short) 10, (int) ':', 9, (int) 'a', 57, 2097, periodType84);
        mutablePeriod85.addMonths((-1));
        org.joda.time.YearMonthDay yearMonthDay88 = yearMonthDay69.minus((org.joda.time.ReadablePeriod) mutablePeriod85);
        // The following exception was thrown during execution in test generation
        try {
            int int91 = periodFormatter2.parseInto((org.joda.time.ReadWritablePeriod) mutablePeriod85, "UNDERFLOW", 1728000);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 3L + "'", long13 == 3L);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(mutableDateTime23);
        org.junit.Assert.assertNotNull(days24);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(dateMidnight46);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertNotNull(dateMidnight64);
        org.junit.Assert.assertNotNull(dateMidnight66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(period78);
        org.junit.Assert.assertNotNull(period79);
        org.junit.Assert.assertNotNull(period81);
        org.junit.Assert.assertNotNull(period83);
        org.junit.Assert.assertNotNull(periodType84);
        org.junit.Assert.assertNotNull(yearMonthDay88);
    }

    @Test
    public void test1827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1827");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 3, chronology1);
        org.joda.time.DateTime.Property property3 = dateTime2.dayOfYear();
        org.joda.time.DateTime.Property property4 = dateTime2.dayOfYear();
        org.joda.time.YearMonthDay yearMonthDay5 = dateTime2.toYearMonthDay();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(yearMonthDay5);
    }

    @Test
    public void test1828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1828");
        java.nio.charset.Charset charset0 = java.nio.charset.Charset.defaultCharset();
        java.nio.charset.CharsetDecoder charsetDecoder1 = charset0.newDecoder();
        float float2 = charsetDecoder1.maxCharsPerByte();
        java.nio.charset.Charset charset3 = java.nio.charset.Charset.defaultCharset();
        java.nio.charset.CharsetDecoder charsetDecoder4 = charset3.newDecoder();
        java.nio.charset.Charset charset5 = java.nio.charset.Charset.defaultCharset();
        boolean boolean6 = charset3.contains(charset5);
        java.nio.charset.CharsetEncoder charsetEncoder7 = charset3.newEncoder();
        char[] charArray8 = new char[] {};
        java.nio.CharBuffer charBuffer9 = java.nio.CharBuffer.wrap(charArray8);
        java.nio.ByteBuffer byteBuffer10 = charsetEncoder7.encode(charBuffer9);
        char[] charArray17 = new char[] { '#', '/', '4', 'a', '4', 'u' };
        java.nio.CharBuffer charBuffer18 = java.nio.CharBuffer.wrap(charArray17);
        java.nio.charset.CoderResult coderResult20 = charsetDecoder1.decode(byteBuffer10, charBuffer18, false);
        java.lang.String str21 = charsetDecoder1.replacement();
        java.nio.charset.CodingErrorAction codingErrorAction22 = charsetDecoder1.malformedInputAction();
        org.junit.Assert.assertNotNull(charset0);
        org.junit.Assert.assertNotNull(charsetDecoder1);
        org.junit.Assert.assertTrue("'" + float2 + "' != '" + 1.0f + "'", float2 == 1.0f);
        org.junit.Assert.assertNotNull(charset3);
        org.junit.Assert.assertNotNull(charsetDecoder4);
        org.junit.Assert.assertNotNull(charset5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(charsetEncoder7);
        org.junit.Assert.assertNotNull(charArray8);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray8), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray8), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray8), "[]");
        org.junit.Assert.assertNotNull(charBuffer9);
        org.junit.Assert.assertNotNull(byteBuffer10);
        org.junit.Assert.assertNotNull(charArray17);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray17), "#/4a4u");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray17), "#/4a4u");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray17), "[#, /, 4, a, 4, u]");
        org.junit.Assert.assertNotNull(charBuffer18);
        org.junit.Assert.assertNotNull(coderResult20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "\ufffd" + "'", str21, "\ufffd");
        org.junit.Assert.assertNotNull(codingErrorAction22);
    }

    @Test
    public void test1829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1829");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 3, chronology1);
        org.joda.time.DateTime.Property property3 = dateTime2.dayOfYear();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight((java.lang.Object) dateTime2, chronology4);
        org.joda.time.DateMidnight.Property property6 = dateMidnight5.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight7 = property6.roundCeilingCopy();
        org.joda.time.DateMidnight dateMidnight9 = property6.setCopy("1");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight11 = property6.setCopy("hours");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"hours\" for dayOfMonth is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(dateMidnight9);
    }

    @Test
    public void test1830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1830");
        java.util.GregorianCalendar gregorianCalendar5 = new java.util.GregorianCalendar(12, 4096, 7, (-1), (int) (short) 10);
        int int6 = gregorianCalendar5.getWeeksInWeekYear();
        java.lang.String str7 = gregorianCalendar5.getCalendarType();
        java.time.ZonedDateTime zonedDateTime8 = gregorianCalendar5.toZonedDateTime();
        java.util.GregorianCalendar gregorianCalendar14 = new java.util.GregorianCalendar(12, 4096, 7, (-1), (int) (short) 10);
        int int15 = gregorianCalendar14.getWeeksInWeekYear();
        java.lang.String str16 = gregorianCalendar14.getCalendarType();
        java.time.ZonedDateTime zonedDateTime17 = gregorianCalendar14.toZonedDateTime();
        int int18 = zonedDateTime8.compareTo((java.time.chrono.ChronoZonedDateTime<java.time.LocalDate>) zonedDateTime17);
        java.time.ZonedDateTime zonedDateTime20 = zonedDateTime8.plusDays((long) 2022);
        java.time.Instant instant21 = zonedDateTime8.toInstant();
        java.time.chrono.Chronology chronology22 = zonedDateTime8.getChronology();
        java.util.GregorianCalendar gregorianCalendar28 = new java.util.GregorianCalendar(12, 4096, 7, (-1), (int) (short) 10);
        int int29 = gregorianCalendar28.getWeeksInWeekYear();
        java.lang.String str30 = gregorianCalendar28.getCalendarType();
        java.time.ZonedDateTime zonedDateTime31 = gregorianCalendar28.toZonedDateTime();
        java.time.ZonedDateTime zonedDateTime33 = zonedDateTime31.minusMonths((long) 10);
        boolean boolean34 = zonedDateTime8.isBefore((java.time.chrono.ChronoZonedDateTime<java.time.LocalDate>) zonedDateTime33);
        java.util.GregorianCalendar gregorianCalendar40 = new java.util.GregorianCalendar(12, 4096, 7, (-1), (int) (short) 10);
        int int41 = gregorianCalendar40.getWeeksInWeekYear();
        java.lang.String str42 = gregorianCalendar40.getCalendarType();
        java.time.ZonedDateTime zonedDateTime43 = gregorianCalendar40.toZonedDateTime();
        java.util.GregorianCalendar gregorianCalendar49 = new java.util.GregorianCalendar(12, 4096, 7, (-1), (int) (short) 10);
        int int50 = gregorianCalendar49.getWeeksInWeekYear();
        java.lang.String str51 = gregorianCalendar49.getCalendarType();
        java.time.ZonedDateTime zonedDateTime52 = gregorianCalendar49.toZonedDateTime();
        int int53 = zonedDateTime43.compareTo((java.time.chrono.ChronoZonedDateTime<java.time.LocalDate>) zonedDateTime52);
        java.time.ZonedDateTime zonedDateTime55 = zonedDateTime43.plusDays((long) 2022);
        java.time.Instant instant56 = zonedDateTime43.toInstant();
        java.time.chrono.Chronology chronology57 = zonedDateTime43.getChronology();
        java.util.GregorianCalendar gregorianCalendar63 = new java.util.GregorianCalendar(12, 4096, 7, (-1), (int) (short) 10);
        int int64 = gregorianCalendar63.getWeeksInWeekYear();
        java.lang.String str65 = gregorianCalendar63.getCalendarType();
        java.time.ZonedDateTime zonedDateTime66 = gregorianCalendar63.toZonedDateTime();
        java.time.ZonedDateTime zonedDateTime68 = zonedDateTime66.minusMonths((long) 10);
        boolean boolean69 = zonedDateTime43.isBefore((java.time.chrono.ChronoZonedDateTime<java.time.LocalDate>) zonedDateTime68);
        java.time.ZonedDateTime zonedDateTime71 = zonedDateTime68.plusSeconds((long) 10800000);
        boolean boolean72 = zonedDateTime33.isAfter((java.time.chrono.ChronoZonedDateTime<java.time.LocalDate>) zonedDateTime71);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 52 + "'", int6 == 52);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "gregory" + "'", str7, "gregory");
        org.junit.Assert.assertNotNull(zonedDateTime8);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 52 + "'", int15 == 52);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "gregory" + "'", str16, "gregory");
        org.junit.Assert.assertNotNull(zonedDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(zonedDateTime20);
        org.junit.Assert.assertNotNull(instant21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 52 + "'", int29 == 52);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "gregory" + "'", str30, "gregory");
        org.junit.Assert.assertNotNull(zonedDateTime31);
        org.junit.Assert.assertNotNull(zonedDateTime33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 52 + "'", int41 == 52);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "gregory" + "'", str42, "gregory");
        org.junit.Assert.assertNotNull(zonedDateTime43);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 52 + "'", int50 == 52);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "gregory" + "'", str51, "gregory");
        org.junit.Assert.assertNotNull(zonedDateTime52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(zonedDateTime55);
        org.junit.Assert.assertNotNull(instant56);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 52 + "'", int64 == 52);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "gregory" + "'", str65, "gregory");
        org.junit.Assert.assertNotNull(zonedDateTime66);
        org.junit.Assert.assertNotNull(zonedDateTime68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(zonedDateTime71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
    }

    @Test
    public void test1831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1831");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((long) 0, chronology2);
        org.joda.time.Chronology chronology4 = localTime3.getChronology();
        org.joda.time.DateTimeField dateTimeField5 = chronology4.weekyearOfCentury();
        org.joda.time.DurationField durationField6 = chronology4.weekyears();
        org.joda.time.DurationField durationField7 = chronology4.seconds();
        org.joda.time.LocalTime localTime8 = org.joda.time.LocalTime.fromMillisOfDay((long) (byte) 0, chronology4);
        org.joda.time.LocalTime.Property property9 = localTime8.millisOfSecond();
        org.joda.time.LocalTime.Property property10 = localTime8.hourOfDay();
        org.joda.time.LocalTime localTime11 = property10.roundCeilingCopy();
        org.joda.time.LocalTime localTime12 = property10.roundHalfCeilingCopy();
        org.joda.time.LocalTime localTime13 = property10.roundHalfCeilingCopy();
        int int14 = localTime13.getHourOfDay();
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    }

    @Test
    public void test1832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1832");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
    }

    @Test
    public void test1833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1833");
        java.time.OffsetTime offsetTime0 = java.time.OffsetTime.MAX;
        java.time.LocalTime localTime1 = offsetTime0.toLocalTime();
        java.lang.String str2 = offsetTime0.toString();
        java.time.Duration duration3 = java.time.Duration.ZERO;
        java.lang.String str4 = duration3.toString();
        java.time.OffsetTime offsetTime5 = offsetTime0.plus((java.time.temporal.TemporalAmount) duration3);
        java.time.Duration duration6 = java.time.Duration.from((java.time.temporal.TemporalAmount) duration3);
        org.junit.Assert.assertNotNull(offsetTime0);
        org.junit.Assert.assertNotNull(localTime1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "23:59:59.999999999-18:00" + "'", str2, "23:59:59.999999999-18:00");
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "PT0S" + "'", str4, "PT0S");
        org.junit.Assert.assertNotNull(offsetTime5);
        org.junit.Assert.assertNotNull(duration6);
    }

    @Test
    public void test1834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1834");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withYearOfCentury((int) 'a');
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.plusSeconds(6);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.Duration duration8 = new org.joda.time.Duration(readableInstant6, readableInstant7);
        long long9 = duration8.getMillis();
        org.joda.time.Duration duration11 = duration8.plus((long) (byte) 1);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime3.minus((org.joda.time.ReadableDuration) duration11);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.withWeekOfWeekyear((int) '#');
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.withCenturyOfEra(10);
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.Duration duration19 = new org.joda.time.Duration(readableInstant17, readableInstant18);
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.PeriodType periodType21 = null;
        org.joda.time.Period period22 = duration19.toPeriodTo(readableInstant20, periodType21);
        long long23 = duration19.getStandardSeconds();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((long) 3, chronology25);
        org.joda.time.DateTime.Property property27 = dateTime26.dayOfYear();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateMidnight dateMidnight29 = new org.joda.time.DateMidnight((java.lang.Object) dateTime26, chronology28);
        org.joda.time.DateMidnight dateMidnight31 = dateMidnight29.minusMonths((-1));
        org.joda.time.DateMidnight dateMidnight33 = dateMidnight29.withDayOfYear((int) ' ');
        org.joda.time.Interval interval34 = duration19.toIntervalTo((org.joda.time.ReadableInstant) dateMidnight33);
        long long35 = duration19.getStandardSeconds();
        org.joda.time.LocalDateTime localDateTime36 = localDateTime16.minus((org.joda.time.ReadableDuration) duration19);
        int int37 = localDateTime36.getYearOfEra();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateMidnight31);
        org.junit.Assert.assertNotNull(dateMidnight33);
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1097 + "'", int37 == 1097);
    }

    @Test
    public void test1835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1835");
        java.time.OffsetDateTime offsetDateTime0 = java.time.OffsetDateTime.now();
        java.time.LocalDate localDate2 = java.time.LocalDate.ofEpochDay((long) ' ');
        int int3 = localDate2.getMonthValue();
        org.joda.time.Period period4 = org.joda.time.Period.ZERO;
        org.joda.time.Period period5 = period4.normalizedStandard();
        org.joda.time.Period period7 = period4.plusHours(2);
        java.time.chrono.IsoEra isoEra8 = java.time.chrono.IsoEra.CE;
        boolean boolean9 = period7.equals((java.lang.Object) isoEra8);
        java.time.LocalTime localTime14 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime15 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime14);
        java.time.LocalTime localTime20 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime21 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime20);
        java.time.temporal.ChronoField chronoField22 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime24 = localTime20.with((java.time.temporal.TemporalField) chronoField22, (long) (short) 1);
        long long25 = localTime14.getLong((java.time.temporal.TemporalField) chronoField22);
        boolean boolean26 = isoEra8.isSupported((java.time.temporal.TemporalField) chronoField22);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery27 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period28 = isoEra8.query(periodTemporalQuery27);
        boolean boolean29 = period28.isNegative();
        java.time.Period period31 = period28.plusDays((long) ' ');
        java.time.temporal.ChronoField chronoField32 = java.time.temporal.ChronoField.SECOND_OF_DAY;
        boolean boolean33 = period28.equals((java.lang.Object) chronoField32);
        boolean boolean34 = localDate2.isSupported((java.time.temporal.TemporalField) chronoField32);
        boolean boolean35 = offsetDateTime0.isSupported((java.time.temporal.TemporalField) chronoField32);
        java.time.Clock clock36 = java.time.Clock.systemUTC();
        java.time.Duration duration38 = java.time.Duration.ofSeconds((long) 256);
        java.time.Clock clock39 = java.time.Clock.tick(clock36, duration38);
        java.time.OffsetTime offsetTime40 = java.time.OffsetTime.MAX;
        java.time.LocalTime localTime41 = offsetTime40.toLocalTime();
        java.lang.String str42 = offsetTime40.toString();
        java.time.Duration duration43 = java.time.Duration.ZERO;
        java.lang.String str44 = duration43.toString();
        java.time.OffsetTime offsetTime45 = offsetTime40.plus((java.time.temporal.TemporalAmount) duration43);
        int int46 = duration38.compareTo(duration43);
        java.time.OffsetDateTime offsetDateTime47 = offsetDateTime0.plus((java.time.temporal.TemporalAmount) duration43);
        java.time.Clock clock48 = java.time.Clock.systemUTC();
        java.time.Duration duration50 = java.time.Duration.ofSeconds((long) 256);
        java.time.Clock clock51 = java.time.Clock.tick(clock48, duration50);
        java.time.Duration duration53 = java.time.Duration.ofMinutes((long) 3);
        java.time.Duration duration54 = duration53.abs();
        java.time.Clock clock55 = java.time.Clock.offset(clock48, duration53);
        java.time.Duration duration56 = java.time.Duration.ZERO;
        java.time.Duration duration58 = duration56.multipliedBy((-9223372036854775808L));
        boolean boolean59 = duration56.isZero();
        java.time.Clock clock60 = java.time.Clock.tick(clock48, duration56);
        java.time.Duration duration61 = java.time.Duration.ZERO;
        java.time.Duration duration63 = duration61.multipliedBy((-9223372036854775808L));
        boolean boolean64 = duration61.isZero();
        java.time.Clock clock65 = java.time.Clock.offset(clock60, duration61);
        int int66 = duration43.compareTo(duration61);
        org.junit.Assert.assertNotNull(offsetDateTime0);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2 + "'", int3 == 2);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertTrue("'" + isoEra8 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra8.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertTrue("'" + chronoField22 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField22.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime24);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 3601000000001L + "'", long25 == 3601000000001L);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(periodTemporalQuery27);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertTrue("'" + chronoField32 + "' != '" + java.time.temporal.ChronoField.SECOND_OF_DAY + "'", chronoField32.equals(java.time.temporal.ChronoField.SECOND_OF_DAY));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(clock36);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(clock39);
        org.junit.Assert.assertNotNull(offsetTime40);
        org.junit.Assert.assertNotNull(localTime41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "23:59:59.999999999-18:00" + "'", str42, "23:59:59.999999999-18:00");
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "PT0S" + "'", str44, "PT0S");
        org.junit.Assert.assertNotNull(offsetTime45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertNotNull(offsetDateTime47);
        org.junit.Assert.assertNotNull(clock48);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertNotNull(clock51);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertNotNull(clock55);
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertNotNull(duration58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(clock60);
        org.junit.Assert.assertNotNull(duration61);
        org.junit.Assert.assertNotNull(duration63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(clock65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
    }

    @Test
    public void test1836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1836");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((long) 0, chronology2);
        org.joda.time.Chronology chronology4 = localTime3.getChronology();
        org.joda.time.DateTimeField dateTimeField5 = chronology4.weekyearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime6 = org.joda.time.MutableDateTime.now(chronology4);
        org.joda.time.DateTimeField dateTimeField7 = chronology4.monthOfYear();
        java.util.Locale locale8 = java.util.Locale.getDefault();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket10 = new org.joda.time.format.DateTimeParserBucket((long) 28, chronology4, locale8, (java.lang.Integer) 0);
        long long13 = dateTimeParserBucket10.computeMillis(true, "Years");
        long long15 = dateTimeParserBucket10.computeMillis(false);
        dateTimeParserBucket10.setOffset(25);
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.Duration duration20 = new org.joda.time.Duration(readableInstant18, readableInstant19);
        org.joda.time.Duration duration22 = duration20.withMillis((-1L));
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) 3, chronology24);
        org.joda.time.DateTime.Property property26 = dateTime25.dayOfYear();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.DateMidnight dateMidnight28 = new org.joda.time.DateMidnight((java.lang.Object) dateTime25, chronology27);
        org.joda.time.DateMidnight dateMidnight30 = dateMidnight28.minusMonths((-1));
        org.joda.time.DateMidnight dateMidnight32 = dateMidnight28.withDayOfYear((int) ' ');
        org.joda.time.PeriodType periodType33 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period34 = duration22.toPeriodFrom((org.joda.time.ReadableInstant) dateMidnight28, periodType33);
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.Duration duration37 = new org.joda.time.Duration(readableInstant35, readableInstant36);
        org.joda.time.ReadableInstant readableInstant38 = null;
        org.joda.time.PeriodType periodType39 = null;
        org.joda.time.Period period40 = duration37.toPeriodTo(readableInstant38, periodType39);
        long long41 = duration37.getStandardSeconds();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime((long) 3, chronology43);
        org.joda.time.DateTime.Property property45 = dateTime44.dayOfYear();
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.DateMidnight dateMidnight47 = new org.joda.time.DateMidnight((java.lang.Object) dateTime44, chronology46);
        org.joda.time.DateMidnight dateMidnight49 = dateMidnight47.minusMonths((-1));
        org.joda.time.DateMidnight dateMidnight51 = dateMidnight47.withDayOfYear((int) ' ');
        org.joda.time.Interval interval52 = duration37.toIntervalTo((org.joda.time.ReadableInstant) dateMidnight51);
        org.joda.time.PeriodType periodType54 = org.joda.time.PeriodType.time();
        org.joda.time.MutablePeriod mutablePeriod55 = new org.joda.time.MutablePeriod((long) 'a', periodType54);
        org.joda.time.Period period56 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight28, (org.joda.time.ReadableDuration) duration37, periodType54);
        boolean boolean57 = dateTimeParserBucket10.restoreState((java.lang.Object) periodType54);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "en_US");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 28L + "'", long13 == 28L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 28L + "'", long15 == 28L);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(dateMidnight30);
        org.junit.Assert.assertNotNull(dateMidnight32);
        org.junit.Assert.assertNotNull(periodType33);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(dateMidnight49);
        org.junit.Assert.assertNotNull(dateMidnight51);
        org.junit.Assert.assertNotNull(interval52);
        org.junit.Assert.assertNotNull(periodType54);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
    }

    @Test
    public void test1837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1837");
        java.util.Set<java.lang.String> strSet0 = java.time.ZoneId.getAvailableZoneIds();
        java.util.stream.Stream<java.lang.String> strStream1 = strSet0.parallelStream();
        boolean boolean3 = strSet0.remove((java.lang.Object) 0);
        java.time.LocalTime localTime8 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime9 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime8);
        java.time.LocalTime localTime14 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime15 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime14);
        java.time.temporal.ChronoField chronoField16 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime18 = localTime14.with((java.time.temporal.TemporalField) chronoField16, (long) (short) 1);
        long long19 = localTime8.getLong((java.time.temporal.TemporalField) chronoField16);
        java.time.LocalTime localTime21 = localTime8.withSecond((int) (short) 1);
        java.time.temporal.ChronoField chronoField22 = java.time.temporal.ChronoField.SECOND_OF_DAY;
        java.time.temporal.ValueRange valueRange23 = localTime21.range((java.time.temporal.TemporalField) chronoField22);
        boolean boolean24 = strSet0.remove((java.lang.Object) chronoField22);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((long) 3, chronology26);
        org.joda.time.DateTime.Property property28 = dateTime27.dayOfYear();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.DateMidnight dateMidnight30 = new org.joda.time.DateMidnight((java.lang.Object) dateTime27, chronology29);
        org.joda.time.MutableDateTime mutableDateTime31 = dateTime27.toMutableDateTime();
        org.joda.time.Days days32 = org.joda.time.Days.ONE;
        org.joda.time.MutableInterval mutableInterval33 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime27, (org.joda.time.ReadablePeriod) days32);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((long) 3, chronology35);
        org.joda.time.DateTime.Property property37 = dateTime36.dayOfYear();
        org.joda.time.Interval interval38 = property37.toInterval();
        mutableInterval33.setInterval((org.joda.time.ReadableInterval) interval38);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime((long) 3, chronology41);
        org.joda.time.DateTime.Property property43 = dateTime42.dayOfYear();
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.DateMidnight dateMidnight45 = new org.joda.time.DateMidnight((java.lang.Object) dateTime42, chronology44);
        org.joda.time.DateMidnight.Property property46 = dateMidnight45.dayOfMonth();
        org.joda.time.ReadableInstant readableInstant47 = null;
        org.joda.time.ReadableInstant readableInstant48 = null;
        org.joda.time.Duration duration49 = new org.joda.time.Duration(readableInstant47, readableInstant48);
        org.joda.time.Duration duration51 = duration49.withMillis((-1L));
        org.joda.time.ReadableDuration readableDuration52 = null;
        org.joda.time.Duration duration53 = duration49.minus(readableDuration52);
        org.joda.time.DateMidnight dateMidnight54 = dateMidnight45.plus((org.joda.time.ReadableDuration) duration53);
        mutableInterval33.setDurationAfterStart((org.joda.time.ReadableDuration) duration53);
        boolean boolean56 = strSet0.contains((java.lang.Object) mutableInterval33);
        java.util.Set<java.lang.String> strSet57 = java.time.ZoneId.getAvailableZoneIds();
        java.util.stream.Stream<java.lang.String> strStream58 = strSet57.parallelStream();
        java.util.stream.Stream<java.lang.String> strStream59 = strSet57.parallelStream();
        boolean boolean60 = strSet0.addAll((java.util.Collection<java.lang.String>) strSet57);
        java.util.Spliterator<java.lang.String> strSpliterator61 = strSet57.spliterator();
        org.junit.Assert.assertNotNull(strSet0);
        org.junit.Assert.assertNotNull(strStream1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertTrue("'" + chronoField16 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField16.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 3601000000001L + "'", long19 == 3601000000001L);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertTrue("'" + chronoField22 + "' != '" + java.time.temporal.ChronoField.SECOND_OF_DAY + "'", chronoField22.equals(java.time.temporal.ChronoField.SECOND_OF_DAY));
        org.junit.Assert.assertNotNull(valueRange23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(mutableDateTime31);
        org.junit.Assert.assertNotNull(days32);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertNotNull(dateMidnight54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(strSet57);
        org.junit.Assert.assertNotNull(strStream58);
        org.junit.Assert.assertNotNull(strStream59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(strSpliterator61);
    }

    @Test
    public void test1838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1838");
        java.util.GregorianCalendar gregorianCalendar5 = new java.util.GregorianCalendar(12, 4096, 7, (-1), (int) (short) 10);
        int int6 = gregorianCalendar5.getWeeksInWeekYear();
        java.lang.String str7 = gregorianCalendar5.getCalendarType();
        java.time.ZonedDateTime zonedDateTime8 = gregorianCalendar5.toZonedDateTime();
        java.time.ZonedDateTime zonedDateTime10 = zonedDateTime8.minusMonths((long) 10);
        java.time.ZonedDateTime zonedDateTime12 = zonedDateTime10.minusHours((long) 9);
        java.time.LocalTime localTime17 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime18 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime17);
        java.time.LocalTime localTime23 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime24 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime23);
        java.time.temporal.ChronoField chronoField25 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime27 = localTime23.with((java.time.temporal.TemporalField) chronoField25, (long) (short) 1);
        long long28 = localTime17.getLong((java.time.temporal.TemporalField) chronoField25);
        java.time.LocalTime localTime30 = localTime17.withSecond((int) (short) 1);
        int int31 = localTime30.getMinute();
        java.time.LocalTime localTime33 = localTime30.plusHours((long) (-1));
        java.time.LocalDateTime localDateTime34 = java.time.LocalDateTime.now();
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery35 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period36 = localDateTime34.query(periodTemporalQuery35);
        java.time.Period period37 = localTime33.query(periodTemporalQuery35);
        java.time.Period period38 = zonedDateTime12.query(periodTemporalQuery35);
        java.time.ZonedDateTime zonedDateTime40 = zonedDateTime12.withHour(1);
        java.util.GregorianCalendar gregorianCalendar46 = new java.util.GregorianCalendar(12, 4096, 7, (-1), (int) (short) 10);
        int int47 = gregorianCalendar46.getWeeksInWeekYear();
        java.lang.String str48 = gregorianCalendar46.getCalendarType();
        java.time.ZonedDateTime zonedDateTime49 = gregorianCalendar46.toZonedDateTime();
        java.time.ZonedDateTime zonedDateTime51 = zonedDateTime49.minusMonths((long) 10);
        java.time.chrono.ChronoZonedDateTime<java.time.LocalDate> localDateChronoZonedDateTime52 = zonedDateTime49.withEarlierOffsetAtOverlap();
        int int53 = zonedDateTime49.getDayOfYear();
        java.time.temporal.ChronoField chronoField54 = java.time.temporal.ChronoField.NANO_OF_SECOND;
        java.time.ZonedDateTime zonedDateTime56 = zonedDateTime49.with((java.time.temporal.TemporalField) chronoField54, (long) 2012);
        boolean boolean57 = zonedDateTime40.isSupported((java.time.temporal.TemporalField) chronoField54);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 52 + "'", int6 == 52);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "gregory" + "'", str7, "gregory");
        org.junit.Assert.assertNotNull(zonedDateTime8);
        org.junit.Assert.assertNotNull(zonedDateTime10);
        org.junit.Assert.assertNotNull(zonedDateTime12);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertNotNull(localTime23);
        org.junit.Assert.assertNotNull(localTime24);
        org.junit.Assert.assertTrue("'" + chronoField25 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField25.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime27);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 3601000000001L + "'", long28 == 3601000000001L);
        org.junit.Assert.assertNotNull(localTime30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(localTime33);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(periodTemporalQuery35);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertNotNull(zonedDateTime40);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 52 + "'", int47 == 52);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "gregory" + "'", str48, "gregory");
        org.junit.Assert.assertNotNull(zonedDateTime49);
        org.junit.Assert.assertNotNull(zonedDateTime51);
        org.junit.Assert.assertNotNull(localDateChronoZonedDateTime52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 127 + "'", int53 == 127);
        org.junit.Assert.assertTrue("'" + chronoField54 + "' != '" + java.time.temporal.ChronoField.NANO_OF_SECOND + "'", chronoField54.equals(java.time.temporal.ChronoField.NANO_OF_SECOND));
        org.junit.Assert.assertNotNull(zonedDateTime56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
    }

    @Test
    public void test1839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1839");
        java.io.UnsupportedEncodingException unsupportedEncodingException3 = new java.io.UnsupportedEncodingException(":");
        java.security.KeyException keyException4 = new java.security.KeyException("subject:\n (GERMAN)", (java.lang.Throwable) unsupportedEncodingException3);
        java.security.NoSuchAlgorithmException noSuchAlgorithmException5 = new java.security.NoSuchAlgorithmException("DurationField[months]", (java.lang.Throwable) keyException4);
    }

    @Test
    public void test1840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1840");
        java.util.concurrent.TimeoutException timeoutException1 = new java.util.concurrent.TimeoutException("Chinese");
    }

    @Test
    public void test1841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1841");
        org.joda.time.Period period1 = org.joda.time.Period.hours(274);
        org.junit.Assert.assertNotNull(period1);
    }

    @Test
    public void test1842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1842");
        java.util.Set<java.lang.String> strSet0 = java.time.ZoneId.getAvailableZoneIds();
        java.util.stream.Stream<java.lang.String> strStream1 = strSet0.parallelStream();
        java.lang.Object[] objArray2 = strSet0.toArray();
        java.util.Spliterator<java.lang.String> strSpliterator3 = strSet0.spliterator();
        java.util.Set<java.lang.String> strSet4 = java.time.ZoneId.getAvailableZoneIds();
        java.util.stream.Stream<java.lang.String> strStream5 = strSet4.parallelStream();
        boolean boolean7 = strSet4.remove((java.lang.Object) 0);
        java.time.LocalTime localTime12 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime13 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime12);
        java.time.LocalTime localTime18 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime19 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime18);
        java.time.temporal.ChronoField chronoField20 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime22 = localTime18.with((java.time.temporal.TemporalField) chronoField20, (long) (short) 1);
        long long23 = localTime12.getLong((java.time.temporal.TemporalField) chronoField20);
        java.time.LocalTime localTime25 = localTime12.withSecond((int) (short) 1);
        java.time.temporal.ChronoField chronoField26 = java.time.temporal.ChronoField.SECOND_OF_DAY;
        java.time.temporal.ValueRange valueRange27 = localTime25.range((java.time.temporal.TemporalField) chronoField26);
        boolean boolean28 = strSet4.remove((java.lang.Object) chronoField26);
        boolean boolean29 = strSet0.retainAll((java.util.Collection<java.lang.String>) strSet4);
        java.util.Spliterator<java.lang.String> strSpliterator30 = strSet0.spliterator();
        java.util.Set<java.lang.String> strSet31 = java.time.ZoneId.getAvailableZoneIds();
        java.util.Set<java.lang.String> strSet32 = java.time.ZoneId.getAvailableZoneIds();
        java.util.stream.Stream<java.lang.String> strStream33 = strSet32.parallelStream();
        java.lang.Object[] objArray34 = strSet32.toArray();
        java.util.Spliterator<java.lang.String> strSpliterator35 = strSet32.spliterator();
        boolean boolean36 = strSet31.containsAll((java.util.Collection<java.lang.String>) strSet32);
        boolean boolean37 = strSet0.removeAll((java.util.Collection<java.lang.String>) strSet32);
        java.nio.charset.CoderResult coderResult38 = java.nio.charset.CoderResult.UNDERFLOW;
        boolean boolean39 = strSet0.contains((java.lang.Object) coderResult38);
        java.lang.String str40 = coderResult38.toString();
        org.junit.Assert.assertNotNull(strSet0);
        org.junit.Assert.assertNotNull(strStream1);
        org.junit.Assert.assertNotNull(objArray2);
        org.junit.Assert.assertNotNull(strSpliterator3);
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertNotNull(strStream5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertTrue("'" + chronoField20 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField20.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 3601000000001L + "'", long23 == 3601000000001L);
        org.junit.Assert.assertNotNull(localTime25);
        org.junit.Assert.assertTrue("'" + chronoField26 + "' != '" + java.time.temporal.ChronoField.SECOND_OF_DAY + "'", chronoField26.equals(java.time.temporal.ChronoField.SECOND_OF_DAY));
        org.junit.Assert.assertNotNull(valueRange27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(strSpliterator30);
        org.junit.Assert.assertNotNull(strSet31);
        org.junit.Assert.assertNotNull(strSet32);
        org.junit.Assert.assertNotNull(strStream33);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertNotNull(strSpliterator35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(coderResult38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "UNDERFLOW" + "'", str40, "UNDERFLOW");
    }

    @Test
    public void test1843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1843");
        java.util.GregorianCalendar gregorianCalendar5 = new java.util.GregorianCalendar(12, 4096, 7, (-1), (int) (short) 10);
        int int6 = gregorianCalendar5.getWeeksInWeekYear();
        java.lang.String str7 = gregorianCalendar5.getCalendarType();
        java.time.ZonedDateTime zonedDateTime8 = gregorianCalendar5.toZonedDateTime();
        java.time.ZonedDateTime zonedDateTime10 = zonedDateTime8.minusMonths((long) 10);
        java.time.ZonedDateTime zonedDateTime12 = zonedDateTime10.withNano(52);
        java.util.GregorianCalendar gregorianCalendar18 = new java.util.GregorianCalendar(12, 4096, 7, (-1), (int) (short) 10);
        int int19 = gregorianCalendar18.getWeeksInWeekYear();
        java.lang.String str20 = gregorianCalendar18.getCalendarType();
        java.time.ZonedDateTime zonedDateTime21 = gregorianCalendar18.toZonedDateTime();
        java.util.GregorianCalendar gregorianCalendar27 = new java.util.GregorianCalendar(12, 4096, 7, (-1), (int) (short) 10);
        int int28 = gregorianCalendar27.getWeeksInWeekYear();
        java.lang.String str29 = gregorianCalendar27.getCalendarType();
        java.time.ZonedDateTime zonedDateTime30 = gregorianCalendar27.toZonedDateTime();
        int int31 = zonedDateTime21.compareTo((java.time.chrono.ChronoZonedDateTime<java.time.LocalDate>) zonedDateTime30);
        java.time.ZonedDateTime zonedDateTime33 = zonedDateTime21.plusDays((long) 2022);
        java.time.Instant instant34 = zonedDateTime21.toInstant();
        java.time.chrono.Chronology chronology35 = zonedDateTime21.getChronology();
        java.util.GregorianCalendar gregorianCalendar41 = new java.util.GregorianCalendar(12, 4096, 7, (-1), (int) (short) 10);
        int int42 = gregorianCalendar41.getWeeksInWeekYear();
        java.lang.String str43 = gregorianCalendar41.getCalendarType();
        java.time.ZonedDateTime zonedDateTime44 = gregorianCalendar41.toZonedDateTime();
        java.time.ZonedDateTime zonedDateTime46 = zonedDateTime44.minusMonths((long) 10);
        boolean boolean47 = zonedDateTime21.isBefore((java.time.chrono.ChronoZonedDateTime<java.time.LocalDate>) zonedDateTime46);
        java.time.ZonedDateTime zonedDateTime49 = zonedDateTime46.plusMonths(0L);
        boolean boolean50 = zonedDateTime10.isBefore((java.time.chrono.ChronoZonedDateTime<java.time.LocalDate>) zonedDateTime46);
        // The following exception was thrown during execution in test generation
        try {
            java.time.ZonedDateTime zonedDateTime52 = zonedDateTime10.withHour((int) 'x');
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for HourOfDay (valid values 0 - 23): 120");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 52 + "'", int6 == 52);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "gregory" + "'", str7, "gregory");
        org.junit.Assert.assertNotNull(zonedDateTime8);
        org.junit.Assert.assertNotNull(zonedDateTime10);
        org.junit.Assert.assertNotNull(zonedDateTime12);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 52 + "'", int19 == 52);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "gregory" + "'", str20, "gregory");
        org.junit.Assert.assertNotNull(zonedDateTime21);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 52 + "'", int28 == 52);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "gregory" + "'", str29, "gregory");
        org.junit.Assert.assertNotNull(zonedDateTime30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(zonedDateTime33);
        org.junit.Assert.assertNotNull(instant34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 52 + "'", int42 == 52);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "gregory" + "'", str43, "gregory");
        org.junit.Assert.assertNotNull(zonedDateTime44);
        org.junit.Assert.assertNotNull(zonedDateTime46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(zonedDateTime49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test1844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1844");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.Duration duration2 = new org.joda.time.Duration(readableInstant0, readableInstant1);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = duration2.toPeriodTo(readableInstant3, periodType4);
        long long6 = duration2.getStandardSeconds();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 3, chronology8);
        org.joda.time.DateTime.Property property10 = dateTime9.dayOfYear();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight((java.lang.Object) dateTime9, chronology11);
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight12.minusMonths((-1));
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight12.withDayOfYear((int) ' ');
        org.joda.time.Interval interval17 = duration2.toIntervalTo((org.joda.time.ReadableInstant) dateMidnight16);
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.Duration duration20 = new org.joda.time.Duration(readableInstant18, readableInstant19);
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.PeriodType periodType22 = null;
        org.joda.time.Period period23 = duration20.toPeriodTo(readableInstant21, periodType22);
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.Duration duration26 = new org.joda.time.Duration(readableInstant24, readableInstant25);
        long long27 = duration26.getMillis();
        boolean boolean28 = duration20.isShorterThan((org.joda.time.ReadableDuration) duration26);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((long) 3, chronology30);
        org.joda.time.DateTime.Property property32 = dateTime31.dayOfYear();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.DateMidnight dateMidnight34 = new org.joda.time.DateMidnight((java.lang.Object) dateTime31, chronology33);
        org.joda.time.MutableDateTime mutableDateTime35 = dateTime31.toMutableDateTime();
        mutableDateTime35.addYears((int) (short) 100);
        org.joda.time.MutableDateTime.Property property38 = mutableDateTime35.dayOfWeek();
        org.joda.time.MutableDateTime.Property property39 = mutableDateTime35.year();
        org.joda.time.MutableDateTime.Property property40 = mutableDateTime35.weekyear();
        boolean boolean41 = duration20.equals((java.lang.Object) mutableDateTime35);
        boolean boolean42 = duration2.isLongerThan((org.joda.time.ReadableDuration) duration20);
        org.joda.time.Weeks weeks43 = org.joda.time.Weeks.ONE;
        java.util.concurrent.TimeUnit timeUnit44 = java.util.concurrent.TimeUnit.NANOSECONDS;
        boolean boolean45 = weeks43.equals((java.lang.Object) timeUnit44);
        org.joda.time.MutablePeriod mutablePeriod46 = weeks43.toMutablePeriod();
        mutablePeriod46.add((int) '#', 0, 10, 0, (int) (byte) 0, (int) (short) 0, 1, (-1));
        mutablePeriod46.clear();
        int int57 = mutablePeriod46.getWeeks();
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.DateTime dateTime60 = new org.joda.time.DateTime((long) 3, chronology59);
        org.joda.time.DateTime.Property property61 = dateTime60.dayOfYear();
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.DateMidnight dateMidnight63 = new org.joda.time.DateMidnight((java.lang.Object) dateTime60, chronology62);
        org.joda.time.DateMidnight.Property property64 = dateMidnight63.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight65 = property64.roundCeilingCopy();
        org.joda.time.DateMidnight dateMidnight67 = property64.setCopy("1");
        org.joda.time.Chronology chronology69 = null;
        org.joda.time.LocalTime localTime70 = new org.joda.time.LocalTime((long) 0, chronology69);
        org.joda.time.Chronology chronology72 = null;
        org.joda.time.DateTime dateTime73 = new org.joda.time.DateTime((long) 3, chronology72);
        org.joda.time.DateTime.Property property74 = dateTime73.dayOfYear();
        org.joda.time.Chronology chronology75 = null;
        org.joda.time.DateMidnight dateMidnight76 = new org.joda.time.DateMidnight((java.lang.Object) dateTime73, chronology75);
        org.joda.time.DateTime dateTime77 = localTime70.toDateTime((org.joda.time.ReadableInstant) dateTime73);
        org.joda.time.DateTime dateTime79 = dateTime77.minusMillis((int) (byte) 0);
        org.joda.time.DateTime dateTime81 = dateTime77.withYearOfCentury((int) (byte) 10);
        org.joda.time.DateTime.Property property82 = dateTime81.hourOfDay();
        org.joda.time.DateTime dateTime84 = dateTime81.plus((long) 3600000);
        org.joda.time.DateTime dateTime87 = dateTime84.withDurationAdded((long) 366, (int) '#');
        mutablePeriod46.setPeriod((org.joda.time.ReadableInstant) dateMidnight67, (org.joda.time.ReadableInstant) dateTime87);
        org.joda.time.Interval interval89 = duration2.toIntervalFrom((org.joda.time.ReadableInstant) dateMidnight67);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval91 = interval89.withStartMillis((long) 508);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(mutableDateTime35);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(weeks43);
        org.junit.Assert.assertNotNull(timeUnit44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(mutablePeriod46);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertNotNull(dateMidnight65);
        org.junit.Assert.assertNotNull(dateMidnight67);
        org.junit.Assert.assertNotNull(property74);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertNotNull(property82);
        org.junit.Assert.assertNotNull(dateTime84);
        org.junit.Assert.assertNotNull(dateTime87);
        org.junit.Assert.assertNotNull(interval89);
    }

    @Test
    public void test1845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1845");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 3, chronology1);
        org.joda.time.Period period3 = org.joda.time.Period.ZERO;
        org.joda.time.Period period4 = period3.normalizedStandard();
        org.joda.time.Period period6 = period4.minusMinutes((int) ' ');
        org.joda.time.Period period8 = period6.minusMonths((int) (byte) 0);
        org.joda.time.PeriodType periodType9 = period8.getPeriodType();
        org.joda.time.DateTime dateTime10 = dateTime2.minus((org.joda.time.ReadablePeriod) period8);
        org.joda.time.DateTime dateTime12 = dateTime2.plusHours(34);
        org.joda.time.DateTime dateTime14 = dateTime12.minusSeconds((int) '#');
        org.joda.time.Period period19 = new org.joda.time.Period((int) '#', 0, 2, (int) (short) 100);
        org.joda.time.Period period21 = period19.withSeconds(12);
        int int22 = period21.getMillis();
        org.joda.time.DateTime dateTime23 = dateTime14.plus((org.joda.time.ReadablePeriod) period21);
        org.joda.time.MutableDateTime mutableDateTime24 = new org.joda.time.MutableDateTime();
        org.joda.time.MutableDateTime.Property property25 = mutableDateTime24.era();
        boolean boolean26 = dateTime23.isAfter((org.joda.time.ReadableInstant) mutableDateTime24);
        org.joda.time.DateTime.Property property27 = dateTime23.minuteOfDay();
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 100 + "'", int22 == 100);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(property27);
    }

    @Test
    public void test1846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1846");
        java.time.Period period1 = java.time.Period.ofYears(28);
        java.time.Period period3 = java.time.Period.ofYears(28);
        java.time.Period period4 = period1.minus((java.time.temporal.TemporalAmount) period3);
        java.time.chrono.ChronoPeriod chronoPeriod5 = period1.negated();
        java.time.chrono.ChronoPeriod chronoPeriod6 = chronoPeriod5.normalized();
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(chronoPeriod5);
        org.junit.Assert.assertNotNull(chronoPeriod6);
    }

    @Test
    public void test1847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1847");
        java.time.LocalTime localTime4 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime9 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime10 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime9);
        java.time.LocalTime localTime15 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime16 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime15);
        java.time.temporal.ChronoField chronoField17 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime19 = localTime15.with((java.time.temporal.TemporalField) chronoField17, (long) (short) 1);
        long long20 = localTime9.getLong((java.time.temporal.TemporalField) chronoField17);
        java.time.LocalTime localTime22 = localTime9.withSecond((int) (short) 1);
        java.time.temporal.ChronoField chronoField23 = java.time.temporal.ChronoField.SECOND_OF_DAY;
        java.time.temporal.ValueRange valueRange24 = localTime22.range((java.time.temporal.TemporalField) chronoField23);
        java.time.LocalTime localTime30 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime31 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime30);
        java.time.LocalTime localTime36 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime37 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime36);
        java.time.temporal.ChronoField chronoField38 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime40 = localTime36.with((java.time.temporal.TemporalField) chronoField38, (long) (short) 1);
        long long41 = localTime30.getLong((java.time.temporal.TemporalField) chronoField38);
        java.time.LocalTime localTime43 = localTime30.withSecond((int) (short) 1);
        java.time.temporal.ChronoField chronoField44 = java.time.temporal.ChronoField.SECOND_OF_DAY;
        java.time.temporal.ValueRange valueRange45 = localTime43.range((java.time.temporal.TemporalField) chronoField44);
        int int46 = valueRange24.checkValidIntValue((long) 2022, (java.time.temporal.TemporalField) chronoField44);
        java.time.temporal.ValueRange valueRange47 = localTime4.range((java.time.temporal.TemporalField) chronoField44);
        long long48 = valueRange47.getMinimum();
        boolean boolean49 = valueRange47.isIntValue();
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertTrue("'" + chronoField17 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField17.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 3601000000001L + "'", long20 == 3601000000001L);
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertTrue("'" + chronoField23 + "' != '" + java.time.temporal.ChronoField.SECOND_OF_DAY + "'", chronoField23.equals(java.time.temporal.ChronoField.SECOND_OF_DAY));
        org.junit.Assert.assertNotNull(valueRange24);
        org.junit.Assert.assertNotNull(localTime30);
        org.junit.Assert.assertNotNull(localTime31);
        org.junit.Assert.assertNotNull(localTime36);
        org.junit.Assert.assertNotNull(localTime37);
        org.junit.Assert.assertTrue("'" + chronoField38 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField38.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime40);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 3601000000001L + "'", long41 == 3601000000001L);
        org.junit.Assert.assertNotNull(localTime43);
        org.junit.Assert.assertTrue("'" + chronoField44 + "' != '" + java.time.temporal.ChronoField.SECOND_OF_DAY + "'", chronoField44.equals(java.time.temporal.ChronoField.SECOND_OF_DAY));
        org.junit.Assert.assertNotNull(valueRange45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2022 + "'", int46 == 2022);
        org.junit.Assert.assertNotNull(valueRange47);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
    }

    @Test
    public void test1848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1848");
        java.net.InetAddress inetAddress0 = java.net.InetAddress.getLocalHost();
        boolean boolean1 = inetAddress0.isLoopbackAddress();
        java.lang.String str2 = inetAddress0.getHostName();
        boolean boolean3 = inetAddress0.isMCLinkLocal();
        boolean boolean4 = inetAddress0.isMCNodeLocal();
        org.junit.Assert.assertNotNull(inetAddress0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "599b081c1808" + "'", str2, "599b081c1808");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test1849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1849");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 3, chronology1);
        org.joda.time.Period period3 = org.joda.time.Period.ZERO;
        org.joda.time.Period period4 = period3.normalizedStandard();
        org.joda.time.Period period6 = period4.minusMinutes((int) ' ');
        org.joda.time.Period period8 = period6.minusMonths((int) (byte) 0);
        org.joda.time.PeriodType periodType9 = period8.getPeriodType();
        org.joda.time.DateTime dateTime10 = dateTime2.minus((org.joda.time.ReadablePeriod) period8);
        org.joda.time.DateTime dateTime12 = dateTime2.plusHours(34);
        org.joda.time.Period period13 = org.joda.time.Period.ZERO;
        org.joda.time.Period period14 = period13.normalizedStandard();
        org.joda.time.Period period16 = period14.minusMinutes((int) ' ');
        org.joda.time.Period period18 = period16.minusMonths((int) (byte) 0);
        org.joda.time.DateTime dateTime19 = dateTime2.plus((org.joda.time.ReadablePeriod) period18);
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.Duration duration22 = new org.joda.time.Duration(readableInstant20, readableInstant21);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.PeriodType periodType24 = null;
        org.joda.time.Period period25 = duration22.toPeriodTo(readableInstant23, periodType24);
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.Duration duration28 = new org.joda.time.Duration(readableInstant26, readableInstant27);
        long long29 = duration28.getMillis();
        boolean boolean30 = duration22.isShorterThan((org.joda.time.ReadableDuration) duration28);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((long) 3, chronology32);
        org.joda.time.DateTime.Property property34 = dateTime33.dayOfYear();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.DateMidnight dateMidnight36 = new org.joda.time.DateMidnight((java.lang.Object) dateTime33, chronology35);
        org.joda.time.MutableDateTime mutableDateTime37 = dateTime33.toMutableDateTime();
        mutableDateTime37.addYears((int) (short) 100);
        org.joda.time.MutableDateTime.Property property40 = mutableDateTime37.dayOfWeek();
        org.joda.time.MutableDateTime.Property property41 = mutableDateTime37.year();
        org.joda.time.MutableDateTime.Property property42 = mutableDateTime37.weekyear();
        boolean boolean43 = duration22.equals((java.lang.Object) mutableDateTime37);
        mutableDateTime37.addMonths((int) ' ');
        mutableDateTime37.add((long) (byte) 10);
        org.joda.time.Period period48 = org.joda.time.Period.ZERO;
        org.joda.time.Period period49 = period48.normalizedStandard();
        org.joda.time.Period period51 = period48.plusHours(2);
        java.time.chrono.IsoEra isoEra52 = java.time.chrono.IsoEra.CE;
        boolean boolean53 = period51.equals((java.lang.Object) isoEra52);
        int int54 = period51.getMinutes();
        mutableDateTime37.add((org.joda.time.ReadablePeriod) period51);
        java.util.TimeZone timeZone57 = null;
        org.joda.time.DateTimeZone dateTimeZone58 = org.joda.time.DateTimeZone.forTimeZone(timeZone57);
        org.joda.time.DateMidnight dateMidnight59 = new org.joda.time.DateMidnight((long) 1970, dateTimeZone58);
        long long62 = dateTimeZone58.convertLocalToUTC((long) 3, false);
        long long65 = dateTimeZone58.convertLocalToUTC(0L, true);
        mutableDateTime37.setZoneRetainFields(dateTimeZone58);
        java.lang.String str67 = dateTimeZone58.toString();
        org.joda.time.Chronology chronology69 = null;
        org.joda.time.DateTime dateTime70 = new org.joda.time.DateTime((long) 3, chronology69);
        org.joda.time.DateTime.Property property71 = dateTime70.dayOfYear();
        org.joda.time.Chronology chronology72 = null;
        org.joda.time.DateMidnight dateMidnight73 = new org.joda.time.DateMidnight((java.lang.Object) dateTime70, chronology72);
        org.joda.time.MutableDateTime mutableDateTime74 = dateTime70.toMutableDateTime();
        mutableDateTime74.addYears((int) (short) 100);
        org.joda.time.MutableDateTime.Property property77 = mutableDateTime74.dayOfWeek();
        org.joda.time.MutableDateTime.Property property78 = mutableDateTime74.year();
        java.util.TimeZone timeZone79 = null;
        org.joda.time.DateTimeZone dateTimeZone80 = org.joda.time.DateTimeZone.forTimeZone(timeZone79);
        mutableDateTime74.setZone(dateTimeZone80);
        java.util.Locale locale83 = java.util.Locale.TAIWAN;
        java.lang.String str84 = dateTimeZone80.getShortName((long) 64, locale83);
        long long86 = dateTimeZone58.getMillisKeepLocal(dateTimeZone80, (long) 7);
        org.joda.time.DateTime dateTime87 = dateTime2.toDateTime(dateTimeZone80);
        org.joda.time.DateTime.Property property88 = dateTime2.monthOfYear();
        org.joda.time.DateTime dateTime89 = dateTime2.withEarlierOffsetAtOverlap();
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(mutableDateTime37);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(period48);
        org.junit.Assert.assertNotNull(period49);
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertTrue("'" + isoEra52 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra52.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone58);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 3L + "'", long62 == 3L);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 0L + "'", long65 == 0L);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "Etc/UTC" + "'", str67, "Etc/UTC");
        org.junit.Assert.assertNotNull(property71);
        org.junit.Assert.assertNotNull(mutableDateTime74);
        org.junit.Assert.assertNotNull(property77);
        org.junit.Assert.assertNotNull(property78);
        org.junit.Assert.assertNotNull(dateTimeZone80);
        org.junit.Assert.assertNotNull(locale83);
        org.junit.Assert.assertEquals(locale83.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "+00:00" + "'", str84, "+00:00");
        org.junit.Assert.assertTrue("'" + long86 + "' != '" + 7L + "'", long86 == 7L);
        org.junit.Assert.assertNotNull(dateTime87);
        org.junit.Assert.assertNotNull(property88);
        org.junit.Assert.assertNotNull(dateTime89);
    }

    @Test
    public void test1850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1850");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.Duration duration2 = new org.joda.time.Duration(readableInstant0, readableInstant1);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = duration2.toPeriodTo(readableInstant3, periodType4);
        long long6 = duration2.getStandardSeconds();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 3, chronology8);
        org.joda.time.DateTime.Property property10 = dateTime9.dayOfYear();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight((java.lang.Object) dateTime9, chronology11);
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight12.minusMonths((-1));
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight12.withDayOfYear((int) ' ');
        org.joda.time.Interval interval17 = duration2.toIntervalTo((org.joda.time.ReadableInstant) dateMidnight16);
        org.joda.time.DateMidnight.Property property18 = dateMidnight16.dayOfYear();
        int int19 = dateMidnight16.getMonthOfYear();
        org.joda.time.DateMidnight.Property property20 = dateMidnight16.weekOfWeekyear();
        org.joda.time.DateMidnight dateMidnight21 = property20.withMaximumValue();
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2 + "'", int19 == 2);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateMidnight21);
    }

    @Test
    public void test1851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1851");
        org.joda.time.Weeks weeks1 = org.joda.time.Weeks.ONE;
        java.util.concurrent.TimeUnit timeUnit2 = java.util.concurrent.TimeUnit.NANOSECONDS;
        boolean boolean3 = weeks1.equals((java.lang.Object) timeUnit2);
        org.joda.time.MutablePeriod mutablePeriod4 = weeks1.toMutablePeriod();
        int int5 = mutablePeriod4.getSeconds();
        mutablePeriod4.addSeconds(10);
        org.joda.time.Weeks weeks9 = org.joda.time.Weeks.ONE;
        java.util.concurrent.TimeUnit timeUnit10 = java.util.concurrent.TimeUnit.NANOSECONDS;
        boolean boolean11 = weeks9.equals((java.lang.Object) timeUnit10);
        org.joda.time.MutablePeriod mutablePeriod12 = weeks9.toMutablePeriod();
        int int13 = mutablePeriod12.getSeconds();
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.Duration duration16 = new org.joda.time.Duration(readableInstant14, readableInstant15);
        long long17 = duration16.getMillis();
        org.joda.time.Duration duration19 = duration16.plus((long) (byte) 1);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.LocalTime localTime23 = new org.joda.time.LocalTime((long) 0, chronology22);
        org.joda.time.Chronology chronology24 = localTime23.getChronology();
        java.util.Locale locale25 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale locale26 = java.util.Locale.GERMANY;
        java.lang.String str27 = locale25.getDisplayScript(locale26);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket29 = new org.joda.time.format.DateTimeParserBucket((long) 1970, chronology24, locale25, (java.lang.Integer) 1);
        mutablePeriod12.setPeriod((org.joda.time.ReadableDuration) duration16, chronology24);
        mutablePeriod4.setPeriod(86399L, chronology24);
        org.joda.time.MutableDateTime mutableDateTime32 = new org.joda.time.MutableDateTime(0L, chronology24);
        org.joda.time.MutableDateTime mutableDateTime33 = mutableDateTime32.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property34 = mutableDateTime32.dayOfYear();
        org.junit.Assert.assertNotNull(weeks1);
        org.junit.Assert.assertNotNull(timeUnit2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(mutablePeriod4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(weeks9);
        org.junit.Assert.assertNotNull(timeUnit10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(mutablePeriod12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(mutableDateTime33);
        org.junit.Assert.assertNotNull(property34);
    }

    @Test
    public void test1852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1852");
        org.joda.time.Duration duration1 = org.joda.time.Duration.millis((-51016611000L));
        org.junit.Assert.assertNotNull(duration1);
    }

    @Test
    public void test1853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1853");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.now();
        java.time.LocalDateTime localDateTime2 = localDateTime0.minusYears((long) (byte) 10);
        java.time.LocalDateTime localDateTime3 = java.time.LocalDateTime.now();
        java.time.LocalDateTime localDateTime5 = localDateTime3.minusYears((long) (byte) 10);
        boolean boolean6 = localDateTime0.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime5);
        java.time.LocalDateTime localDateTime8 = localDateTime5.withSecond((int) '+');
        java.time.chrono.Chronology chronology9 = localDateTime5.getChronology();
        java.time.OffsetTime offsetTime10 = java.time.OffsetTime.MAX;
        java.time.LocalTime localTime11 = offsetTime10.toLocalTime();
        java.time.Duration duration13 = java.time.Duration.ofMinutes((long) 3);
        java.time.temporal.Temporal temporal14 = localTime11.plus((java.time.temporal.TemporalAmount) duration13);
        java.time.Duration duration16 = duration13.plusNanos((long) 9);
        java.time.LocalDateTime localDateTime17 = localDateTime5.plus((java.time.temporal.TemporalAmount) duration13);
        java.time.LocalDateTime localDateTime19 = localDateTime5.plusWeeks((long) 353);
        java.time.LocalDateTime localDateTime20 = java.time.LocalDateTime.now();
        java.time.temporal.ChronoField chronoField21 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime23 = localDateTime20.with((java.time.temporal.TemporalField) chronoField21, (long) 10);
        java.time.LocalDateTime localDateTime25 = localDateTime20.minusMinutes((long) 12);
        int int26 = localDateTime25.getSecond();
        int int27 = localDateTime19.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(offsetTime10);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(temporal14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertTrue("'" + chronoField21 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField21.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
// flaky:         org.junit.Assert.assertTrue("'" + int26 + "' != '" + 57 + "'", int26 == 57);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-4) + "'", int27 == (-4));
    }

    @Test
    public void test1854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1854");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((long) 0, chronology1);
        org.joda.time.Chronology chronology3 = localTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField4 = chronology3.weekyearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime5 = org.joda.time.MutableDateTime.now(chronology3);
        mutableDateTime5.setWeekOfWeekyear((int) '#');
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime5.yearOfCentury();
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(property8);
    }

    @Test
    public void test1855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1855");
        int int0 = java.util.Calendar.NARROW_STANDALONE;
        org.junit.Assert.assertTrue("'" + int0 + "' != '" + 32772 + "'", int0 == 32772);
    }

    @Test
    public void test1856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1856");
        java.util.stream.Stream.Builder<java.io.OutputStream> outputStreamBuilder0 = java.util.stream.Stream.builder();
        java.io.OutputStream outputStream1 = null;
        java.io.FilterOutputStream filterOutputStream2 = new java.io.FilterOutputStream(outputStream1);
        java.io.PrintStream printStream4 = new java.io.PrintStream((java.io.OutputStream) filterOutputStream2, false);
        char[] charArray5 = new char[] {};
        java.nio.CharBuffer charBuffer6 = java.nio.CharBuffer.wrap(charArray5);
        printStream4.print(charArray5);
        java.util.stream.Stream.Builder<java.io.OutputStream> outputStreamBuilder8 = outputStreamBuilder0.add((java.io.OutputStream) printStream4);
        // The following exception was thrown during execution in test generation
        try {
            printStream4.println((java.lang.Object) '.');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(outputStreamBuilder0);
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[]");
        org.junit.Assert.assertNotNull(charBuffer6);
        org.junit.Assert.assertNotNull(outputStreamBuilder8);
    }

    @Test
    public void test1857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1857");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.Duration duration2 = new org.joda.time.Duration(readableInstant0, readableInstant1);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = duration2.toPeriodTo(readableInstant3, periodType4);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.Duration duration8 = new org.joda.time.Duration(readableInstant6, readableInstant7);
        long long9 = duration8.getMillis();
        boolean boolean10 = duration2.isShorterThan((org.joda.time.ReadableDuration) duration8);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) 3, chronology12);
        org.joda.time.DateTime.Property property14 = dateTime13.dayOfYear();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight((java.lang.Object) dateTime13, chronology15);
        org.joda.time.MutableDateTime mutableDateTime17 = dateTime13.toMutableDateTime();
        mutableDateTime17.addYears((int) (short) 100);
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime17.dayOfWeek();
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime17.year();
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime17.weekyear();
        boolean boolean23 = duration2.equals((java.lang.Object) mutableDateTime17);
        mutableDateTime17.addMonths((int) ' ');
        mutableDateTime17.add((long) (byte) 10);
        org.joda.time.Period period28 = org.joda.time.Period.ZERO;
        org.joda.time.Period period29 = period28.normalizedStandard();
        org.joda.time.Period period31 = period28.plusHours(2);
        java.time.chrono.IsoEra isoEra32 = java.time.chrono.IsoEra.CE;
        boolean boolean33 = period31.equals((java.lang.Object) isoEra32);
        int int34 = period31.getMinutes();
        mutableDateTime17.add((org.joda.time.ReadablePeriod) period31);
        java.util.TimeZone timeZone37 = null;
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forTimeZone(timeZone37);
        org.joda.time.DateMidnight dateMidnight39 = new org.joda.time.DateMidnight((long) 1970, dateTimeZone38);
        long long42 = dateTimeZone38.convertLocalToUTC((long) 3, false);
        long long45 = dateTimeZone38.convertLocalToUTC(0L, true);
        mutableDateTime17.setZoneRetainFields(dateTimeZone38);
        java.lang.String str47 = dateTimeZone38.toString();
        org.joda.time.chrono.EthiopicChronology ethiopicChronology48 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone38);
        org.joda.time.DateTimeField dateTimeField49 = ethiopicChronology48.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone50 = ethiopicChronology48.getZone();
        org.joda.time.DateTimeField dateTimeField51 = ethiopicChronology48.era();
        org.joda.time.DurationField durationField52 = ethiopicChronology48.eras();
        org.joda.time.DateTimeField dateTimeField53 = ethiopicChronology48.halfdayOfDay();
        org.joda.time.TimeOfDay timeOfDay54 = new org.joda.time.TimeOfDay((org.joda.time.Chronology) ethiopicChronology48);
        int int55 = ethiopicChronology48.getMinimumDaysInFirstWeek();
        org.joda.time.DateTimeField dateTimeField56 = ethiopicChronology48.minuteOfDay();
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertTrue("'" + isoEra32 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra32.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 3L + "'", long42 == 3L);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Etc/UTC" + "'", str47, "Etc/UTC");
        org.junit.Assert.assertNotNull(ethiopicChronology48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(durationField52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 4 + "'", int55 == 4);
        org.junit.Assert.assertNotNull(dateTimeField56);
    }

    @Test
    public void test1858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1858");
        java.time.LocalTime localTime0 = java.time.LocalTime.NOON;
        java.time.Instant instant2 = java.time.Instant.now();
        java.time.Instant instant3 = java.time.Instant.now();
        boolean boolean4 = instant2.isAfter(instant3);
        java.time.LocalDate localDate6 = java.time.LocalDate.ofEpochDay((long) ' ');
        int int7 = localDate6.getMonthValue();
        org.joda.time.Period period8 = org.joda.time.Period.ZERO;
        org.joda.time.Period period9 = period8.normalizedStandard();
        org.joda.time.Period period11 = period8.plusHours(2);
        java.time.chrono.IsoEra isoEra12 = java.time.chrono.IsoEra.CE;
        boolean boolean13 = period11.equals((java.lang.Object) isoEra12);
        java.time.LocalTime localTime18 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime19 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime18);
        java.time.LocalTime localTime24 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime25 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime24);
        java.time.temporal.ChronoField chronoField26 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime28 = localTime24.with((java.time.temporal.TemporalField) chronoField26, (long) (short) 1);
        long long29 = localTime18.getLong((java.time.temporal.TemporalField) chronoField26);
        boolean boolean30 = isoEra12.isSupported((java.time.temporal.TemporalField) chronoField26);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery31 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period32 = isoEra12.query(periodTemporalQuery31);
        boolean boolean33 = period32.isNegative();
        java.time.Period period35 = period32.plusDays((long) ' ');
        java.time.temporal.ChronoField chronoField36 = java.time.temporal.ChronoField.SECOND_OF_DAY;
        boolean boolean37 = period32.equals((java.lang.Object) chronoField36);
        boolean boolean38 = localDate6.isSupported((java.time.temporal.TemporalField) chronoField36);
        java.time.temporal.TemporalUnit temporalUnit39 = chronoField36.getRangeUnit();
        java.time.Instant instant40 = instant3.truncatedTo(temporalUnit39);
        java.time.ZoneOffset zoneOffset43 = java.time.ZoneOffset.ofHoursMinutes(1, 10);
        java.time.LocalDate localDate44 = java.time.LocalDate.now((java.time.ZoneId) zoneOffset43);
        java.time.ZonedDateTime zonedDateTime45 = java.time.ZonedDateTime.ofInstant(instant40, (java.time.ZoneId) zoneOffset43);
        java.time.Period period48 = java.time.Period.ofYears(28);
        java.time.Period period50 = java.time.Period.ofYears(28);
        java.time.Period period51 = period48.minus((java.time.temporal.TemporalAmount) period50);
        java.time.Instant instant52 = java.time.Instant.now();
        java.time.Instant instant53 = java.time.Instant.now();
        boolean boolean54 = instant52.isAfter(instant53);
        java.time.LocalDate localDate56 = java.time.LocalDate.ofEpochDay((long) ' ');
        int int57 = localDate56.getMonthValue();
        org.joda.time.Period period58 = org.joda.time.Period.ZERO;
        org.joda.time.Period period59 = period58.normalizedStandard();
        org.joda.time.Period period61 = period58.plusHours(2);
        java.time.chrono.IsoEra isoEra62 = java.time.chrono.IsoEra.CE;
        boolean boolean63 = period61.equals((java.lang.Object) isoEra62);
        java.time.LocalTime localTime68 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime69 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime68);
        java.time.LocalTime localTime74 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime75 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime74);
        java.time.temporal.ChronoField chronoField76 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime78 = localTime74.with((java.time.temporal.TemporalField) chronoField76, (long) (short) 1);
        long long79 = localTime68.getLong((java.time.temporal.TemporalField) chronoField76);
        boolean boolean80 = isoEra62.isSupported((java.time.temporal.TemporalField) chronoField76);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery81 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period82 = isoEra62.query(periodTemporalQuery81);
        boolean boolean83 = period82.isNegative();
        java.time.Period period85 = period82.plusDays((long) ' ');
        java.time.temporal.ChronoField chronoField86 = java.time.temporal.ChronoField.SECOND_OF_DAY;
        boolean boolean87 = period82.equals((java.lang.Object) chronoField86);
        boolean boolean88 = localDate56.isSupported((java.time.temporal.TemporalField) chronoField86);
        java.time.temporal.TemporalUnit temporalUnit89 = chronoField86.getRangeUnit();
        java.time.Instant instant90 = instant53.truncatedTo(temporalUnit89);
        long long91 = period48.get(temporalUnit89);
        java.time.ZonedDateTime zonedDateTime92 = zonedDateTime45.minus((long) 34482, temporalUnit89);
        // The following exception was thrown during execution in test generation
        try {
            java.time.LocalTime localTime93 = localTime0.plus(3597523200000L, temporalUnit89);
            org.junit.Assert.fail("Expected exception of type java.time.temporal.UnsupportedTemporalTypeException; message: Unsupported unit: Days");
        } catch (java.time.temporal.UnsupportedTemporalTypeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime0);
        org.junit.Assert.assertNotNull(instant2);
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2 + "'", int7 == 2);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertTrue("'" + isoEra12 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra12.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertNotNull(localTime24);
        org.junit.Assert.assertNotNull(localTime25);
        org.junit.Assert.assertTrue("'" + chronoField26 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField26.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime28);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 3601000000001L + "'", long29 == 3601000000001L);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(periodTemporalQuery31);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertTrue("'" + chronoField36 + "' != '" + java.time.temporal.ChronoField.SECOND_OF_DAY + "'", chronoField36.equals(java.time.temporal.ChronoField.SECOND_OF_DAY));
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + temporalUnit39 + "' != '" + java.time.temporal.ChronoUnit.DAYS + "'", temporalUnit39.equals(java.time.temporal.ChronoUnit.DAYS));
        org.junit.Assert.assertNotNull(instant40);
        org.junit.Assert.assertNotNull(zoneOffset43);
        org.junit.Assert.assertNotNull(localDate44);
        org.junit.Assert.assertNotNull(zonedDateTime45);
        org.junit.Assert.assertNotNull(period48);
        org.junit.Assert.assertNotNull(period50);
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertNotNull(instant52);
        org.junit.Assert.assertNotNull(instant53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(localDate56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 2 + "'", int57 == 2);
        org.junit.Assert.assertNotNull(period58);
        org.junit.Assert.assertNotNull(period59);
        org.junit.Assert.assertNotNull(period61);
        org.junit.Assert.assertTrue("'" + isoEra62 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra62.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(localTime68);
        org.junit.Assert.assertNotNull(localTime69);
        org.junit.Assert.assertNotNull(localTime74);
        org.junit.Assert.assertNotNull(localTime75);
        org.junit.Assert.assertTrue("'" + chronoField76 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField76.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime78);
        org.junit.Assert.assertTrue("'" + long79 + "' != '" + 3601000000001L + "'", long79 == 3601000000001L);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(periodTemporalQuery81);
        org.junit.Assert.assertNotNull(period82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(period85);
        org.junit.Assert.assertTrue("'" + chronoField86 + "' != '" + java.time.temporal.ChronoField.SECOND_OF_DAY + "'", chronoField86.equals(java.time.temporal.ChronoField.SECOND_OF_DAY));
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + temporalUnit89 + "' != '" + java.time.temporal.ChronoUnit.DAYS + "'", temporalUnit89.equals(java.time.temporal.ChronoUnit.DAYS));
        org.junit.Assert.assertNotNull(instant90);
        org.junit.Assert.assertTrue("'" + long91 + "' != '" + 0L + "'", long91 == 0L);
        org.junit.Assert.assertNotNull(zonedDateTime92);
    }

    @Test
    public void test1859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1859");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 3, chronology1);
        org.joda.time.Period period3 = org.joda.time.Period.ZERO;
        org.joda.time.Period period4 = period3.normalizedStandard();
        org.joda.time.Period period6 = period4.minusMinutes((int) ' ');
        org.joda.time.Period period8 = period6.minusMonths((int) (byte) 0);
        org.joda.time.PeriodType periodType9 = period8.getPeriodType();
        org.joda.time.DateTime dateTime10 = dateTime2.minus((org.joda.time.ReadablePeriod) period8);
        org.joda.time.DateTime dateTime12 = dateTime2.plusHours(34);
        org.joda.time.DateTime dateTime14 = dateTime2.plusMonths(5);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.LocalTime localTime17 = new org.joda.time.LocalTime((long) 0, chronology16);
        org.joda.time.Chronology chronology18 = localTime17.getChronology();
        org.joda.time.DateTimeField dateTimeField19 = chronology18.weekyearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime20 = org.joda.time.MutableDateTime.now(chronology18);
        mutableDateTime20.setWeekOfWeekyear((int) '#');
        mutableDateTime20.addHours(0);
        org.joda.time.Days days25 = org.joda.time.Days.daysBetween((org.joda.time.ReadableInstant) dateTime14, (org.joda.time.ReadableInstant) mutableDateTime20);
        org.joda.time.PeriodType periodType26 = days25.getPeriodType();
        org.joda.time.PeriodType periodType27 = days25.getPeriodType();
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(mutableDateTime20);
        org.junit.Assert.assertNotNull(days25);
        org.junit.Assert.assertNotNull(periodType26);
        org.junit.Assert.assertNotNull(periodType27);
    }

    @Test
    public void test1860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1860");
        java.net.InetAddress inetAddress0 = java.net.InetAddress.getLocalHost();
        boolean boolean1 = inetAddress0.isMCOrgLocal();
        float[] floatArray4 = new float[] { (-1L), (byte) -1 };
        java.nio.FloatBuffer floatBuffer5 = java.nio.FloatBuffer.wrap(floatArray4);
        boolean boolean6 = inetAddress0.equals((java.lang.Object) floatBuffer5);
        java.time.OffsetTime offsetTime7 = java.time.OffsetTime.MAX;
        java.time.LocalTime localTime8 = offsetTime7.toLocalTime();
        java.lang.String str9 = offsetTime7.toString();
        java.time.Duration duration10 = java.time.Duration.ZERO;
        java.lang.String str11 = duration10.toString();
        java.time.OffsetTime offsetTime12 = offsetTime7.plus((java.time.temporal.TemporalAmount) duration10);
        java.time.OffsetTime offsetTime14 = offsetTime7.withHour((int) (short) 1);
        boolean boolean15 = inetAddress0.equals((java.lang.Object) offsetTime7);
        boolean boolean16 = inetAddress0.isLinkLocalAddress();
        org.junit.Assert.assertNotNull(inetAddress0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(floatArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray4), "[-1.0, -1.0]");
        org.junit.Assert.assertNotNull(floatBuffer5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(offsetTime7);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "23:59:59.999999999-18:00" + "'", str9, "23:59:59.999999999-18:00");
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "PT0S" + "'", str11, "PT0S");
        org.junit.Assert.assertNotNull(offsetTime12);
        org.junit.Assert.assertNotNull(offsetTime14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test1861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1861");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.Duration duration3 = new org.joda.time.Duration(readableInstant1, readableInstant2);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.PeriodType periodType5 = null;
        org.joda.time.Period period6 = duration3.toPeriodTo(readableInstant4, periodType5);
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.Duration duration9 = new org.joda.time.Duration(readableInstant7, readableInstant8);
        long long10 = duration9.getMillis();
        boolean boolean11 = duration3.isShorterThan((org.joda.time.ReadableDuration) duration9);
        org.joda.time.Instant instant12 = instant0.minus((org.joda.time.ReadableDuration) duration3);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) 3, chronology14);
        org.joda.time.Period period16 = org.joda.time.Period.ZERO;
        org.joda.time.Period period17 = period16.normalizedStandard();
        org.joda.time.Period period19 = period17.minusMinutes((int) ' ');
        org.joda.time.Period period21 = period19.minusMonths((int) (byte) 0);
        org.joda.time.PeriodType periodType22 = period21.getPeriodType();
        org.joda.time.DateTime dateTime23 = dateTime15.minus((org.joda.time.ReadablePeriod) period21);
        org.joda.time.DateTime dateTime25 = dateTime15.plusHours(34);
        org.joda.time.DateTime dateTime27 = dateTime15.plusMonths(5);
        org.joda.time.DateTime dateTime29 = dateTime15.minusHours((int) (byte) 10);
        int int30 = instant12.compareTo((org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime(chronology31);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime32.withYearOfCentury((int) 'a');
        int int35 = localDateTime34.getDayOfMonth();
        org.joda.time.LocalDateTime localDateTime37 = localDateTime34.withMinuteOfHour((int) ' ');
        org.joda.time.LocalDateTime localDateTime39 = localDateTime37.minusYears((int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant40 = null;
        org.joda.time.ReadableInstant readableInstant41 = null;
        org.joda.time.Duration duration42 = new org.joda.time.Duration(readableInstant40, readableInstant41);
        org.joda.time.ReadableInstant readableInstant43 = null;
        org.joda.time.PeriodType periodType44 = null;
        org.joda.time.Period period45 = duration42.toPeriodTo(readableInstant43, periodType44);
        org.joda.time.ReadableInstant readableInstant46 = null;
        org.joda.time.ReadableInstant readableInstant47 = null;
        org.joda.time.Duration duration48 = new org.joda.time.Duration(readableInstant46, readableInstant47);
        long long49 = duration48.getMillis();
        boolean boolean50 = duration42.isShorterThan((org.joda.time.ReadableDuration) duration48);
        org.joda.time.Duration duration52 = duration42.withMillis((long) 2097);
        long long53 = duration52.getStandardDays();
        org.joda.time.LocalDateTime localDateTime54 = localDateTime37.plus((org.joda.time.ReadableDuration) duration52);
        org.joda.time.ReadableInstant readableInstant55 = null;
        org.joda.time.ReadableInstant readableInstant56 = null;
        org.joda.time.Duration duration57 = new org.joda.time.Duration(readableInstant55, readableInstant56);
        long long58 = duration57.getMillis();
        org.joda.time.Duration duration60 = duration57.plus((long) (byte) 1);
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.DateTime dateTime63 = new org.joda.time.DateTime((long) 3, chronology62);
        org.joda.time.DateTime.Property property64 = dateTime63.dayOfYear();
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.DateMidnight dateMidnight66 = new org.joda.time.DateMidnight((java.lang.Object) dateTime63, chronology65);
        org.joda.time.DateMidnight dateMidnight68 = dateMidnight66.minusMonths((-1));
        org.joda.time.DateMidnight dateMidnight70 = dateMidnight66.withDayOfYear((int) ' ');
        org.joda.time.Period period71 = duration60.toPeriodFrom((org.joda.time.ReadableInstant) dateMidnight66);
        boolean boolean72 = duration52.isEqual((org.joda.time.ReadableDuration) duration60);
        org.joda.time.DateTime dateTime73 = dateTime15.minus((org.joda.time.ReadableDuration) duration60);
        java.lang.String str74 = duration60.toString();
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(instant12);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(periodType22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 21 + "'", int35 == 21);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(duration52);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 0L + "'", long53 == 0L);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 0L + "'", long58 == 0L);
        org.junit.Assert.assertNotNull(duration60);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertNotNull(dateMidnight68);
        org.junit.Assert.assertNotNull(dateMidnight70);
        org.junit.Assert.assertNotNull(period71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "PT0.001S" + "'", str74, "PT0.001S");
    }

    @Test
    public void test1862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1862");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 3, chronology1);
        org.joda.time.DateTime.Property property3 = dateTime2.dayOfYear();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight((java.lang.Object) dateTime2, chronology4);
        org.joda.time.MutableDateTime mutableDateTime6 = dateTime2.toMutableDateTime();
        mutableDateTime6.addYears((int) (short) 100);
        org.joda.time.Period period9 = org.joda.time.Period.ZERO;
        org.joda.time.TimeOfDay timeOfDay11 = org.joda.time.TimeOfDay.fromMillisOfDay((long) (short) 0);
        org.joda.time.TimeOfDay timeOfDay13 = org.joda.time.TimeOfDay.fromMillisOfDay((long) (short) 0);
        org.joda.time.Hours hours14 = org.joda.time.Hours.hoursBetween((org.joda.time.ReadablePartial) timeOfDay11, (org.joda.time.ReadablePartial) timeOfDay13);
        org.joda.time.DurationFieldType durationFieldType15 = org.joda.time.DurationFieldType.hours();
        org.joda.time.TimeOfDay timeOfDay17 = timeOfDay13.withFieldAdded(durationFieldType15, (int) (byte) 0);
        org.joda.time.Period period19 = period9.withFieldAdded(durationFieldType15, 4);
        mutableDateTime6.add((org.joda.time.ReadablePeriod) period9);
        mutableDateTime6.addMonths(1970);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.Duration duration25 = new org.joda.time.Duration(readableInstant23, readableInstant24);
        org.joda.time.Duration duration27 = duration25.withMillis((-1L));
        mutableDateTime6.add((org.joda.time.ReadableDuration) duration27, 0);
        mutableDateTime6.addWeekyears(14);
        mutableDateTime6.setMillisOfDay((int) 'u');
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime6.setDateTime(1097, 6, 0, 1936, 127, 46, 121);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1936 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(timeOfDay11);
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertNotNull(hours14);
        org.junit.Assert.assertNotNull(durationFieldType15);
        org.junit.Assert.assertNotNull(timeOfDay17);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(duration27);
    }

    @Test
    public void test1863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1863");
        org.joda.time.Period period0 = org.joda.time.Period.ZERO;
        org.joda.time.Period period1 = period0.normalizedStandard();
        org.joda.time.Period period3 = period0.plusHours(2);
        java.time.chrono.IsoEra isoEra4 = java.time.chrono.IsoEra.CE;
        boolean boolean5 = period3.equals((java.lang.Object) isoEra4);
        java.time.LocalTime localTime10 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime11 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime10);
        java.time.LocalTime localTime16 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime17 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime16);
        java.time.temporal.ChronoField chronoField18 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime20 = localTime16.with((java.time.temporal.TemporalField) chronoField18, (long) (short) 1);
        long long21 = localTime10.getLong((java.time.temporal.TemporalField) chronoField18);
        boolean boolean22 = isoEra4.isSupported((java.time.temporal.TemporalField) chronoField18);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery23 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period24 = isoEra4.query(periodTemporalQuery23);
        boolean boolean25 = period24.isNegative();
        java.time.Period period27 = period24.plusDays((long) ' ');
        boolean boolean28 = period24.isNegative();
        java.time.Period period30 = period24.minusYears((long) 10);
        org.joda.time.Period period31 = org.joda.time.Period.ZERO;
        org.joda.time.Period period32 = period31.normalizedStandard();
        org.joda.time.Period period34 = period31.plusHours(2);
        java.time.chrono.IsoEra isoEra35 = java.time.chrono.IsoEra.CE;
        boolean boolean36 = period34.equals((java.lang.Object) isoEra35);
        java.time.LocalTime localTime41 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime42 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime41);
        java.time.LocalTime localTime47 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime48 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime47);
        java.time.temporal.ChronoField chronoField49 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime51 = localTime47.with((java.time.temporal.TemporalField) chronoField49, (long) (short) 1);
        long long52 = localTime41.getLong((java.time.temporal.TemporalField) chronoField49);
        boolean boolean53 = isoEra35.isSupported((java.time.temporal.TemporalField) chronoField49);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery54 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period55 = isoEra35.query(periodTemporalQuery54);
        java.time.chrono.ChronoPeriod chronoPeriod56 = period30.minus((java.time.temporal.TemporalAmount) period55);
        java.time.chrono.ChronoPeriod chronoPeriod58 = period30.multipliedBy(4096);
        int int59 = period30.getMonths();
        java.time.chrono.IsoChronology isoChronology60 = period30.getChronology();
        java.time.ZoneOffset zoneOffset63 = java.time.ZoneOffset.ofHoursMinutes(1, 10);
        java.time.LocalDate localDate64 = java.time.LocalDate.now((java.time.ZoneId) zoneOffset63);
        java.time.Clock clock65 = java.time.Clock.system((java.time.ZoneId) zoneOffset63);
        java.time.Duration duration67 = java.time.Duration.ofSeconds((long) 0);
        java.time.Duration duration69 = duration67.multipliedBy((long) (byte) -1);
        java.time.Clock clock70 = java.time.Clock.offset(clock65, duration67);
        java.time.chrono.ChronoLocalDate chronoLocalDate71 = isoChronology60.dateNow(clock65);
        java.time.LocalDate localDate74 = isoChronology60.dateYearDay((int) '#', 12);
        java.time.OffsetDateTime offsetDateTime75 = java.time.OffsetDateTime.now();
        java.time.LocalDate localDate76 = offsetDateTime75.toLocalDate();
        java.time.OffsetDateTime offsetDateTime77 = java.time.OffsetDateTime.now();
        java.time.temporal.ChronoField chronoField78 = java.time.temporal.ChronoField.HOUR_OF_DAY;
        boolean boolean79 = offsetDateTime77.isSupported((java.time.temporal.TemporalField) chronoField78);
        boolean boolean80 = offsetDateTime75.isEqual(offsetDateTime77);
        java.time.OffsetDateTime offsetDateTime82 = offsetDateTime77.minusHours(3601000000001L);
        java.util.GregorianCalendar gregorianCalendar88 = new java.util.GregorianCalendar(12, 4096, 7, (-1), (int) (short) 10);
        int int89 = gregorianCalendar88.getWeeksInWeekYear();
        java.lang.String str90 = gregorianCalendar88.getCalendarType();
        java.time.ZonedDateTime zonedDateTime91 = gregorianCalendar88.toZonedDateTime();
        java.time.ZonedDateTime zonedDateTime93 = zonedDateTime91.minusMonths((long) 10);
        java.time.ZonedDateTime zonedDateTime95 = zonedDateTime93.minusHours((long) 9);
        java.time.ZoneOffset zoneOffset96 = zonedDateTime93.getOffset();
        java.time.ZonedDateTime zonedDateTime97 = offsetDateTime77.atZoneSimilarLocal((java.time.ZoneId) zoneOffset96);
        java.time.zone.ZoneRules zoneRules98 = java.time.zone.ZoneRules.of(zoneOffset96);
        // The following exception was thrown during execution in test generation
        try {
            java.time.LocalDateTime localDateTime99 = isoChronology60.localDateTime((java.time.temporal.TemporalAccessor) zoneOffset96);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Unable to obtain LocalDateTime from TemporalAccessor: Z of type java.time.ZoneOffset");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period0);
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertTrue("'" + isoEra4 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra4.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertTrue("'" + chronoField18 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField18.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 3601000000001L + "'", long21 == 3601000000001L);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(periodTemporalQuery23);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertTrue("'" + isoEra35 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra35.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(localTime41);
        org.junit.Assert.assertNotNull(localTime42);
        org.junit.Assert.assertNotNull(localTime47);
        org.junit.Assert.assertNotNull(localTime48);
        org.junit.Assert.assertTrue("'" + chronoField49 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField49.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime51);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 3601000000001L + "'", long52 == 3601000000001L);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(periodTemporalQuery54);
        org.junit.Assert.assertNotNull(period55);
        org.junit.Assert.assertNotNull(chronoPeriod56);
        org.junit.Assert.assertNotNull(chronoPeriod58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(isoChronology60);
        org.junit.Assert.assertNotNull(zoneOffset63);
        org.junit.Assert.assertNotNull(localDate64);
        org.junit.Assert.assertNotNull(clock65);
        org.junit.Assert.assertNotNull(duration67);
        org.junit.Assert.assertNotNull(duration69);
        org.junit.Assert.assertNotNull(clock70);
        org.junit.Assert.assertNotNull(chronoLocalDate71);
        org.junit.Assert.assertNotNull(localDate74);
        org.junit.Assert.assertNotNull(offsetDateTime75);
        org.junit.Assert.assertNotNull(localDate76);
        org.junit.Assert.assertNotNull(offsetDateTime77);
        org.junit.Assert.assertTrue("'" + chronoField78 + "' != '" + java.time.temporal.ChronoField.HOUR_OF_DAY + "'", chronoField78.equals(java.time.temporal.ChronoField.HOUR_OF_DAY));
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertNotNull(offsetDateTime82);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 52 + "'", int89 == 52);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "gregory" + "'", str90, "gregory");
        org.junit.Assert.assertNotNull(zonedDateTime91);
        org.junit.Assert.assertNotNull(zonedDateTime93);
        org.junit.Assert.assertNotNull(zonedDateTime95);
        org.junit.Assert.assertNotNull(zoneOffset96);
        org.junit.Assert.assertNotNull(zonedDateTime97);
        org.junit.Assert.assertNotNull(zoneRules98);
    }

    @Test
    public void test1864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1864");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withYearOfCentury((int) 'a');
        int int4 = localDateTime3.getDayOfMonth();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime3.plusYears((int) (short) 100);
        int int7 = localDateTime3.getSecondOfMinute();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime(chronology8);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.withYearOfCentury((int) 'a');
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.plusSeconds(6);
        boolean boolean14 = localDateTime3.isEqual((org.joda.time.ReadablePartial) localDateTime11);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime3.withWeekyear((int) '.');
        org.joda.time.LocalDateTime localDateTime18 = localDateTime3.withWeekOfWeekyear(20);
        org.joda.time.Chronology chronology19 = localDateTime3.getChronology();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 21 + "'", int4 == 21);
        org.junit.Assert.assertNotNull(localDateTime6);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 58 + "'", int7 == 58);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(chronology19);
    }

    @Test
    public void test1865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1865");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((long) 0, chronology1);
        org.joda.time.LocalTime localTime4 = localTime2.minusMillis(2022);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.monthOfYear();
        boolean boolean6 = localTime4.isSupported(dateTimeFieldType5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.centuryOfEra();
        int int8 = localTime4.indexOf(dateTimeFieldType7);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.LocalTime localTime11 = new org.joda.time.LocalTime((long) 0, chronology10);
        org.joda.time.LocalTime localTime13 = localTime11.minusMillis(2022);
        org.joda.time.LocalTime localTime15 = localTime11.plusMillis((int) (byte) 0);
        org.joda.time.LocalTime localTime16 = localTime4.withFields((org.joda.time.ReadablePartial) localTime15);
        org.joda.time.LocalTime localTime18 = localTime4.plusSeconds(32769);
        int int19 = localTime4.getSecondOfMinute();
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.yearOfEra();
        // The following exception was thrown during execution in test generation
        try {
            int int21 = localTime4.get(dateTimeFieldType20);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'yearOfEra' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 57 + "'", int19 == 57);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
    }

    @Test
    public void test1866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1866");
        java.text.Format.Field field0 = null;
        java.text.FieldPosition fieldPosition1 = new java.text.FieldPosition(field0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime(chronology2);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.withYearOfCentury((int) 'a');
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.plusSeconds(6);
        org.joda.time.DateTime dateTime8 = localDateTime5.toDateTime();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime5.minusMillis((int) '/');
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusMonths(100);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.withDayOfYear(17);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime12.withYear(10);
        boolean boolean17 = fieldPosition1.equals((java.lang.Object) localDateTime12);
        int int18 = localDateTime12.getYearOfEra();
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2088 + "'", int18 == 2088);
    }

    @Test
    public void test1867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1867");
        int int0 = java.util.Spliterator.SUBSIZED;
        org.junit.Assert.assertTrue("'" + int0 + "' != '" + 16384 + "'", int0 == 16384);
    }

    @Test
    public void test1868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1868");
        org.joda.time.TimeOfDay timeOfDay1 = org.joda.time.TimeOfDay.fromMillisOfDay((long) (short) 0);
        org.joda.time.TimeOfDay timeOfDay3 = org.joda.time.TimeOfDay.fromMillisOfDay((long) (short) 0);
        org.joda.time.Hours hours4 = org.joda.time.Hours.hoursBetween((org.joda.time.ReadablePartial) timeOfDay1, (org.joda.time.ReadablePartial) timeOfDay3);
        org.joda.time.DurationFieldType durationFieldType5 = org.joda.time.DurationFieldType.hours();
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay3.withFieldAdded(durationFieldType5, (int) (byte) 0);
        org.joda.time.TimeOfDay timeOfDay9 = timeOfDay3.minusMillis((int) '#');
        org.joda.time.Chronology chronology10 = timeOfDay9.getChronology();
        org.joda.time.DateTimeField dateTimeField11 = chronology10.yearOfCentury();
        org.junit.Assert.assertNotNull(timeOfDay1);
        org.junit.Assert.assertNotNull(timeOfDay3);
        org.junit.Assert.assertNotNull(hours4);
        org.junit.Assert.assertNotNull(durationFieldType5);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(timeOfDay9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
    }

    @Test
    public void test1869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1869");
        java.util.stream.IntStream intStream2 = java.util.stream.IntStream.rangeClosed(100, (int) '4');
        java.util.stream.IntStream intStream3 = intStream2.sequential();
        java.util.function.IntUnaryOperator intUnaryOperator4 = java.util.function.IntUnaryOperator.identity();
        java.util.stream.IntStream intStream5 = intStream2.map(intUnaryOperator4);
        java.util.function.IntUnaryOperator intUnaryOperator6 = java.util.function.IntUnaryOperator.identity();
        java.util.stream.IntStream intStream9 = java.util.stream.IntStream.rangeClosed(100, (int) '4');
        java.util.stream.IntStream intStream10 = intStream9.sequential();
        java.util.function.IntUnaryOperator intUnaryOperator11 = java.util.function.IntUnaryOperator.identity();
        java.util.stream.IntStream intStream12 = intStream9.map(intUnaryOperator11);
        java.util.function.IntUnaryOperator intUnaryOperator13 = intUnaryOperator6.compose(intUnaryOperator11);
        int int15 = intUnaryOperator11.applyAsInt(5);
        java.util.function.IntUnaryOperator intUnaryOperator16 = java.util.function.IntUnaryOperator.identity();
        java.util.stream.IntStream intStream19 = java.util.stream.IntStream.rangeClosed(100, (int) '4');
        java.util.stream.IntStream intStream20 = intStream19.sequential();
        java.util.function.IntUnaryOperator intUnaryOperator21 = java.util.function.IntUnaryOperator.identity();
        java.util.stream.IntStream intStream22 = intStream19.map(intUnaryOperator21);
        java.util.function.IntUnaryOperator intUnaryOperator23 = intUnaryOperator16.compose(intUnaryOperator21);
        java.util.function.IntUnaryOperator intUnaryOperator24 = intUnaryOperator11.compose(intUnaryOperator21);
        java.util.stream.IntStream intStream25 = intStream5.map(intUnaryOperator21);
        java.util.function.IntPredicate intPredicate26 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean27 = intStream5.anyMatch(intPredicate26);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intStream2);
        org.junit.Assert.assertNotNull(intStream3);
        org.junit.Assert.assertNotNull(intUnaryOperator4);
        org.junit.Assert.assertNotNull(intStream5);
        org.junit.Assert.assertNotNull(intUnaryOperator6);
        org.junit.Assert.assertNotNull(intStream9);
        org.junit.Assert.assertNotNull(intStream10);
        org.junit.Assert.assertNotNull(intUnaryOperator11);
        org.junit.Assert.assertNotNull(intStream12);
        org.junit.Assert.assertNotNull(intUnaryOperator13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 5 + "'", int15 == 5);
        org.junit.Assert.assertNotNull(intUnaryOperator16);
        org.junit.Assert.assertNotNull(intStream19);
        org.junit.Assert.assertNotNull(intStream20);
        org.junit.Assert.assertNotNull(intUnaryOperator21);
        org.junit.Assert.assertNotNull(intStream22);
        org.junit.Assert.assertNotNull(intUnaryOperator23);
        org.junit.Assert.assertNotNull(intUnaryOperator24);
        org.junit.Assert.assertNotNull(intStream25);
    }

    @Test
    public void test1870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1870");
        // The following exception was thrown during execution in test generation
        try {
            java.time.LocalTime localTime3 = java.time.LocalTime.of(25, 47, 335);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for HourOfDay (valid values 0 - 23): 25");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1871");
        org.joda.time.Period period0 = org.joda.time.Period.ZERO;
        org.joda.time.Period period1 = period0.normalizedStandard();
        org.joda.time.Period period3 = period0.plusHours(2);
        java.time.chrono.IsoEra isoEra4 = java.time.chrono.IsoEra.CE;
        boolean boolean5 = period3.equals((java.lang.Object) isoEra4);
        java.time.LocalTime localTime10 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime11 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime10);
        java.time.LocalTime localTime16 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime17 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime16);
        java.time.temporal.ChronoField chronoField18 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime20 = localTime16.with((java.time.temporal.TemporalField) chronoField18, (long) (short) 1);
        long long21 = localTime10.getLong((java.time.temporal.TemporalField) chronoField18);
        boolean boolean22 = isoEra4.isSupported((java.time.temporal.TemporalField) chronoField18);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery23 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period24 = isoEra4.query(periodTemporalQuery23);
        boolean boolean25 = period24.isNegative();
        java.time.Period period27 = period24.plusDays((long) ' ');
        java.time.temporal.ChronoField chronoField28 = java.time.temporal.ChronoField.SECOND_OF_DAY;
        boolean boolean29 = period24.equals((java.lang.Object) chronoField28);
        java.time.chrono.ChronoPeriod chronoPeriod30 = period24.negated();
        java.time.OffsetDateTime offsetDateTime31 = java.time.OffsetDateTime.now();
        java.time.temporal.ChronoField chronoField32 = java.time.temporal.ChronoField.HOUR_OF_DAY;
        boolean boolean33 = offsetDateTime31.isSupported((java.time.temporal.TemporalField) chronoField32);
        java.time.Month month34 = offsetDateTime31.getMonth();
        java.time.temporal.Temporal temporal35 = period24.addTo((java.time.temporal.Temporal) offsetDateTime31);
        java.time.OffsetDateTime offsetDateTime37 = offsetDateTime31.minusMinutes((long) '4');
        java.time.OffsetDateTime offsetDateTime39 = offsetDateTime37.plusDays(10L);
        java.time.OffsetDateTime offsetDateTime40 = java.time.OffsetDateTime.now();
        java.time.LocalDate localDate41 = offsetDateTime40.toLocalDate();
        org.joda.time.Period period42 = org.joda.time.Period.ZERO;
        org.joda.time.Period period43 = period42.normalizedStandard();
        org.joda.time.Period period45 = period42.plusHours(2);
        java.time.chrono.IsoEra isoEra46 = java.time.chrono.IsoEra.CE;
        boolean boolean47 = period45.equals((java.lang.Object) isoEra46);
        java.time.LocalTime localTime52 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime53 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime52);
        java.time.LocalTime localTime58 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime59 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime58);
        java.time.temporal.ChronoField chronoField60 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime62 = localTime58.with((java.time.temporal.TemporalField) chronoField60, (long) (short) 1);
        long long63 = localTime52.getLong((java.time.temporal.TemporalField) chronoField60);
        boolean boolean64 = isoEra46.isSupported((java.time.temporal.TemporalField) chronoField60);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery65 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period66 = isoEra46.query(periodTemporalQuery65);
        boolean boolean67 = period66.isNegative();
        java.time.Period period69 = period66.plusDays((long) ' ');
        java.time.temporal.ChronoField chronoField70 = java.time.temporal.ChronoField.SECOND_OF_DAY;
        boolean boolean71 = period66.equals((java.lang.Object) chronoField70);
        java.time.chrono.ChronoPeriod chronoPeriod72 = period66.negated();
        java.time.OffsetDateTime offsetDateTime73 = java.time.OffsetDateTime.now();
        java.time.temporal.ChronoField chronoField74 = java.time.temporal.ChronoField.HOUR_OF_DAY;
        boolean boolean75 = offsetDateTime73.isSupported((java.time.temporal.TemporalField) chronoField74);
        java.time.Month month76 = offsetDateTime73.getMonth();
        java.time.temporal.Temporal temporal77 = period66.addTo((java.time.temporal.Temporal) offsetDateTime73);
        java.time.chrono.ChronoLocalDate chronoLocalDate78 = localDate41.minus((java.time.temporal.TemporalAmount) period66);
        java.time.OffsetDateTime offsetDateTime79 = offsetDateTime39.plus((java.time.temporal.TemporalAmount) period66);
        java.time.ZoneOffset zoneOffset80 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.time.OffsetDateTime offsetDateTime81 = offsetDateTime79.withOffsetSameInstant(zoneOffset80);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period0);
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertTrue("'" + isoEra4 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra4.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertTrue("'" + chronoField18 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField18.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 3601000000001L + "'", long21 == 3601000000001L);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(periodTemporalQuery23);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertTrue("'" + chronoField28 + "' != '" + java.time.temporal.ChronoField.SECOND_OF_DAY + "'", chronoField28.equals(java.time.temporal.ChronoField.SECOND_OF_DAY));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(chronoPeriod30);
        org.junit.Assert.assertNotNull(offsetDateTime31);
        org.junit.Assert.assertTrue("'" + chronoField32 + "' != '" + java.time.temporal.ChronoField.HOUR_OF_DAY + "'", chronoField32.equals(java.time.temporal.ChronoField.HOUR_OF_DAY));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + month34 + "' != '" + java.time.Month.FEBRUARY + "'", month34.equals(java.time.Month.FEBRUARY));
        org.junit.Assert.assertNotNull(temporal35);
        org.junit.Assert.assertNotNull(offsetDateTime37);
        org.junit.Assert.assertNotNull(offsetDateTime39);
        org.junit.Assert.assertNotNull(offsetDateTime40);
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertTrue("'" + isoEra46 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra46.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(localTime52);
        org.junit.Assert.assertNotNull(localTime53);
        org.junit.Assert.assertNotNull(localTime58);
        org.junit.Assert.assertNotNull(localTime59);
        org.junit.Assert.assertTrue("'" + chronoField60 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField60.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime62);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 3601000000001L + "'", long63 == 3601000000001L);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(periodTemporalQuery65);
        org.junit.Assert.assertNotNull(period66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(period69);
        org.junit.Assert.assertTrue("'" + chronoField70 + "' != '" + java.time.temporal.ChronoField.SECOND_OF_DAY + "'", chronoField70.equals(java.time.temporal.ChronoField.SECOND_OF_DAY));
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(chronoPeriod72);
        org.junit.Assert.assertNotNull(offsetDateTime73);
        org.junit.Assert.assertTrue("'" + chronoField74 + "' != '" + java.time.temporal.ChronoField.HOUR_OF_DAY + "'", chronoField74.equals(java.time.temporal.ChronoField.HOUR_OF_DAY));
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + month76 + "' != '" + java.time.Month.FEBRUARY + "'", month76.equals(java.time.Month.FEBRUARY));
        org.junit.Assert.assertNotNull(temporal77);
        org.junit.Assert.assertNotNull(chronoLocalDate78);
        org.junit.Assert.assertNotNull(offsetDateTime79);
    }

    @Test
    public void test1872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1872");
        java.util.GregorianCalendar gregorianCalendar5 = new java.util.GregorianCalendar(12, 4096, 7, (-1), (int) (short) 10);
        int int6 = gregorianCalendar5.getWeeksInWeekYear();
        java.lang.String str7 = gregorianCalendar5.getCalendarType();
        java.time.ZonedDateTime zonedDateTime8 = gregorianCalendar5.toZonedDateTime();
        java.time.ZonedDateTime zonedDateTime10 = zonedDateTime8.minusMonths((long) 10);
        java.time.ZonedDateTime zonedDateTime12 = zonedDateTime10.minusHours((long) 9);
        java.time.LocalTime localTime17 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime18 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime17);
        java.time.LocalTime localTime23 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime24 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime23);
        java.time.temporal.ChronoField chronoField25 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime27 = localTime23.with((java.time.temporal.TemporalField) chronoField25, (long) (short) 1);
        long long28 = localTime17.getLong((java.time.temporal.TemporalField) chronoField25);
        java.time.LocalTime localTime30 = localTime17.withSecond((int) (short) 1);
        int int31 = localTime30.getMinute();
        java.time.LocalTime localTime33 = localTime30.plusHours((long) (-1));
        java.time.LocalDateTime localDateTime34 = java.time.LocalDateTime.now();
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery35 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period36 = localDateTime34.query(periodTemporalQuery35);
        java.time.Period period37 = localTime33.query(periodTemporalQuery35);
        java.time.Period period38 = zonedDateTime12.query(periodTemporalQuery35);
        java.time.ZonedDateTime zonedDateTime40 = zonedDateTime12.withHour(1);
        java.time.ZonedDateTime zonedDateTime42 = zonedDateTime40.plusMonths((long) 2097);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 52 + "'", int6 == 52);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "gregory" + "'", str7, "gregory");
        org.junit.Assert.assertNotNull(zonedDateTime8);
        org.junit.Assert.assertNotNull(zonedDateTime10);
        org.junit.Assert.assertNotNull(zonedDateTime12);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertNotNull(localTime23);
        org.junit.Assert.assertNotNull(localTime24);
        org.junit.Assert.assertTrue("'" + chronoField25 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField25.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime27);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 3601000000001L + "'", long28 == 3601000000001L);
        org.junit.Assert.assertNotNull(localTime30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(localTime33);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(periodTemporalQuery35);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertNotNull(zonedDateTime40);
        org.junit.Assert.assertNotNull(zonedDateTime42);
    }

    @Test
    public void test1873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1873");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.nio.LongBuffer longBuffer3 = java.nio.LongBuffer.allocate((int) (short) 0);
        java.nio.Buffer buffer4 = longBuffer3.mark();
        boolean boolean5 = properties1.containsKey((java.lang.Object) longBuffer3);
        java.util.Collection<java.lang.Object> objCollection6 = properties1.values();
        java.util.Properties properties7 = new java.util.Properties(properties1);
        java.io.InputStream inputStream8 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.loadFromXML(inputStream8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(longBuffer3);
        org.junit.Assert.assertNotNull(buffer4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(objCollection6);
    }

    @Test
    public void test1874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1874");
        java.util.LongSummaryStatistics longSummaryStatistics0 = new java.util.LongSummaryStatistics();
        long long1 = longSummaryStatistics0.getMax();
        long long2 = longSummaryStatistics0.getMin();
        double double3 = longSummaryStatistics0.getAverage();
        org.junit.Assert.assertEquals(longSummaryStatistics0.toString(), "LongSummaryStatistics{count=0, sum=0, min=9223372036854775807, average=0.000000, max=-9223372036854775808}");
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-9223372036854775808L) + "'", long1 == (-9223372036854775808L));
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 9223372036854775807L + "'", long2 == 9223372036854775807L);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
    }

    @Test
    public void test1875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1875");
        org.joda.time.TimeOfDay timeOfDay1 = org.joda.time.TimeOfDay.fromMillisOfDay((long) (short) 0);
        org.joda.time.TimeOfDay timeOfDay3 = org.joda.time.TimeOfDay.fromMillisOfDay((long) (short) 0);
        org.joda.time.Hours hours4 = org.joda.time.Hours.hoursBetween((org.joda.time.ReadablePartial) timeOfDay1, (org.joda.time.ReadablePartial) timeOfDay3);
        org.joda.time.TimeOfDay timeOfDay6 = timeOfDay1.withSecondOfMinute(0);
        org.joda.time.TimeOfDay timeOfDay8 = timeOfDay6.plusSeconds(36);
        org.junit.Assert.assertNotNull(timeOfDay1);
        org.junit.Assert.assertNotNull(timeOfDay3);
        org.junit.Assert.assertNotNull(hours4);
        org.junit.Assert.assertNotNull(timeOfDay6);
        org.junit.Assert.assertNotNull(timeOfDay8);
    }

    @Test
    public void test1876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1876");
        java.time.Instant instant1 = java.time.Instant.ofEpochSecond(34450799000000L);
        java.util.GregorianCalendar gregorianCalendar7 = new java.util.GregorianCalendar(12, 4096, 7, (-1), (int) (short) 10);
        int int8 = gregorianCalendar7.getWeeksInWeekYear();
        java.lang.String str9 = gregorianCalendar7.getCalendarType();
        java.time.ZonedDateTime zonedDateTime10 = gregorianCalendar7.toZonedDateTime();
        java.time.ZonedDateTime zonedDateTime12 = zonedDateTime10.minusMonths((long) 10);
        java.time.ZonedDateTime zonedDateTime14 = zonedDateTime12.minusHours((long) 9);
        java.time.LocalTime localTime19 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime20 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime19);
        java.time.LocalTime localTime25 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime26 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime25);
        java.time.temporal.ChronoField chronoField27 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime29 = localTime25.with((java.time.temporal.TemporalField) chronoField27, (long) (short) 1);
        long long30 = localTime19.getLong((java.time.temporal.TemporalField) chronoField27);
        java.time.LocalTime localTime32 = localTime19.withSecond((int) (short) 1);
        int int33 = localTime32.getMinute();
        java.time.LocalTime localTime35 = localTime32.plusHours((long) (-1));
        java.time.LocalDateTime localDateTime36 = java.time.LocalDateTime.now();
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery37 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period38 = localDateTime36.query(periodTemporalQuery37);
        java.time.Period period39 = localTime35.query(periodTemporalQuery37);
        java.time.Period period40 = zonedDateTime14.query(periodTemporalQuery37);
        java.time.Period period41 = instant1.query(periodTemporalQuery37);
        org.junit.Assert.assertNotNull(instant1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 52 + "'", int8 == 52);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "gregory" + "'", str9, "gregory");
        org.junit.Assert.assertNotNull(zonedDateTime10);
        org.junit.Assert.assertNotNull(zonedDateTime12);
        org.junit.Assert.assertNotNull(zonedDateTime14);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertNotNull(localTime25);
        org.junit.Assert.assertNotNull(localTime26);
        org.junit.Assert.assertTrue("'" + chronoField27 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField27.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime29);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 3601000000001L + "'", long30 == 3601000000001L);
        org.junit.Assert.assertNotNull(localTime32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(localTime35);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(periodTemporalQuery37);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertNotNull(period41);
    }

    @Test
    public void test1877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1877");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withYearOfCentury((int) 'a');
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.plusSeconds(6);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.Duration duration8 = new org.joda.time.Duration(readableInstant6, readableInstant7);
        long long9 = duration8.getMillis();
        org.joda.time.Duration duration11 = duration8.plus((long) (byte) 1);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime3.minus((org.joda.time.ReadableDuration) duration11);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.withWeekOfWeekyear((int) '#');
        java.util.Date date15 = localDateTime14.toDate();
        org.joda.time.Chronology chronology16 = localDateTime14.getChronology();
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight(chronology16);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(date15);
// flaky:         org.junit.Assert.assertEquals(date15.toString(), "Thu Aug 29 09:36:58 UTC 2097");
        org.junit.Assert.assertNotNull(chronology16);
    }

    @Test
    public void test1878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1878");
        java.util.stream.DoubleStream doubleStream1 = java.util.stream.DoubleStream.of((double) 1024);
        java.util.stream.DoubleStream doubleStream2 = doubleStream1.sorted();
        java.util.OptionalDouble optionalDouble3 = doubleStream2.findFirst();
        boolean boolean4 = optionalDouble3.isPresent();
        org.junit.Assert.assertNotNull(doubleStream1);
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertNotNull(optionalDouble3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
    }

    @Test
    public void test1879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1879");
        java.time.temporal.ChronoField chronoField0 = java.time.temporal.ChronoField.NANO_OF_SECOND;
        java.time.OffsetTime offsetTime1 = java.time.OffsetTime.MAX;
        java.time.LocalTime localTime2 = offsetTime1.toLocalTime();
        java.lang.String str3 = offsetTime1.toString();
        java.time.temporal.ValueRange valueRange4 = chronoField0.rangeRefinedBy((java.time.temporal.TemporalAccessor) offsetTime1);
        long long5 = valueRange4.getMinimum();
        org.junit.Assert.assertTrue("'" + chronoField0 + "' != '" + java.time.temporal.ChronoField.NANO_OF_SECOND + "'", chronoField0.equals(java.time.temporal.ChronoField.NANO_OF_SECOND));
        org.junit.Assert.assertNotNull(offsetTime1);
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "23:59:59.999999999-18:00" + "'", str3, "23:59:59.999999999-18:00");
        org.junit.Assert.assertNotNull(valueRange4);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
    }

    @Test
    public void test1880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1880");
        java.util.concurrent.TimeUnit timeUnit1 = java.util.concurrent.TimeUnit.NANOSECONDS;
        long long3 = timeUnit1.toMinutes((long) '4');
        java.nio.file.attribute.FileTime fileTime4 = java.nio.file.attribute.FileTime.from((long) 10, timeUnit1);
        org.joda.time.Period period5 = org.joda.time.Period.ZERO;
        org.joda.time.Period period6 = period5.normalizedStandard();
        org.joda.time.Period period8 = period6.minusMinutes((int) ' ');
        org.joda.time.Period period10 = period8.minusMonths((int) (byte) 0);
        boolean boolean11 = fileTime4.equals((java.lang.Object) period8);
        java.lang.String str12 = fileTime4.toString();
        long long13 = fileTime4.toMillis();
        org.junit.Assert.assertNotNull(timeUnit1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(fileTime4);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "1970-01-01T00:00:00.00000001Z" + "'", str12, "1970-01-01T00:00:00.00000001Z");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
    }

    @Test
    public void test1881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1881");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay2 = new org.joda.time.TimeOfDay(65, 19043);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 65 for hourOfDay must not be larger than 23");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1882");
        org.joda.time.Minutes minutes1 = org.joda.time.Minutes.minutes(1936);
        org.junit.Assert.assertNotNull(minutes1);
    }

    @Test
    public void test1883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1883");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.Duration duration3 = new org.joda.time.Duration(readableInstant1, readableInstant2);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.PeriodType periodType5 = null;
        org.joda.time.Period period6 = duration3.toPeriodTo(readableInstant4, periodType5);
        long long7 = duration3.getStandardDays();
        org.joda.time.Minutes minutes8 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes10 = minutes8.minus(12);
        java.lang.String str11 = minutes8.toString();
        org.joda.time.PeriodType periodType12 = minutes8.getPeriodType();
        org.joda.time.Period period13 = new org.joda.time.Period(readableInstant0, (org.joda.time.ReadableDuration) duration3, periodType12);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(minutes8);
        org.junit.Assert.assertNotNull(minutes10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "PT2147483647M" + "'", str11, "PT2147483647M");
        org.junit.Assert.assertNotNull(periodType12);
    }

    @Test
    public void test1884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1884");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.now();
        java.time.LocalDateTime localDateTime2 = localDateTime0.minusYears((long) (byte) 10);
        java.time.LocalDateTime localDateTime3 = java.time.LocalDateTime.now();
        java.time.LocalDateTime localDateTime5 = localDateTime3.minusYears((long) (byte) 10);
        boolean boolean6 = localDateTime0.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime5);
        java.time.LocalDateTime localDateTime7 = java.time.LocalDateTime.now();
        java.time.temporal.ChronoField chronoField8 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime10 = localDateTime7.with((java.time.temporal.TemporalField) chronoField8, (long) 10);
        java.time.LocalDateTime localDateTime12 = localDateTime7.minusMinutes((long) 12);
        boolean boolean13 = localDateTime5.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime7);
        java.time.LocalDate localDate14 = localDateTime5.toLocalDate();
        int int15 = localDateTime5.getMonthValue();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertTrue("'" + chronoField8 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField8.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2 + "'", int15 == 2);
    }

    @Test
    public void test1885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1885");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        org.joda.time.PeriodType periodType3 = org.joda.time.PeriodType.years();
        org.joda.time.format.PeriodFormatter periodFormatter4 = periodFormatter2.withParseType(periodType3);
        org.joda.time.PeriodType periodType5 = periodType3.withMinutesRemoved();
        org.joda.time.PeriodType periodType6 = periodType3.withHoursRemoved();
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(periodFormatter4);
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertNotNull(periodType6);
    }

    @Test
    public void test1886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1886");
        java.nio.charset.CoderResult coderResult1 = java.nio.charset.CoderResult.unmappableForLength(45);
        org.junit.Assert.assertNotNull(coderResult1);
    }

    @Test
    public void test1887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1887");
        java.util.IntSummaryStatistics intSummaryStatistics0 = new java.util.IntSummaryStatistics();
        intSummaryStatistics0.accept(57);
        long long3 = intSummaryStatistics0.getCount();
        intSummaryStatistics0.accept(679);
        org.junit.Assert.assertEquals(intSummaryStatistics0.toString(), "IntSummaryStatistics{count=2, sum=736, min=57, average=368.000000, max=679}");
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
    }

    @Test
    public void test1888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1888");
        java.net.MalformedURLException malformedURLException1 = new java.net.MalformedURLException("2022-02-21T09:34:21.265Z");
    }

    @Test
    public void test1889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1889");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date1 = new java.util.Date("");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1890");
        java.time.LocalDate localDate1 = java.time.LocalDate.ofEpochDay((long) ' ');
        java.time.OffsetTime offsetTime2 = java.time.OffsetTime.MAX;
        java.time.LocalTime localTime3 = offsetTime2.toLocalTime();
        java.lang.String str4 = offsetTime2.toString();
        java.time.Duration duration5 = java.time.Duration.ZERO;
        java.lang.String str6 = duration5.toString();
        java.time.OffsetTime offsetTime7 = offsetTime2.plus((java.time.temporal.TemporalAmount) duration5);
        java.time.LocalTime localTime8 = offsetTime2.toLocalTime();
        java.time.chrono.ChronoLocalDateTime<?> wildcardChronoLocalDateTime9 = localDate1.atTime(localTime8);
        int int10 = localDate1.lengthOfYear();
        org.junit.Assert.assertNotNull(localDate1);
        org.junit.Assert.assertNotNull(offsetTime2);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "23:59:59.999999999-18:00" + "'", str4, "23:59:59.999999999-18:00");
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "PT0S" + "'", str6, "PT0S");
        org.junit.Assert.assertNotNull(offsetTime7);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(wildcardChronoLocalDateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 365 + "'", int10 == 365);
    }

    @Test
    public void test1891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1891");
        java.nio.charset.Charset charset0 = java.nio.charset.Charset.defaultCharset();
        java.nio.charset.CharsetDecoder charsetDecoder1 = charset0.newDecoder();
        float float2 = charsetDecoder1.maxCharsPerByte();
        java.nio.charset.Charset charset3 = java.nio.charset.Charset.defaultCharset();
        java.nio.charset.CharsetDecoder charsetDecoder4 = charset3.newDecoder();
        java.nio.charset.Charset charset5 = java.nio.charset.Charset.defaultCharset();
        boolean boolean6 = charset3.contains(charset5);
        java.nio.charset.CharsetEncoder charsetEncoder7 = charset3.newEncoder();
        char[] charArray8 = new char[] {};
        java.nio.CharBuffer charBuffer9 = java.nio.CharBuffer.wrap(charArray8);
        java.nio.ByteBuffer byteBuffer10 = charsetEncoder7.encode(charBuffer9);
        char[] charArray17 = new char[] { '#', '/', '4', 'a', '4', 'u' };
        java.nio.CharBuffer charBuffer18 = java.nio.CharBuffer.wrap(charArray17);
        java.nio.charset.CoderResult coderResult20 = charsetDecoder1.decode(byteBuffer10, charBuffer18, false);
        java.nio.ByteBuffer byteBuffer21 = byteBuffer10.asReadOnlyBuffer();
        java.lang.String str22 = byteBuffer21.toString();
        java.nio.CharBuffer charBuffer23 = byteBuffer21.asCharBuffer();
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.Duration duration26 = new org.joda.time.Duration(readableInstant24, readableInstant25);
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.PeriodType periodType28 = null;
        org.joda.time.Period period29 = duration26.toPeriodTo(readableInstant27, periodType28);
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.Duration duration32 = new org.joda.time.Duration(readableInstant30, readableInstant31);
        long long33 = duration32.getMillis();
        boolean boolean34 = duration26.isShorterThan((org.joda.time.ReadableDuration) duration32);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime((long) 3, chronology36);
        org.joda.time.DateTime.Property property38 = dateTime37.dayOfYear();
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.DateMidnight dateMidnight40 = new org.joda.time.DateMidnight((java.lang.Object) dateTime37, chronology39);
        org.joda.time.MutableDateTime mutableDateTime41 = dateTime37.toMutableDateTime();
        mutableDateTime41.addYears((int) (short) 100);
        org.joda.time.MutableDateTime.Property property44 = mutableDateTime41.dayOfWeek();
        org.joda.time.MutableDateTime.Property property45 = mutableDateTime41.year();
        org.joda.time.MutableDateTime.Property property46 = mutableDateTime41.weekyear();
        boolean boolean47 = duration26.equals((java.lang.Object) mutableDateTime41);
        mutableDateTime41.addMonths((int) ' ');
        mutableDateTime41.add((long) (byte) 10);
        org.joda.time.Period period52 = org.joda.time.Period.ZERO;
        org.joda.time.Period period53 = period52.normalizedStandard();
        org.joda.time.Period period55 = period52.plusHours(2);
        java.time.chrono.IsoEra isoEra56 = java.time.chrono.IsoEra.CE;
        boolean boolean57 = period55.equals((java.lang.Object) isoEra56);
        int int58 = period55.getMinutes();
        mutableDateTime41.add((org.joda.time.ReadablePeriod) period55);
        java.util.TimeZone timeZone61 = null;
        org.joda.time.DateTimeZone dateTimeZone62 = org.joda.time.DateTimeZone.forTimeZone(timeZone61);
        org.joda.time.DateMidnight dateMidnight63 = new org.joda.time.DateMidnight((long) 1970, dateTimeZone62);
        long long66 = dateTimeZone62.convertLocalToUTC((long) 3, false);
        long long69 = dateTimeZone62.convertLocalToUTC(0L, true);
        mutableDateTime41.setZoneRetainFields(dateTimeZone62);
        java.lang.String str71 = dateTimeZone62.toString();
        org.joda.time.chrono.EthiopicChronology ethiopicChronology72 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone62);
        org.joda.time.DateTimeField dateTimeField73 = ethiopicChronology72.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone74 = ethiopicChronology72.getZone();
        org.joda.time.DateTimeField dateTimeField75 = ethiopicChronology72.centuryOfEra();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period76 = new org.joda.time.Period((java.lang.Object) byteBuffer21, (org.joda.time.Chronology) ethiopicChronology72);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No period converter found for type: java.nio.HeapByteBufferR");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charset0);
        org.junit.Assert.assertNotNull(charsetDecoder1);
        org.junit.Assert.assertTrue("'" + float2 + "' != '" + 1.0f + "'", float2 == 1.0f);
        org.junit.Assert.assertNotNull(charset3);
        org.junit.Assert.assertNotNull(charsetDecoder4);
        org.junit.Assert.assertNotNull(charset5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(charsetEncoder7);
        org.junit.Assert.assertNotNull(charArray8);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray8), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray8), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray8), "[]");
        org.junit.Assert.assertNotNull(charBuffer9);
        org.junit.Assert.assertNotNull(byteBuffer10);
        org.junit.Assert.assertNotNull(charArray17);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray17), "#/4a4u");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray17), "#/4a4u");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray17), "[#, /, 4, a, 4, u]");
        org.junit.Assert.assertNotNull(charBuffer18);
        org.junit.Assert.assertNotNull(coderResult20);
        org.junit.Assert.assertNotNull(byteBuffer21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "java.nio.HeapByteBufferR[pos=0 lim=0 cap=0]" + "'", str22, "java.nio.HeapByteBufferR[pos=0 lim=0 cap=0]");
        org.junit.Assert.assertNotNull(charBuffer23);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(mutableDateTime41);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(period52);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertNotNull(period55);
        org.junit.Assert.assertTrue("'" + isoEra56 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra56.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone62);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 3L + "'", long66 == 3L);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 0L + "'", long69 == 0L);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "Etc/UTC" + "'", str71, "Etc/UTC");
        org.junit.Assert.assertNotNull(ethiopicChronology72);
        org.junit.Assert.assertNotNull(dateTimeField73);
        org.junit.Assert.assertNotNull(dateTimeZone74);
        org.junit.Assert.assertNotNull(dateTimeField75);
    }

    @Test
    public void test1892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1892");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod((java.lang.Object) 34555048);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No period converter found for type: java.lang.Integer");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1893");
        double[] doubleArray4 = new double[] { (byte) 0, 59, 83400000000000L, '4' };
        java.util.stream.DoubleStream doubleStream5 = java.util.stream.DoubleStream.of(doubleArray4);
        java.nio.DoubleBuffer doubleBuffer6 = java.nio.DoubleBuffer.wrap(doubleArray4);
        double[] doubleArray11 = new double[] { (byte) 0, 59, 83400000000000L, '4' };
        java.util.stream.DoubleStream doubleStream12 = java.util.stream.DoubleStream.of(doubleArray11);
        java.nio.DoubleBuffer doubleBuffer13 = java.nio.DoubleBuffer.wrap(doubleArray11);
        java.nio.DoubleBuffer doubleBuffer14 = doubleBuffer6.put(doubleBuffer13);
        java.lang.String str15 = doubleBuffer14.toString();
        // The following exception was thrown during execution in test generation
        try {
            java.nio.DoubleBuffer doubleBuffer18 = doubleBuffer14.put((int) '\uffff', (double) 1644481495L);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[0.0, 59.0, 8.34E13, 52.0]");
        org.junit.Assert.assertNotNull(doubleStream5);
        org.junit.Assert.assertNotNull(doubleBuffer6);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0, 59.0, 8.34E13, 52.0]");
        org.junit.Assert.assertNotNull(doubleStream12);
        org.junit.Assert.assertNotNull(doubleBuffer13);
        org.junit.Assert.assertNotNull(doubleBuffer14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "java.nio.HeapDoubleBuffer[pos=4 lim=4 cap=4]" + "'", str15, "java.nio.HeapDoubleBuffer[pos=4 lim=4 cap=4]");
    }

    @Test
    public void test1894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1894");
        org.joda.time.MutablePeriod mutablePeriod0 = new org.joda.time.MutablePeriod();
        mutablePeriod0.setPeriod(12, 9, 2022, 34, (int) (short) 0, (int) (short) 1, 4096, 1);
        org.joda.time.MutablePeriod mutablePeriod10 = mutablePeriod0.copy();
        org.joda.time.DurationFieldType durationFieldType11 = org.joda.time.DurationFieldType.hours();
        mutablePeriod0.add(durationFieldType11, (int) (short) 100);
        mutablePeriod0.setPeriod((long) 1);
        mutablePeriod0.addMillis(0);
        org.junit.Assert.assertNotNull(mutablePeriod10);
        org.junit.Assert.assertNotNull(durationFieldType11);
    }

    @Test
    public void test1895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1895");
        java.util.GregorianCalendar gregorianCalendar5 = new java.util.GregorianCalendar(12, 4096, 7, (-1), (int) (short) 10);
        int int6 = gregorianCalendar5.getWeeksInWeekYear();
        java.util.TimeZone timeZone7 = gregorianCalendar5.getTimeZone();
        gregorianCalendar5.setLenient(false);
        int int10 = gregorianCalendar5.getFirstDayOfWeek();
        int int12 = gregorianCalendar5.getActualMinimum(0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 52 + "'", int6 == 52);
        org.junit.Assert.assertNotNull(timeZone7);
        org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test1896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1896");
        java.time.OffsetDateTime offsetDateTime0 = java.time.OffsetDateTime.now();
        int int1 = offsetDateTime0.getDayOfMonth();
        java.time.OffsetDateTime offsetDateTime3 = offsetDateTime0.withMinute((int) (byte) 10);
        int int4 = offsetDateTime0.getYear();
        java.time.OffsetDateTime offsetDateTime5 = java.time.OffsetDateTime.from((java.time.temporal.TemporalAccessor) offsetDateTime0);
        java.time.OffsetDateTime offsetDateTime7 = offsetDateTime5.minusNanos(100L);
        org.junit.Assert.assertNotNull(offsetDateTime0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 21 + "'", int1 == 21);
        org.junit.Assert.assertNotNull(offsetDateTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2022 + "'", int4 == 2022);
        org.junit.Assert.assertNotNull(offsetDateTime5);
        org.junit.Assert.assertNotNull(offsetDateTime7);
    }

    @Test
    public void test1897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1897");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(0L);
        org.junit.Assert.assertNotNull(duration1);
    }

    @Test
    public void test1898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1898");
        java.security.CodeSource codeSource0 = null;
        java.security.PermissionCollection permissionCollection1 = null;
        java.lang.ClassLoader classLoader2 = null;
        java.security.Principal principal3 = null;
        java.security.Principal[] principalArray4 = new java.security.Principal[] { principal3 };
        java.security.ProtectionDomain protectionDomain5 = new java.security.ProtectionDomain(codeSource0, permissionCollection1, classLoader2, principalArray4);
        org.junit.Assert.assertNotNull(principalArray4);
    }

    @Test
    public void test1899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1899");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((long) 0, chronology1);
        org.joda.time.Chronology chronology3 = localTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField4 = chronology3.weekyearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime5 = org.joda.time.MutableDateTime.now(chronology3);
        mutableDateTime5.setDate(52L);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(mutableDateTime5);
    }

    @Test
    public void test1900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1900");
        java.util.stream.DoubleStream doubleStream0 = java.util.stream.DoubleStream.empty();
        java.util.stream.DoubleStream doubleStream2 = doubleStream0.skip(0L);
        java.util.stream.DoubleStream doubleStream3 = doubleStream2.unordered();
        java.util.function.DoublePredicate doublePredicate4 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean5 = doubleStream2.anyMatch(doublePredicate4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleStream0);
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertNotNull(doubleStream3);
    }

    @Test
    public void test1901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1901");
        java.nio.charset.Charset charset0 = java.nio.charset.Charset.defaultCharset();
        java.nio.charset.CharsetDecoder charsetDecoder1 = charset0.newDecoder();
        float float2 = charsetDecoder1.maxCharsPerByte();
        java.nio.charset.Charset charset3 = java.nio.charset.Charset.defaultCharset();
        java.nio.charset.CharsetDecoder charsetDecoder4 = charset3.newDecoder();
        java.nio.charset.Charset charset5 = java.nio.charset.Charset.defaultCharset();
        boolean boolean6 = charset3.contains(charset5);
        java.nio.charset.CharsetEncoder charsetEncoder7 = charset3.newEncoder();
        char[] charArray8 = new char[] {};
        java.nio.CharBuffer charBuffer9 = java.nio.CharBuffer.wrap(charArray8);
        java.nio.ByteBuffer byteBuffer10 = charsetEncoder7.encode(charBuffer9);
        char[] charArray17 = new char[] { '#', '/', '4', 'a', '4', 'u' };
        java.nio.CharBuffer charBuffer18 = java.nio.CharBuffer.wrap(charArray17);
        java.nio.charset.CoderResult coderResult20 = charsetDecoder1.decode(byteBuffer10, charBuffer18, false);
        // The following exception was thrown during execution in test generation
        try {
            byte byte21 = byteBuffer10.get();
            org.junit.Assert.fail("Expected exception of type java.nio.BufferUnderflowException; message: null");
        } catch (java.nio.BufferUnderflowException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charset0);
        org.junit.Assert.assertNotNull(charsetDecoder1);
        org.junit.Assert.assertTrue("'" + float2 + "' != '" + 1.0f + "'", float2 == 1.0f);
        org.junit.Assert.assertNotNull(charset3);
        org.junit.Assert.assertNotNull(charsetDecoder4);
        org.junit.Assert.assertNotNull(charset5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(charsetEncoder7);
        org.junit.Assert.assertNotNull(charArray8);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray8), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray8), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray8), "[]");
        org.junit.Assert.assertNotNull(charBuffer9);
        org.junit.Assert.assertNotNull(byteBuffer10);
        org.junit.Assert.assertNotNull(charArray17);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray17), "#/4a4u");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray17), "#/4a4u");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray17), "[#, /, 4, a, 4, u]");
        org.junit.Assert.assertNotNull(charBuffer18);
        org.junit.Assert.assertNotNull(coderResult20);
    }

    @Test
    public void test1902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1902");
        org.joda.time.Period period0 = org.joda.time.Period.ZERO;
        org.joda.time.Period period1 = period0.normalizedStandard();
        org.joda.time.Period period3 = period0.plusHours(2);
        java.time.chrono.IsoEra isoEra4 = java.time.chrono.IsoEra.CE;
        boolean boolean5 = period3.equals((java.lang.Object) isoEra4);
        java.time.LocalTime localTime10 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime11 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime10);
        java.time.LocalTime localTime16 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime17 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime16);
        java.time.temporal.ChronoField chronoField18 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime20 = localTime16.with((java.time.temporal.TemporalField) chronoField18, (long) (short) 1);
        long long21 = localTime10.getLong((java.time.temporal.TemporalField) chronoField18);
        boolean boolean22 = isoEra4.isSupported((java.time.temporal.TemporalField) chronoField18);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery23 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period24 = isoEra4.query(periodTemporalQuery23);
        boolean boolean25 = period24.isNegative();
        java.time.Period period27 = period24.plusDays((long) ' ');
        boolean boolean28 = period24.isNegative();
        java.time.Period period30 = period24.minusYears((long) 10);
        org.joda.time.Period period31 = org.joda.time.Period.ZERO;
        org.joda.time.Period period32 = period31.normalizedStandard();
        org.joda.time.Period period34 = period31.plusHours(2);
        java.time.chrono.IsoEra isoEra35 = java.time.chrono.IsoEra.CE;
        boolean boolean36 = period34.equals((java.lang.Object) isoEra35);
        java.time.LocalTime localTime41 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime42 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime41);
        java.time.LocalTime localTime47 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime48 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime47);
        java.time.temporal.ChronoField chronoField49 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime51 = localTime47.with((java.time.temporal.TemporalField) chronoField49, (long) (short) 1);
        long long52 = localTime41.getLong((java.time.temporal.TemporalField) chronoField49);
        boolean boolean53 = isoEra35.isSupported((java.time.temporal.TemporalField) chronoField49);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery54 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period55 = isoEra35.query(periodTemporalQuery54);
        java.time.chrono.ChronoPeriod chronoPeriod56 = period30.minus((java.time.temporal.TemporalAmount) period55);
        java.time.chrono.ChronoPeriod chronoPeriod58 = period30.multipliedBy(4096);
        int int59 = period30.getMonths();
        java.time.chrono.IsoChronology isoChronology60 = period30.getChronology();
        java.time.ZoneOffset zoneOffset63 = java.time.ZoneOffset.ofHoursMinutes(1, 10);
        java.time.LocalDate localDate64 = java.time.LocalDate.now((java.time.ZoneId) zoneOffset63);
        java.time.Clock clock65 = java.time.Clock.system((java.time.ZoneId) zoneOffset63);
        java.time.Duration duration67 = java.time.Duration.ofSeconds((long) 0);
        java.time.Duration duration69 = duration67.multipliedBy((long) (byte) -1);
        java.time.Clock clock70 = java.time.Clock.offset(clock65, duration67);
        java.time.chrono.ChronoLocalDate chronoLocalDate71 = isoChronology60.dateNow(clock65);
        java.time.ZoneOffset zoneOffset74 = java.time.ZoneOffset.ofHoursMinutes(1, 10);
        java.time.LocalDate localDate75 = java.time.LocalDate.now((java.time.ZoneId) zoneOffset74);
        java.time.LocalDate localDate76 = java.time.LocalDate.now((java.time.ZoneId) zoneOffset74);
        java.time.LocalDate localDate77 = isoChronology60.dateNow((java.time.ZoneId) zoneOffset74);
        // The following exception was thrown during execution in test generation
        try {
            java.time.OffsetDateTime offsetDateTime78 = java.time.OffsetDateTime.from((java.time.temporal.TemporalAccessor) localDate77);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Unable to obtain OffsetDateTime from TemporalAccessor: 2022-02-21 of type java.time.LocalDate");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period0);
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertTrue("'" + isoEra4 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra4.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertTrue("'" + chronoField18 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField18.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 3601000000001L + "'", long21 == 3601000000001L);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(periodTemporalQuery23);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertTrue("'" + isoEra35 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra35.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(localTime41);
        org.junit.Assert.assertNotNull(localTime42);
        org.junit.Assert.assertNotNull(localTime47);
        org.junit.Assert.assertNotNull(localTime48);
        org.junit.Assert.assertTrue("'" + chronoField49 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField49.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime51);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 3601000000001L + "'", long52 == 3601000000001L);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(periodTemporalQuery54);
        org.junit.Assert.assertNotNull(period55);
        org.junit.Assert.assertNotNull(chronoPeriod56);
        org.junit.Assert.assertNotNull(chronoPeriod58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(isoChronology60);
        org.junit.Assert.assertNotNull(zoneOffset63);
        org.junit.Assert.assertNotNull(localDate64);
        org.junit.Assert.assertNotNull(clock65);
        org.junit.Assert.assertNotNull(duration67);
        org.junit.Assert.assertNotNull(duration69);
        org.junit.Assert.assertNotNull(clock70);
        org.junit.Assert.assertNotNull(chronoLocalDate71);
        org.junit.Assert.assertNotNull(zoneOffset74);
        org.junit.Assert.assertNotNull(localDate75);
        org.junit.Assert.assertNotNull(localDate76);
        org.junit.Assert.assertNotNull(localDate77);
    }

    @Test
    public void test1903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1903");
        org.joda.time.TimeOfDay timeOfDay1 = org.joda.time.TimeOfDay.fromMillisOfDay((long) (short) 0);
        org.joda.time.TimeOfDay timeOfDay3 = org.joda.time.TimeOfDay.fromMillisOfDay((long) (short) 0);
        org.joda.time.Hours hours4 = org.joda.time.Hours.hoursBetween((org.joda.time.ReadablePartial) timeOfDay1, (org.joda.time.ReadablePartial) timeOfDay3);
        org.joda.time.DurationFieldType durationFieldType5 = org.joda.time.DurationFieldType.hours();
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay3.withFieldAdded(durationFieldType5, (int) (byte) 0);
        int int8 = timeOfDay3.getMillisOfSecond();
        org.joda.time.TimeOfDay timeOfDay10 = timeOfDay3.plusHours(9);
        org.joda.time.TimeOfDay.Property property11 = timeOfDay3.secondOfMinute();
        java.time.ZoneOffset zoneOffset14 = java.time.ZoneOffset.ofHoursMinutes(1, 10);
        java.time.LocalDate localDate15 = java.time.LocalDate.now((java.time.ZoneId) zoneOffset14);
        boolean boolean16 = property11.equals((java.lang.Object) localDate15);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = property11.getFieldType();
        org.joda.time.TimeOfDay timeOfDay18 = property11.withMinimumValue();
        org.joda.time.TimeOfDay timeOfDay20 = property11.addToCopy(59);
        java.util.Locale locale23 = new java.util.Locale("Subject:\n", "German");
        int int24 = property11.getMaximumTextLength(locale23);
        org.joda.time.DateTimeField dateTimeField25 = property11.getField();
        org.junit.Assert.assertNotNull(timeOfDay1);
        org.junit.Assert.assertNotNull(timeOfDay3);
        org.junit.Assert.assertNotNull(hours4);
        org.junit.Assert.assertNotNull(durationFieldType5);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(zoneOffset14);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(timeOfDay18);
        org.junit.Assert.assertNotNull(timeOfDay20);
        org.junit.Assert.assertEquals(locale23.toString(), "subject:\n_GERMAN");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
        org.junit.Assert.assertNotNull(dateTimeField25);
    }

    @Test
    public void test1904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1904");
        java.util.stream.LongStream longStream1 = java.util.stream.LongStream.of(0L);
        java.util.LongSummaryStatistics longSummaryStatistics2 = new java.util.LongSummaryStatistics();
        longSummaryStatistics2.accept(3);
        long long5 = longSummaryStatistics2.getMax();
        java.util.LongSummaryStatistics longSummaryStatistics6 = new java.util.LongSummaryStatistics();
        longSummaryStatistics6.accept(3);
        java.util.function.LongConsumer longConsumer9 = longSummaryStatistics2.andThen((java.util.function.LongConsumer) longSummaryStatistics6);
        java.util.stream.LongStream longStream10 = longStream1.peek((java.util.function.LongConsumer) longSummaryStatistics6);
        java.util.OptionalLong optionalLong11 = longStream10.max();
        long long12 = optionalLong11.getAsLong();
        boolean boolean13 = optionalLong11.isPresent();
        org.junit.Assert.assertNotNull(longStream1);
        org.junit.Assert.assertEquals(longSummaryStatistics2.toString(), "LongSummaryStatistics{count=1, sum=3, min=3, average=3.000000, max=3}");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 3L + "'", long5 == 3L);
        org.junit.Assert.assertEquals(longSummaryStatistics6.toString(), "LongSummaryStatistics{count=2, sum=3, min=0, average=1.500000, max=3}");
        org.junit.Assert.assertNotNull(longConsumer9);
        org.junit.Assert.assertNotNull(longStream10);
        org.junit.Assert.assertNotNull(optionalLong11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test1905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1905");
        java.util.stream.DoubleStream doubleStream0 = java.util.stream.DoubleStream.empty();
        java.util.stream.DoubleStream doubleStream2 = doubleStream0.skip(0L);
        java.util.OptionalDouble optionalDouble3 = doubleStream0.average();
        java.lang.String str4 = optionalDouble3.toString();
        java.util.function.DoubleSupplier doubleSupplier5 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double6 = optionalDouble3.orElseGet(doubleSupplier5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleStream0);
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertNotNull(optionalDouble3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "OptionalDouble.empty" + "'", str4, "OptionalDouble.empty");
    }

    @Test
    public void test1906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1906");
        java.util.stream.LongStream longStream1 = java.util.stream.LongStream.of(0L);
        java.util.stream.LongStream longStream2 = longStream1.unordered();
        boolean boolean3 = longStream1.isParallel();
        java.util.function.LongBinaryOperator longBinaryOperator5 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long6 = longStream1.reduce(1000L, longBinaryOperator5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(longStream1);
        org.junit.Assert.assertNotNull(longStream2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test1907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1907");
        java.net.URI uRI1 = new java.net.URI("hi!");
        java.lang.String str2 = uRI1.getRawAuthority();
        java.lang.String str3 = uRI1.toString();
        java.lang.String str4 = uRI1.getRawFragment();
        java.net.URI uRI6 = new java.net.URI("hi!");
        java.lang.String str7 = uRI6.toASCIIString();
        java.net.URI uRI8 = uRI1.resolve(uRI6);
        java.net.URI uRI9 = uRI1.parseServerAuthority();
        java.net.URI uRI13 = new java.net.URI("x-windows-iso2022jp", "java.nio.charset.CharacterCodingException", "German");
        java.net.URI uRI14 = uRI9.relativize(uRI13);
        // The following exception was thrown during execution in test generation
        try {
            java.net.URL uRL15 = uRI14.toURL();
            org.junit.Assert.fail("Expected exception of type java.net.MalformedURLException; message: unknown protocol: x-windows-iso2022jp");
        } catch (java.net.MalformedURLException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "hi!" + "'", str3, "hi!");
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertNotNull(uRI8);
        org.junit.Assert.assertNotNull(uRI9);
        org.junit.Assert.assertNotNull(uRI14);
    }

    @Test
    public void test1908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1908");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withYearOfCentury((int) 'a');
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.plusSeconds(6);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.Duration duration8 = new org.joda.time.Duration(readableInstant6, readableInstant7);
        long long9 = duration8.getMillis();
        org.joda.time.Duration duration11 = duration8.plus((long) (byte) 1);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime3.minus((org.joda.time.ReadableDuration) duration11);
        org.joda.time.LocalDateTime.Property property13 = localDateTime12.weekOfWeekyear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime((java.lang.Object) property13);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: org.joda.time.LocalDateTime$Property");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
    }

    @Test
    public void test1909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1909");
        java.security.CodeSource codeSource0 = null;
        java.security.PermissionCollection permissionCollection1 = null;
        java.lang.ClassLoader classLoader2 = null;
        java.security.Principal[] principalArray3 = null;
        java.security.ProtectionDomain protectionDomain4 = new java.security.ProtectionDomain(codeSource0, permissionCollection1, classLoader2, principalArray3);
        java.security.CodeSource codeSource5 = protectionDomain4.getCodeSource();
        org.junit.Assert.assertEquals(protectionDomain4.toString(), "ProtectionDomain  null\n null\n <no principals>\n null\n");
        org.junit.Assert.assertNull(codeSource5);
    }

    @Test
    public void test1910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1910");
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.LocalTime localTime6 = new org.joda.time.LocalTime((long) 0, chronology5);
        org.joda.time.Chronology chronology7 = localTime6.getChronology();
        java.util.Locale locale8 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale locale9 = java.util.Locale.GERMANY;
        java.lang.String str10 = locale8.getDisplayScript(locale9);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket12 = new org.joda.time.format.DateTimeParserBucket((long) 1970, chronology7, locale8, (java.lang.Integer) 1);
        org.joda.time.DurationField durationField13 = chronology7.days();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate(0, 20, 96000000, chronology7);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 20 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(durationField13);
    }

    @Test
    public void test1911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1911");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.TWO;
        org.junit.Assert.assertNotNull(minutes0);
    }

    @Test
    public void test1912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1912");
        java.util.Optional<java.lang.Exception> exceptionOptional0 = java.util.Optional.empty();
        boolean boolean1 = exceptionOptional0.isPresent();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Exception exception2 = exceptionOptional0.get();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: No value present");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(exceptionOptional0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test1913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1913");
        java.time.LocalDateTime localDateTime2 = java.time.LocalDateTime.now();
        java.time.temporal.ChronoField chronoField3 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime5 = localDateTime2.with((java.time.temporal.TemporalField) chronoField3, (long) 10);
        java.time.LocalDateTime localDateTime7 = localDateTime2.minusMinutes((long) 12);
        java.time.LocalDateTime localDateTime8 = java.time.LocalDateTime.now();
        java.time.temporal.ChronoField chronoField9 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime11 = localDateTime8.with((java.time.temporal.TemporalField) chronoField9, (long) 10);
        java.time.Duration duration13 = java.time.Duration.ofSeconds((long) 0);
        java.time.temporal.Temporal temporal14 = localDateTime8.minus((java.time.temporal.TemporalAmount) duration13);
        boolean boolean15 = localDateTime7.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime8);
        java.time.LocalDate localDate17 = java.time.LocalDate.ofEpochDay((long) ' ');
        java.time.OffsetTime offsetTime18 = java.time.OffsetTime.MAX;
        java.time.LocalTime localTime19 = offsetTime18.toLocalTime();
        java.lang.String str20 = offsetTime18.toString();
        java.time.Duration duration21 = java.time.Duration.ZERO;
        java.lang.String str22 = duration21.toString();
        java.time.OffsetTime offsetTime23 = offsetTime18.plus((java.time.temporal.TemporalAmount) duration21);
        java.time.LocalTime localTime24 = offsetTime18.toLocalTime();
        java.time.chrono.ChronoLocalDateTime<?> wildcardChronoLocalDateTime25 = localDate17.atTime(localTime24);
        java.time.LocalDate localDate27 = localDate17.minusWeeks((long) 2097);
        java.lang.String str28 = localDate27.toString();
        java.time.LocalDate localDate30 = java.time.LocalDate.ofEpochDay((long) ' ');
        java.time.OffsetTime offsetTime31 = java.time.OffsetTime.MAX;
        java.time.LocalTime localTime32 = offsetTime31.toLocalTime();
        java.lang.String str33 = offsetTime31.toString();
        java.time.Duration duration34 = java.time.Duration.ZERO;
        java.lang.String str35 = duration34.toString();
        java.time.OffsetTime offsetTime36 = offsetTime31.plus((java.time.temporal.TemporalAmount) duration34);
        java.time.LocalTime localTime37 = offsetTime31.toLocalTime();
        java.time.chrono.ChronoLocalDateTime<?> wildcardChronoLocalDateTime38 = localDate30.atTime(localTime37);
        java.time.LocalDate localDate40 = localDate30.minusWeeks((long) 2097);
        java.util.TimeZone timeZone42 = null;
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forTimeZone(timeZone42);
        org.joda.time.DateMidnight dateMidnight44 = new org.joda.time.DateMidnight((long) 1970, dateTimeZone43);
        long long47 = dateTimeZone43.convertLocalToUTC((long) 3, false);
        long long50 = dateTimeZone43.convertLocalToUTC(0L, true);
        boolean boolean51 = localDate30.equals((java.lang.Object) true);
        int int52 = localDate30.lengthOfMonth();
        java.time.temporal.Temporal temporal53 = localDate27.adjustInto((java.time.temporal.Temporal) localDate30);
        java.time.LocalDateTime localDateTime54 = localDate27.atStartOfDay();
        boolean boolean55 = localDateTime8.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime54);
        java.util.GregorianCalendar gregorianCalendar61 = new java.util.GregorianCalendar(12, 4096, 7, (-1), (int) (short) 10);
        int int62 = gregorianCalendar61.getWeeksInWeekYear();
        java.lang.String str63 = gregorianCalendar61.getCalendarType();
        java.time.ZonedDateTime zonedDateTime64 = gregorianCalendar61.toZonedDateTime();
        java.time.ZonedDateTime zonedDateTime66 = zonedDateTime64.minusMonths((long) 10);
        int int67 = zonedDateTime64.getMonthValue();
        java.time.LocalTime localTime72 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime73 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime72);
        java.time.LocalTime localTime78 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime79 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime78);
        java.time.temporal.ChronoField chronoField80 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime82 = localTime78.with((java.time.temporal.TemporalField) chronoField80, (long) (short) 1);
        long long83 = localTime72.getLong((java.time.temporal.TemporalField) chronoField80);
        long long84 = zonedDateTime64.getLong((java.time.temporal.TemporalField) chronoField80);
        java.time.ZoneOffset zoneOffset87 = java.time.ZoneOffset.ofHoursMinutes(1, 10);
        java.time.LocalDate localDate88 = java.time.LocalDate.now((java.time.ZoneId) zoneOffset87);
        java.time.LocalDate localDate89 = java.time.LocalDate.now((java.time.ZoneId) zoneOffset87);
        java.time.chrono.ChronoZonedDateTime<java.time.LocalDate> localDateChronoZonedDateTime90 = zonedDateTime64.withZoneSameLocal((java.time.ZoneId) zoneOffset87);
        java.time.ZonedDateTime zonedDateTime91 = java.time.ZonedDateTime.of(localDateTime8, (java.time.ZoneId) zoneOffset87);
        java.time.LocalDateTime localDateTime92 = java.time.LocalDateTime.ofEpochSecond((long) 59, 241, zoneOffset87);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertTrue("'" + chronoField3 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField3.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertTrue("'" + chronoField9 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField9.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(temporal14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(offsetTime18);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "23:59:59.999999999-18:00" + "'", str20, "23:59:59.999999999-18:00");
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "PT0S" + "'", str22, "PT0S");
        org.junit.Assert.assertNotNull(offsetTime23);
        org.junit.Assert.assertNotNull(localTime24);
        org.junit.Assert.assertNotNull(wildcardChronoLocalDateTime25);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "1929-11-25" + "'", str28, "1929-11-25");
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertNotNull(offsetTime31);
        org.junit.Assert.assertNotNull(localTime32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "23:59:59.999999999-18:00" + "'", str33, "23:59:59.999999999-18:00");
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "PT0S" + "'", str35, "PT0S");
        org.junit.Assert.assertNotNull(offsetTime36);
        org.junit.Assert.assertNotNull(localTime37);
        org.junit.Assert.assertNotNull(wildcardChronoLocalDateTime38);
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 3L + "'", long47 == 3L);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 28 + "'", int52 == 28);
        org.junit.Assert.assertNotNull(temporal53);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 52 + "'", int62 == 52);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "gregory" + "'", str63, "gregory");
        org.junit.Assert.assertNotNull(zonedDateTime64);
        org.junit.Assert.assertNotNull(zonedDateTime66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 5 + "'", int67 == 5);
        org.junit.Assert.assertNotNull(localTime72);
        org.junit.Assert.assertNotNull(localTime73);
        org.junit.Assert.assertNotNull(localTime78);
        org.junit.Assert.assertNotNull(localTime79);
        org.junit.Assert.assertTrue("'" + chronoField80 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField80.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime82);
        org.junit.Assert.assertTrue("'" + long83 + "' != '" + 3601000000001L + "'", long83 == 3601000000001L);
        org.junit.Assert.assertTrue("'" + long84 + "' != '" + 83400000000000L + "'", long84 == 83400000000000L);
        org.junit.Assert.assertNotNull(zoneOffset87);
        org.junit.Assert.assertNotNull(localDate88);
        org.junit.Assert.assertNotNull(localDate89);
        org.junit.Assert.assertNotNull(localDateChronoZonedDateTime90);
        org.junit.Assert.assertNotNull(zonedDateTime91);
        org.junit.Assert.assertNotNull(localDateTime92);
    }

    @Test
    public void test1914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1914");
        java.util.GregorianCalendar gregorianCalendar5 = new java.util.GregorianCalendar(12, 4096, 7, (-1), (int) (short) 10);
        int int6 = gregorianCalendar5.getWeeksInWeekYear();
        java.lang.String str7 = gregorianCalendar5.getCalendarType();
        java.time.ZonedDateTime zonedDateTime8 = gregorianCalendar5.toZonedDateTime();
        java.time.ZonedDateTime zonedDateTime10 = zonedDateTime8.minusMonths((long) 10);
        java.time.chrono.ChronoZonedDateTime<java.time.LocalDate> localDateChronoZonedDateTime11 = zonedDateTime8.withEarlierOffsetAtOverlap();
        int int12 = zonedDateTime8.getDayOfYear();
        java.time.ZonedDateTime zonedDateTime14 = zonedDateTime8.withMinute(34);
        java.time.ZonedDateTime zonedDateTime16 = zonedDateTime14.plusSeconds(0L);
        java.time.chrono.Chronology chronology17 = zonedDateTime14.getChronology();
        org.joda.time.Period period18 = org.joda.time.Period.ZERO;
        org.joda.time.Period period19 = period18.normalizedStandard();
        org.joda.time.Period period21 = period18.plusHours(2);
        java.time.chrono.IsoEra isoEra22 = java.time.chrono.IsoEra.CE;
        boolean boolean23 = period21.equals((java.lang.Object) isoEra22);
        // The following exception was thrown during execution in test generation
        try {
            java.time.chrono.ChronoLocalDate chronoLocalDate27 = chronology17.date((java.time.chrono.Era) isoEra22, 65, 6, 0);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for DayOfMonth (valid values 1 - 28/31): 0");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 52 + "'", int6 == 52);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "gregory" + "'", str7, "gregory");
        org.junit.Assert.assertNotNull(zonedDateTime8);
        org.junit.Assert.assertNotNull(zonedDateTime10);
        org.junit.Assert.assertNotNull(localDateChronoZonedDateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 127 + "'", int12 == 127);
        org.junit.Assert.assertNotNull(zonedDateTime14);
        org.junit.Assert.assertNotNull(zonedDateTime16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertTrue("'" + isoEra22 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra22.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test1915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1915");
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.ofHoursMinutes(1, 10);
        java.time.temporal.ChronoField chronoField3 = java.time.temporal.ChronoField.HOUR_OF_DAY;
        java.time.temporal.ValueRange valueRange4 = chronoField3.range();
        boolean boolean5 = zoneOffset2.isSupported((java.time.temporal.TemporalField) chronoField3);
        java.time.temporal.TemporalUnit temporalUnit6 = chronoField3.getBaseUnit();
        java.time.temporal.TemporalUnit temporalUnit7 = chronoField3.getBaseUnit();
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertTrue("'" + chronoField3 + "' != '" + java.time.temporal.ChronoField.HOUR_OF_DAY + "'", chronoField3.equals(java.time.temporal.ChronoField.HOUR_OF_DAY));
        org.junit.Assert.assertNotNull(valueRange4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + temporalUnit6 + "' != '" + java.time.temporal.ChronoUnit.HOURS + "'", temporalUnit6.equals(java.time.temporal.ChronoUnit.HOURS));
        org.junit.Assert.assertTrue("'" + temporalUnit7 + "' != '" + java.time.temporal.ChronoUnit.HOURS + "'", temporalUnit7.equals(java.time.temporal.ChronoUnit.HOURS));
    }

    @Test
    public void test1916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1916");
        java.lang.Object obj0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(obj0);
    }

    @Test
    public void test1917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1917");
        java.time.Instant instant0 = java.time.Instant.EPOCH;
        java.time.Instant instant1 = java.time.Instant.now();
        java.time.Instant instant2 = java.time.Instant.now();
        boolean boolean3 = instant1.isAfter(instant2);
        java.time.Duration duration4 = java.time.Duration.ZERO;
        java.time.Instant instant5 = instant2.minus((java.time.temporal.TemporalAmount) duration4);
        boolean boolean6 = instant0.isAfter(instant5);
        java.util.GregorianCalendar gregorianCalendar12 = new java.util.GregorianCalendar(12, 4096, 7, (-1), (int) (short) 10);
        int int13 = gregorianCalendar12.getWeeksInWeekYear();
        java.util.TimeZone timeZone14 = gregorianCalendar12.getTimeZone();
        java.time.ZoneId zoneId15 = timeZone14.toZoneId();
        java.time.LocalTime localTime16 = java.time.LocalTime.now(zoneId15);
        java.time.LocalDateTime localDateTime17 = java.time.LocalDateTime.now(zoneId15);
        java.time.Clock clock18 = java.time.Clock.fixed(instant0, zoneId15);
        // The following exception was thrown during execution in test generation
        try {
            java.time.ZoneOffset zoneOffset19 = java.time.ZoneOffset.from((java.time.temporal.TemporalAccessor) instant0);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Unable to obtain ZoneOffset from TemporalAccessor: 1970-01-01T00:00:00Z of type java.time.Instant");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(instant0);
        org.junit.Assert.assertNotNull(instant1);
        org.junit.Assert.assertNotNull(instant2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(instant5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 52 + "'", int13 == 52);
        org.junit.Assert.assertNotNull(timeZone14);
        org.junit.Assert.assertEquals(timeZone14.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(zoneId15);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(clock18);
    }

    @Test
    public void test1918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1918");
        java.time.LocalTime localTime4 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime5 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime4);
        java.time.temporal.ChronoField chronoField6 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime8 = localTime4.with((java.time.temporal.TemporalField) chronoField6, (long) (short) 1);
        java.time.Duration duration10 = java.time.Duration.ofMinutes((long) 3);
        java.time.LocalTime localTime11 = localTime4.minus((java.time.temporal.TemporalAmount) duration10);
        java.time.LocalTime localTime13 = localTime11.minusMinutes((long) 2012);
        int int14 = localTime11.getSecond();
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertTrue("'" + chronoField6 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField6.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
    }

    @Test
    public void test1919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1919");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withYearOfCentury((int) 'a');
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.plusSeconds(6);
        org.joda.time.MutablePeriod mutablePeriod6 = new org.joda.time.MutablePeriod();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime3.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod6, 11);
        org.joda.time.LocalDateTime.Property property9 = localDateTime3.yearOfEra();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(property9);
    }

    @Test
    public void test1920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1920");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.time.LocalTime localTime6 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime7 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime6);
        java.time.LocalTime localTime12 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime13 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime12);
        java.time.temporal.ChronoField chronoField14 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime16 = localTime12.with((java.time.temporal.TemporalField) chronoField14, (long) (short) 1);
        long long17 = localTime6.getLong((java.time.temporal.TemporalField) chronoField14);
        java.time.LocalTime localTime19 = localTime6.withSecond((int) (short) 1);
        java.lang.Object obj21 = properties1.put((java.lang.Object) localTime19, (java.lang.Object) "117");
        boolean boolean23 = properties1.containsValue((java.lang.Object) 6);
        java.time.LocalDate localDate26 = java.time.LocalDate.ofEpochDay((long) ' ');
        int int27 = localDate26.getMonthValue();
        java.lang.Object obj28 = properties1.replace((java.lang.Object) 21, (java.lang.Object) localDate26);
        java.time.LocalDate localDate30 = localDate26.plusYears((-32L));
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertTrue("'" + chronoField14 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField14.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 3601000000001L + "'", long17 == 3601000000001L);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertNull(obj21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2 + "'", int27 == 2);
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertNotNull(localDate30);
    }

    @Test
    public void test1921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1921");
        org.joda.time.Weeks weeks1 = org.joda.time.Weeks.ONE;
        java.util.concurrent.TimeUnit timeUnit2 = java.util.concurrent.TimeUnit.NANOSECONDS;
        boolean boolean3 = weeks1.equals((java.lang.Object) timeUnit2);
        org.joda.time.MutablePeriod mutablePeriod4 = weeks1.toMutablePeriod();
        int int5 = mutablePeriod4.getSeconds();
        mutablePeriod4.addSeconds(10);
        org.joda.time.Weeks weeks9 = org.joda.time.Weeks.ONE;
        java.util.concurrent.TimeUnit timeUnit10 = java.util.concurrent.TimeUnit.NANOSECONDS;
        boolean boolean11 = weeks9.equals((java.lang.Object) timeUnit10);
        org.joda.time.MutablePeriod mutablePeriod12 = weeks9.toMutablePeriod();
        int int13 = mutablePeriod12.getSeconds();
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.Duration duration16 = new org.joda.time.Duration(readableInstant14, readableInstant15);
        long long17 = duration16.getMillis();
        org.joda.time.Duration duration19 = duration16.plus((long) (byte) 1);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.LocalTime localTime23 = new org.joda.time.LocalTime((long) 0, chronology22);
        org.joda.time.Chronology chronology24 = localTime23.getChronology();
        java.util.Locale locale25 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale locale26 = java.util.Locale.GERMANY;
        java.lang.String str27 = locale25.getDisplayScript(locale26);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket29 = new org.joda.time.format.DateTimeParserBucket((long) 1970, chronology24, locale25, (java.lang.Integer) 1);
        mutablePeriod12.setPeriod((org.joda.time.ReadableDuration) duration16, chronology24);
        mutablePeriod4.setPeriod(86399L, chronology24);
        org.joda.time.MutableDateTime mutableDateTime32 = new org.joda.time.MutableDateTime(0L, chronology24);
        org.joda.time.MutableDateTime.Property property33 = mutableDateTime32.era();
        org.junit.Assert.assertNotNull(weeks1);
        org.junit.Assert.assertNotNull(timeUnit2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(mutablePeriod4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(weeks9);
        org.junit.Assert.assertNotNull(timeUnit10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(mutablePeriod12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(property33);
    }

    @Test
    public void test1922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1922");
        java.util.stream.Stream<java.lang.Object> objStream0 = java.util.stream.Stream.empty();
        java.util.stream.Stream<java.lang.Object> objStream1 = objStream0.sequential();
        java.util.Iterator<java.lang.Object> objItor2 = objStream1.iterator();
        org.junit.Assert.assertNotNull(objStream0);
        org.junit.Assert.assertNotNull(objStream1);
        org.junit.Assert.assertNotNull(objItor2);
    }

    @Test
    public void test1923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1923");
        // The following exception was thrown during execution in test generation
        try {
            java.time.LocalTime localTime4 = java.time.LocalTime.of(24, 292269054, (int) (short) 0, 34595674);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for HourOfDay (valid values 0 - 23): 24");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1924");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.time.LocalTime localTime6 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime7 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime6);
        java.time.LocalTime localTime12 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime13 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime12);
        java.time.temporal.ChronoField chronoField14 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime16 = localTime12.with((java.time.temporal.TemporalField) chronoField14, (long) (short) 1);
        long long17 = localTime6.getLong((java.time.temporal.TemporalField) chronoField14);
        java.time.LocalTime localTime19 = localTime6.withSecond((int) (short) 1);
        java.lang.Object obj21 = properties1.put((java.lang.Object) localTime19, (java.lang.Object) "117");
        boolean boolean23 = properties1.containsValue((java.lang.Object) 6);
        java.lang.String str25 = properties1.getProperty("NanoOfDay");
        java.io.Reader reader26 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.load(reader26);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertTrue("'" + chronoField14 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField14.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 3601000000001L + "'", long17 == 3601000000001L);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertNull(obj21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(str25);
    }

    @Test
    public void test1925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1925");
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.parse("1");
        org.joda.time.Period period2 = org.joda.time.Period.ZERO;
        org.joda.time.Period period3 = period2.normalizedStandard();
        org.joda.time.Period period5 = period3.minusMinutes((int) ' ');
        org.joda.time.Period period7 = period5.minusMonths((int) (byte) 0);
        org.joda.time.LocalTime localTime8 = localTime1.minus((org.joda.time.ReadablePeriod) period7);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.weekyear();
        // The following exception was thrown during execution in test generation
        try {
            int int10 = localTime1.get(dateTimeFieldType9);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'weekyear' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime1);
        org.junit.Assert.assertNotNull(period2);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
    }

    @Test
    public void test1926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1926");
        org.joda.time.Period period0 = org.joda.time.Period.ZERO;
        org.joda.time.Period period1 = period0.normalizedStandard();
        org.joda.time.Period period3 = period0.plusHours(2);
        int int4 = period0.getDays();
        org.joda.time.Period period6 = period0.plusWeeks(366);
        org.joda.time.Minutes minutes7 = period0.toStandardMinutes();
        org.junit.Assert.assertNotNull(period0);
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(minutes7);
    }

    @Test
    public void test1927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1927");
        java.time.Period period3 = java.time.Period.of((int) (byte) 0, 52, 0);
        org.junit.Assert.assertNotNull(period3);
    }

    @Test
    public void test1928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1928");
        java.util.stream.IntStream intStream1 = java.util.stream.IntStream.of(1);
        org.junit.Assert.assertNotNull(intStream1);
    }

    @Test
    public void test1929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1929");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((long) 0, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) 3, chronology4);
        org.joda.time.DateTime.Property property6 = dateTime5.dayOfYear();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateMidnight dateMidnight8 = new org.joda.time.DateMidnight((java.lang.Object) dateTime5, chronology7);
        org.joda.time.DateTime dateTime9 = localTime2.toDateTime((org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateTime dateTime11 = dateTime9.minusMillis((int) (byte) 0);
        org.joda.time.DateTime dateTime13 = dateTime9.withMillis((long) 28);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime17 = dateTime13.withDate(0, 197, 34608308);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 197 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
    }

    @Test
    public void test1930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1930");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 3, chronology1);
        org.joda.time.DateTime.Property property3 = dateTime2.dayOfYear();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight((java.lang.Object) dateTime2, chronology4);
        org.joda.time.MutableDateTime mutableDateTime6 = dateTime2.toMutableDateTime();
        mutableDateTime6.addYears((int) (short) 100);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime6.dayOfWeek();
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime6.year();
        org.joda.time.MutableDateTime mutableDateTime11 = property10.roundFloor();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) 3, chronology13);
        org.joda.time.DateTime.Property property15 = dateTime14.dayOfYear();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight((java.lang.Object) dateTime14, chronology16);
        org.joda.time.MutableDateTime mutableDateTime18 = dateTime14.toMutableDateTime();
        mutableDateTime18.addYears((int) (short) 100);
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime18.millisOfDay();
        org.joda.time.PeriodType periodType22 = org.joda.time.PeriodType.years();
        org.joda.time.DurationFieldType durationFieldType23 = org.joda.time.DurationFieldType.halfdays();
        int int24 = periodType22.indexOf(durationFieldType23);
        mutableDateTime18.add(durationFieldType23, (int) 'a');
        mutableDateTime18.addWeekyears((int) (byte) 10);
        boolean boolean29 = mutableDateTime11.isBefore((org.joda.time.ReadableInstant) mutableDateTime18);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(mutableDateTime18);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(periodType22);
        org.junit.Assert.assertNotNull(durationFieldType23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
    }

    @Test
    public void test1931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1931");
        org.joda.time.TimeOfDay timeOfDay1 = org.joda.time.TimeOfDay.fromMillisOfDay((long) (short) 0);
        org.joda.time.TimeOfDay timeOfDay3 = org.joda.time.TimeOfDay.fromMillisOfDay((long) (short) 0);
        org.joda.time.Hours hours4 = org.joda.time.Hours.hoursBetween((org.joda.time.ReadablePartial) timeOfDay1, (org.joda.time.ReadablePartial) timeOfDay3);
        org.joda.time.DurationFieldType durationFieldType5 = org.joda.time.DurationFieldType.hours();
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay3.withFieldAdded(durationFieldType5, (int) (byte) 0);
        int int8 = timeOfDay3.getMillisOfSecond();
        org.joda.time.TimeOfDay timeOfDay10 = timeOfDay3.plusHours(9);
        org.joda.time.TimeOfDay.Property property11 = timeOfDay3.secondOfMinute();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) 3, chronology13);
        org.joda.time.DateTime.Property property15 = dateTime14.dayOfYear();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight((java.lang.Object) dateTime14, chronology16);
        org.joda.time.MutableDateTime mutableDateTime18 = dateTime14.toMutableDateTime();
        mutableDateTime18.addYears((int) (short) 100);
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime18.millisOfDay();
        org.joda.time.PeriodType periodType22 = org.joda.time.PeriodType.years();
        org.joda.time.DurationFieldType durationFieldType23 = org.joda.time.DurationFieldType.halfdays();
        int int24 = periodType22.indexOf(durationFieldType23);
        mutableDateTime18.add(durationFieldType23, (int) 'a');
        java.util.TimeZone timeZone28 = null;
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forTimeZone(timeZone28);
        org.joda.time.DateMidnight dateMidnight30 = new org.joda.time.DateMidnight((long) 1970, dateTimeZone29);
        mutableDateTime18.setTime((org.joda.time.ReadableInstant) dateMidnight30);
        int int32 = property11.compareTo((org.joda.time.ReadableInstant) dateMidnight30);
        java.lang.String str33 = property11.getName();
        java.util.Locale locale34 = null;
        java.lang.String str35 = property11.getAsShortText(locale34);
        java.lang.String str36 = property11.getName();
        int int37 = property11.getMaximumValue();
        org.junit.Assert.assertNotNull(timeOfDay1);
        org.junit.Assert.assertNotNull(timeOfDay3);
        org.junit.Assert.assertNotNull(hours4);
        org.junit.Assert.assertNotNull(durationFieldType5);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(mutableDateTime18);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(periodType22);
        org.junit.Assert.assertNotNull(durationFieldType23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "secondOfMinute" + "'", str33, "secondOfMinute");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "0" + "'", str35, "0");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "secondOfMinute" + "'", str36, "secondOfMinute");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 59 + "'", int37 == 59);
    }

    @Test
    public void test1932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1932");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 3, chronology1);
        org.joda.time.DateTime.Property property3 = dateTime2.dayOfYear();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight((java.lang.Object) dateTime2, chronology4);
        org.joda.time.MutableDateTime mutableDateTime6 = dateTime2.toMutableDateTime();
        mutableDateTime6.addYears((int) (short) 100);
        mutableDateTime6.setMillis((long) 21);
        org.joda.time.MutableDateTime.Property property11 = mutableDateTime6.weekOfWeekyear();
        mutableDateTime6.setSecondOfMinute(0);
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime6.centuryOfEra();
        org.joda.time.DurationField durationField15 = property14.getRangeDurationField();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNull(durationField15);
    }

    @Test
    public void test1933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1933");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 3, chronology1);
        org.joda.time.DateTime.Property property3 = dateTime2.dayOfYear();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight((java.lang.Object) dateTime2, chronology4);
        org.joda.time.MutableDateTime mutableDateTime6 = dateTime2.toMutableDateTime();
        mutableDateTime6.addYears((int) (short) 100);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime6.dayOfWeek();
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime6.year();
        java.util.TimeZone timeZone11 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        mutableDateTime6.setZone(dateTimeZone12);
        java.util.Locale locale15 = java.util.Locale.TAIWAN;
        java.lang.String str16 = dateTimeZone12.getShortName((long) 64, locale15);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) 3, chronology18);
        org.joda.time.DateTime.Property property20 = dateTime19.dayOfYear();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight((java.lang.Object) dateTime19, chronology21);
        org.joda.time.MutableDateTime mutableDateTime23 = dateTime19.toMutableDateTime();
        mutableDateTime23.addYears((int) (short) 100);
        org.joda.time.MutableDateTime.Property property26 = mutableDateTime23.dayOfWeek();
        org.joda.time.MutableDateTime.Property property27 = mutableDateTime23.year();
        java.util.TimeZone timeZone28 = null;
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forTimeZone(timeZone28);
        mutableDateTime23.setZone(dateTimeZone29);
        java.util.Locale locale32 = java.util.Locale.TAIWAN;
        java.lang.String str33 = dateTimeZone29.getShortName((long) 64, locale32);
        long long35 = dateTimeZone12.getMillisKeepLocal(dateTimeZone29, (long) 64);
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime(dateTimeZone12);
        org.joda.time.LocalDate localDate37 = new org.joda.time.LocalDate(dateTimeZone12);
        org.joda.time.LocalDate localDate39 = localDate37.minusYears(1);
        org.joda.time.DateTimeField[] dateTimeFieldArray40 = localDate39.getFields();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+00:00" + "'", str16, "+00:00");
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(mutableDateTime23);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "+00:00" + "'", str33, "+00:00");
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 64L + "'", long35 == 64L);
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertNotNull(dateTimeFieldArray40);
    }

    @Test
    public void test1934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1934");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(36484003L);
        org.joda.time.DateTime dateTime2 = localTime1.toDateTimeToday();
        org.joda.time.DateTime dateTime3 = dateTime2.toDateTime();
        org.joda.time.DateTime dateTime5 = dateTime3.minusMonths(0);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
    }

    @Test
    public void test1935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1935");
        java.util.stream.IntStream intStream1 = java.util.stream.IntStream.of(365);
        java.util.function.IntPredicate intPredicate2 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean3 = intStream1.noneMatch(intPredicate2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intStream1);
    }

    @Test
    public void test1936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1936");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardDays((long) 20);
        org.joda.time.Seconds seconds2 = duration1.toStandardSeconds();
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.Duration duration5 = new org.joda.time.Duration(readableInstant3, readableInstant4);
        org.joda.time.Seconds seconds6 = duration5.toStandardSeconds();
        int int7 = seconds6.getSeconds();
        org.joda.time.Seconds seconds9 = seconds6.dividedBy(28);
        boolean boolean10 = seconds2.isLessThan(seconds6);
        org.joda.time.Seconds seconds12 = seconds2.plus((int) ' ');
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(seconds2);
        org.junit.Assert.assertNotNull(seconds6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(seconds9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(seconds12);
    }

    @Test
    public void test1937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1937");
        org.joda.time.MutablePeriod mutablePeriod0 = new org.joda.time.MutablePeriod();
        mutablePeriod0.setPeriod(12, 9, 2022, 34, (int) (short) 0, (int) (short) 1, 4096, 1);
        org.joda.time.MutablePeriod mutablePeriod10 = mutablePeriod0.copy();
        org.joda.time.DurationFieldType durationFieldType11 = org.joda.time.DurationFieldType.hours();
        mutablePeriod0.add(durationFieldType11, (int) (short) 100);
        mutablePeriod0.setPeriod((long) 1);
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.Duration duration18 = new org.joda.time.Duration(readableInstant16, readableInstant17);
        org.joda.time.MutableInterval mutableInterval19 = new org.joda.time.MutableInterval((java.lang.Object) readableInstant17);
        org.joda.time.Hours hours20 = org.joda.time.Hours.EIGHT;
        org.joda.time.Hours hours22 = hours20.minus((-1));
        mutableInterval19.setPeriodBeforeEnd((org.joda.time.ReadablePeriod) hours20);
        mutablePeriod0.setPeriod((org.joda.time.ReadablePeriod) hours20);
        int int25 = mutablePeriod0.getYears();
        org.junit.Assert.assertNotNull(mutablePeriod10);
        org.junit.Assert.assertNotNull(durationFieldType11);
        org.junit.Assert.assertNotNull(hours20);
        org.junit.Assert.assertNotNull(hours22);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
    }

    @Test
    public void test1938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1938");
        java.nio.DoubleBuffer doubleBuffer1 = java.nio.DoubleBuffer.allocate(4);
        org.junit.Assert.assertNotNull(doubleBuffer1);
    }

    @Test
    public void test1939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1939");
        short[] shortArray2 = new short[] { (byte) 0, (short) 1 };
        java.nio.ShortBuffer shortBuffer3 = java.nio.ShortBuffer.wrap(shortArray2);
        short[] shortArray6 = new short[] { (short) 1, (byte) 10 };
        java.nio.ShortBuffer shortBuffer7 = java.nio.ShortBuffer.wrap(shortArray6);
        short[] shortArray10 = new short[] { (short) 1, (byte) 10 };
        java.nio.ShortBuffer shortBuffer11 = java.nio.ShortBuffer.wrap(shortArray10);
        java.nio.ShortBuffer shortBuffer12 = shortBuffer7.put(shortBuffer11);
        int int13 = shortBuffer12.limit();
        boolean boolean14 = shortBuffer12.isReadOnly();
        java.nio.ShortBuffer shortBuffer15 = shortBuffer3.put(shortBuffer12);
        java.nio.ShortBuffer shortBuffer16 = shortBuffer3.asReadOnlyBuffer();
        org.junit.Assert.assertNotNull(shortArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray2), "[0, 1]");
        org.junit.Assert.assertNotNull(shortBuffer3);
        org.junit.Assert.assertNotNull(shortArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray6), "[1, 10]");
        org.junit.Assert.assertNotNull(shortBuffer7);
        org.junit.Assert.assertNotNull(shortArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray10), "[1, 10]");
        org.junit.Assert.assertNotNull(shortBuffer11);
        org.junit.Assert.assertNotNull(shortBuffer12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(shortBuffer15);
        org.junit.Assert.assertNotNull(shortBuffer16);
    }

    @Test
    public void test1940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1940");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        int int1 = localDate0.getCenturyOfEra();
        org.joda.time.LocalDate.Property property2 = localDate0.dayOfWeek();
        org.joda.time.LocalDate.Property property3 = localDate0.centuryOfEra();
        org.joda.time.LocalDate localDate5 = property3.setCopy(3);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 20 + "'", int1 == 20);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDate5);
    }

    @Test
    public void test1941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1941");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.Interval interval1 = localDate0.toInterval();
        int int2 = localDate0.getDayOfYear();
        int int3 = localDate0.getDayOfWeek();
        org.joda.time.LocalDate localDate5 = localDate0.plusWeeks(365);
        org.junit.Assert.assertNotNull(interval1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 52 + "'", int2 == 52);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(localDate5);
    }

    @Test
    public void test1942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1942");
        java.time.Instant instant0 = java.time.Instant.now();
        java.nio.file.attribute.FileTime fileTime1 = java.nio.file.attribute.FileTime.from(instant0);
        org.joda.time.Period period2 = org.joda.time.Period.ZERO;
        org.joda.time.Period period3 = period2.normalizedStandard();
        org.joda.time.Period period5 = period2.plusHours(2);
        java.time.chrono.IsoEra isoEra6 = java.time.chrono.IsoEra.CE;
        boolean boolean7 = period5.equals((java.lang.Object) isoEra6);
        java.time.LocalTime localTime12 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime13 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime12);
        java.time.LocalTime localTime18 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime19 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime18);
        java.time.temporal.ChronoField chronoField20 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime22 = localTime18.with((java.time.temporal.TemporalField) chronoField20, (long) (short) 1);
        long long23 = localTime12.getLong((java.time.temporal.TemporalField) chronoField20);
        boolean boolean24 = isoEra6.isSupported((java.time.temporal.TemporalField) chronoField20);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery25 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period26 = isoEra6.query(periodTemporalQuery25);
        boolean boolean27 = period26.isNegative();
        java.time.Period period29 = period26.plusDays((long) ' ');
        java.time.temporal.ChronoField chronoField30 = java.time.temporal.ChronoField.SECOND_OF_DAY;
        boolean boolean31 = period26.equals((java.lang.Object) chronoField30);
        java.time.chrono.ChronoPeriod chronoPeriod32 = period26.negated();
        java.time.Instant instant33 = instant0.minus((java.time.temporal.TemporalAmount) chronoPeriod32);
        java.time.temporal.TemporalAdjuster temporalAdjuster34 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.time.Instant instant35 = instant0.with(temporalAdjuster34);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(instant0);
        org.junit.Assert.assertNotNull(fileTime1);
        org.junit.Assert.assertNotNull(period2);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertTrue("'" + isoEra6 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra6.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertTrue("'" + chronoField20 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField20.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 3601000000001L + "'", long23 == 3601000000001L);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(periodTemporalQuery25);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertTrue("'" + chronoField30 + "' != '" + java.time.temporal.ChronoField.SECOND_OF_DAY + "'", chronoField30.equals(java.time.temporal.ChronoField.SECOND_OF_DAY));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(chronoPeriod32);
        org.junit.Assert.assertNotNull(instant33);
    }

    @Test
    public void test1943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1943");
        org.joda.time.LocalTime localTime0 = org.joda.time.LocalTime.MIDNIGHT;
        org.junit.Assert.assertNotNull(localTime0);
    }

    @Test
    public void test1944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1944");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        org.joda.time.MutableDateTime.Property property1 = mutableDateTime0.era();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime0.setDayOfWeek(65);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 65 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property1);
    }

    @Test
    public void test1945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1945");
        // The following exception was thrown during execution in test generation
        try {
            java.net.InetAddress[] inetAddressArray1 = java.net.InetAddress.getAllByName("2022-02-21T09:36:20.133");
            org.junit.Assert.fail("Expected exception of type java.net.UnknownHostException; message: 2022-02-21T09:36:20.133: invalid IPv6 address");
        } catch (java.net.UnknownHostException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1946");
        java.time.OffsetDateTime offsetDateTime0 = java.time.OffsetDateTime.now();
        java.time.LocalDate localDate1 = offsetDateTime0.toLocalDate();
        java.time.OffsetDateTime offsetDateTime2 = java.time.OffsetDateTime.now();
        java.time.temporal.ChronoField chronoField3 = java.time.temporal.ChronoField.HOUR_OF_DAY;
        boolean boolean4 = offsetDateTime2.isSupported((java.time.temporal.TemporalField) chronoField3);
        boolean boolean5 = offsetDateTime0.isEqual(offsetDateTime2);
        java.lang.String str6 = offsetDateTime2.toString();
        java.time.OffsetDateTime offsetDateTime7 = java.time.OffsetDateTime.now();
        java.time.LocalDate localDate9 = java.time.LocalDate.ofEpochDay((long) ' ');
        int int10 = localDate9.getMonthValue();
        org.joda.time.Period period11 = org.joda.time.Period.ZERO;
        org.joda.time.Period period12 = period11.normalizedStandard();
        org.joda.time.Period period14 = period11.plusHours(2);
        java.time.chrono.IsoEra isoEra15 = java.time.chrono.IsoEra.CE;
        boolean boolean16 = period14.equals((java.lang.Object) isoEra15);
        java.time.LocalTime localTime21 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime22 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime21);
        java.time.LocalTime localTime27 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime28 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime27);
        java.time.temporal.ChronoField chronoField29 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime31 = localTime27.with((java.time.temporal.TemporalField) chronoField29, (long) (short) 1);
        long long32 = localTime21.getLong((java.time.temporal.TemporalField) chronoField29);
        boolean boolean33 = isoEra15.isSupported((java.time.temporal.TemporalField) chronoField29);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery34 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period35 = isoEra15.query(periodTemporalQuery34);
        boolean boolean36 = period35.isNegative();
        java.time.Period period38 = period35.plusDays((long) ' ');
        java.time.temporal.ChronoField chronoField39 = java.time.temporal.ChronoField.SECOND_OF_DAY;
        boolean boolean40 = period35.equals((java.lang.Object) chronoField39);
        boolean boolean41 = localDate9.isSupported((java.time.temporal.TemporalField) chronoField39);
        boolean boolean42 = offsetDateTime7.isSupported((java.time.temporal.TemporalField) chronoField39);
        boolean boolean43 = offsetDateTime2.isAfter(offsetDateTime7);
        java.time.OffsetDateTime offsetDateTime45 = offsetDateTime2.minusNanos((long) 34555048);
        // The following exception was thrown during execution in test generation
        try {
            java.time.OffsetDateTime offsetDateTime47 = offsetDateTime45.withDayOfMonth(335);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for DayOfMonth (valid values 1 - 28/31): 335");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(offsetDateTime0);
        org.junit.Assert.assertNotNull(localDate1);
        org.junit.Assert.assertNotNull(offsetDateTime2);
        org.junit.Assert.assertTrue("'" + chronoField3 + "' != '" + java.time.temporal.ChronoField.HOUR_OF_DAY + "'", chronoField3.equals(java.time.temporal.ChronoField.HOUR_OF_DAY));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "2022-02-21T09:37:01.398Z" + "'", str6, "2022-02-21T09:37:01.398Z");
        org.junit.Assert.assertNotNull(offsetDateTime7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertTrue("'" + isoEra15 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra15.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertNotNull(localTime27);
        org.junit.Assert.assertNotNull(localTime28);
        org.junit.Assert.assertTrue("'" + chronoField29 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField29.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime31);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 3601000000001L + "'", long32 == 3601000000001L);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(periodTemporalQuery34);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertTrue("'" + chronoField39 + "' != '" + java.time.temporal.ChronoField.SECOND_OF_DAY + "'", chronoField39.equals(java.time.temporal.ChronoField.SECOND_OF_DAY));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(offsetDateTime45);
    }

    @Test
    public void test1947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1947");
        java.util.GregorianCalendar gregorianCalendar5 = new java.util.GregorianCalendar(12, 4096, 7, (-1), (int) (short) 10);
        int int6 = gregorianCalendar5.getWeeksInWeekYear();
        java.lang.String str7 = gregorianCalendar5.getCalendarType();
        java.time.ZonedDateTime zonedDateTime8 = gregorianCalendar5.toZonedDateTime();
        java.util.GregorianCalendar gregorianCalendar14 = new java.util.GregorianCalendar(12, 4096, 7, (-1), (int) (short) 10);
        int int15 = gregorianCalendar14.getWeeksInWeekYear();
        java.lang.String str16 = gregorianCalendar14.getCalendarType();
        java.time.ZonedDateTime zonedDateTime17 = gregorianCalendar14.toZonedDateTime();
        int int18 = zonedDateTime8.compareTo((java.time.chrono.ChronoZonedDateTime<java.time.LocalDate>) zonedDateTime17);
        java.time.ZonedDateTime zonedDateTime20 = zonedDateTime8.plusDays((long) 2022);
        java.time.ZonedDateTime zonedDateTime22 = zonedDateTime8.withSecond(0);
        java.time.ZonedDateTime zonedDateTime24 = zonedDateTime22.withDayOfMonth(24);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 52 + "'", int6 == 52);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "gregory" + "'", str7, "gregory");
        org.junit.Assert.assertNotNull(zonedDateTime8);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 52 + "'", int15 == 52);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "gregory" + "'", str16, "gregory");
        org.junit.Assert.assertNotNull(zonedDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(zonedDateTime20);
        org.junit.Assert.assertNotNull(zonedDateTime22);
        org.junit.Assert.assertNotNull(zonedDateTime24);
    }

    @Test
    public void test1948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1948");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.now();
        java.time.LocalTime localTime1 = localDateTime0.toLocalTime();
        java.time.LocalDateTime localDateTime3 = localDateTime0.withDayOfMonth(10);
        java.time.OffsetTime offsetTime4 = java.time.OffsetTime.MAX;
        java.time.LocalTime localTime5 = offsetTime4.toLocalTime();
        java.time.OffsetTime offsetTime6 = java.time.OffsetTime.MAX;
        java.time.LocalTime localTime7 = offsetTime6.toLocalTime();
        java.lang.String str8 = offsetTime6.toString();
        java.time.Duration duration9 = java.time.Duration.ZERO;
        java.lang.String str10 = duration9.toString();
        java.time.OffsetTime offsetTime11 = offsetTime6.plus((java.time.temporal.TemporalAmount) duration9);
        java.time.OffsetTime offsetTime13 = offsetTime6.plusNanos((long) 0);
        java.time.LocalTime localTime18 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime19 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime18);
        java.time.temporal.ChronoField chronoField20 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime22 = localTime18.with((java.time.temporal.TemporalField) chronoField20, (long) (short) 1);
        java.util.Locale locale23 = java.util.Locale.GERMANY;
        java.lang.String str24 = chronoField20.getDisplayName(locale23);
        java.time.OffsetTime offsetTime26 = offsetTime13.with((java.time.temporal.TemporalField) chronoField20, (long) 28);
        long long27 = localTime5.getLong((java.time.temporal.TemporalField) chronoField20);
        java.time.temporal.TemporalUnit temporalUnit28 = chronoField20.getRangeUnit();
        java.time.temporal.ValueRange valueRange29 = localDateTime0.range((java.time.temporal.TemporalField) chronoField20);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localTime1);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(offsetTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(offsetTime6);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "23:59:59.999999999-18:00" + "'", str8, "23:59:59.999999999-18:00");
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "PT0S" + "'", str10, "PT0S");
        org.junit.Assert.assertNotNull(offsetTime11);
        org.junit.Assert.assertNotNull(offsetTime13);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertTrue("'" + chronoField20 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField20.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "NanoOfDay" + "'", str24, "NanoOfDay");
        org.junit.Assert.assertNotNull(offsetTime26);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 86399999999999L + "'", long27 == 86399999999999L);
        org.junit.Assert.assertTrue("'" + temporalUnit28 + "' != '" + java.time.temporal.ChronoUnit.DAYS + "'", temporalUnit28.equals(java.time.temporal.ChronoUnit.DAYS));
        org.junit.Assert.assertNotNull(valueRange29);
    }

    @Test
    public void test1949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1949");
        java.time.LocalDate localDate1 = java.time.LocalDate.ofEpochDay((long) ' ');
        java.time.OffsetTime offsetTime2 = java.time.OffsetTime.MAX;
        java.time.LocalTime localTime3 = offsetTime2.toLocalTime();
        java.lang.String str4 = offsetTime2.toString();
        java.time.Duration duration5 = java.time.Duration.ZERO;
        java.lang.String str6 = duration5.toString();
        java.time.OffsetTime offsetTime7 = offsetTime2.plus((java.time.temporal.TemporalAmount) duration5);
        java.time.LocalTime localTime8 = offsetTime2.toLocalTime();
        java.time.chrono.ChronoLocalDateTime<?> wildcardChronoLocalDateTime9 = localDate1.atTime(localTime8);
        java.time.LocalDate localDate11 = localDate1.plusMonths(0L);
        org.joda.time.Period period12 = org.joda.time.Period.ZERO;
        org.joda.time.Period period13 = period12.normalizedStandard();
        org.joda.time.Period period15 = period12.plusHours(2);
        java.time.chrono.IsoEra isoEra16 = java.time.chrono.IsoEra.CE;
        boolean boolean17 = period15.equals((java.lang.Object) isoEra16);
        java.time.LocalTime localTime22 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime23 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime22);
        java.time.LocalTime localTime28 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime29 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime28);
        java.time.temporal.ChronoField chronoField30 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime32 = localTime28.with((java.time.temporal.TemporalField) chronoField30, (long) (short) 1);
        long long33 = localTime22.getLong((java.time.temporal.TemporalField) chronoField30);
        boolean boolean34 = isoEra16.isSupported((java.time.temporal.TemporalField) chronoField30);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery35 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period36 = isoEra16.query(periodTemporalQuery35);
        boolean boolean37 = period36.isNegative();
        java.time.Period period39 = period36.plusDays((long) ' ');
        boolean boolean40 = period36.isNegative();
        java.time.Period period42 = period36.minusYears((long) 10);
        org.joda.time.Period period43 = org.joda.time.Period.ZERO;
        org.joda.time.Period period44 = period43.normalizedStandard();
        org.joda.time.Period period46 = period43.plusHours(2);
        java.time.chrono.IsoEra isoEra47 = java.time.chrono.IsoEra.CE;
        boolean boolean48 = period46.equals((java.lang.Object) isoEra47);
        java.time.LocalTime localTime53 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime54 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime53);
        java.time.LocalTime localTime59 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime60 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime59);
        java.time.temporal.ChronoField chronoField61 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime63 = localTime59.with((java.time.temporal.TemporalField) chronoField61, (long) (short) 1);
        long long64 = localTime53.getLong((java.time.temporal.TemporalField) chronoField61);
        boolean boolean65 = isoEra47.isSupported((java.time.temporal.TemporalField) chronoField61);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery66 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period67 = isoEra47.query(periodTemporalQuery66);
        java.time.chrono.ChronoPeriod chronoPeriod68 = period42.minus((java.time.temporal.TemporalAmount) period67);
        java.util.List<java.time.temporal.TemporalUnit> temporalUnitList69 = period67.getUnits();
        int int70 = period67.getMonths();
        java.time.chrono.ChronoPeriod chronoPeriod72 = period67.multipliedBy((int) '\uffff');
        java.time.LocalDate localDate73 = localDate1.minus((java.time.temporal.TemporalAmount) period67);
        java.time.LocalDate localDate75 = localDate73.minusMonths((long) 624);
        org.junit.Assert.assertNotNull(localDate1);
        org.junit.Assert.assertNotNull(offsetTime2);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "23:59:59.999999999-18:00" + "'", str4, "23:59:59.999999999-18:00");
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "PT0S" + "'", str6, "PT0S");
        org.junit.Assert.assertNotNull(offsetTime7);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(wildcardChronoLocalDateTime9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertTrue("'" + isoEra16 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra16.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertNotNull(localTime23);
        org.junit.Assert.assertNotNull(localTime28);
        org.junit.Assert.assertNotNull(localTime29);
        org.junit.Assert.assertTrue("'" + chronoField30 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField30.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime32);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 3601000000001L + "'", long33 == 3601000000001L);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(periodTemporalQuery35);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertTrue("'" + isoEra47 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra47.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(localTime53);
        org.junit.Assert.assertNotNull(localTime54);
        org.junit.Assert.assertNotNull(localTime59);
        org.junit.Assert.assertNotNull(localTime60);
        org.junit.Assert.assertTrue("'" + chronoField61 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField61.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime63);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 3601000000001L + "'", long64 == 3601000000001L);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(periodTemporalQuery66);
        org.junit.Assert.assertNotNull(period67);
        org.junit.Assert.assertNotNull(chronoPeriod68);
        org.junit.Assert.assertNotNull(temporalUnitList69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(chronoPeriod72);
        org.junit.Assert.assertNotNull(localDate73);
        org.junit.Assert.assertNotNull(localDate75);
    }

    @Test
    public void test1950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1950");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.Duration duration2 = new org.joda.time.Duration(readableInstant0, readableInstant1);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = duration2.toPeriodTo(readableInstant3, periodType4);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.Duration duration8 = new org.joda.time.Duration(readableInstant6, readableInstant7);
        long long9 = duration8.getMillis();
        boolean boolean10 = duration2.isShorterThan((org.joda.time.ReadableDuration) duration8);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) 3, chronology12);
        org.joda.time.DateTime.Property property14 = dateTime13.dayOfYear();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight((java.lang.Object) dateTime13, chronology15);
        org.joda.time.MutableDateTime mutableDateTime17 = dateTime13.toMutableDateTime();
        mutableDateTime17.addYears((int) (short) 100);
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime17.dayOfWeek();
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime17.year();
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime17.weekyear();
        boolean boolean23 = duration2.equals((java.lang.Object) mutableDateTime17);
        mutableDateTime17.addMonths((int) ' ');
        mutableDateTime17.add((long) (byte) 10);
        org.joda.time.Period period28 = org.joda.time.Period.ZERO;
        org.joda.time.Period period29 = period28.normalizedStandard();
        org.joda.time.Period period31 = period28.plusHours(2);
        java.time.chrono.IsoEra isoEra32 = java.time.chrono.IsoEra.CE;
        boolean boolean33 = period31.equals((java.lang.Object) isoEra32);
        int int34 = period31.getMinutes();
        mutableDateTime17.add((org.joda.time.ReadablePeriod) period31);
        java.util.TimeZone timeZone37 = null;
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forTimeZone(timeZone37);
        org.joda.time.DateMidnight dateMidnight39 = new org.joda.time.DateMidnight((long) 1970, dateTimeZone38);
        long long42 = dateTimeZone38.convertLocalToUTC((long) 3, false);
        long long45 = dateTimeZone38.convertLocalToUTC(0L, true);
        mutableDateTime17.setZoneRetainFields(dateTimeZone38);
        java.lang.String str47 = dateTimeZone38.toString();
        boolean boolean48 = dateTimeZone38.isFixed();
        java.lang.String str49 = dateTimeZone38.getID();
        org.joda.time.LocalTime localTime50 = new org.joda.time.LocalTime(dateTimeZone38);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertTrue("'" + isoEra32 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra32.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 3L + "'", long42 == 3L);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Etc/UTC" + "'", str47, "Etc/UTC");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "Etc/UTC" + "'", str49, "Etc/UTC");
    }

    @Test
    public void test1951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1951");
        java.nio.LongBuffer longBuffer1 = java.nio.LongBuffer.allocate((int) (short) 0);
        long[] longArray2 = longBuffer1.array();
        java.nio.LongBuffer longBuffer4 = java.nio.LongBuffer.allocate(32769);
        int int5 = longBuffer1.compareTo(longBuffer4);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.Buffer buffer6 = longBuffer1.reset();
            org.junit.Assert.fail("Expected exception of type java.nio.InvalidMarkException; message: null");
        } catch (java.nio.InvalidMarkException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(longBuffer1);
        org.junit.Assert.assertNotNull(longArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray2), "[]");
        org.junit.Assert.assertNotNull(longBuffer4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-32769) + "'", int5 == (-32769));
    }

    @Test
    public void test1952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1952");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Instant instant2 = org.joda.time.Instant.parse("Subject:\n", dateTimeFormatter1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1953");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 3, chronology1);
        org.joda.time.DateTime.Property property3 = dateTime2.dayOfYear();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight((java.lang.Object) dateTime2, chronology4);
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight5.minusMonths((-1));
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight5.withDayOfYear((int) ' ');
        org.joda.time.DateMidnight.Property property10 = dateMidnight9.monthOfYear();
        java.util.Locale locale12 = java.util.Locale.KOREA;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight13 = property10.setCopy("GMT+00:00", locale12);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"GMT+00:00\" for monthOfYear is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ko_KR");
    }

    @Test
    public void test1954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1954");
        java.time.LocalTime localTime4 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime5 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime4);
        java.time.temporal.ChronoField chronoField6 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime8 = localTime4.with((java.time.temporal.TemporalField) chronoField6, (long) (short) 1);
        java.time.Duration duration10 = java.time.Duration.ofMinutes((long) 3);
        java.time.LocalTime localTime11 = localTime4.minus((java.time.temporal.TemporalAmount) duration10);
        java.time.LocalTime localTime16 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime21 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime22 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime21);
        java.time.LocalTime localTime27 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime28 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime27);
        java.time.temporal.ChronoField chronoField29 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime31 = localTime27.with((java.time.temporal.TemporalField) chronoField29, (long) (short) 1);
        long long32 = localTime21.getLong((java.time.temporal.TemporalField) chronoField29);
        java.time.LocalTime localTime34 = localTime21.withSecond((int) (short) 1);
        java.time.temporal.ChronoField chronoField35 = java.time.temporal.ChronoField.SECOND_OF_DAY;
        java.time.temporal.ValueRange valueRange36 = localTime34.range((java.time.temporal.TemporalField) chronoField35);
        java.time.LocalTime localTime42 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime43 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime42);
        java.time.LocalTime localTime48 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime49 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime48);
        java.time.temporal.ChronoField chronoField50 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime52 = localTime48.with((java.time.temporal.TemporalField) chronoField50, (long) (short) 1);
        long long53 = localTime42.getLong((java.time.temporal.TemporalField) chronoField50);
        java.time.LocalTime localTime55 = localTime42.withSecond((int) (short) 1);
        java.time.temporal.ChronoField chronoField56 = java.time.temporal.ChronoField.SECOND_OF_DAY;
        java.time.temporal.ValueRange valueRange57 = localTime55.range((java.time.temporal.TemporalField) chronoField56);
        int int58 = valueRange36.checkValidIntValue((long) 2022, (java.time.temporal.TemporalField) chronoField56);
        java.time.temporal.ValueRange valueRange59 = localTime16.range((java.time.temporal.TemporalField) chronoField56);
        // The following exception was thrown during execution in test generation
        try {
            java.time.LocalTime localTime61 = localTime4.with((java.time.temporal.TemporalField) chronoField56, 364740218880L);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for SecondOfDay (valid values 0 - 86399): 364740218880");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertTrue("'" + chronoField6 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField6.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertNotNull(localTime27);
        org.junit.Assert.assertNotNull(localTime28);
        org.junit.Assert.assertTrue("'" + chronoField29 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField29.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime31);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 3601000000001L + "'", long32 == 3601000000001L);
        org.junit.Assert.assertNotNull(localTime34);
        org.junit.Assert.assertTrue("'" + chronoField35 + "' != '" + java.time.temporal.ChronoField.SECOND_OF_DAY + "'", chronoField35.equals(java.time.temporal.ChronoField.SECOND_OF_DAY));
        org.junit.Assert.assertNotNull(valueRange36);
        org.junit.Assert.assertNotNull(localTime42);
        org.junit.Assert.assertNotNull(localTime43);
        org.junit.Assert.assertNotNull(localTime48);
        org.junit.Assert.assertNotNull(localTime49);
        org.junit.Assert.assertTrue("'" + chronoField50 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField50.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime52);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 3601000000001L + "'", long53 == 3601000000001L);
        org.junit.Assert.assertNotNull(localTime55);
        org.junit.Assert.assertTrue("'" + chronoField56 + "' != '" + java.time.temporal.ChronoField.SECOND_OF_DAY + "'", chronoField56.equals(java.time.temporal.ChronoField.SECOND_OF_DAY));
        org.junit.Assert.assertNotNull(valueRange57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 2022 + "'", int58 == 2022);
        org.junit.Assert.assertNotNull(valueRange59);
    }

    @Test
    public void test1955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1955");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withYearOfCentury((int) 'a');
        int int4 = localDateTime3.getDayOfMonth();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime3.plusYears((int) (short) 100);
        int int7 = localDateTime3.getSecondOfMinute();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime(chronology8);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.withYearOfCentury((int) 'a');
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.plusSeconds(6);
        boolean boolean14 = localDateTime3.isEqual((org.joda.time.ReadablePartial) localDateTime11);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.Duration duration17 = new org.joda.time.Duration(readableInstant15, readableInstant16);
        org.joda.time.Seconds seconds18 = duration17.toStandardSeconds();
        int int19 = seconds18.getSeconds();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime3.plus((org.joda.time.ReadablePeriod) seconds18);
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.Duration duration23 = new org.joda.time.Duration(readableInstant21, readableInstant22);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime20.minus((org.joda.time.ReadableDuration) duration23);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 21 + "'", int4 == 21);
        org.junit.Assert.assertNotNull(localDateTime6);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(seconds18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime24);
    }

    @Test
    public void test1956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1956");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((long) 0, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) 3, chronology4);
        org.joda.time.DateTime.Property property6 = dateTime5.dayOfYear();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateMidnight dateMidnight8 = new org.joda.time.DateMidnight((java.lang.Object) dateTime5, chronology7);
        org.joda.time.DateTime dateTime9 = localTime2.toDateTime((org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateTime dateTime11 = dateTime9.minusMillis((int) (byte) 0);
        org.joda.time.DateTime dateTime13 = dateTime9.withYearOfCentury((int) (byte) 10);
        org.joda.time.DateTime.Property property14 = dateTime13.hourOfDay();
        org.joda.time.TimeOfDay timeOfDay16 = org.joda.time.TimeOfDay.fromMillisOfDay((long) (short) 0);
        org.joda.time.TimeOfDay timeOfDay18 = org.joda.time.TimeOfDay.fromMillisOfDay((long) (short) 0);
        org.joda.time.Hours hours19 = org.joda.time.Hours.hoursBetween((org.joda.time.ReadablePartial) timeOfDay16, (org.joda.time.ReadablePartial) timeOfDay18);
        org.joda.time.DurationFieldType durationFieldType20 = org.joda.time.DurationFieldType.hours();
        org.joda.time.TimeOfDay timeOfDay22 = timeOfDay18.withFieldAdded(durationFieldType20, (int) (byte) 0);
        int int23 = timeOfDay18.getMillisOfSecond();
        org.joda.time.TimeOfDay timeOfDay25 = timeOfDay18.plusHours(9);
        org.joda.time.TimeOfDay.Property property26 = timeOfDay18.secondOfMinute();
        java.time.ZoneOffset zoneOffset29 = java.time.ZoneOffset.ofHoursMinutes(1, 10);
        java.time.LocalDate localDate30 = java.time.LocalDate.now((java.time.ZoneId) zoneOffset29);
        boolean boolean31 = property26.equals((java.lang.Object) localDate30);
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = property26.getFieldType();
        org.joda.time.TimeOfDay timeOfDay33 = property26.withMinimumValue();
        org.joda.time.TimeOfDay timeOfDay35 = property26.addToCopy(59);
        java.util.Locale locale38 = new java.util.Locale("Subject:\n", "German");
        int int39 = property26.getMaximumTextLength(locale38);
        org.joda.time.tz.NameProvider nameProvider40 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.LocalTime localTime44 = new org.joda.time.LocalTime((long) 0, chronology43);
        org.joda.time.Chronology chronology45 = localTime44.getChronology();
        org.joda.time.DateTimeField dateTimeField46 = chronology45.weekyearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime47 = org.joda.time.MutableDateTime.now(chronology45);
        org.joda.time.DateTimeField dateTimeField48 = chronology45.monthOfYear();
        java.util.Locale locale49 = java.util.Locale.getDefault();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket51 = new org.joda.time.format.DateTimeParserBucket((long) 28, chronology45, locale49, (java.lang.Integer) 0);
        java.lang.String str54 = nameProvider40.getShortName(locale49, "22", "Chinese");
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.DateTime dateTime57 = new org.joda.time.DateTime((long) 3, chronology56);
        org.joda.time.DateTime.Property property58 = dateTime57.dayOfYear();
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.DateMidnight dateMidnight60 = new org.joda.time.DateMidnight((java.lang.Object) dateTime57, chronology59);
        org.joda.time.MutableDateTime mutableDateTime61 = dateTime57.toMutableDateTime();
        mutableDateTime61.addYears((int) (short) 100);
        org.joda.time.MutableDateTime.Property property64 = mutableDateTime61.dayOfWeek();
        org.joda.time.MutableDateTime.Property property65 = mutableDateTime61.year();
        java.util.TimeZone timeZone66 = null;
        org.joda.time.DateTimeZone dateTimeZone67 = org.joda.time.DateTimeZone.forTimeZone(timeZone66);
        mutableDateTime61.setZone(dateTimeZone67);
        java.util.Locale locale70 = java.util.Locale.TAIWAN;
        java.lang.String str71 = dateTimeZone67.getShortName((long) 64, locale70);
        java.lang.String str74 = nameProvider40.getName(locale70, "P1W", "Wochentag");
        java.time.format.DecimalStyle decimalStyle75 = java.time.format.DecimalStyle.of(locale70);
        java.lang.String str76 = locale38.getDisplayName(locale70);
        int int77 = property14.getMaximumTextLength(locale38);
        org.joda.time.DateTime dateTime78 = property14.withMaximumValue();
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(timeOfDay16);
        org.junit.Assert.assertNotNull(timeOfDay18);
        org.junit.Assert.assertNotNull(hours19);
        org.junit.Assert.assertNotNull(durationFieldType20);
        org.junit.Assert.assertNotNull(timeOfDay22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(timeOfDay25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(zoneOffset29);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType32);
        org.junit.Assert.assertNotNull(timeOfDay33);
        org.junit.Assert.assertNotNull(timeOfDay35);
        org.junit.Assert.assertEquals(locale38.toString(), "subject:\n_GERMAN");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2 + "'", int39 == 2);
        org.junit.Assert.assertNotNull(nameProvider40);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(mutableDateTime47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "en_US");
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNotNull(mutableDateTime61);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertNotNull(dateTimeZone67);
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "+00:00" + "'", str71, "+00:00");
        org.junit.Assert.assertNull(str74);
        org.junit.Assert.assertNotNull(decimalStyle75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "subject:\n (GERMAN)" + "'", str76, "subject:\n (GERMAN)");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 2 + "'", int77 == 2);
        org.junit.Assert.assertNotNull(dateTime78);
    }

    @Test
    public void test1957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1957");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 3, chronology1);
        org.joda.time.DateTime.Property property3 = dateTime2.dayOfYear();
        org.joda.time.Interval interval4 = property3.toInterval();
        org.joda.time.DateTimeField dateTimeField5 = property3.getField();
        java.util.Locale locale10 = new java.util.Locale("ParseCaseSensitive(false)(Value(Year,4,10,EXCEEDS_PAD)'-'Value(MonthOfYear,2)'-'Value(DayOfMonth,2))[Offset(+HH:MM:ss,'Z')]", "UNDERFLOW", "Years");
        java.lang.String str11 = dateTimeField5.getAsShortText((int) 'u', locale10);
        java.util.GregorianCalendar gregorianCalendar17 = new java.util.GregorianCalendar(12, 4096, 7, (-1), (int) (short) 10);
        int int18 = gregorianCalendar17.getWeeksInWeekYear();
        org.joda.time.YearMonthDay yearMonthDay19 = org.joda.time.YearMonthDay.fromCalendarFields((java.util.Calendar) gregorianCalendar17);
        org.joda.time.YearMonthDay yearMonthDay21 = yearMonthDay19.withYear(0);
        java.util.stream.IntStream intStream24 = java.util.stream.IntStream.rangeClosed(100, (int) '4');
        int[] intArray25 = intStream24.toArray();
        int int26 = dateTimeField5.getMinimumValue((org.joda.time.ReadablePartial) yearMonthDay21, intArray25);
        int int27 = yearMonthDay21.getYear();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertEquals(locale10.toString(), "parsecasesensitive(false)(value(year,4,10,exceeds_pad)'-'value(monthofyear,2)'-'value(dayofmonth,2))[offset(+hh:mm:ss,'z')]_UNDERFLOW_Years");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "117" + "'", str11, "117");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 52 + "'", int18 == 52);
        org.junit.Assert.assertNotNull(yearMonthDay19);
        org.junit.Assert.assertNotNull(yearMonthDay21);
        org.junit.Assert.assertNotNull(intStream24);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
    }

    @Test
    public void test1958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1958");
        java.util.Date date0 = new java.util.Date();
        date0.setYear(59);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.Duration duration5 = new org.joda.time.Duration(readableInstant3, readableInstant4);
        org.joda.time.Duration duration7 = duration5.withMillis((-1L));
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) 3, chronology9);
        org.joda.time.DateTime.Property property11 = dateTime10.dayOfYear();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight((java.lang.Object) dateTime10, chronology12);
        org.joda.time.DateMidnight dateMidnight15 = dateMidnight13.minusMonths((-1));
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight13.withDayOfYear((int) ' ');
        org.joda.time.PeriodType periodType18 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period19 = duration7.toPeriodFrom((org.joda.time.ReadableInstant) dateMidnight13, periodType18);
        org.joda.time.PeriodType periodType20 = period19.getPeriodType();
        org.joda.time.PeriodType periodType21 = periodType20.withMonthsRemoved();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod((java.lang.Object) 59, periodType21);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No period converter found for type: java.lang.Integer");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertEquals(date0.toString(), "Sat Feb 21 09:37:02 UTC 1959");
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(periodType20);
        org.junit.Assert.assertNotNull(periodType21);
    }

    @Test
    public void test1959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1959");
        org.joda.time.Weeks weeks0 = org.joda.time.Weeks.THREE;
        org.joda.time.Weeks weeks1 = org.joda.time.Weeks.ONE;
        java.util.concurrent.TimeUnit timeUnit2 = java.util.concurrent.TimeUnit.NANOSECONDS;
        boolean boolean3 = weeks1.equals((java.lang.Object) timeUnit2);
        org.joda.time.MutablePeriod mutablePeriod4 = weeks1.toMutablePeriod();
        boolean boolean5 = weeks0.isGreaterThan(weeks1);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.Duration duration8 = new org.joda.time.Duration(readableInstant6, readableInstant7);
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.PeriodType periodType10 = null;
        org.joda.time.Period period11 = duration8.toPeriodTo(readableInstant9, periodType10);
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.Duration duration14 = new org.joda.time.Duration(readableInstant12, readableInstant13);
        long long15 = duration14.getMillis();
        boolean boolean16 = duration8.isShorterThan((org.joda.time.ReadableDuration) duration14);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) 3, chronology18);
        org.joda.time.DateTime.Property property20 = dateTime19.dayOfYear();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight((java.lang.Object) dateTime19, chronology21);
        org.joda.time.MutableDateTime mutableDateTime23 = dateTime19.toMutableDateTime();
        mutableDateTime23.addYears((int) (short) 100);
        org.joda.time.MutableDateTime.Property property26 = mutableDateTime23.dayOfWeek();
        org.joda.time.MutableDateTime.Property property27 = mutableDateTime23.year();
        org.joda.time.MutableDateTime.Property property28 = mutableDateTime23.weekyear();
        boolean boolean29 = duration8.equals((java.lang.Object) mutableDateTime23);
        mutableDateTime23.addMonths((int) ' ');
        mutableDateTime23.add((long) (byte) 10);
        org.joda.time.Period period34 = org.joda.time.Period.ZERO;
        org.joda.time.Period period35 = period34.normalizedStandard();
        org.joda.time.Period period37 = period34.plusHours(2);
        java.time.chrono.IsoEra isoEra38 = java.time.chrono.IsoEra.CE;
        boolean boolean39 = period37.equals((java.lang.Object) isoEra38);
        int int40 = period37.getMinutes();
        mutableDateTime23.add((org.joda.time.ReadablePeriod) period37);
        java.util.TimeZone timeZone43 = null;
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forTimeZone(timeZone43);
        org.joda.time.DateMidnight dateMidnight45 = new org.joda.time.DateMidnight((long) 1970, dateTimeZone44);
        long long48 = dateTimeZone44.convertLocalToUTC((long) 3, false);
        long long51 = dateTimeZone44.convertLocalToUTC(0L, true);
        mutableDateTime23.setZoneRetainFields(dateTimeZone44);
        org.joda.time.Interval interval53 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) weeks0, (org.joda.time.ReadableInstant) mutableDateTime23);
        org.joda.time.Interval interval54 = interval53.toInterval();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval56 = interval53.withEndMillis((long) 'u');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(weeks0);
        org.junit.Assert.assertNotNull(weeks1);
        org.junit.Assert.assertNotNull(timeUnit2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(mutablePeriod4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(mutableDateTime23);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertTrue("'" + isoEra38 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra38.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 3L + "'", long48 == 3L);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 0L + "'", long51 == 0L);
        org.junit.Assert.assertNotNull(interval54);
    }

    @Test
    public void test1960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1960");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 3, chronology1);
        org.joda.time.DateTime.Property property3 = dateTime2.dayOfYear();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight((java.lang.Object) dateTime2, chronology4);
        org.joda.time.MutableDateTime mutableDateTime6 = dateTime2.toMutableDateTime();
        mutableDateTime6.addYears((int) (short) 100);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime6.dayOfWeek();
        int int10 = property9.get();
        org.joda.time.MutableDateTime mutableDateTime11 = property9.roundHalfCeiling();
        mutableDateTime11.setYear(366);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 3 + "'", int10 == 3);
        org.junit.Assert.assertNotNull(mutableDateTime11);
    }

    @Test
    public void test1961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1961");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((long) 0, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) 3, chronology4);
        org.joda.time.DateTime.Property property6 = dateTime5.dayOfYear();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateMidnight dateMidnight8 = new org.joda.time.DateMidnight((java.lang.Object) dateTime5, chronology7);
        org.joda.time.DateTime dateTime9 = localTime2.toDateTime((org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateTime dateTime11 = dateTime5.withYearOfCentury(3);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
    }

    @Test
    public void test1962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1962");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((long) 0, chronology2);
        org.joda.time.Chronology chronology4 = localTime3.getChronology();
        org.joda.time.DateTimeField dateTimeField5 = chronology4.weekyearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime6 = org.joda.time.MutableDateTime.now(chronology4);
        org.joda.time.DateTimeField dateTimeField7 = chronology4.monthOfYear();
        java.util.Locale locale8 = java.util.Locale.getDefault();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket10 = new org.joda.time.format.DateTimeParserBucket((long) 28, chronology4, locale8, (java.lang.Integer) 0);
        long long13 = dateTimeParserBucket10.computeMillis(true, "Years");
        long long15 = dateTimeParserBucket10.computeMillis(false);
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.Duration duration18 = new org.joda.time.Duration(readableInstant16, readableInstant17);
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.PeriodType periodType20 = null;
        org.joda.time.Period period21 = duration18.toPeriodTo(readableInstant19, periodType20);
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.Duration duration24 = new org.joda.time.Duration(readableInstant22, readableInstant23);
        long long25 = duration24.getMillis();
        boolean boolean26 = duration18.isShorterThan((org.joda.time.ReadableDuration) duration24);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((long) 3, chronology28);
        org.joda.time.DateTime.Property property30 = dateTime29.dayOfYear();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.DateMidnight dateMidnight32 = new org.joda.time.DateMidnight((java.lang.Object) dateTime29, chronology31);
        org.joda.time.MutableDateTime mutableDateTime33 = dateTime29.toMutableDateTime();
        mutableDateTime33.addYears((int) (short) 100);
        org.joda.time.MutableDateTime.Property property36 = mutableDateTime33.dayOfWeek();
        org.joda.time.MutableDateTime.Property property37 = mutableDateTime33.year();
        org.joda.time.MutableDateTime.Property property38 = mutableDateTime33.weekyear();
        boolean boolean39 = duration18.equals((java.lang.Object) mutableDateTime33);
        mutableDateTime33.addMonths((int) ' ');
        mutableDateTime33.add((long) (byte) 10);
        org.joda.time.Period period44 = org.joda.time.Period.ZERO;
        org.joda.time.Period period45 = period44.normalizedStandard();
        org.joda.time.Period period47 = period44.plusHours(2);
        java.time.chrono.IsoEra isoEra48 = java.time.chrono.IsoEra.CE;
        boolean boolean49 = period47.equals((java.lang.Object) isoEra48);
        int int50 = period47.getMinutes();
        mutableDateTime33.add((org.joda.time.ReadablePeriod) period47);
        java.util.TimeZone timeZone53 = null;
        org.joda.time.DateTimeZone dateTimeZone54 = org.joda.time.DateTimeZone.forTimeZone(timeZone53);
        org.joda.time.DateMidnight dateMidnight55 = new org.joda.time.DateMidnight((long) 1970, dateTimeZone54);
        long long58 = dateTimeZone54.convertLocalToUTC((long) 3, false);
        long long61 = dateTimeZone54.convertLocalToUTC(0L, true);
        mutableDateTime33.setZoneRetainFields(dateTimeZone54);
        java.lang.String str63 = dateTimeZone54.toString();
        org.joda.time.chrono.EthiopicChronology ethiopicChronology64 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone54);
        org.joda.time.DateTimeField dateTimeField65 = ethiopicChronology64.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone66 = ethiopicChronology64.getZone();
        org.joda.time.DateTimeField dateTimeField67 = ethiopicChronology64.era();
        org.joda.time.DateTimeField dateTimeField68 = ethiopicChronology64.weekOfWeekyear();
        dateTimeParserBucket10.saveField(dateTimeField68, 35);
        java.lang.Integer int71 = dateTimeParserBucket10.getOffsetInteger();
        org.joda.time.Chronology chronology72 = dateTimeParserBucket10.getChronology();
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "en_US");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 28L + "'", long13 == 28L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 28L + "'", long15 == 28L);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(mutableDateTime33);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertNotNull(period47);
        org.junit.Assert.assertTrue("'" + isoEra48 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra48.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone54);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 3L + "'", long58 == 3L);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 0L + "'", long61 == 0L);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "Etc/UTC" + "'", str63, "Etc/UTC");
        org.junit.Assert.assertNotNull(ethiopicChronology64);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertNotNull(dateTimeZone66);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertNull(int71);
        org.junit.Assert.assertNotNull(chronology72);
    }

    @Test
    public void test1963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1963");
        java.io.File file2 = java.io.File.createTempFile("PT3600S", "secondOfMinute");
        java.io.File file3 = file2.getCanonicalFile();
        boolean boolean6 = file2.setExecutable(false, false);
        org.junit.Assert.assertNotNull(file2);
        org.junit.Assert.assertEquals(file2.getParent(), "/tmp");
// flaky:         org.junit.Assert.assertEquals(file2.toString(), "/tmp/PT3600S219764739357448523secondOfMinute");
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "/tmp");
// flaky:         org.junit.Assert.assertEquals(file3.toString(), "/tmp/PT3600S219764739357448523secondOfMinute");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
    }

    @Test
    public void test1964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1964");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 3, chronology1);
        org.joda.time.DateTime.Property property3 = dateTime2.dayOfYear();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight((java.lang.Object) dateTime2, chronology4);
        org.joda.time.MutableDateTime mutableDateTime6 = dateTime2.toMutableDateTime();
        mutableDateTime6.addYears((int) (short) 100);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime6.dayOfWeek();
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime6.year();
        java.util.TimeZone timeZone11 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        mutableDateTime6.setZone(dateTimeZone12);
        java.util.Locale locale15 = java.util.Locale.TAIWAN;
        java.lang.String str16 = dateTimeZone12.getShortName((long) 64, locale15);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) 3, chronology18);
        org.joda.time.DateTime.Property property20 = dateTime19.dayOfYear();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight((java.lang.Object) dateTime19, chronology21);
        org.joda.time.MutableDateTime mutableDateTime23 = dateTime19.toMutableDateTime();
        mutableDateTime23.addYears((int) (short) 100);
        org.joda.time.MutableDateTime.Property property26 = mutableDateTime23.dayOfWeek();
        org.joda.time.MutableDateTime.Property property27 = mutableDateTime23.year();
        java.util.TimeZone timeZone28 = null;
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forTimeZone(timeZone28);
        mutableDateTime23.setZone(dateTimeZone29);
        java.util.Locale locale32 = java.util.Locale.TAIWAN;
        java.lang.String str33 = dateTimeZone29.getShortName((long) 64, locale32);
        long long35 = dateTimeZone12.getMillisKeepLocal(dateTimeZone29, (long) 64);
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime(dateTimeZone12);
        org.joda.time.LocalDate localDate37 = new org.joda.time.LocalDate(dateTimeZone12);
        org.joda.time.chrono.EthiopicChronology ethiopicChronology38 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone12);
        org.joda.time.DurationField durationField39 = ethiopicChronology38.weeks();
        org.joda.time.DateTimeField dateTimeField40 = ethiopicChronology38.minuteOfHour();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+00:00" + "'", str16, "+00:00");
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(mutableDateTime23);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "+00:00" + "'", str33, "+00:00");
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 64L + "'", long35 == 64L);
        org.junit.Assert.assertNotNull(ethiopicChronology38);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
    }

    @Test
    public void test1965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1965");
        org.joda.time.chrono.EthiopicChronology ethiopicChronology0 = org.joda.time.chrono.EthiopicChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = ethiopicChronology0.dayOfWeek();
        org.junit.Assert.assertNotNull(ethiopicChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
    }

    @Test
    public void test1966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1966");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.now();
        java.time.temporal.ChronoField chronoField1 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime3 = localDateTime0.with((java.time.temporal.TemporalField) chronoField1, (long) 10);
        java.time.LocalDateTime localDateTime5 = localDateTime0.minusMinutes((long) 12);
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.now();
        java.time.temporal.ChronoField chronoField7 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime9 = localDateTime6.with((java.time.temporal.TemporalField) chronoField7, (long) 10);
        java.time.Duration duration11 = java.time.Duration.ofSeconds((long) 0);
        java.time.temporal.Temporal temporal12 = localDateTime6.minus((java.time.temporal.TemporalAmount) duration11);
        boolean boolean13 = localDateTime0.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime6);
        java.util.Properties properties15 = null;
        java.util.Properties properties16 = new java.util.Properties(properties15);
        java.time.LocalTime localTime21 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime22 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime21);
        java.time.LocalTime localTime27 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime28 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime27);
        java.time.temporal.ChronoField chronoField29 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime31 = localTime27.with((java.time.temporal.TemporalField) chronoField29, (long) (short) 1);
        long long32 = localTime21.getLong((java.time.temporal.TemporalField) chronoField29);
        java.time.LocalTime localTime34 = localTime21.withSecond((int) (short) 1);
        java.lang.Object obj36 = properties16.put((java.lang.Object) localTime34, (java.lang.Object) "117");
        java.time.LocalDateTime localDateTime37 = java.time.LocalDateTime.MIN;
        java.time.Month month38 = java.time.Month.NOVEMBER;
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime39 = localDateTime37.with((java.time.temporal.TemporalAdjuster) month38);
        java.time.LocalDate localDate42 = java.time.LocalDate.ofEpochDay((long) ' ');
        int int43 = localDate42.getMonthValue();
        org.joda.time.Period period44 = org.joda.time.Period.ZERO;
        org.joda.time.Period period45 = period44.normalizedStandard();
        org.joda.time.Period period47 = period44.plusHours(2);
        java.time.chrono.IsoEra isoEra48 = java.time.chrono.IsoEra.CE;
        boolean boolean49 = period47.equals((java.lang.Object) isoEra48);
        java.time.LocalTime localTime54 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime55 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime54);
        java.time.LocalTime localTime60 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime61 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime60);
        java.time.temporal.ChronoField chronoField62 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime64 = localTime60.with((java.time.temporal.TemporalField) chronoField62, (long) (short) 1);
        long long65 = localTime54.getLong((java.time.temporal.TemporalField) chronoField62);
        boolean boolean66 = isoEra48.isSupported((java.time.temporal.TemporalField) chronoField62);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery67 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period68 = isoEra48.query(periodTemporalQuery67);
        boolean boolean69 = period68.isNegative();
        java.time.Period period71 = period68.plusDays((long) ' ');
        java.time.temporal.ChronoField chronoField72 = java.time.temporal.ChronoField.SECOND_OF_DAY;
        boolean boolean73 = period68.equals((java.lang.Object) chronoField72);
        boolean boolean74 = localDate42.isSupported((java.time.temporal.TemporalField) chronoField72);
        java.time.temporal.TemporalUnit temporalUnit75 = chronoField72.getRangeUnit();
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime76 = localDateChronoLocalDateTime39.plus(1L, temporalUnit75);
        java.time.LocalTime localTime77 = localTime34.truncatedTo(temporalUnit75);
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime78 = localDateTime0.plus((long) '.', temporalUnit75);
        java.time.format.DateTimeFormatter dateTimeFormatter79 = java.time.format.DateTimeFormatter.ISO_DATE;
        java.text.Format format80 = dateTimeFormatter79.toFormat();
        java.time.LocalDateTime localDateTime81 = java.time.LocalDateTime.now();
        java.time.LocalDateTime localDateTime83 = localDateTime81.minusYears((long) (byte) 10);
        int int84 = localDateTime81.getHour();
        java.lang.String str85 = dateTimeFormatter79.format((java.time.temporal.TemporalAccessor) localDateTime81);
        java.time.LocalDateTime localDateTime87 = localDateTime81.plusNanos((long) 64);
        boolean boolean88 = localDateTime0.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime87);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertTrue("'" + chronoField1 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField1.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertTrue("'" + chronoField7 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField7.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(temporal12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertNotNull(localTime27);
        org.junit.Assert.assertNotNull(localTime28);
        org.junit.Assert.assertTrue("'" + chronoField29 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField29.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime31);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 3601000000001L + "'", long32 == 3601000000001L);
        org.junit.Assert.assertNotNull(localTime34);
        org.junit.Assert.assertNull(obj36);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertTrue("'" + month38 + "' != '" + java.time.Month.NOVEMBER + "'", month38.equals(java.time.Month.NOVEMBER));
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime39);
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertNotNull(period47);
        org.junit.Assert.assertTrue("'" + isoEra48 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra48.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(localTime54);
        org.junit.Assert.assertNotNull(localTime55);
        org.junit.Assert.assertNotNull(localTime60);
        org.junit.Assert.assertNotNull(localTime61);
        org.junit.Assert.assertTrue("'" + chronoField62 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField62.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime64);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 3601000000001L + "'", long65 == 3601000000001L);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(periodTemporalQuery67);
        org.junit.Assert.assertNotNull(period68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(period71);
        org.junit.Assert.assertTrue("'" + chronoField72 + "' != '" + java.time.temporal.ChronoField.SECOND_OF_DAY + "'", chronoField72.equals(java.time.temporal.ChronoField.SECOND_OF_DAY));
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + temporalUnit75 + "' != '" + java.time.temporal.ChronoUnit.DAYS + "'", temporalUnit75.equals(java.time.temporal.ChronoUnit.DAYS));
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime76);
        org.junit.Assert.assertNotNull(localTime77);
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime78);
        org.junit.Assert.assertNotNull(dateTimeFormatter79);
        org.junit.Assert.assertNotNull(format80);
        org.junit.Assert.assertNotNull(localDateTime81);
        org.junit.Assert.assertNotNull(localDateTime83);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 9 + "'", int84 == 9);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "2022-02-21" + "'", str85, "2022-02-21");
        org.junit.Assert.assertNotNull(localDateTime87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
    }

    @Test
    public void test1967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1967");
        java.io.File file2 = java.io.File.createTempFile("PT3600S", "secondOfMinute");
        java.io.File file3 = file2.getCanonicalFile();
        java.io.File file4 = file3.getAbsoluteFile();
        java.lang.String str5 = file4.toString();
        org.junit.Assert.assertNotNull(file2);
        org.junit.Assert.assertEquals(file2.getParent(), "/tmp");
// flaky:         org.junit.Assert.assertEquals(file2.toString(), "/tmp/PT3600S8053104214781117605secondOfMinute");
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "/tmp");
// flaky:         org.junit.Assert.assertEquals(file3.toString(), "/tmp/PT3600S8053104214781117605secondOfMinute");
        org.junit.Assert.assertNotNull(file4);
        org.junit.Assert.assertEquals(file4.getParent(), "/tmp");
// flaky:         org.junit.Assert.assertEquals(file4.toString(), "/tmp/PT3600S8053104214781117605secondOfMinute");
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "/tmp/PT3600S8053104214781117605secondOfMinute" + "'", str5, "/tmp/PT3600S8053104214781117605secondOfMinute");
    }

    @Test
    public void test1968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1968");
        java.io.PrintStream printStream1 = new java.io.PrintStream("subject:\n (GERMAN)");
        printStream1.flush();
    }

    @Test
    public void test1969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1969");
        java.nio.charset.Charset charset0 = java.nio.charset.Charset.defaultCharset();
        java.nio.charset.CharsetDecoder charsetDecoder1 = charset0.newDecoder();
        float float2 = charsetDecoder1.maxCharsPerByte();
        float float3 = charsetDecoder1.averageCharsPerByte();
        java.nio.charset.CodingErrorAction codingErrorAction4 = charsetDecoder1.unmappableCharacterAction();
        float float5 = charsetDecoder1.averageCharsPerByte();
        float float6 = charsetDecoder1.maxCharsPerByte();
        org.junit.Assert.assertNotNull(charset0);
        org.junit.Assert.assertNotNull(charsetDecoder1);
        org.junit.Assert.assertTrue("'" + float2 + "' != '" + 1.0f + "'", float2 == 1.0f);
        org.junit.Assert.assertTrue("'" + float3 + "' != '" + 1.0f + "'", float3 == 1.0f);
        org.junit.Assert.assertNotNull(codingErrorAction4);
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + 1.0f + "'", float5 == 1.0f);
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + 1.0f + "'", float6 == 1.0f);
    }

    @Test
    public void test1970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1970");
        java.util.function.IntUnaryOperator intUnaryOperator0 = java.util.function.IntUnaryOperator.identity();
        java.util.stream.IntStream intStream3 = java.util.stream.IntStream.rangeClosed(100, (int) '4');
        java.util.stream.IntStream intStream4 = intStream3.sequential();
        java.util.function.IntUnaryOperator intUnaryOperator5 = java.util.function.IntUnaryOperator.identity();
        java.util.stream.IntStream intStream6 = intStream3.map(intUnaryOperator5);
        java.util.function.IntUnaryOperator intUnaryOperator7 = intUnaryOperator0.compose(intUnaryOperator5);
        int int9 = intUnaryOperator5.applyAsInt(5);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalTime localTime13 = new org.joda.time.LocalTime((long) 0, chronology12);
        org.joda.time.Chronology chronology14 = localTime13.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = chronology14.weekyearOfCentury();
        org.joda.time.DurationField durationField16 = chronology14.weekyears();
        org.joda.time.DurationField durationField17 = chronology14.seconds();
        org.joda.time.LocalTime localTime18 = org.joda.time.LocalTime.fromMillisOfDay((long) (byte) 0, chronology14);
        org.joda.time.Chronology chronology19 = localTime18.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval((java.lang.Object) int9, chronology19);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No interval converter found for type: java.lang.Integer");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intUnaryOperator0);
        org.junit.Assert.assertNotNull(intStream3);
        org.junit.Assert.assertNotNull(intStream4);
        org.junit.Assert.assertNotNull(intUnaryOperator5);
        org.junit.Assert.assertNotNull(intStream6);
        org.junit.Assert.assertNotNull(intUnaryOperator7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 5 + "'", int9 == 5);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertNotNull(chronology19);
    }

    @Test
    public void test1971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1971");
        java.time.OffsetDateTime offsetDateTime0 = java.time.OffsetDateTime.now();
        int int1 = offsetDateTime0.getDayOfMonth();
        java.time.OffsetDateTime offsetDateTime3 = offsetDateTime0.withMinute((int) (byte) 10);
        long long4 = offsetDateTime3.toEpochSecond();
        java.time.chrono.IsoEra isoEra5 = java.time.chrono.IsoEra.CE;
        int int6 = isoEra5.getValue();
        java.time.OffsetDateTime offsetDateTime7 = offsetDateTime3.with((java.time.temporal.TemporalAdjuster) isoEra5);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.LocalTime localTime10 = new org.joda.time.LocalTime((long) 0, chronology9);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) 3, chronology12);
        org.joda.time.DateTime.Property property14 = dateTime13.dayOfYear();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight((java.lang.Object) dateTime13, chronology15);
        org.joda.time.DateTime dateTime17 = localTime10.toDateTime((org.joda.time.ReadableInstant) dateTime13);
        boolean boolean18 = offsetDateTime7.equals((java.lang.Object) dateTime17);
        boolean boolean20 = dateTime17.isEqual((long) 2147483647);
        org.junit.Assert.assertNotNull(offsetDateTime0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 21 + "'", int1 == 21);
        org.junit.Assert.assertNotNull(offsetDateTime3);
// flaky:         org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1645434602L + "'", long4 == 1645434602L);
        org.junit.Assert.assertTrue("'" + isoEra5 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra5.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(offsetDateTime7);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test1972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1972");
        java.io.File file0 = null;
        java.io.File file2 = new java.io.File(file0, "1970-01-01T00:00:00.003Z");
        java.net.URL uRL3 = file2.toURL();
        boolean boolean4 = file2.canRead();
        java.nio.file.Path path5 = file2.toPath();
        java.nio.file.Path path6 = path5.toAbsolutePath();
        java.nio.file.WatchService watchService7 = null;
        java.nio.file.WatchEvent.Kind<?> wildcardKind8 = null;
        java.nio.file.WatchEvent.Kind[] kindArray10 = new java.nio.file.WatchEvent.Kind[1];
        @SuppressWarnings("unchecked")
        java.nio.file.WatchEvent.Kind<?>[] wildcardKindArray11 = (java.nio.file.WatchEvent.Kind<?>[]) kindArray10;
        wildcardKindArray11[0] = wildcardKind8;
        java.nio.file.WatchEvent.Modifier[] modifierArray14 = new java.nio.file.WatchEvent.Modifier[] {};
        // The following exception was thrown during execution in test generation
        try {
            java.nio.file.WatchKey watchKey15 = path5.register(watchService7, wildcardKindArray11, modifierArray14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull("file2.getParent() == null", file2.getParent());
        org.junit.Assert.assertEquals(file2.toString(), "1970-01-01T00:00:00.003Z");
        org.junit.Assert.assertNotNull(uRL3);
// flaky:         org.junit.Assert.assertEquals(uRL3.toString(), "file:/experiment/1970-01-01T00:00:00.003Z/");
// flaky:         org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(path5);
        org.junit.Assert.assertNotNull(path6);
        org.junit.Assert.assertNotNull(kindArray10);
        org.junit.Assert.assertNotNull(wildcardKindArray11);
        org.junit.Assert.assertNotNull(modifierArray14);
    }

    @Test
    public void test1973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1973");
        org.joda.time.YearMonthDay yearMonthDay0 = new org.joda.time.YearMonthDay();
        java.util.TimeZone timeZone3 = null;
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forTimeZone(timeZone3);
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight((long) 1970, dateTimeZone4);
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((long) 3600000, dateTimeZone4);
        org.joda.time.DateMidnight dateMidnight7 = yearMonthDay0.toDateMidnight(dateTimeZone4);
        org.joda.time.LocalDate localDate8 = yearMonthDay0.toLocalDate();
        org.joda.time.Chronology chronology9 = yearMonthDay0.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonthDay yearMonthDay11 = yearMonthDay0.withMonthOfYear(16);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 16 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(chronology9);
    }

    @Test
    public void test1974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1974");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((long) 0, chronology1);
        org.joda.time.LocalTime localTime4 = localTime2.minusMillis(2022);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.monthOfYear();
        boolean boolean6 = localTime4.isSupported(dateTimeFieldType5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.centuryOfEra();
        int int8 = localTime4.indexOf(dateTimeFieldType7);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.LocalTime localTime11 = new org.joda.time.LocalTime((long) 0, chronology10);
        org.joda.time.LocalTime localTime13 = localTime11.minusMillis(2022);
        org.joda.time.LocalTime localTime15 = localTime11.plusMillis((int) (byte) 0);
        org.joda.time.LocalTime localTime16 = localTime4.withFields((org.joda.time.ReadablePartial) localTime15);
        int int17 = localTime4.getMillisOfSecond();
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 978 + "'", int17 == 978);
    }

    @Test
    public void test1975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1975");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withYearOfCentury((int) 'a');
        int int4 = localDateTime3.getDayOfMonth();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime3.withMinuteOfHour((int) ' ');
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.weekyear();
        int int8 = localDateTime3.get(dateTimeFieldType7);
        org.joda.time.LocalDateTime.Property property9 = localDateTime3.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime3.withYearOfCentury(0);
        java.lang.String str12 = localDateTime11.toString();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 21 + "'", int4 == 21);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2097 + "'", int8 == 2097);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDateTime11);
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "2000-02-21T09:37:03.012" + "'", str12, "2000-02-21T09:37:03.012");
    }

    @Test
    public void test1976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1976");
        java.time.Instant instant0 = java.time.Instant.now();
        java.time.Instant instant1 = java.time.Instant.now();
        boolean boolean2 = instant0.isAfter(instant1);
        java.time.LocalDate localDate4 = java.time.LocalDate.ofEpochDay((long) ' ');
        int int5 = localDate4.getMonthValue();
        org.joda.time.Period period6 = org.joda.time.Period.ZERO;
        org.joda.time.Period period7 = period6.normalizedStandard();
        org.joda.time.Period period9 = period6.plusHours(2);
        java.time.chrono.IsoEra isoEra10 = java.time.chrono.IsoEra.CE;
        boolean boolean11 = period9.equals((java.lang.Object) isoEra10);
        java.time.LocalTime localTime16 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime17 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime16);
        java.time.LocalTime localTime22 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime23 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime22);
        java.time.temporal.ChronoField chronoField24 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime26 = localTime22.with((java.time.temporal.TemporalField) chronoField24, (long) (short) 1);
        long long27 = localTime16.getLong((java.time.temporal.TemporalField) chronoField24);
        boolean boolean28 = isoEra10.isSupported((java.time.temporal.TemporalField) chronoField24);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery29 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period30 = isoEra10.query(periodTemporalQuery29);
        boolean boolean31 = period30.isNegative();
        java.time.Period period33 = period30.plusDays((long) ' ');
        java.time.temporal.ChronoField chronoField34 = java.time.temporal.ChronoField.SECOND_OF_DAY;
        boolean boolean35 = period30.equals((java.lang.Object) chronoField34);
        boolean boolean36 = localDate4.isSupported((java.time.temporal.TemporalField) chronoField34);
        java.time.temporal.TemporalUnit temporalUnit37 = chronoField34.getRangeUnit();
        java.time.Instant instant38 = instant1.truncatedTo(temporalUnit37);
        java.time.ZoneOffset zoneOffset41 = java.time.ZoneOffset.ofHoursMinutes(1, 10);
        java.time.LocalDate localDate42 = java.time.LocalDate.now((java.time.ZoneId) zoneOffset41);
        java.time.ZonedDateTime zonedDateTime43 = java.time.ZonedDateTime.ofInstant(instant38, (java.time.ZoneId) zoneOffset41);
        java.time.Period period46 = java.time.Period.ofYears(28);
        java.time.Period period48 = java.time.Period.ofYears(28);
        java.time.Period period49 = period46.minus((java.time.temporal.TemporalAmount) period48);
        java.time.Instant instant50 = java.time.Instant.now();
        java.time.Instant instant51 = java.time.Instant.now();
        boolean boolean52 = instant50.isAfter(instant51);
        java.time.LocalDate localDate54 = java.time.LocalDate.ofEpochDay((long) ' ');
        int int55 = localDate54.getMonthValue();
        org.joda.time.Period period56 = org.joda.time.Period.ZERO;
        org.joda.time.Period period57 = period56.normalizedStandard();
        org.joda.time.Period period59 = period56.plusHours(2);
        java.time.chrono.IsoEra isoEra60 = java.time.chrono.IsoEra.CE;
        boolean boolean61 = period59.equals((java.lang.Object) isoEra60);
        java.time.LocalTime localTime66 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime67 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime66);
        java.time.LocalTime localTime72 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime73 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime72);
        java.time.temporal.ChronoField chronoField74 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime76 = localTime72.with((java.time.temporal.TemporalField) chronoField74, (long) (short) 1);
        long long77 = localTime66.getLong((java.time.temporal.TemporalField) chronoField74);
        boolean boolean78 = isoEra60.isSupported((java.time.temporal.TemporalField) chronoField74);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery79 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period80 = isoEra60.query(periodTemporalQuery79);
        boolean boolean81 = period80.isNegative();
        java.time.Period period83 = period80.plusDays((long) ' ');
        java.time.temporal.ChronoField chronoField84 = java.time.temporal.ChronoField.SECOND_OF_DAY;
        boolean boolean85 = period80.equals((java.lang.Object) chronoField84);
        boolean boolean86 = localDate54.isSupported((java.time.temporal.TemporalField) chronoField84);
        java.time.temporal.TemporalUnit temporalUnit87 = chronoField84.getRangeUnit();
        java.time.Instant instant88 = instant51.truncatedTo(temporalUnit87);
        long long89 = period46.get(temporalUnit87);
        java.time.ZonedDateTime zonedDateTime90 = zonedDateTime43.minus((long) 34482, temporalUnit87);
        java.time.chrono.Chronology chronology91 = zonedDateTime43.getChronology();
        org.junit.Assert.assertNotNull(instant0);
        org.junit.Assert.assertNotNull(instant1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2 + "'", int5 == 2);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertTrue("'" + isoEra10 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra10.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertNotNull(localTime23);
        org.junit.Assert.assertTrue("'" + chronoField24 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField24.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime26);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 3601000000001L + "'", long27 == 3601000000001L);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(periodTemporalQuery29);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertTrue("'" + chronoField34 + "' != '" + java.time.temporal.ChronoField.SECOND_OF_DAY + "'", chronoField34.equals(java.time.temporal.ChronoField.SECOND_OF_DAY));
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + temporalUnit37 + "' != '" + java.time.temporal.ChronoUnit.DAYS + "'", temporalUnit37.equals(java.time.temporal.ChronoUnit.DAYS));
        org.junit.Assert.assertNotNull(instant38);
        org.junit.Assert.assertNotNull(zoneOffset41);
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertNotNull(zonedDateTime43);
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertNotNull(period48);
        org.junit.Assert.assertNotNull(period49);
        org.junit.Assert.assertNotNull(instant50);
        org.junit.Assert.assertNotNull(instant51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(localDate54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 2 + "'", int55 == 2);
        org.junit.Assert.assertNotNull(period56);
        org.junit.Assert.assertNotNull(period57);
        org.junit.Assert.assertNotNull(period59);
        org.junit.Assert.assertTrue("'" + isoEra60 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra60.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(localTime66);
        org.junit.Assert.assertNotNull(localTime67);
        org.junit.Assert.assertNotNull(localTime72);
        org.junit.Assert.assertNotNull(localTime73);
        org.junit.Assert.assertTrue("'" + chronoField74 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField74.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime76);
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 3601000000001L + "'", long77 == 3601000000001L);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(periodTemporalQuery79);
        org.junit.Assert.assertNotNull(period80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(period83);
        org.junit.Assert.assertTrue("'" + chronoField84 + "' != '" + java.time.temporal.ChronoField.SECOND_OF_DAY + "'", chronoField84.equals(java.time.temporal.ChronoField.SECOND_OF_DAY));
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + temporalUnit87 + "' != '" + java.time.temporal.ChronoUnit.DAYS + "'", temporalUnit87.equals(java.time.temporal.ChronoUnit.DAYS));
        org.junit.Assert.assertNotNull(instant88);
        org.junit.Assert.assertTrue("'" + long89 + "' != '" + 0L + "'", long89 == 0L);
        org.junit.Assert.assertNotNull(zonedDateTime90);
        org.junit.Assert.assertNotNull(chronology91);
    }

    @Test
    public void test1977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1977");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.Duration duration2 = new org.joda.time.Duration(readableInstant0, readableInstant1);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = duration2.toPeriodTo(readableInstant3, periodType4);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.Duration duration8 = new org.joda.time.Duration(readableInstant6, readableInstant7);
        long long9 = duration8.getMillis();
        boolean boolean10 = duration2.isShorterThan((org.joda.time.ReadableDuration) duration8);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) 3, chronology12);
        org.joda.time.DateTime.Property property14 = dateTime13.dayOfYear();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight((java.lang.Object) dateTime13, chronology15);
        org.joda.time.MutableDateTime mutableDateTime17 = dateTime13.toMutableDateTime();
        mutableDateTime17.addYears((int) (short) 100);
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime17.dayOfWeek();
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime17.year();
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime17.weekyear();
        boolean boolean23 = duration2.equals((java.lang.Object) mutableDateTime17);
        mutableDateTime17.addMonths((int) ' ');
        mutableDateTime17.add((long) (byte) 10);
        org.joda.time.Period period28 = org.joda.time.Period.ZERO;
        org.joda.time.Period period29 = period28.normalizedStandard();
        org.joda.time.Period period31 = period28.plusHours(2);
        java.time.chrono.IsoEra isoEra32 = java.time.chrono.IsoEra.CE;
        boolean boolean33 = period31.equals((java.lang.Object) isoEra32);
        int int34 = period31.getMinutes();
        mutableDateTime17.add((org.joda.time.ReadablePeriod) period31);
        java.util.TimeZone timeZone37 = null;
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forTimeZone(timeZone37);
        org.joda.time.DateMidnight dateMidnight39 = new org.joda.time.DateMidnight((long) 1970, dateTimeZone38);
        long long42 = dateTimeZone38.convertLocalToUTC((long) 3, false);
        long long45 = dateTimeZone38.convertLocalToUTC(0L, true);
        mutableDateTime17.setZoneRetainFields(dateTimeZone38);
        java.lang.String str47 = dateTimeZone38.toString();
        boolean boolean48 = dateTimeZone38.isFixed();
        org.joda.time.TimeOfDay timeOfDay49 = new org.joda.time.TimeOfDay(dateTimeZone38);
        int int50 = timeOfDay49.getMillisOfSecond();
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertTrue("'" + isoEra32 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra32.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 3L + "'", long42 == 3L);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Etc/UTC" + "'", str47, "Etc/UTC");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int50 + "' != '" + 145 + "'", int50 == 145);
    }

    @Test
    public void test1978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1978");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(36484003L);
        org.joda.time.DateTime dateTime2 = localTime1.toDateTimeToday();
        org.joda.time.TimeOfDay timeOfDay3 = dateTime2.toTimeOfDay();
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(timeOfDay3);
    }

    @Test
    public void test1979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1979");
        java.net.URI uRI1 = new java.net.URI("hi!");
        java.lang.String str2 = uRI1.getFragment();
        java.net.URI uRI4 = new java.net.URI("hi!");
        java.lang.String str5 = uRI4.getRawAuthority();
        java.lang.String str6 = uRI4.toString();
        java.lang.String str7 = uRI4.getRawFragment();
        java.net.URI uRI8 = uRI1.relativize(uRI4);
        java.lang.String str9 = uRI4.getUserInfo();
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(uRI8);
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test1980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1980");
        java.util.GregorianCalendar gregorianCalendar5 = new java.util.GregorianCalendar(12, 4096, 7, (-1), (int) (short) 10);
        gregorianCalendar5.set((int) ':', 3, 256, 5, 17, 3600000);
        int int13 = gregorianCalendar5.getWeekYear();
        int int14 = gregorianCalendar5.getFirstDayOfWeek();
        org.joda.time.LocalDateTime localDateTime15 = org.joda.time.LocalDateTime.fromCalendarFields((java.util.Calendar) gregorianCalendar5);
        int int16 = gregorianCalendar5.getMinimalDaysInFirstWeek();
        boolean boolean18 = gregorianCalendar5.isSet(3);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 59 + "'", int13 == 59);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
    }

    @Test
    public void test1981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1981");
        java.time.OffsetDateTime offsetDateTime0 = java.time.OffsetDateTime.now();
        java.time.temporal.ChronoField chronoField1 = java.time.temporal.ChronoField.HOUR_OF_DAY;
        boolean boolean2 = offsetDateTime0.isSupported((java.time.temporal.TemporalField) chronoField1);
        java.time.Month month3 = offsetDateTime0.getMonth();
        java.time.Month month5 = month3.plus((long) 64);
        org.junit.Assert.assertNotNull(offsetDateTime0);
        org.junit.Assert.assertTrue("'" + chronoField1 + "' != '" + java.time.temporal.ChronoField.HOUR_OF_DAY + "'", chronoField1.equals(java.time.temporal.ChronoField.HOUR_OF_DAY));
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + month3 + "' != '" + java.time.Month.FEBRUARY + "'", month3.equals(java.time.Month.FEBRUARY));
        org.junit.Assert.assertTrue("'" + month5 + "' != '" + java.time.Month.JUNE + "'", month5.equals(java.time.Month.JUNE));
    }

    @Test
    public void test1982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1982");
        double[] doubleArray4 = new double[] { (byte) 0, 59, 83400000000000L, '4' };
        java.util.stream.DoubleStream doubleStream5 = java.util.stream.DoubleStream.of(doubleArray4);
        java.nio.DoubleBuffer doubleBuffer6 = java.nio.DoubleBuffer.wrap(doubleArray4);
        double[] doubleArray11 = new double[] { (byte) 0, 59, 83400000000000L, '4' };
        java.util.stream.DoubleStream doubleStream12 = java.util.stream.DoubleStream.of(doubleArray11);
        java.nio.DoubleBuffer doubleBuffer13 = java.nio.DoubleBuffer.wrap(doubleArray11);
        java.nio.DoubleBuffer doubleBuffer14 = doubleBuffer6.put(doubleBuffer13);
        java.lang.String str15 = doubleBuffer14.toString();
        double[] doubleArray20 = new double[] { (byte) 0, 59, 83400000000000L, '4' };
        java.util.stream.DoubleStream doubleStream21 = java.util.stream.DoubleStream.of(doubleArray20);
        java.nio.DoubleBuffer doubleBuffer22 = java.nio.DoubleBuffer.wrap(doubleArray20);
        double[] doubleArray27 = new double[] { (byte) 0, 59, 83400000000000L, '4' };
        java.util.stream.DoubleStream doubleStream28 = java.util.stream.DoubleStream.of(doubleArray27);
        java.nio.DoubleBuffer doubleBuffer29 = java.nio.DoubleBuffer.wrap(doubleArray27);
        java.nio.DoubleBuffer doubleBuffer30 = doubleBuffer22.put(doubleBuffer29);
        java.nio.DoubleBuffer doubleBuffer31 = doubleBuffer14.put(doubleBuffer30);
        double[] doubleArray36 = new double[] { (byte) 0, 59, 83400000000000L, '4' };
        java.util.stream.DoubleStream doubleStream37 = java.util.stream.DoubleStream.of(doubleArray36);
        java.nio.DoubleBuffer doubleBuffer38 = java.nio.DoubleBuffer.wrap(doubleArray36);
        double[] doubleArray43 = new double[] { (byte) 0, 59, 83400000000000L, '4' };
        java.util.stream.DoubleStream doubleStream44 = java.util.stream.DoubleStream.of(doubleArray43);
        java.nio.DoubleBuffer doubleBuffer45 = java.nio.DoubleBuffer.wrap(doubleArray43);
        java.nio.DoubleBuffer doubleBuffer46 = doubleBuffer38.put(doubleBuffer45);
        java.lang.String str47 = doubleBuffer46.toString();
        java.nio.DoubleBuffer doubleBuffer48 = doubleBuffer46.asReadOnlyBuffer();
        int int49 = doubleBuffer14.compareTo(doubleBuffer46);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[0.0, 59.0, 8.34E13, 52.0]");
        org.junit.Assert.assertNotNull(doubleStream5);
        org.junit.Assert.assertNotNull(doubleBuffer6);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0, 59.0, 8.34E13, 52.0]");
        org.junit.Assert.assertNotNull(doubleStream12);
        org.junit.Assert.assertNotNull(doubleBuffer13);
        org.junit.Assert.assertNotNull(doubleBuffer14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "java.nio.HeapDoubleBuffer[pos=4 lim=4 cap=4]" + "'", str15, "java.nio.HeapDoubleBuffer[pos=4 lim=4 cap=4]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[0.0, 59.0, 8.34E13, 52.0]");
        org.junit.Assert.assertNotNull(doubleStream21);
        org.junit.Assert.assertNotNull(doubleBuffer22);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[0.0, 59.0, 8.34E13, 52.0]");
        org.junit.Assert.assertNotNull(doubleStream28);
        org.junit.Assert.assertNotNull(doubleBuffer29);
        org.junit.Assert.assertNotNull(doubleBuffer30);
        org.junit.Assert.assertNotNull(doubleBuffer31);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[0.0, 59.0, 8.34E13, 52.0]");
        org.junit.Assert.assertNotNull(doubleStream37);
        org.junit.Assert.assertNotNull(doubleBuffer38);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[0.0, 59.0, 8.34E13, 52.0]");
        org.junit.Assert.assertNotNull(doubleStream44);
        org.junit.Assert.assertNotNull(doubleBuffer45);
        org.junit.Assert.assertNotNull(doubleBuffer46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "java.nio.HeapDoubleBuffer[pos=4 lim=4 cap=4]" + "'", str47, "java.nio.HeapDoubleBuffer[pos=4 lim=4 cap=4]");
        org.junit.Assert.assertNotNull(doubleBuffer48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
    }

    @Test
    public void test1983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1983");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((long) 0, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) 3, chronology4);
        org.joda.time.DateTime.Property property6 = dateTime5.dayOfYear();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateMidnight dateMidnight8 = new org.joda.time.DateMidnight((java.lang.Object) dateTime5, chronology7);
        org.joda.time.DateTime dateTime9 = localTime2.toDateTime((org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.LocalTime localTime11 = localTime2.plusHours(3);
        int int12 = localTime11.getMillisOfDay();
        org.joda.time.LocalTime.Property property13 = localTime11.millisOfSecond();
        org.joda.time.LocalTime localTime15 = localTime11.plusSeconds(19);
        int int16 = localTime11.getMillisOfDay();
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 10800000 + "'", int12 == 10800000);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10800000 + "'", int16 == 10800000);
    }

    @Test
    public void test1984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1984");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Locale locale3 = java.util.Locale.JAPAN;
        java.util.Locale[] localeArray4 = new java.util.Locale[] { locale3 };
        java.util.ArrayList<java.util.Locale> localeList5 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList5, localeArray4);
        java.util.List<java.util.Locale> localeList7 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.util.Locale>) localeList5);
        localeList7.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale> localeList11 = localeList7.subList(256, 4200);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: toIndex = 4200");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(localeArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(localeList7);
    }

    @Test
    public void test1985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1985");
        java.time.OffsetDateTime offsetDateTime0 = java.time.OffsetDateTime.now();
        java.time.LocalDate localDate1 = offsetDateTime0.toLocalDate();
        org.joda.time.Period period2 = org.joda.time.Period.ZERO;
        org.joda.time.Period period3 = period2.normalizedStandard();
        org.joda.time.Period period5 = period2.plusHours(2);
        java.time.chrono.IsoEra isoEra6 = java.time.chrono.IsoEra.CE;
        boolean boolean7 = period5.equals((java.lang.Object) isoEra6);
        java.time.LocalTime localTime12 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime13 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime12);
        java.time.LocalTime localTime18 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime19 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime18);
        java.time.temporal.ChronoField chronoField20 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime22 = localTime18.with((java.time.temporal.TemporalField) chronoField20, (long) (short) 1);
        long long23 = localTime12.getLong((java.time.temporal.TemporalField) chronoField20);
        boolean boolean24 = isoEra6.isSupported((java.time.temporal.TemporalField) chronoField20);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery25 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period26 = isoEra6.query(periodTemporalQuery25);
        boolean boolean27 = period26.isNegative();
        java.time.Period period29 = period26.plusDays((long) ' ');
        java.time.temporal.ChronoField chronoField30 = java.time.temporal.ChronoField.SECOND_OF_DAY;
        boolean boolean31 = period26.equals((java.lang.Object) chronoField30);
        java.time.chrono.ChronoPeriod chronoPeriod32 = period26.negated();
        java.time.OffsetDateTime offsetDateTime33 = java.time.OffsetDateTime.now();
        java.time.temporal.ChronoField chronoField34 = java.time.temporal.ChronoField.HOUR_OF_DAY;
        boolean boolean35 = offsetDateTime33.isSupported((java.time.temporal.TemporalField) chronoField34);
        java.time.Month month36 = offsetDateTime33.getMonth();
        java.time.temporal.Temporal temporal37 = period26.addTo((java.time.temporal.Temporal) offsetDateTime33);
        java.time.chrono.ChronoLocalDate chronoLocalDate38 = localDate1.minus((java.time.temporal.TemporalAmount) period26);
        java.time.chrono.Chronology chronology39 = localDate1.getChronology();
        int int40 = localDate1.getDayOfMonth();
        org.junit.Assert.assertNotNull(offsetDateTime0);
        org.junit.Assert.assertNotNull(localDate1);
        org.junit.Assert.assertNotNull(period2);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertTrue("'" + isoEra6 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra6.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertTrue("'" + chronoField20 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField20.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 3601000000001L + "'", long23 == 3601000000001L);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(periodTemporalQuery25);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertTrue("'" + chronoField30 + "' != '" + java.time.temporal.ChronoField.SECOND_OF_DAY + "'", chronoField30.equals(java.time.temporal.ChronoField.SECOND_OF_DAY));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(chronoPeriod32);
        org.junit.Assert.assertNotNull(offsetDateTime33);
        org.junit.Assert.assertTrue("'" + chronoField34 + "' != '" + java.time.temporal.ChronoField.HOUR_OF_DAY + "'", chronoField34.equals(java.time.temporal.ChronoField.HOUR_OF_DAY));
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + month36 + "' != '" + java.time.Month.FEBRUARY + "'", month36.equals(java.time.Month.FEBRUARY));
        org.junit.Assert.assertNotNull(temporal37);
        org.junit.Assert.assertNotNull(chronoLocalDate38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 21 + "'", int40 == 21);
    }

    @Test
    public void test1986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1986");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod1 = org.joda.time.MutablePeriod.parse("January");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"January\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1987");
        java.time.Clock clock0 = java.time.Clock.systemUTC();
        java.time.Duration duration2 = java.time.Duration.ofSeconds((long) 256);
        java.time.Clock clock3 = java.time.Clock.tick(clock0, duration2);
        java.time.Duration duration5 = java.time.Duration.ofMinutes((long) 3);
        java.time.Duration duration6 = duration5.abs();
        java.time.Clock clock7 = java.time.Clock.offset(clock0, duration5);
        java.time.LocalDate localDate8 = java.time.LocalDate.now(clock7);
        java.time.LocalDate localDate10 = java.time.LocalDate.ofEpochDay((long) ' ');
        java.time.OffsetTime offsetTime11 = java.time.OffsetTime.MAX;
        java.time.LocalTime localTime12 = offsetTime11.toLocalTime();
        java.lang.String str13 = offsetTime11.toString();
        java.time.Duration duration14 = java.time.Duration.ZERO;
        java.lang.String str15 = duration14.toString();
        java.time.OffsetTime offsetTime16 = offsetTime11.plus((java.time.temporal.TemporalAmount) duration14);
        java.time.LocalTime localTime17 = offsetTime11.toLocalTime();
        java.time.chrono.ChronoLocalDateTime<?> wildcardChronoLocalDateTime18 = localDate10.atTime(localTime17);
        java.time.LocalDate localDate20 = localDate10.minusWeeks((long) 2097);
        java.time.OffsetTime offsetTime21 = java.time.OffsetTime.MAX;
        java.time.LocalTime localTime22 = offsetTime21.toLocalTime();
        java.lang.String str23 = offsetTime21.toString();
        java.time.Duration duration24 = java.time.Duration.ZERO;
        java.lang.String str25 = duration24.toString();
        java.time.OffsetTime offsetTime26 = offsetTime21.plus((java.time.temporal.TemporalAmount) duration24);
        java.time.OffsetTime offsetTime28 = offsetTime21.plusNanos((long) 0);
        java.time.LocalTime localTime33 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime34 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime33);
        java.time.temporal.ChronoField chronoField35 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime37 = localTime33.with((java.time.temporal.TemporalField) chronoField35, (long) (short) 1);
        java.util.Locale locale38 = java.util.Locale.GERMANY;
        java.lang.String str39 = chronoField35.getDisplayName(locale38);
        java.time.OffsetTime offsetTime41 = offsetTime28.with((java.time.temporal.TemporalField) chronoField35, (long) 28);
        java.time.OffsetDateTime offsetDateTime42 = localDate20.atTime(offsetTime28);
        int int43 = localDate20.getYear();
        boolean boolean44 = localDate8.isBefore((java.time.chrono.ChronoLocalDate) localDate20);
        int int45 = localDate8.lengthOfMonth();
        java.time.OffsetDateTime offsetDateTime46 = java.time.OffsetDateTime.now();
        java.time.temporal.ChronoField chronoField47 = java.time.temporal.ChronoField.HOUR_OF_DAY;
        boolean boolean48 = offsetDateTime46.isSupported((java.time.temporal.TemporalField) chronoField47);
        java.time.OffsetDateTime offsetDateTime50 = offsetDateTime46.plusSeconds(180000L);
        // The following exception was thrown during execution in test generation
        try {
            java.time.LocalDate localDate51 = localDate8.with((java.time.temporal.TemporalAdjuster) offsetDateTime46);
            org.junit.Assert.fail("Expected exception of type java.time.temporal.UnsupportedTemporalTypeException; message: Unsupported field: NanoOfDay");
        } catch (java.time.temporal.UnsupportedTemporalTypeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(clock0);
        org.junit.Assert.assertNotNull(duration2);
        org.junit.Assert.assertNotNull(clock3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(clock7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(offsetTime11);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "23:59:59.999999999-18:00" + "'", str13, "23:59:59.999999999-18:00");
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "PT0S" + "'", str15, "PT0S");
        org.junit.Assert.assertNotNull(offsetTime16);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(wildcardChronoLocalDateTime18);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(offsetTime21);
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "23:59:59.999999999-18:00" + "'", str23, "23:59:59.999999999-18:00");
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "PT0S" + "'", str25, "PT0S");
        org.junit.Assert.assertNotNull(offsetTime26);
        org.junit.Assert.assertNotNull(offsetTime28);
        org.junit.Assert.assertNotNull(localTime33);
        org.junit.Assert.assertNotNull(localTime34);
        org.junit.Assert.assertTrue("'" + chronoField35 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField35.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime37);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "NanoOfDay" + "'", str39, "NanoOfDay");
        org.junit.Assert.assertNotNull(offsetTime41);
        org.junit.Assert.assertNotNull(offsetDateTime42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1929 + "'", int43 == 1929);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 28 + "'", int45 == 28);
        org.junit.Assert.assertNotNull(offsetDateTime46);
        org.junit.Assert.assertTrue("'" + chronoField47 + "' != '" + java.time.temporal.ChronoField.HOUR_OF_DAY + "'", chronoField47.equals(java.time.temporal.ChronoField.HOUR_OF_DAY));
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(offsetDateTime50);
    }

    @Test
    public void test1988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1988");
        java.time.temporal.ChronoField chronoField0 = java.time.temporal.ChronoField.OFFSET_SECONDS;
        int int2 = chronoField0.checkValidIntValue((long) 3601);
        org.junit.Assert.assertTrue("'" + chronoField0 + "' != '" + java.time.temporal.ChronoField.OFFSET_SECONDS + "'", chronoField0.equals(java.time.temporal.ChronoField.OFFSET_SECONDS));
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 3601 + "'", int2 == 3601);
    }

    @Test
    public void test1989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1989");
        org.joda.time.Period period0 = org.joda.time.Period.ZERO;
        org.joda.time.Period period1 = period0.normalizedStandard();
        org.joda.time.Period period3 = period0.plusHours(2);
        java.time.chrono.IsoEra isoEra4 = java.time.chrono.IsoEra.CE;
        boolean boolean5 = period3.equals((java.lang.Object) isoEra4);
        java.time.LocalTime localTime10 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime11 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime10);
        java.time.LocalTime localTime16 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime17 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime16);
        java.time.temporal.ChronoField chronoField18 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime20 = localTime16.with((java.time.temporal.TemporalField) chronoField18, (long) (short) 1);
        long long21 = localTime10.getLong((java.time.temporal.TemporalField) chronoField18);
        boolean boolean22 = isoEra4.isSupported((java.time.temporal.TemporalField) chronoField18);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery23 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period24 = isoEra4.query(periodTemporalQuery23);
        boolean boolean25 = period24.isNegative();
        java.time.Period period27 = period24.plusDays((long) ' ');
        java.time.temporal.ChronoField chronoField28 = java.time.temporal.ChronoField.SECOND_OF_DAY;
        boolean boolean29 = period24.equals((java.lang.Object) chronoField28);
        java.time.chrono.ChronoPeriod chronoPeriod30 = period24.negated();
        java.time.OffsetDateTime offsetDateTime31 = java.time.OffsetDateTime.now();
        java.time.temporal.ChronoField chronoField32 = java.time.temporal.ChronoField.HOUR_OF_DAY;
        boolean boolean33 = offsetDateTime31.isSupported((java.time.temporal.TemporalField) chronoField32);
        java.time.Month month34 = offsetDateTime31.getMonth();
        java.time.temporal.Temporal temporal35 = period24.addTo((java.time.temporal.Temporal) offsetDateTime31);
        java.time.OffsetDateTime offsetDateTime37 = offsetDateTime31.minusMinutes((long) '4');
        java.time.LocalDateTime localDateTime38 = java.time.LocalDateTime.now();
        java.time.temporal.ChronoField chronoField39 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime41 = localDateTime38.with((java.time.temporal.TemporalField) chronoField39, (long) 10);
        java.lang.String str42 = localDateTime38.toString();
        java.util.GregorianCalendar gregorianCalendar48 = new java.util.GregorianCalendar(12, 4096, 7, (-1), (int) (short) 10);
        int int49 = gregorianCalendar48.getWeeksInWeekYear();
        java.util.TimeZone timeZone50 = gregorianCalendar48.getTimeZone();
        java.util.Locale locale52 = new java.util.Locale("hi!");
        java.util.Calendar calendar53 = java.util.Calendar.getInstance(timeZone50, locale52);
        java.time.Instant instant54 = calendar53.toInstant();
        java.time.chrono.IsoEra isoEra55 = java.time.chrono.IsoEra.CE;
        java.time.format.DateTimeFormatter dateTimeFormatter56 = java.time.format.DateTimeFormatter.ISO_DATE;
        java.lang.String str57 = dateTimeFormatter56.toString();
        java.time.LocalDateTime localDateTime58 = java.time.LocalDateTime.now();
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery59 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period60 = localDateTime58.query(periodTemporalQuery59);
        java.text.Format format61 = dateTimeFormatter56.toFormat(periodTemporalQuery59);
        java.time.Period period62 = isoEra55.query(periodTemporalQuery59);
        java.time.Period period63 = instant54.query(periodTemporalQuery59);
        java.time.Period period64 = localDateTime38.query(periodTemporalQuery59);
        java.time.Period period65 = offsetDateTime37.query(periodTemporalQuery59);
        org.junit.Assert.assertNotNull(period0);
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertTrue("'" + isoEra4 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra4.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertTrue("'" + chronoField18 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField18.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 3601000000001L + "'", long21 == 3601000000001L);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(periodTemporalQuery23);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertTrue("'" + chronoField28 + "' != '" + java.time.temporal.ChronoField.SECOND_OF_DAY + "'", chronoField28.equals(java.time.temporal.ChronoField.SECOND_OF_DAY));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(chronoPeriod30);
        org.junit.Assert.assertNotNull(offsetDateTime31);
        org.junit.Assert.assertTrue("'" + chronoField32 + "' != '" + java.time.temporal.ChronoField.HOUR_OF_DAY + "'", chronoField32.equals(java.time.temporal.ChronoField.HOUR_OF_DAY));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + month34 + "' != '" + java.time.Month.FEBRUARY + "'", month34.equals(java.time.Month.FEBRUARY));
        org.junit.Assert.assertNotNull(temporal35);
        org.junit.Assert.assertNotNull(offsetDateTime37);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertTrue("'" + chronoField39 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField39.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime41);
// flaky:         org.junit.Assert.assertEquals("'" + str42 + "' != '" + "2022-02-21T09:37:16.446" + "'", str42, "2022-02-21T09:37:16.446");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 52 + "'", int49 == 52);
        org.junit.Assert.assertNotNull(timeZone50);
        org.junit.Assert.assertEquals(timeZone50.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertEquals(locale52.toString(), "hi!");
        org.junit.Assert.assertNotNull(calendar53);
// flaky:         org.junit.Assert.assertEquals(calendar53.toString(), "java.util.GregorianCalendar[time=1645436236446,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=37,SECOND=16,MILLISECOND=446,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(instant54);
        org.junit.Assert.assertTrue("'" + isoEra55 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra55.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertNotNull(dateTimeFormatter56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "ParseCaseSensitive(false)(Value(Year,4,10,EXCEEDS_PAD)'-'Value(MonthOfYear,2)'-'Value(DayOfMonth,2))[Offset(+HH:MM:ss,'Z')]" + "'", str57, "ParseCaseSensitive(false)(Value(Year,4,10,EXCEEDS_PAD)'-'Value(MonthOfYear,2)'-'Value(DayOfMonth,2))[Offset(+HH:MM:ss,'Z')]");
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(periodTemporalQuery59);
        org.junit.Assert.assertNotNull(period60);
        org.junit.Assert.assertNotNull(format61);
        org.junit.Assert.assertNotNull(period62);
        org.junit.Assert.assertNotNull(period63);
        org.junit.Assert.assertNotNull(period64);
        org.junit.Assert.assertNotNull(period65);
    }

    @Test
    public void test1990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1990");
        java.util.stream.IntStream intStream1 = java.util.stream.IntStream.of(365);
        java.util.IntSummaryStatistics intSummaryStatistics2 = intStream1.summaryStatistics();
        int int3 = intSummaryStatistics2.getMax();
        org.junit.Assert.assertNotNull(intStream1);
        org.junit.Assert.assertNotNull(intSummaryStatistics2);
        org.junit.Assert.assertEquals(intSummaryStatistics2.toString(), "IntSummaryStatistics{count=1, sum=365, min=365, average=365.000000, max=365}");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 365 + "'", int3 == 365);
    }

    @Test
    public void test1991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1991");
        java.time.LocalTime localTime4 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.OffsetTime offsetTime5 = java.time.OffsetTime.now();
        java.time.temporal.TemporalUnit temporalUnit6 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long7 = localTime4.until((java.time.temporal.Temporal) offsetTime5, temporalUnit6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(offsetTime5);
    }

    @Test
    public void test1992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1992");
        int int0 = java.util.Calendar.SHORT_FORMAT;
        org.junit.Assert.assertTrue("'" + int0 + "' != '" + 1 + "'", int0 == 1);
    }

    @Test
    public void test1993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1993");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withYearOfCentury((int) 'a');
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.plusSeconds(6);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.Duration duration8 = new org.joda.time.Duration(readableInstant6, readableInstant7);
        long long9 = duration8.getMillis();
        org.joda.time.Duration duration11 = duration8.plus((long) (byte) 1);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime3.minus((org.joda.time.ReadableDuration) duration11);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.withWeekOfWeekyear((int) '#');
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.withCenturyOfEra(10);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime18 = localDateTime14.withWeekOfWeekyear(0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
    }

    @Test
    public void test1994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1994");
        org.joda.time.Period period0 = org.joda.time.Period.ZERO;
        org.joda.time.Period period1 = period0.normalizedStandard();
        org.joda.time.Period period3 = period0.plusHours(2);
        java.time.chrono.IsoEra isoEra4 = java.time.chrono.IsoEra.CE;
        boolean boolean5 = period3.equals((java.lang.Object) isoEra4);
        java.time.LocalTime localTime10 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime11 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime10);
        java.time.LocalTime localTime16 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime17 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime16);
        java.time.temporal.ChronoField chronoField18 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime20 = localTime16.with((java.time.temporal.TemporalField) chronoField18, (long) (short) 1);
        long long21 = localTime10.getLong((java.time.temporal.TemporalField) chronoField18);
        boolean boolean22 = isoEra4.isSupported((java.time.temporal.TemporalField) chronoField18);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery23 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period24 = isoEra4.query(periodTemporalQuery23);
        java.lang.String str25 = period24.toString();
        org.junit.Assert.assertNotNull(period0);
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertTrue("'" + isoEra4 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra4.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertTrue("'" + chronoField18 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField18.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 3601000000001L + "'", long21 == 3601000000001L);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(periodTemporalQuery23);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "P0D" + "'", str25, "P0D");
    }

    @Test
    public void test1995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1995");
        java.nio.charset.Charset charset0 = java.nio.charset.Charset.defaultCharset();
        java.nio.charset.CharsetDecoder charsetDecoder1 = charset0.newDecoder();
        java.nio.charset.Charset charset2 = java.nio.charset.Charset.defaultCharset();
        boolean boolean3 = charset0.contains(charset2);
        java.nio.charset.CharsetEncoder charsetEncoder4 = charset0.newEncoder();
        byte[] byteArray5 = charsetEncoder4.replacement();
        java.nio.charset.Charset charset6 = java.nio.charset.Charset.defaultCharset();
        java.nio.charset.CharsetDecoder charsetDecoder7 = charset6.newDecoder();
        float float8 = charsetDecoder7.maxCharsPerByte();
        float float9 = charsetDecoder7.averageCharsPerByte();
        java.nio.charset.CodingErrorAction codingErrorAction10 = charsetDecoder7.unmappableCharacterAction();
        java.nio.charset.CharsetEncoder charsetEncoder11 = charsetEncoder4.onUnmappableCharacter(codingErrorAction10);
        java.nio.charset.Charset charset12 = java.nio.charset.Charset.defaultCharset();
        java.nio.charset.CharsetDecoder charsetDecoder13 = charset12.newDecoder();
        java.nio.charset.Charset charset14 = java.nio.charset.Charset.defaultCharset();
        boolean boolean15 = charset12.contains(charset14);
        java.nio.charset.CharsetEncoder charsetEncoder16 = charset12.newEncoder();
        byte[] byteArray17 = charsetEncoder16.replacement();
        java.nio.charset.CharsetEncoder charsetEncoder18 = charsetEncoder4.replaceWith(byteArray17);
        java.nio.charset.CodingErrorAction codingErrorAction19 = charsetEncoder18.unmappableCharacterAction();
        org.junit.Assert.assertNotNull(charset0);
        org.junit.Assert.assertNotNull(charsetDecoder1);
        org.junit.Assert.assertNotNull(charset2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(charsetEncoder4);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[63]");
        org.junit.Assert.assertNotNull(charset6);
        org.junit.Assert.assertNotNull(charsetDecoder7);
        org.junit.Assert.assertTrue("'" + float8 + "' != '" + 1.0f + "'", float8 == 1.0f);
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + 1.0f + "'", float9 == 1.0f);
        org.junit.Assert.assertNotNull(codingErrorAction10);
        org.junit.Assert.assertNotNull(charsetEncoder11);
        org.junit.Assert.assertNotNull(charset12);
        org.junit.Assert.assertNotNull(charsetDecoder13);
        org.junit.Assert.assertNotNull(charset14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(charsetEncoder16);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[63]");
        org.junit.Assert.assertNotNull(charsetEncoder18);
        org.junit.Assert.assertNotNull(codingErrorAction19);
    }

    @Test
    public void test1996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1996");
        java.time.Clock clock0 = java.time.Clock.systemUTC();
        java.time.Duration duration2 = java.time.Duration.ofSeconds((long) 256);
        java.time.Clock clock3 = java.time.Clock.tick(clock0, duration2);
        java.time.OffsetTime offsetTime4 = java.time.OffsetTime.now(clock3);
        java.time.LocalTime localTime5 = java.time.LocalTime.now(clock3);
        java.time.temporal.TemporalUnit temporalUnit7 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.time.LocalTime localTime8 = localTime5.plus((long) 11, temporalUnit7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(clock0);
        org.junit.Assert.assertNotNull(duration2);
        org.junit.Assert.assertNotNull(clock3);
        org.junit.Assert.assertNotNull(offsetTime4);
        org.junit.Assert.assertNotNull(localTime5);
    }

    @Test
    public void test1997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1997");
        org.joda.time.Weeks weeks0 = org.joda.time.Weeks.THREE;
        org.joda.time.Weeks weeks1 = org.joda.time.Weeks.ONE;
        java.util.concurrent.TimeUnit timeUnit2 = java.util.concurrent.TimeUnit.NANOSECONDS;
        boolean boolean3 = weeks1.equals((java.lang.Object) timeUnit2);
        org.joda.time.MutablePeriod mutablePeriod4 = weeks1.toMutablePeriod();
        boolean boolean5 = weeks0.isGreaterThan(weeks1);
        org.joda.time.Weeks weeks6 = org.joda.time.Weeks.ONE;
        java.util.concurrent.TimeUnit timeUnit7 = java.util.concurrent.TimeUnit.NANOSECONDS;
        boolean boolean8 = weeks6.equals((java.lang.Object) timeUnit7);
        org.joda.time.Weeks weeks9 = weeks6.negated();
        org.joda.time.Weeks weeks10 = org.joda.time.Weeks.ONE;
        java.util.concurrent.TimeUnit timeUnit11 = java.util.concurrent.TimeUnit.NANOSECONDS;
        boolean boolean12 = weeks10.equals((java.lang.Object) timeUnit11);
        org.joda.time.Weeks weeks13 = weeks10.negated();
        org.joda.time.Weeks weeks14 = weeks9.minus(weeks13);
        org.joda.time.Weeks weeks15 = weeks1.plus(weeks13);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.LocalTime localTime21 = new org.joda.time.LocalTime((long) 0, chronology20);
        org.joda.time.Chronology chronology22 = localTime21.getChronology();
        org.joda.time.DateTimeField dateTimeField23 = chronology22.weekyearOfCentury();
        org.joda.time.DurationField durationField24 = chronology22.weekyears();
        org.joda.time.TimeOfDay timeOfDay25 = new org.joda.time.TimeOfDay(8, 20, (int) '+', chronology22);
        org.joda.time.TimeOfDay timeOfDay27 = timeOfDay25.minusHours(6);
        org.joda.time.Weeks weeks29 = org.joda.time.Weeks.weeks(28);
        org.joda.time.TimeOfDay timeOfDay30 = timeOfDay25.plus((org.joda.time.ReadablePeriod) weeks29);
        org.joda.time.Weeks weeks31 = weeks15.plus(weeks29);
        org.junit.Assert.assertNotNull(weeks0);
        org.junit.Assert.assertNotNull(weeks1);
        org.junit.Assert.assertNotNull(timeUnit2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(mutablePeriod4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(weeks6);
        org.junit.Assert.assertNotNull(timeUnit7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(weeks9);
        org.junit.Assert.assertNotNull(weeks10);
        org.junit.Assert.assertNotNull(timeUnit11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(weeks13);
        org.junit.Assert.assertNotNull(weeks14);
        org.junit.Assert.assertNotNull(weeks15);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(timeOfDay27);
        org.junit.Assert.assertNotNull(weeks29);
        org.junit.Assert.assertNotNull(timeOfDay30);
        org.junit.Assert.assertNotNull(weeks31);
    }

    @Test
    public void test1998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1998");
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((int) ' ', 34, (int) (byte) 0, 22, (int) (byte) 10, 14, (int) (byte) 10, 5);
        mutablePeriod8.add(1314000057L);
    }

    @Test
    public void test1999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1999");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 3, chronology1);
        org.joda.time.DateTime.Property property3 = dateTime2.dayOfYear();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight((java.lang.Object) dateTime2, chronology4);
        org.joda.time.MutableDateTime mutableDateTime6 = dateTime2.toMutableDateTime();
        mutableDateTime6.addWeeks((int) (short) 100);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime6.secondOfMinute();
        mutableDateTime6.addMillis(10800000);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(property9);
    }

    @Test
    public void test2000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test2000");
        java.nio.charset.Charset charset0 = java.nio.charset.Charset.defaultCharset();
        java.nio.charset.CharsetDecoder charsetDecoder1 = charset0.newDecoder();
        float float2 = charsetDecoder1.maxCharsPerByte();
        java.nio.charset.CodingErrorAction codingErrorAction3 = java.nio.charset.CodingErrorAction.IGNORE;
        java.nio.charset.CharsetDecoder charsetDecoder4 = charsetDecoder1.onMalformedInput(codingErrorAction3);
        java.nio.charset.Charset charset5 = java.nio.charset.Charset.defaultCharset();
        java.nio.charset.CharsetDecoder charsetDecoder6 = charset5.newDecoder();
        float float7 = charsetDecoder6.maxCharsPerByte();
        java.nio.charset.CodingErrorAction codingErrorAction8 = java.nio.charset.CodingErrorAction.IGNORE;
        java.nio.charset.CharsetDecoder charsetDecoder9 = charsetDecoder6.onMalformedInput(codingErrorAction8);
        java.nio.charset.CharsetDecoder charsetDecoder10 = charsetDecoder4.onMalformedInput(codingErrorAction8);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.charset.Charset charset11 = charsetDecoder10.detectedCharset();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charset0);
        org.junit.Assert.assertNotNull(charsetDecoder1);
        org.junit.Assert.assertTrue("'" + float2 + "' != '" + 1.0f + "'", float2 == 1.0f);
        org.junit.Assert.assertNotNull(codingErrorAction3);
        org.junit.Assert.assertNotNull(charsetDecoder4);
        org.junit.Assert.assertNotNull(charset5);
        org.junit.Assert.assertNotNull(charsetDecoder6);
        org.junit.Assert.assertTrue("'" + float7 + "' != '" + 1.0f + "'", float7 == 1.0f);
        org.junit.Assert.assertNotNull(codingErrorAction8);
        org.junit.Assert.assertNotNull(charsetDecoder9);
        org.junit.Assert.assertNotNull(charsetDecoder10);
    }
}

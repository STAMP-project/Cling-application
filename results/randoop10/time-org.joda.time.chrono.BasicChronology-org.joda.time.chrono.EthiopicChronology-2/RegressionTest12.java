import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest12 {

    public static boolean debug = false;

    @Test
    public void test6001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6001");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((long) 0, chronology2);
        org.joda.time.Chronology chronology4 = localTime3.getChronology();
        org.joda.time.DateTimeField dateTimeField5 = chronology4.weekyearOfCentury();
        org.joda.time.DurationField durationField6 = chronology4.weekyears();
        org.joda.time.DurationField durationField7 = chronology4.seconds();
        org.joda.time.LocalTime localTime8 = org.joda.time.LocalTime.fromMillisOfDay((long) (byte) 0, chronology4);
        org.joda.time.LocalTime.Property property9 = localTime8.millisOfSecond();
        org.joda.time.LocalTime.Property property10 = localTime8.hourOfDay();
        org.joda.time.LocalTime localTime12 = property10.addCopy(2147483647);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localTime12);
    }

    @Test
    public void test6002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6002");
        java.time.LocalTime localTime0 = java.time.LocalTime.MIDNIGHT;
        java.time.Duration duration1 = java.time.Duration.ZERO;
        java.time.LocalTime localTime6 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime7 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime6);
        java.time.temporal.ChronoField chronoField8 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime10 = localTime6.with((java.time.temporal.TemporalField) chronoField8, (long) (short) 1);
        java.time.Duration duration12 = java.time.Duration.ofMinutes((long) 3);
        java.time.LocalTime localTime13 = localTime6.minus((java.time.temporal.TemporalAmount) duration12);
        java.time.temporal.Temporal temporal14 = duration1.subtractFrom((java.time.temporal.Temporal) localTime13);
        java.time.LocalTime localTime16 = localTime13.plusMinutes((long) 31);
        boolean boolean17 = localTime0.isAfter(localTime16);
        java.time.LocalTime localTime19 = localTime16.plusNanos((long) 32769);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((long) 3, chronology21);
        org.joda.time.DateTime.Property property23 = dateTime22.dayOfYear();
        org.joda.time.Interval interval24 = property23.toInterval();
        org.joda.time.DateTimeField dateTimeField25 = property23.getField();
        org.joda.time.DateTime dateTime27 = property23.addToCopy((long) (byte) 1);
        org.joda.time.DateTime dateTime29 = dateTime27.withYearOfEra(28);
        boolean boolean30 = localTime19.equals((java.lang.Object) dateTime29);
        org.junit.Assert.assertNotNull(localTime0);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertTrue("'" + chronoField8 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField8.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(temporal14);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test6003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6003");
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 3, chronology8);
        org.joda.time.DateTime.Property property10 = dateTime9.dayOfYear();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight((java.lang.Object) dateTime9, chronology11);
        org.joda.time.MutableDateTime mutableDateTime13 = dateTime9.toMutableDateTime();
        mutableDateTime13.addYears((int) (short) 100);
        org.joda.time.MutableDateTime.Property property16 = mutableDateTime13.dayOfWeek();
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime13.year();
        java.util.TimeZone timeZone18 = null;
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forTimeZone(timeZone18);
        mutableDateTime13.setZone(dateTimeZone19);
        java.util.Locale locale22 = java.util.Locale.TAIWAN;
        java.lang.String str23 = dateTimeZone19.getShortName((long) 64, locale22);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((long) 3, chronology25);
        org.joda.time.DateTime.Property property27 = dateTime26.dayOfYear();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateMidnight dateMidnight29 = new org.joda.time.DateMidnight((java.lang.Object) dateTime26, chronology28);
        org.joda.time.MutableDateTime mutableDateTime30 = dateTime26.toMutableDateTime();
        mutableDateTime30.addYears((int) (short) 100);
        org.joda.time.MutableDateTime.Property property33 = mutableDateTime30.dayOfWeek();
        org.joda.time.MutableDateTime.Property property34 = mutableDateTime30.year();
        java.util.TimeZone timeZone35 = null;
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forTimeZone(timeZone35);
        mutableDateTime30.setZone(dateTimeZone36);
        java.util.Locale locale39 = java.util.Locale.TAIWAN;
        java.lang.String str40 = dateTimeZone36.getShortName((long) 64, locale39);
        long long42 = dateTimeZone19.getMillisKeepLocal(dateTimeZone36, (long) 64);
        java.lang.String str43 = dateTimeZone19.getID();
        org.joda.time.LocalDate localDate44 = new org.joda.time.LocalDate();
        org.joda.time.Interval interval45 = localDate44.toInterval();
        int int46 = localDate44.getDayOfYear();
        java.util.TimeZone timeZone50 = null;
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.forTimeZone(timeZone50);
        org.joda.time.DateMidnight dateMidnight52 = new org.joda.time.DateMidnight((long) 1970, dateTimeZone51);
        org.joda.time.DateTime dateTime53 = new org.joda.time.DateTime((long) 3600000, dateTimeZone51);
        org.joda.time.DateTime dateTime54 = new org.joda.time.DateTime((long) 22, dateTimeZone51);
        org.joda.time.Interval interval55 = localDate44.toInterval(dateTimeZone51);
        org.joda.time.DateMidnight dateMidnight56 = org.joda.time.DateMidnight.now(dateTimeZone51);
        java.util.TimeZone timeZone58 = null;
        org.joda.time.DateTimeZone dateTimeZone59 = org.joda.time.DateTimeZone.forTimeZone(timeZone58);
        org.joda.time.DateMidnight dateMidnight60 = new org.joda.time.DateMidnight((long) 12, dateTimeZone59);
        long long62 = dateTimeZone51.getMillisKeepLocal(dateTimeZone59, (long) 574);
        java.lang.String str64 = dateTimeZone59.getName(47L);
        long long66 = dateTimeZone19.getMillisKeepLocal(dateTimeZone59, 21000000L);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime67 = new org.joda.time.DateTime(2012, 96000000, 16384, 32769, (int) (byte) 10, 46, (int) 'x', dateTimeZone59);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 32769 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "+00:00" + "'", str23, "+00:00");
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(mutableDateTime30);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "+00:00" + "'", str40, "+00:00");
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 64L + "'", long42 == 64L);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Etc/UTC" + "'", str43, "Etc/UTC");
        org.junit.Assert.assertNotNull(interval45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 52 + "'", int46 == 52);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertNotNull(interval55);
        org.junit.Assert.assertNotNull(dateMidnight56);
        org.junit.Assert.assertNotNull(dateTimeZone59);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 574L + "'", long62 == 574L);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "+00:00" + "'", str64, "+00:00");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 21000000L + "'", long66 == 21000000L);
    }

    @Test
    public void test6004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6004");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(11724424192L);
        org.joda.time.DateTime dateTime2 = yearMonthDay1.toDateTimeAtMidnight();
        org.joda.time.DateTime.Property property3 = dateTime2.year();
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(property3);
    }

    @Test
    public void test6005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6005");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.Interval interval1 = localDate0.toInterval();
        int int2 = localDate0.getYearOfCentury();
        org.joda.time.LocalDate localDate4 = localDate0.withWeekOfWeekyear((int) (byte) 10);
        org.joda.time.PeriodType periodType6 = org.joda.time.PeriodType.time();
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) 'a', periodType6);
        org.joda.time.LocalDate localDate8 = localDate4.minus((org.joda.time.ReadablePeriod) mutablePeriod7);
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod7.setValue(17480, 741000000);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 17480");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(interval1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 22 + "'", int2 == 22);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertNotNull(localDate8);
    }

    @Test
    public void test6006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6006");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 3, chronology1);
        org.joda.time.DateTime.Property property3 = dateTime2.dayOfYear();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight((java.lang.Object) dateTime2, chronology4);
        org.joda.time.MutableDateTime mutableDateTime6 = dateTime2.toMutableDateTime();
        mutableDateTime6.addYears((int) (short) 100);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime6.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime10 = property9.roundFloor();
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.Duration duration13 = new org.joda.time.Duration(readableInstant11, readableInstant12);
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.PeriodType periodType15 = null;
        org.joda.time.Period period16 = duration13.toPeriodTo(readableInstant14, periodType15);
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.Duration duration19 = new org.joda.time.Duration(readableInstant17, readableInstant18);
        long long20 = duration19.getMillis();
        boolean boolean21 = duration13.isShorterThan((org.joda.time.ReadableDuration) duration19);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((long) 3, chronology23);
        org.joda.time.DateTime.Property property25 = dateTime24.dayOfYear();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateMidnight dateMidnight27 = new org.joda.time.DateMidnight((java.lang.Object) dateTime24, chronology26);
        org.joda.time.MutableDateTime mutableDateTime28 = dateTime24.toMutableDateTime();
        mutableDateTime28.addYears((int) (short) 100);
        org.joda.time.MutableDateTime.Property property31 = mutableDateTime28.dayOfWeek();
        org.joda.time.MutableDateTime.Property property32 = mutableDateTime28.year();
        org.joda.time.MutableDateTime.Property property33 = mutableDateTime28.weekyear();
        boolean boolean34 = duration13.equals((java.lang.Object) mutableDateTime28);
        mutableDateTime28.addMonths((int) ' ');
        mutableDateTime28.add((long) (byte) 10);
        org.joda.time.Period period39 = org.joda.time.Period.ZERO;
        org.joda.time.Period period40 = period39.normalizedStandard();
        org.joda.time.Period period42 = period39.plusHours(2);
        java.time.chrono.IsoEra isoEra43 = java.time.chrono.IsoEra.CE;
        boolean boolean44 = period42.equals((java.lang.Object) isoEra43);
        int int45 = period42.getMinutes();
        mutableDateTime28.add((org.joda.time.ReadablePeriod) period42);
        java.util.TimeZone timeZone48 = null;
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.forTimeZone(timeZone48);
        org.joda.time.DateMidnight dateMidnight50 = new org.joda.time.DateMidnight((long) 1970, dateTimeZone49);
        long long53 = dateTimeZone49.convertLocalToUTC((long) 3, false);
        long long56 = dateTimeZone49.convertLocalToUTC(0L, true);
        mutableDateTime28.setZoneRetainFields(dateTimeZone49);
        java.lang.String str58 = dateTimeZone49.toString();
        org.joda.time.chrono.EthiopicChronology ethiopicChronology59 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone49);
        org.joda.time.DateTimeField dateTimeField60 = ethiopicChronology59.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone61 = ethiopicChronology59.getZone();
        org.joda.time.DateTimeField dateTimeField62 = ethiopicChronology59.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField63 = ethiopicChronology59.minuteOfDay();
        org.joda.time.Chronology chronology64 = ethiopicChronology59.withUTC();
        org.joda.time.TimeOfDay timeOfDay65 = new org.joda.time.TimeOfDay((java.lang.Object) mutableDateTime10, chronology64);
        org.joda.time.ReadableDuration readableDuration66 = null;
        mutableDateTime10.add(readableDuration66);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(mutableDateTime28);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertTrue("'" + isoEra43 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra43.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 3L + "'", long53 == 3L);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 0L + "'", long56 == 0L);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "Etc/UTC" + "'", str58, "Etc/UTC");
        org.junit.Assert.assertNotNull(ethiopicChronology59);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(dateTimeZone61);
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertNotNull(chronology64);
    }

    @Test
    public void test6007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6007");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 3, chronology1);
        org.joda.time.DateTime.Property property3 = dateTime2.dayOfYear();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight((java.lang.Object) dateTime2, chronology4);
        org.joda.time.MutableDateTime mutableDateTime6 = dateTime2.toMutableDateTime();
        mutableDateTime6.addYears((int) (short) 100);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime6.millisOfDay();
        org.joda.time.PeriodType periodType10 = org.joda.time.PeriodType.years();
        org.joda.time.DurationFieldType durationFieldType11 = org.joda.time.DurationFieldType.halfdays();
        int int12 = periodType10.indexOf(durationFieldType11);
        mutableDateTime6.add(durationFieldType11, (int) 'a');
        org.joda.time.MutableDateTime.Property property15 = mutableDateTime6.millisOfSecond();
        org.joda.time.MutableDateTime.Property property16 = mutableDateTime6.yearOfEra();
        java.lang.String str17 = mutableDateTime6.toString();
        mutableDateTime6.addHours(30);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(periodType10);
        org.junit.Assert.assertNotNull(durationFieldType11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "2070-02-18T12:00:00.003Z" + "'", str17, "2070-02-18T12:00:00.003Z");
    }

    @Test
    public void test6008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6008");
        java.nio.ShortBuffer shortBuffer1 = java.nio.ShortBuffer.allocate(306);
        java.nio.ShortBuffer shortBuffer4 = shortBuffer1.put(10, (short) (byte) 0);
        short[] shortArray7 = new short[] { (byte) 0, (short) 1 };
        java.nio.ShortBuffer shortBuffer8 = java.nio.ShortBuffer.wrap(shortArray7);
        java.nio.ShortBuffer shortBuffer9 = shortBuffer1.get(shortArray7);
        org.junit.Assert.assertNotNull(shortBuffer1);
        org.junit.Assert.assertNotNull(shortBuffer4);
        org.junit.Assert.assertNotNull(shortArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray7), "[0, 0]");
        org.junit.Assert.assertNotNull(shortBuffer8);
        org.junit.Assert.assertNotNull(shortBuffer9);
    }

    @Test
    public void test6009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6009");
        java.io.File file0 = null;
        java.io.File file2 = new java.io.File(file0, "1970-01-01T00:00:00.003Z");
        java.net.URL uRL3 = file2.toURL();
        java.lang.String str4 = uRL3.getUserInfo();
        java.lang.String str5 = uRL3.getQuery();
        org.junit.Assert.assertNull("file2.getParent() == null", file2.getParent());
        org.junit.Assert.assertEquals(file2.toString(), "1970-01-01T00:00:00.003Z");
        org.junit.Assert.assertNotNull(uRL3);
// flaky:         org.junit.Assert.assertEquals(uRL3.toString(), "file:/experiment/1970-01-01T00:00:00.003Z");
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
    }

    @Test
    public void test6010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6010");
        java.net.Proxy proxy0 = java.net.Proxy.NO_PROXY;
        java.net.SocketAddress socketAddress1 = proxy0.address();
        java.net.Proxy.Type type2 = proxy0.type();
        org.junit.Assert.assertNotNull(proxy0);
        org.junit.Assert.assertNull(socketAddress1);
        org.junit.Assert.assertTrue("'" + type2 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type2.equals(java.net.Proxy.Type.DIRECT));
    }

    @Test
    public void test6011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6011");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.Duration duration2 = new org.joda.time.Duration(readableInstant0, readableInstant1);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = duration2.toPeriodTo(readableInstant3, periodType4);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.Duration duration8 = new org.joda.time.Duration(readableInstant6, readableInstant7);
        long long9 = duration8.getMillis();
        boolean boolean10 = duration2.isShorterThan((org.joda.time.ReadableDuration) duration8);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) 3, chronology12);
        org.joda.time.DateTime.Property property14 = dateTime13.dayOfYear();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight((java.lang.Object) dateTime13, chronology15);
        org.joda.time.MutableDateTime mutableDateTime17 = dateTime13.toMutableDateTime();
        mutableDateTime17.addYears((int) (short) 100);
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime17.dayOfWeek();
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime17.year();
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime17.weekyear();
        boolean boolean23 = duration2.equals((java.lang.Object) mutableDateTime17);
        mutableDateTime17.addMonths((int) ' ');
        mutableDateTime17.add((long) (byte) 10);
        org.joda.time.Period period28 = org.joda.time.Period.ZERO;
        org.joda.time.Period period29 = period28.normalizedStandard();
        org.joda.time.Period period31 = period28.plusHours(2);
        java.time.chrono.IsoEra isoEra32 = java.time.chrono.IsoEra.CE;
        boolean boolean33 = period31.equals((java.lang.Object) isoEra32);
        int int34 = period31.getMinutes();
        mutableDateTime17.add((org.joda.time.ReadablePeriod) period31);
        java.util.TimeZone timeZone37 = null;
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forTimeZone(timeZone37);
        org.joda.time.DateMidnight dateMidnight39 = new org.joda.time.DateMidnight((long) 1970, dateTimeZone38);
        long long42 = dateTimeZone38.convertLocalToUTC((long) 3, false);
        long long45 = dateTimeZone38.convertLocalToUTC(0L, true);
        mutableDateTime17.setZoneRetainFields(dateTimeZone38);
        java.lang.String str47 = dateTimeZone38.toString();
        org.joda.time.chrono.EthiopicChronology ethiopicChronology48 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone38);
        org.joda.time.DateTimeField dateTimeField49 = ethiopicChronology48.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone50 = ethiopicChronology48.getZone();
        org.joda.time.DateTimeField dateTimeField51 = ethiopicChronology48.era();
        org.joda.time.DateTimeField dateTimeField52 = ethiopicChronology48.secondOfDay();
        org.joda.time.DateTimeField dateTimeField53 = ethiopicChronology48.minuteOfHour();
        org.joda.time.DurationField durationField54 = ethiopicChronology48.months();
        org.joda.time.DateTimeField dateTimeField55 = ethiopicChronology48.monthOfYear();
        org.joda.time.LocalTime localTime56 = new org.joda.time.LocalTime((org.joda.time.Chronology) ethiopicChronology48);
        org.joda.time.DateTimeField dateTimeField57 = ethiopicChronology48.hourOfDay();
        // The following exception was thrown during execution in test generation
        try {
            long long60 = dateTimeField57.set(16176157260000L, "2022-02-21T09:37:22.346");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2022-02-21T09:37:22.346\" for hourOfDay is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertTrue("'" + isoEra32 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra32.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 3L + "'", long42 == 3L);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Etc/UTC" + "'", str47, "Etc/UTC");
        org.junit.Assert.assertNotNull(ethiopicChronology48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(durationField54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(dateTimeField57);
    }

    @Test
    public void test6012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6012");
        java.time.LocalDate localDate1 = java.time.LocalDate.ofEpochDay((long) ' ');
        java.time.OffsetTime offsetTime2 = java.time.OffsetTime.MAX;
        java.time.LocalTime localTime3 = offsetTime2.toLocalTime();
        java.lang.String str4 = offsetTime2.toString();
        java.time.Duration duration5 = java.time.Duration.ZERO;
        java.lang.String str6 = duration5.toString();
        java.time.OffsetTime offsetTime7 = offsetTime2.plus((java.time.temporal.TemporalAmount) duration5);
        java.time.LocalTime localTime8 = offsetTime2.toLocalTime();
        java.time.chrono.ChronoLocalDateTime<?> wildcardChronoLocalDateTime9 = localDate1.atTime(localTime8);
        java.time.LocalDate localDate11 = localDate1.minusWeeks((long) 2097);
        java.time.OffsetTime offsetTime12 = java.time.OffsetTime.MAX;
        java.time.LocalTime localTime13 = offsetTime12.toLocalTime();
        java.lang.String str14 = offsetTime12.toString();
        java.time.Duration duration15 = java.time.Duration.ZERO;
        java.lang.String str16 = duration15.toString();
        java.time.OffsetTime offsetTime17 = offsetTime12.plus((java.time.temporal.TemporalAmount) duration15);
        java.time.OffsetTime offsetTime19 = offsetTime12.plusNanos((long) 0);
        java.time.LocalTime localTime24 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime25 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime24);
        java.time.temporal.ChronoField chronoField26 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime28 = localTime24.with((java.time.temporal.TemporalField) chronoField26, (long) (short) 1);
        java.util.Locale locale29 = java.util.Locale.GERMANY;
        java.lang.String str30 = chronoField26.getDisplayName(locale29);
        java.time.OffsetTime offsetTime32 = offsetTime19.with((java.time.temporal.TemporalField) chronoField26, (long) 28);
        java.time.OffsetDateTime offsetDateTime33 = localDate11.atTime(offsetTime19);
        int int34 = localDate11.getYear();
        boolean boolean35 = localDate11.isLeapYear();
        java.time.LocalDateTime localDateTime36 = java.time.LocalDateTime.now();
        java.time.temporal.ChronoField chronoField37 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime39 = localDateTime36.with((java.time.temporal.TemporalField) chronoField37, (long) 10);
        java.time.LocalDateTime localDateTime41 = localDateTime36.minusMinutes((long) 12);
        java.time.LocalDateTime localDateTime43 = localDateTime41.minusNanos((long) (byte) 1);
        java.time.temporal.ChronoField chronoField44 = java.time.temporal.ChronoField.OFFSET_SECONDS;
        boolean boolean45 = localDateTime43.isSupported((java.time.temporal.TemporalField) chronoField44);
        int int46 = localDateTime43.getMonthValue();
        java.time.Clock clock47 = java.time.Clock.systemUTC();
        java.time.Duration duration49 = java.time.Duration.ofSeconds((long) 256);
        java.time.Clock clock50 = java.time.Clock.tick(clock47, duration49);
        java.time.Duration duration52 = java.time.Duration.ofMinutes((long) 3);
        java.time.Duration duration53 = duration52.abs();
        java.time.Clock clock54 = java.time.Clock.offset(clock47, duration52);
        java.time.LocalDateTime localDateTime55 = java.time.LocalDateTime.now(clock47);
        java.time.LocalDateTime localDateTime57 = localDateTime55.plusNanos((long) (byte) -1);
        boolean boolean58 = localDateTime43.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime55);
        java.time.LocalDate localDate60 = java.time.LocalDate.ofEpochDay((long) ' ');
        int int61 = localDate60.getMonthValue();
        org.joda.time.Period period62 = org.joda.time.Period.ZERO;
        org.joda.time.Period period63 = period62.normalizedStandard();
        org.joda.time.Period period65 = period62.plusHours(2);
        java.time.chrono.IsoEra isoEra66 = java.time.chrono.IsoEra.CE;
        boolean boolean67 = period65.equals((java.lang.Object) isoEra66);
        java.time.LocalTime localTime72 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime73 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime72);
        java.time.LocalTime localTime78 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime79 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime78);
        java.time.temporal.ChronoField chronoField80 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime82 = localTime78.with((java.time.temporal.TemporalField) chronoField80, (long) (short) 1);
        long long83 = localTime72.getLong((java.time.temporal.TemporalField) chronoField80);
        boolean boolean84 = isoEra66.isSupported((java.time.temporal.TemporalField) chronoField80);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery85 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period86 = isoEra66.query(periodTemporalQuery85);
        boolean boolean87 = period86.isNegative();
        java.time.Period period89 = period86.plusDays((long) ' ');
        java.time.temporal.ChronoField chronoField90 = java.time.temporal.ChronoField.SECOND_OF_DAY;
        boolean boolean91 = period86.equals((java.lang.Object) chronoField90);
        boolean boolean92 = localDate60.isSupported((java.time.temporal.TemporalField) chronoField90);
        java.time.temporal.TemporalUnit temporalUnit93 = chronoField90.getRangeUnit();
        java.time.Duration duration94 = temporalUnit93.getDuration();
        long long95 = localDate11.until((java.time.temporal.Temporal) localDateTime43, temporalUnit93);
        boolean boolean96 = temporalUnit93.isDurationEstimated();
        org.junit.Assert.assertNotNull(localDate1);
        org.junit.Assert.assertNotNull(offsetTime2);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "23:59:59.999999999-18:00" + "'", str4, "23:59:59.999999999-18:00");
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "PT0S" + "'", str6, "PT0S");
        org.junit.Assert.assertNotNull(offsetTime7);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(wildcardChronoLocalDateTime9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(offsetTime12);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "23:59:59.999999999-18:00" + "'", str14, "23:59:59.999999999-18:00");
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "PT0S" + "'", str16, "PT0S");
        org.junit.Assert.assertNotNull(offsetTime17);
        org.junit.Assert.assertNotNull(offsetTime19);
        org.junit.Assert.assertNotNull(localTime24);
        org.junit.Assert.assertNotNull(localTime25);
        org.junit.Assert.assertTrue("'" + chronoField26 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField26.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime28);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "NanoOfDay" + "'", str30, "NanoOfDay");
        org.junit.Assert.assertNotNull(offsetTime32);
        org.junit.Assert.assertNotNull(offsetDateTime33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1929 + "'", int34 == 1929);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertTrue("'" + chronoField37 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField37.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime39);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertTrue("'" + chronoField44 + "' != '" + java.time.temporal.ChronoField.OFFSET_SECONDS + "'", chronoField44.equals(java.time.temporal.ChronoField.OFFSET_SECONDS));
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2 + "'", int46 == 2);
        org.junit.Assert.assertNotNull(clock47);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(clock50);
        org.junit.Assert.assertNotNull(duration52);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertNotNull(clock54);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(localDate60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 2 + "'", int61 == 2);
        org.junit.Assert.assertNotNull(period62);
        org.junit.Assert.assertNotNull(period63);
        org.junit.Assert.assertNotNull(period65);
        org.junit.Assert.assertTrue("'" + isoEra66 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra66.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(localTime72);
        org.junit.Assert.assertNotNull(localTime73);
        org.junit.Assert.assertNotNull(localTime78);
        org.junit.Assert.assertNotNull(localTime79);
        org.junit.Assert.assertTrue("'" + chronoField80 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField80.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime82);
        org.junit.Assert.assertTrue("'" + long83 + "' != '" + 3601000000001L + "'", long83 == 3601000000001L);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(periodTemporalQuery85);
        org.junit.Assert.assertNotNull(period86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(period89);
        org.junit.Assert.assertTrue("'" + chronoField90 + "' != '" + java.time.temporal.ChronoField.SECOND_OF_DAY + "'", chronoField90.equals(java.time.temporal.ChronoField.SECOND_OF_DAY));
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + temporalUnit93 + "' != '" + java.time.temporal.ChronoUnit.DAYS + "'", temporalUnit93.equals(java.time.temporal.ChronoUnit.DAYS));
        org.junit.Assert.assertNotNull(duration94);
        org.junit.Assert.assertTrue("'" + long95 + "' != '" + 33691L + "'", long95 == 33691L);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + true + "'", boolean96 == true);
    }

    @Test
    public void test6013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6013");
        java.time.LocalDateTime localDateTime0 = null;
        java.time.Instant instant1 = java.time.Instant.now();
        java.time.Instant instant2 = java.time.Instant.now();
        boolean boolean3 = instant1.isAfter(instant2);
        java.time.Duration duration4 = java.time.Duration.ZERO;
        java.time.Instant instant5 = instant2.minus((java.time.temporal.TemporalAmount) duration4);
        java.time.format.DateTimeFormatter dateTimeFormatter6 = java.time.format.DateTimeFormatter.ISO_DATE;
        java.lang.String str7 = dateTimeFormatter6.toString();
        java.time.LocalDateTime localDateTime8 = java.time.LocalDateTime.now();
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery9 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period10 = localDateTime8.query(periodTemporalQuery9);
        java.text.Format format11 = dateTimeFormatter6.toFormat(periodTemporalQuery9);
        java.time.chrono.Chronology chronology12 = dateTimeFormatter6.getChronology();
        java.time.format.DateTimeFormatter dateTimeFormatter13 = java.time.format.DateTimeFormatter.ISO_DATE;
        java.lang.String str14 = dateTimeFormatter13.toString();
        java.time.LocalDateTime localDateTime15 = java.time.LocalDateTime.now();
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery16 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period17 = localDateTime15.query(periodTemporalQuery16);
        java.text.Format format18 = dateTimeFormatter13.toFormat(periodTemporalQuery16);
        java.time.chrono.Chronology chronology19 = dateTimeFormatter13.getChronology();
        int int20 = chronology12.compareTo(chronology19);
        java.util.List<java.time.chrono.Era> eraList21 = chronology19.eras();
        java.time.ZoneOffset zoneOffset24 = java.time.ZoneOffset.ofHoursMinutes(1, 10);
        java.time.LocalDate localDate25 = java.time.LocalDate.now((java.time.ZoneId) zoneOffset24);
        java.time.Clock clock26 = java.time.Clock.system((java.time.ZoneId) zoneOffset24);
        java.time.ZoneOffset zoneOffset29 = java.time.ZoneOffset.ofHoursMinutes(1, 10);
        java.time.LocalDate localDate30 = java.time.LocalDate.now((java.time.ZoneId) zoneOffset29);
        java.time.Clock clock31 = java.time.Clock.system((java.time.ZoneId) zoneOffset29);
        int int32 = zoneOffset24.compareTo(zoneOffset29);
        java.time.chrono.ChronoLocalDate chronoLocalDate33 = chronology19.dateNow((java.time.ZoneId) zoneOffset29);
        java.time.OffsetDateTime offsetDateTime34 = java.time.OffsetDateTime.ofInstant(instant5, (java.time.ZoneId) zoneOffset29);
        // The following exception was thrown during execution in test generation
        try {
            java.time.ZonedDateTime zonedDateTime35 = java.time.ZonedDateTime.of(localDateTime0, (java.time.ZoneId) zoneOffset29);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: localDateTime");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(instant1);
        org.junit.Assert.assertNotNull(instant2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(instant5);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "ParseCaseSensitive(false)(Value(Year,4,10,EXCEEDS_PAD)'-'Value(MonthOfYear,2)'-'Value(DayOfMonth,2))[Offset(+HH:MM:ss,'Z')]" + "'", str7, "ParseCaseSensitive(false)(Value(Year,4,10,EXCEEDS_PAD)'-'Value(MonthOfYear,2)'-'Value(DayOfMonth,2))[Offset(+HH:MM:ss,'Z')]");
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(periodTemporalQuery9);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(format11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "ParseCaseSensitive(false)(Value(Year,4,10,EXCEEDS_PAD)'-'Value(MonthOfYear,2)'-'Value(DayOfMonth,2))[Offset(+HH:MM:ss,'Z')]" + "'", str14, "ParseCaseSensitive(false)(Value(Year,4,10,EXCEEDS_PAD)'-'Value(MonthOfYear,2)'-'Value(DayOfMonth,2))[Offset(+HH:MM:ss,'Z')]");
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(periodTemporalQuery16);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(format18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(eraList21);
        org.junit.Assert.assertNotNull(zoneOffset24);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(clock26);
        org.junit.Assert.assertNotNull(zoneOffset29);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertNotNull(clock31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(chronoLocalDate33);
        org.junit.Assert.assertNotNull(offsetDateTime34);
    }

    @Test
    public void test6014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6014");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.now();
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery1 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period2 = localDateTime0.query(periodTemporalQuery1);
        java.time.chrono.IsoChronology isoChronology3 = period2.getChronology();
        java.util.GregorianCalendar gregorianCalendar9 = new java.util.GregorianCalendar(12, 4096, 7, (-1), (int) (short) 10);
        int int10 = gregorianCalendar9.getWeeksInWeekYear();
        java.lang.String str11 = gregorianCalendar9.getCalendarType();
        java.time.ZonedDateTime zonedDateTime12 = gregorianCalendar9.toZonedDateTime();
        java.util.GregorianCalendar gregorianCalendar18 = new java.util.GregorianCalendar(12, 4096, 7, (-1), (int) (short) 10);
        int int19 = gregorianCalendar18.getWeeksInWeekYear();
        java.lang.String str20 = gregorianCalendar18.getCalendarType();
        java.time.ZonedDateTime zonedDateTime21 = gregorianCalendar18.toZonedDateTime();
        int int22 = zonedDateTime12.compareTo((java.time.chrono.ChronoZonedDateTime<java.time.LocalDate>) zonedDateTime21);
        java.time.ZonedDateTime zonedDateTime24 = zonedDateTime12.plusDays((long) 2022);
        java.time.Instant instant25 = zonedDateTime12.toInstant();
        java.time.Period period27 = java.time.Period.ofMonths(0);
        java.time.ZonedDateTime zonedDateTime28 = zonedDateTime12.minus((java.time.temporal.TemporalAmount) period27);
        java.time.LocalTime localTime29 = zonedDateTime12.toLocalTime();
        java.time.temporal.ChronoField chronoField30 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        int int31 = zonedDateTime12.get((java.time.temporal.TemporalField) chronoField30);
        java.time.temporal.ValueRange valueRange32 = isoChronology3.range(chronoField30);
        java.time.OffsetDateTime offsetDateTime33 = java.time.OffsetDateTime.now();
        int int34 = offsetDateTime33.getDayOfMonth();
        java.time.OffsetDateTime offsetDateTime36 = offsetDateTime33.withMinute((int) (byte) 10);
        long long37 = offsetDateTime36.toEpochSecond();
        java.time.chrono.IsoEra isoEra38 = java.time.chrono.IsoEra.CE;
        int int39 = isoEra38.getValue();
        java.time.OffsetDateTime offsetDateTime40 = offsetDateTime36.with((java.time.temporal.TemporalAdjuster) isoEra38);
        org.joda.time.Period period41 = org.joda.time.Period.ZERO;
        org.joda.time.Period period42 = period41.normalizedStandard();
        org.joda.time.Period period44 = period41.plusHours(2);
        java.time.chrono.IsoEra isoEra45 = java.time.chrono.IsoEra.CE;
        boolean boolean46 = period44.equals((java.lang.Object) isoEra45);
        java.time.LocalTime localTime51 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime52 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime51);
        java.time.LocalTime localTime57 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime58 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime57);
        java.time.temporal.ChronoField chronoField59 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime61 = localTime57.with((java.time.temporal.TemporalField) chronoField59, (long) (short) 1);
        long long62 = localTime51.getLong((java.time.temporal.TemporalField) chronoField59);
        boolean boolean63 = isoEra45.isSupported((java.time.temporal.TemporalField) chronoField59);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery64 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period65 = isoEra45.query(periodTemporalQuery64);
        boolean boolean66 = period65.isNegative();
        java.time.Period period68 = period65.plusDays((long) ' ');
        java.time.temporal.ChronoField chronoField69 = java.time.temporal.ChronoField.SECOND_OF_DAY;
        boolean boolean70 = period65.equals((java.lang.Object) chronoField69);
        boolean boolean71 = isoEra38.isSupported((java.time.temporal.TemporalField) chronoField69);
        int int72 = isoEra38.getValue();
        java.time.OffsetDateTime offsetDateTime73 = java.time.OffsetDateTime.now();
        java.time.LocalDate localDate74 = offsetDateTime73.toLocalDate();
        java.time.OffsetDateTime offsetDateTime75 = java.time.OffsetDateTime.now();
        java.time.LocalDate localDate76 = offsetDateTime75.toLocalDate();
        java.time.OffsetDateTime offsetDateTime77 = java.time.OffsetDateTime.now();
        java.time.temporal.ChronoField chronoField78 = java.time.temporal.ChronoField.HOUR_OF_DAY;
        boolean boolean79 = offsetDateTime77.isSupported((java.time.temporal.TemporalField) chronoField78);
        boolean boolean80 = offsetDateTime75.isEqual(offsetDateTime77);
        java.lang.String str81 = offsetDateTime77.toString();
        boolean boolean82 = offsetDateTime73.isAfter(offsetDateTime77);
        java.time.chrono.IsoEra isoEra83 = java.time.chrono.IsoEra.CE;
        java.time.format.DateTimeFormatter dateTimeFormatter84 = java.time.format.DateTimeFormatter.ISO_DATE;
        java.lang.String str85 = dateTimeFormatter84.toString();
        java.time.LocalDateTime localDateTime86 = java.time.LocalDateTime.now();
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery87 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period88 = localDateTime86.query(periodTemporalQuery87);
        java.text.Format format89 = dateTimeFormatter84.toFormat(periodTemporalQuery87);
        java.time.Period period90 = isoEra83.query(periodTemporalQuery87);
        java.time.Period period91 = offsetDateTime73.query(periodTemporalQuery87);
        java.time.Period period92 = isoEra38.query(periodTemporalQuery87);
        int int94 = isoChronology3.prolepticYear((java.time.chrono.Era) isoEra38, 1728000);
        java.time.LocalDate localDate97 = isoChronology3.dateYearDay(83399, 37);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(periodTemporalQuery1);
        org.junit.Assert.assertNotNull(period2);
        org.junit.Assert.assertNotNull(isoChronology3);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 52 + "'", int10 == 52);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "gregory" + "'", str11, "gregory");
        org.junit.Assert.assertNotNull(zonedDateTime12);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 52 + "'", int19 == 52);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "gregory" + "'", str20, "gregory");
        org.junit.Assert.assertNotNull(zonedDateTime21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(zonedDateTime24);
        org.junit.Assert.assertNotNull(instant25);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(zonedDateTime28);
        org.junit.Assert.assertNotNull(localTime29);
        org.junit.Assert.assertTrue("'" + chronoField30 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField30.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 19 + "'", int31 == 19);
        org.junit.Assert.assertNotNull(valueRange32);
        org.junit.Assert.assertNotNull(offsetDateTime33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 21 + "'", int34 == 21);
        org.junit.Assert.assertNotNull(offsetDateTime36);
// flaky:         org.junit.Assert.assertTrue("'" + long37 + "' != '" + 1645434648L + "'", long37 == 1645434648L);
        org.junit.Assert.assertTrue("'" + isoEra38 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra38.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(offsetDateTime40);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertTrue("'" + isoEra45 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra45.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(localTime51);
        org.junit.Assert.assertNotNull(localTime52);
        org.junit.Assert.assertNotNull(localTime57);
        org.junit.Assert.assertNotNull(localTime58);
        org.junit.Assert.assertTrue("'" + chronoField59 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField59.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime61);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 3601000000001L + "'", long62 == 3601000000001L);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(periodTemporalQuery64);
        org.junit.Assert.assertNotNull(period65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(period68);
        org.junit.Assert.assertTrue("'" + chronoField69 + "' != '" + java.time.temporal.ChronoField.SECOND_OF_DAY + "'", chronoField69.equals(java.time.temporal.ChronoField.SECOND_OF_DAY));
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertNotNull(offsetDateTime73);
        org.junit.Assert.assertNotNull(localDate74);
        org.junit.Assert.assertNotNull(offsetDateTime75);
        org.junit.Assert.assertNotNull(localDate76);
        org.junit.Assert.assertNotNull(offsetDateTime77);
        org.junit.Assert.assertTrue("'" + chronoField78 + "' != '" + java.time.temporal.ChronoField.HOUR_OF_DAY + "'", chronoField78.equals(java.time.temporal.ChronoField.HOUR_OF_DAY));
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str81 + "' != '" + "2022-02-21T09:42:48.358Z" + "'", str81, "2022-02-21T09:42:48.358Z");
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + isoEra83 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra83.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertNotNull(dateTimeFormatter84);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "ParseCaseSensitive(false)(Value(Year,4,10,EXCEEDS_PAD)'-'Value(MonthOfYear,2)'-'Value(DayOfMonth,2))[Offset(+HH:MM:ss,'Z')]" + "'", str85, "ParseCaseSensitive(false)(Value(Year,4,10,EXCEEDS_PAD)'-'Value(MonthOfYear,2)'-'Value(DayOfMonth,2))[Offset(+HH:MM:ss,'Z')]");
        org.junit.Assert.assertNotNull(localDateTime86);
        org.junit.Assert.assertNotNull(periodTemporalQuery87);
        org.junit.Assert.assertNotNull(period88);
        org.junit.Assert.assertNotNull(format89);
        org.junit.Assert.assertNotNull(period90);
        org.junit.Assert.assertNotNull(period91);
        org.junit.Assert.assertNotNull(period92);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 1728000 + "'", int94 == 1728000);
        org.junit.Assert.assertNotNull(localDate97);
    }

    @Test
    public void test6015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6015");
        java.time.Clock clock4 = java.time.Clock.systemUTC();
        java.time.OffsetTime offsetTime5 = java.time.OffsetTime.now(clock4);
        int int6 = offsetTime5.getHour();
        java.time.Instant instant7 = java.time.Instant.now();
        java.time.Instant instant8 = java.time.Instant.now();
        boolean boolean9 = instant7.isAfter(instant8);
        java.time.LocalDate localDate11 = java.time.LocalDate.ofEpochDay((long) ' ');
        int int12 = localDate11.getMonthValue();
        org.joda.time.Period period13 = org.joda.time.Period.ZERO;
        org.joda.time.Period period14 = period13.normalizedStandard();
        org.joda.time.Period period16 = period13.plusHours(2);
        java.time.chrono.IsoEra isoEra17 = java.time.chrono.IsoEra.CE;
        boolean boolean18 = period16.equals((java.lang.Object) isoEra17);
        java.time.LocalTime localTime23 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime24 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime23);
        java.time.LocalTime localTime29 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime30 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime29);
        java.time.temporal.ChronoField chronoField31 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime33 = localTime29.with((java.time.temporal.TemporalField) chronoField31, (long) (short) 1);
        long long34 = localTime23.getLong((java.time.temporal.TemporalField) chronoField31);
        boolean boolean35 = isoEra17.isSupported((java.time.temporal.TemporalField) chronoField31);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery36 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period37 = isoEra17.query(periodTemporalQuery36);
        boolean boolean38 = period37.isNegative();
        java.time.Period period40 = period37.plusDays((long) ' ');
        java.time.temporal.ChronoField chronoField41 = java.time.temporal.ChronoField.SECOND_OF_DAY;
        boolean boolean42 = period37.equals((java.lang.Object) chronoField41);
        boolean boolean43 = localDate11.isSupported((java.time.temporal.TemporalField) chronoField41);
        java.time.temporal.TemporalUnit temporalUnit44 = chronoField41.getRangeUnit();
        java.time.Instant instant45 = instant8.truncatedTo(temporalUnit44);
        java.time.ZoneOffset zoneOffset48 = java.time.ZoneOffset.ofHoursMinutes(1, 10);
        java.time.LocalDate localDate49 = java.time.LocalDate.now((java.time.ZoneId) zoneOffset48);
        java.time.ZonedDateTime zonedDateTime50 = java.time.ZonedDateTime.ofInstant(instant45, (java.time.ZoneId) zoneOffset48);
        java.time.ZonedDateTime zonedDateTime51 = java.time.ZonedDateTime.now((java.time.ZoneId) zoneOffset48);
        java.time.OffsetTime offsetTime52 = offsetTime5.withOffsetSameInstant(zoneOffset48);
        java.time.OffsetTime offsetTime53 = java.time.OffsetTime.of(10, (int) (byte) 10, (int) (byte) 10, 33, zoneOffset48);
        org.junit.Assert.assertNotNull(clock4);
        org.junit.Assert.assertNotNull(offsetTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 9 + "'", int6 == 9);
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertNotNull(instant8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertTrue("'" + isoEra17 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra17.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(localTime23);
        org.junit.Assert.assertNotNull(localTime24);
        org.junit.Assert.assertNotNull(localTime29);
        org.junit.Assert.assertNotNull(localTime30);
        org.junit.Assert.assertTrue("'" + chronoField31 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField31.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime33);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 3601000000001L + "'", long34 == 3601000000001L);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(periodTemporalQuery36);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertTrue("'" + chronoField41 + "' != '" + java.time.temporal.ChronoField.SECOND_OF_DAY + "'", chronoField41.equals(java.time.temporal.ChronoField.SECOND_OF_DAY));
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + temporalUnit44 + "' != '" + java.time.temporal.ChronoUnit.DAYS + "'", temporalUnit44.equals(java.time.temporal.ChronoUnit.DAYS));
        org.junit.Assert.assertNotNull(instant45);
        org.junit.Assert.assertNotNull(zoneOffset48);
        org.junit.Assert.assertNotNull(localDate49);
        org.junit.Assert.assertNotNull(zonedDateTime50);
        org.junit.Assert.assertNotNull(zonedDateTime51);
        org.junit.Assert.assertNotNull(offsetTime52);
        org.junit.Assert.assertNotNull(offsetTime53);
    }

    @Test
    public void test6016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6016");
        java.net.UnknownHostException unknownHostException2 = new java.net.UnknownHostException("{PT2147483647M=Z, 01:00:01.000000001=117}");
        java.io.IOException iOException3 = new java.io.IOException("OptionalLong.empty", (java.lang.Throwable) unknownHostException2);
    }

    @Test
    public void test6017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6017");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.nio.LongBuffer longBuffer3 = java.nio.LongBuffer.allocate((int) (short) 0);
        java.nio.Buffer buffer4 = longBuffer3.mark();
        boolean boolean5 = properties1.containsKey((java.lang.Object) longBuffer3);
        java.nio.charset.Charset charset6 = java.nio.charset.Charset.defaultCharset();
        boolean boolean7 = charset6.canEncode();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) 3, chronology9);
        org.joda.time.DateTime.Property property11 = dateTime10.dayOfYear();
        java.lang.Object obj12 = properties1.getOrDefault((java.lang.Object) boolean7, (java.lang.Object) property11);
        properties1.clear();
        int int14 = properties1.size();
        java.io.PrintStream printStream16 = new java.io.PrintStream("subject:\n (GERMAN)");
        printStream16.write((int) '#');
        java.security.CodeSource codeSource20 = null;
        java.security.PermissionCollection permissionCollection21 = null;
        java.security.ProtectionDomain protectionDomain22 = new java.security.ProtectionDomain(codeSource20, permissionCollection21);
        java.lang.ClassLoader classLoader23 = protectionDomain22.getClassLoader();
        java.security.CodeSource codeSource24 = null;
        java.security.PermissionCollection permissionCollection25 = null;
        java.security.ProtectionDomain protectionDomain26 = new java.security.ProtectionDomain(codeSource24, permissionCollection25);
        java.security.Permission permission27 = null;
        boolean boolean28 = protectionDomain26.implies(permission27);
        java.security.CodeSource codeSource29 = null;
        java.security.PermissionCollection permissionCollection30 = null;
        java.security.ProtectionDomain protectionDomain31 = new java.security.ProtectionDomain(codeSource29, permissionCollection30);
        java.security.CodeSource codeSource32 = null;
        java.security.PermissionCollection permissionCollection33 = null;
        java.security.ProtectionDomain protectionDomain34 = new java.security.ProtectionDomain(codeSource32, permissionCollection33);
        java.security.ProtectionDomain[] protectionDomainArray35 = new java.security.ProtectionDomain[] { protectionDomain22, protectionDomain26, protectionDomain31, protectionDomain34 };
        java.security.AccessControlContext accessControlContext36 = new java.security.AccessControlContext(protectionDomainArray35);
        java.io.PrintStream printStream37 = printStream16.printf("Property[secondOfMinute]", (java.lang.Object[]) protectionDomainArray35);
        properties1.list(printStream37);
        printStream37.print(241);
        java.nio.charset.Charset charset41 = java.nio.charset.Charset.defaultCharset();
        java.nio.charset.CharsetDecoder charsetDecoder42 = charset41.newDecoder();
        java.nio.charset.Charset charset43 = java.nio.charset.Charset.defaultCharset();
        boolean boolean44 = charset41.contains(charset43);
        java.nio.charset.CharsetEncoder charsetEncoder45 = charset41.newEncoder();
        byte[] byteArray46 = charsetEncoder45.replacement();
        // The following exception was thrown during execution in test generation
        try {
            printStream37.write(byteArray46, (-201), 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(longBuffer3);
        org.junit.Assert.assertNotNull(buffer4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(charset6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(obj12);
        org.junit.Assert.assertEquals(obj12.toString(), "Property[dayOfYear]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj12), "Property[dayOfYear]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj12), "Property[dayOfYear]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertEquals(protectionDomain22.toString(), "ProtectionDomain  null\n null\n <no principals>\n null\n");
        org.junit.Assert.assertNull(classLoader23);
        org.junit.Assert.assertEquals(protectionDomain26.toString(), "ProtectionDomain  null\n null\n <no principals>\n null\n");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals(protectionDomain31.toString(), "ProtectionDomain  null\n null\n <no principals>\n null\n");
        org.junit.Assert.assertEquals(protectionDomain34.toString(), "ProtectionDomain  null\n null\n <no principals>\n null\n");
        org.junit.Assert.assertNotNull(protectionDomainArray35);
        org.junit.Assert.assertNotNull(printStream37);
        org.junit.Assert.assertNotNull(charset41);
        org.junit.Assert.assertNotNull(charsetDecoder42);
        org.junit.Assert.assertNotNull(charset43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(charsetEncoder45);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[63]");
    }

    @Test
    public void test6018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6018");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.Duration duration2 = new org.joda.time.Duration(readableInstant0, readableInstant1);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = duration2.toPeriodTo(readableInstant3, periodType4);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.Duration duration8 = new org.joda.time.Duration(readableInstant6, readableInstant7);
        long long9 = duration8.getMillis();
        boolean boolean10 = duration2.isShorterThan((org.joda.time.ReadableDuration) duration8);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) 3, chronology12);
        org.joda.time.DateTime.Property property14 = dateTime13.dayOfYear();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight((java.lang.Object) dateTime13, chronology15);
        org.joda.time.MutableDateTime mutableDateTime17 = dateTime13.toMutableDateTime();
        mutableDateTime17.addYears((int) (short) 100);
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime17.dayOfWeek();
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime17.year();
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime17.weekyear();
        boolean boolean23 = duration2.equals((java.lang.Object) mutableDateTime17);
        mutableDateTime17.addMonths((int) ' ');
        org.joda.time.DateTimeZone dateTimeZone26 = mutableDateTime17.getZone();
        mutableDateTime17.setWeekyear(0);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(dateTimeZone26);
    }

    @Test
    public void test6019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6019");
        org.joda.time.TimeOfDay timeOfDay1 = org.joda.time.TimeOfDay.fromMillisOfDay((long) (short) 0);
        org.joda.time.TimeOfDay timeOfDay3 = org.joda.time.TimeOfDay.fromMillisOfDay((long) (short) 0);
        org.joda.time.Hours hours4 = org.joda.time.Hours.hoursBetween((org.joda.time.ReadablePartial) timeOfDay1, (org.joda.time.ReadablePartial) timeOfDay3);
        org.joda.time.DurationFieldType durationFieldType5 = org.joda.time.DurationFieldType.hours();
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay3.withFieldAdded(durationFieldType5, (int) (byte) 0);
        int int8 = timeOfDay3.getMillisOfSecond();
        org.joda.time.TimeOfDay timeOfDay10 = timeOfDay3.plusHours(9);
        org.joda.time.TimeOfDay.Property property11 = timeOfDay3.secondOfMinute();
        java.time.ZoneOffset zoneOffset14 = java.time.ZoneOffset.ofHoursMinutes(1, 10);
        java.time.LocalDate localDate15 = java.time.LocalDate.now((java.time.ZoneId) zoneOffset14);
        boolean boolean16 = property11.equals((java.lang.Object) localDate15);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = property11.getFieldType();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) 3, chronology19);
        org.joda.time.DateTime.Property property21 = dateTime20.dayOfYear();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateMidnight dateMidnight23 = new org.joda.time.DateMidnight((java.lang.Object) dateTime20, chronology22);
        org.joda.time.MutableDateTime mutableDateTime24 = dateTime20.toMutableDateTime();
        mutableDateTime24.addYears((int) (short) 100);
        org.joda.time.MutableDateTime.Property property27 = mutableDateTime24.dayOfWeek();
        org.joda.time.MutableDateTime.Property property28 = mutableDateTime24.year();
        java.util.TimeZone timeZone29 = null;
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forTimeZone(timeZone29);
        mutableDateTime24.setZone(dateTimeZone30);
        java.util.Locale locale33 = java.util.Locale.TAIWAN;
        java.lang.String str34 = dateTimeZone30.getShortName((long) 64, locale33);
        int int35 = property11.getMaximumTextLength(locale33);
        org.joda.time.TimeOfDay timeOfDay36 = property11.getTimeOfDay();
        org.joda.time.DurationField durationField37 = property11.getRangeDurationField();
        int int38 = property11.get();
        org.junit.Assert.assertNotNull(timeOfDay1);
        org.junit.Assert.assertNotNull(timeOfDay3);
        org.junit.Assert.assertNotNull(hours4);
        org.junit.Assert.assertNotNull(durationFieldType5);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(zoneOffset14);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(mutableDateTime24);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "+00:00" + "'", str34, "+00:00");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2 + "'", int35 == 2);
        org.junit.Assert.assertNotNull(timeOfDay36);
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
    }

    @Test
    public void test6020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6020");
        java.net.InetAddress inetAddress0 = java.net.InetAddress.getLocalHost();
        java.lang.String str1 = inetAddress0.toString();
        boolean boolean2 = inetAddress0.isSiteLocalAddress();
        org.junit.Assert.assertNotNull(inetAddress0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "599b081c1808/172.17.0.2" + "'", str1, "599b081c1808/172.17.0.2");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
    }

    @Test
    public void test6021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6021");
        java.nio.charset.Charset charset0 = java.nio.charset.Charset.defaultCharset();
        java.nio.charset.CharsetDecoder charsetDecoder1 = charset0.newDecoder();
        java.util.concurrent.TimeUnit timeUnit2 = java.util.concurrent.TimeUnit.NANOSECONDS;
        long long4 = timeUnit2.toNanos((long) (short) 10);
        boolean boolean5 = charset0.equals((java.lang.Object) long4);
        java.nio.charset.CharsetEncoder charsetEncoder6 = charset0.newEncoder();
        java.nio.ByteBuffer byteBuffer8 = charset0.encode("2022-02-21");
        org.joda.time.Period period9 = org.joda.time.Period.ZERO;
        org.joda.time.Period period10 = period9.normalizedStandard();
        org.joda.time.Period period12 = period9.plusHours(2);
        java.time.chrono.IsoEra isoEra13 = java.time.chrono.IsoEra.CE;
        boolean boolean14 = period12.equals((java.lang.Object) isoEra13);
        java.time.LocalTime localTime19 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime20 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime19);
        java.time.LocalTime localTime25 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime26 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime25);
        java.time.temporal.ChronoField chronoField27 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime29 = localTime25.with((java.time.temporal.TemporalField) chronoField27, (long) (short) 1);
        long long30 = localTime19.getLong((java.time.temporal.TemporalField) chronoField27);
        boolean boolean31 = isoEra13.isSupported((java.time.temporal.TemporalField) chronoField27);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery32 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period33 = isoEra13.query(periodTemporalQuery32);
        boolean boolean34 = period33.isNegative();
        java.time.Period period36 = period33.plusDays((long) ' ');
        boolean boolean37 = period33.isNegative();
        java.time.Period period39 = period33.minusYears((long) 10);
        org.joda.time.Period period40 = org.joda.time.Period.ZERO;
        org.joda.time.Period period41 = period40.normalizedStandard();
        org.joda.time.Period period43 = period40.plusHours(2);
        java.time.chrono.IsoEra isoEra44 = java.time.chrono.IsoEra.CE;
        boolean boolean45 = period43.equals((java.lang.Object) isoEra44);
        java.time.LocalTime localTime50 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime51 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime50);
        java.time.LocalTime localTime56 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime57 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime56);
        java.time.temporal.ChronoField chronoField58 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime60 = localTime56.with((java.time.temporal.TemporalField) chronoField58, (long) (short) 1);
        long long61 = localTime50.getLong((java.time.temporal.TemporalField) chronoField58);
        boolean boolean62 = isoEra44.isSupported((java.time.temporal.TemporalField) chronoField58);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery63 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period64 = isoEra44.query(periodTemporalQuery63);
        java.time.chrono.ChronoPeriod chronoPeriod65 = period39.minus((java.time.temporal.TemporalAmount) period64);
        java.time.chrono.ChronoPeriod chronoPeriod67 = period39.multipliedBy(4096);
        int int68 = period39.getMonths();
        java.time.chrono.IsoChronology isoChronology69 = period39.getChronology();
        java.time.LocalDateTime localDateTime70 = java.time.LocalDateTime.now();
        java.time.temporal.ChronoField chronoField71 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime73 = localDateTime70.with((java.time.temporal.TemporalField) chronoField71, (long) 10);
        java.time.temporal.ValueRange valueRange74 = isoChronology69.range(chronoField71);
        java.nio.ByteBuffer byteBuffer76 = java.nio.ByteBuffer.allocate(17);
        boolean boolean77 = isoChronology69.equals((java.lang.Object) byteBuffer76);
        java.time.format.TextStyle textStyle78 = java.time.format.TextStyle.SHORT_STANDALONE;
        java.time.format.TextStyle textStyle79 = textStyle78.asStandalone();
        java.time.format.TextStyle textStyle80 = textStyle78.asNormal();
        org.joda.time.format.PeriodPrinter periodPrinter81 = null;
        org.joda.time.format.PeriodParser periodParser82 = null;
        org.joda.time.format.PeriodFormatter periodFormatter83 = new org.joda.time.format.PeriodFormatter(periodPrinter81, periodParser82);
        org.joda.time.PeriodType periodType84 = org.joda.time.PeriodType.years();
        org.joda.time.format.PeriodFormatter periodFormatter85 = periodFormatter83.withParseType(periodType84);
        java.util.Locale locale87 = new java.util.Locale("hi!");
        org.joda.time.format.PeriodFormatter periodFormatter88 = periodFormatter83.withLocale(locale87);
        java.util.Locale locale90 = new java.util.Locale("hi!");
        boolean boolean91 = locale90.hasExtensions();
        java.time.format.DecimalStyle decimalStyle92 = java.time.format.DecimalStyle.of(locale90);
        java.util.Set<java.lang.String> strSet93 = locale90.getUnicodeLocaleKeys();
        java.lang.String str94 = locale90.getVariant();
        java.lang.String str95 = locale87.getDisplayVariant(locale90);
        java.lang.String str96 = isoChronology69.getDisplayName(textStyle80, locale87);
        java.lang.String str97 = charset0.displayName(locale87);
        org.junit.Assert.assertNotNull(charset0);
        org.junit.Assert.assertNotNull(charsetDecoder1);
        org.junit.Assert.assertNotNull(timeUnit2);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10L + "'", long4 == 10L);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(charsetEncoder6);
        org.junit.Assert.assertNotNull(byteBuffer8);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertTrue("'" + isoEra13 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra13.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertNotNull(localTime25);
        org.junit.Assert.assertNotNull(localTime26);
        org.junit.Assert.assertTrue("'" + chronoField27 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField27.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime29);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 3601000000001L + "'", long30 == 3601000000001L);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(periodTemporalQuery32);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertTrue("'" + isoEra44 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra44.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(localTime50);
        org.junit.Assert.assertNotNull(localTime51);
        org.junit.Assert.assertNotNull(localTime56);
        org.junit.Assert.assertNotNull(localTime57);
        org.junit.Assert.assertTrue("'" + chronoField58 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField58.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime60);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 3601000000001L + "'", long61 == 3601000000001L);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(periodTemporalQuery63);
        org.junit.Assert.assertNotNull(period64);
        org.junit.Assert.assertNotNull(chronoPeriod65);
        org.junit.Assert.assertNotNull(chronoPeriod67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(isoChronology69);
        org.junit.Assert.assertNotNull(localDateTime70);
        org.junit.Assert.assertTrue("'" + chronoField71 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField71.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime73);
        org.junit.Assert.assertNotNull(valueRange74);
        org.junit.Assert.assertNotNull(byteBuffer76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + textStyle78 + "' != '" + java.time.format.TextStyle.SHORT_STANDALONE + "'", textStyle78.equals(java.time.format.TextStyle.SHORT_STANDALONE));
        org.junit.Assert.assertTrue("'" + textStyle79 + "' != '" + java.time.format.TextStyle.SHORT_STANDALONE + "'", textStyle79.equals(java.time.format.TextStyle.SHORT_STANDALONE));
        org.junit.Assert.assertTrue("'" + textStyle80 + "' != '" + java.time.format.TextStyle.SHORT + "'", textStyle80.equals(java.time.format.TextStyle.SHORT));
        org.junit.Assert.assertNotNull(periodType84);
        org.junit.Assert.assertNotNull(periodFormatter85);
        org.junit.Assert.assertEquals(locale87.toString(), "hi!");
        org.junit.Assert.assertNotNull(periodFormatter88);
        org.junit.Assert.assertEquals(locale90.toString(), "hi!");
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(decimalStyle92);
        org.junit.Assert.assertNotNull(strSet93);
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "" + "'", str94, "");
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "" + "'", str95, "");
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "ISO" + "'", str96, "ISO");
        org.junit.Assert.assertEquals("'" + str97 + "' != '" + "US-ASCII" + "'", str97, "US-ASCII");
    }

    @Test
    public void test6022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6022");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.LocalTime localTime4 = new org.joda.time.LocalTime((long) 0, chronology3);
        org.joda.time.Chronology chronology5 = localTime4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.weekyearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime7 = org.joda.time.MutableDateTime.now(chronology5);
        org.joda.time.DateTimeField dateTimeField8 = chronology5.monthOfYear();
        java.util.Locale locale9 = java.util.Locale.getDefault();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket((long) 28, chronology5, locale9, (java.lang.Integer) 0);
        java.util.Locale locale12 = java.util.Locale.ITALY;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket13 = new org.joda.time.format.DateTimeParserBucket(11724424192L, chronology5, locale12);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) 3, chronology15);
        org.joda.time.DateTime.Property property17 = dateTime16.dayOfYear();
        org.joda.time.Interval interval18 = property17.toInterval();
        org.joda.time.DateTimeField dateTimeField19 = property17.getField();
        org.joda.time.DateTime dateTime21 = property17.addToCopy((long) (byte) 1);
        org.joda.time.DateTime dateTime23 = dateTime21.withYear(4);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((long) 3, chronology25);
        org.joda.time.Period period27 = org.joda.time.Period.ZERO;
        org.joda.time.Period period28 = period27.normalizedStandard();
        org.joda.time.Period period30 = period28.minusMinutes((int) ' ');
        org.joda.time.Period period32 = period30.minusMonths((int) (byte) 0);
        org.joda.time.PeriodType periodType33 = period32.getPeriodType();
        org.joda.time.DateTime dateTime34 = dateTime26.minus((org.joda.time.ReadablePeriod) period32);
        org.joda.time.Duration duration35 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime23, (org.joda.time.ReadableInstant) dateTime34);
        org.joda.time.DateTime dateTime37 = dateTime23.withMillisOfSecond((int) (byte) 10);
        org.joda.time.ReadableInstant readableInstant38 = null;
        org.joda.time.ReadableInstant readableInstant39 = null;
        org.joda.time.Duration duration40 = new org.joda.time.Duration(readableInstant38, readableInstant39);
        org.joda.time.ReadableInstant readableInstant41 = null;
        org.joda.time.PeriodType periodType42 = null;
        org.joda.time.Period period43 = duration40.toPeriodTo(readableInstant41, periodType42);
        org.joda.time.ReadableInstant readableInstant44 = null;
        org.joda.time.ReadableInstant readableInstant45 = null;
        org.joda.time.Duration duration46 = new org.joda.time.Duration(readableInstant44, readableInstant45);
        long long47 = duration46.getMillis();
        boolean boolean48 = duration40.isShorterThan((org.joda.time.ReadableDuration) duration46);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime((long) 3, chronology50);
        org.joda.time.DateTime.Property property52 = dateTime51.dayOfYear();
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.DateMidnight dateMidnight54 = new org.joda.time.DateMidnight((java.lang.Object) dateTime51, chronology53);
        org.joda.time.MutableDateTime mutableDateTime55 = dateTime51.toMutableDateTime();
        mutableDateTime55.addYears((int) (short) 100);
        org.joda.time.MutableDateTime.Property property58 = mutableDateTime55.dayOfWeek();
        org.joda.time.MutableDateTime.Property property59 = mutableDateTime55.year();
        org.joda.time.MutableDateTime.Property property60 = mutableDateTime55.weekyear();
        boolean boolean61 = duration40.equals((java.lang.Object) mutableDateTime55);
        mutableDateTime55.addMonths((int) ' ');
        mutableDateTime55.add((long) (byte) 10);
        org.joda.time.Period period66 = org.joda.time.Period.ZERO;
        org.joda.time.Period period67 = period66.normalizedStandard();
        org.joda.time.Period period69 = period66.plusHours(2);
        java.time.chrono.IsoEra isoEra70 = java.time.chrono.IsoEra.CE;
        boolean boolean71 = period69.equals((java.lang.Object) isoEra70);
        int int72 = period69.getMinutes();
        mutableDateTime55.add((org.joda.time.ReadablePeriod) period69);
        java.util.TimeZone timeZone75 = null;
        org.joda.time.DateTimeZone dateTimeZone76 = org.joda.time.DateTimeZone.forTimeZone(timeZone75);
        org.joda.time.DateMidnight dateMidnight77 = new org.joda.time.DateMidnight((long) 1970, dateTimeZone76);
        long long80 = dateTimeZone76.convertLocalToUTC((long) 3, false);
        long long83 = dateTimeZone76.convertLocalToUTC(0L, true);
        mutableDateTime55.setZoneRetainFields(dateTimeZone76);
        java.lang.String str85 = dateTimeZone76.toString();
        org.joda.time.chrono.EthiopicChronology ethiopicChronology86 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone76);
        org.joda.time.DateTimeField dateTimeField87 = ethiopicChronology86.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone88 = ethiopicChronology86.getZone();
        org.joda.time.DateTimeField dateTimeField89 = ethiopicChronology86.era();
        org.joda.time.DateTimeField dateTimeField90 = ethiopicChronology86.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone91 = ethiopicChronology86.getZone();
        org.joda.time.DateTime dateTime92 = dateTime23.withZone(dateTimeZone91);
        dateTimeParserBucket13.setZone(dateTimeZone91);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(locale9);
// flaky:         org.junit.Assert.assertEquals(locale9.toString(), "");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "it_IT");
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(periodType33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(mutableDateTime55);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(period66);
        org.junit.Assert.assertNotNull(period67);
        org.junit.Assert.assertNotNull(period69);
        org.junit.Assert.assertTrue("'" + isoEra70 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra70.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone76);
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + 3L + "'", long80 == 3L);
        org.junit.Assert.assertTrue("'" + long83 + "' != '" + 0L + "'", long83 == 0L);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "Etc/UTC" + "'", str85, "Etc/UTC");
        org.junit.Assert.assertNotNull(ethiopicChronology86);
        org.junit.Assert.assertNotNull(dateTimeField87);
        org.junit.Assert.assertNotNull(dateTimeZone88);
        org.junit.Assert.assertNotNull(dateTimeField89);
        org.junit.Assert.assertNotNull(dateTimeField90);
        org.junit.Assert.assertNotNull(dateTimeZone91);
        org.junit.Assert.assertNotNull(dateTime92);
    }

    @Test
    public void test6023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6023");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.Duration duration2 = new org.joda.time.Duration(readableInstant0, readableInstant1);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = duration2.toPeriodTo(readableInstant3, periodType4);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.Duration duration8 = new org.joda.time.Duration(readableInstant6, readableInstant7);
        long long9 = duration8.getMillis();
        boolean boolean10 = duration2.isShorterThan((org.joda.time.ReadableDuration) duration8);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) 3, chronology12);
        org.joda.time.DateTime.Property property14 = dateTime13.dayOfYear();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight((java.lang.Object) dateTime13, chronology15);
        org.joda.time.MutableDateTime mutableDateTime17 = dateTime13.toMutableDateTime();
        mutableDateTime17.addYears((int) (short) 100);
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime17.dayOfWeek();
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime17.year();
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime17.weekyear();
        boolean boolean23 = duration2.equals((java.lang.Object) mutableDateTime17);
        mutableDateTime17.setYear(365);
        mutableDateTime17.add((long) 21);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime17.setDayOfWeek(41);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 41 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test6024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6024");
        java.util.GregorianCalendar gregorianCalendar5 = new java.util.GregorianCalendar(12, 4096, 7, (-1), (int) (short) 10);
        int int6 = gregorianCalendar5.getWeeksInWeekYear();
        java.lang.String str7 = gregorianCalendar5.getCalendarType();
        java.time.ZonedDateTime zonedDateTime8 = gregorianCalendar5.toZonedDateTime();
        java.util.GregorianCalendar gregorianCalendar14 = new java.util.GregorianCalendar(12, 4096, 7, (-1), (int) (short) 10);
        int int15 = gregorianCalendar14.getWeeksInWeekYear();
        java.lang.String str16 = gregorianCalendar14.getCalendarType();
        java.time.ZonedDateTime zonedDateTime17 = gregorianCalendar14.toZonedDateTime();
        int int18 = zonedDateTime8.compareTo((java.time.chrono.ChronoZonedDateTime<java.time.LocalDate>) zonedDateTime17);
        java.time.ZonedDateTime zonedDateTime20 = zonedDateTime8.plusDays((long) 2022);
        java.time.Instant instant21 = zonedDateTime8.toInstant();
        java.time.chrono.Chronology chronology22 = zonedDateTime8.getChronology();
        java.util.GregorianCalendar gregorianCalendar28 = new java.util.GregorianCalendar(12, 4096, 7, (-1), (int) (short) 10);
        int int29 = gregorianCalendar28.getWeeksInWeekYear();
        java.lang.String str30 = gregorianCalendar28.getCalendarType();
        java.time.ZonedDateTime zonedDateTime31 = gregorianCalendar28.toZonedDateTime();
        java.time.ZonedDateTime zonedDateTime33 = zonedDateTime31.minusMonths((long) 10);
        boolean boolean34 = zonedDateTime8.isBefore((java.time.chrono.ChronoZonedDateTime<java.time.LocalDate>) zonedDateTime33);
        java.time.temporal.ChronoField chronoField35 = java.time.temporal.ChronoField.HOUR_OF_DAY;
        java.time.temporal.ValueRange valueRange36 = chronoField35.range();
        java.time.temporal.TemporalUnit temporalUnit37 = chronoField35.getRangeUnit();
        java.time.ZonedDateTime zonedDateTime38 = zonedDateTime8.truncatedTo(temporalUnit37);
        java.time.ZonedDateTime zonedDateTime40 = zonedDateTime8.plusSeconds((long) 600);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 52 + "'", int6 == 52);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "gregory" + "'", str7, "gregory");
        org.junit.Assert.assertNotNull(zonedDateTime8);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 52 + "'", int15 == 52);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "gregory" + "'", str16, "gregory");
        org.junit.Assert.assertNotNull(zonedDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(zonedDateTime20);
        org.junit.Assert.assertNotNull(instant21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 52 + "'", int29 == 52);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "gregory" + "'", str30, "gregory");
        org.junit.Assert.assertNotNull(zonedDateTime31);
        org.junit.Assert.assertNotNull(zonedDateTime33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + chronoField35 + "' != '" + java.time.temporal.ChronoField.HOUR_OF_DAY + "'", chronoField35.equals(java.time.temporal.ChronoField.HOUR_OF_DAY));
        org.junit.Assert.assertNotNull(valueRange36);
        org.junit.Assert.assertTrue("'" + temporalUnit37 + "' != '" + java.time.temporal.ChronoUnit.DAYS + "'", temporalUnit37.equals(java.time.temporal.ChronoUnit.DAYS));
        org.junit.Assert.assertNotNull(zonedDateTime38);
        org.junit.Assert.assertNotNull(zonedDateTime40);
    }

    @Test
    public void test6025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6025");
        java.time.Duration duration1 = java.time.Duration.ofMinutes((long) 4096);
        // The following exception was thrown during execution in test generation
        try {
            java.time.Period period2 = java.time.Period.from((java.time.temporal.TemporalAmount) duration1);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Unit must be Years, Months or Days, but was Seconds");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration1);
    }

    @Test
    public void test6026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6026");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Locale locale3 = java.util.Locale.JAPAN;
        java.util.Locale[] localeArray4 = new java.util.Locale[] { locale3 };
        java.util.ArrayList<java.util.Locale> localeList5 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList5, localeArray4);
        java.util.List<java.util.Locale> localeList7 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.util.Locale>) localeList5);
        int int9 = localeList5.indexOf((java.lang.Object) (byte) -1);
        localeList5.clear();
        java.nio.charset.Charset charset11 = java.nio.charset.Charset.defaultCharset();
        java.nio.charset.CharsetDecoder charsetDecoder12 = charset11.newDecoder();
        java.nio.charset.Charset charset13 = java.nio.charset.Charset.defaultCharset();
        boolean boolean14 = charset11.contains(charset13);
        java.nio.charset.CharsetEncoder charsetEncoder15 = charset11.newEncoder();
        byte[] byteArray16 = charsetEncoder15.replacement();
        java.nio.charset.Charset charset17 = java.nio.charset.Charset.defaultCharset();
        java.nio.charset.CharsetDecoder charsetDecoder18 = charset17.newDecoder();
        float float19 = charsetDecoder18.maxCharsPerByte();
        float float20 = charsetDecoder18.averageCharsPerByte();
        java.nio.charset.CodingErrorAction codingErrorAction21 = charsetDecoder18.unmappableCharacterAction();
        java.nio.charset.CharsetEncoder charsetEncoder22 = charsetEncoder15.onUnmappableCharacter(codingErrorAction21);
        java.nio.charset.Charset charset23 = java.nio.charset.Charset.defaultCharset();
        java.nio.charset.CharsetDecoder charsetDecoder24 = charset23.newDecoder();
        java.nio.charset.Charset charset25 = java.nio.charset.Charset.defaultCharset();
        boolean boolean26 = charset23.contains(charset25);
        java.nio.charset.CharsetEncoder charsetEncoder27 = charset23.newEncoder();
        byte[] byteArray28 = charsetEncoder27.replacement();
        java.nio.charset.CharsetEncoder charsetEncoder29 = charsetEncoder15.replaceWith(byteArray28);
        java.io.OutputStream outputStream30 = null;
        java.io.FilterOutputStream filterOutputStream31 = new java.io.FilterOutputStream(outputStream30);
        byte[] byteArray33 = new byte[] { (byte) 100 };
        filterOutputStream31.write(byteArray33, (int) (byte) 0, (int) (byte) 0);
        java.nio.charset.CharsetEncoder charsetEncoder37 = charsetEncoder15.replaceWith(byteArray33);
        int int38 = localeList5.lastIndexOf((java.lang.Object) byteArray33);
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(localeArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(localeList7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(charset11);
        org.junit.Assert.assertNotNull(charsetDecoder12);
        org.junit.Assert.assertNotNull(charset13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(charsetEncoder15);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[63]");
        org.junit.Assert.assertNotNull(charset17);
        org.junit.Assert.assertNotNull(charsetDecoder18);
        org.junit.Assert.assertTrue("'" + float19 + "' != '" + 1.0f + "'", float19 == 1.0f);
        org.junit.Assert.assertTrue("'" + float20 + "' != '" + 1.0f + "'", float20 == 1.0f);
        org.junit.Assert.assertNotNull(codingErrorAction21);
        org.junit.Assert.assertNotNull(charsetEncoder22);
        org.junit.Assert.assertNotNull(charset23);
        org.junit.Assert.assertNotNull(charsetDecoder24);
        org.junit.Assert.assertNotNull(charset25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(charsetEncoder27);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[63]");
        org.junit.Assert.assertNotNull(charsetEncoder29);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[100]");
        org.junit.Assert.assertNotNull(charsetEncoder37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
    }

    @Test
    public void test6027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6027");
        java.time.Instant instant0 = java.time.Instant.now();
        java.nio.file.attribute.FileTime fileTime1 = java.nio.file.attribute.FileTime.from(instant0);
        org.joda.time.Period period2 = org.joda.time.Period.ZERO;
        org.joda.time.Period period3 = period2.normalizedStandard();
        org.joda.time.Period period5 = period2.plusHours(2);
        java.time.chrono.IsoEra isoEra6 = java.time.chrono.IsoEra.CE;
        boolean boolean7 = period5.equals((java.lang.Object) isoEra6);
        java.time.LocalTime localTime12 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime13 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime12);
        java.time.LocalTime localTime18 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime19 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime18);
        java.time.temporal.ChronoField chronoField20 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime22 = localTime18.with((java.time.temporal.TemporalField) chronoField20, (long) (short) 1);
        long long23 = localTime12.getLong((java.time.temporal.TemporalField) chronoField20);
        boolean boolean24 = isoEra6.isSupported((java.time.temporal.TemporalField) chronoField20);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery25 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period26 = isoEra6.query(periodTemporalQuery25);
        boolean boolean27 = period26.isNegative();
        java.time.Period period29 = period26.plusDays((long) ' ');
        java.time.temporal.ChronoField chronoField30 = java.time.temporal.ChronoField.SECOND_OF_DAY;
        boolean boolean31 = period26.equals((java.lang.Object) chronoField30);
        java.time.chrono.ChronoPeriod chronoPeriod32 = period26.negated();
        java.time.Instant instant33 = instant0.minus((java.time.temporal.TemporalAmount) chronoPeriod32);
        java.nio.file.attribute.FileTime fileTime34 = java.nio.file.attribute.FileTime.from(instant33);
        int int35 = instant33.getNano();
        org.junit.Assert.assertNotNull(instant0);
        org.junit.Assert.assertNotNull(fileTime1);
        org.junit.Assert.assertNotNull(period2);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertTrue("'" + isoEra6 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra6.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertTrue("'" + chronoField20 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField20.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 3601000000001L + "'", long23 == 3601000000001L);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(periodTemporalQuery25);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertTrue("'" + chronoField30 + "' != '" + java.time.temporal.ChronoField.SECOND_OF_DAY + "'", chronoField30.equals(java.time.temporal.ChronoField.SECOND_OF_DAY));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(chronoPeriod32);
        org.junit.Assert.assertNotNull(instant33);
        org.junit.Assert.assertNotNull(fileTime34);
// flaky:         org.junit.Assert.assertTrue("'" + int35 + "' != '" + 676000000 + "'", int35 == 676000000);
    }

    @Test
    public void test6028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6028");
        java.time.Instant instant0 = java.time.Instant.now();
        java.time.Instant instant1 = java.time.Instant.now();
        boolean boolean2 = instant0.isAfter(instant1);
        java.time.LocalDate localDate4 = java.time.LocalDate.ofEpochDay((long) ' ');
        int int5 = localDate4.getMonthValue();
        org.joda.time.Period period6 = org.joda.time.Period.ZERO;
        org.joda.time.Period period7 = period6.normalizedStandard();
        org.joda.time.Period period9 = period6.plusHours(2);
        java.time.chrono.IsoEra isoEra10 = java.time.chrono.IsoEra.CE;
        boolean boolean11 = period9.equals((java.lang.Object) isoEra10);
        java.time.LocalTime localTime16 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime17 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime16);
        java.time.LocalTime localTime22 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime23 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime22);
        java.time.temporal.ChronoField chronoField24 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime26 = localTime22.with((java.time.temporal.TemporalField) chronoField24, (long) (short) 1);
        long long27 = localTime16.getLong((java.time.temporal.TemporalField) chronoField24);
        boolean boolean28 = isoEra10.isSupported((java.time.temporal.TemporalField) chronoField24);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery29 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period30 = isoEra10.query(periodTemporalQuery29);
        boolean boolean31 = period30.isNegative();
        java.time.Period period33 = period30.plusDays((long) ' ');
        java.time.temporal.ChronoField chronoField34 = java.time.temporal.ChronoField.SECOND_OF_DAY;
        boolean boolean35 = period30.equals((java.lang.Object) chronoField34);
        boolean boolean36 = localDate4.isSupported((java.time.temporal.TemporalField) chronoField34);
        java.time.temporal.TemporalUnit temporalUnit37 = chronoField34.getRangeUnit();
        java.time.Instant instant38 = instant1.truncatedTo(temporalUnit37);
        java.time.ZoneOffset zoneOffset41 = java.time.ZoneOffset.ofHoursMinutes(1, 10);
        java.time.LocalDate localDate42 = java.time.LocalDate.now((java.time.ZoneId) zoneOffset41);
        java.time.ZonedDateTime zonedDateTime43 = java.time.ZonedDateTime.ofInstant(instant38, (java.time.ZoneId) zoneOffset41);
        java.time.ZoneOffset zoneOffset46 = java.time.ZoneOffset.ofHoursMinutes(1, 10);
        java.time.temporal.ChronoField chronoField47 = java.time.temporal.ChronoField.HOUR_OF_DAY;
        java.time.temporal.ValueRange valueRange48 = chronoField47.range();
        boolean boolean49 = zoneOffset46.isSupported((java.time.temporal.TemporalField) chronoField47);
        java.time.LocalDateTime localDateTime50 = java.time.LocalDateTime.now((java.time.ZoneId) zoneOffset46);
        int int51 = zoneOffset41.compareTo(zoneOffset46);
        org.junit.Assert.assertNotNull(instant0);
        org.junit.Assert.assertNotNull(instant1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2 + "'", int5 == 2);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertTrue("'" + isoEra10 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra10.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertNotNull(localTime23);
        org.junit.Assert.assertTrue("'" + chronoField24 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField24.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime26);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 3601000000001L + "'", long27 == 3601000000001L);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(periodTemporalQuery29);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertTrue("'" + chronoField34 + "' != '" + java.time.temporal.ChronoField.SECOND_OF_DAY + "'", chronoField34.equals(java.time.temporal.ChronoField.SECOND_OF_DAY));
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + temporalUnit37 + "' != '" + java.time.temporal.ChronoUnit.DAYS + "'", temporalUnit37.equals(java.time.temporal.ChronoUnit.DAYS));
        org.junit.Assert.assertNotNull(instant38);
        org.junit.Assert.assertNotNull(zoneOffset41);
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertNotNull(zonedDateTime43);
        org.junit.Assert.assertNotNull(zoneOffset46);
        org.junit.Assert.assertTrue("'" + chronoField47 + "' != '" + java.time.temporal.ChronoField.HOUR_OF_DAY + "'", chronoField47.equals(java.time.temporal.ChronoField.HOUR_OF_DAY));
        org.junit.Assert.assertNotNull(valueRange48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
    }

    @Test
    public void test6029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6029");
        java.util.stream.Stream.Builder<java.io.OutputStream> outputStreamBuilder0 = java.util.stream.Stream.builder();
        java.util.stream.Stream.Builder<java.io.OutputStream> outputStreamBuilder1 = java.util.stream.Stream.builder();
        java.util.function.Consumer<java.io.OutputStream> outputStreamConsumer2 = outputStreamBuilder0.andThen((java.util.function.Consumer<java.io.OutputStream>) outputStreamBuilder1);
        java.io.PrintStream printStream4 = new java.io.PrintStream("subject:\n (GERMAN)");
        java.util.stream.Stream.Builder<java.io.OutputStream> outputStreamBuilder5 = outputStreamBuilder1.add((java.io.OutputStream) printStream4);
        java.io.PrintWriter printWriter6 = new java.io.PrintWriter((java.io.OutputStream) printStream4);
        java.io.PrintWriter printWriter7 = new java.io.PrintWriter((java.io.Writer) printWriter6);
        printWriter7.println((long) 13);
        java.util.Locale locale10 = java.util.Locale.JAPANESE;
        java.util.GregorianCalendar gregorianCalendar11 = new java.util.GregorianCalendar(locale10);
        boolean boolean12 = locale10.hasExtensions();
        java.lang.String[] strArray15 = java.util.TimeZone.getAvailableIDs(32772);
        java.io.PrintWriter printWriter16 = printWriter7.format(locale10, "2022-02-21T09:36:48.006Z", (java.lang.Object[]) strArray15);
        boolean boolean17 = printWriter16.checkError();
        org.junit.Assert.assertNotNull(outputStreamBuilder0);
        org.junit.Assert.assertNotNull(outputStreamBuilder1);
        org.junit.Assert.assertNotNull(outputStreamConsumer2);
        org.junit.Assert.assertNotNull(outputStreamBuilder5);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ja");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(printWriter16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test6030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6030");
        java.time.Period period1 = java.time.Period.ofYears(28);
        java.time.chrono.IsoChronology isoChronology2 = period1.getChronology();
        java.util.List<java.time.chrono.Era> eraList3 = isoChronology2.eras();
        java.lang.String str4 = isoChronology2.toString();
        java.lang.String str5 = isoChronology2.getId();
        java.time.format.DateTimeFormatter dateTimeFormatter6 = java.time.format.DateTimeFormatter.ISO_DATE;
        java.lang.String str7 = dateTimeFormatter6.toString();
        java.time.LocalDateTime localDateTime8 = java.time.LocalDateTime.now();
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery9 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period10 = localDateTime8.query(periodTemporalQuery9);
        java.text.Format format11 = dateTimeFormatter6.toFormat(periodTemporalQuery9);
        java.time.chrono.Chronology chronology12 = dateTimeFormatter6.getChronology();
        java.time.format.DateTimeFormatter dateTimeFormatter13 = java.time.format.DateTimeFormatter.ISO_DATE;
        java.lang.String str14 = dateTimeFormatter13.toString();
        java.time.LocalDateTime localDateTime15 = java.time.LocalDateTime.now();
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery16 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period17 = localDateTime15.query(periodTemporalQuery16);
        java.text.Format format18 = dateTimeFormatter13.toFormat(periodTemporalQuery16);
        java.time.chrono.Chronology chronology19 = dateTimeFormatter13.getChronology();
        int int20 = chronology12.compareTo(chronology19);
        java.util.List<java.time.chrono.Era> eraList21 = chronology19.eras();
        java.time.ZoneOffset zoneOffset24 = java.time.ZoneOffset.ofHoursMinutes(1, 10);
        java.time.LocalDate localDate25 = java.time.LocalDate.now((java.time.ZoneId) zoneOffset24);
        java.time.Clock clock26 = java.time.Clock.system((java.time.ZoneId) zoneOffset24);
        java.time.ZoneOffset zoneOffset29 = java.time.ZoneOffset.ofHoursMinutes(1, 10);
        java.time.LocalDate localDate30 = java.time.LocalDate.now((java.time.ZoneId) zoneOffset29);
        java.time.Clock clock31 = java.time.Clock.system((java.time.ZoneId) zoneOffset29);
        int int32 = zoneOffset24.compareTo(zoneOffset29);
        java.time.chrono.ChronoLocalDate chronoLocalDate33 = chronology19.dateNow((java.time.ZoneId) zoneOffset29);
        java.time.chrono.IsoEra isoEra34 = java.time.chrono.IsoEra.CE;
        int int35 = isoEra34.getValue();
        int int36 = isoEra34.getValue();
        int int38 = chronology19.prolepticYear((java.time.chrono.Era) isoEra34, 0);
        java.time.LocalTime localTime43 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime44 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime43);
        java.time.temporal.ChronoField chronoField45 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime47 = localTime43.with((java.time.temporal.TemporalField) chronoField45, (long) (short) 1);
        java.util.Locale locale48 = java.util.Locale.GERMANY;
        java.lang.String str49 = chronoField45.getDisplayName(locale48);
        boolean boolean50 = isoEra34.isSupported((java.time.temporal.TemporalField) chronoField45);
        org.joda.time.Period period51 = org.joda.time.Period.ZERO;
        org.joda.time.Period period52 = period51.normalizedStandard();
        org.joda.time.Period period54 = period51.plusHours(2);
        java.time.chrono.IsoEra isoEra55 = java.time.chrono.IsoEra.CE;
        boolean boolean56 = period54.equals((java.lang.Object) isoEra55);
        java.time.LocalTime localTime61 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime62 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime61);
        java.time.LocalTime localTime67 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime68 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime67);
        java.time.temporal.ChronoField chronoField69 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime71 = localTime67.with((java.time.temporal.TemporalField) chronoField69, (long) (short) 1);
        long long72 = localTime61.getLong((java.time.temporal.TemporalField) chronoField69);
        boolean boolean73 = isoEra55.isSupported((java.time.temporal.TemporalField) chronoField69);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery74 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period75 = isoEra55.query(periodTemporalQuery74);
        boolean boolean76 = period75.isNegative();
        java.time.Period period78 = period75.plusDays((long) ' ');
        java.time.temporal.ChronoField chronoField79 = java.time.temporal.ChronoField.SECOND_OF_DAY;
        boolean boolean80 = period75.equals((java.lang.Object) chronoField79);
        int int82 = chronoField79.checkValidIntValue(0L);
        java.time.DayOfWeek dayOfWeek83 = java.time.DayOfWeek.THURSDAY;
        boolean boolean84 = chronoField79.isSupportedBy((java.time.temporal.TemporalAccessor) dayOfWeek83);
        boolean boolean85 = isoEra34.isSupported((java.time.temporal.TemporalField) chronoField79);
        int int87 = isoChronology2.prolepticYear((java.time.chrono.Era) isoEra34, 16);
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(isoChronology2);
        org.junit.Assert.assertNotNull(eraList3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "ISO" + "'", str4, "ISO");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "ISO" + "'", str5, "ISO");
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "ParseCaseSensitive(false)(Value(Year,4,10,EXCEEDS_PAD)'-'Value(MonthOfYear,2)'-'Value(DayOfMonth,2))[Offset(+HH:MM:ss,'Z')]" + "'", str7, "ParseCaseSensitive(false)(Value(Year,4,10,EXCEEDS_PAD)'-'Value(MonthOfYear,2)'-'Value(DayOfMonth,2))[Offset(+HH:MM:ss,'Z')]");
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(periodTemporalQuery9);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(format11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "ParseCaseSensitive(false)(Value(Year,4,10,EXCEEDS_PAD)'-'Value(MonthOfYear,2)'-'Value(DayOfMonth,2))[Offset(+HH:MM:ss,'Z')]" + "'", str14, "ParseCaseSensitive(false)(Value(Year,4,10,EXCEEDS_PAD)'-'Value(MonthOfYear,2)'-'Value(DayOfMonth,2))[Offset(+HH:MM:ss,'Z')]");
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(periodTemporalQuery16);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(format18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(eraList21);
        org.junit.Assert.assertNotNull(zoneOffset24);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(clock26);
        org.junit.Assert.assertNotNull(zoneOffset29);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertNotNull(clock31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(chronoLocalDate33);
        org.junit.Assert.assertTrue("'" + isoEra34 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra34.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(localTime43);
        org.junit.Assert.assertNotNull(localTime44);
        org.junit.Assert.assertTrue("'" + chronoField45 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField45.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime47);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "NanoOfDay" + "'", str49, "NanoOfDay");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertNotNull(period52);
        org.junit.Assert.assertNotNull(period54);
        org.junit.Assert.assertTrue("'" + isoEra55 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra55.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(localTime61);
        org.junit.Assert.assertNotNull(localTime62);
        org.junit.Assert.assertNotNull(localTime67);
        org.junit.Assert.assertNotNull(localTime68);
        org.junit.Assert.assertTrue("'" + chronoField69 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField69.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime71);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 3601000000001L + "'", long72 == 3601000000001L);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(periodTemporalQuery74);
        org.junit.Assert.assertNotNull(period75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(period78);
        org.junit.Assert.assertTrue("'" + chronoField79 + "' != '" + java.time.temporal.ChronoField.SECOND_OF_DAY + "'", chronoField79.equals(java.time.temporal.ChronoField.SECOND_OF_DAY));
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertTrue("'" + dayOfWeek83 + "' != '" + java.time.DayOfWeek.THURSDAY + "'", dayOfWeek83.equals(java.time.DayOfWeek.THURSDAY));
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 16 + "'", int87 == 16);
    }

    @Test
    public void test6031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6031");
        org.joda.time.Period period0 = org.joda.time.Period.ZERO;
        org.joda.time.Period period1 = period0.normalizedStandard();
        org.joda.time.Period period3 = period0.plusHours(2);
        java.time.chrono.IsoEra isoEra4 = java.time.chrono.IsoEra.CE;
        boolean boolean5 = period3.equals((java.lang.Object) isoEra4);
        java.time.LocalTime localTime10 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime11 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime10);
        java.time.LocalTime localTime16 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime17 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime16);
        java.time.temporal.ChronoField chronoField18 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime20 = localTime16.with((java.time.temporal.TemporalField) chronoField18, (long) (short) 1);
        long long21 = localTime10.getLong((java.time.temporal.TemporalField) chronoField18);
        boolean boolean22 = isoEra4.isSupported((java.time.temporal.TemporalField) chronoField18);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery23 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period24 = isoEra4.query(periodTemporalQuery23);
        boolean boolean25 = period24.isNegative();
        java.time.Period period27 = period24.plusDays((long) ' ');
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.LocalTime localTime30 = new org.joda.time.LocalTime((long) 0, chronology29);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((long) 3, chronology32);
        org.joda.time.DateTime.Property property34 = dateTime33.dayOfYear();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.DateMidnight dateMidnight36 = new org.joda.time.DateMidnight((java.lang.Object) dateTime33, chronology35);
        org.joda.time.DateTime dateTime37 = localTime30.toDateTime((org.joda.time.ReadableInstant) dateTime33);
        boolean boolean38 = period27.equals((java.lang.Object) localTime30);
        org.joda.time.Period period39 = org.joda.time.Period.ZERO;
        org.joda.time.Period period40 = period39.normalizedStandard();
        org.joda.time.Period period42 = period39.plusHours(2);
        java.time.chrono.IsoEra isoEra43 = java.time.chrono.IsoEra.CE;
        boolean boolean44 = period42.equals((java.lang.Object) isoEra43);
        java.time.LocalTime localTime49 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime50 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime49);
        java.time.LocalTime localTime55 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime56 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime55);
        java.time.temporal.ChronoField chronoField57 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime59 = localTime55.with((java.time.temporal.TemporalField) chronoField57, (long) (short) 1);
        long long60 = localTime49.getLong((java.time.temporal.TemporalField) chronoField57);
        boolean boolean61 = isoEra43.isSupported((java.time.temporal.TemporalField) chronoField57);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery62 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period63 = isoEra43.query(periodTemporalQuery62);
        boolean boolean64 = period63.isNegative();
        java.time.Period period66 = period63.plusDays((long) ' ');
        int int67 = period66.getYears();
        java.time.Period period68 = period27.minus((java.time.temporal.TemporalAmount) period66);
        java.time.Duration duration70 = java.time.Duration.ofMillis(34739555000000L);
        java.util.List<java.time.temporal.TemporalUnit> temporalUnitList71 = duration70.getUnits();
        // The following exception was thrown during execution in test generation
        try {
            java.time.Period period72 = period27.minus((java.time.temporal.TemporalAmount) duration70);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Unit must be Years, Months or Days, but was Seconds");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period0);
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertTrue("'" + isoEra4 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra4.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertTrue("'" + chronoField18 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField18.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 3601000000001L + "'", long21 == 3601000000001L);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(periodTemporalQuery23);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertTrue("'" + isoEra43 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra43.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(localTime49);
        org.junit.Assert.assertNotNull(localTime50);
        org.junit.Assert.assertNotNull(localTime55);
        org.junit.Assert.assertNotNull(localTime56);
        org.junit.Assert.assertTrue("'" + chronoField57 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField57.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime59);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 3601000000001L + "'", long60 == 3601000000001L);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(periodTemporalQuery62);
        org.junit.Assert.assertNotNull(period63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(period66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(period68);
        org.junit.Assert.assertNotNull(duration70);
        org.junit.Assert.assertNotNull(temporalUnitList71);
    }

    @Test
    public void test6032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6032");
        java.util.GregorianCalendar gregorianCalendar5 = new java.util.GregorianCalendar(12, 4096, 7, (-1), (int) (short) 10);
        int int6 = gregorianCalendar5.getWeeksInWeekYear();
        org.joda.time.YearMonthDay yearMonthDay7 = org.joda.time.YearMonthDay.fromCalendarFields((java.util.Calendar) gregorianCalendar5);
        org.joda.time.YearMonthDay yearMonthDay9 = yearMonthDay7.withYear(0);
        org.joda.time.Hours hours10 = org.joda.time.Hours.ZERO;
        org.joda.time.YearMonthDay yearMonthDay11 = yearMonthDay9.minus((org.joda.time.ReadablePeriod) hours10);
        org.joda.time.DateTime dateTime12 = yearMonthDay11.toDateTimeAtMidnight();
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate();
        org.joda.time.Interval interval14 = localDate13.toInterval();
        int int15 = localDate13.getYearOfCentury();
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.Duration duration18 = new org.joda.time.Duration(readableInstant16, readableInstant17);
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.PeriodType periodType20 = null;
        org.joda.time.Period period21 = duration18.toPeriodTo(readableInstant19, periodType20);
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.Duration duration24 = new org.joda.time.Duration(readableInstant22, readableInstant23);
        long long25 = duration24.getMillis();
        boolean boolean26 = duration18.isShorterThan((org.joda.time.ReadableDuration) duration24);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((long) 3, chronology28);
        org.joda.time.DateTime.Property property30 = dateTime29.dayOfYear();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.DateMidnight dateMidnight32 = new org.joda.time.DateMidnight((java.lang.Object) dateTime29, chronology31);
        org.joda.time.MutableDateTime mutableDateTime33 = dateTime29.toMutableDateTime();
        mutableDateTime33.addYears((int) (short) 100);
        org.joda.time.MutableDateTime.Property property36 = mutableDateTime33.dayOfWeek();
        org.joda.time.MutableDateTime.Property property37 = mutableDateTime33.year();
        org.joda.time.MutableDateTime.Property property38 = mutableDateTime33.weekyear();
        boolean boolean39 = duration18.equals((java.lang.Object) mutableDateTime33);
        mutableDateTime33.addMonths((int) ' ');
        mutableDateTime33.add((long) (byte) 10);
        org.joda.time.Period period44 = org.joda.time.Period.ZERO;
        org.joda.time.Period period45 = period44.normalizedStandard();
        org.joda.time.Period period47 = period44.plusHours(2);
        java.time.chrono.IsoEra isoEra48 = java.time.chrono.IsoEra.CE;
        boolean boolean49 = period47.equals((java.lang.Object) isoEra48);
        int int50 = period47.getMinutes();
        mutableDateTime33.add((org.joda.time.ReadablePeriod) period47);
        java.util.TimeZone timeZone53 = null;
        org.joda.time.DateTimeZone dateTimeZone54 = org.joda.time.DateTimeZone.forTimeZone(timeZone53);
        org.joda.time.DateMidnight dateMidnight55 = new org.joda.time.DateMidnight((long) 1970, dateTimeZone54);
        long long58 = dateTimeZone54.convertLocalToUTC((long) 3, false);
        long long61 = dateTimeZone54.convertLocalToUTC(0L, true);
        mutableDateTime33.setZoneRetainFields(dateTimeZone54);
        java.lang.String str63 = dateTimeZone54.toString();
        org.joda.time.chrono.EthiopicChronology ethiopicChronology64 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone54);
        org.joda.time.DateTime dateTime65 = localDate13.toDateTimeAtCurrentTime(dateTimeZone54);
        org.joda.time.Interval interval66 = yearMonthDay11.toInterval(dateTimeZone54);
        // The following exception was thrown during execution in test generation
        try {
            int int68 = yearMonthDay11.getValue(34482);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 34482");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 52 + "'", int6 == 52);
        org.junit.Assert.assertNotNull(yearMonthDay7);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertNotNull(hours10);
        org.junit.Assert.assertNotNull(yearMonthDay11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 22 + "'", int15 == 22);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(mutableDateTime33);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertNotNull(period47);
        org.junit.Assert.assertTrue("'" + isoEra48 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra48.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone54);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 3L + "'", long58 == 3L);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 0L + "'", long61 == 0L);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "Etc/UTC" + "'", str63, "Etc/UTC");
        org.junit.Assert.assertNotNull(ethiopicChronology64);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(interval66);
    }

    @Test
    public void test6033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6033");
        java.util.Set<java.lang.String> strSet0 = java.time.ZoneId.getAvailableZoneIds();
        java.util.stream.Stream<java.lang.String> strStream1 = strSet0.parallelStream();
        java.lang.Object[] objArray2 = strSet0.toArray();
        java.util.Spliterator<java.lang.String> strSpliterator3 = strSet0.spliterator();
        java.util.Set<java.lang.String> strSet4 = java.time.ZoneId.getAvailableZoneIds();
        java.util.stream.Stream<java.lang.String> strStream5 = strSet4.parallelStream();
        boolean boolean7 = strSet4.remove((java.lang.Object) 0);
        java.time.LocalTime localTime12 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime13 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime12);
        java.time.LocalTime localTime18 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime19 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime18);
        java.time.temporal.ChronoField chronoField20 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime22 = localTime18.with((java.time.temporal.TemporalField) chronoField20, (long) (short) 1);
        long long23 = localTime12.getLong((java.time.temporal.TemporalField) chronoField20);
        java.time.LocalTime localTime25 = localTime12.withSecond((int) (short) 1);
        java.time.temporal.ChronoField chronoField26 = java.time.temporal.ChronoField.SECOND_OF_DAY;
        java.time.temporal.ValueRange valueRange27 = localTime25.range((java.time.temporal.TemporalField) chronoField26);
        boolean boolean28 = strSet4.remove((java.lang.Object) chronoField26);
        boolean boolean29 = strSet0.retainAll((java.util.Collection<java.lang.String>) strSet4);
        java.util.Spliterator<java.lang.String> strSpliterator30 = strSet0.spliterator();
        java.util.Set<java.lang.String> strSet31 = java.time.ZoneId.getAvailableZoneIds();
        java.util.Set<java.lang.String> strSet32 = java.time.ZoneId.getAvailableZoneIds();
        java.util.stream.Stream<java.lang.String> strStream33 = strSet32.parallelStream();
        java.lang.Object[] objArray34 = strSet32.toArray();
        java.util.Spliterator<java.lang.String> strSpliterator35 = strSet32.spliterator();
        boolean boolean36 = strSet31.containsAll((java.util.Collection<java.lang.String>) strSet32);
        boolean boolean37 = strSet0.removeAll((java.util.Collection<java.lang.String>) strSet32);
        java.nio.charset.CoderResult coderResult38 = java.nio.charset.CoderResult.UNDERFLOW;
        boolean boolean39 = strSet0.contains((java.lang.Object) coderResult38);
        int int40 = strSet0.size();
        boolean boolean41 = strSet0.isEmpty();
        org.junit.Assert.assertNotNull(strSet0);
        org.junit.Assert.assertNotNull(strStream1);
        org.junit.Assert.assertNotNull(objArray2);
        org.junit.Assert.assertNotNull(strSpliterator3);
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertNotNull(strStream5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertTrue("'" + chronoField20 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField20.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 3601000000001L + "'", long23 == 3601000000001L);
        org.junit.Assert.assertNotNull(localTime25);
        org.junit.Assert.assertTrue("'" + chronoField26 + "' != '" + java.time.temporal.ChronoField.SECOND_OF_DAY + "'", chronoField26.equals(java.time.temporal.ChronoField.SECOND_OF_DAY));
        org.junit.Assert.assertNotNull(valueRange27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(strSpliterator30);
        org.junit.Assert.assertNotNull(strSet31);
        org.junit.Assert.assertNotNull(strSet32);
        org.junit.Assert.assertNotNull(strStream33);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertNotNull(strSpliterator35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(coderResult38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
    }

    @Test
    public void test6034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6034");
        org.joda.time.TimeOfDay timeOfDay1 = org.joda.time.TimeOfDay.fromMillisOfDay((long) (short) 0);
        org.joda.time.TimeOfDay timeOfDay3 = org.joda.time.TimeOfDay.fromMillisOfDay((long) (short) 0);
        org.joda.time.Hours hours4 = org.joda.time.Hours.hoursBetween((org.joda.time.ReadablePartial) timeOfDay1, (org.joda.time.ReadablePartial) timeOfDay3);
        org.joda.time.DurationFieldType durationFieldType5 = org.joda.time.DurationFieldType.hours();
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay3.withFieldAdded(durationFieldType5, (int) (byte) 0);
        int int8 = timeOfDay3.getMillisOfSecond();
        org.joda.time.TimeOfDay timeOfDay10 = timeOfDay3.plusHours(9);
        org.joda.time.TimeOfDay.Property property11 = timeOfDay3.secondOfMinute();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) 3, chronology13);
        org.joda.time.DateTime.Property property15 = dateTime14.dayOfYear();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight((java.lang.Object) dateTime14, chronology16);
        org.joda.time.MutableDateTime mutableDateTime18 = dateTime14.toMutableDateTime();
        mutableDateTime18.addYears((int) (short) 100);
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime18.millisOfDay();
        org.joda.time.PeriodType periodType22 = org.joda.time.PeriodType.years();
        org.joda.time.DurationFieldType durationFieldType23 = org.joda.time.DurationFieldType.halfdays();
        int int24 = periodType22.indexOf(durationFieldType23);
        mutableDateTime18.add(durationFieldType23, (int) 'a');
        java.util.TimeZone timeZone28 = null;
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forTimeZone(timeZone28);
        org.joda.time.DateMidnight dateMidnight30 = new org.joda.time.DateMidnight((long) 1970, dateTimeZone29);
        mutableDateTime18.setTime((org.joda.time.ReadableInstant) dateMidnight30);
        int int32 = property11.compareTo((org.joda.time.ReadableInstant) dateMidnight30);
        org.joda.time.TimeOfDay timeOfDay34 = property11.addToCopy(13);
        org.joda.time.TimeOfDay timeOfDay36 = property11.addWrapFieldToCopy(32769);
        org.joda.time.TimeOfDay timeOfDay38 = property11.addWrapFieldToCopy(2147483647);
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = timeOfDay38.getFieldType((int) '\000');
        org.junit.Assert.assertNotNull(timeOfDay1);
        org.junit.Assert.assertNotNull(timeOfDay3);
        org.junit.Assert.assertNotNull(hours4);
        org.junit.Assert.assertNotNull(durationFieldType5);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(mutableDateTime18);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(periodType22);
        org.junit.Assert.assertNotNull(durationFieldType23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(timeOfDay34);
        org.junit.Assert.assertNotNull(timeOfDay36);
        org.junit.Assert.assertNotNull(timeOfDay38);
        org.junit.Assert.assertNotNull(dateTimeFieldType40);
    }

    @Test
    public void test6035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6035");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.Duration duration2 = new org.joda.time.Duration(readableInstant0, readableInstant1);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = duration2.toPeriodTo(readableInstant3, periodType4);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.Duration duration8 = new org.joda.time.Duration(readableInstant6, readableInstant7);
        long long9 = duration8.getMillis();
        boolean boolean10 = duration2.isShorterThan((org.joda.time.ReadableDuration) duration8);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) 3, chronology12);
        org.joda.time.DateTime.Property property14 = dateTime13.dayOfYear();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight((java.lang.Object) dateTime13, chronology15);
        org.joda.time.MutableDateTime mutableDateTime17 = dateTime13.toMutableDateTime();
        mutableDateTime17.addYears((int) (short) 100);
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime17.dayOfWeek();
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime17.year();
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime17.weekyear();
        boolean boolean23 = duration2.equals((java.lang.Object) mutableDateTime17);
        mutableDateTime17.addMonths((int) ' ');
        mutableDateTime17.add((long) (byte) 10);
        org.joda.time.Period period28 = org.joda.time.Period.ZERO;
        org.joda.time.Period period29 = period28.normalizedStandard();
        org.joda.time.Period period31 = period28.plusHours(2);
        java.time.chrono.IsoEra isoEra32 = java.time.chrono.IsoEra.CE;
        boolean boolean33 = period31.equals((java.lang.Object) isoEra32);
        int int34 = period31.getMinutes();
        mutableDateTime17.add((org.joda.time.ReadablePeriod) period31);
        java.util.TimeZone timeZone37 = null;
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forTimeZone(timeZone37);
        org.joda.time.DateMidnight dateMidnight39 = new org.joda.time.DateMidnight((long) 1970, dateTimeZone38);
        long long42 = dateTimeZone38.convertLocalToUTC((long) 3, false);
        long long45 = dateTimeZone38.convertLocalToUTC(0L, true);
        mutableDateTime17.setZoneRetainFields(dateTimeZone38);
        java.lang.String str47 = dateTimeZone38.toString();
        org.joda.time.chrono.EthiopicChronology ethiopicChronology48 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone38);
        org.joda.time.DateTimeField dateTimeField49 = ethiopicChronology48.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone50 = ethiopicChronology48.getZone();
        org.joda.time.DateTimeField dateTimeField51 = ethiopicChronology48.secondOfMinute();
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertTrue("'" + isoEra32 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra32.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 3L + "'", long42 == 3L);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Etc/UTC" + "'", str47, "Etc/UTC");
        org.junit.Assert.assertNotNull(ethiopicChronology48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(dateTimeField51);
    }

    @Test
    public void test6036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6036");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withYearOfCentury((int) 'a');
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.plusSeconds(6);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.Duration duration8 = new org.joda.time.Duration(readableInstant6, readableInstant7);
        long long9 = duration8.getMillis();
        org.joda.time.Duration duration11 = duration8.plus((long) (byte) 1);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime3.minus((org.joda.time.ReadableDuration) duration11);
        int int13 = localDateTime3.getEra();
        org.joda.time.Duration duration15 = org.joda.time.Duration.millis((long) '#');
        org.joda.time.LocalDateTime localDateTime16 = localDateTime3.plus((org.joda.time.ReadableDuration) duration15);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime18 = localDateTime16.withMonthOfYear(365);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 365 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(localDateTime16);
    }

    @Test
    public void test6037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6037");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.nio.LongBuffer longBuffer3 = java.nio.LongBuffer.allocate((int) (short) 0);
        java.nio.Buffer buffer4 = longBuffer3.mark();
        boolean boolean5 = properties1.containsKey((java.lang.Object) longBuffer3);
        java.util.Map<java.lang.String, java.lang.String> strMap6 = java.time.ZoneId.SHORT_IDS;
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        boolean boolean8 = strMap6.containsValue((java.lang.Object) dateTimeFieldType7);
        properties1.putAll(strMap6);
        java.time.LocalDateTime localDateTime10 = java.time.LocalDateTime.MIN;
        java.time.Month month11 = java.time.Month.NOVEMBER;
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime12 = localDateTime10.with((java.time.temporal.TemporalAdjuster) month11);
        java.time.Month month14 = month11.plus(2592000000L);
        java.time.Month month16 = month14.plus(6552109211L);
        int int18 = month16.firstDayOfYear(false);
        java.lang.String str19 = strMap6.get((java.lang.Object) month16);
        java.time.Month month20 = month16.firstMonthOfQuarter();
        java.time.format.TextStyle textStyle21 = java.time.format.TextStyle.SHORT;
        org.joda.time.tz.NameProvider nameProvider22 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.LocalTime localTime26 = new org.joda.time.LocalTime((long) 0, chronology25);
        org.joda.time.Chronology chronology27 = localTime26.getChronology();
        org.joda.time.DateTimeField dateTimeField28 = chronology27.weekyearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime29 = org.joda.time.MutableDateTime.now(chronology27);
        org.joda.time.DateTimeField dateTimeField30 = chronology27.monthOfYear();
        java.util.Locale locale31 = java.util.Locale.getDefault();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket33 = new org.joda.time.format.DateTimeParserBucket((long) 28, chronology27, locale31, (java.lang.Integer) 0);
        java.lang.String str36 = nameProvider22.getShortName(locale31, "22", "Chinese");
        java.lang.String str37 = locale31.getDisplayVariant();
        java.lang.String str38 = month16.getDisplayName(textStyle21, locale31);
        org.junit.Assert.assertNotNull(longBuffer3);
        org.junit.Assert.assertNotNull(buffer4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertTrue("'" + month11 + "' != '" + java.time.Month.NOVEMBER + "'", month11.equals(java.time.Month.NOVEMBER));
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime12);
        org.junit.Assert.assertTrue("'" + month14 + "' != '" + java.time.Month.NOVEMBER + "'", month14.equals(java.time.Month.NOVEMBER));
        org.junit.Assert.assertTrue("'" + month16 + "' != '" + java.time.Month.OCTOBER + "'", month16.equals(java.time.Month.OCTOBER));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 274 + "'", int18 == 274);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertTrue("'" + month20 + "' != '" + java.time.Month.OCTOBER + "'", month20.equals(java.time.Month.OCTOBER));
        org.junit.Assert.assertTrue("'" + textStyle21 + "' != '" + java.time.format.TextStyle.SHORT + "'", textStyle21.equals(java.time.format.TextStyle.SHORT));
        org.junit.Assert.assertNotNull(nameProvider22);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(mutableDateTime29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(locale31);
// flaky:         org.junit.Assert.assertEquals(locale31.toString(), "");
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Oct" + "'", str38, "Oct");
    }

    @Test
    public void test6038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6038");
        org.joda.time.Period period8 = org.joda.time.Period.ZERO;
        org.joda.time.Period period9 = period8.normalizedStandard();
        org.joda.time.Period period11 = period9.minusMinutes((int) ' ');
        org.joda.time.Period period13 = period11.minusMonths((int) (byte) 0);
        org.joda.time.PeriodType periodType14 = period11.getPeriodType();
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod(292269054, (int) ':', (int) (short) 10, (int) ':', 9, (int) 'a', 57, 2097, periodType14);
        mutablePeriod15.addMonths((-1));
        mutablePeriod15.addHours(197);
        mutablePeriod15.setWeeks(581);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(periodType14);
    }

    @Test
    public void test6039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6039");
        // The following exception was thrown during execution in test generation
        try {
            java.time.LocalTime localTime4 = java.time.LocalTime.of(34561718, 34482, (int) '\uffff', 36);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for HourOfDay (valid values 0 - 23): 34561718");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
    }

    @Test
    public void test6040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6040");
        java.util.GregorianCalendar gregorianCalendar5 = new java.util.GregorianCalendar(12, 4096, 7, (-1), (int) (short) 10);
        int int6 = gregorianCalendar5.getWeeksInWeekYear();
        java.lang.String str7 = gregorianCalendar5.getCalendarType();
        java.time.ZonedDateTime zonedDateTime8 = gregorianCalendar5.toZonedDateTime();
        java.time.ZonedDateTime zonedDateTime10 = zonedDateTime8.minusMonths((long) 10);
        java.time.ZonedDateTime zonedDateTime12 = zonedDateTime10.minusHours((long) 9);
        java.time.LocalTime localTime17 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime18 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime17);
        java.time.LocalTime localTime23 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime24 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime23);
        java.time.temporal.ChronoField chronoField25 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime27 = localTime23.with((java.time.temporal.TemporalField) chronoField25, (long) (short) 1);
        long long28 = localTime17.getLong((java.time.temporal.TemporalField) chronoField25);
        java.time.LocalTime localTime30 = localTime17.withSecond((int) (short) 1);
        int int31 = localTime30.getMinute();
        java.time.LocalTime localTime33 = localTime30.plusHours((long) (-1));
        java.time.LocalDateTime localDateTime34 = java.time.LocalDateTime.now();
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery35 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period36 = localDateTime34.query(periodTemporalQuery35);
        java.time.Period period37 = localTime33.query(periodTemporalQuery35);
        java.time.Period period38 = zonedDateTime12.query(periodTemporalQuery35);
        java.time.LocalDateTime localDateTime39 = java.time.LocalDateTime.now();
        java.time.temporal.ChronoField chronoField40 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime42 = localDateTime39.with((java.time.temporal.TemporalField) chronoField40, (long) 10);
        java.time.LocalDateTime localDateTime44 = localDateTime39.minusMinutes((long) 12);
        java.time.LocalDateTime localDateTime46 = localDateTime44.minusNanos((long) (byte) 1);
        java.time.temporal.ChronoField chronoField47 = java.time.temporal.ChronoField.OFFSET_SECONDS;
        boolean boolean48 = localDateTime46.isSupported((java.time.temporal.TemporalField) chronoField47);
        java.time.temporal.ValueRange valueRange49 = zonedDateTime12.range((java.time.temporal.TemporalField) chronoField47);
        boolean boolean50 = valueRange49.isIntValue();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 52 + "'", int6 == 52);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "gregory" + "'", str7, "gregory");
        org.junit.Assert.assertNotNull(zonedDateTime8);
        org.junit.Assert.assertNotNull(zonedDateTime10);
        org.junit.Assert.assertNotNull(zonedDateTime12);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertNotNull(localTime23);
        org.junit.Assert.assertNotNull(localTime24);
        org.junit.Assert.assertTrue("'" + chronoField25 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField25.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime27);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 3601000000001L + "'", long28 == 3601000000001L);
        org.junit.Assert.assertNotNull(localTime30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(localTime33);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(periodTemporalQuery35);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertTrue("'" + chronoField40 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField40.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime42);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertTrue("'" + chronoField47 + "' != '" + java.time.temporal.ChronoField.OFFSET_SECONDS + "'", chronoField47.equals(java.time.temporal.ChronoField.OFFSET_SECONDS));
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(valueRange49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
    }

    @Test
    public void test6041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6041");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.lang.Object obj2 = properties1.clone();
        java.util.Properties properties3 = null;
        java.util.Properties properties4 = new java.util.Properties(properties3);
        java.nio.LongBuffer longBuffer6 = java.nio.LongBuffer.allocate((int) (short) 0);
        java.nio.Buffer buffer7 = longBuffer6.mark();
        boolean boolean8 = properties4.containsKey((java.lang.Object) longBuffer6);
        java.nio.charset.Charset charset9 = java.nio.charset.Charset.defaultCharset();
        boolean boolean10 = charset9.canEncode();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) 3, chronology12);
        org.joda.time.DateTime.Property property14 = dateTime13.dayOfYear();
        java.lang.Object obj15 = properties4.getOrDefault((java.lang.Object) boolean10, (java.lang.Object) property14);
        properties4.clear();
        int int17 = properties4.size();
        java.util.Map<java.lang.String, java.lang.String> strMap18 = java.time.ZoneId.SHORT_IDS;
        int int19 = strMap18.size();
        properties4.putAll(strMap18);
        properties1.putAll(strMap18);
        java.util.Set<java.lang.String> strSet22 = properties1.stringPropertyNames();
        java.util.Enumeration<java.lang.Object> objEnumeration23 = properties1.keys();
        org.junit.Assert.assertNotNull(obj2);
        org.junit.Assert.assertEquals(obj2.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj2), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj2), "{}");
        org.junit.Assert.assertNotNull(longBuffer6);
        org.junit.Assert.assertNotNull(buffer7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(charset9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(obj15);
        org.junit.Assert.assertEquals(obj15.toString(), "Property[dayOfYear]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj15), "Property[dayOfYear]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj15), "Property[dayOfYear]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 28 + "'", int19 == 28);
        org.junit.Assert.assertNotNull(strSet22);
        org.junit.Assert.assertNotNull(objEnumeration23);
    }

    @Test
    public void test6042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6042");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime((long) 292269054);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((long) 3, chronology3);
        org.joda.time.DateTime.Property property5 = dateTime4.dayOfYear();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight((java.lang.Object) dateTime4, chronology6);
        org.joda.time.MutableDateTime mutableDateTime8 = dateTime4.toMutableDateTime();
        mutableDateTime8.addYears((int) (short) 100);
        org.joda.time.MutableDateTime.Property property11 = mutableDateTime8.dayOfWeek();
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime8.year();
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime8.weekyear();
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime8.dayOfWeek();
        mutableDateTime8.addMillis(4);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime(chronology17);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime18.withField(dateTimeFieldType19, (int) 'a');
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime(chronology22);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.withYearOfCentury((int) 'a');
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.plusSeconds(6);
        boolean boolean28 = localDateTime21.isBefore((org.joda.time.ReadablePartial) localDateTime25);
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.Duration duration31 = new org.joda.time.Duration(readableInstant29, readableInstant30);
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.PeriodType periodType33 = null;
        org.joda.time.Period period34 = duration31.toPeriodTo(readableInstant32, periodType33);
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.Duration duration37 = new org.joda.time.Duration(readableInstant35, readableInstant36);
        long long38 = duration37.getMillis();
        boolean boolean39 = duration31.isShorterThan((org.joda.time.ReadableDuration) duration37);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime((long) 3, chronology41);
        org.joda.time.DateTime.Property property43 = dateTime42.dayOfYear();
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.DateMidnight dateMidnight45 = new org.joda.time.DateMidnight((java.lang.Object) dateTime42, chronology44);
        org.joda.time.MutableDateTime mutableDateTime46 = dateTime42.toMutableDateTime();
        mutableDateTime46.addYears((int) (short) 100);
        org.joda.time.MutableDateTime.Property property49 = mutableDateTime46.dayOfWeek();
        org.joda.time.MutableDateTime.Property property50 = mutableDateTime46.year();
        org.joda.time.MutableDateTime.Property property51 = mutableDateTime46.weekyear();
        boolean boolean52 = duration31.equals((java.lang.Object) mutableDateTime46);
        mutableDateTime46.addMonths((int) ' ');
        mutableDateTime46.add((long) (byte) 10);
        org.joda.time.Period period57 = org.joda.time.Period.ZERO;
        org.joda.time.Period period58 = period57.normalizedStandard();
        org.joda.time.Period period60 = period57.plusHours(2);
        java.time.chrono.IsoEra isoEra61 = java.time.chrono.IsoEra.CE;
        boolean boolean62 = period60.equals((java.lang.Object) isoEra61);
        int int63 = period60.getMinutes();
        mutableDateTime46.add((org.joda.time.ReadablePeriod) period60);
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.LocalDateTime localDateTime66 = new org.joda.time.LocalDateTime(chronology65);
        org.joda.time.LocalDateTime localDateTime68 = localDateTime66.withYearOfCentury((int) 'a');
        int int69 = localDateTime68.getDayOfMonth();
        org.joda.time.LocalDateTime localDateTime71 = localDateTime68.withMinuteOfHour((int) ' ');
        org.joda.time.DateTimeFieldType dateTimeFieldType72 = org.joda.time.DateTimeFieldType.weekyear();
        int int73 = localDateTime68.get(dateTimeFieldType72);
        org.joda.time.MutableDateTime.Property property74 = mutableDateTime46.property(dateTimeFieldType72);
        boolean boolean75 = localDateTime21.isSupported(dateTimeFieldType72);
        boolean boolean76 = mutableDateTime8.isSupported(dateTimeFieldType72);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime78 = localTime1.withField(dateTimeFieldType72, (-46800000));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'weekyear' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(mutableDateTime46);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(period57);
        org.junit.Assert.assertNotNull(period58);
        org.junit.Assert.assertNotNull(period60);
        org.junit.Assert.assertTrue("'" + isoEra61 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra61.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(localDateTime68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 21 + "'", int69 == 21);
        org.junit.Assert.assertNotNull(localDateTime71);
        org.junit.Assert.assertNotNull(dateTimeFieldType72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 2097 + "'", int73 == 2097);
        org.junit.Assert.assertNotNull(property74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
    }

    @Test
    public void test6043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6043");
        org.joda.time.TimeOfDay timeOfDay1 = org.joda.time.TimeOfDay.fromMillisOfDay((long) (short) 0);
        org.joda.time.TimeOfDay timeOfDay3 = org.joda.time.TimeOfDay.fromMillisOfDay((long) (short) 0);
        org.joda.time.Hours hours4 = org.joda.time.Hours.hoursBetween((org.joda.time.ReadablePartial) timeOfDay1, (org.joda.time.ReadablePartial) timeOfDay3);
        org.joda.time.DurationFieldType durationFieldType5 = org.joda.time.DurationFieldType.hours();
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay3.withFieldAdded(durationFieldType5, (int) (byte) 0);
        org.joda.time.TimeOfDay timeOfDay9 = timeOfDay3.minusMillis((int) '#');
        org.joda.time.Chronology chronology10 = timeOfDay9.getChronology();
        org.joda.time.TimeOfDay timeOfDay12 = org.joda.time.TimeOfDay.fromMillisOfDay((long) (short) 0);
        org.joda.time.TimeOfDay timeOfDay14 = org.joda.time.TimeOfDay.fromMillisOfDay((long) (short) 0);
        org.joda.time.Hours hours15 = org.joda.time.Hours.hoursBetween((org.joda.time.ReadablePartial) timeOfDay12, (org.joda.time.ReadablePartial) timeOfDay14);
        org.joda.time.TimeOfDay timeOfDay17 = timeOfDay12.withSecondOfMinute(0);
        int int18 = timeOfDay12.size();
        int[] intArray19 = timeOfDay12.getValues();
        org.joda.time.LocalTime localTime20 = timeOfDay12.toLocalTime();
        org.joda.time.TimeOfDay timeOfDay22 = timeOfDay12.withMinuteOfHour(52);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray23 = timeOfDay12.getFieldTypes();
        boolean boolean24 = timeOfDay9.isAfter((org.joda.time.ReadablePartial) timeOfDay12);
        int[] intArray25 = timeOfDay9.getValues();
        org.junit.Assert.assertNotNull(timeOfDay1);
        org.junit.Assert.assertNotNull(timeOfDay3);
        org.junit.Assert.assertNotNull(hours4);
        org.junit.Assert.assertNotNull(durationFieldType5);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(timeOfDay9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(timeOfDay12);
        org.junit.Assert.assertNotNull(timeOfDay14);
        org.junit.Assert.assertNotNull(hours15);
        org.junit.Assert.assertNotNull(timeOfDay17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 4 + "'", int18 == 4);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertNotNull(timeOfDay22);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[23, 59, 59, 965]");
    }

    @Test
    public void test6044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6044");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.now();
        java.time.temporal.ChronoField chronoField1 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime3 = localDateTime0.with((java.time.temporal.TemporalField) chronoField1, (long) 10);
        java.time.LocalDateTime localDateTime5 = localDateTime0.minusMinutes((long) 12);
        java.time.chrono.Chronology chronology6 = localDateTime0.getChronology();
        java.time.chrono.ChronoLocalDate chronoLocalDate7 = chronology6.dateNow();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertTrue("'" + chronoField1 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField1.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronoLocalDate7);
    }

    @Test
    public void test6045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6045");
        java.time.LocalDateTime localDateTime2 = java.time.LocalDateTime.now();
        java.time.temporal.ChronoField chronoField3 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime5 = localDateTime2.with((java.time.temporal.TemporalField) chronoField3, (long) 10);
        java.time.LocalDateTime localDateTime7 = localDateTime2.minusMinutes((long) 12);
        org.joda.time.Period period8 = org.joda.time.Period.ZERO;
        org.joda.time.Period period9 = period8.normalizedStandard();
        org.joda.time.Period period11 = period8.plusHours(2);
        org.joda.time.DurationFieldType durationFieldType12 = org.joda.time.DurationFieldType.hours();
        int int13 = period8.indexOf(durationFieldType12);
        org.joda.time.Weeks weeks14 = period8.toStandardWeeks();
        boolean boolean15 = localDateTime7.equals((java.lang.Object) weeks14);
        org.joda.time.PeriodType periodType16 = weeks14.getPeriodType();
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.Duration duration19 = new org.joda.time.Duration(readableInstant17, readableInstant18);
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.PeriodType periodType21 = null;
        org.joda.time.Period period22 = duration19.toPeriodTo(readableInstant20, periodType21);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.Duration duration25 = new org.joda.time.Duration(readableInstant23, readableInstant24);
        long long26 = duration25.getMillis();
        boolean boolean27 = duration19.isShorterThan((org.joda.time.ReadableDuration) duration25);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((long) 3, chronology29);
        org.joda.time.DateTime.Property property31 = dateTime30.dayOfYear();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.DateMidnight dateMidnight33 = new org.joda.time.DateMidnight((java.lang.Object) dateTime30, chronology32);
        org.joda.time.MutableDateTime mutableDateTime34 = dateTime30.toMutableDateTime();
        mutableDateTime34.addYears((int) (short) 100);
        org.joda.time.MutableDateTime.Property property37 = mutableDateTime34.dayOfWeek();
        org.joda.time.MutableDateTime.Property property38 = mutableDateTime34.year();
        org.joda.time.MutableDateTime.Property property39 = mutableDateTime34.weekyear();
        boolean boolean40 = duration19.equals((java.lang.Object) mutableDateTime34);
        mutableDateTime34.addMonths((int) ' ');
        mutableDateTime34.add((long) (byte) 10);
        org.joda.time.Period period45 = org.joda.time.Period.ZERO;
        org.joda.time.Period period46 = period45.normalizedStandard();
        org.joda.time.Period period48 = period45.plusHours(2);
        java.time.chrono.IsoEra isoEra49 = java.time.chrono.IsoEra.CE;
        boolean boolean50 = period48.equals((java.lang.Object) isoEra49);
        int int51 = period48.getMinutes();
        mutableDateTime34.add((org.joda.time.ReadablePeriod) period48);
        java.util.TimeZone timeZone54 = null;
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.forTimeZone(timeZone54);
        org.joda.time.DateMidnight dateMidnight56 = new org.joda.time.DateMidnight((long) 1970, dateTimeZone55);
        long long59 = dateTimeZone55.convertLocalToUTC((long) 3, false);
        long long62 = dateTimeZone55.convertLocalToUTC(0L, true);
        mutableDateTime34.setZoneRetainFields(dateTimeZone55);
        java.lang.String str64 = dateTimeZone55.toString();
        org.joda.time.chrono.EthiopicChronology ethiopicChronology65 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone55);
        org.joda.time.DateTimeField dateTimeField66 = ethiopicChronology65.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone67 = ethiopicChronology65.getZone();
        org.joda.time.DateTimeField dateTimeField68 = ethiopicChronology65.era();
        org.joda.time.DateTimeField dateTimeField69 = ethiopicChronology65.secondOfDay();
        org.joda.time.DateTimeField dateTimeField70 = ethiopicChronology65.minuteOfHour();
        org.joda.time.DurationField durationField71 = ethiopicChronology65.months();
        org.joda.time.DateTimeField dateTimeField72 = ethiopicChronology65.monthOfYear();
        org.joda.time.Period period73 = new org.joda.time.Period((long) 3, 0L, periodType16, (org.joda.time.Chronology) ethiopicChronology65);
        org.joda.time.PeriodType periodType74 = periodType16.withWeeksRemoved();
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertTrue("'" + chronoField3 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField3.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(durationFieldType12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 4 + "'", int13 == 4);
        org.junit.Assert.assertNotNull(weeks14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(periodType16);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(mutableDateTime34);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertNotNull(period48);
        org.junit.Assert.assertTrue("'" + isoEra49 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra49.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone55);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 3L + "'", long59 == 3L);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 0L + "'", long62 == 0L);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "Etc/UTC" + "'", str64, "Etc/UTC");
        org.junit.Assert.assertNotNull(ethiopicChronology65);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertNotNull(dateTimeZone67);
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertNotNull(dateTimeField69);
        org.junit.Assert.assertNotNull(dateTimeField70);
        org.junit.Assert.assertNotNull(durationField71);
        org.junit.Assert.assertNotNull(dateTimeField72);
        org.junit.Assert.assertNotNull(periodType74);
    }

    @Test
    public void test6046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6046");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Seconds seconds1 = org.joda.time.Seconds.parseSeconds("DIRECT");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"DIRECT\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test6047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6047");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.time.LocalTime localTime6 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime7 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime6);
        java.time.LocalTime localTime12 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime13 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime12);
        java.time.temporal.ChronoField chronoField14 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime16 = localTime12.with((java.time.temporal.TemporalField) chronoField14, (long) (short) 1);
        long long17 = localTime6.getLong((java.time.temporal.TemporalField) chronoField14);
        java.time.LocalTime localTime19 = localTime6.withSecond((int) (short) 1);
        java.lang.Object obj21 = properties1.put((java.lang.Object) localTime19, (java.lang.Object) "117");
        boolean boolean23 = properties1.containsValue((java.lang.Object) 6);
        java.lang.String str25 = properties1.getProperty("NanoOfDay");
        int int26 = properties1.size();
        int int27 = properties1.size();
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertTrue("'" + chronoField14 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField14.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 3601000000001L + "'", long17 == 3601000000001L);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertNull(obj21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
    }

    @Test
    public void test6048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6048");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 3, chronology1);
        org.joda.time.DateTime.Property property3 = dateTime2.dayOfYear();
        org.joda.time.Interval interval4 = property3.toInterval();
        org.joda.time.DateTimeField dateTimeField5 = property3.getField();
        org.joda.time.DateTime dateTime7 = property3.addWrapFieldToCopy(0);
        org.joda.time.DateTime dateTime9 = property3.setCopy(34);
        org.joda.time.DateTime dateTime11 = dateTime9.plusHours(70);
        org.joda.time.DateTime dateTime13 = dateTime11.withWeekyear(624);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) 3, chronology15);
        org.joda.time.DateTime.Property property17 = dateTime16.dayOfYear();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight((java.lang.Object) dateTime16, chronology18);
        org.joda.time.MutableDateTime mutableDateTime20 = dateTime16.toMutableDateTime();
        mutableDateTime20.setDayOfYear(28);
        int int23 = mutableDateTime20.getMillisOfDay();
        mutableDateTime20.addMinutes(353);
        int int26 = dateTime13.compareTo((org.joda.time.ReadableInstant) mutableDateTime20);
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.minuteOfDay();
        java.lang.String str28 = dateTimeFieldType27.toString();
        boolean boolean29 = dateTime13.isSupported(dateTimeFieldType27);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(mutableDateTime20);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 3 + "'", int23 == 3);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "minuteOfDay" + "'", str28, "minuteOfDay");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
    }

    @Test
    public void test6049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6049");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 3, chronology1);
        org.joda.time.DateTime.Property property3 = dateTime2.dayOfYear();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight((java.lang.Object) dateTime2, chronology4);
        org.joda.time.MutableDateTime mutableDateTime6 = dateTime2.toMutableDateTime();
        mutableDateTime6.addYears((int) (short) 100);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime6.dayOfWeek();
        java.util.Locale locale10 = java.util.Locale.JAPAN;
        int int11 = property9.getMaximumTextLength(locale10);
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime();
        mutableDateTime12.addMonths(0);
        mutableDateTime12.setWeekOfWeekyear(8);
        int int17 = property9.getDifference((org.joda.time.ReadableInstant) mutableDateTime12);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = property9.getFieldType();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ja_JP");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 3 + "'", int11 == 3);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 17480 + "'", int17 == 17480);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
    }

    @Test
    public void test6050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6050");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        int int1 = localDate0.getCenturyOfEra();
        org.joda.time.LocalDate.Property property2 = localDate0.dayOfWeek();
        org.joda.time.LocalDate localDate4 = property2.addToCopy(7);
        org.joda.time.LocalDate localDate5 = property2.getLocalDate();
        org.joda.time.LocalDate.Property property6 = localDate5.centuryOfEra();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 20 + "'", int1 == 20);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(property6);
    }

    @Test
    public void test6051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6051");
        java.util.GregorianCalendar gregorianCalendar3 = new java.util.GregorianCalendar(14, 3601, 14);
        java.util.Date date10 = new java.util.Date((int) (byte) 100, 4, 306, (int) ':', 52, (int) ' ');
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime(chronology11);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.withYearOfCentury((int) 'a');
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.plusSeconds(6);
        org.joda.time.DateTime dateTime17 = localDateTime14.toDateTime();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime14.minusMillis((int) '/');
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.minusMonths(100);
        java.util.Date date22 = localDateTime19.toDate();
        boolean boolean23 = date10.after(date22);
        int int24 = date22.getDay();
        gregorianCalendar3.setTime(date22);
        java.lang.String str26 = gregorianCalendar3.getCalendarType();
        gregorianCalendar3.setTimeInMillis(1000L);
        java.time.Instant instant29 = gregorianCalendar3.toInstant();
        org.junit.Assert.assertEquals(date10.toString(), "Sun Mar 04 10:52:32 UTC 2001");
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(date22);
// flaky:         org.junit.Assert.assertEquals(date22.toString(), "Thu Feb 21 09:42:50 UTC 2097");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 4 + "'", int24 == 4);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "gregory" + "'", str26, "gregory");
        org.junit.Assert.assertNotNull(instant29);
    }

    @Test
    public void test6052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6052");
        java.util.stream.DoubleStream doubleStream0 = java.util.stream.DoubleStream.empty();
        java.util.stream.DoubleStream doubleStream2 = doubleStream0.skip(0L);
        java.util.stream.DoubleStream doubleStream3 = doubleStream2.unordered();
        java.util.stream.DoubleStream doubleStream4 = doubleStream2.sequential();
        org.junit.Assert.assertNotNull(doubleStream0);
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertNotNull(doubleStream3);
        org.junit.Assert.assertNotNull(doubleStream4);
    }

    @Test
    public void test6053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6053");
        org.joda.time.YearMonthDay yearMonthDay0 = new org.joda.time.YearMonthDay();
        java.util.TimeZone timeZone3 = null;
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forTimeZone(timeZone3);
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight((long) 1970, dateTimeZone4);
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((long) 3600000, dateTimeZone4);
        org.joda.time.DateMidnight dateMidnight7 = yearMonthDay0.toDateMidnight(dateTimeZone4);
        org.joda.time.LocalDate localDate8 = yearMonthDay0.toLocalDate();
        int int9 = localDate8.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate11 = localDate8.withYearOfEra(56);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8 + "'", int9 == 8);
        org.junit.Assert.assertNotNull(localDate11);
    }

    @Test
    public void test6054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6054");
        java.security.CodeSource codeSource0 = null;
        java.security.PermissionCollection permissionCollection1 = null;
        java.lang.ClassLoader classLoader2 = null;
        java.security.Principal[] principalArray3 = null;
        java.security.ProtectionDomain protectionDomain4 = new java.security.ProtectionDomain(codeSource0, permissionCollection1, classLoader2, principalArray3);
        java.security.CodeSource codeSource5 = null;
        java.security.PermissionCollection permissionCollection6 = null;
        java.lang.ClassLoader classLoader7 = null;
        java.security.Principal[] principalArray8 = null;
        java.security.ProtectionDomain protectionDomain9 = new java.security.ProtectionDomain(codeSource5, permissionCollection6, classLoader7, principalArray8);
        java.security.CodeSource codeSource10 = null;
        java.security.PermissionCollection permissionCollection11 = null;
        java.security.ProtectionDomain protectionDomain12 = new java.security.ProtectionDomain(codeSource10, permissionCollection11);
        java.lang.ClassLoader classLoader13 = protectionDomain12.getClassLoader();
        java.security.Principal[] principalArray14 = protectionDomain12.getPrincipals();
        java.security.CodeSource codeSource15 = null;
        java.security.PermissionCollection permissionCollection16 = null;
        java.lang.ClassLoader classLoader17 = null;
        java.security.Principal principal18 = null;
        java.security.Principal[] principalArray19 = new java.security.Principal[] { principal18 };
        java.security.ProtectionDomain protectionDomain20 = new java.security.ProtectionDomain(codeSource15, permissionCollection16, classLoader17, principalArray19);
        java.security.ProtectionDomain[] protectionDomainArray21 = new java.security.ProtectionDomain[] { protectionDomain4, protectionDomain9, protectionDomain12, protectionDomain20 };
        java.security.AccessControlContext accessControlContext22 = new java.security.AccessControlContext(protectionDomainArray21);
        javax.security.auth.Subject subject23 = javax.security.auth.Subject.getSubject(accessControlContext22);
        org.joda.time.Period period25 = org.joda.time.Period.years(16);
        boolean boolean26 = accessControlContext22.equals((java.lang.Object) period25);
        java.security.DomainCombiner domainCombiner27 = null;
        java.security.AccessControlContext accessControlContext28 = new java.security.AccessControlContext(accessControlContext22, domainCombiner27);
        java.io.File file30 = null;
        java.io.File file32 = new java.io.File(file30, "1970-01-01T00:00:00.003Z");
        java.net.URL uRL33 = file32.toURL();
        java.io.File file34 = null;
        java.io.File file36 = new java.io.File(file34, "1970-01-01T00:00:00.003Z");
        java.net.URL uRL37 = file36.toURL();
        boolean boolean38 = uRL33.sameFile(uRL37);
        java.lang.String str39 = uRL33.getPath();
        java.net.URLConnection uRLConnection40 = uRL33.openConnection();
        java.lang.String str41 = uRLConnection40.getContentType();
        long long44 = uRLConnection40.getHeaderFieldLong("zh-TW", 57L);
        uRLConnection40.setReadTimeout(13);
        java.security.Permission permission47 = uRLConnection40.getPermission();
        java.security.AccessControlException accessControlException48 = new java.security.AccessControlException("parsecasesensitive(false)(value(year,4,10,exceeds_pad)'-'value(monthofyear,2)'-'value(dayofmonth,2))[offset(+hh:mm:ss,'z')]", permission47);
        java.io.File file50 = null;
        java.io.File file52 = new java.io.File(file50, "1970-01-01T00:00:00.003Z");
        java.net.URL uRL53 = file52.toURL();
        java.io.File file54 = null;
        java.io.File file56 = new java.io.File(file54, "1970-01-01T00:00:00.003Z");
        java.net.URL uRL57 = file56.toURL();
        boolean boolean58 = uRL53.sameFile(uRL57);
        java.lang.String str59 = uRL53.getPath();
        java.net.URLConnection uRLConnection60 = uRL53.openConnection();
        java.lang.String str61 = uRLConnection60.getContentType();
        long long64 = uRLConnection60.getHeaderFieldLong("zh-TW", 57L);
        uRLConnection60.setReadTimeout(13);
        java.security.Permission permission67 = uRLConnection60.getPermission();
        java.security.AccessControlException accessControlException68 = new java.security.AccessControlException("parsecasesensitive(false)(value(year,4,10,exceeds_pad)'-'value(monthofyear,2)'-'value(dayofmonth,2))[offset(+hh:mm:ss,'z')]", permission67);
        boolean boolean69 = permission47.implies(permission67);
        java.lang.Object obj70 = null;
        boolean boolean71 = permission67.equals(obj70);
        // The following exception was thrown during execution in test generation
        try {
            accessControlContext22.checkPermission(permission67);
            org.junit.Assert.fail("Expected exception of type java.security.AccessControlException; message: access denied (\"java.io.FilePermission\" \"/experiment/1970-01-01T00:00:00.003Z\" \"read\")");
        } catch (java.security.AccessControlException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(protectionDomain12.toString(), "ProtectionDomain  null\n null\n <no principals>\n null\n");
        org.junit.Assert.assertNull(classLoader13);
        org.junit.Assert.assertNotNull(principalArray14);
        org.junit.Assert.assertNotNull(principalArray19);
        org.junit.Assert.assertNotNull(protectionDomainArray21);
        org.junit.Assert.assertNull(subject23);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull("file32.getParent() == null", file32.getParent());
        org.junit.Assert.assertEquals(file32.toString(), "1970-01-01T00:00:00.003Z");
        org.junit.Assert.assertNotNull(uRL33);
// flaky:         org.junit.Assert.assertEquals(uRL33.toString(), "file:/experiment/1970-01-01T00:00:00.003Z");
        org.junit.Assert.assertNull("file36.getParent() == null", file36.getParent());
        org.junit.Assert.assertEquals(file36.toString(), "1970-01-01T00:00:00.003Z");
        org.junit.Assert.assertNotNull(uRL37);
// flaky:         org.junit.Assert.assertEquals(uRL37.toString(), "file:/experiment/1970-01-01T00:00:00.003Z");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str39 + "' != '" + "/experiment/1970-01-01T00:00:00.003Z" + "'", str39, "/experiment/1970-01-01T00:00:00.003Z");
        org.junit.Assert.assertNotNull(uRLConnection40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "content/unknown" + "'", str41, "content/unknown");
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 57L + "'", long44 == 57L);
        org.junit.Assert.assertNotNull(permission47);
        org.junit.Assert.assertNull("file52.getParent() == null", file52.getParent());
        org.junit.Assert.assertEquals(file52.toString(), "1970-01-01T00:00:00.003Z");
        org.junit.Assert.assertNotNull(uRL53);
// flaky:         org.junit.Assert.assertEquals(uRL53.toString(), "file:/experiment/1970-01-01T00:00:00.003Z");
        org.junit.Assert.assertNull("file56.getParent() == null", file56.getParent());
        org.junit.Assert.assertEquals(file56.toString(), "1970-01-01T00:00:00.003Z");
        org.junit.Assert.assertNotNull(uRL57);
// flaky:         org.junit.Assert.assertEquals(uRL57.toString(), "file:/experiment/1970-01-01T00:00:00.003Z");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str59 + "' != '" + "/experiment/1970-01-01T00:00:00.003Z" + "'", str59, "/experiment/1970-01-01T00:00:00.003Z");
        org.junit.Assert.assertNotNull(uRLConnection60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "content/unknown" + "'", str61, "content/unknown");
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 57L + "'", long64 == 57L);
        org.junit.Assert.assertNotNull(permission67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
    }

    @Test
    public void test6055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6055");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(36, 999, 15, 680, (-1000000), 574);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 680 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test6056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6056");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.Duration duration2 = new org.joda.time.Duration(readableInstant0, readableInstant1);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = duration2.toPeriodTo(readableInstant3, periodType4);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.Duration duration8 = new org.joda.time.Duration(readableInstant6, readableInstant7);
        long long9 = duration8.getMillis();
        boolean boolean10 = duration2.isShorterThan((org.joda.time.ReadableDuration) duration8);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) 3, chronology12);
        org.joda.time.DateTime.Property property14 = dateTime13.dayOfYear();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight((java.lang.Object) dateTime13, chronology15);
        org.joda.time.MutableDateTime mutableDateTime17 = dateTime13.toMutableDateTime();
        mutableDateTime17.addYears((int) (short) 100);
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime17.dayOfWeek();
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime17.year();
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime17.weekyear();
        boolean boolean23 = duration2.equals((java.lang.Object) mutableDateTime17);
        mutableDateTime17.addMonths((int) ' ');
        mutableDateTime17.add((long) (byte) 10);
        org.joda.time.Period period28 = org.joda.time.Period.ZERO;
        org.joda.time.Period period29 = period28.normalizedStandard();
        org.joda.time.Period period31 = period28.plusHours(2);
        java.time.chrono.IsoEra isoEra32 = java.time.chrono.IsoEra.CE;
        boolean boolean33 = period31.equals((java.lang.Object) isoEra32);
        int int34 = period31.getMinutes();
        mutableDateTime17.add((org.joda.time.ReadablePeriod) period31);
        java.util.TimeZone timeZone37 = null;
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forTimeZone(timeZone37);
        org.joda.time.DateMidnight dateMidnight39 = new org.joda.time.DateMidnight((long) 1970, dateTimeZone38);
        long long42 = dateTimeZone38.convertLocalToUTC((long) 3, false);
        long long45 = dateTimeZone38.convertLocalToUTC(0L, true);
        mutableDateTime17.setZoneRetainFields(dateTimeZone38);
        java.lang.String str47 = dateTimeZone38.toString();
        org.joda.time.chrono.EthiopicChronology ethiopicChronology48 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone38);
        org.joda.time.DateTimeField dateTimeField49 = ethiopicChronology48.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone50 = ethiopicChronology48.getZone();
        org.joda.time.DateTimeField dateTimeField51 = ethiopicChronology48.era();
        org.joda.time.DateTimeField dateTimeField52 = ethiopicChronology48.secondOfDay();
        org.joda.time.DateTimeField dateTimeField53 = ethiopicChronology48.minuteOfHour();
        org.joda.time.DurationField durationField54 = ethiopicChronology48.months();
        org.joda.time.DateTimeField dateTimeField55 = ethiopicChronology48.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField56 = ethiopicChronology48.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField57 = ethiopicChronology48.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField58 = ethiopicChronology48.minuteOfHour();
        org.joda.time.DurationField durationField59 = ethiopicChronology48.eras();
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertTrue("'" + isoEra32 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra32.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 3L + "'", long42 == 3L);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Etc/UTC" + "'", str47, "Etc/UTC");
        org.junit.Assert.assertNotNull(ethiopicChronology48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(durationField54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(durationField59);
    }

    @Test
    public void test6057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6057");
        java.nio.charset.CoderResult coderResult0 = java.nio.charset.CoderResult.UNDERFLOW;
        boolean boolean1 = coderResult0.isError();
        boolean boolean2 = coderResult0.isOverflow();
        boolean boolean3 = coderResult0.isUnderflow();
        org.junit.Assert.assertNotNull(coderResult0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
    }

    @Test
    public void test6058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6058");
        java.util.stream.DoubleStream doubleStream1 = java.util.stream.DoubleStream.of((double) 115430400000L);
        java.util.PrimitiveIterator.OfDouble ofDouble2 = doubleStream1.iterator();
        org.junit.Assert.assertNotNull(doubleStream1);
        org.junit.Assert.assertNotNull(ofDouble2);
    }

    @Test
    public void test6059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6059");
        java.util.GregorianCalendar gregorianCalendar5 = new java.util.GregorianCalendar(12, 4096, 7, (-1), (int) (short) 10);
        int int6 = gregorianCalendar5.getWeeksInWeekYear();
        java.lang.String str7 = gregorianCalendar5.getCalendarType();
        java.time.ZonedDateTime zonedDateTime8 = gregorianCalendar5.toZonedDateTime();
        java.time.ZonedDateTime zonedDateTime10 = zonedDateTime8.minusMonths((long) 10);
        java.time.chrono.ChronoZonedDateTime<java.time.LocalDate> localDateChronoZonedDateTime11 = zonedDateTime8.withEarlierOffsetAtOverlap();
        int int12 = zonedDateTime8.getDayOfYear();
        java.time.ZonedDateTime zonedDateTime14 = zonedDateTime8.withMinute(34);
        java.time.Instant instant15 = java.time.Instant.from((java.time.temporal.TemporalAccessor) zonedDateTime8);
        java.time.Instant instant16 = zonedDateTime8.toInstant();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 52 + "'", int6 == 52);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "gregory" + "'", str7, "gregory");
        org.junit.Assert.assertNotNull(zonedDateTime8);
        org.junit.Assert.assertNotNull(zonedDateTime10);
        org.junit.Assert.assertNotNull(localDateChronoZonedDateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 127 + "'", int12 == 127);
        org.junit.Assert.assertNotNull(zonedDateTime14);
        org.junit.Assert.assertNotNull(instant15);
        org.junit.Assert.assertNotNull(instant16);
    }

    @Test
    public void test6060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6060");
        java.util.TimeZone timeZone1 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        java.util.TimeZone timeZone4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forTimeZone(timeZone4);
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight((long) 1970, dateTimeZone5);
        long long9 = dateTimeZone5.convertLocalToUTC((long) 3, false);
        long long11 = dateTimeZone2.getMillisKeepLocal(dateTimeZone5, (long) ':');
        long long14 = dateTimeZone2.adjustOffset(0L, false);
        org.joda.time.LocalTime localTime15 = new org.joda.time.LocalTime((long) 0, dateTimeZone2);
        org.joda.time.Instant instant16 = new org.joda.time.Instant();
        long long17 = instant16.getMillis();
        boolean boolean18 = localTime15.equals((java.lang.Object) long17);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 3L + "'", long9 == 3L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 58L + "'", long11 == 58L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
// flaky:         org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1645436569272L + "'", long17 == 1645436569272L);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test6061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6061");
        java.text.AttributedCharacterIterator.Attribute attribute0 = java.text.AttributedCharacterIterator.Attribute.INPUT_METHOD_SEGMENT;
        java.time.temporal.ChronoField chronoField1 = java.time.temporal.ChronoField.MONTH_OF_YEAR;
        boolean boolean2 = attribute0.equals((java.lang.Object) chronoField1);
        java.util.GregorianCalendar gregorianCalendar8 = new java.util.GregorianCalendar(12, 4096, 7, (-1), (int) (short) 10);
        int int9 = gregorianCalendar8.getWeeksInWeekYear();
        org.joda.time.YearMonthDay yearMonthDay10 = org.joda.time.YearMonthDay.fromCalendarFields((java.util.Calendar) gregorianCalendar8);
        org.joda.time.YearMonthDay yearMonthDay12 = yearMonthDay10.withYear(0);
        org.joda.time.Hours hours13 = org.joda.time.Hours.ZERO;
        org.joda.time.YearMonthDay yearMonthDay14 = yearMonthDay12.minus((org.joda.time.ReadablePeriod) hours13);
        org.joda.time.YearMonthDay.Property property15 = yearMonthDay12.monthOfYear();
        boolean boolean16 = attribute0.equals((java.lang.Object) property15);
        org.joda.time.ReadableInstant readableInstant17 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int18 = property15.compareTo(readableInstant17);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The instant must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(attribute0);
        org.junit.Assert.assertTrue("'" + chronoField1 + "' != '" + java.time.temporal.ChronoField.MONTH_OF_YEAR + "'", chronoField1.equals(java.time.temporal.ChronoField.MONTH_OF_YEAR));
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 52 + "'", int9 == 52);
        org.junit.Assert.assertNotNull(yearMonthDay10);
        org.junit.Assert.assertNotNull(yearMonthDay12);
        org.junit.Assert.assertNotNull(hours13);
        org.junit.Assert.assertNotNull(yearMonthDay14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test6062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6062");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.Duration duration2 = new org.joda.time.Duration(readableInstant0, readableInstant1);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = duration2.toPeriodTo(readableInstant3, periodType4);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.Duration duration8 = new org.joda.time.Duration(readableInstant6, readableInstant7);
        long long9 = duration8.getMillis();
        boolean boolean10 = duration2.isShorterThan((org.joda.time.ReadableDuration) duration8);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) 3, chronology12);
        org.joda.time.DateTime.Property property14 = dateTime13.dayOfYear();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight((java.lang.Object) dateTime13, chronology15);
        org.joda.time.MutableDateTime mutableDateTime17 = dateTime13.toMutableDateTime();
        mutableDateTime17.addYears((int) (short) 100);
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime17.dayOfWeek();
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime17.year();
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime17.weekyear();
        boolean boolean23 = duration2.equals((java.lang.Object) mutableDateTime17);
        mutableDateTime17.addMonths((int) ' ');
        mutableDateTime17.add((long) (byte) 10);
        org.joda.time.Period period28 = org.joda.time.Period.ZERO;
        org.joda.time.Period period29 = period28.normalizedStandard();
        org.joda.time.Period period31 = period28.plusHours(2);
        java.time.chrono.IsoEra isoEra32 = java.time.chrono.IsoEra.CE;
        boolean boolean33 = period31.equals((java.lang.Object) isoEra32);
        int int34 = period31.getMinutes();
        mutableDateTime17.add((org.joda.time.ReadablePeriod) period31);
        java.util.TimeZone timeZone37 = null;
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forTimeZone(timeZone37);
        org.joda.time.DateMidnight dateMidnight39 = new org.joda.time.DateMidnight((long) 1970, dateTimeZone38);
        long long42 = dateTimeZone38.convertLocalToUTC((long) 3, false);
        long long45 = dateTimeZone38.convertLocalToUTC(0L, true);
        mutableDateTime17.setZoneRetainFields(dateTimeZone38);
        java.lang.String str47 = dateTimeZone38.toString();
        org.joda.time.chrono.EthiopicChronology ethiopicChronology48 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone38);
        org.joda.time.DateTimeField dateTimeField49 = ethiopicChronology48.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone50 = ethiopicChronology48.getZone();
        org.joda.time.DateTimeField dateTimeField51 = ethiopicChronology48.era();
        org.joda.time.DateTimeField dateTimeField52 = ethiopicChronology48.secondOfDay();
        org.joda.time.DateTimeField dateTimeField53 = ethiopicChronology48.minuteOfHour();
        org.joda.time.DurationField durationField54 = ethiopicChronology48.months();
        org.joda.time.DateTimeField dateTimeField55 = ethiopicChronology48.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField56 = ethiopicChronology48.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField57 = ethiopicChronology48.minuteOfDay();
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.DateTime dateTime60 = new org.joda.time.DateTime((long) 3, chronology59);
        org.joda.time.DateTime.Property property61 = dateTime60.dayOfYear();
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.DateMidnight dateMidnight63 = new org.joda.time.DateMidnight((java.lang.Object) dateTime60, chronology62);
        org.joda.time.MutableDateTime mutableDateTime64 = dateTime60.toMutableDateTime();
        mutableDateTime64.addYears((int) (short) 100);
        org.joda.time.MutableDateTime.Property property67 = mutableDateTime64.dayOfWeek();
        org.joda.time.MutableDateTime.Property property68 = mutableDateTime64.year();
        java.util.TimeZone timeZone69 = null;
        org.joda.time.DateTimeZone dateTimeZone70 = org.joda.time.DateTimeZone.forTimeZone(timeZone69);
        mutableDateTime64.setZone(dateTimeZone70);
        java.util.Locale locale73 = java.util.Locale.TAIWAN;
        java.lang.String str74 = dateTimeZone70.getShortName((long) 64, locale73);
        int int76 = dateTimeZone70.getOffset(34450799000000L);
        org.joda.time.Chronology chronology77 = ethiopicChronology48.withZone(dateTimeZone70);
        org.joda.time.DateTimeField dateTimeField78 = ethiopicChronology48.centuryOfEra();
        org.joda.time.YearMonthDay yearMonthDay79 = new org.joda.time.YearMonthDay((org.joda.time.Chronology) ethiopicChronology48);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertTrue("'" + isoEra32 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra32.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 3L + "'", long42 == 3L);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Etc/UTC" + "'", str47, "Etc/UTC");
        org.junit.Assert.assertNotNull(ethiopicChronology48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(durationField54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertNotNull(mutableDateTime64);
        org.junit.Assert.assertNotNull(property67);
        org.junit.Assert.assertNotNull(property68);
        org.junit.Assert.assertNotNull(dateTimeZone70);
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "+00:00" + "'", str74, "+00:00");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertNotNull(chronology77);
        org.junit.Assert.assertNotNull(dateTimeField78);
    }

    @Test
    public void test6063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6063");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.Duration duration2 = new org.joda.time.Duration(readableInstant0, readableInstant1);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = duration2.toPeriodTo(readableInstant3, periodType4);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.Duration duration8 = new org.joda.time.Duration(readableInstant6, readableInstant7);
        long long9 = duration8.getMillis();
        boolean boolean10 = duration2.isShorterThan((org.joda.time.ReadableDuration) duration8);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) 3, chronology12);
        org.joda.time.DateTime.Property property14 = dateTime13.dayOfYear();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight((java.lang.Object) dateTime13, chronology15);
        org.joda.time.MutableDateTime mutableDateTime17 = dateTime13.toMutableDateTime();
        mutableDateTime17.addYears((int) (short) 100);
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime17.dayOfWeek();
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime17.year();
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime17.weekyear();
        boolean boolean23 = duration2.equals((java.lang.Object) mutableDateTime17);
        mutableDateTime17.addMonths((int) ' ');
        mutableDateTime17.add((long) (byte) 10);
        org.joda.time.Period period28 = org.joda.time.Period.ZERO;
        org.joda.time.Period period29 = period28.normalizedStandard();
        org.joda.time.Period period31 = period28.plusHours(2);
        java.time.chrono.IsoEra isoEra32 = java.time.chrono.IsoEra.CE;
        boolean boolean33 = period31.equals((java.lang.Object) isoEra32);
        int int34 = period31.getMinutes();
        mutableDateTime17.add((org.joda.time.ReadablePeriod) period31);
        java.util.TimeZone timeZone37 = null;
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forTimeZone(timeZone37);
        org.joda.time.DateMidnight dateMidnight39 = new org.joda.time.DateMidnight((long) 1970, dateTimeZone38);
        long long42 = dateTimeZone38.convertLocalToUTC((long) 3, false);
        long long45 = dateTimeZone38.convertLocalToUTC(0L, true);
        mutableDateTime17.setZoneRetainFields(dateTimeZone38);
        java.lang.String str47 = dateTimeZone38.toString();
        org.joda.time.chrono.EthiopicChronology ethiopicChronology48 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone38);
        org.joda.time.DateTimeField dateTimeField49 = ethiopicChronology48.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone50 = ethiopicChronology48.getZone();
        org.joda.time.DateTimeField dateTimeField51 = ethiopicChronology48.era();
        org.joda.time.DateTimeField dateTimeField52 = ethiopicChronology48.secondOfDay();
        org.joda.time.DateTimeField dateTimeField53 = ethiopicChronology48.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField54 = ethiopicChronology48.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime55 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) ethiopicChronology48);
        org.joda.time.DurationField durationField56 = ethiopicChronology48.seconds();
        org.joda.time.DateTimeField dateTimeField57 = ethiopicChronology48.weekyear();
        org.joda.time.DateTimeZone dateTimeZone58 = ethiopicChronology48.getZone();
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertTrue("'" + isoEra32 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra32.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 3L + "'", long42 == 3L);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Etc/UTC" + "'", str47, "Etc/UTC");
        org.junit.Assert.assertNotNull(ethiopicChronology48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(durationField56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(dateTimeZone58);
    }

    @Test
    public void test6064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6064");
        org.joda.time.chrono.EthiopicChronology ethiopicChronology0 = org.joda.time.chrono.EthiopicChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = ethiopicChronology0.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField2 = ethiopicChronology0.era();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((long) 0, chronology4);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) 3, chronology7);
        org.joda.time.DateTime.Property property9 = dateTime8.dayOfYear();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight((java.lang.Object) dateTime8, chronology10);
        org.joda.time.DateTime dateTime12 = localTime5.toDateTime((org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.LocalTime localTime14 = localTime5.plusHours(3);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) 3, chronology16);
        org.joda.time.DateTime.Property property18 = dateTime17.dayOfYear();
        org.joda.time.Interval interval19 = property18.toInterval();
        org.joda.time.Period period20 = org.joda.time.Period.ZERO;
        org.joda.time.Period period21 = period20.normalizedStandard();
        org.joda.time.Period period23 = period21.minusMinutes((int) ' ');
        org.joda.time.Period period25 = period23.withMinutes(32769);
        boolean boolean26 = interval19.equals((java.lang.Object) period25);
        org.joda.time.LocalTime localTime28 = localTime14.withPeriodAdded((org.joda.time.ReadablePeriod) period25, (int) (byte) 100);
        org.joda.time.Period period30 = period25.minusMinutes((int) ':');
        long long33 = ethiopicChronology0.add((org.joda.time.ReadablePeriod) period25, (long) 0, 83399);
        org.joda.time.DateTimeField dateTimeField34 = ethiopicChronology0.dayOfYear();
        org.joda.time.DateTimeField dateTimeField35 = ethiopicChronology0.secondOfMinute();
        java.lang.String str37 = dateTimeField35.getAsText(365L);
        org.junit.Assert.assertNotNull(ethiopicChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(localTime28);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 163974109860000L + "'", long33 == 163974109860000L);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "0" + "'", str37, "0");
    }

    @Test
    public void test6065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6065");
        java.time.ZoneOffset zoneOffset1 = java.time.ZoneOffset.ofTotalSeconds(45);
        org.junit.Assert.assertNotNull(zoneOffset1);
    }

    @Test
    public void test6066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6066");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.Duration duration2 = new org.joda.time.Duration(readableInstant0, readableInstant1);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = duration2.toPeriodTo(readableInstant3, periodType4);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.Duration duration8 = new org.joda.time.Duration(readableInstant6, readableInstant7);
        long long9 = duration8.getMillis();
        boolean boolean10 = duration2.isShorterThan((org.joda.time.ReadableDuration) duration8);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) 3, chronology12);
        org.joda.time.DateTime.Property property14 = dateTime13.dayOfYear();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight((java.lang.Object) dateTime13, chronology15);
        org.joda.time.MutableDateTime mutableDateTime17 = dateTime13.toMutableDateTime();
        mutableDateTime17.addYears((int) (short) 100);
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime17.dayOfWeek();
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime17.year();
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime17.weekyear();
        boolean boolean23 = duration2.equals((java.lang.Object) mutableDateTime17);
        mutableDateTime17.addMonths((int) ' ');
        mutableDateTime17.add((long) (byte) 10);
        org.joda.time.Period period28 = org.joda.time.Period.ZERO;
        org.joda.time.Period period29 = period28.normalizedStandard();
        org.joda.time.Period period31 = period28.plusHours(2);
        java.time.chrono.IsoEra isoEra32 = java.time.chrono.IsoEra.CE;
        boolean boolean33 = period31.equals((java.lang.Object) isoEra32);
        int int34 = period31.getMinutes();
        mutableDateTime17.add((org.joda.time.ReadablePeriod) period31);
        java.util.TimeZone timeZone37 = null;
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forTimeZone(timeZone37);
        org.joda.time.DateMidnight dateMidnight39 = new org.joda.time.DateMidnight((long) 1970, dateTimeZone38);
        long long42 = dateTimeZone38.convertLocalToUTC((long) 3, false);
        long long45 = dateTimeZone38.convertLocalToUTC(0L, true);
        mutableDateTime17.setZoneRetainFields(dateTimeZone38);
        java.lang.String str47 = dateTimeZone38.toString();
        org.joda.time.chrono.EthiopicChronology ethiopicChronology48 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone38);
        org.joda.time.DateTimeField dateTimeField49 = ethiopicChronology48.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone50 = ethiopicChronology48.getZone();
        org.joda.time.DateTimeField dateTimeField51 = ethiopicChronology48.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField52 = ethiopicChronology48.minuteOfDay();
        org.joda.time.Chronology chronology53 = ethiopicChronology48.withUTC();
        org.joda.time.DateTimeZone dateTimeZone54 = ethiopicChronology48.getZone();
        org.joda.time.MutableDateTime mutableDateTime55 = new org.joda.time.MutableDateTime(dateTimeZone54);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertTrue("'" + isoEra32 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra32.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 3L + "'", long42 == 3L);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Etc/UTC" + "'", str47, "Etc/UTC");
        org.junit.Assert.assertNotNull(ethiopicChronology48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(dateTimeZone54);
    }

    @Test
    public void test6067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6067");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.withField(dateTimeFieldType2, (int) 'a');
        org.joda.time.Period period5 = org.joda.time.Period.ZERO;
        org.joda.time.Seconds seconds6 = period5.toStandardSeconds();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime1.withPeriodAdded((org.joda.time.ReadablePeriod) period5, 4096);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.plusHours(57);
        int int11 = localDateTime8.size();
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(seconds6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 4 + "'", int11 == 4);
    }

    @Test
    public void test6068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6068");
        org.joda.time.Period period3 = org.joda.time.Period.seconds(7);
        org.joda.time.PeriodType periodType4 = period3.getPeriodType();
        org.joda.time.DurationFieldType durationFieldType5 = org.joda.time.DurationFieldType.weeks();
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.Duration duration8 = new org.joda.time.Duration(readableInstant6, readableInstant7);
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.PeriodType periodType10 = null;
        org.joda.time.Period period11 = duration8.toPeriodTo(readableInstant9, periodType10);
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.Duration duration14 = new org.joda.time.Duration(readableInstant12, readableInstant13);
        long long15 = duration14.getMillis();
        boolean boolean16 = duration8.isShorterThan((org.joda.time.ReadableDuration) duration14);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) 3, chronology18);
        org.joda.time.DateTime.Property property20 = dateTime19.dayOfYear();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight((java.lang.Object) dateTime19, chronology21);
        org.joda.time.MutableDateTime mutableDateTime23 = dateTime19.toMutableDateTime();
        mutableDateTime23.addYears((int) (short) 100);
        org.joda.time.MutableDateTime.Property property26 = mutableDateTime23.dayOfWeek();
        org.joda.time.MutableDateTime.Property property27 = mutableDateTime23.year();
        org.joda.time.MutableDateTime.Property property28 = mutableDateTime23.weekyear();
        boolean boolean29 = duration8.equals((java.lang.Object) mutableDateTime23);
        mutableDateTime23.addMonths((int) ' ');
        mutableDateTime23.add((long) (byte) 10);
        org.joda.time.Period period34 = org.joda.time.Period.ZERO;
        org.joda.time.Period period35 = period34.normalizedStandard();
        org.joda.time.Period period37 = period34.plusHours(2);
        java.time.chrono.IsoEra isoEra38 = java.time.chrono.IsoEra.CE;
        boolean boolean39 = period37.equals((java.lang.Object) isoEra38);
        int int40 = period37.getMinutes();
        mutableDateTime23.add((org.joda.time.ReadablePeriod) period37);
        java.util.TimeZone timeZone43 = null;
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forTimeZone(timeZone43);
        org.joda.time.DateMidnight dateMidnight45 = new org.joda.time.DateMidnight((long) 1970, dateTimeZone44);
        long long48 = dateTimeZone44.convertLocalToUTC((long) 3, false);
        long long51 = dateTimeZone44.convertLocalToUTC(0L, true);
        mutableDateTime23.setZoneRetainFields(dateTimeZone44);
        java.lang.String str53 = dateTimeZone44.toString();
        org.joda.time.chrono.EthiopicChronology ethiopicChronology54 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone44);
        org.joda.time.DateTimeField dateTimeField55 = ethiopicChronology54.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone56 = ethiopicChronology54.getZone();
        org.joda.time.DateTimeField dateTimeField57 = ethiopicChronology54.era();
        org.joda.time.DateTimeField dateTimeField58 = ethiopicChronology54.secondOfDay();
        org.joda.time.DateTimeField dateTimeField59 = ethiopicChronology54.minuteOfHour();
        org.joda.time.DurationField durationField60 = ethiopicChronology54.months();
        org.joda.time.DateTimeField dateTimeField61 = ethiopicChronology54.minuteOfDay();
        boolean boolean62 = durationFieldType5.isSupported((org.joda.time.Chronology) ethiopicChronology54);
        org.joda.time.Period period63 = new org.joda.time.Period(0L, (long) 960000, periodType4, (org.joda.time.Chronology) ethiopicChronology54);
        org.joda.time.DurationField durationField64 = ethiopicChronology54.years();
        org.joda.time.DateTimeField dateTimeField65 = ethiopicChronology54.secondOfDay();
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(durationFieldType5);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(mutableDateTime23);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertTrue("'" + isoEra38 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra38.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 3L + "'", long48 == 3L);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 0L + "'", long51 == 0L);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "Etc/UTC" + "'", str53, "Etc/UTC");
        org.junit.Assert.assertNotNull(ethiopicChronology54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(dateTimeZone56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(durationField60);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(durationField64);
        org.junit.Assert.assertNotNull(dateTimeField65);
    }

    @Test
    public void test6069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6069");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime4 = property2.setCopy((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime6 = property2.addToCopy(21);
        org.joda.time.LocalDateTime localDateTime7 = property2.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.dayOfYear();
        org.joda.time.LocalDateTime localDateTime9 = property8.roundFloorCopy();
        int int10 = localDateTime9.getDayOfMonth();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) 3, chronology12);
        org.joda.time.DateTime.Property property14 = dateTime13.dayOfYear();
        org.joda.time.Interval interval15 = property14.toInterval();
        org.joda.time.DateTimeField dateTimeField16 = property14.getField();
        org.joda.time.DateTime dateTime18 = property14.addToCopy((long) (byte) 1);
        org.joda.time.DateTime dateTime20 = dateTime18.withYear(4);
        org.joda.time.DateTime dateTime21 = localDateTime9.toDateTime((org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.DateTime dateTime22 = dateTime21.toDateTimeISO();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
    }

    @Test
    public void test6070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6070");
        java.util.GregorianCalendar gregorianCalendar5 = new java.util.GregorianCalendar(12, 4096, 7, (-1), (int) (short) 10);
        int int6 = gregorianCalendar5.getWeeksInWeekYear();
        java.lang.String str7 = gregorianCalendar5.getCalendarType();
        java.time.ZonedDateTime zonedDateTime8 = gregorianCalendar5.toZonedDateTime();
        java.time.ZonedDateTime zonedDateTime10 = zonedDateTime8.minusMonths((long) 10);
        java.time.ZonedDateTime zonedDateTime12 = zonedDateTime10.minusHours((long) 9);
        java.lang.String str13 = zonedDateTime10.toString();
        java.util.GregorianCalendar gregorianCalendar19 = new java.util.GregorianCalendar(12, 4096, 7, (-1), (int) (short) 10);
        int int20 = gregorianCalendar19.getWeeksInWeekYear();
        java.lang.String str21 = gregorianCalendar19.getCalendarType();
        java.time.ZonedDateTime zonedDateTime22 = gregorianCalendar19.toZonedDateTime();
        java.time.ZonedDateTime zonedDateTime24 = zonedDateTime22.minusMonths((long) 10);
        int int25 = zonedDateTime22.getMonthValue();
        int int26 = zonedDateTime22.getSecond();
        java.util.GregorianCalendar gregorianCalendar32 = new java.util.GregorianCalendar(12, 4096, 7, (-1), (int) (short) 10);
        int int33 = gregorianCalendar32.getWeeksInWeekYear();
        java.lang.String str34 = gregorianCalendar32.getCalendarType();
        java.time.ZonedDateTime zonedDateTime35 = gregorianCalendar32.toZonedDateTime();
        java.time.ZonedDateTime zonedDateTime37 = zonedDateTime35.minusMonths((long) 10);
        java.time.chrono.ChronoZonedDateTime<java.time.LocalDate> localDateChronoZonedDateTime38 = zonedDateTime35.withEarlierOffsetAtOverlap();
        java.time.ZonedDateTime zonedDateTime40 = zonedDateTime35.minusMonths((long) 4200);
        boolean boolean41 = zonedDateTime22.isBefore((java.time.chrono.ChronoZonedDateTime<java.time.LocalDate>) zonedDateTime40);
        boolean boolean42 = zonedDateTime10.isBefore((java.time.chrono.ChronoZonedDateTime<java.time.LocalDate>) zonedDateTime40);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 52 + "'", int6 == 52);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "gregory" + "'", str7, "gregory");
        org.junit.Assert.assertNotNull(zonedDateTime8);
        org.junit.Assert.assertNotNull(zonedDateTime10);
        org.junit.Assert.assertNotNull(zonedDateTime12);
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "0352-07-07T23:09:59.965Z[Etc/UTC]" + "'", str13, "0352-07-07T23:09:59.965Z[Etc/UTC]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 52 + "'", int20 == 52);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "gregory" + "'", str21, "gregory");
        org.junit.Assert.assertNotNull(zonedDateTime22);
        org.junit.Assert.assertNotNull(zonedDateTime24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 5 + "'", int25 == 5);
// flaky:         org.junit.Assert.assertTrue("'" + int26 + "' != '" + 59 + "'", int26 == 59);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 52 + "'", int33 == 52);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "gregory" + "'", str34, "gregory");
        org.junit.Assert.assertNotNull(zonedDateTime35);
        org.junit.Assert.assertNotNull(zonedDateTime37);
        org.junit.Assert.assertNotNull(localDateChronoZonedDateTime38);
        org.junit.Assert.assertNotNull(zonedDateTime40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test6071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6071");
        java.util.Date date0 = new java.util.Date();
        date0.setYear(59);
        int int3 = date0.getDate();
// flaky:         org.junit.Assert.assertEquals(date0.toString(), "Sat Feb 21 09:42:49 UTC 1959");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 21 + "'", int3 == 21);
    }

    @Test
    public void test6072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6072");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withYearOfCentury((int) 'a');
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.plusSeconds(6);
        org.joda.time.DateTime dateTime6 = localDateTime3.toDateTime();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime3.minusMillis((int) '/');
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minusMonths(100);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.withDayOfYear(17);
        org.joda.time.LocalDateTime.Property property13 = localDateTime10.era();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
    }

    @Test
    public void test6073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6073");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withYearOfCentury((int) 'a');
        int int4 = localDateTime3.getDayOfMonth();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime3.plusYears((int) (short) 100);
        int int7 = localDateTime3.getSecondOfMinute();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) 3, chronology9);
        org.joda.time.DateTime.Property property11 = dateTime10.dayOfYear();
        org.joda.time.Interval interval12 = property11.toInterval();
        org.joda.time.Period period13 = org.joda.time.Period.ZERO;
        org.joda.time.Period period14 = period13.normalizedStandard();
        org.joda.time.Period period16 = period14.minusMinutes((int) ' ');
        org.joda.time.Period period18 = period16.withMinutes(32769);
        boolean boolean19 = interval12.equals((java.lang.Object) period18);
        org.joda.time.DateTime dateTime20 = interval12.getStart();
        org.joda.time.Duration duration21 = interval12.toDuration();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime3.withDurationAdded((org.joda.time.ReadableDuration) duration21, 58);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 21 + "'", int4 == 21);
        org.junit.Assert.assertNotNull(localDateTime6);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 49 + "'", int7 == 49);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(localDateTime23);
    }

    @Test
    public void test6074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6074");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.Duration duration2 = new org.joda.time.Duration(readableInstant0, readableInstant1);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = duration2.toPeriodTo(readableInstant3, periodType4);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.Duration duration8 = new org.joda.time.Duration(readableInstant6, readableInstant7);
        long long9 = duration8.getMillis();
        boolean boolean10 = duration2.isShorterThan((org.joda.time.ReadableDuration) duration8);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) 3, chronology12);
        org.joda.time.DateTime.Property property14 = dateTime13.dayOfYear();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight((java.lang.Object) dateTime13, chronology15);
        org.joda.time.MutableDateTime mutableDateTime17 = dateTime13.toMutableDateTime();
        mutableDateTime17.addYears((int) (short) 100);
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime17.dayOfWeek();
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime17.year();
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime17.weekyear();
        boolean boolean23 = duration2.equals((java.lang.Object) mutableDateTime17);
        mutableDateTime17.addMonths((int) ' ');
        mutableDateTime17.add((long) (byte) 10);
        org.joda.time.Period period28 = org.joda.time.Period.ZERO;
        org.joda.time.Period period29 = period28.normalizedStandard();
        org.joda.time.Period period31 = period28.plusHours(2);
        java.time.chrono.IsoEra isoEra32 = java.time.chrono.IsoEra.CE;
        boolean boolean33 = period31.equals((java.lang.Object) isoEra32);
        int int34 = period31.getMinutes();
        mutableDateTime17.add((org.joda.time.ReadablePeriod) period31);
        java.util.TimeZone timeZone37 = null;
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forTimeZone(timeZone37);
        org.joda.time.DateMidnight dateMidnight39 = new org.joda.time.DateMidnight((long) 1970, dateTimeZone38);
        long long42 = dateTimeZone38.convertLocalToUTC((long) 3, false);
        long long45 = dateTimeZone38.convertLocalToUTC(0L, true);
        mutableDateTime17.setZoneRetainFields(dateTimeZone38);
        java.lang.String str47 = dateTimeZone38.toString();
        org.joda.time.chrono.EthiopicChronology ethiopicChronology48 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone38);
        org.joda.time.DateTimeField dateTimeField49 = ethiopicChronology48.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone50 = ethiopicChronology48.getZone();
        org.joda.time.DateTimeField dateTimeField51 = ethiopicChronology48.era();
        org.joda.time.DateTimeField dateTimeField52 = ethiopicChronology48.secondOfDay();
        org.joda.time.DateTimeField dateTimeField53 = ethiopicChronology48.minuteOfHour();
        org.joda.time.DurationField durationField54 = ethiopicChronology48.months();
        org.joda.time.DateTimeField dateTimeField55 = ethiopicChronology48.monthOfYear();
        org.joda.time.DateTimeField dateTimeField56 = ethiopicChronology48.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField57 = ethiopicChronology48.monthOfYear();
        org.joda.time.DateTimeField dateTimeField58 = ethiopicChronology48.yearOfCentury();
        org.joda.time.DurationField durationField59 = ethiopicChronology48.years();
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertTrue("'" + isoEra32 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra32.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 3L + "'", long42 == 3L);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Etc/UTC" + "'", str47, "Etc/UTC");
        org.junit.Assert.assertNotNull(ethiopicChronology48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(durationField54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(durationField59);
    }

    @Test
    public void test6075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6075");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.lang.Object obj2 = properties1.clone();
        java.util.Enumeration<java.lang.Object> objEnumeration3 = properties1.keys();
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.Duration duration7 = new org.joda.time.Duration(readableInstant5, readableInstant6);
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.PeriodType periodType9 = null;
        org.joda.time.Period period10 = duration7.toPeriodTo(readableInstant8, periodType9);
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.Duration duration13 = new org.joda.time.Duration(readableInstant11, readableInstant12);
        long long14 = duration13.getMillis();
        boolean boolean15 = duration7.isShorterThan((org.joda.time.ReadableDuration) duration13);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((long) 3, chronology17);
        org.joda.time.DateTime.Property property19 = dateTime18.dayOfYear();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight((java.lang.Object) dateTime18, chronology20);
        org.joda.time.MutableDateTime mutableDateTime22 = dateTime18.toMutableDateTime();
        mutableDateTime22.addYears((int) (short) 100);
        org.joda.time.MutableDateTime.Property property25 = mutableDateTime22.dayOfWeek();
        org.joda.time.MutableDateTime.Property property26 = mutableDateTime22.year();
        org.joda.time.MutableDateTime.Property property27 = mutableDateTime22.weekyear();
        boolean boolean28 = duration7.equals((java.lang.Object) mutableDateTime22);
        mutableDateTime22.addMonths((int) ' ');
        mutableDateTime22.add((long) (byte) 10);
        org.joda.time.Period period33 = org.joda.time.Period.ZERO;
        org.joda.time.Period period34 = period33.normalizedStandard();
        org.joda.time.Period period36 = period33.plusHours(2);
        java.time.chrono.IsoEra isoEra37 = java.time.chrono.IsoEra.CE;
        boolean boolean38 = period36.equals((java.lang.Object) isoEra37);
        int int39 = period36.getMinutes();
        mutableDateTime22.add((org.joda.time.ReadablePeriod) period36);
        java.util.TimeZone timeZone42 = null;
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forTimeZone(timeZone42);
        org.joda.time.DateMidnight dateMidnight44 = new org.joda.time.DateMidnight((long) 1970, dateTimeZone43);
        long long47 = dateTimeZone43.convertLocalToUTC((long) 3, false);
        long long50 = dateTimeZone43.convertLocalToUTC(0L, true);
        mutableDateTime22.setZoneRetainFields(dateTimeZone43);
        java.lang.String str52 = dateTimeZone43.toString();
        boolean boolean53 = dateTimeZone43.isFixed();
        org.joda.time.MutableDateTime mutableDateTime54 = new org.joda.time.MutableDateTime(1645434616L, dateTimeZone43);
        boolean boolean55 = properties1.contains((java.lang.Object) mutableDateTime54);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime54.setSecondOfMinute(189);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 189 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(obj2);
        org.junit.Assert.assertEquals(obj2.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj2), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj2), "{}");
        org.junit.Assert.assertNotNull(objEnumeration3);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(mutableDateTime22);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertTrue("'" + isoEra37 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra37.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 3L + "'", long47 == 3L);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "Etc/UTC" + "'", str52, "Etc/UTC");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
    }

    @Test
    public void test6076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6076");
        java.util.stream.DoubleStream doubleStream1 = java.util.stream.DoubleStream.of((double) (short) 1);
        long long2 = doubleStream1.count();
        java.util.function.DoubleToIntFunction doubleToIntFunction3 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.IntStream intStream4 = doubleStream1.mapToInt(doubleToIntFunction3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleStream1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
    }

    @Test
    public void test6077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6077");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withYearOfCentury((int) 'a');
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.plusSeconds(6);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.Duration duration8 = new org.joda.time.Duration(readableInstant6, readableInstant7);
        long long9 = duration8.getMillis();
        org.joda.time.Duration duration11 = duration8.plus((long) (byte) 1);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime3.minus((org.joda.time.ReadableDuration) duration11);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.withWeekOfWeekyear((int) '#');
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.withCenturyOfEra(10);
        org.joda.time.LocalDateTime.Property property17 = localDateTime14.dayOfWeek();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime19 = property17.setCopy("2022-02-21T09:39:05.844Z");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2022-02-21T09:39:05.844Z\" for dayOfWeek is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(property17);
    }

    @Test
    public void test6078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6078");
        java.time.Instant instant0 = java.time.Instant.now();
        java.nio.file.attribute.FileTime fileTime1 = java.nio.file.attribute.FileTime.from(instant0);
        org.joda.time.Period period2 = org.joda.time.Period.ZERO;
        org.joda.time.Period period3 = period2.normalizedStandard();
        org.joda.time.Period period5 = period2.plusHours(2);
        java.time.chrono.IsoEra isoEra6 = java.time.chrono.IsoEra.CE;
        boolean boolean7 = period5.equals((java.lang.Object) isoEra6);
        java.time.LocalTime localTime12 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime13 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime12);
        java.time.LocalTime localTime18 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime19 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime18);
        java.time.temporal.ChronoField chronoField20 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime22 = localTime18.with((java.time.temporal.TemporalField) chronoField20, (long) (short) 1);
        long long23 = localTime12.getLong((java.time.temporal.TemporalField) chronoField20);
        boolean boolean24 = isoEra6.isSupported((java.time.temporal.TemporalField) chronoField20);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery25 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period26 = isoEra6.query(periodTemporalQuery25);
        boolean boolean27 = period26.isNegative();
        java.time.Period period29 = period26.plusDays((long) ' ');
        java.time.temporal.ChronoField chronoField30 = java.time.temporal.ChronoField.SECOND_OF_DAY;
        boolean boolean31 = period26.equals((java.lang.Object) chronoField30);
        java.time.chrono.ChronoPeriod chronoPeriod32 = period26.negated();
        java.time.Instant instant33 = instant0.minus((java.time.temporal.TemporalAmount) chronoPeriod32);
        java.time.OffsetTime offsetTime34 = java.time.OffsetTime.MAX;
        java.time.LocalTime localTime35 = offsetTime34.toLocalTime();
        java.time.LocalTime localTime40 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime41 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime40);
        java.time.LocalTime localTime46 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime47 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime46);
        java.time.temporal.ChronoField chronoField48 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime50 = localTime46.with((java.time.temporal.TemporalField) chronoField48, (long) (short) 1);
        long long51 = localTime40.getLong((java.time.temporal.TemporalField) chronoField48);
        java.time.LocalTime localTime53 = localTime40.withSecond((int) (short) 1);
        int int54 = localTime53.getMinute();
        java.time.LocalTime localTime56 = localTime53.plusHours((long) (-1));
        java.time.OffsetTime offsetTime57 = offsetTime34.with((java.time.temporal.TemporalAdjuster) localTime53);
        java.util.GregorianCalendar gregorianCalendar63 = new java.util.GregorianCalendar(12, 4096, 7, (-1), (int) (short) 10);
        int int64 = gregorianCalendar63.getWeeksInWeekYear();
        java.lang.String str65 = gregorianCalendar63.getCalendarType();
        java.time.ZonedDateTime zonedDateTime66 = gregorianCalendar63.toZonedDateTime();
        java.time.ZonedDateTime zonedDateTime68 = zonedDateTime66.minusMonths((long) 10);
        int int69 = zonedDateTime66.getMonthValue();
        int int70 = zonedDateTime66.getSecond();
        java.time.ZoneOffset zoneOffset71 = zonedDateTime66.getOffset();
        java.time.OffsetTime offsetTime72 = offsetTime34.withOffsetSameLocal(zoneOffset71);
        java.time.ZonedDateTime zonedDateTime73 = java.time.ZonedDateTime.ofInstant(instant0, (java.time.ZoneId) zoneOffset71);
        org.junit.Assert.assertNotNull(instant0);
        org.junit.Assert.assertNotNull(fileTime1);
        org.junit.Assert.assertNotNull(period2);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertTrue("'" + isoEra6 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra6.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertTrue("'" + chronoField20 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField20.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 3601000000001L + "'", long23 == 3601000000001L);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(periodTemporalQuery25);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertTrue("'" + chronoField30 + "' != '" + java.time.temporal.ChronoField.SECOND_OF_DAY + "'", chronoField30.equals(java.time.temporal.ChronoField.SECOND_OF_DAY));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(chronoPeriod32);
        org.junit.Assert.assertNotNull(instant33);
        org.junit.Assert.assertNotNull(offsetTime34);
        org.junit.Assert.assertNotNull(localTime35);
        org.junit.Assert.assertNotNull(localTime40);
        org.junit.Assert.assertNotNull(localTime41);
        org.junit.Assert.assertNotNull(localTime46);
        org.junit.Assert.assertNotNull(localTime47);
        org.junit.Assert.assertTrue("'" + chronoField48 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField48.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime50);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 3601000000001L + "'", long51 == 3601000000001L);
        org.junit.Assert.assertNotNull(localTime53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(localTime56);
        org.junit.Assert.assertNotNull(offsetTime57);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 52 + "'", int64 == 52);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "gregory" + "'", str65, "gregory");
        org.junit.Assert.assertNotNull(zonedDateTime66);
        org.junit.Assert.assertNotNull(zonedDateTime68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 5 + "'", int69 == 5);
// flaky:         org.junit.Assert.assertTrue("'" + int70 + "' != '" + 59 + "'", int70 == 59);
        org.junit.Assert.assertNotNull(zoneOffset71);
        org.junit.Assert.assertNotNull(offsetTime72);
        org.junit.Assert.assertNotNull(zonedDateTime73);
    }

    @Test
    public void test6079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6079");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.Duration duration2 = new org.joda.time.Duration(readableInstant0, readableInstant1);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = duration2.toPeriodTo(readableInstant3, periodType4);
        long long6 = duration2.getStandardSeconds();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 3, chronology8);
        org.joda.time.DateTime.Property property10 = dateTime9.dayOfYear();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight((java.lang.Object) dateTime9, chronology11);
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight12.minusMonths((-1));
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight12.withDayOfYear((int) ' ');
        org.joda.time.Interval interval17 = duration2.toIntervalTo((org.joda.time.ReadableInstant) dateMidnight16);
        org.joda.time.DateMidnight.Property property18 = dateMidnight16.dayOfYear();
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.Duration duration21 = new org.joda.time.Duration(readableInstant19, readableInstant20);
        org.joda.time.Duration duration23 = duration21.withMillis((-1L));
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((long) 3, chronology25);
        org.joda.time.DateTime.Property property27 = dateTime26.dayOfYear();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateMidnight dateMidnight29 = new org.joda.time.DateMidnight((java.lang.Object) dateTime26, chronology28);
        org.joda.time.DateMidnight dateMidnight31 = dateMidnight29.minusMonths((-1));
        org.joda.time.DateMidnight dateMidnight33 = dateMidnight29.withDayOfYear((int) ' ');
        org.joda.time.PeriodType periodType34 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period35 = duration23.toPeriodFrom((org.joda.time.ReadableInstant) dateMidnight29, periodType34);
        org.joda.time.Duration duration37 = org.joda.time.Duration.standardHours((long) 1);
        org.joda.time.DateMidnight dateMidnight38 = dateMidnight29.plus((org.joda.time.ReadableDuration) duration37);
        long long39 = duration37.getMillis();
        org.joda.time.Duration duration41 = org.joda.time.Duration.standardMinutes((long) 292269054);
        boolean boolean42 = duration37.isLongerThan((org.joda.time.ReadableDuration) duration41);
        org.joda.time.Interval interval43 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateMidnight16, (org.joda.time.ReadableDuration) duration37);
        org.joda.time.Seconds seconds44 = duration37.toStandardSeconds();
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateMidnight31);
        org.junit.Assert.assertNotNull(dateMidnight33);
        org.junit.Assert.assertNotNull(periodType34);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(dateMidnight38);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 3600000L + "'", long39 == 3600000L);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(seconds44);
    }

    @Test
    public void test6080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6080");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Locale.LanguageRange[] languageRangeArray3 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList4 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList4, languageRangeArray3);
        java.util.Locale locale6 = java.util.Locale.JAPAN;
        java.util.Locale[] localeArray7 = new java.util.Locale[] { locale6 };
        java.util.ArrayList<java.util.Locale> localeList8 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList8, localeArray7);
        java.util.List<java.util.Locale> localeList10 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList4, (java.util.Collection<java.util.Locale>) localeList8);
        localeList10.clear();
        java.util.List<java.util.Locale> localeList12 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.util.Locale>) localeList10);
        java.util.Locale.LanguageRange[] languageRangeArray13 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList14 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList14, languageRangeArray13);
        java.util.Locale locale16 = java.util.Locale.JAPAN;
        java.util.Locale[] localeArray17 = new java.util.Locale[] { locale16 };
        java.util.ArrayList<java.util.Locale> localeList18 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList18, localeArray17);
        java.util.List<java.util.Locale> localeList20 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList14, (java.util.Collection<java.util.Locale>) localeList18);
        localeList20.clear();
        java.util.Locale.FilteringMode filteringMode22 = java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList23 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.util.Locale>) localeList20, filteringMode22);
        java.util.ListIterator<java.util.Locale> localeItor24 = localeList23.listIterator();
        int int25 = localeItor24.previousIndex();
        java.util.Locale locale26 = java.util.Locale.GERMANY;
        java.lang.String str27 = locale26.getDisplayName();
        // The following exception was thrown during execution in test generation
        try {
            localeItor24.set(locale26);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(languageRangeArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(localeArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(localeList10);
        org.junit.Assert.assertNotNull(localeList12);
        org.junit.Assert.assertNotNull(languageRangeArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(localeArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(localeList20);
        org.junit.Assert.assertTrue("'" + filteringMode22 + "' != '" + java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES + "'", filteringMode22.equals(java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList23);
        org.junit.Assert.assertNotNull(localeItor24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "German (Germany)" + "'", str27, "German (Germany)");
    }

    @Test
    public void test6081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6081");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.Duration duration3 = new org.joda.time.Duration(readableInstant1, readableInstant2);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.PeriodType periodType5 = null;
        org.joda.time.Period period6 = duration3.toPeriodTo(readableInstant4, periodType5);
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.Duration duration9 = new org.joda.time.Duration(readableInstant7, readableInstant8);
        long long10 = duration9.getMillis();
        boolean boolean11 = duration3.isShorterThan((org.joda.time.ReadableDuration) duration9);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) 3, chronology13);
        org.joda.time.DateTime.Property property15 = dateTime14.dayOfYear();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight((java.lang.Object) dateTime14, chronology16);
        org.joda.time.MutableDateTime mutableDateTime18 = dateTime14.toMutableDateTime();
        mutableDateTime18.addYears((int) (short) 100);
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime18.dayOfWeek();
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime18.year();
        org.joda.time.MutableDateTime.Property property23 = mutableDateTime18.weekyear();
        boolean boolean24 = duration3.equals((java.lang.Object) mutableDateTime18);
        mutableDateTime18.addMonths((int) ' ');
        mutableDateTime18.add((long) (byte) 10);
        org.joda.time.Period period29 = org.joda.time.Period.ZERO;
        org.joda.time.Period period30 = period29.normalizedStandard();
        org.joda.time.Period period32 = period29.plusHours(2);
        java.time.chrono.IsoEra isoEra33 = java.time.chrono.IsoEra.CE;
        boolean boolean34 = period32.equals((java.lang.Object) isoEra33);
        int int35 = period32.getMinutes();
        mutableDateTime18.add((org.joda.time.ReadablePeriod) period32);
        java.util.TimeZone timeZone38 = null;
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forTimeZone(timeZone38);
        org.joda.time.DateMidnight dateMidnight40 = new org.joda.time.DateMidnight((long) 1970, dateTimeZone39);
        long long43 = dateTimeZone39.convertLocalToUTC((long) 3, false);
        long long46 = dateTimeZone39.convertLocalToUTC(0L, true);
        mutableDateTime18.setZoneRetainFields(dateTimeZone39);
        java.lang.String str48 = dateTimeZone39.toString();
        org.joda.time.chrono.EthiopicChronology ethiopicChronology49 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone39);
        org.joda.time.DateTimeField dateTimeField50 = ethiopicChronology49.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone51 = ethiopicChronology49.getZone();
        org.joda.time.DateTimeField dateTimeField52 = ethiopicChronology49.era();
        org.joda.time.DateTimeField dateTimeField53 = ethiopicChronology49.secondOfDay();
        org.joda.time.DateTimeField dateTimeField54 = ethiopicChronology49.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField55 = ethiopicChronology49.halfdayOfDay();
        org.joda.time.DurationField durationField56 = ethiopicChronology49.weekyears();
        org.joda.time.DateTimeField dateTimeField57 = ethiopicChronology49.yearOfEra();
        org.joda.time.DateTimeField dateTimeField58 = ethiopicChronology49.clockhourOfDay();
        boolean boolean59 = durationFieldType0.isSupported((org.joda.time.Chronology) ethiopicChronology49);
        org.joda.time.DateTimeField dateTimeField60 = ethiopicChronology49.year();
        // The following exception was thrown during execution in test generation
        try {
            long long66 = ethiopicChronology49.getDateTimeMillis((long) 0, 2098, 600, 197, (int) ' ');
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2098 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(mutableDateTime18);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertTrue("'" + isoEra33 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra33.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 3L + "'", long43 == 3L);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "Etc/UTC" + "'", str48, "Etc/UTC");
        org.junit.Assert.assertNotNull(ethiopicChronology49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(durationField56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(dateTimeField60);
    }

    @Test
    public void test6082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6082");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 3, chronology1);
        org.joda.time.DateTime.Property property3 = dateTime2.dayOfYear();
        org.joda.time.Interval interval4 = property3.toInterval();
        org.joda.time.Period period5 = org.joda.time.Period.ZERO;
        org.joda.time.Period period6 = period5.normalizedStandard();
        org.joda.time.Period period8 = period6.minusMinutes((int) ' ');
        org.joda.time.Period period10 = period8.withMinutes(32769);
        boolean boolean11 = interval4.equals((java.lang.Object) period10);
        org.joda.time.Period period12 = org.joda.time.Period.ZERO;
        org.joda.time.Period period13 = period12.normalizedStandard();
        org.joda.time.Period period15 = period12.plusHours(2);
        int int16 = period12.getDays();
        org.joda.time.Interval interval17 = interval4.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period12);
        org.joda.time.Interval interval19 = interval4.withEndMillis((long) (short) 0);
        boolean boolean20 = interval4.containsNow();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test6083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6083");
        org.joda.time.Period period3 = org.joda.time.Period.ZERO;
        org.joda.time.Period period4 = period3.normalizedStandard();
        org.joda.time.Period period6 = period4.minusMinutes((int) ' ');
        org.joda.time.Period period8 = period6.minusMonths((int) (byte) 0);
        org.joda.time.PeriodType periodType9 = period8.getPeriodType();
        org.joda.time.PeriodType periodType10 = periodType9.withYearsRemoved();
        org.joda.time.PeriodType periodType11 = periodType9.withSecondsRemoved();
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.Duration duration14 = new org.joda.time.Duration(readableInstant12, readableInstant13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.PeriodType periodType16 = null;
        org.joda.time.Period period17 = duration14.toPeriodTo(readableInstant15, periodType16);
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.Duration duration20 = new org.joda.time.Duration(readableInstant18, readableInstant19);
        long long21 = duration20.getMillis();
        boolean boolean22 = duration14.isShorterThan((org.joda.time.ReadableDuration) duration20);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) 3, chronology24);
        org.joda.time.DateTime.Property property26 = dateTime25.dayOfYear();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.DateMidnight dateMidnight28 = new org.joda.time.DateMidnight((java.lang.Object) dateTime25, chronology27);
        org.joda.time.MutableDateTime mutableDateTime29 = dateTime25.toMutableDateTime();
        mutableDateTime29.addYears((int) (short) 100);
        org.joda.time.MutableDateTime.Property property32 = mutableDateTime29.dayOfWeek();
        org.joda.time.MutableDateTime.Property property33 = mutableDateTime29.year();
        org.joda.time.MutableDateTime.Property property34 = mutableDateTime29.weekyear();
        boolean boolean35 = duration14.equals((java.lang.Object) mutableDateTime29);
        mutableDateTime29.addMonths((int) ' ');
        mutableDateTime29.add((long) (byte) 10);
        org.joda.time.Period period40 = org.joda.time.Period.ZERO;
        org.joda.time.Period period41 = period40.normalizedStandard();
        org.joda.time.Period period43 = period40.plusHours(2);
        java.time.chrono.IsoEra isoEra44 = java.time.chrono.IsoEra.CE;
        boolean boolean45 = period43.equals((java.lang.Object) isoEra44);
        int int46 = period43.getMinutes();
        mutableDateTime29.add((org.joda.time.ReadablePeriod) period43);
        java.util.TimeZone timeZone49 = null;
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.forTimeZone(timeZone49);
        org.joda.time.DateMidnight dateMidnight51 = new org.joda.time.DateMidnight((long) 1970, dateTimeZone50);
        long long54 = dateTimeZone50.convertLocalToUTC((long) 3, false);
        long long57 = dateTimeZone50.convertLocalToUTC(0L, true);
        mutableDateTime29.setZoneRetainFields(dateTimeZone50);
        java.lang.String str59 = dateTimeZone50.toString();
        org.joda.time.chrono.EthiopicChronology ethiopicChronology60 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone50);
        org.joda.time.DateTimeField dateTimeField61 = ethiopicChronology60.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone62 = ethiopicChronology60.getZone();
        org.joda.time.DurationField durationField63 = ethiopicChronology60.halfdays();
        org.joda.time.DurationField durationField64 = ethiopicChronology60.years();
        org.joda.time.Chronology chronology65 = ethiopicChronology60.withUTC();
        org.joda.time.Period period66 = new org.joda.time.Period(0L, 34465512000000L, periodType11, (org.joda.time.Chronology) ethiopicChronology60);
        org.joda.time.DurationField durationField67 = ethiopicChronology60.months();
        org.joda.time.MutableDateTime mutableDateTime68 = new org.joda.time.MutableDateTime(1644481667L, (org.joda.time.Chronology) ethiopicChronology60);
        mutableDateTime68.setDate(1645436337000L);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertNotNull(periodType10);
        org.junit.Assert.assertNotNull(periodType11);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(mutableDateTime29);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertTrue("'" + isoEra44 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra44.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 3L + "'", long54 == 3L);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 0L + "'", long57 == 0L);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "Etc/UTC" + "'", str59, "Etc/UTC");
        org.junit.Assert.assertNotNull(ethiopicChronology60);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertNotNull(dateTimeZone62);
        org.junit.Assert.assertNotNull(durationField63);
        org.junit.Assert.assertNotNull(durationField64);
        org.junit.Assert.assertNotNull(chronology65);
        org.junit.Assert.assertNotNull(durationField67);
    }

    @Test
    public void test6084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6084");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 3, chronology1);
        org.joda.time.DateTime.Property property3 = dateTime2.dayOfYear();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight((java.lang.Object) dateTime2, chronology4);
        org.joda.time.MutableDateTime mutableDateTime6 = dateTime2.toMutableDateTime();
        mutableDateTime6.addYears((int) (short) 100);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime6.dayOfWeek();
        java.util.Locale locale10 = java.util.Locale.JAPAN;
        int int11 = property9.getMaximumTextLength(locale10);
        java.lang.String str12 = locale10.toLanguageTag();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.LocalTime localTime15 = new org.joda.time.LocalTime((long) 0, chronology14);
        org.joda.time.Chronology chronology16 = localTime15.getChronology();
        org.joda.time.DateTimeField dateTimeField17 = chronology16.weekyearOfCentury();
        long long19 = dateTimeField17.roundHalfEven((long) 16);
        java.util.Locale locale22 = new java.util.Locale("Subject:\n", "German");
        int int23 = dateTimeField17.getMaximumTextLength(locale22);
        java.lang.String str24 = locale10.getDisplayLanguage(locale22);
        java.lang.String str25 = locale22.getDisplayLanguage();
        java.io.PrintStream printStream27 = new java.io.PrintStream("subject:\n (GERMAN)");
        printStream27.write((int) '#');
        java.security.CodeSource codeSource31 = null;
        java.security.PermissionCollection permissionCollection32 = null;
        java.security.ProtectionDomain protectionDomain33 = new java.security.ProtectionDomain(codeSource31, permissionCollection32);
        java.lang.ClassLoader classLoader34 = protectionDomain33.getClassLoader();
        java.security.CodeSource codeSource35 = null;
        java.security.PermissionCollection permissionCollection36 = null;
        java.security.ProtectionDomain protectionDomain37 = new java.security.ProtectionDomain(codeSource35, permissionCollection36);
        java.security.Permission permission38 = null;
        boolean boolean39 = protectionDomain37.implies(permission38);
        java.security.CodeSource codeSource40 = null;
        java.security.PermissionCollection permissionCollection41 = null;
        java.security.ProtectionDomain protectionDomain42 = new java.security.ProtectionDomain(codeSource40, permissionCollection41);
        java.security.CodeSource codeSource43 = null;
        java.security.PermissionCollection permissionCollection44 = null;
        java.security.ProtectionDomain protectionDomain45 = new java.security.ProtectionDomain(codeSource43, permissionCollection44);
        java.security.ProtectionDomain[] protectionDomainArray46 = new java.security.ProtectionDomain[] { protectionDomain33, protectionDomain37, protectionDomain42, protectionDomain45 };
        java.security.AccessControlContext accessControlContext47 = new java.security.AccessControlContext(protectionDomainArray46);
        java.io.PrintStream printStream48 = printStream27.printf("Property[secondOfMinute]", (java.lang.Object[]) protectionDomainArray46);
        printStream48.print(1728000);
        java.util.Locale locale51 = java.util.Locale.TAIWAN;
        java.util.Locale locale52 = java.util.Locale.ROOT;
        java.lang.String str53 = locale51.getDisplayName(locale52);
        java.io.File file55 = null;
        java.io.File file57 = new java.io.File(file55, "1970-01-01T00:00:00.003Z");
        java.net.URL uRL58 = file57.toURL();
        java.io.File file59 = null;
        java.io.File file61 = new java.io.File(file59, "1970-01-01T00:00:00.003Z");
        java.net.URL uRL62 = file61.toURL();
        boolean boolean63 = uRL58.sameFile(uRL62);
        java.security.cert.Certificate certificate64 = null;
        java.security.cert.Certificate[] certificateArray65 = new java.security.cert.Certificate[] { certificate64 };
        java.security.CodeSource codeSource66 = new java.security.CodeSource(uRL58, certificateArray65);
        java.io.PrintStream printStream67 = printStream48.printf(locale51, "00:00:01.000000001", (java.lang.Object[]) certificateArray65);
        java.lang.String str68 = locale22.getDisplayScript(locale51);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ja_JP");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 3 + "'", int11 == 3);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "ja-JP" + "'", str12, "ja-JP");
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertEquals(locale22.toString(), "subject:\n_GERMAN");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2 + "'", int23 == 2);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Japanese" + "'", str24, "Japanese");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "subject:\n" + "'", str25, "subject:\n");
        org.junit.Assert.assertEquals(protectionDomain33.toString(), "ProtectionDomain  null\n null\n <no principals>\n null\n");
        org.junit.Assert.assertNull(classLoader34);
        org.junit.Assert.assertEquals(protectionDomain37.toString(), "ProtectionDomain  null\n null\n <no principals>\n null\n");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals(protectionDomain42.toString(), "ProtectionDomain  null\n null\n <no principals>\n null\n");
        org.junit.Assert.assertEquals(protectionDomain45.toString(), "ProtectionDomain  null\n null\n <no principals>\n null\n");
        org.junit.Assert.assertNotNull(protectionDomainArray46);
        org.junit.Assert.assertNotNull(printStream48);
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "Chinese (Taiwan)" + "'", str53, "Chinese (Taiwan)");
        org.junit.Assert.assertNull("file57.getParent() == null", file57.getParent());
        org.junit.Assert.assertEquals(file57.toString(), "1970-01-01T00:00:00.003Z");
        org.junit.Assert.assertNotNull(uRL58);
// flaky:         org.junit.Assert.assertEquals(uRL58.toString(), "file:/experiment/1970-01-01T00:00:00.003Z");
        org.junit.Assert.assertNull("file61.getParent() == null", file61.getParent());
        org.junit.Assert.assertEquals(file61.toString(), "1970-01-01T00:00:00.003Z");
        org.junit.Assert.assertNotNull(uRL62);
// flaky:         org.junit.Assert.assertEquals(uRL62.toString(), "file:/experiment/1970-01-01T00:00:00.003Z");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(certificateArray65);
        org.junit.Assert.assertNotNull(printStream67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
    }

    @Test
    public void test6085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6085");
        org.joda.time.Instant instant1 = org.joda.time.Instant.parse("2022-02-21T09:34:12.419Z");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod((java.lang.Object) "2022-02-21T09:34:12.419Z");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"2022-02-21T09:34:12.419Z\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(instant1);
    }

    @Test
    public void test6086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6086");
        java.util.Date date6 = new java.util.Date((int) 'a', 3, 0, (-1), (int) '/', 28);
        date6.setHours(306);
        date6.setMinutes(999999999);
        org.junit.Assert.assertEquals(date6.toString(), "Mon Aug 08 04:39:28 UTC 3898");
    }

    @Test
    public void test6087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6087");
        org.joda.time.DateMidnight dateMidnight0 = org.joda.time.DateMidnight.now();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((long) 0, chronology2);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((long) 3, chronology5);
        org.joda.time.DateTime.Property property7 = dateTime6.dayOfYear();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight((java.lang.Object) dateTime6, chronology8);
        org.joda.time.DateTime dateTime10 = localTime3.toDateTime((org.joda.time.ReadableInstant) dateTime6);
        org.joda.time.DateTime dateTime12 = dateTime10.minusMillis((int) (byte) 0);
        org.joda.time.DateTime dateTime14 = dateTime10.withYearOfCentury((int) (byte) 10);
        org.joda.time.DateTime.Property property15 = dateTime14.hourOfDay();
        boolean boolean16 = dateMidnight0.isEqual((org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.DateMidnight dateMidnight18 = dateMidnight0.minusMonths(601);
        org.junit.Assert.assertNotNull(dateMidnight0);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateMidnight18);
    }

    @Test
    public void test6088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6088");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.Duration duration2 = new org.joda.time.Duration(readableInstant0, readableInstant1);
        org.joda.time.Duration duration4 = duration2.withMillis((-1L));
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((long) 3, chronology6);
        org.joda.time.DateTime.Property property8 = dateTime7.dayOfYear();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight((java.lang.Object) dateTime7, chronology9);
        org.joda.time.DateMidnight dateMidnight12 = dateMidnight10.minusMonths((-1));
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight10.withDayOfYear((int) ' ');
        org.joda.time.PeriodType periodType15 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period16 = duration4.toPeriodFrom((org.joda.time.ReadableInstant) dateMidnight10, periodType15);
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.Duration duration19 = new org.joda.time.Duration(readableInstant17, readableInstant18);
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.PeriodType periodType21 = null;
        org.joda.time.Period period22 = duration19.toPeriodTo(readableInstant20, periodType21);
        long long23 = duration19.getStandardSeconds();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((long) 3, chronology25);
        org.joda.time.DateTime.Property property27 = dateTime26.dayOfYear();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateMidnight dateMidnight29 = new org.joda.time.DateMidnight((java.lang.Object) dateTime26, chronology28);
        org.joda.time.DateMidnight dateMidnight31 = dateMidnight29.minusMonths((-1));
        org.joda.time.DateMidnight dateMidnight33 = dateMidnight29.withDayOfYear((int) ' ');
        org.joda.time.Interval interval34 = duration19.toIntervalTo((org.joda.time.ReadableInstant) dateMidnight33);
        org.joda.time.PeriodType periodType36 = org.joda.time.PeriodType.time();
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod((long) 'a', periodType36);
        org.joda.time.Period period38 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight10, (org.joda.time.ReadableDuration) duration19, periodType36);
        org.joda.time.ReadableInstant readableInstant39 = null;
        org.joda.time.ReadableInstant readableInstant40 = null;
        org.joda.time.Duration duration41 = new org.joda.time.Duration(readableInstant39, readableInstant40);
        org.joda.time.Seconds seconds42 = duration41.toStandardSeconds();
        int int43 = seconds42.getSeconds();
        org.joda.time.DateMidnight dateMidnight45 = dateMidnight10.withPeriodAdded((org.joda.time.ReadablePeriod) seconds42, 0);
        org.joda.time.Duration duration46 = seconds42.toStandardDuration();
        org.joda.time.Seconds seconds47 = seconds42.negated();
        org.joda.time.Seconds seconds48 = org.joda.time.Seconds.MIN_VALUE;
        boolean boolean49 = seconds47.isLessThan(seconds48);
        org.joda.time.Seconds seconds51 = seconds48.plus(999);
        java.lang.String str52 = seconds48.toString();
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(periodType15);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateMidnight31);
        org.junit.Assert.assertNotNull(dateMidnight33);
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertNotNull(periodType36);
        org.junit.Assert.assertNotNull(seconds42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(dateMidnight45);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertNotNull(seconds47);
        org.junit.Assert.assertNotNull(seconds48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(seconds51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "PT-2147483648S" + "'", str52, "PT-2147483648S");
    }

    @Test
    public void test6089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6089");
        java.time.Clock clock0 = java.time.Clock.systemUTC();
        java.time.Duration duration2 = java.time.Duration.ofSeconds((long) 256);
        java.time.Clock clock3 = java.time.Clock.tick(clock0, duration2);
        java.time.OffsetTime offsetTime4 = java.time.OffsetTime.now(clock3);
        java.time.OffsetTime offsetTime5 = java.time.OffsetTime.now(clock3);
        org.junit.Assert.assertNotNull(clock0);
        org.junit.Assert.assertNotNull(duration2);
        org.junit.Assert.assertNotNull(clock3);
        org.junit.Assert.assertNotNull(offsetTime4);
        org.junit.Assert.assertNotNull(offsetTime5);
    }

    @Test
    public void test6090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6090");
        org.joda.time.Weeks weeks1 = org.joda.time.Weeks.ONE;
        java.util.concurrent.TimeUnit timeUnit2 = java.util.concurrent.TimeUnit.NANOSECONDS;
        boolean boolean3 = weeks1.equals((java.lang.Object) timeUnit2);
        org.joda.time.MutablePeriod mutablePeriod4 = weeks1.toMutablePeriod();
        int int5 = mutablePeriod4.getSeconds();
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.Duration duration8 = new org.joda.time.Duration(readableInstant6, readableInstant7);
        long long9 = duration8.getMillis();
        org.joda.time.Duration duration11 = duration8.plus((long) (byte) 1);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.LocalTime localTime15 = new org.joda.time.LocalTime((long) 0, chronology14);
        org.joda.time.Chronology chronology16 = localTime15.getChronology();
        java.util.Locale locale17 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale locale18 = java.util.Locale.GERMANY;
        java.lang.String str19 = locale17.getDisplayScript(locale18);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket21 = new org.joda.time.format.DateTimeParserBucket((long) 1970, chronology16, locale17, (java.lang.Integer) 1);
        mutablePeriod4.setPeriod((org.joda.time.ReadableDuration) duration8, chronology16);
        org.joda.time.MutableDateTime mutableDateTime23 = new org.joda.time.MutableDateTime((java.lang.Object) 36484003L, chronology16);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime23.setDayOfWeek(53);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 53 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(weeks1);
        org.junit.Assert.assertNotNull(timeUnit2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(mutablePeriod4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
    }

    @Test
    public void test6091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6091");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.now();
        java.time.temporal.ChronoField chronoField1 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime3 = localDateTime0.with((java.time.temporal.TemporalField) chronoField1, (long) 10);
        java.util.GregorianCalendar gregorianCalendar9 = new java.util.GregorianCalendar(12, 4096, 7, (-1), (int) (short) 10);
        int int10 = gregorianCalendar9.getWeeksInWeekYear();
        java.lang.String str11 = gregorianCalendar9.getCalendarType();
        java.time.ZonedDateTime zonedDateTime12 = gregorianCalendar9.toZonedDateTime();
        java.time.ZonedDateTime zonedDateTime14 = zonedDateTime12.minusMonths((long) 10);
        java.time.chrono.ChronoZonedDateTime<java.time.LocalDate> localDateChronoZonedDateTime15 = zonedDateTime12.withEarlierOffsetAtOverlap();
        java.time.ZonedDateTime zonedDateTime17 = zonedDateTime12.minusMonths((long) 4200);
        java.time.ZonedDateTime zonedDateTime19 = zonedDateTime17.plusNanos(8L);
        java.time.ZonedDateTime zonedDateTime21 = zonedDateTime19.minusSeconds((long) 83400);
        java.time.temporal.ChronoField chronoField22 = java.time.temporal.ChronoField.MILLI_OF_DAY;
        int int23 = zonedDateTime21.get((java.time.temporal.TemporalField) chronoField22);
        java.time.LocalDateTime localDateTime24 = java.time.LocalDateTime.now();
        java.time.LocalTime localTime29 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime30 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime29);
        java.time.temporal.ChronoField chronoField31 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime33 = localTime29.with((java.time.temporal.TemporalField) chronoField31, (long) (short) 1);
        java.util.Locale locale34 = java.util.Locale.GERMANY;
        java.lang.String str35 = chronoField31.getDisplayName(locale34);
        long long36 = localDateTime24.getLong((java.time.temporal.TemporalField) chronoField31);
        long long37 = zonedDateTime21.getLong((java.time.temporal.TemporalField) chronoField31);
        java.time.format.DateTimeFormatter dateTimeFormatter38 = java.time.format.DateTimeFormatter.RFC_1123_DATE_TIME;
        java.lang.String str39 = zonedDateTime21.format(dateTimeFormatter38);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str40 = localDateChronoLocalDateTime3.format(dateTimeFormatter38);
            org.junit.Assert.fail("Expected exception of type java.time.temporal.UnsupportedTemporalTypeException; message: Unsupported field: OffsetSeconds");
        } catch (java.time.temporal.UnsupportedTemporalTypeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertTrue("'" + chronoField1 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField1.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime3);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 52 + "'", int10 == 52);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "gregory" + "'", str11, "gregory");
        org.junit.Assert.assertNotNull(zonedDateTime12);
        org.junit.Assert.assertNotNull(zonedDateTime14);
        org.junit.Assert.assertNotNull(localDateChronoZonedDateTime15);
        org.junit.Assert.assertNotNull(zonedDateTime17);
        org.junit.Assert.assertNotNull(zonedDateTime19);
        org.junit.Assert.assertNotNull(zonedDateTime21);
        org.junit.Assert.assertTrue("'" + chronoField22 + "' != '" + java.time.temporal.ChronoField.MILLI_OF_DAY + "'", chronoField22.equals(java.time.temporal.ChronoField.MILLI_OF_DAY));
// flaky:         org.junit.Assert.assertTrue("'" + int23 + "' != '" + 86399965 + "'", int23 == 86399965);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localTime29);
        org.junit.Assert.assertNotNull(localTime30);
        org.junit.Assert.assertTrue("'" + chronoField31 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField31.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime33);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "NanoOfDay" + "'", str35, "NanoOfDay");
// flaky:         org.junit.Assert.assertTrue("'" + long36 + "' != '" + 34969947000000L + "'", long36 == 34969947000000L);
// flaky:         org.junit.Assert.assertTrue("'" + long37 + "' != '" + 86399965000008L + "'", long37 == 86399965000008L);
        org.junit.Assert.assertNotNull(dateTimeFormatter38);
// flaky:         org.junit.Assert.assertEquals("'" + str39 + "' != '" + "Tue, 6 May 0003 23:59:59 GMT" + "'", str39, "Tue, 6 May 0003 23:59:59 GMT");
    }

    @Test
    public void test6092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6092");
        double[] doubleArray4 = new double[] { (byte) 0, 59, 83400000000000L, '4' };
        java.util.stream.DoubleStream doubleStream5 = java.util.stream.DoubleStream.of(doubleArray4);
        java.nio.DoubleBuffer doubleBuffer6 = java.nio.DoubleBuffer.wrap(doubleArray4);
        double[] doubleArray11 = new double[] { (byte) 0, 59, 83400000000000L, '4' };
        java.util.stream.DoubleStream doubleStream12 = java.util.stream.DoubleStream.of(doubleArray11);
        java.nio.DoubleBuffer doubleBuffer13 = java.nio.DoubleBuffer.wrap(doubleArray11);
        java.nio.DoubleBuffer doubleBuffer14 = doubleBuffer6.put(doubleBuffer13);
        double[] doubleArray19 = new double[] { (byte) 0, 59, 83400000000000L, '4' };
        java.util.stream.DoubleStream doubleStream20 = java.util.stream.DoubleStream.of(doubleArray19);
        java.nio.DoubleBuffer doubleBuffer21 = java.nio.DoubleBuffer.wrap(doubleArray19);
        double[] doubleArray26 = new double[] { (byte) 0, 59, 83400000000000L, '4' };
        java.util.stream.DoubleStream doubleStream27 = java.util.stream.DoubleStream.of(doubleArray26);
        java.nio.DoubleBuffer doubleBuffer28 = java.nio.DoubleBuffer.wrap(doubleArray26);
        java.nio.DoubleBuffer doubleBuffer29 = doubleBuffer21.put(doubleBuffer28);
        java.nio.DoubleBuffer doubleBuffer30 = doubleBuffer13.put(doubleBuffer21);
        boolean boolean31 = doubleBuffer13.hasArray();
        java.nio.Buffer buffer32 = doubleBuffer13.flip();
        java.nio.Buffer buffer33 = buffer32.flip();
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[0.0, 59.0, 8.34E13, 52.0]");
        org.junit.Assert.assertNotNull(doubleStream5);
        org.junit.Assert.assertNotNull(doubleBuffer6);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0, 59.0, 8.34E13, 52.0]");
        org.junit.Assert.assertNotNull(doubleStream12);
        org.junit.Assert.assertNotNull(doubleBuffer13);
        org.junit.Assert.assertNotNull(doubleBuffer14);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0, 59.0, 8.34E13, 52.0]");
        org.junit.Assert.assertNotNull(doubleStream20);
        org.junit.Assert.assertNotNull(doubleBuffer21);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[0.0, 59.0, 8.34E13, 52.0]");
        org.junit.Assert.assertNotNull(doubleStream27);
        org.junit.Assert.assertNotNull(doubleBuffer28);
        org.junit.Assert.assertNotNull(doubleBuffer29);
        org.junit.Assert.assertNotNull(doubleBuffer30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(buffer32);
        org.junit.Assert.assertNotNull(buffer33);
    }

    @Test
    public void test6093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6093");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.Hours hours1 = org.joda.time.Hours.hoursIn(readableInterval0);
        org.joda.time.Period period2 = hours1.toPeriod();
        org.joda.time.Period period3 = new org.joda.time.Period((java.lang.Object) period2);
        org.joda.time.MutablePeriod mutablePeriod4 = period3.toMutablePeriod();
        mutablePeriod4.addHours((-624));
        org.junit.Assert.assertNotNull(hours1);
        org.junit.Assert.assertNotNull(period2);
        org.junit.Assert.assertNotNull(mutablePeriod4);
    }

    @Test
    public void test6094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6094");
        java.util.Locale locale1 = new java.util.Locale("hi!");
        boolean boolean2 = locale1.hasExtensions();
        java.time.format.DecimalStyle decimalStyle3 = java.time.format.DecimalStyle.of(locale1);
        java.util.Set<java.lang.String> strSet4 = locale1.getUnicodeLocaleKeys();
        java.util.Set<java.lang.String> strSet5 = java.time.ZoneId.getAvailableZoneIds();
        boolean boolean6 = strSet4.containsAll((java.util.Collection<java.lang.String>) strSet5);
        java.util.Set<java.lang.String> strSet7 = java.time.ZoneId.getAvailableZoneIds();
        java.util.Set<java.lang.String> strSet8 = java.time.ZoneId.getAvailableZoneIds();
        java.util.stream.Stream<java.lang.String> strStream9 = strSet8.parallelStream();
        java.lang.Object[] objArray10 = strSet8.toArray();
        java.util.Spliterator<java.lang.String> strSpliterator11 = strSet8.spliterator();
        boolean boolean12 = strSet7.containsAll((java.util.Collection<java.lang.String>) strSet8);
        strSet7.clear();
        boolean boolean14 = strSet5.retainAll((java.util.Collection<java.lang.String>) strSet7);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.LocalTime localTime18 = new org.joda.time.LocalTime((long) 0, chronology17);
        org.joda.time.Chronology chronology19 = localTime18.getChronology();
        java.util.Locale locale20 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale locale21 = java.util.Locale.GERMANY;
        java.lang.String str22 = locale20.getDisplayScript(locale21);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket24 = new org.joda.time.format.DateTimeParserBucket((long) 1970, chronology19, locale20, (java.lang.Integer) 1);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.LocalTime localTime27 = new org.joda.time.LocalTime((long) 0, chronology26);
        org.joda.time.Chronology chronology28 = localTime27.getChronology();
        org.joda.time.DateTimeField dateTimeField29 = chronology28.weekyearOfCentury();
        org.joda.time.DurationField durationField30 = dateTimeField29.getLeapDurationField();
        dateTimeParserBucket24.saveField(dateTimeField29, (int) 'u');
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = org.joda.time.DateTimeFieldType.yearOfCentury();
        java.time.temporal.ChronoField chronoField35 = java.time.temporal.ChronoField.DAY_OF_WEEK;
        java.time.LocalDateTime localDateTime36 = java.time.LocalDateTime.now();
        java.time.temporal.ChronoField chronoField37 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime39 = localDateTime36.with((java.time.temporal.TemporalField) chronoField37, (long) 10);
        java.time.Duration duration41 = java.time.Duration.ofSeconds((long) 0);
        java.time.temporal.Temporal temporal42 = localDateTime36.minus((java.time.temporal.TemporalAmount) duration41);
        long long43 = chronoField35.getFrom((java.time.temporal.TemporalAccessor) temporal42);
        java.time.LocalTime localTime48 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime49 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime48);
        java.time.temporal.ChronoField chronoField50 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime52 = localTime48.with((java.time.temporal.TemporalField) chronoField50, (long) (short) 1);
        java.util.Locale locale53 = java.util.Locale.GERMANY;
        java.lang.String str54 = chronoField50.getDisplayName(locale53);
        java.lang.String str55 = chronoField35.getDisplayName(locale53);
        dateTimeParserBucket24.saveField(dateTimeFieldType33, "Optional.empty", locale53);
        java.lang.String str57 = locale53.getDisplayCountry();
        java.util.Set<java.lang.String> strSet58 = locale53.getUnicodeLocaleKeys();
        boolean boolean59 = strSet7.removeAll((java.util.Collection<java.lang.String>) strSet58);
        org.junit.Assert.assertEquals(locale1.toString(), "hi!");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(decimalStyle3);
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertNotNull(strStream9);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertNotNull(strSpliterator11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNull(durationField30);
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
        org.junit.Assert.assertTrue("'" + chronoField35 + "' != '" + java.time.temporal.ChronoField.DAY_OF_WEEK + "'", chronoField35.equals(java.time.temporal.ChronoField.DAY_OF_WEEK));
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertTrue("'" + chronoField37 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField37.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime39);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(temporal42);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 1L + "'", long43 == 1L);
        org.junit.Assert.assertNotNull(localTime48);
        org.junit.Assert.assertNotNull(localTime49);
        org.junit.Assert.assertTrue("'" + chronoField50 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField50.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime52);
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "NanoOfDay" + "'", str54, "NanoOfDay");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "Wochentag" + "'", str55, "Wochentag");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "Germany" + "'", str57, "Germany");
        org.junit.Assert.assertNotNull(strSet58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
    }

    @Test
    public void test6095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6095");
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.Duration duration3 = new org.joda.time.Duration(readableInstant1, readableInstant2);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.PeriodType periodType5 = null;
        org.joda.time.Period period6 = duration3.toPeriodTo(readableInstant4, periodType5);
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.Duration duration9 = new org.joda.time.Duration(readableInstant7, readableInstant8);
        long long10 = duration9.getMillis();
        boolean boolean11 = duration3.isShorterThan((org.joda.time.ReadableDuration) duration9);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) 3, chronology13);
        org.joda.time.DateTime.Property property15 = dateTime14.dayOfYear();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight((java.lang.Object) dateTime14, chronology16);
        org.joda.time.MutableDateTime mutableDateTime18 = dateTime14.toMutableDateTime();
        mutableDateTime18.addYears((int) (short) 100);
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime18.dayOfWeek();
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime18.year();
        org.joda.time.MutableDateTime.Property property23 = mutableDateTime18.weekyear();
        boolean boolean24 = duration3.equals((java.lang.Object) mutableDateTime18);
        mutableDateTime18.addMonths((int) ' ');
        mutableDateTime18.add((long) (byte) 10);
        org.joda.time.Period period29 = org.joda.time.Period.ZERO;
        org.joda.time.Period period30 = period29.normalizedStandard();
        org.joda.time.Period period32 = period29.plusHours(2);
        java.time.chrono.IsoEra isoEra33 = java.time.chrono.IsoEra.CE;
        boolean boolean34 = period32.equals((java.lang.Object) isoEra33);
        int int35 = period32.getMinutes();
        mutableDateTime18.add((org.joda.time.ReadablePeriod) period32);
        java.util.TimeZone timeZone38 = null;
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forTimeZone(timeZone38);
        org.joda.time.DateMidnight dateMidnight40 = new org.joda.time.DateMidnight((long) 1970, dateTimeZone39);
        long long43 = dateTimeZone39.convertLocalToUTC((long) 3, false);
        long long46 = dateTimeZone39.convertLocalToUTC(0L, true);
        mutableDateTime18.setZoneRetainFields(dateTimeZone39);
        java.lang.String str48 = dateTimeZone39.toString();
        org.joda.time.chrono.EthiopicChronology ethiopicChronology49 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone39);
        org.joda.time.DateTimeField dateTimeField50 = ethiopicChronology49.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone51 = ethiopicChronology49.getZone();
        org.joda.time.YearMonthDay yearMonthDay52 = new org.joda.time.YearMonthDay((long) (short) 100, (org.joda.time.Chronology) ethiopicChronology49);
        org.joda.time.DateTimeField dateTimeField53 = ethiopicChronology49.secondOfDay();
        int int55 = dateTimeField53.getMinimumValue(47L);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(mutableDateTime18);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertTrue("'" + isoEra33 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra33.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 3L + "'", long43 == 3L);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "Etc/UTC" + "'", str48, "Etc/UTC");
        org.junit.Assert.assertNotNull(ethiopicChronology49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
    }

    @Test
    public void test6096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6096");
        org.joda.time.Weeks weeks0 = org.joda.time.Weeks.ONE;
        java.util.concurrent.TimeUnit timeUnit1 = java.util.concurrent.TimeUnit.NANOSECONDS;
        boolean boolean2 = weeks0.equals((java.lang.Object) timeUnit1);
        org.joda.time.MutablePeriod mutablePeriod3 = weeks0.toMutablePeriod();
        mutablePeriod3.add((int) '#', 0, 10, 0, (int) (byte) 0, (int) (short) 0, 1, (-1));
        mutablePeriod3.clear();
        org.joda.time.Period period14 = org.joda.time.Period.ZERO;
        org.joda.time.Period period15 = period14.normalizedStandard();
        org.joda.time.Period period17 = period14.plusHours(2);
        org.joda.time.DurationFieldType durationFieldType18 = org.joda.time.DurationFieldType.hours();
        int int19 = period14.indexOf(durationFieldType18);
        mutablePeriod3.set(durationFieldType18, (int) (byte) 10);
        mutablePeriod3.addMonths(3);
        mutablePeriod3.add(0, (int) (byte) 0, (int) (byte) 100, 3601, (int) (short) -1, (-1), 15, 256);
        org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate();
        org.joda.time.Interval interval34 = localDate33.toInterval();
        int int35 = localDate33.getDayOfYear();
        java.util.TimeZone timeZone39 = null;
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forTimeZone(timeZone39);
        org.joda.time.DateMidnight dateMidnight41 = new org.joda.time.DateMidnight((long) 1970, dateTimeZone40);
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime((long) 3600000, dateTimeZone40);
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime((long) 22, dateTimeZone40);
        org.joda.time.Interval interval44 = localDate33.toInterval(dateTimeZone40);
        org.joda.time.DateMidnight dateMidnight45 = org.joda.time.DateMidnight.now(dateTimeZone40);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime((long) 3, chronology47);
        org.joda.time.DateTime.Property property49 = dateTime48.dayOfYear();
        org.joda.time.Interval interval50 = property49.toInterval();
        org.joda.time.DateTime dateTime51 = interval50.getEnd();
        int int52 = dateTimeZone40.getOffset((org.joda.time.ReadableInstant) dateTime51);
        org.joda.time.MutableInterval mutableInterval53 = new org.joda.time.MutableInterval((org.joda.time.ReadablePeriod) mutablePeriod3, (org.joda.time.ReadableInstant) dateTime51);
        org.junit.Assert.assertNotNull(weeks0);
        org.junit.Assert.assertNotNull(timeUnit1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(mutablePeriod3);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(durationFieldType18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 4 + "'", int19 == 4);
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 52 + "'", int35 == 52);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(interval44);
        org.junit.Assert.assertNotNull(dateMidnight45);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(interval50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
    }

    @Test
    public void test6097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6097");
        java.time.OffsetDateTime offsetDateTime0 = java.time.OffsetDateTime.now();
        java.time.OffsetDateTime offsetDateTime1 = java.time.OffsetDateTime.now();
        java.time.LocalDate localDate2 = offsetDateTime1.toLocalDate();
        java.time.OffsetDateTime offsetDateTime3 = java.time.OffsetDateTime.now();
        java.time.temporal.ChronoField chronoField4 = java.time.temporal.ChronoField.HOUR_OF_DAY;
        boolean boolean5 = offsetDateTime3.isSupported((java.time.temporal.TemporalField) chronoField4);
        boolean boolean6 = offsetDateTime1.isEqual(offsetDateTime3);
        java.time.OffsetDateTime offsetDateTime8 = offsetDateTime3.minusHours(3601000000001L);
        boolean boolean9 = offsetDateTime0.isBefore(offsetDateTime8);
        java.time.OffsetDateTime offsetDateTime11 = offsetDateTime8.minusYears((long) 34482);
        org.junit.Assert.assertNotNull(offsetDateTime0);
        org.junit.Assert.assertNotNull(offsetDateTime1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(offsetDateTime3);
        org.junit.Assert.assertTrue("'" + chronoField4 + "' != '" + java.time.temporal.ChronoField.HOUR_OF_DAY + "'", chronoField4.equals(java.time.temporal.ChronoField.HOUR_OF_DAY));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(offsetDateTime8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(offsetDateTime11);
    }

    @Test
    public void test6098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6098");
        java.time.OffsetDateTime offsetDateTime0 = java.time.OffsetDateTime.now();
        int int1 = offsetDateTime0.getDayOfMonth();
        java.time.OffsetDateTime offsetDateTime3 = offsetDateTime0.withMinute((int) (byte) 10);
        int int4 = offsetDateTime0.getHour();
        java.time.OffsetDateTime offsetDateTime6 = offsetDateTime0.plusWeeks(3600000000L);
        org.junit.Assert.assertNotNull(offsetDateTime0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 21 + "'", int1 == 21);
        org.junit.Assert.assertNotNull(offsetDateTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertNotNull(offsetDateTime6);
    }

    @Test
    public void test6099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6099");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withYearOfCentury((int) 'a');
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.withMillisOfDay((int) (byte) 10);
        java.lang.String str6 = localDateTime1.toString();
        org.joda.time.LocalDateTime.Property property7 = localDateTime1.weekyear();
        org.joda.time.LocalDateTime localDateTime9 = property7.addToCopy((long) (-39));
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "2022-02-21T09:42:50.076" + "'", str6, "2022-02-21T09:42:50.076");
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime9);
    }

    @Test
    public void test6100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6100");
        float[] floatArray2 = new float[] { (-1L), (byte) -1 };
        java.nio.FloatBuffer floatBuffer3 = java.nio.FloatBuffer.wrap(floatArray2);
        boolean boolean4 = floatBuffer3.hasArray();
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[-1.0, -1.0]");
        org.junit.Assert.assertNotNull(floatBuffer3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
    }

    @Test
    public void test6101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6101");
        java.util.Date date1 = new java.util.Date(8380800010L);
        org.junit.Assert.assertEquals(date1.toString(), "Wed Apr 08 00:00:00 UTC 1970");
    }

    @Test
    public void test6102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6102");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Locale locale3 = java.util.Locale.JAPAN;
        java.util.Locale[] localeArray4 = new java.util.Locale[] { locale3 };
        java.util.ArrayList<java.util.Locale> localeList5 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList5, localeArray4);
        java.util.List<java.util.Locale> localeList7 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.util.Locale>) localeList5);
        org.joda.time.Weeks weeks8 = org.joda.time.Weeks.ONE;
        java.util.concurrent.TimeUnit timeUnit9 = java.util.concurrent.TimeUnit.NANOSECONDS;
        boolean boolean10 = weeks8.equals((java.lang.Object) timeUnit9);
        org.joda.time.MutablePeriod mutablePeriod11 = weeks8.toMutablePeriod();
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.Duration duration14 = new org.joda.time.Duration(readableInstant12, readableInstant13);
        org.joda.time.Duration duration16 = duration14.withMillis((-1L));
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.LocalTime localTime19 = new org.joda.time.LocalTime((long) 0, chronology18);
        org.joda.time.Chronology chronology20 = localTime19.getChronology();
        mutablePeriod11.setPeriod((org.joda.time.ReadableDuration) duration16, chronology20);
        org.joda.time.PeriodType periodType22 = mutablePeriod11.getPeriodType();
        int int23 = localeList7.lastIndexOf((java.lang.Object) periodType22);
        java.util.Locale locale24 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.String> strSet25 = locale24.getUnicodeLocaleKeys();
        boolean boolean26 = localeList7.add(locale24);
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(localeArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(localeList7);
        org.junit.Assert.assertNotNull(weeks8);
        org.junit.Assert.assertNotNull(timeUnit9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(mutablePeriod11);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(periodType22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "ko");
        org.junit.Assert.assertNotNull(strSet25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
    }

    @Test
    public void test6103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6103");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.now();
        java.time.temporal.ChronoField chronoField1 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime3 = localDateTime0.with((java.time.temporal.TemporalField) chronoField1, (long) 10);
        java.time.LocalDateTime localDateTime5 = localDateTime0.minusMinutes((long) 12);
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.now();
        java.time.temporal.ChronoField chronoField7 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime9 = localDateTime6.with((java.time.temporal.TemporalField) chronoField7, (long) 10);
        java.time.Duration duration11 = java.time.Duration.ofSeconds((long) 0);
        java.time.temporal.Temporal temporal12 = localDateTime6.minus((java.time.temporal.TemporalAmount) duration11);
        boolean boolean13 = localDateTime0.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime6);
        int int14 = localDateTime6.getMonthValue();
        java.time.temporal.TemporalUnit temporalUnit16 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.time.LocalDateTime localDateTime17 = localDateTime6.plus(1645434642L, temporalUnit16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertTrue("'" + chronoField1 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField1.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertTrue("'" + chronoField7 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField7.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(temporal12);
// flaky:         org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
    }

    @Test
    public void test6104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6104");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((long) 0, chronology1);
        int int3 = localTime2.getMillisOfSecond();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
    }

    @Test
    public void test6105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6105");
        java.nio.charset.Charset charset0 = java.nio.charset.Charset.defaultCharset();
        java.nio.charset.CharsetDecoder charsetDecoder1 = charset0.newDecoder();
        java.nio.charset.Charset charset2 = java.nio.charset.Charset.defaultCharset();
        boolean boolean3 = charset0.contains(charset2);
        java.nio.charset.CharsetEncoder charsetEncoder4 = charset0.newEncoder();
        char[] charArray5 = new char[] {};
        java.nio.CharBuffer charBuffer6 = java.nio.CharBuffer.wrap(charArray5);
        java.nio.ByteBuffer byteBuffer7 = charsetEncoder4.encode(charBuffer6);
        java.nio.CharBuffer charBuffer8 = charBuffer6.slice();
        // The following exception was thrown during execution in test generation
        try {
            java.nio.CharBuffer charBuffer11 = charBuffer8.put(52, '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charset0);
        org.junit.Assert.assertNotNull(charsetDecoder1);
        org.junit.Assert.assertNotNull(charset2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(charsetEncoder4);
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[]");
        org.junit.Assert.assertNotNull(charBuffer6);
        org.junit.Assert.assertNotNull(byteBuffer7);
        org.junit.Assert.assertNotNull(charBuffer8);
    }

    @Test
    public void test6106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6106");
        java.net.URI uRI1 = new java.net.URI("hi!");
        java.lang.String str2 = uRI1.getRawAuthority();
        java.lang.String str3 = uRI1.toString();
        java.lang.String str4 = uRI1.getUserInfo();
        java.io.OutputStream outputStream5 = null;
        java.io.FilterOutputStream filterOutputStream6 = new java.io.FilterOutputStream(outputStream5);
        byte[] byteArray8 = new byte[] { (byte) 100 };
        filterOutputStream6.write(byteArray8, (int) (byte) 0, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer12 = java.nio.ByteBuffer.wrap(byteArray8);
        java.nio.LongBuffer longBuffer13 = byteBuffer12.asLongBuffer();
        java.nio.ByteBuffer byteBuffer14 = byteBuffer12.duplicate();
        boolean boolean15 = uRI1.equals((java.lang.Object) byteBuffer12);
        java.nio.DoubleBuffer doubleBuffer16 = byteBuffer12.asDoubleBuffer();
        java.util.stream.LongStream longStream19 = java.util.stream.LongStream.range((long) (byte) 0, (long) 8);
        boolean boolean20 = byteBuffer12.equals((java.lang.Object) 8);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "hi!" + "'", str3, "hi!");
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[100]");
        org.junit.Assert.assertNotNull(byteBuffer12);
        org.junit.Assert.assertNotNull(longBuffer13);
        org.junit.Assert.assertNotNull(byteBuffer14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(doubleBuffer16);
        org.junit.Assert.assertNotNull(longStream19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test6107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6107");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((long) 0, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) 3, chronology4);
        org.joda.time.DateTime.Property property6 = dateTime5.dayOfYear();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateMidnight dateMidnight8 = new org.joda.time.DateMidnight((java.lang.Object) dateTime5, chronology7);
        org.joda.time.DateTime dateTime9 = localTime2.toDateTime((org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateTime dateTime11 = dateTime9.minusMillis((int) (byte) 0);
        org.joda.time.DateTime dateTime13 = dateTime9.withYearOfCentury((int) (byte) 10);
        org.joda.time.DateTime.Property property14 = dateTime13.hourOfDay();
        org.joda.time.DateTime dateTime16 = property14.addToCopy(52);
        org.joda.time.DateTime dateTime17 = property14.roundHalfCeilingCopy();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime19 = property14.setCopy((-10));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -10 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime17);
    }

    @Test
    public void test6108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6108");
        java.util.stream.IntStream intStream2 = java.util.stream.IntStream.rangeClosed(100, (int) '4');
        java.util.stream.IntStream intStream3 = intStream2.parallel();
        java.util.stream.IntStream intStream5 = intStream2.skip(52L);
        java.util.function.IntPredicate intPredicate6 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.IntStream intStream7 = intStream5.filter(intPredicate6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intStream2);
        org.junit.Assert.assertNotNull(intStream3);
        org.junit.Assert.assertNotNull(intStream5);
    }

    @Test
    public void test6109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6109");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.Interval interval1 = localDate0.toInterval();
        int int2 = localDate0.getYearOfCentury();
        int int3 = localDate0.getCenturyOfEra();
        int int4 = localDate0.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate6 = localDate0.minusMonths((-39));
        org.joda.time.LocalDate localDate8 = localDate6.withYearOfEra(23);
        org.junit.Assert.assertNotNull(interval1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 22 + "'", int2 == 22);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 20 + "'", int3 == 20);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 8 + "'", int4 == 8);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate8);
    }

    @Test
    public void test6110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6110");
        org.joda.time.chrono.EthiopicChronology ethiopicChronology0 = org.joda.time.chrono.EthiopicChronology.getInstanceUTC();
        org.joda.time.Weeks weeks1 = org.joda.time.Weeks.ONE;
        java.util.concurrent.TimeUnit timeUnit2 = java.util.concurrent.TimeUnit.NANOSECONDS;
        boolean boolean3 = weeks1.equals((java.lang.Object) timeUnit2);
        org.joda.time.MutablePeriod mutablePeriod4 = weeks1.toMutablePeriod();
        int int5 = mutablePeriod4.getSeconds();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) 3, chronology7);
        org.joda.time.DateTime.Property property9 = dateTime8.dayOfYear();
        org.joda.time.Interval interval10 = property9.toInterval();
        org.joda.time.DateTime dateTime11 = interval10.getEnd();
        mutablePeriod4.setPeriod((org.joda.time.ReadableInterval) interval10);
        mutablePeriod4.addWeeks((int) '#');
        mutablePeriod4.addWeeks(508);
        int[] intArray19 = ethiopicChronology0.get((org.joda.time.ReadablePeriod) mutablePeriod4, (long) 46, 99L);
        int int20 = ethiopicChronology0.getMinimumDaysInFirstWeek();
        org.junit.Assert.assertNotNull(ethiopicChronology0);
        org.junit.Assert.assertNotNull(weeks1);
        org.junit.Assert.assertNotNull(timeUnit2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(mutablePeriod4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[0, 0, 0, 0, 0, 0, 0, 53]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 4 + "'", int20 == 4);
    }

    @Test
    public void test6111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6111");
        java.util.stream.LongStream longStream2 = java.util.stream.LongStream.rangeClosed(4924800047L, 34709074000000L);
        org.junit.Assert.assertNotNull(longStream2);
    }

    @Test
    public void test6112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6112");
        double[] doubleArray4 = new double[] { (byte) 0, 59, 83400000000000L, '4' };
        java.util.stream.DoubleStream doubleStream5 = java.util.stream.DoubleStream.of(doubleArray4);
        java.nio.DoubleBuffer doubleBuffer6 = java.nio.DoubleBuffer.wrap(doubleArray4);
        double[] doubleArray11 = new double[] { (byte) 0, 59, 83400000000000L, '4' };
        java.util.stream.DoubleStream doubleStream12 = java.util.stream.DoubleStream.of(doubleArray11);
        java.nio.DoubleBuffer doubleBuffer13 = java.nio.DoubleBuffer.wrap(doubleArray11);
        java.nio.DoubleBuffer doubleBuffer14 = doubleBuffer6.put(doubleBuffer13);
        java.lang.String str15 = doubleBuffer14.toString();
        double[] doubleArray20 = new double[] { (byte) 0, 59, 83400000000000L, '4' };
        java.util.stream.DoubleStream doubleStream21 = java.util.stream.DoubleStream.of(doubleArray20);
        java.nio.DoubleBuffer doubleBuffer22 = java.nio.DoubleBuffer.wrap(doubleArray20);
        double[] doubleArray27 = new double[] { (byte) 0, 59, 83400000000000L, '4' };
        java.util.stream.DoubleStream doubleStream28 = java.util.stream.DoubleStream.of(doubleArray27);
        java.nio.DoubleBuffer doubleBuffer29 = java.nio.DoubleBuffer.wrap(doubleArray27);
        java.nio.DoubleBuffer doubleBuffer30 = doubleBuffer22.put(doubleBuffer29);
        java.nio.DoubleBuffer doubleBuffer31 = doubleBuffer14.put(doubleBuffer30);
        java.nio.DoubleBuffer doubleBuffer32 = doubleBuffer14.slice();
        java.nio.ByteOrder byteOrder33 = doubleBuffer32.order();
        // The following exception was thrown during execution in test generation
        try {
            double double34 = doubleBuffer32.get();
            org.junit.Assert.fail("Expected exception of type java.nio.BufferUnderflowException; message: null");
        } catch (java.nio.BufferUnderflowException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[0.0, 59.0, 8.34E13, 52.0]");
        org.junit.Assert.assertNotNull(doubleStream5);
        org.junit.Assert.assertNotNull(doubleBuffer6);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0, 59.0, 8.34E13, 52.0]");
        org.junit.Assert.assertNotNull(doubleStream12);
        org.junit.Assert.assertNotNull(doubleBuffer13);
        org.junit.Assert.assertNotNull(doubleBuffer14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "java.nio.HeapDoubleBuffer[pos=4 lim=4 cap=4]" + "'", str15, "java.nio.HeapDoubleBuffer[pos=4 lim=4 cap=4]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[0.0, 59.0, 8.34E13, 52.0]");
        org.junit.Assert.assertNotNull(doubleStream21);
        org.junit.Assert.assertNotNull(doubleBuffer22);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[0.0, 59.0, 8.34E13, 52.0]");
        org.junit.Assert.assertNotNull(doubleStream28);
        org.junit.Assert.assertNotNull(doubleBuffer29);
        org.junit.Assert.assertNotNull(doubleBuffer30);
        org.junit.Assert.assertNotNull(doubleBuffer31);
        org.junit.Assert.assertNotNull(doubleBuffer32);
        org.junit.Assert.assertNotNull(byteOrder33);
    }

    @Test
    public void test6113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6113");
        java.util.stream.IntStream intStream2 = java.util.stream.IntStream.rangeClosed(100, (int) '4');
        java.util.stream.IntStream intStream3 = intStream2.sequential();
        java.util.function.IntUnaryOperator intUnaryOperator4 = java.util.function.IntUnaryOperator.identity();
        java.util.stream.IntStream intStream5 = intStream2.map(intUnaryOperator4);
        java.util.function.IntUnaryOperator intUnaryOperator6 = java.util.function.IntUnaryOperator.identity();
        java.util.stream.IntStream intStream9 = java.util.stream.IntStream.rangeClosed(100, (int) '4');
        java.util.stream.IntStream intStream10 = intStream9.sequential();
        java.util.function.IntUnaryOperator intUnaryOperator11 = java.util.function.IntUnaryOperator.identity();
        java.util.stream.IntStream intStream12 = intStream9.map(intUnaryOperator11);
        java.util.function.IntUnaryOperator intUnaryOperator13 = intUnaryOperator6.compose(intUnaryOperator11);
        int int15 = intUnaryOperator11.applyAsInt(5);
        java.util.function.IntUnaryOperator intUnaryOperator16 = java.util.function.IntUnaryOperator.identity();
        java.util.stream.IntStream intStream19 = java.util.stream.IntStream.rangeClosed(100, (int) '4');
        java.util.stream.IntStream intStream20 = intStream19.sequential();
        java.util.function.IntUnaryOperator intUnaryOperator21 = java.util.function.IntUnaryOperator.identity();
        java.util.stream.IntStream intStream22 = intStream19.map(intUnaryOperator21);
        java.util.function.IntUnaryOperator intUnaryOperator23 = intUnaryOperator16.compose(intUnaryOperator21);
        java.util.function.IntUnaryOperator intUnaryOperator24 = intUnaryOperator11.compose(intUnaryOperator21);
        java.util.stream.IntStream intStream25 = intStream5.map(intUnaryOperator21);
        java.util.stream.IntStream intStream26 = intStream25.distinct();
        java.util.OptionalInt optionalInt27 = intStream26.findAny();
        org.junit.Assert.assertNotNull(intStream2);
        org.junit.Assert.assertNotNull(intStream3);
        org.junit.Assert.assertNotNull(intUnaryOperator4);
        org.junit.Assert.assertNotNull(intStream5);
        org.junit.Assert.assertNotNull(intUnaryOperator6);
        org.junit.Assert.assertNotNull(intStream9);
        org.junit.Assert.assertNotNull(intStream10);
        org.junit.Assert.assertNotNull(intUnaryOperator11);
        org.junit.Assert.assertNotNull(intStream12);
        org.junit.Assert.assertNotNull(intUnaryOperator13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 5 + "'", int15 == 5);
        org.junit.Assert.assertNotNull(intUnaryOperator16);
        org.junit.Assert.assertNotNull(intStream19);
        org.junit.Assert.assertNotNull(intStream20);
        org.junit.Assert.assertNotNull(intUnaryOperator21);
        org.junit.Assert.assertNotNull(intStream22);
        org.junit.Assert.assertNotNull(intUnaryOperator23);
        org.junit.Assert.assertNotNull(intUnaryOperator24);
        org.junit.Assert.assertNotNull(intStream25);
        org.junit.Assert.assertNotNull(intStream26);
        org.junit.Assert.assertNotNull(optionalInt27);
    }

    @Test
    public void test6114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6114");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Locale.LanguageRange[] languageRangeArray3 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList4 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList4, languageRangeArray3);
        java.util.Locale locale6 = java.util.Locale.JAPAN;
        java.util.Locale[] localeArray7 = new java.util.Locale[] { locale6 };
        java.util.ArrayList<java.util.Locale> localeList8 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList8, localeArray7);
        java.util.List<java.util.Locale> localeList10 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList4, (java.util.Collection<java.util.Locale>) localeList8);
        localeList10.clear();
        java.util.List<java.util.Locale> localeList12 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.util.Locale>) localeList10);
        java.util.Locale.LanguageRange[] languageRangeArray13 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList14 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList14, languageRangeArray13);
        java.util.Locale.LanguageRange[] languageRangeArray16 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList17 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList17, languageRangeArray16);
        java.util.Locale locale19 = java.util.Locale.JAPAN;
        java.util.Locale[] localeArray20 = new java.util.Locale[] { locale19 };
        java.util.ArrayList<java.util.Locale> localeList21 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList21, localeArray20);
        java.util.List<java.util.Locale> localeList23 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList17, (java.util.Collection<java.util.Locale>) localeList21);
        localeList23.clear();
        java.util.List<java.util.Locale> localeList25 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList14, (java.util.Collection<java.util.Locale>) localeList23);
        java.util.List<java.util.Locale> localeList26 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.util.Locale>) localeList25);
        org.joda.time.Seconds seconds27 = org.joda.time.Seconds.ONE;
        org.joda.time.Duration duration29 = org.joda.time.Duration.standardDays((long) 20);
        org.joda.time.Seconds seconds30 = duration29.toStandardSeconds();
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.Duration duration33 = new org.joda.time.Duration(readableInstant31, readableInstant32);
        org.joda.time.Seconds seconds34 = duration33.toStandardSeconds();
        int int35 = seconds34.getSeconds();
        org.joda.time.Seconds seconds37 = seconds34.dividedBy(28);
        boolean boolean38 = seconds30.isLessThan(seconds34);
        org.joda.time.Seconds seconds39 = seconds27.plus(seconds34);
        int int40 = localeList25.lastIndexOf((java.lang.Object) seconds34);
        org.joda.time.format.PeriodPrinter periodPrinter42 = null;
        org.joda.time.format.PeriodParser periodParser43 = null;
        org.joda.time.format.PeriodFormatter periodFormatter44 = new org.joda.time.format.PeriodFormatter(periodPrinter42, periodParser43);
        java.util.Locale.LanguageRange[] languageRangeArray45 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList46 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList46, languageRangeArray45);
        java.util.Locale.LanguageRange[] languageRangeArray48 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList49 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList49, languageRangeArray48);
        java.util.Locale locale51 = java.util.Locale.JAPAN;
        java.util.Locale[] localeArray52 = new java.util.Locale[] { locale51 };
        java.util.ArrayList<java.util.Locale> localeList53 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList53, localeArray52);
        java.util.List<java.util.Locale> localeList55 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList49, (java.util.Collection<java.util.Locale>) localeList53);
        localeList55.clear();
        java.util.List<java.util.Locale> localeList57 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList46, (java.util.Collection<java.util.Locale>) localeList55);
        java.util.Locale.LanguageRange[] languageRangeArray58 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList59 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList59, languageRangeArray58);
        java.util.Locale.LanguageRange[] languageRangeArray61 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList62 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList62, languageRangeArray61);
        java.util.Locale locale64 = java.util.Locale.JAPAN;
        java.util.Locale[] localeArray65 = new java.util.Locale[] { locale64 };
        java.util.ArrayList<java.util.Locale> localeList66 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList66, localeArray65);
        java.util.List<java.util.Locale> localeList68 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList62, (java.util.Collection<java.util.Locale>) localeList66);
        localeList68.clear();
        java.util.List<java.util.Locale> localeList70 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList59, (java.util.Collection<java.util.Locale>) localeList68);
        java.util.List<java.util.Locale> localeList71 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList46, (java.util.Collection<java.util.Locale>) localeList70);
        java.util.ListIterator<java.util.Locale> localeItor72 = localeList70.listIterator();
        java.util.Locale locale73 = java.util.Locale.ENGLISH;
        localeItor72.add(locale73);
        org.joda.time.format.PeriodFormatter periodFormatter75 = periodFormatter44.withLocale(locale73);
        java.util.Locale locale76 = periodFormatter75.getLocale();
        // The following exception was thrown during execution in test generation
        try {
            localeList25.add(34555048, locale76);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 34555048, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(languageRangeArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(localeArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(localeList10);
        org.junit.Assert.assertNotNull(localeList12);
        org.junit.Assert.assertNotNull(languageRangeArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(languageRangeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(localeArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(localeList23);
        org.junit.Assert.assertNotNull(localeList25);
        org.junit.Assert.assertNotNull(localeList26);
        org.junit.Assert.assertNotNull(seconds27);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(seconds30);
        org.junit.Assert.assertNotNull(seconds34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(seconds37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(seconds39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertNotNull(languageRangeArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(languageRangeArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(localeArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(localeList55);
        org.junit.Assert.assertNotNull(localeList57);
        org.junit.Assert.assertNotNull(languageRangeArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(languageRangeArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(localeArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(localeList68);
        org.junit.Assert.assertNotNull(localeList70);
        org.junit.Assert.assertNotNull(localeList71);
        org.junit.Assert.assertNotNull(localeItor72);
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "en");
        org.junit.Assert.assertNotNull(periodFormatter75);
        org.junit.Assert.assertNotNull(locale76);
        org.junit.Assert.assertEquals(locale76.toString(), "en");
    }

    @Test
    public void test6115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6115");
        // The following exception was thrown during execution in test generation
        try {
            java.time.ZoneOffset zoneOffset3 = java.time.ZoneOffset.ofHoursMinutesSeconds(344, (int) '+', 256);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Zone offset hours not in valid range: value 344 is not in the range -18 to 18");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
    }

    @Test
    public void test6116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6116");
        org.joda.time.YearMonthDay yearMonthDay0 = new org.joda.time.YearMonthDay();
        java.util.TimeZone timeZone3 = null;
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forTimeZone(timeZone3);
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight((long) 1970, dateTimeZone4);
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((long) 3600000, dateTimeZone4);
        org.joda.time.DateMidnight dateMidnight7 = yearMonthDay0.toDateMidnight(dateTimeZone4);
        org.joda.time.LocalDate localDate8 = yearMonthDay0.toLocalDate();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) 3, chronology10);
        org.joda.time.DateTime.Property property12 = dateTime11.dayOfYear();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) 3, chronology14);
        org.joda.time.DateTime.Property property16 = dateTime15.dayOfYear();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight((java.lang.Object) dateTime15, chronology17);
        org.joda.time.DateMidnight dateMidnight20 = dateMidnight18.minusMonths((-1));
        org.joda.time.DateMidnight dateMidnight22 = dateMidnight18.withDayOfYear((int) ' ');
        int int23 = dateMidnight18.getWeekOfWeekyear();
        long long24 = property12.getDifferenceAsLong((org.joda.time.ReadableInstant) dateMidnight18);
        boolean boolean26 = dateMidnight18.isAfter(10L);
        boolean boolean27 = localDate8.equals((java.lang.Object) dateMidnight18);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((long) 3, chronology29);
        org.joda.time.DateTime.Property property31 = dateTime30.dayOfYear();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.DateMidnight dateMidnight33 = new org.joda.time.DateMidnight((java.lang.Object) dateTime30, chronology32);
        org.joda.time.MutableDateTime mutableDateTime34 = dateTime30.toMutableDateTime();
        mutableDateTime34.addYears((int) (short) 100);
        org.joda.time.MutableDateTime.Property property37 = mutableDateTime34.dayOfWeek();
        org.joda.time.MutableDateTime.Property property38 = mutableDateTime34.year();
        java.util.TimeZone timeZone39 = null;
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forTimeZone(timeZone39);
        mutableDateTime34.setZone(dateTimeZone40);
        java.util.Locale locale43 = java.util.Locale.TAIWAN;
        java.lang.String str44 = dateTimeZone40.getShortName((long) 64, locale43);
        int int46 = dateTimeZone40.getOffset(34450799000000L);
        long long48 = dateTimeZone40.nextTransition(3155760000000L);
        org.joda.time.Interval interval49 = localDate8.toInterval(dateTimeZone40);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(mutableDateTime34);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "+00:00" + "'", str44, "+00:00");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 3155760000000L + "'", long48 == 3155760000000L);
        org.junit.Assert.assertNotNull(interval49);
    }

    @Test
    public void test6117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6117");
        java.time.LocalDate localDate1 = java.time.LocalDate.ofEpochDay((long) ' ');
        java.time.OffsetTime offsetTime2 = java.time.OffsetTime.MAX;
        java.time.LocalTime localTime3 = offsetTime2.toLocalTime();
        java.lang.String str4 = offsetTime2.toString();
        java.time.Duration duration5 = java.time.Duration.ZERO;
        java.lang.String str6 = duration5.toString();
        java.time.OffsetTime offsetTime7 = offsetTime2.plus((java.time.temporal.TemporalAmount) duration5);
        java.time.LocalTime localTime8 = offsetTime2.toLocalTime();
        java.time.chrono.ChronoLocalDateTime<?> wildcardChronoLocalDateTime9 = localDate1.atTime(localTime8);
        java.time.LocalDate localDate11 = localDate1.minusWeeks((long) 2097);
        java.util.TimeZone timeZone13 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forTimeZone(timeZone13);
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight((long) 1970, dateTimeZone14);
        long long18 = dateTimeZone14.convertLocalToUTC((long) 3, false);
        long long21 = dateTimeZone14.convertLocalToUTC(0L, true);
        boolean boolean22 = localDate1.equals((java.lang.Object) true);
        java.net.InetAddress inetAddress23 = java.net.InetAddress.getLocalHost();
        boolean boolean24 = inetAddress23.isMCOrgLocal();
        float[] floatArray27 = new float[] { (-1L), (byte) -1 };
        java.nio.FloatBuffer floatBuffer28 = java.nio.FloatBuffer.wrap(floatArray27);
        boolean boolean29 = inetAddress23.equals((java.lang.Object) floatBuffer28);
        java.time.OffsetTime offsetTime30 = java.time.OffsetTime.MAX;
        java.time.LocalTime localTime31 = offsetTime30.toLocalTime();
        java.lang.String str32 = offsetTime30.toString();
        java.time.Duration duration33 = java.time.Duration.ZERO;
        java.lang.String str34 = duration33.toString();
        java.time.OffsetTime offsetTime35 = offsetTime30.plus((java.time.temporal.TemporalAmount) duration33);
        java.time.OffsetTime offsetTime37 = offsetTime30.withHour((int) (short) 1);
        boolean boolean38 = inetAddress23.equals((java.lang.Object) offsetTime30);
        java.time.Period period39 = java.time.Period.ZERO;
        java.time.OffsetTime offsetTime40 = offsetTime30.minus((java.time.temporal.TemporalAmount) period39);
        java.time.OffsetDateTime offsetDateTime41 = localDate1.atTime(offsetTime40);
        java.time.temporal.ChronoField chronoField42 = java.time.temporal.ChronoField.MICRO_OF_DAY;
        java.lang.String str43 = chronoField42.toString();
        // The following exception was thrown during execution in test generation
        try {
            int int44 = localDate1.get((java.time.temporal.TemporalField) chronoField42);
            org.junit.Assert.fail("Expected exception of type java.time.temporal.UnsupportedTemporalTypeException; message: Unsupported field: MicroOfDay");
        } catch (java.time.temporal.UnsupportedTemporalTypeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate1);
        org.junit.Assert.assertNotNull(offsetTime2);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "23:59:59.999999999-18:00" + "'", str4, "23:59:59.999999999-18:00");
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "PT0S" + "'", str6, "PT0S");
        org.junit.Assert.assertNotNull(offsetTime7);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(wildcardChronoLocalDateTime9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 3L + "'", long18 == 3L);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(inetAddress23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(floatArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray27), "[-1.0, -1.0]");
        org.junit.Assert.assertNotNull(floatBuffer28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(offsetTime30);
        org.junit.Assert.assertNotNull(localTime31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "23:59:59.999999999-18:00" + "'", str32, "23:59:59.999999999-18:00");
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "PT0S" + "'", str34, "PT0S");
        org.junit.Assert.assertNotNull(offsetTime35);
        org.junit.Assert.assertNotNull(offsetTime37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(offsetTime40);
        org.junit.Assert.assertNotNull(offsetDateTime41);
        org.junit.Assert.assertTrue("'" + chronoField42 + "' != '" + java.time.temporal.ChronoField.MICRO_OF_DAY + "'", chronoField42.equals(java.time.temporal.ChronoField.MICRO_OF_DAY));
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "MicroOfDay" + "'", str43, "MicroOfDay");
    }

    @Test
    public void test6118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6118");
        char[] charArray6 = new char[] { '#', '/', '4', 'a', '4', 'u' };
        java.nio.CharBuffer charBuffer7 = java.nio.CharBuffer.wrap(charArray6);
        java.nio.CharBuffer charBuffer8 = java.nio.CharBuffer.wrap(charArray6);
        char[] charArray9 = charBuffer8.array();
        // The following exception was thrown during execution in test generation
        try {
            java.nio.CharBuffer charBuffer12 = charBuffer8.subSequence(31, (-46800000));
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "#/4a4u");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "#/4a4u");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[#, /, 4, a, 4, u]");
        org.junit.Assert.assertNotNull(charBuffer7);
        org.junit.Assert.assertNotNull(charBuffer8);
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "#/4a4u");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "#/4a4u");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[#, /, 4, a, 4, u]");
    }

    @Test
    public void test6119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6119");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 3, chronology1);
        org.joda.time.DateTime.Property property3 = dateTime2.dayOfYear();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight((java.lang.Object) dateTime2, chronology4);
        org.joda.time.MutableDateTime mutableDateTime6 = dateTime2.toMutableDateTime();
        mutableDateTime6.addYears((int) (short) 100);
        mutableDateTime6.setMillis((long) 21);
        org.joda.time.MutableDateTime.Property property11 = mutableDateTime6.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime12 = property11.roundHalfCeiling();
        java.time.LocalTime localTime17 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime18 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime17);
        long long19 = localTime18.toNanoOfDay();
        java.util.GregorianCalendar gregorianCalendar25 = new java.util.GregorianCalendar(12, 4096, 7, (-1), (int) (short) 10);
        int int26 = gregorianCalendar25.getWeeksInWeekYear();
        java.lang.String str27 = gregorianCalendar25.getCalendarType();
        java.time.ZonedDateTime zonedDateTime28 = gregorianCalendar25.toZonedDateTime();
        java.time.ZonedDateTime zonedDateTime30 = zonedDateTime28.minusMonths((long) 10);
        java.time.temporal.Temporal temporal31 = localTime18.adjustInto((java.time.temporal.Temporal) zonedDateTime30);
        boolean boolean32 = mutableDateTime12.equals((java.lang.Object) zonedDateTime30);
        java.util.GregorianCalendar gregorianCalendar38 = new java.util.GregorianCalendar(12, 4096, 7, (-1), (int) (short) 10);
        int int39 = gregorianCalendar38.getWeeksInWeekYear();
        java.lang.String str40 = gregorianCalendar38.getCalendarType();
        java.time.ZonedDateTime zonedDateTime41 = gregorianCalendar38.toZonedDateTime();
        java.util.GregorianCalendar gregorianCalendar47 = new java.util.GregorianCalendar(12, 4096, 7, (-1), (int) (short) 10);
        int int48 = gregorianCalendar47.getWeeksInWeekYear();
        java.lang.String str49 = gregorianCalendar47.getCalendarType();
        java.time.ZonedDateTime zonedDateTime50 = gregorianCalendar47.toZonedDateTime();
        int int51 = zonedDateTime41.compareTo((java.time.chrono.ChronoZonedDateTime<java.time.LocalDate>) zonedDateTime50);
        java.time.ZonedDateTime zonedDateTime53 = zonedDateTime41.plusDays((long) 2022);
        java.time.Instant instant54 = zonedDateTime41.toInstant();
        java.time.chrono.Chronology chronology55 = zonedDateTime41.getChronology();
        boolean boolean56 = zonedDateTime30.isAfter((java.time.chrono.ChronoZonedDateTime<java.time.LocalDate>) zonedDateTime41);
        java.util.LongSummaryStatistics longSummaryStatistics57 = new java.util.LongSummaryStatistics();
        longSummaryStatistics57.accept(3);
        long long60 = longSummaryStatistics57.getMax();
        java.util.LongSummaryStatistics longSummaryStatistics61 = new java.util.LongSummaryStatistics();
        longSummaryStatistics61.accept(3);
        java.util.function.LongConsumer longConsumer64 = longSummaryStatistics57.andThen((java.util.function.LongConsumer) longSummaryStatistics61);
        java.util.LongSummaryStatistics longSummaryStatistics65 = new java.util.LongSummaryStatistics();
        longSummaryStatistics65.accept(3);
        long long68 = longSummaryStatistics65.getMax();
        double double69 = longSummaryStatistics65.getAverage();
        longSummaryStatistics65.accept(6);
        java.util.function.LongConsumer longConsumer72 = longSummaryStatistics57.andThen((java.util.function.LongConsumer) longSummaryStatistics65);
        boolean boolean73 = zonedDateTime41.equals((java.lang.Object) longSummaryStatistics65);
        java.time.ZonedDateTime zonedDateTime75 = zonedDateTime41.plusMinutes((long) 999);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 3601000000001L + "'", long19 == 3601000000001L);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 52 + "'", int26 == 52);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "gregory" + "'", str27, "gregory");
        org.junit.Assert.assertNotNull(zonedDateTime28);
        org.junit.Assert.assertNotNull(zonedDateTime30);
        org.junit.Assert.assertNotNull(temporal31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 52 + "'", int39 == 52);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "gregory" + "'", str40, "gregory");
        org.junit.Assert.assertNotNull(zonedDateTime41);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 52 + "'", int48 == 52);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "gregory" + "'", str49, "gregory");
        org.junit.Assert.assertNotNull(zonedDateTime50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(zonedDateTime53);
        org.junit.Assert.assertNotNull(instant54);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertEquals(longSummaryStatistics57.toString(), "LongSummaryStatistics{count=1, sum=3, min=3, average=3.000000, max=3}");
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 3L + "'", long60 == 3L);
        org.junit.Assert.assertEquals(longSummaryStatistics61.toString(), "LongSummaryStatistics{count=1, sum=3, min=3, average=3.000000, max=3}");
        org.junit.Assert.assertNotNull(longConsumer64);
        org.junit.Assert.assertEquals(longSummaryStatistics65.toString(), "LongSummaryStatistics{count=2, sum=9, min=3, average=4.500000, max=6}");
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 3L + "'", long68 == 3L);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 3.0d + "'", double69 == 3.0d);
        org.junit.Assert.assertNotNull(longConsumer72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(zonedDateTime75);
    }

    @Test
    public void test6120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6120");
        short[] shortArray2 = new short[] { (short) 1, (byte) 10 };
        java.nio.ShortBuffer shortBuffer3 = java.nio.ShortBuffer.wrap(shortArray2);
        short[] shortArray6 = new short[] { (short) 1, (byte) 10 };
        java.nio.ShortBuffer shortBuffer7 = java.nio.ShortBuffer.wrap(shortArray6);
        java.nio.ShortBuffer shortBuffer8 = shortBuffer3.put(shortBuffer7);
        int int9 = shortBuffer8.limit();
        java.nio.ShortBuffer shortBuffer10 = shortBuffer8.asReadOnlyBuffer();
        java.lang.String str11 = shortBuffer10.toString();
        java.nio.ShortBuffer shortBuffer12 = shortBuffer10.asReadOnlyBuffer();
        boolean boolean13 = shortBuffer10.hasArray();
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ShortBuffer shortBuffer14 = shortBuffer10.compact();
            org.junit.Assert.fail("Expected exception of type java.nio.ReadOnlyBufferException; message: null");
        } catch (java.nio.ReadOnlyBufferException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(shortArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray2), "[1, 10]");
        org.junit.Assert.assertNotNull(shortBuffer3);
        org.junit.Assert.assertNotNull(shortArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray6), "[1, 10]");
        org.junit.Assert.assertNotNull(shortBuffer7);
        org.junit.Assert.assertNotNull(shortBuffer8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2 + "'", int9 == 2);
        org.junit.Assert.assertNotNull(shortBuffer10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "java.nio.HeapShortBufferR[pos=2 lim=2 cap=2]" + "'", str11, "java.nio.HeapShortBufferR[pos=2 lim=2 cap=2]");
        org.junit.Assert.assertNotNull(shortBuffer12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test6121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6121");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 3, chronology1);
        org.joda.time.DateTime.Property property3 = dateTime2.dayOfYear();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight((java.lang.Object) dateTime2, chronology4);
        org.joda.time.MutableDateTime mutableDateTime6 = dateTime2.toMutableDateTime();
        mutableDateTime6.addYears((int) (short) 100);
        int int9 = mutableDateTime6.getHourOfDay();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) 3, chronology11);
        org.joda.time.DateTime.Property property13 = dateTime12.dayOfYear();
        org.joda.time.Interval interval14 = property13.toInterval();
        org.joda.time.DateTimeField dateTimeField15 = property13.getField();
        org.joda.time.DateTime dateTime17 = property13.addToCopy((long) (byte) 1);
        org.joda.time.DateTime dateTime19 = dateTime17.withYear(4);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((long) 3, chronology21);
        org.joda.time.Period period23 = org.joda.time.Period.ZERO;
        org.joda.time.Period period24 = period23.normalizedStandard();
        org.joda.time.Period period26 = period24.minusMinutes((int) ' ');
        org.joda.time.Period period28 = period26.minusMonths((int) (byte) 0);
        org.joda.time.PeriodType periodType29 = period28.getPeriodType();
        org.joda.time.DateTime dateTime30 = dateTime22.minus((org.joda.time.ReadablePeriod) period28);
        org.joda.time.Duration duration31 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime19, (org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.DateTime dateTime33 = dateTime30.withWeekOfWeekyear(14);
        java.util.TimeZone timeZone37 = null;
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forTimeZone(timeZone37);
        org.joda.time.DateMidnight dateMidnight39 = new org.joda.time.DateMidnight((long) 1970, dateTimeZone38);
        long long42 = dateTimeZone38.convertLocalToUTC((long) 3, false);
        org.joda.time.Interval interval43 = new org.joda.time.Interval(10L, (long) 2097, dateTimeZone38);
        int int45 = dateTimeZone38.getOffsetFromLocal(58L);
        org.joda.time.DateMidnight dateMidnight46 = org.joda.time.DateMidnight.now(dateTimeZone38);
        org.joda.time.DateTime dateTime47 = dateTime30.withZoneRetainFields(dateTimeZone38);
        mutableDateTime6.setZone(dateTimeZone38);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(periodType29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 3L + "'", long42 == 3L);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(dateMidnight46);
        org.junit.Assert.assertNotNull(dateTime47);
    }

    @Test
    public void test6122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6122");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.Interval interval1 = localDate0.toInterval();
        int int2 = localDate0.getDayOfYear();
        java.util.TimeZone timeZone6 = null;
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forTimeZone(timeZone6);
        org.joda.time.DateMidnight dateMidnight8 = new org.joda.time.DateMidnight((long) 1970, dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 3600000, dateTimeZone7);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) 22, dateTimeZone7);
        org.joda.time.Interval interval11 = localDate0.toInterval(dateTimeZone7);
        org.joda.time.DateMidnight dateMidnight12 = org.joda.time.DateMidnight.now(dateTimeZone7);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) 3, chronology14);
        org.joda.time.DateTime.Property property16 = dateTime15.dayOfYear();
        org.joda.time.Interval interval17 = property16.toInterval();
        org.joda.time.DateTime dateTime18 = interval17.getEnd();
        int int19 = dateTimeZone7.getOffset((org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.DateTime.Property property20 = dateTime18.millisOfDay();
        org.joda.time.DateTime dateTime22 = property20.addWrapFieldToCopy(34482);
        org.junit.Assert.assertNotNull(interval1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 52 + "'", int2 == 52);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTime22);
    }

    @Test
    public void test6123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6123");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes2 = minutes0.minus(12);
        org.joda.time.Minutes minutes3 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes5 = minutes3.minus(12);
        org.joda.time.Minutes minutes6 = minutes0.minus(minutes3);
        org.joda.time.Minutes minutes7 = minutes3.negated();
        org.joda.time.Minutes minutes8 = org.joda.time.Minutes.MIN_VALUE;
        boolean boolean9 = minutes3.isGreaterThan(minutes8);
        org.joda.time.Minutes minutes10 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes12 = minutes10.minus(12);
        org.joda.time.Minutes minutes13 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes15 = minutes13.minus(12);
        org.joda.time.Minutes minutes16 = minutes10.minus(minutes13);
        org.joda.time.Minutes minutes17 = minutes13.negated();
        org.joda.time.Minutes minutes18 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes20 = minutes18.minus(12);
        org.joda.time.Minutes minutes21 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes23 = minutes21.minus(12);
        org.joda.time.Minutes minutes24 = minutes18.minus(minutes21);
        org.joda.time.Minutes minutes25 = minutes21.negated();
        org.joda.time.Minutes minutes26 = org.joda.time.Minutes.MIN_VALUE;
        boolean boolean27 = minutes21.isGreaterThan(minutes26);
        java.lang.String str28 = minutes21.toString();
        org.joda.time.Minutes minutes29 = minutes13.minus(minutes21);
        org.joda.time.Minutes minutes30 = minutes8.plus(minutes21);
        org.joda.time.Minutes minutes32 = minutes21.minus(0);
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(minutes3);
        org.junit.Assert.assertNotNull(minutes5);
        org.junit.Assert.assertNotNull(minutes6);
        org.junit.Assert.assertNotNull(minutes7);
        org.junit.Assert.assertNotNull(minutes8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(minutes10);
        org.junit.Assert.assertNotNull(minutes12);
        org.junit.Assert.assertNotNull(minutes13);
        org.junit.Assert.assertNotNull(minutes15);
        org.junit.Assert.assertNotNull(minutes16);
        org.junit.Assert.assertNotNull(minutes17);
        org.junit.Assert.assertNotNull(minutes18);
        org.junit.Assert.assertNotNull(minutes20);
        org.junit.Assert.assertNotNull(minutes21);
        org.junit.Assert.assertNotNull(minutes23);
        org.junit.Assert.assertNotNull(minutes24);
        org.junit.Assert.assertNotNull(minutes25);
        org.junit.Assert.assertNotNull(minutes26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "PT2147483647M" + "'", str28, "PT2147483647M");
        org.junit.Assert.assertNotNull(minutes29);
        org.junit.Assert.assertNotNull(minutes30);
        org.junit.Assert.assertNotNull(minutes32);
    }

    @Test
    public void test6124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6124");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(2021, 274, (int) '4');
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2021 for hourOfDay must not be larger than 23");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test6125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6125");
        java.io.File file0 = null;
        java.io.File file2 = new java.io.File(file0, "1970-01-01T00:00:00.003Z");
        long long3 = file2.lastModified();
        boolean boolean4 = file2.mkdir();
        java.lang.String str5 = file2.getCanonicalPath();
        org.junit.Assert.assertNull("file2.getParent() == null", file2.getParent());
        org.junit.Assert.assertEquals(file2.toString(), "1970-01-01T00:00:00.003Z");
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "/experiment/1970-01-01T00:00:00.003Z" + "'", str5, "/experiment/1970-01-01T00:00:00.003Z");
    }

    @Test
    public void test6126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6126");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.Duration duration2 = new org.joda.time.Duration(readableInstant0, readableInstant1);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = duration2.toPeriodTo(readableInstant3, periodType4);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.Duration duration8 = new org.joda.time.Duration(readableInstant6, readableInstant7);
        long long9 = duration8.getMillis();
        boolean boolean10 = duration2.isShorterThan((org.joda.time.ReadableDuration) duration8);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) 3, chronology12);
        org.joda.time.DateTime.Property property14 = dateTime13.dayOfYear();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight((java.lang.Object) dateTime13, chronology15);
        org.joda.time.MutableDateTime mutableDateTime17 = dateTime13.toMutableDateTime();
        mutableDateTime17.addYears((int) (short) 100);
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime17.dayOfWeek();
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime17.year();
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime17.weekyear();
        boolean boolean23 = duration2.equals((java.lang.Object) mutableDateTime17);
        mutableDateTime17.addMonths((int) ' ');
        mutableDateTime17.add((long) (byte) 10);
        org.joda.time.Period period28 = org.joda.time.Period.ZERO;
        org.joda.time.Period period29 = period28.normalizedStandard();
        org.joda.time.Period period31 = period28.plusHours(2);
        java.time.chrono.IsoEra isoEra32 = java.time.chrono.IsoEra.CE;
        boolean boolean33 = period31.equals((java.lang.Object) isoEra32);
        int int34 = period31.getMinutes();
        mutableDateTime17.add((org.joda.time.ReadablePeriod) period31);
        java.util.TimeZone timeZone37 = null;
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forTimeZone(timeZone37);
        org.joda.time.DateMidnight dateMidnight39 = new org.joda.time.DateMidnight((long) 1970, dateTimeZone38);
        long long42 = dateTimeZone38.convertLocalToUTC((long) 3, false);
        long long45 = dateTimeZone38.convertLocalToUTC(0L, true);
        mutableDateTime17.setZoneRetainFields(dateTimeZone38);
        java.lang.String str47 = dateTimeZone38.toString();
        org.joda.time.chrono.EthiopicChronology ethiopicChronology48 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone38);
        org.joda.time.DateTimeField dateTimeField49 = ethiopicChronology48.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone50 = ethiopicChronology48.getZone();
        org.joda.time.DateTimeField dateTimeField51 = ethiopicChronology48.era();
        org.joda.time.DateTimeField dateTimeField52 = ethiopicChronology48.secondOfDay();
        org.joda.time.DateTimeField dateTimeField53 = ethiopicChronology48.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField54 = ethiopicChronology48.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime55 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) ethiopicChronology48);
        org.joda.time.DurationField durationField56 = ethiopicChronology48.seconds();
        org.joda.time.DateTimeField dateTimeField57 = ethiopicChronology48.weekyear();
        org.joda.time.DateTimeField dateTimeField58 = ethiopicChronology48.centuryOfEra();
        org.joda.time.ReadablePartial readablePartial59 = null;
        java.nio.charset.Charset charset61 = java.nio.charset.Charset.defaultCharset();
        java.nio.charset.CharsetDecoder charsetDecoder62 = charset61.newDecoder();
        java.nio.charset.Charset charset63 = java.nio.charset.Charset.defaultCharset();
        java.nio.charset.CharsetDecoder charsetDecoder64 = charset63.newDecoder();
        java.nio.charset.Charset charset65 = java.nio.charset.Charset.defaultCharset();
        boolean boolean66 = charset63.contains(charset65);
        int int67 = charset61.compareTo(charset63);
        java.util.Locale locale70 = new java.util.Locale("PT0S", "2022-02-21T09:34:06.670Z");
        java.lang.String str71 = charset63.displayName(locale70);
        java.util.Locale locale72 = locale70.stripExtensions();
        java.lang.String str73 = dateTimeField58.getAsText(readablePartial59, 8, locale72);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertTrue("'" + isoEra32 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra32.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 3L + "'", long42 == 3L);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Etc/UTC" + "'", str47, "Etc/UTC");
        org.junit.Assert.assertNotNull(ethiopicChronology48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(durationField56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(charset61);
        org.junit.Assert.assertNotNull(charsetDecoder62);
        org.junit.Assert.assertNotNull(charset63);
        org.junit.Assert.assertNotNull(charsetDecoder64);
        org.junit.Assert.assertNotNull(charset65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertEquals(locale70.toString(), "pt0s_2022-02-21T09:34:06.670Z");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "US-ASCII" + "'", str71, "US-ASCII");
        org.junit.Assert.assertNotNull(locale72);
        org.junit.Assert.assertEquals(locale72.toString(), "pt0s_2022-02-21T09:34:06.670Z");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "8" + "'", str73, "8");
    }

    @Test
    public void test6127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6127");
        java.io.File file0 = null;
        java.io.File file2 = new java.io.File(file0, "1970-01-01T00:00:00.003Z");
        boolean boolean3 = file2.exists();
        boolean boolean4 = file2.mkdirs();
        java.io.File file5 = file2.getParentFile();
        org.junit.Assert.assertNull("file2.getParent() == null", file2.getParent());
        org.junit.Assert.assertEquals(file2.toString(), "1970-01-01T00:00:00.003Z");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(file5);
    }

    @Test
    public void test6128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6128");
        org.joda.time.Weeks weeks0 = org.joda.time.Weeks.ONE;
        java.util.concurrent.TimeUnit timeUnit1 = java.util.concurrent.TimeUnit.NANOSECONDS;
        boolean boolean2 = weeks0.equals((java.lang.Object) timeUnit1);
        org.joda.time.MutablePeriod mutablePeriod3 = weeks0.toMutablePeriod();
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.Duration duration6 = new org.joda.time.Duration(readableInstant4, readableInstant5);
        org.joda.time.Duration duration8 = duration6.withMillis((-1L));
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.LocalTime localTime11 = new org.joda.time.LocalTime((long) 0, chronology10);
        org.joda.time.Chronology chronology12 = localTime11.getChronology();
        mutablePeriod3.setPeriod((org.joda.time.ReadableDuration) duration8, chronology12);
        mutablePeriod3.addWeeks((int) (byte) 10);
        mutablePeriod3.addMinutes(20);
        java.lang.String str18 = mutablePeriod3.toString();
        mutablePeriod3.setPeriod((long) 46);
        mutablePeriod3.setPeriod((long) (byte) -1, 19692288000000L);
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.Duration duration26 = new org.joda.time.Duration(readableInstant24, readableInstant25);
        long long27 = duration26.getMillis();
        org.joda.time.Duration duration29 = duration26.plus((long) (byte) 1);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((long) 3, chronology31);
        org.joda.time.DateTime.Property property33 = dateTime32.dayOfYear();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((long) 3, chronology35);
        org.joda.time.DateTime.Property property37 = dateTime36.dayOfYear();
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.DateMidnight dateMidnight39 = new org.joda.time.DateMidnight((java.lang.Object) dateTime36, chronology38);
        org.joda.time.DateMidnight dateMidnight41 = dateMidnight39.minusMonths((-1));
        org.joda.time.DateMidnight dateMidnight43 = dateMidnight39.withDayOfYear((int) ' ');
        int int44 = dateMidnight39.getWeekOfWeekyear();
        long long45 = property33.getDifferenceAsLong((org.joda.time.ReadableInstant) dateMidnight39);
        org.joda.time.Weeks weeks46 = org.joda.time.Weeks.ONE;
        java.util.concurrent.TimeUnit timeUnit47 = java.util.concurrent.TimeUnit.NANOSECONDS;
        boolean boolean48 = weeks46.equals((java.lang.Object) timeUnit47);
        org.joda.time.Weeks weeks49 = weeks46.negated();
        org.joda.time.PeriodType periodType50 = weeks49.getPeriodType();
        org.joda.time.Period period51 = duration29.toPeriodFrom((org.joda.time.ReadableInstant) dateMidnight39, periodType50);
        int int52 = dateMidnight39.getDayOfYear();
        org.joda.time.Duration duration53 = mutablePeriod3.toDurationTo((org.joda.time.ReadableInstant) dateMidnight39);
        org.junit.Assert.assertNotNull(weeks0);
        org.junit.Assert.assertNotNull(timeUnit1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(mutablePeriod3);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "P10WT20M0.001S" + "'", str18, "P10WT20M0.001S");
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(dateMidnight41);
        org.junit.Assert.assertNotNull(dateMidnight43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertNotNull(weeks46);
        org.junit.Assert.assertNotNull(timeUnit47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(weeks49);
        org.junit.Assert.assertNotNull(periodType50);
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertNotNull(duration53);
    }

    @Test
    public void test6129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6129");
        java.util.DoubleSummaryStatistics doubleSummaryStatistics0 = new java.util.DoubleSummaryStatistics();
        double double1 = doubleSummaryStatistics0.getSum();
        double double2 = doubleSummaryStatistics0.getAverage();
        double double3 = doubleSummaryStatistics0.getAverage();
        org.junit.Assert.assertEquals(doubleSummaryStatistics0.toString(), "DoubleSummaryStatistics{count=0, sum=0.000000, min=Infinity, average=0.000000, max=-Infinity}");
        org.junit.Assert.assertTrue("'" + double1 + "' != '" + 0.0d + "'", double1 == 0.0d);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 0.0d + "'", double2 == 0.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
    }

    @Test
    public void test6130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6130");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.time.LocalTime localTime6 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime7 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime6);
        java.time.LocalTime localTime12 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime13 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime12);
        java.time.temporal.ChronoField chronoField14 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime16 = localTime12.with((java.time.temporal.TemporalField) chronoField14, (long) (short) 1);
        long long17 = localTime6.getLong((java.time.temporal.TemporalField) chronoField14);
        java.time.LocalTime localTime19 = localTime6.withSecond((int) (short) 1);
        java.lang.Object obj21 = properties1.put((java.lang.Object) localTime19, (java.lang.Object) "117");
        boolean boolean23 = properties1.containsValue((java.lang.Object) 6);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet24 = properties1.entrySet();
        java.util.Map<java.lang.String, java.lang.String> strMap25 = java.time.ZoneId.SHORT_IDS;
        boolean boolean27 = strMap25.containsValue((java.lang.Object) "2022-02-21T09:34:23.848Z");
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod();
        org.joda.time.Period period29 = org.joda.time.Period.ZERO;
        org.joda.time.Period period30 = period29.normalizedStandard();
        org.joda.time.Period period32 = period29.plusHours(2);
        org.joda.time.DurationFieldType durationFieldType33 = org.joda.time.DurationFieldType.hours();
        int int34 = period29.indexOf(durationFieldType33);
        mutablePeriod28.add(durationFieldType33, (int) (short) -1);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.LocalTime localTime40 = new org.joda.time.LocalTime((long) 0, chronology39);
        org.joda.time.Chronology chronology41 = localTime40.getChronology();
        org.joda.time.DateTimeField dateTimeField42 = chronology41.weekyearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime43 = org.joda.time.MutableDateTime.now(chronology41);
        org.joda.time.DateTimeField dateTimeField44 = chronology41.monthOfYear();
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime((long) 1, chronology41);
        org.joda.time.DurationField durationField46 = durationFieldType33.getField(chronology41);
        org.joda.time.DateTimeField dateTimeField47 = chronology41.year();
        boolean boolean48 = strMap25.equals((java.lang.Object) dateTimeField47);
        properties1.putAll(strMap25);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertTrue("'" + chronoField14 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField14.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 3601000000001L + "'", long17 == 3601000000001L);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertNull(obj21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(objEntrySet24);
        org.junit.Assert.assertNotNull(strMap25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(durationFieldType33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 4 + "'", int34 == 4);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(mutableDateTime43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(durationField46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test6131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6131");
        java.nio.charset.Charset charset0 = java.nio.charset.Charset.defaultCharset();
        java.nio.charset.CharsetDecoder charsetDecoder1 = charset0.newDecoder();
        java.nio.charset.Charset charset2 = java.nio.charset.Charset.defaultCharset();
        boolean boolean3 = charset0.contains(charset2);
        java.net.URI uRI5 = new java.net.URI("hi!");
        java.lang.String str6 = uRI5.getRawAuthority();
        java.lang.String str7 = uRI5.toString();
        java.lang.String str8 = uRI5.getUserInfo();
        java.io.OutputStream outputStream9 = null;
        java.io.FilterOutputStream filterOutputStream10 = new java.io.FilterOutputStream(outputStream9);
        byte[] byteArray12 = new byte[] { (byte) 100 };
        filterOutputStream10.write(byteArray12, (int) (byte) 0, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer16 = java.nio.ByteBuffer.wrap(byteArray12);
        java.nio.LongBuffer longBuffer17 = byteBuffer16.asLongBuffer();
        java.nio.ByteBuffer byteBuffer18 = byteBuffer16.duplicate();
        boolean boolean19 = uRI5.equals((java.lang.Object) byteBuffer16);
        java.nio.DoubleBuffer doubleBuffer20 = byteBuffer16.asDoubleBuffer();
        java.util.stream.IntStream intStream22 = java.util.stream.IntStream.of((int) '/');
        java.util.OptionalInt optionalInt23 = intStream22.min();
        short[] shortArray26 = new short[] { (short) 1, (byte) 10 };
        java.nio.ShortBuffer shortBuffer27 = java.nio.ShortBuffer.wrap(shortArray26);
        short[] shortArray30 = new short[] { (short) 1, (byte) 10 };
        java.nio.ShortBuffer shortBuffer31 = java.nio.ShortBuffer.wrap(shortArray30);
        java.nio.ShortBuffer shortBuffer32 = shortBuffer27.put(shortBuffer31);
        int int33 = shortBuffer32.limit();
        boolean boolean34 = shortBuffer32.isReadOnly();
        boolean boolean35 = optionalInt23.equals((java.lang.Object) shortBuffer32);
        java.nio.ByteOrder byteOrder36 = shortBuffer32.order();
        java.nio.ByteBuffer byteBuffer37 = byteBuffer16.order(byteOrder36);
        java.nio.CharBuffer charBuffer38 = charset0.decode(byteBuffer16);
        java.time.format.DateTimeFormatter dateTimeFormatter39 = java.time.format.DateTimeFormatter.ISO_DATE;
        java.lang.String str40 = dateTimeFormatter39.toString();
        java.time.LocalDateTime localDateTime41 = java.time.LocalDateTime.now();
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery42 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period43 = localDateTime41.query(periodTemporalQuery42);
        java.text.Format format44 = dateTimeFormatter39.toFormat(periodTemporalQuery42);
        // The following exception was thrown during execution in test generation
        try {
            java.time.LocalTime localTime45 = java.time.LocalTime.parse((java.lang.CharSequence) charBuffer38, dateTimeFormatter39);
            org.junit.Assert.fail("Expected exception of type java.time.format.DateTimeParseException; message: Text 'd' could not be parsed at index 0");
        } catch (java.time.format.DateTimeParseException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charset0);
        org.junit.Assert.assertNotNull(charsetDecoder1);
        org.junit.Assert.assertNotNull(charset2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[100]");
        org.junit.Assert.assertNotNull(byteBuffer16);
        org.junit.Assert.assertNotNull(longBuffer17);
        org.junit.Assert.assertNotNull(byteBuffer18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(doubleBuffer20);
        org.junit.Assert.assertNotNull(intStream22);
        org.junit.Assert.assertNotNull(optionalInt23);
        org.junit.Assert.assertNotNull(shortArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray26), "[1, 10]");
        org.junit.Assert.assertNotNull(shortBuffer27);
        org.junit.Assert.assertNotNull(shortArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray30), "[1, 10]");
        org.junit.Assert.assertNotNull(shortBuffer31);
        org.junit.Assert.assertNotNull(shortBuffer32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2 + "'", int33 == 2);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(byteOrder36);
        org.junit.Assert.assertNotNull(byteBuffer37);
        org.junit.Assert.assertNotNull(charBuffer38);
        org.junit.Assert.assertNotNull(dateTimeFormatter39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "ParseCaseSensitive(false)(Value(Year,4,10,EXCEEDS_PAD)'-'Value(MonthOfYear,2)'-'Value(DayOfMonth,2))[Offset(+HH:MM:ss,'Z')]" + "'", str40, "ParseCaseSensitive(false)(Value(Year,4,10,EXCEEDS_PAD)'-'Value(MonthOfYear,2)'-'Value(DayOfMonth,2))[Offset(+HH:MM:ss,'Z')]");
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(periodTemporalQuery42);
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertNotNull(format44);
    }

    @Test
    public void test6132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6132");
        java.time.format.FormatStyle formatStyle0 = java.time.format.FormatStyle.LONG;
        java.time.format.FormatStyle formatStyle1 = java.time.format.FormatStyle.LONG;
        java.time.format.DateTimeFormatter dateTimeFormatter2 = java.time.format.DateTimeFormatter.ofLocalizedDateTime(formatStyle0, formatStyle1);
        java.time.format.FormatStyle formatStyle3 = java.time.format.FormatStyle.LONG;
        java.time.format.FormatStyle formatStyle4 = java.time.format.FormatStyle.LONG;
        java.time.format.DateTimeFormatter dateTimeFormatter5 = java.time.format.DateTimeFormatter.ofLocalizedDateTime(formatStyle3, formatStyle4);
        java.time.format.DateTimeFormatter dateTimeFormatter6 = java.time.format.DateTimeFormatter.ofLocalizedTime(formatStyle3);
        java.time.format.DateTimeFormatter dateTimeFormatter7 = java.time.format.DateTimeFormatter.ofLocalizedDateTime(formatStyle0, formatStyle3);
        // The following exception was thrown during execution in test generation
        try {
            java.time.temporal.TemporalAccessor temporalAccessor9 = dateTimeFormatter7.parse((java.lang.CharSequence) "2022-02-21T09:34:32.115Z");
            org.junit.Assert.fail("Expected exception of type java.time.format.DateTimeParseException; message: Text '2022-02-21T09:34:32.115Z' could not be parsed at index 4");
        } catch (java.time.format.DateTimeParseException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + formatStyle0 + "' != '" + java.time.format.FormatStyle.LONG + "'", formatStyle0.equals(java.time.format.FormatStyle.LONG));
        org.junit.Assert.assertTrue("'" + formatStyle1 + "' != '" + java.time.format.FormatStyle.LONG + "'", formatStyle1.equals(java.time.format.FormatStyle.LONG));
        org.junit.Assert.assertNotNull(dateTimeFormatter2);
        org.junit.Assert.assertTrue("'" + formatStyle3 + "' != '" + java.time.format.FormatStyle.LONG + "'", formatStyle3.equals(java.time.format.FormatStyle.LONG));
        org.junit.Assert.assertTrue("'" + formatStyle4 + "' != '" + java.time.format.FormatStyle.LONG + "'", formatStyle4.equals(java.time.format.FormatStyle.LONG));
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
    }

    @Test
    public void test6133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6133");
        org.joda.time.Weeks weeks0 = org.joda.time.Weeks.ONE;
        java.util.concurrent.TimeUnit timeUnit1 = java.util.concurrent.TimeUnit.NANOSECONDS;
        boolean boolean2 = weeks0.equals((java.lang.Object) timeUnit1);
        org.joda.time.MutablePeriod mutablePeriod3 = weeks0.toMutablePeriod();
        int int4 = mutablePeriod3.getSeconds();
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.Duration duration7 = new org.joda.time.Duration(readableInstant5, readableInstant6);
        long long8 = duration7.getMillis();
        org.joda.time.Duration duration10 = duration7.plus((long) (byte) 1);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.LocalTime localTime14 = new org.joda.time.LocalTime((long) 0, chronology13);
        org.joda.time.Chronology chronology15 = localTime14.getChronology();
        java.util.Locale locale16 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale locale17 = java.util.Locale.GERMANY;
        java.lang.String str18 = locale16.getDisplayScript(locale17);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket20 = new org.joda.time.format.DateTimeParserBucket((long) 1970, chronology15, locale16, (java.lang.Integer) 1);
        mutablePeriod3.setPeriod((org.joda.time.ReadableDuration) duration7, chronology15);
        java.lang.Object obj22 = mutablePeriod3.clone();
        mutablePeriod3.add((long) '0');
        org.junit.Assert.assertNotNull(weeks0);
        org.junit.Assert.assertNotNull(timeUnit1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(mutablePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertEquals(obj22.toString(), "PT0.048S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj22), "PT0.048S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj22), "PT0.048S");
    }

    @Test
    public void test6134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6134");
        java.util.stream.LongStream longStream1 = java.util.stream.LongStream.of(0L);
        java.util.stream.LongStream longStream2 = longStream1.unordered();
        java.util.stream.DoubleStream doubleStream3 = longStream2.asDoubleStream();
        java.util.stream.DoubleStream doubleStream5 = doubleStream3.skip((long) '#');
        // The following exception was thrown during execution in test generation
        try {
            java.util.DoubleSummaryStatistics doubleSummaryStatistics6 = doubleStream3.summaryStatistics();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: stream has already been operated upon or closed");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(longStream1);
        org.junit.Assert.assertNotNull(longStream2);
        org.junit.Assert.assertNotNull(doubleStream3);
        org.junit.Assert.assertNotNull(doubleStream5);
    }

    @Test
    public void test6135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6135");
        org.joda.time.PeriodType periodType1 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.LocalTime localTime4 = new org.joda.time.LocalTime((long) 0, chronology3);
        org.joda.time.Chronology chronology5 = localTime4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.weekyearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime7 = org.joda.time.MutableDateTime.now(chronology5);
        org.joda.time.DateTimeField dateTimeField8 = chronology5.monthOfYear();
        org.joda.time.Period period9 = new org.joda.time.Period(3601000000001L, periodType1, chronology5);
        org.joda.time.MutablePeriod mutablePeriod10 = period9.toMutablePeriod();
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.Duration duration13 = new org.joda.time.Duration(readableInstant11, readableInstant12);
        org.joda.time.Seconds seconds14 = duration13.toStandardSeconds();
        int int15 = seconds14.getSeconds();
        org.joda.time.Seconds seconds17 = seconds14.dividedBy(28);
        org.joda.time.Seconds seconds18 = seconds17.negated();
        org.joda.time.DurationFieldType durationFieldType19 = seconds18.getFieldType();
        boolean boolean20 = mutablePeriod10.isSupported(durationFieldType19);
        mutablePeriod10.addSeconds(781);
        mutablePeriod10.setMinutes(19);
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(mutablePeriod10);
        org.junit.Assert.assertNotNull(seconds14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(seconds17);
        org.junit.Assert.assertNotNull(seconds18);
        org.junit.Assert.assertNotNull(durationFieldType19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
    }

    @Test
    public void test6136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6136");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocate((int) 'a');
        java.nio.ByteBuffer byteBuffer4 = byteBuffer1.put(47, (byte) 1);
        java.nio.ByteBuffer byteBuffer6 = byteBuffer1.put((byte) 100);
        java.nio.ByteBuffer byteBuffer8 = byteBuffer1.putDouble((double) 86399965);
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer4);
        org.junit.Assert.assertNotNull(byteBuffer6);
        org.junit.Assert.assertNotNull(byteBuffer8);
    }

    @Test
    public void test6137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6137");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str4 = dateTimeFormatter2.print((-9223372036854775808L));
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
    }

    @Test
    public void test6138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6138");
        java.util.GregorianCalendar gregorianCalendar5 = new java.util.GregorianCalendar(12, 4096, 7, (-1), (int) (short) 10);
        int int6 = gregorianCalendar5.getWeeksInWeekYear();
        java.lang.String str7 = gregorianCalendar5.getCalendarType();
        gregorianCalendar5.setTimeInMillis(32L);
        // The following exception was thrown during execution in test generation
        try {
            int int11 = gregorianCalendar5.getActualMinimum(34929155);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 34929155");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 52 + "'", int6 == 52);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "gregory" + "'", str7, "gregory");
    }

    @Test
    public void test6139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6139");
        java.util.GregorianCalendar gregorianCalendar5 = new java.util.GregorianCalendar(12, 4096, 7, (-1), (int) (short) 10);
        int int7 = gregorianCalendar5.getLeastMaximum(10);
        java.util.Date date14 = new java.util.Date((int) (byte) 100, 4, 306, (int) ':', 52, (int) ' ');
        gregorianCalendar5.setGregorianChange(date14);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 11 + "'", int7 == 11);
        org.junit.Assert.assertEquals(date14.toString(), "Sun Mar 04 10:52:32 UTC 2001");
    }

    @Test
    public void test6140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6140");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder4 = builder0.setDate(0, 0, (int) (byte) 100);
        java.util.Calendar.Builder builder8 = builder0.setDate((int) (byte) 10, 57, 0);
        java.util.Calendar calendar9 = builder0.build();
        java.util.Calendar.Builder builder14 = builder0.setTimeOfDay(10, (int) 'x', (int) '#', 25);
        java.util.Calendar.Builder builder17 = builder14.setWeekDefinition(2, (int) (short) 1);
        java.util.Calendar.Builder builder21 = builder17.setTimeOfDay(680, 7, 52);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(calendar9);
// flaky:         org.junit.Assert.assertEquals(calendar9.toString(), "java.util.GregorianCalendar[time=-61702041600035,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=35,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=14,MONTH=8,WEEK_OF_YEAR=40,WEEK_OF_MONTH=6,DAY_OF_MONTH=30,DAY_OF_YEAR=273,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=35,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder21);
    }

    @Test
    public void test6141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6141");
        java.util.function.Function<java.security.KeyException, java.security.KeyException> keyExceptionFunction0 = java.util.function.Function.identity();
        java.nio.charset.CharacterCodingException characterCodingException3 = new java.nio.charset.CharacterCodingException();
        java.security.InvalidKeyException invalidKeyException4 = new java.security.InvalidKeyException("1", (java.lang.Throwable) characterCodingException3);
        java.security.cert.CertificateEncodingException certificateEncodingException5 = new java.security.cert.CertificateEncodingException("Optional.empty", (java.lang.Throwable) invalidKeyException4);
        java.security.KeyException keyException6 = keyExceptionFunction0.apply((java.security.KeyException) invalidKeyException4);
        java.security.InvalidKeyException invalidKeyException8 = new java.security.InvalidKeyException("parsecasesensitive(false)(value(year,4,10,exceeds_pad)'-'value(monthofyear,2)'-'value(dayofmonth,2))[offset(+hh:mm:ss,'z')] (UNDERFLOW,Years)");
        java.security.KeyException keyException9 = keyExceptionFunction0.apply((java.security.KeyException) invalidKeyException8);
        java.util.function.Function<java.security.KeyException, java.security.KeyException> keyExceptionFunction10 = java.util.function.Function.identity();
        java.nio.charset.CharacterCodingException characterCodingException13 = new java.nio.charset.CharacterCodingException();
        java.security.InvalidKeyException invalidKeyException14 = new java.security.InvalidKeyException("1", (java.lang.Throwable) characterCodingException13);
        java.security.cert.CertificateEncodingException certificateEncodingException15 = new java.security.cert.CertificateEncodingException("Optional.empty", (java.lang.Throwable) invalidKeyException14);
        java.security.KeyException keyException16 = keyExceptionFunction10.apply((java.security.KeyException) invalidKeyException14);
        java.security.InvalidKeyException invalidKeyException18 = new java.security.InvalidKeyException("parsecasesensitive(false)(value(year,4,10,exceeds_pad)'-'value(monthofyear,2)'-'value(dayofmonth,2))[offset(+hh:mm:ss,'z')] (UNDERFLOW,Years)");
        java.security.KeyException keyException19 = keyExceptionFunction10.apply((java.security.KeyException) invalidKeyException18);
        java.nio.charset.CharacterCodingException characterCodingException21 = new java.nio.charset.CharacterCodingException();
        java.util.concurrent.ExecutionException executionException22 = new java.util.concurrent.ExecutionException((java.lang.Throwable) characterCodingException21);
        java.security.PrivilegedActionException privilegedActionException23 = new java.security.PrivilegedActionException((java.lang.Exception) characterCodingException21);
        java.security.KeyException keyException24 = new java.security.KeyException("1970-01-01T00:00:00.000Z/1970-01-02T00:00:00.000Z", (java.lang.Throwable) characterCodingException21);
        java.security.KeyException keyException25 = keyExceptionFunction10.apply(keyException24);
        java.security.KeyException keyException26 = keyExceptionFunction0.apply(keyException25);
        java.util.function.Function<java.security.KeyException, java.security.KeyException> keyExceptionFunction27 = java.util.function.Function.identity();
        java.nio.charset.CharacterCodingException characterCodingException30 = new java.nio.charset.CharacterCodingException();
        java.security.InvalidKeyException invalidKeyException31 = new java.security.InvalidKeyException("1", (java.lang.Throwable) characterCodingException30);
        java.security.cert.CertificateEncodingException certificateEncodingException32 = new java.security.cert.CertificateEncodingException("Optional.empty", (java.lang.Throwable) invalidKeyException31);
        java.security.KeyException keyException33 = keyExceptionFunction27.apply((java.security.KeyException) invalidKeyException31);
        java.security.InvalidKeyException invalidKeyException35 = new java.security.InvalidKeyException("parsecasesensitive(false)(value(year,4,10,exceeds_pad)'-'value(monthofyear,2)'-'value(dayofmonth,2))[offset(+hh:mm:ss,'z')] (UNDERFLOW,Years)");
        java.security.KeyException keyException36 = keyExceptionFunction27.apply((java.security.KeyException) invalidKeyException35);
        java.security.KeyException keyException37 = keyExceptionFunction0.apply((java.security.KeyException) invalidKeyException35);
        java.security.GeneralSecurityException generalSecurityException38 = new java.security.GeneralSecurityException((java.lang.Throwable) keyException37);
        org.junit.Assert.assertNotNull(keyExceptionFunction0);
        org.junit.Assert.assertNotNull(keyException6);
        org.junit.Assert.assertNotNull(keyException9);
        org.junit.Assert.assertNotNull(keyExceptionFunction10);
        org.junit.Assert.assertNotNull(keyException16);
        org.junit.Assert.assertNotNull(keyException19);
        org.junit.Assert.assertNotNull(keyException25);
        org.junit.Assert.assertNotNull(keyException26);
        org.junit.Assert.assertNotNull(keyExceptionFunction27);
        org.junit.Assert.assertNotNull(keyException33);
        org.junit.Assert.assertNotNull(keyException36);
        org.junit.Assert.assertNotNull(keyException37);
    }

    @Test
    public void test6142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6142");
        int[] intArray6 = new int[] { 3600000, 3600000, 256, 21, (byte) 100, (short) -1 };
        java.util.stream.IntStream intStream7 = java.util.stream.IntStream.of(intArray6);
        java.util.PrimitiveIterator.OfInt ofInt8 = intStream7.iterator();
        java.util.stream.IntStream intStream9 = intStream7.parallel();
        java.util.function.IntUnaryOperator intUnaryOperator10 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.IntStream intStream11 = intStream9.map(intUnaryOperator10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[3600000, 3600000, 256, 21, 100, -1]");
        org.junit.Assert.assertNotNull(intStream7);
        org.junit.Assert.assertNotNull(ofInt8);
        org.junit.Assert.assertNotNull(intStream9);
    }

    @Test
    public void test6143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6143");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 3, chronology1);
        org.joda.time.DateTime.Property property3 = dateTime2.dayOfYear();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight((java.lang.Object) dateTime2, chronology4);
        org.joda.time.DateMidnight.Property property6 = dateMidnight5.dayOfMonth();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 3, chronology8);
        org.joda.time.DateTime.Property property10 = dateTime9.dayOfYear();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight((java.lang.Object) dateTime9, chronology11);
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight12.minusMonths((-1));
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight12.withDayOfYear((int) ' ');
        org.joda.time.Weeks weeks17 = org.joda.time.Weeks.weeksBetween((org.joda.time.ReadableInstant) dateMidnight5, (org.joda.time.ReadableInstant) dateMidnight16);
        org.joda.time.DateMidnight.Property property18 = dateMidnight5.year();
        org.joda.time.DateMidnight.Property property19 = dateMidnight5.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime20 = org.joda.time.LocalDateTime.now();
        int int21 = property19.compareTo((org.joda.time.ReadablePartial) localDateTime20);
        org.joda.time.DateMidnight dateMidnight22 = property19.roundFloorCopy();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) 3, chronology24);
        org.joda.time.DateTime.Property property26 = dateTime25.dayOfYear();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.DateMidnight dateMidnight28 = new org.joda.time.DateMidnight((java.lang.Object) dateTime25, chronology27);
        org.joda.time.MutableDateTime mutableDateTime29 = dateTime25.toMutableDateTime();
        mutableDateTime29.addYears((int) (short) 100);
        org.joda.time.MutableDateTime.Property property32 = mutableDateTime29.millisOfDay();
        org.joda.time.PeriodType periodType33 = org.joda.time.PeriodType.years();
        org.joda.time.DurationFieldType durationFieldType34 = org.joda.time.DurationFieldType.halfdays();
        int int35 = periodType33.indexOf(durationFieldType34);
        mutableDateTime29.add(durationFieldType34, (int) 'a');
        org.joda.time.MutableDateTime.Property property38 = mutableDateTime29.millisOfSecond();
        org.joda.time.MutableDateTime mutableDateTime39 = property38.roundHalfFloor();
        org.joda.time.DateMidnight dateMidnight41 = new org.joda.time.DateMidnight((long) (short) 100);
        mutableDateTime39.setDate((org.joda.time.ReadableInstant) dateMidnight41);
        java.util.GregorianCalendar gregorianCalendar48 = new java.util.GregorianCalendar(12, 4096, 7, (-1), (int) (short) 10);
        int int49 = gregorianCalendar48.getWeeksInWeekYear();
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.LocalDateTime localDateTime51 = new org.joda.time.LocalDateTime(chronology50);
        org.joda.time.DateTimeFieldType dateTimeFieldType52 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.LocalDateTime localDateTime54 = localDateTime51.withField(dateTimeFieldType52, (int) 'a');
        boolean boolean55 = gregorianCalendar48.before((java.lang.Object) dateTimeFieldType52);
        org.joda.time.MutableDateTime.Property property56 = mutableDateTime39.property(dateTimeFieldType52);
        org.joda.time.DateMidnight dateMidnight58 = dateMidnight22.withField(dateTimeFieldType52, 28);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(weeks17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(mutableDateTime29);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(periodType33);
        org.junit.Assert.assertNotNull(durationFieldType34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(mutableDateTime39);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 52 + "'", int49 == 52);
        org.junit.Assert.assertNotNull(dateTimeFieldType52);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(dateMidnight58);
    }

    @Test
    public void test6144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6144");
        java.util.concurrent.TimeUnit timeUnit1 = java.util.concurrent.TimeUnit.NANOSECONDS;
        long long3 = timeUnit1.toMinutes((long) '4');
        java.nio.file.attribute.FileTime fileTime4 = java.nio.file.attribute.FileTime.from((long) 10, timeUnit1);
        timeUnit1.sleep(3L);
        long long8 = timeUnit1.toMicros((long) 366);
        long long10 = timeUnit1.toHours((long) 2022);
        org.junit.Assert.assertNotNull(timeUnit1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(fileTime4);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
    }

    @Test
    public void test6145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6145");
        java.util.GregorianCalendar gregorianCalendar5 = new java.util.GregorianCalendar(12, 4096, 7, (-1), (int) (short) 10);
        int int6 = gregorianCalendar5.getWeeksInWeekYear();
        java.util.TimeZone timeZone7 = gregorianCalendar5.getTimeZone();
        java.lang.String str8 = timeZone7.getID();
        java.time.ZoneId zoneId9 = timeZone7.toZoneId();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone7);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 52 + "'", int6 == 52);
        org.junit.Assert.assertNotNull(timeZone7);
        org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Etc/UTC" + "'", str8, "Etc/UTC");
        org.junit.Assert.assertNotNull(zoneId9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
    }

    @Test
    public void test6146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6146");
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.Duration duration4 = new org.joda.time.Duration(readableInstant2, readableInstant3);
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.PeriodType periodType6 = null;
        org.joda.time.Period period7 = duration4.toPeriodTo(readableInstant5, periodType6);
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.Duration duration10 = new org.joda.time.Duration(readableInstant8, readableInstant9);
        long long11 = duration10.getMillis();
        boolean boolean12 = duration4.isShorterThan((org.joda.time.ReadableDuration) duration10);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) 3, chronology14);
        org.joda.time.DateTime.Property property16 = dateTime15.dayOfYear();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight((java.lang.Object) dateTime15, chronology17);
        org.joda.time.MutableDateTime mutableDateTime19 = dateTime15.toMutableDateTime();
        mutableDateTime19.addYears((int) (short) 100);
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime19.dayOfWeek();
        org.joda.time.MutableDateTime.Property property23 = mutableDateTime19.year();
        org.joda.time.MutableDateTime.Property property24 = mutableDateTime19.weekyear();
        boolean boolean25 = duration4.equals((java.lang.Object) mutableDateTime19);
        mutableDateTime19.addMonths((int) ' ');
        mutableDateTime19.add((long) (byte) 10);
        org.joda.time.Period period30 = org.joda.time.Period.ZERO;
        org.joda.time.Period period31 = period30.normalizedStandard();
        org.joda.time.Period period33 = period30.plusHours(2);
        java.time.chrono.IsoEra isoEra34 = java.time.chrono.IsoEra.CE;
        boolean boolean35 = period33.equals((java.lang.Object) isoEra34);
        int int36 = period33.getMinutes();
        mutableDateTime19.add((org.joda.time.ReadablePeriod) period33);
        java.util.TimeZone timeZone39 = null;
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forTimeZone(timeZone39);
        org.joda.time.DateMidnight dateMidnight41 = new org.joda.time.DateMidnight((long) 1970, dateTimeZone40);
        long long44 = dateTimeZone40.convertLocalToUTC((long) 3, false);
        long long47 = dateTimeZone40.convertLocalToUTC(0L, true);
        mutableDateTime19.setZoneRetainFields(dateTimeZone40);
        java.lang.String str49 = dateTimeZone40.toString();
        org.joda.time.chrono.EthiopicChronology ethiopicChronology50 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone40);
        org.joda.time.DateTimeField dateTimeField51 = ethiopicChronology50.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone52 = ethiopicChronology50.getZone();
        org.joda.time.DateTimeField dateTimeField53 = ethiopicChronology50.era();
        org.joda.time.DateTimeField dateTimeField54 = ethiopicChronology50.weekOfWeekyear();
        org.joda.time.MutableInterval mutableInterval55 = new org.joda.time.MutableInterval((long) 16, (long) 97, (org.joda.time.Chronology) ethiopicChronology50);
        org.joda.time.DateTimeField dateTimeField56 = ethiopicChronology50.dayOfWeek();
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(mutableDateTime19);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertTrue("'" + isoEra34 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra34.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 3L + "'", long44 == 3L);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "Etc/UTC" + "'", str49, "Etc/UTC");
        org.junit.Assert.assertNotNull(ethiopicChronology50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(dateTimeField56);
    }

    @Test
    public void test6147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6147");
        java.util.GregorianCalendar gregorianCalendar5 = new java.util.GregorianCalendar(12, 4096, 7, (-1), (int) (short) 10);
        gregorianCalendar5.set((int) ':', 3, 256, 5, 17, 3600000);
        int int13 = gregorianCalendar5.getWeekYear();
        int int14 = gregorianCalendar5.getFirstDayOfWeek();
        java.util.function.UnaryOperator<java.util.GregorianCalendar> gregorianCalendarUnaryOperator15 = java.util.function.UnaryOperator.identity();
        java.util.stream.Stream<java.util.GregorianCalendar> gregorianCalendarStream16 = java.util.stream.Stream.iterate(gregorianCalendar5, gregorianCalendarUnaryOperator15);
        java.lang.String str17 = gregorianCalendar5.toString();
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 59 + "'", int13 == 59);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(gregorianCalendarUnaryOperator15);
        org.junit.Assert.assertNotNull(gregorianCalendarStream16);
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "java.util.GregorianCalendar[time=-60303580980035,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=35,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=59,MONTH=0,WEEK_OF_YEAR=4,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=22,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=4,AM_PM=1,HOUR=9,HOUR_OF_DAY=21,MINUTE=17,SECOND=0,MILLISECOND=0,ZONE_OFFSET=35,DST_OFFSET=0]" + "'", str17, "java.util.GregorianCalendar[time=-60303580980035,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=35,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=59,MONTH=0,WEEK_OF_YEAR=4,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=22,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=4,AM_PM=1,HOUR=9,HOUR_OF_DAY=21,MINUTE=17,SECOND=0,MILLISECOND=0,ZONE_OFFSET=35,DST_OFFSET=0]");
    }

    @Test
    public void test6148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6148");
        java.net.InetAddress inetAddress0 = java.net.InetAddress.getLocalHost();
        java.lang.String str1 = inetAddress0.toString();
        java.net.NetworkInterface networkInterface2 = java.net.NetworkInterface.getByInetAddress(inetAddress0);
        java.util.List<java.net.InterfaceAddress> interfaceAddressList3 = networkInterface2.getInterfaceAddresses();
        boolean boolean4 = networkInterface2.supportsMulticast();
        boolean boolean5 = networkInterface2.isPointToPoint();
        boolean boolean6 = networkInterface2.isVirtual();
        java.net.NetworkInterface networkInterface7 = networkInterface2.getParent();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Enumeration<java.net.NetworkInterface> networkInterfaceEnumeration8 = networkInterface7.getSubInterfaces();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(inetAddress0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "599b081c1808/172.17.0.2" + "'", str1, "599b081c1808/172.17.0.2");
        org.junit.Assert.assertNotNull(networkInterface2);
        org.junit.Assert.assertNotNull(interfaceAddressList3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(networkInterface7);
    }

    @Test
    public void test6149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6149");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.LocalTime localTime4 = new org.joda.time.LocalTime((long) 0, chronology3);
        org.joda.time.Chronology chronology5 = localTime4.getChronology();
        java.util.Locale locale6 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale locale7 = java.util.Locale.GERMANY;
        java.lang.String str8 = locale6.getDisplayScript(locale7);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket10 = new org.joda.time.format.DateTimeParserBucket((long) 1970, chronology5, locale6, (java.lang.Integer) 1);
        org.joda.time.DateTimeField dateTimeField11 = chronology5.clockhourOfDay();
        org.joda.time.Period period16 = new org.joda.time.Period((int) '#', 0, 2, (int) (short) 100);
        org.joda.time.Period period18 = period16.withSeconds(12);
        int int19 = period18.getMillis();
        int[] intArray21 = chronology5.get((org.joda.time.ReadablePeriod) period18, (long) (byte) 10);
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((long) 2147483647, chronology5);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) 3, chronology24);
        org.joda.time.DateTime.Property property26 = dateTime25.dayOfYear();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.DateMidnight dateMidnight28 = new org.joda.time.DateMidnight((java.lang.Object) dateTime25, chronology27);
        org.joda.time.MutableDateTime mutableDateTime29 = dateTime25.toMutableDateTime();
        mutableDateTime29.addYears((int) (short) 100);
        org.joda.time.MutableDateTime.Property property32 = mutableDateTime29.dayOfWeek();
        org.joda.time.MutableDateTime.Property property33 = mutableDateTime29.year();
        java.util.TimeZone timeZone34 = null;
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forTimeZone(timeZone34);
        mutableDateTime29.setZone(dateTimeZone35);
        java.util.TimeZone timeZone37 = dateTimeZone35.toTimeZone();
        org.joda.time.DateTime dateTime38 = dateTime22.toDateTime(dateTimeZone35);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 100 + "'", int19 == 100);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[0, 0, 0, 0, 0, 0, 0, 10]");
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(mutableDateTime29);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(timeZone37);
        org.junit.Assert.assertEquals(timeZone37.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTime38);
    }

    @Test
    public void test6150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6150");
        java.time.OffsetTime offsetTime0 = java.time.OffsetTime.MAX;
        java.time.LocalTime localTime1 = offsetTime0.toLocalTime();
        java.time.OffsetTime offsetTime2 = java.time.OffsetTime.MAX;
        java.time.LocalTime localTime3 = offsetTime2.toLocalTime();
        java.lang.String str4 = offsetTime2.toString();
        java.time.Duration duration5 = java.time.Duration.ZERO;
        java.lang.String str6 = duration5.toString();
        java.time.OffsetTime offsetTime7 = offsetTime2.plus((java.time.temporal.TemporalAmount) duration5);
        java.time.OffsetTime offsetTime9 = offsetTime2.plusNanos((long) 0);
        java.time.LocalTime localTime14 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime15 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime14);
        java.time.temporal.ChronoField chronoField16 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime18 = localTime14.with((java.time.temporal.TemporalField) chronoField16, (long) (short) 1);
        java.util.Locale locale19 = java.util.Locale.GERMANY;
        java.lang.String str20 = chronoField16.getDisplayName(locale19);
        java.time.OffsetTime offsetTime22 = offsetTime9.with((java.time.temporal.TemporalField) chronoField16, (long) 28);
        long long23 = localTime1.getLong((java.time.temporal.TemporalField) chronoField16);
        java.time.LocalTime localTime25 = localTime1.plusHours((long) 36);
        java.time.LocalDateTime localDateTime26 = java.time.LocalDateTime.now();
        java.time.LocalTime localTime27 = localDateTime26.toLocalTime();
        java.time.chrono.Chronology chronology28 = localDateTime26.getChronology();
        java.time.LocalDateTime localDateTime29 = java.time.LocalDateTime.now();
        java.time.LocalTime localTime30 = localDateTime29.toLocalTime();
        java.time.LocalDateTime localDateTime32 = localDateTime29.withDayOfMonth(10);
        java.time.format.DateTimeFormatter dateTimeFormatter33 = java.time.format.DateTimeFormatter.ISO_LOCAL_DATE_TIME;
        java.time.ZoneOffset zoneOffset36 = java.time.ZoneOffset.ofHoursMinutes(1, 10);
        java.time.LocalDate localDate37 = java.time.LocalDate.now((java.time.ZoneId) zoneOffset36);
        java.time.LocalDate localDate38 = java.time.LocalDate.now((java.time.ZoneId) zoneOffset36);
        java.time.format.DateTimeFormatter dateTimeFormatter39 = dateTimeFormatter33.withZone((java.time.ZoneId) zoneOffset36);
        long long40 = localDateTime32.toEpochSecond(zoneOffset36);
        java.time.chrono.ChronoLocalDate chronoLocalDate41 = chronology28.dateNow((java.time.ZoneId) zoneOffset36);
        java.time.OffsetTime offsetTime42 = localTime25.atOffset(zoneOffset36);
        java.time.LocalDate localDate44 = java.time.LocalDate.ofEpochDay((long) ' ');
        java.time.OffsetTime offsetTime45 = java.time.OffsetTime.MAX;
        java.time.LocalTime localTime46 = offsetTime45.toLocalTime();
        java.lang.String str47 = offsetTime45.toString();
        java.time.Duration duration48 = java.time.Duration.ZERO;
        java.lang.String str49 = duration48.toString();
        java.time.OffsetTime offsetTime50 = offsetTime45.plus((java.time.temporal.TemporalAmount) duration48);
        java.time.LocalTime localTime51 = offsetTime45.toLocalTime();
        java.time.chrono.ChronoLocalDateTime<?> wildcardChronoLocalDateTime52 = localDate44.atTime(localTime51);
        boolean boolean53 = localTime25.equals((java.lang.Object) localDate44);
        java.time.format.DateTimeFormatter dateTimeFormatter54 = java.time.format.DateTimeFormatter.ISO_DATE;
        java.text.Format format55 = dateTimeFormatter54.toFormat();
        java.util.function.Predicate<org.joda.time.LocalDateTime> localDateTimePredicate56 = java.util.function.Predicate.isEqual((java.lang.Object) dateTimeFormatter54);
        java.lang.String str57 = localDate44.format(dateTimeFormatter54);
        org.junit.Assert.assertNotNull(offsetTime0);
        org.junit.Assert.assertNotNull(localTime1);
        org.junit.Assert.assertNotNull(offsetTime2);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "23:59:59.999999999-18:00" + "'", str4, "23:59:59.999999999-18:00");
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "PT0S" + "'", str6, "PT0S");
        org.junit.Assert.assertNotNull(offsetTime7);
        org.junit.Assert.assertNotNull(offsetTime9);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertTrue("'" + chronoField16 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField16.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "NanoOfDay" + "'", str20, "NanoOfDay");
        org.junit.Assert.assertNotNull(offsetTime22);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 86399999999999L + "'", long23 == 86399999999999L);
        org.junit.Assert.assertNotNull(localTime25);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localTime27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localTime30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(dateTimeFormatter33);
        org.junit.Assert.assertNotNull(zoneOffset36);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertNotNull(dateTimeFormatter39);
// flaky:         org.junit.Assert.assertTrue("'" + long40 + "' != '" + 1644481970L + "'", long40 == 1644481970L);
        org.junit.Assert.assertNotNull(chronoLocalDate41);
        org.junit.Assert.assertNotNull(offsetTime42);
        org.junit.Assert.assertNotNull(localDate44);
        org.junit.Assert.assertNotNull(offsetTime45);
        org.junit.Assert.assertNotNull(localTime46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "23:59:59.999999999-18:00" + "'", str47, "23:59:59.999999999-18:00");
        org.junit.Assert.assertNotNull(duration48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "PT0S" + "'", str49, "PT0S");
        org.junit.Assert.assertNotNull(offsetTime50);
        org.junit.Assert.assertNotNull(localTime51);
        org.junit.Assert.assertNotNull(wildcardChronoLocalDateTime52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter54);
        org.junit.Assert.assertNotNull(format55);
        org.junit.Assert.assertNotNull(localDateTimePredicate56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "1970-02-02" + "'", str57, "1970-02-02");
    }

    @Test
    public void test6151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6151");
        java.net.InetAddress inetAddress0 = java.net.InetAddress.getLocalHost();
        boolean boolean1 = inetAddress0.isMCOrgLocal();
        float[] floatArray4 = new float[] { (-1L), (byte) -1 };
        java.nio.FloatBuffer floatBuffer5 = java.nio.FloatBuffer.wrap(floatArray4);
        boolean boolean6 = inetAddress0.equals((java.lang.Object) floatBuffer5);
        java.time.OffsetTime offsetTime7 = java.time.OffsetTime.MAX;
        java.time.LocalTime localTime8 = offsetTime7.toLocalTime();
        java.lang.String str9 = offsetTime7.toString();
        java.time.Duration duration10 = java.time.Duration.ZERO;
        java.lang.String str11 = duration10.toString();
        java.time.OffsetTime offsetTime12 = offsetTime7.plus((java.time.temporal.TemporalAmount) duration10);
        java.time.OffsetTime offsetTime14 = offsetTime7.withHour((int) (short) 1);
        boolean boolean15 = inetAddress0.equals((java.lang.Object) offsetTime7);
        java.time.LocalDate localDate17 = java.time.LocalDate.ofEpochDay((long) ' ');
        java.time.OffsetTime offsetTime18 = java.time.OffsetTime.MAX;
        java.time.LocalTime localTime19 = offsetTime18.toLocalTime();
        java.lang.String str20 = offsetTime18.toString();
        java.time.Duration duration21 = java.time.Duration.ZERO;
        java.lang.String str22 = duration21.toString();
        java.time.OffsetTime offsetTime23 = offsetTime18.plus((java.time.temporal.TemporalAmount) duration21);
        java.time.LocalTime localTime24 = offsetTime18.toLocalTime();
        java.time.chrono.ChronoLocalDateTime<?> wildcardChronoLocalDateTime25 = localDate17.atTime(localTime24);
        java.time.LocalDate localDate27 = localDate17.minusWeeks((long) 2097);
        java.time.OffsetTime offsetTime28 = java.time.OffsetTime.MAX;
        java.time.LocalTime localTime29 = offsetTime28.toLocalTime();
        java.lang.String str30 = offsetTime28.toString();
        java.time.Duration duration31 = java.time.Duration.ZERO;
        java.lang.String str32 = duration31.toString();
        java.time.OffsetTime offsetTime33 = offsetTime28.plus((java.time.temporal.TemporalAmount) duration31);
        java.time.OffsetTime offsetTime35 = offsetTime28.plusNanos((long) 0);
        java.time.LocalTime localTime40 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime41 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime40);
        java.time.temporal.ChronoField chronoField42 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime44 = localTime40.with((java.time.temporal.TemporalField) chronoField42, (long) (short) 1);
        java.util.Locale locale45 = java.util.Locale.GERMANY;
        java.lang.String str46 = chronoField42.getDisplayName(locale45);
        java.time.OffsetTime offsetTime48 = offsetTime35.with((java.time.temporal.TemporalField) chronoField42, (long) 28);
        java.time.OffsetDateTime offsetDateTime49 = localDate27.atTime(offsetTime35);
        java.time.LocalDate localDate51 = localDate27.withDayOfYear(28);
        java.time.OffsetDateTime offsetDateTime52 = offsetTime7.atDate(localDate51);
        java.time.OffsetDateTime offsetDateTime54 = offsetDateTime52.withMinute(14);
        java.time.OffsetDateTime offsetDateTime56 = offsetDateTime54.plusSeconds(49593600558L);
        org.junit.Assert.assertNotNull(inetAddress0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(floatArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray4), "[-1.0, -1.0]");
        org.junit.Assert.assertNotNull(floatBuffer5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(offsetTime7);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "23:59:59.999999999-18:00" + "'", str9, "23:59:59.999999999-18:00");
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "PT0S" + "'", str11, "PT0S");
        org.junit.Assert.assertNotNull(offsetTime12);
        org.junit.Assert.assertNotNull(offsetTime14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(offsetTime18);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "23:59:59.999999999-18:00" + "'", str20, "23:59:59.999999999-18:00");
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "PT0S" + "'", str22, "PT0S");
        org.junit.Assert.assertNotNull(offsetTime23);
        org.junit.Assert.assertNotNull(localTime24);
        org.junit.Assert.assertNotNull(wildcardChronoLocalDateTime25);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(offsetTime28);
        org.junit.Assert.assertNotNull(localTime29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "23:59:59.999999999-18:00" + "'", str30, "23:59:59.999999999-18:00");
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "PT0S" + "'", str32, "PT0S");
        org.junit.Assert.assertNotNull(offsetTime33);
        org.junit.Assert.assertNotNull(offsetTime35);
        org.junit.Assert.assertNotNull(localTime40);
        org.junit.Assert.assertNotNull(localTime41);
        org.junit.Assert.assertTrue("'" + chronoField42 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField42.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime44);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "NanoOfDay" + "'", str46, "NanoOfDay");
        org.junit.Assert.assertNotNull(offsetTime48);
        org.junit.Assert.assertNotNull(offsetDateTime49);
        org.junit.Assert.assertNotNull(localDate51);
        org.junit.Assert.assertNotNull(offsetDateTime52);
        org.junit.Assert.assertNotNull(offsetDateTime54);
        org.junit.Assert.assertNotNull(offsetDateTime56);
    }

    @Test
    public void test6152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6152");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.Duration duration2 = new org.joda.time.Duration(readableInstant0, readableInstant1);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = duration2.toPeriodTo(readableInstant3, periodType4);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.Duration duration8 = new org.joda.time.Duration(readableInstant6, readableInstant7);
        long long9 = duration8.getMillis();
        boolean boolean10 = duration2.isShorterThan((org.joda.time.ReadableDuration) duration8);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) 3, chronology12);
        org.joda.time.DateTime.Property property14 = dateTime13.dayOfYear();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight((java.lang.Object) dateTime13, chronology15);
        org.joda.time.MutableDateTime mutableDateTime17 = dateTime13.toMutableDateTime();
        mutableDateTime17.addYears((int) (short) 100);
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime17.dayOfWeek();
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime17.year();
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime17.weekyear();
        boolean boolean23 = duration2.equals((java.lang.Object) mutableDateTime17);
        mutableDateTime17.addMonths((int) ' ');
        mutableDateTime17.add((long) (byte) 10);
        org.joda.time.Period period28 = org.joda.time.Period.ZERO;
        org.joda.time.Period period29 = period28.normalizedStandard();
        org.joda.time.Period period31 = period28.plusHours(2);
        java.time.chrono.IsoEra isoEra32 = java.time.chrono.IsoEra.CE;
        boolean boolean33 = period31.equals((java.lang.Object) isoEra32);
        int int34 = period31.getMinutes();
        mutableDateTime17.add((org.joda.time.ReadablePeriod) period31);
        java.util.TimeZone timeZone37 = null;
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forTimeZone(timeZone37);
        org.joda.time.DateMidnight dateMidnight39 = new org.joda.time.DateMidnight((long) 1970, dateTimeZone38);
        long long42 = dateTimeZone38.convertLocalToUTC((long) 3, false);
        long long45 = dateTimeZone38.convertLocalToUTC(0L, true);
        mutableDateTime17.setZoneRetainFields(dateTimeZone38);
        java.lang.String str47 = dateTimeZone38.toString();
        org.joda.time.chrono.EthiopicChronology ethiopicChronology48 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone38);
        org.joda.time.DateTimeField dateTimeField49 = ethiopicChronology48.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone50 = ethiopicChronology48.getZone();
        org.joda.time.DateTimeField dateTimeField51 = ethiopicChronology48.era();
        org.joda.time.DurationField durationField52 = ethiopicChronology48.eras();
        org.joda.time.DateTimeField dateTimeField53 = ethiopicChronology48.yearOfCentury();
        org.joda.time.Chronology chronology54 = ethiopicChronology48.withUTC();
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertTrue("'" + isoEra32 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra32.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 3L + "'", long42 == 3L);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Etc/UTC" + "'", str47, "Etc/UTC");
        org.junit.Assert.assertNotNull(ethiopicChronology48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(durationField52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(chronology54);
    }

    @Test
    public void test6153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6153");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 3, chronology1);
        org.joda.time.DateTime.Property property3 = dateTime2.dayOfYear();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight((java.lang.Object) dateTime2, chronology4);
        org.joda.time.MutableDateTime mutableDateTime6 = dateTime2.toMutableDateTime();
        mutableDateTime6.addYears((int) (short) 100);
        mutableDateTime6.setMillis((long) 21);
        org.joda.time.MutableDateTime.Property property11 = mutableDateTime6.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime12 = property11.roundHalfCeiling();
        java.time.LocalTime localTime17 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime18 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime17);
        long long19 = localTime18.toNanoOfDay();
        java.util.GregorianCalendar gregorianCalendar25 = new java.util.GregorianCalendar(12, 4096, 7, (-1), (int) (short) 10);
        int int26 = gregorianCalendar25.getWeeksInWeekYear();
        java.lang.String str27 = gregorianCalendar25.getCalendarType();
        java.time.ZonedDateTime zonedDateTime28 = gregorianCalendar25.toZonedDateTime();
        java.time.ZonedDateTime zonedDateTime30 = zonedDateTime28.minusMonths((long) 10);
        java.time.temporal.Temporal temporal31 = localTime18.adjustInto((java.time.temporal.Temporal) zonedDateTime30);
        boolean boolean32 = mutableDateTime12.equals((java.lang.Object) zonedDateTime30);
        java.time.ZonedDateTime zonedDateTime34 = zonedDateTime30.plusDays(11724424192L);
        java.time.ZonedDateTime zonedDateTime36 = zonedDateTime34.plusNanos((long) (short) -1);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 3601000000001L + "'", long19 == 3601000000001L);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 52 + "'", int26 == 52);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "gregory" + "'", str27, "gregory");
        org.junit.Assert.assertNotNull(zonedDateTime28);
        org.junit.Assert.assertNotNull(zonedDateTime30);
        org.junit.Assert.assertNotNull(temporal31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(zonedDateTime34);
        org.junit.Assert.assertNotNull(zonedDateTime36);
    }

    @Test
    public void test6154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6154");
        java.net.URLConnection.setDefaultRequestProperty("2000-02-21T09:37:03.012", "2022-02-21T09:36:33.209");
    }

    @Test
    public void test6155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6155");
        java.time.format.DateTimeFormatter dateTimeFormatter0 = java.time.format.DateTimeFormatter.ISO_DATE_TIME;
        java.util.GregorianCalendar gregorianCalendar6 = new java.util.GregorianCalendar(12, 4096, 7, (-1), (int) (short) 10);
        int int7 = gregorianCalendar6.getWeeksInWeekYear();
        java.lang.String str8 = gregorianCalendar6.getCalendarType();
        java.time.ZonedDateTime zonedDateTime9 = gregorianCalendar6.toZonedDateTime();
        java.util.GregorianCalendar gregorianCalendar15 = new java.util.GregorianCalendar(12, 4096, 7, (-1), (int) (short) 10);
        int int16 = gregorianCalendar15.getWeeksInWeekYear();
        java.lang.String str17 = gregorianCalendar15.getCalendarType();
        java.time.ZonedDateTime zonedDateTime18 = gregorianCalendar15.toZonedDateTime();
        int int19 = zonedDateTime9.compareTo((java.time.chrono.ChronoZonedDateTime<java.time.LocalDate>) zonedDateTime18);
        java.time.ZonedDateTime zonedDateTime21 = zonedDateTime9.plusDays((long) 2022);
        java.time.Instant instant22 = zonedDateTime9.toInstant();
        java.time.chrono.Chronology chronology23 = zonedDateTime9.getChronology();
        java.time.format.DateTimeFormatter dateTimeFormatter24 = dateTimeFormatter0.withChronology(chronology23);
        java.time.OffsetTime offsetTime25 = java.time.OffsetTime.MAX;
        java.time.LocalTime localTime26 = offsetTime25.toLocalTime();
        java.time.chrono.Chronology chronology27 = java.time.chrono.Chronology.from((java.time.temporal.TemporalAccessor) localTime26);
        java.time.format.DateTimeFormatter dateTimeFormatter28 = dateTimeFormatter0.withChronology(chronology27);
        java.time.format.DateTimeFormatter dateTimeFormatter29 = java.time.format.DateTimeFormatter.ISO_WEEK_DATE;
        java.time.Instant instant30 = java.time.Instant.now();
        java.time.OffsetDateTime offsetDateTime31 = java.time.OffsetDateTime.now();
        java.time.temporal.ChronoField chronoField32 = java.time.temporal.ChronoField.HOUR_OF_DAY;
        boolean boolean33 = offsetDateTime31.isSupported((java.time.temporal.TemporalField) chronoField32);
        java.time.Month month34 = offsetDateTime31.getMonth();
        java.time.ZoneOffset zoneOffset37 = java.time.ZoneOffset.ofHoursMinutes(1, 10);
        java.time.LocalDate localDate38 = java.time.LocalDate.now((java.time.ZoneId) zoneOffset37);
        java.time.Clock clock39 = java.time.Clock.system((java.time.ZoneId) zoneOffset37);
        java.time.Duration duration41 = java.time.Duration.ofSeconds((long) 0);
        java.time.Duration duration43 = duration41.multipliedBy((long) (byte) -1);
        java.time.Clock clock44 = java.time.Clock.offset(clock39, duration41);
        java.time.OffsetDateTime offsetDateTime45 = offsetDateTime31.plus((java.time.temporal.TemporalAmount) duration41);
        java.time.Instant instant46 = offsetDateTime31.toInstant();
        boolean boolean47 = instant30.isAfter(instant46);
        java.util.GregorianCalendar gregorianCalendar53 = new java.util.GregorianCalendar(12, 4096, 7, (-1), (int) (short) 10);
        int int54 = gregorianCalendar53.getWeeksInWeekYear();
        java.lang.String str55 = gregorianCalendar53.getCalendarType();
        java.time.ZonedDateTime zonedDateTime56 = gregorianCalendar53.toZonedDateTime();
        java.time.ZonedDateTime zonedDateTime58 = zonedDateTime56.minusMonths((long) 10);
        java.time.ZonedDateTime zonedDateTime60 = zonedDateTime58.minusHours((long) 9);
        java.time.LocalTime localTime65 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime66 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime65);
        java.time.LocalTime localTime71 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime72 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime71);
        java.time.temporal.ChronoField chronoField73 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime75 = localTime71.with((java.time.temporal.TemporalField) chronoField73, (long) (short) 1);
        long long76 = localTime65.getLong((java.time.temporal.TemporalField) chronoField73);
        java.time.LocalTime localTime78 = localTime65.withSecond((int) (short) 1);
        int int79 = localTime78.getMinute();
        java.time.LocalTime localTime81 = localTime78.plusHours((long) (-1));
        java.time.LocalDateTime localDateTime82 = java.time.LocalDateTime.now();
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery83 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period84 = localDateTime82.query(periodTemporalQuery83);
        java.time.Period period85 = localTime81.query(periodTemporalQuery83);
        java.time.Period period86 = zonedDateTime60.query(periodTemporalQuery83);
        java.time.Period period87 = instant46.query(periodTemporalQuery83);
        java.text.Format format88 = dateTimeFormatter29.toFormat(periodTemporalQuery83);
        java.time.temporal.TemporalField[] temporalFieldArray89 = new java.time.temporal.TemporalField[] {};
        java.time.format.DateTimeFormatter dateTimeFormatter90 = dateTimeFormatter29.withResolverFields(temporalFieldArray89);
        java.time.format.DateTimeFormatter dateTimeFormatter91 = dateTimeFormatter28.withResolverFields(temporalFieldArray89);
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "gregory" + "'", str8, "gregory");
        org.junit.Assert.assertNotNull(zonedDateTime9);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 52 + "'", int16 == 52);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "gregory" + "'", str17, "gregory");
        org.junit.Assert.assertNotNull(zonedDateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(zonedDateTime21);
        org.junit.Assert.assertNotNull(instant22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeFormatter24);
        org.junit.Assert.assertNotNull(offsetTime25);
        org.junit.Assert.assertNotNull(localTime26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeFormatter28);
        org.junit.Assert.assertNotNull(dateTimeFormatter29);
        org.junit.Assert.assertNotNull(instant30);
        org.junit.Assert.assertNotNull(offsetDateTime31);
        org.junit.Assert.assertTrue("'" + chronoField32 + "' != '" + java.time.temporal.ChronoField.HOUR_OF_DAY + "'", chronoField32.equals(java.time.temporal.ChronoField.HOUR_OF_DAY));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + month34 + "' != '" + java.time.Month.FEBRUARY + "'", month34.equals(java.time.Month.FEBRUARY));
        org.junit.Assert.assertNotNull(zoneOffset37);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertNotNull(clock39);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(clock44);
        org.junit.Assert.assertNotNull(offsetDateTime45);
        org.junit.Assert.assertNotNull(instant46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 52 + "'", int54 == 52);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "gregory" + "'", str55, "gregory");
        org.junit.Assert.assertNotNull(zonedDateTime56);
        org.junit.Assert.assertNotNull(zonedDateTime58);
        org.junit.Assert.assertNotNull(zonedDateTime60);
        org.junit.Assert.assertNotNull(localTime65);
        org.junit.Assert.assertNotNull(localTime66);
        org.junit.Assert.assertNotNull(localTime71);
        org.junit.Assert.assertNotNull(localTime72);
        org.junit.Assert.assertTrue("'" + chronoField73 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField73.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime75);
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + 3601000000001L + "'", long76 == 3601000000001L);
        org.junit.Assert.assertNotNull(localTime78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertNotNull(localTime81);
        org.junit.Assert.assertNotNull(localDateTime82);
        org.junit.Assert.assertNotNull(periodTemporalQuery83);
        org.junit.Assert.assertNotNull(period84);
        org.junit.Assert.assertNotNull(period85);
        org.junit.Assert.assertNotNull(period86);
        org.junit.Assert.assertNotNull(period87);
        org.junit.Assert.assertNotNull(format88);
        org.junit.Assert.assertNotNull(temporalFieldArray89);
        org.junit.Assert.assertNotNull(dateTimeFormatter90);
        org.junit.Assert.assertNotNull(dateTimeFormatter91);
    }

    @Test
    public void test6156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6156");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes2 = minutes0.minus(12);
        org.joda.time.Minutes minutes3 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes5 = minutes3.minus(12);
        org.joda.time.Minutes minutes6 = minutes0.minus(minutes3);
        org.joda.time.DurationFieldType durationFieldType7 = minutes0.getFieldType();
        org.joda.time.Duration duration8 = minutes0.toStandardDuration();
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(minutes3);
        org.junit.Assert.assertNotNull(minutes5);
        org.junit.Assert.assertNotNull(minutes6);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertNotNull(duration8);
    }

    @Test
    public void test6157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6157");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 3, chronology1);
        org.joda.time.DateTime.Property property3 = dateTime2.dayOfYear();
        org.joda.time.Interval interval4 = property3.toInterval();
        org.joda.time.DateTimeField dateTimeField5 = property3.getField();
        org.joda.time.DateTime dateTime7 = property3.addWrapFieldToCopy(0);
        org.joda.time.DateTime dateTime9 = property3.setCopy(34);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) 3, chronology11);
        org.joda.time.DateTime.Property property13 = dateTime12.dayOfYear();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight((java.lang.Object) dateTime12, chronology14);
        org.joda.time.DateMidnight.Property property16 = dateMidnight15.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight17 = property16.roundCeilingCopy();
        org.joda.time.DateMidnight dateMidnight18 = property16.roundHalfFloorCopy();
        org.joda.time.Weeks weeks19 = org.joda.time.Weeks.weeksBetween((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateMidnight18);
        org.joda.time.DateTime dateTime21 = dateTime9.minusWeeks(16);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime23 = dateTime21.withSecondOfMinute(197);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 197 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertNotNull(weeks19);
        org.junit.Assert.assertNotNull(dateTime21);
    }

    @Test
    public void test6158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6158");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardDays((long) 20);
        org.joda.time.Seconds seconds2 = duration1.toStandardSeconds();
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.Duration duration5 = new org.joda.time.Duration(readableInstant3, readableInstant4);
        org.joda.time.Seconds seconds6 = duration5.toStandardSeconds();
        int int7 = seconds6.getSeconds();
        org.joda.time.Seconds seconds9 = seconds6.dividedBy(28);
        boolean boolean10 = seconds2.isLessThan(seconds6);
        org.joda.time.Seconds seconds12 = seconds6.minus(10);
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.Duration duration15 = new org.joda.time.Duration(readableInstant13, readableInstant14);
        org.joda.time.Seconds seconds16 = duration15.toStandardSeconds();
        int int17 = seconds16.getSeconds();
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.Duration duration20 = new org.joda.time.Duration(readableInstant18, readableInstant19);
        org.joda.time.Seconds seconds21 = duration20.toStandardSeconds();
        int int22 = seconds21.getSeconds();
        org.joda.time.Seconds seconds24 = seconds21.dividedBy(28);
        boolean boolean25 = seconds16.isGreaterThan(seconds24);
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.Duration duration28 = new org.joda.time.Duration(readableInstant26, readableInstant27);
        org.joda.time.Seconds seconds29 = duration28.toStandardSeconds();
        int int30 = seconds29.getSeconds();
        org.joda.time.Seconds seconds32 = seconds29.dividedBy(28);
        org.joda.time.Seconds seconds33 = seconds32.negated();
        org.joda.time.Seconds seconds34 = seconds16.plus(seconds33);
        org.joda.time.Seconds seconds36 = seconds16.dividedBy(461);
        boolean boolean37 = seconds12.isGreaterThan(seconds36);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(seconds2);
        org.junit.Assert.assertNotNull(seconds6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(seconds9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(seconds12);
        org.junit.Assert.assertNotNull(seconds16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(seconds21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(seconds24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(seconds29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(seconds32);
        org.junit.Assert.assertNotNull(seconds33);
        org.junit.Assert.assertNotNull(seconds34);
        org.junit.Assert.assertNotNull(seconds36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test6159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6159");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((long) 0, chronology2);
        org.joda.time.Chronology chronology4 = localTime3.getChronology();
        java.util.Locale locale5 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale locale6 = java.util.Locale.GERMANY;
        java.lang.String str7 = locale5.getDisplayScript(locale6);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket9 = new org.joda.time.format.DateTimeParserBucket((long) 1970, chronology4, locale5, (java.lang.Integer) 1);
        org.joda.time.DateTimeField dateTimeField10 = chronology4.clockhourOfDay();
        org.joda.time.Period period15 = new org.joda.time.Period((int) '#', 0, 2, (int) (short) 100);
        org.joda.time.Period period17 = period15.withSeconds(12);
        int int18 = period17.getMillis();
        int[] intArray20 = chronology4.get((org.joda.time.ReadablePeriod) period17, (long) (byte) 10);
        int int21 = period17.getHours();
        int int22 = period17.getHours();
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 100 + "'", int18 == 100);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[0, 0, 0, 0, 0, 0, 0, 10]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 35 + "'", int21 == 35);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 35 + "'", int22 == 35);
    }

    @Test
    public void test6160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6160");
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.Duration duration3 = new org.joda.time.Duration(readableInstant1, readableInstant2);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.PeriodType periodType5 = null;
        org.joda.time.Period period6 = duration3.toPeriodTo(readableInstant4, periodType5);
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.Duration duration9 = new org.joda.time.Duration(readableInstant7, readableInstant8);
        long long10 = duration9.getMillis();
        boolean boolean11 = duration3.isShorterThan((org.joda.time.ReadableDuration) duration9);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) 3, chronology13);
        org.joda.time.DateTime.Property property15 = dateTime14.dayOfYear();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight((java.lang.Object) dateTime14, chronology16);
        org.joda.time.MutableDateTime mutableDateTime18 = dateTime14.toMutableDateTime();
        mutableDateTime18.addYears((int) (short) 100);
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime18.dayOfWeek();
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime18.year();
        org.joda.time.MutableDateTime.Property property23 = mutableDateTime18.weekyear();
        boolean boolean24 = duration3.equals((java.lang.Object) mutableDateTime18);
        mutableDateTime18.addMonths((int) ' ');
        mutableDateTime18.add((long) (byte) 10);
        org.joda.time.Period period29 = org.joda.time.Period.ZERO;
        org.joda.time.Period period30 = period29.normalizedStandard();
        org.joda.time.Period period32 = period29.plusHours(2);
        java.time.chrono.IsoEra isoEra33 = java.time.chrono.IsoEra.CE;
        boolean boolean34 = period32.equals((java.lang.Object) isoEra33);
        int int35 = period32.getMinutes();
        mutableDateTime18.add((org.joda.time.ReadablePeriod) period32);
        java.util.TimeZone timeZone38 = null;
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forTimeZone(timeZone38);
        org.joda.time.DateMidnight dateMidnight40 = new org.joda.time.DateMidnight((long) 1970, dateTimeZone39);
        long long43 = dateTimeZone39.convertLocalToUTC((long) 3, false);
        long long46 = dateTimeZone39.convertLocalToUTC(0L, true);
        mutableDateTime18.setZoneRetainFields(dateTimeZone39);
        java.lang.String str48 = dateTimeZone39.toString();
        org.joda.time.chrono.EthiopicChronology ethiopicChronology49 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone39);
        org.joda.time.DateTimeField dateTimeField50 = ethiopicChronology49.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone51 = ethiopicChronology49.getZone();
        org.joda.time.DateTimeField dateTimeField52 = ethiopicChronology49.centuryOfEra();
        java.util.Locale locale53 = java.util.Locale.KOREA;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket55 = new org.joda.time.format.DateTimeParserBucket(1645401600000L, (org.joda.time.Chronology) ethiopicChronology49, locale53, (java.lang.Integer) 4);
        dateTimeParserBucket55.setPivotYear((java.lang.Integer) 15);
        org.joda.time.DateTimeZone dateTimeZone58 = dateTimeParserBucket55.getZone();
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(mutableDateTime18);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertTrue("'" + isoEra33 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra33.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 3L + "'", long43 == 3L);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "Etc/UTC" + "'", str48, "Etc/UTC");
        org.junit.Assert.assertNotNull(ethiopicChronology49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(dateTimeZone58);
    }

    @Test
    public void test6161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6161");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Locale locale3 = java.util.Locale.JAPAN;
        java.util.Locale[] localeArray4 = new java.util.Locale[] { locale3 };
        java.util.ArrayList<java.util.Locale> localeList5 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList5, localeArray4);
        java.util.List<java.util.Locale> localeList7 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.util.Locale>) localeList5);
        localeList7.clear();
        localeList7.clear();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalTime localTime13 = new org.joda.time.LocalTime((long) 0, chronology12);
        org.joda.time.Chronology chronology14 = localTime13.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = chronology14.weekyearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime16 = org.joda.time.MutableDateTime.now(chronology14);
        org.joda.time.DateTimeField dateTimeField17 = chronology14.monthOfYear();
        java.util.Locale locale18 = java.util.Locale.getDefault();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket20 = new org.joda.time.format.DateTimeParserBucket((long) 28, chronology14, locale18, (java.lang.Integer) 0);
        dateTimeParserBucket20.setOffset((java.lang.Integer) 741000000);
        boolean boolean23 = localeList7.equals((java.lang.Object) dateTimeParserBucket20);
        java.util.ListIterator<java.util.Locale> localeItor24 = localeList7.listIterator();
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(localeArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(localeList7);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(locale18);
// flaky:         org.junit.Assert.assertEquals(locale18.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(localeItor24);
    }

    @Test
    public void test6162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6162");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime((long) 23);
    }

    @Test
    public void test6163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6163");
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.ofHoursMinutes(1, 10);
        java.time.LocalDate localDate3 = java.time.LocalDate.now((java.time.ZoneId) zoneOffset2);
        java.time.Clock clock4 = java.time.Clock.system((java.time.ZoneId) zoneOffset2);
        java.time.Clock clock5 = java.time.Clock.tickSeconds((java.time.ZoneId) zoneOffset2);
        java.time.zone.ZoneRules zoneRules6 = zoneOffset2.getRules();
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.Duration duration9 = new org.joda.time.Duration(readableInstant7, readableInstant8);
        org.joda.time.Duration duration11 = duration9.withMillis((-1L));
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) 3, chronology13);
        org.joda.time.DateTime.Property property15 = dateTime14.dayOfYear();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight((java.lang.Object) dateTime14, chronology16);
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight17.minusMonths((-1));
        org.joda.time.DateMidnight dateMidnight21 = dateMidnight17.withDayOfYear((int) ' ');
        org.joda.time.PeriodType periodType22 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period23 = duration11.toPeriodFrom((org.joda.time.ReadableInstant) dateMidnight17, periodType22);
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.Duration duration26 = new org.joda.time.Duration(readableInstant24, readableInstant25);
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.PeriodType periodType28 = null;
        org.joda.time.Period period29 = duration26.toPeriodTo(readableInstant27, periodType28);
        long long30 = duration26.getStandardSeconds();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((long) 3, chronology32);
        org.joda.time.DateTime.Property property34 = dateTime33.dayOfYear();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.DateMidnight dateMidnight36 = new org.joda.time.DateMidnight((java.lang.Object) dateTime33, chronology35);
        org.joda.time.DateMidnight dateMidnight38 = dateMidnight36.minusMonths((-1));
        org.joda.time.DateMidnight dateMidnight40 = dateMidnight36.withDayOfYear((int) ' ');
        org.joda.time.Interval interval41 = duration26.toIntervalTo((org.joda.time.ReadableInstant) dateMidnight40);
        org.joda.time.PeriodType periodType43 = org.joda.time.PeriodType.time();
        org.joda.time.MutablePeriod mutablePeriod44 = new org.joda.time.MutablePeriod((long) 'a', periodType43);
        org.joda.time.Period period45 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight17, (org.joda.time.ReadableDuration) duration26, periodType43);
        org.joda.time.ReadableInstant readableInstant46 = null;
        org.joda.time.ReadableInstant readableInstant47 = null;
        org.joda.time.Duration duration48 = new org.joda.time.Duration(readableInstant46, readableInstant47);
        org.joda.time.Seconds seconds49 = duration48.toStandardSeconds();
        int int50 = seconds49.getSeconds();
        org.joda.time.DateMidnight dateMidnight52 = dateMidnight17.withPeriodAdded((org.joda.time.ReadablePeriod) seconds49, 0);
        org.joda.time.ReadableInstant readableInstant53 = null;
        org.joda.time.MutableInterval mutableInterval54 = new org.joda.time.MutableInterval((org.joda.time.ReadablePeriod) seconds49, readableInstant53);
        boolean boolean55 = zoneOffset2.equals((java.lang.Object) mutableInterval54);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(clock4);
        org.junit.Assert.assertNotNull(clock5);
        org.junit.Assert.assertNotNull(zoneRules6);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(dateMidnight21);
        org.junit.Assert.assertNotNull(periodType22);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(dateMidnight38);
        org.junit.Assert.assertNotNull(dateMidnight40);
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertNotNull(periodType43);
        org.junit.Assert.assertNotNull(seconds49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(dateMidnight52);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
    }

    @Test
    public void test6164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6164");
        java.time.Period period1 = java.time.Period.ofYears(28);
        java.time.chrono.IsoChronology isoChronology2 = period1.getChronology();
        java.time.LocalDate localDate3 = isoChronology2.dateNow();
        java.time.LocalTime localTime8 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime9 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime8);
        java.time.LocalTime localTime14 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime15 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime14);
        java.time.temporal.ChronoField chronoField16 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime18 = localTime14.with((java.time.temporal.TemporalField) chronoField16, (long) (short) 1);
        long long19 = localTime8.getLong((java.time.temporal.TemporalField) chronoField16);
        java.time.LocalTime localTime21 = localTime8.withSecond((int) (short) 1);
        int int22 = localTime21.getMinute();
        java.time.LocalTime localTime24 = localTime21.plusHours((long) (-1));
        java.time.LocalDateTime localDateTime25 = java.time.LocalDateTime.now();
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery26 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period27 = localDateTime25.query(periodTemporalQuery26);
        java.time.Period period28 = localTime24.query(periodTemporalQuery26);
        java.time.Period period30 = period28.minusMonths((long) 365);
        java.time.LocalDateTime localDateTime31 = java.time.LocalDateTime.now();
        java.time.temporal.ChronoField chronoField32 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime34 = localDateTime31.with((java.time.temporal.TemporalField) chronoField32, (long) 10);
        java.time.LocalDateTime localDateTime36 = localDateTime31.minusMinutes((long) 12);
        java.time.LocalDateTime localDateTime37 = java.time.LocalDateTime.now();
        java.time.temporal.ChronoField chronoField38 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime40 = localDateTime37.with((java.time.temporal.TemporalField) chronoField38, (long) 10);
        java.time.Duration duration42 = java.time.Duration.ofSeconds((long) 0);
        java.time.temporal.Temporal temporal43 = localDateTime37.minus((java.time.temporal.TemporalAmount) duration42);
        boolean boolean44 = localDateTime31.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime37);
        int int45 = localDateTime37.getMonthValue();
        java.time.LocalDate localDate46 = localDateTime37.toLocalDate();
        java.time.temporal.Temporal temporal47 = period28.subtractFrom((java.time.temporal.Temporal) localDate46);
        java.time.ZoneOffset zoneOffset50 = java.time.ZoneOffset.ofHoursMinutes(1, 10);
        java.time.LocalDate localDate51 = java.time.LocalDate.now((java.time.ZoneId) zoneOffset50);
        org.joda.time.TimeOfDay timeOfDay53 = org.joda.time.TimeOfDay.fromMillisOfDay((long) (short) 0);
        org.joda.time.TimeOfDay timeOfDay55 = org.joda.time.TimeOfDay.fromMillisOfDay((long) (short) 0);
        org.joda.time.Hours hours56 = org.joda.time.Hours.hoursBetween((org.joda.time.ReadablePartial) timeOfDay53, (org.joda.time.ReadablePartial) timeOfDay55);
        org.joda.time.DurationFieldType durationFieldType57 = org.joda.time.DurationFieldType.hours();
        org.joda.time.TimeOfDay timeOfDay59 = timeOfDay55.withFieldAdded(durationFieldType57, (int) (byte) 0);
        int int60 = timeOfDay55.getMillisOfSecond();
        org.joda.time.TimeOfDay timeOfDay62 = timeOfDay55.plusHours(9);
        org.joda.time.TimeOfDay.Property property63 = timeOfDay55.secondOfMinute();
        java.time.ZoneOffset zoneOffset66 = java.time.ZoneOffset.ofHoursMinutes(1, 10);
        java.time.LocalDate localDate67 = java.time.LocalDate.now((java.time.ZoneId) zoneOffset66);
        boolean boolean68 = property63.equals((java.lang.Object) localDate67);
        java.lang.String str69 = localDate67.toString();
        java.time.chrono.ChronoLocalDate chronoLocalDate70 = localDate51.with((java.time.temporal.TemporalAdjuster) localDate67);
        boolean boolean71 = localDate46.isEqual((java.time.chrono.ChronoLocalDate) localDate67);
        int int72 = localDate3.compareTo((java.time.chrono.ChronoLocalDate) localDate46);
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(isoChronology2);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertTrue("'" + chronoField16 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField16.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 3601000000001L + "'", long19 == 3601000000001L);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(localTime24);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(periodTemporalQuery26);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertTrue("'" + chronoField32 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField32.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime34);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertTrue("'" + chronoField38 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField38.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime40);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(temporal43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2 + "'", int45 == 2);
        org.junit.Assert.assertNotNull(localDate46);
        org.junit.Assert.assertNotNull(temporal47);
        org.junit.Assert.assertNotNull(zoneOffset50);
        org.junit.Assert.assertNotNull(localDate51);
        org.junit.Assert.assertNotNull(timeOfDay53);
        org.junit.Assert.assertNotNull(timeOfDay55);
        org.junit.Assert.assertNotNull(hours56);
        org.junit.Assert.assertNotNull(durationFieldType57);
        org.junit.Assert.assertNotNull(timeOfDay59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(timeOfDay62);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertNotNull(zoneOffset66);
        org.junit.Assert.assertNotNull(localDate67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "2022-02-21" + "'", str69, "2022-02-21");
        org.junit.Assert.assertNotNull(chronoLocalDate70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
    }

    @Test
    public void test6165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6165");
        java.time.DayOfWeek dayOfWeek0 = java.time.DayOfWeek.WEDNESDAY;
        int int1 = dayOfWeek0.getValue();
        int int2 = dayOfWeek0.getValue();
        org.junit.Assert.assertTrue("'" + dayOfWeek0 + "' != '" + java.time.DayOfWeek.WEDNESDAY + "'", dayOfWeek0.equals(java.time.DayOfWeek.WEDNESDAY));
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 3 + "'", int1 == 3);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 3 + "'", int2 == 3);
    }

    @Test
    public void test6166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6166");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.Duration duration2 = new org.joda.time.Duration(readableInstant0, readableInstant1);
        org.joda.time.Seconds seconds3 = duration2.toStandardSeconds();
        int int4 = seconds3.getSeconds();
        java.lang.String str5 = seconds3.toString();
        org.junit.Assert.assertNotNull(seconds3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "PT0S" + "'", str5, "PT0S");
    }

    @Test
    public void test6167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6167");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.Interval interval1 = localDate0.toInterval();
        int int2 = localDate0.getDayOfYear();
        int int3 = localDate0.getYearOfEra();
        org.joda.time.LocalDate localDate5 = localDate0.withYearOfCentury((int) ':');
        org.joda.time.LocalDate.Property property6 = localDate5.dayOfMonth();
        org.joda.time.Interval interval7 = property6.toInterval();
        org.joda.time.LocalDate localDate9 = property6.addToCopy(41);
        org.junit.Assert.assertNotNull(interval1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 52 + "'", int2 == 52);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2022 + "'", int3 == 2022);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertNotNull(localDate9);
    }

    @Test
    public void test6168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6168");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.Interval interval1 = localDate0.toInterval();
        int int2 = localDate0.getDayOfYear();
        int int3 = localDate0.getYearOfEra();
        org.joda.time.LocalDate localDate5 = localDate0.withDayOfMonth(9);
        org.joda.time.LocalDate localDate7 = localDate0.minusMonths((int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.monthOfYear();
        boolean boolean9 = localDate0.isSupported(dateTimeFieldType8);
        org.junit.Assert.assertNotNull(interval1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 52 + "'", int2 == 52);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2022 + "'", int3 == 2022);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void test6169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6169");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) 3, chronology2);
        org.joda.time.DateTime.Property property4 = dateTime3.dayOfYear();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight((java.lang.Object) dateTime3, chronology5);
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight6.plus((long) (byte) -1);
        int int9 = dateMidnight6.getSecondOfMinute();
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight6.plusYears(12);
        java.util.TimeZone timeZone16 = null;
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forTimeZone(timeZone16);
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight((long) 1970, dateTimeZone17);
        long long21 = dateTimeZone17.convertLocalToUTC((long) 3, false);
        org.joda.time.Interval interval22 = new org.joda.time.Interval(10L, (long) 2097, dateTimeZone17);
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime(dateTimeZone17);
        org.joda.time.DateMidnight dateMidnight24 = new org.joda.time.DateMidnight(28L, dateTimeZone17);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((long) 3, chronology26);
        org.joda.time.DateTime.Property property28 = dateTime27.dayOfYear();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.DateMidnight dateMidnight30 = new org.joda.time.DateMidnight((java.lang.Object) dateTime27, chronology29);
        org.joda.time.MutableDateTime mutableDateTime31 = dateTime27.toMutableDateTime();
        org.joda.time.Days days32 = org.joda.time.Days.ONE;
        org.joda.time.MutableInterval mutableInterval33 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime27, (org.joda.time.ReadablePeriod) days32);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((long) 3, chronology35);
        org.joda.time.DateTime.Property property37 = dateTime36.dayOfYear();
        org.joda.time.Interval interval38 = property37.toInterval();
        mutableInterval33.setInterval((org.joda.time.ReadableInterval) interval38);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime((long) 3, chronology41);
        org.joda.time.DateTime.Property property43 = dateTime42.dayOfYear();
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.DateMidnight dateMidnight45 = new org.joda.time.DateMidnight((java.lang.Object) dateTime42, chronology44);
        org.joda.time.DateMidnight.Property property46 = dateMidnight45.dayOfMonth();
        org.joda.time.ReadableInstant readableInstant47 = null;
        org.joda.time.ReadableInstant readableInstant48 = null;
        org.joda.time.Duration duration49 = new org.joda.time.Duration(readableInstant47, readableInstant48);
        org.joda.time.Duration duration51 = duration49.withMillis((-1L));
        org.joda.time.ReadableDuration readableDuration52 = null;
        org.joda.time.Duration duration53 = duration49.minus(readableDuration52);
        org.joda.time.DateMidnight dateMidnight54 = dateMidnight45.plus((org.joda.time.ReadableDuration) duration53);
        mutableInterval33.setDurationAfterStart((org.joda.time.ReadableDuration) duration53);
        org.joda.time.MutableDateTime mutableDateTime56 = new org.joda.time.MutableDateTime();
        boolean boolean57 = mutableInterval33.isBefore((org.joda.time.ReadableInstant) mutableDateTime56);
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.DateTime dateTime60 = new org.joda.time.DateTime((long) 3, chronology59);
        org.joda.time.DateTime.Property property61 = dateTime60.dayOfYear();
        int int62 = dateTime60.getHourOfDay();
        boolean boolean64 = dateTime60.isBefore((long) '/');
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.DateTime dateTime67 = new org.joda.time.DateTime((long) 3, chronology66);
        org.joda.time.DateTime.Property property68 = dateTime67.dayOfYear();
        org.joda.time.Chronology chronology69 = null;
        org.joda.time.DateMidnight dateMidnight70 = new org.joda.time.DateMidnight((java.lang.Object) dateTime67, chronology69);
        org.joda.time.DateMidnight dateMidnight72 = dateMidnight70.minusMonths((-1));
        org.joda.time.DateMidnight dateMidnight74 = dateMidnight70.withDayOfYear((int) ' ');
        mutableInterval33.setInterval((org.joda.time.ReadableInstant) dateTime60, (org.joda.time.ReadableInstant) dateMidnight74);
        boolean boolean76 = dateTimeZone17.equals((java.lang.Object) mutableInterval33);
        org.joda.time.DateMidnight dateMidnight77 = dateMidnight11.withZoneRetainFields(dateTimeZone17);
        org.joda.time.LocalDateTime localDateTime78 = new org.joda.time.LocalDateTime(4924800047L, dateTimeZone17);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 3L + "'", long21 == 3L);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(mutableDateTime31);
        org.junit.Assert.assertNotNull(days32);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertNotNull(dateMidnight54);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(property68);
        org.junit.Assert.assertNotNull(dateMidnight72);
        org.junit.Assert.assertNotNull(dateMidnight74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(dateMidnight77);
    }

    @Test
    public void test6170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6170");
        java.io.File file0 = null;
        java.io.File file2 = new java.io.File(file0, "1970-01-01T00:00:00.003Z");
        java.net.URL uRL3 = file2.toURL();
        java.io.File file4 = null;
        java.io.File file6 = new java.io.File(file4, "1970-01-01T00:00:00.003Z");
        java.net.URL uRL7 = file6.toURL();
        boolean boolean8 = uRL3.sameFile(uRL7);
        java.lang.String str9 = uRL7.getQuery();
        java.io.File file10 = null;
        java.io.File file12 = new java.io.File(file10, "1970-01-01T00:00:00.003Z");
        java.net.URL uRL13 = file12.toURL();
        java.io.File file14 = null;
        java.io.File file16 = new java.io.File(file14, "1970-01-01T00:00:00.003Z");
        java.net.URL uRL17 = file16.toURL();
        boolean boolean18 = uRL13.sameFile(uRL17);
        java.lang.String str19 = uRL13.getPath();
        boolean boolean20 = uRL7.sameFile(uRL13);
        java.lang.String str21 = uRL7.getUserInfo();
        java.lang.String str22 = uRL7.getRef();
        org.junit.Assert.assertNull("file2.getParent() == null", file2.getParent());
        org.junit.Assert.assertEquals(file2.toString(), "1970-01-01T00:00:00.003Z");
        org.junit.Assert.assertNotNull(uRL3);
// flaky:         org.junit.Assert.assertEquals(uRL3.toString(), "file:/experiment/1970-01-01T00:00:00.003Z/");
        org.junit.Assert.assertNull("file6.getParent() == null", file6.getParent());
        org.junit.Assert.assertEquals(file6.toString(), "1970-01-01T00:00:00.003Z");
        org.junit.Assert.assertNotNull(uRL7);
// flaky:         org.junit.Assert.assertEquals(uRL7.toString(), "file:/experiment/1970-01-01T00:00:00.003Z/");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull("file12.getParent() == null", file12.getParent());
        org.junit.Assert.assertEquals(file12.toString(), "1970-01-01T00:00:00.003Z");
        org.junit.Assert.assertNotNull(uRL13);
// flaky:         org.junit.Assert.assertEquals(uRL13.toString(), "file:/experiment/1970-01-01T00:00:00.003Z/");
        org.junit.Assert.assertNull("file16.getParent() == null", file16.getParent());
        org.junit.Assert.assertEquals(file16.toString(), "1970-01-01T00:00:00.003Z");
        org.junit.Assert.assertNotNull(uRL17);
// flaky:         org.junit.Assert.assertEquals(uRL17.toString(), "file:/experiment/1970-01-01T00:00:00.003Z/");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "/experiment/1970-01-01T00:00:00.003Z/" + "'", str19, "/experiment/1970-01-01T00:00:00.003Z/");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNull(str22);
    }

    @Test
    public void test6171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6171");
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.ofHoursMinutes(1, 10);
        java.time.LocalDate localDate3 = java.time.LocalDate.now((java.time.ZoneId) zoneOffset2);
        java.time.Clock clock4 = java.time.Clock.systemUTC();
        java.time.Duration duration6 = java.time.Duration.ofSeconds((long) 256);
        java.time.Clock clock7 = java.time.Clock.tick(clock4, duration6);
        java.time.Duration duration9 = java.time.Duration.ofMinutes((long) 3);
        java.time.Duration duration10 = duration9.abs();
        java.time.Clock clock11 = java.time.Clock.offset(clock4, duration9);
        java.time.ZonedDateTime zonedDateTime12 = java.time.ZonedDateTime.now(clock11);
        java.time.LocalTime localTime13 = java.time.LocalTime.now(clock11);
        java.time.ZoneOffset zoneOffset16 = java.time.ZoneOffset.ofHoursMinutes(1, 10);
        java.time.LocalDate localDate17 = java.time.LocalDate.now((java.time.ZoneId) zoneOffset16);
        java.time.LocalDate localDate18 = java.time.LocalDate.now((java.time.ZoneId) zoneOffset16);
        java.time.ZoneId zoneId19 = zoneOffset16.normalized();
        java.lang.String str20 = zoneOffset16.getId();
        java.time.OffsetTime offsetTime21 = localTime13.atOffset(zoneOffset16);
        java.time.LocalDateTime localDateTime22 = java.time.LocalDateTime.of(localDate3, localTime13);
        java.time.LocalTime localTime27 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime28 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime27);
        long long29 = localTime27.toNanoOfDay();
        java.time.OffsetTime offsetTime30 = java.time.OffsetTime.MAX;
        java.time.LocalTime localTime31 = offsetTime30.toLocalTime();
        java.time.Duration duration33 = java.time.Duration.ofMinutes((long) 3);
        java.time.temporal.Temporal temporal34 = localTime31.plus((java.time.temporal.TemporalAmount) duration33);
        java.time.Duration duration36 = duration33.plusNanos((long) 9);
        java.time.LocalTime localTime37 = localTime27.plus((java.time.temporal.TemporalAmount) duration33);
        java.time.LocalTime localTime38 = localTime13.minus((java.time.temporal.TemporalAmount) duration33);
        java.util.GregorianCalendar gregorianCalendar44 = new java.util.GregorianCalendar(12, 4096, 7, (-1), (int) (short) 10);
        int int45 = gregorianCalendar44.getWeeksInWeekYear();
        java.lang.String str46 = gregorianCalendar44.getCalendarType();
        java.time.ZonedDateTime zonedDateTime47 = gregorianCalendar44.toZonedDateTime();
        java.util.GregorianCalendar gregorianCalendar53 = new java.util.GregorianCalendar(12, 4096, 7, (-1), (int) (short) 10);
        int int54 = gregorianCalendar53.getWeeksInWeekYear();
        java.lang.String str55 = gregorianCalendar53.getCalendarType();
        java.time.ZonedDateTime zonedDateTime56 = gregorianCalendar53.toZonedDateTime();
        int int57 = zonedDateTime47.compareTo((java.time.chrono.ChronoZonedDateTime<java.time.LocalDate>) zonedDateTime56);
        java.time.ZonedDateTime zonedDateTime59 = zonedDateTime47.plusDays((long) 2022);
        java.time.Instant instant60 = zonedDateTime47.toInstant();
        java.time.chrono.Chronology chronology61 = zonedDateTime47.getChronology();
        java.util.GregorianCalendar gregorianCalendar67 = new java.util.GregorianCalendar(12, 4096, 7, (-1), (int) (short) 10);
        int int68 = gregorianCalendar67.getWeeksInWeekYear();
        java.lang.String str69 = gregorianCalendar67.getCalendarType();
        java.time.ZonedDateTime zonedDateTime70 = gregorianCalendar67.toZonedDateTime();
        java.time.ZonedDateTime zonedDateTime72 = zonedDateTime70.minusMonths((long) 10);
        boolean boolean73 = zonedDateTime47.isBefore((java.time.chrono.ChronoZonedDateTime<java.time.LocalDate>) zonedDateTime72);
        java.time.OffsetDateTime offsetDateTime74 = java.time.OffsetDateTime.from((java.time.temporal.TemporalAccessor) zonedDateTime47);
        java.time.temporal.ChronoField chronoField75 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        java.time.OffsetDateTime offsetDateTime77 = offsetDateTime74.with((java.time.temporal.TemporalField) chronoField75, (long) 17);
        java.lang.String str78 = chronoField75.toString();
        // The following exception was thrown during execution in test generation
        try {
            java.time.temporal.ValueRange valueRange79 = localTime13.range((java.time.temporal.TemporalField) chronoField75);
            org.junit.Assert.fail("Expected exception of type java.time.temporal.UnsupportedTemporalTypeException; message: Unsupported field: AlignedWeekOfYear");
        } catch (java.time.temporal.UnsupportedTemporalTypeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(clock4);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(clock7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(clock11);
        org.junit.Assert.assertNotNull(zonedDateTime12);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(zoneOffset16);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(zoneId19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+01:10" + "'", str20, "+01:10");
        org.junit.Assert.assertNotNull(offsetTime21);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localTime27);
        org.junit.Assert.assertNotNull(localTime28);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 3601000000001L + "'", long29 == 3601000000001L);
        org.junit.Assert.assertNotNull(offsetTime30);
        org.junit.Assert.assertNotNull(localTime31);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(temporal34);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(localTime37);
        org.junit.Assert.assertNotNull(localTime38);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 52 + "'", int45 == 52);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "gregory" + "'", str46, "gregory");
        org.junit.Assert.assertNotNull(zonedDateTime47);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 52 + "'", int54 == 52);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "gregory" + "'", str55, "gregory");
        org.junit.Assert.assertNotNull(zonedDateTime56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(zonedDateTime59);
        org.junit.Assert.assertNotNull(instant60);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 52 + "'", int68 == 52);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "gregory" + "'", str69, "gregory");
        org.junit.Assert.assertNotNull(zonedDateTime70);
        org.junit.Assert.assertNotNull(zonedDateTime72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(offsetDateTime74);
        org.junit.Assert.assertTrue("'" + chronoField75 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField75.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertNotNull(offsetDateTime77);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "AlignedWeekOfYear" + "'", str78, "AlignedWeekOfYear");
    }

    @Test
    public void test6172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6172");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MIN;
        java.time.Month month1 = java.time.Month.NOVEMBER;
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime2 = localDateTime0.with((java.time.temporal.TemporalAdjuster) month1);
        java.time.LocalDateTime localDateTime4 = localDateTime0.plusMinutes((long) 3600000);
        int int5 = localDateTime4.getSecond();
        int int6 = localDateTime4.getSecond();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertTrue("'" + month1 + "' != '" + java.time.Month.NOVEMBER + "'", month1.equals(java.time.Month.NOVEMBER));
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
    }

    @Test
    public void test6173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6173");
        org.joda.time.Hours hours0 = org.joda.time.Hours.SIX;
        org.joda.time.Hours hours2 = hours0.plus(733000000);
        org.junit.Assert.assertNotNull(hours0);
        org.junit.Assert.assertNotNull(hours2);
    }

    @Test
    public void test6174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6174");
        java.util.Enumeration<java.net.NetworkInterface> networkInterfaceEnumeration0 = java.net.NetworkInterface.getNetworkInterfaces();
        org.junit.Assert.assertNotNull(networkInterfaceEnumeration0);
    }

    @Test
    public void test6175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6175");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.Duration duration2 = new org.joda.time.Duration(readableInstant0, readableInstant1);
        org.joda.time.Duration duration4 = duration2.withMillis((-1L));
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((long) 3, chronology6);
        org.joda.time.DateTime.Property property8 = dateTime7.dayOfYear();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight((java.lang.Object) dateTime7, chronology9);
        org.joda.time.DateMidnight dateMidnight12 = dateMidnight10.minusMonths((-1));
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight10.withDayOfYear((int) ' ');
        org.joda.time.PeriodType periodType15 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period16 = duration4.toPeriodFrom((org.joda.time.ReadableInstant) dateMidnight10, periodType15);
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.Duration duration19 = new org.joda.time.Duration(readableInstant17, readableInstant18);
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.PeriodType periodType21 = null;
        org.joda.time.Period period22 = duration19.toPeriodTo(readableInstant20, periodType21);
        long long23 = duration19.getStandardSeconds();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((long) 3, chronology25);
        org.joda.time.DateTime.Property property27 = dateTime26.dayOfYear();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateMidnight dateMidnight29 = new org.joda.time.DateMidnight((java.lang.Object) dateTime26, chronology28);
        org.joda.time.DateMidnight dateMidnight31 = dateMidnight29.minusMonths((-1));
        org.joda.time.DateMidnight dateMidnight33 = dateMidnight29.withDayOfYear((int) ' ');
        org.joda.time.Interval interval34 = duration19.toIntervalTo((org.joda.time.ReadableInstant) dateMidnight33);
        org.joda.time.PeriodType periodType36 = org.joda.time.PeriodType.time();
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod((long) 'a', periodType36);
        org.joda.time.Period period38 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight10, (org.joda.time.ReadableDuration) duration19, periodType36);
        org.joda.time.ReadableInstant readableInstant39 = null;
        org.joda.time.ReadableInstant readableInstant40 = null;
        org.joda.time.Duration duration41 = new org.joda.time.Duration(readableInstant39, readableInstant40);
        org.joda.time.Seconds seconds42 = duration41.toStandardSeconds();
        int int43 = seconds42.getSeconds();
        org.joda.time.DateMidnight dateMidnight45 = dateMidnight10.withPeriodAdded((org.joda.time.ReadablePeriod) seconds42, 0);
        org.joda.time.ReadableInstant readableInstant46 = null;
        org.joda.time.MutableInterval mutableInterval47 = new org.joda.time.MutableInterval((org.joda.time.ReadablePeriod) seconds42, readableInstant46);
        org.joda.time.Period period49 = org.joda.time.Period.years(4096);
        mutableInterval47.setPeriodAfterStart((org.joda.time.ReadablePeriod) period49);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(periodType15);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateMidnight31);
        org.junit.Assert.assertNotNull(dateMidnight33);
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertNotNull(periodType36);
        org.junit.Assert.assertNotNull(seconds42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(dateMidnight45);
        org.junit.Assert.assertNotNull(period49);
    }

    @Test
    public void test6176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6176");
        org.joda.time.Period period0 = org.joda.time.Period.ZERO;
        org.joda.time.Period period1 = period0.normalizedStandard();
        org.joda.time.Period period3 = period0.plusHours(2);
        java.time.chrono.IsoEra isoEra4 = java.time.chrono.IsoEra.CE;
        boolean boolean5 = period3.equals((java.lang.Object) isoEra4);
        java.time.LocalTime localTime10 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime11 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime10);
        java.time.LocalTime localTime16 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime17 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime16);
        java.time.temporal.ChronoField chronoField18 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime20 = localTime16.with((java.time.temporal.TemporalField) chronoField18, (long) (short) 1);
        long long21 = localTime10.getLong((java.time.temporal.TemporalField) chronoField18);
        boolean boolean22 = isoEra4.isSupported((java.time.temporal.TemporalField) chronoField18);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery23 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period24 = isoEra4.query(periodTemporalQuery23);
        boolean boolean25 = period24.isNegative();
        java.time.Period period27 = period24.plusDays((long) ' ');
        boolean boolean28 = period24.isNegative();
        java.time.Period period30 = period24.minusYears((long) 10);
        org.joda.time.Period period31 = org.joda.time.Period.ZERO;
        org.joda.time.Period period32 = period31.normalizedStandard();
        org.joda.time.Period period34 = period31.plusHours(2);
        java.time.chrono.IsoEra isoEra35 = java.time.chrono.IsoEra.CE;
        boolean boolean36 = period34.equals((java.lang.Object) isoEra35);
        java.time.LocalTime localTime41 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime42 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime41);
        java.time.LocalTime localTime47 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime48 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime47);
        java.time.temporal.ChronoField chronoField49 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime51 = localTime47.with((java.time.temporal.TemporalField) chronoField49, (long) (short) 1);
        long long52 = localTime41.getLong((java.time.temporal.TemporalField) chronoField49);
        boolean boolean53 = isoEra35.isSupported((java.time.temporal.TemporalField) chronoField49);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery54 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period55 = isoEra35.query(periodTemporalQuery54);
        java.time.chrono.ChronoPeriod chronoPeriod56 = period30.minus((java.time.temporal.TemporalAmount) period55);
        java.time.chrono.ChronoPeriod chronoPeriod58 = period30.multipliedBy(4096);
        int int59 = period30.getMonths();
        java.time.chrono.IsoChronology isoChronology60 = period30.getChronology();
        java.time.LocalDateTime localDateTime61 = java.time.LocalDateTime.now();
        java.time.temporal.ChronoField chronoField62 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime64 = localDateTime61.with((java.time.temporal.TemporalField) chronoField62, (long) 10);
        java.time.temporal.ValueRange valueRange65 = isoChronology60.range(chronoField62);
        boolean boolean67 = isoChronology60.isLeapYear((long) 31);
        boolean boolean69 = isoChronology60.isLeapYear(0L);
        org.junit.Assert.assertNotNull(period0);
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertTrue("'" + isoEra4 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra4.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertTrue("'" + chronoField18 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField18.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 3601000000001L + "'", long21 == 3601000000001L);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(periodTemporalQuery23);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertTrue("'" + isoEra35 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra35.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(localTime41);
        org.junit.Assert.assertNotNull(localTime42);
        org.junit.Assert.assertNotNull(localTime47);
        org.junit.Assert.assertNotNull(localTime48);
        org.junit.Assert.assertTrue("'" + chronoField49 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField49.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime51);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 3601000000001L + "'", long52 == 3601000000001L);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(periodTemporalQuery54);
        org.junit.Assert.assertNotNull(period55);
        org.junit.Assert.assertNotNull(chronoPeriod56);
        org.junit.Assert.assertNotNull(chronoPeriod58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(isoChronology60);
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertTrue("'" + chronoField62 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField62.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime64);
        org.junit.Assert.assertNotNull(valueRange65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
    }

    @Test
    public void test6177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6177");
        java.util.TimeZone timeZone4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forTimeZone(timeZone4);
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight((long) 1970, dateTimeZone5);
        long long9 = dateTimeZone5.convertLocalToUTC((long) 3, false);
        org.joda.time.Interval interval10 = new org.joda.time.Interval(10L, (long) 2097, dateTimeZone5);
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(dateTimeZone5);
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight(28L, dateTimeZone5);
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.Duration duration15 = new org.joda.time.Duration(readableInstant13, readableInstant14);
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.PeriodType periodType17 = null;
        org.joda.time.Period period18 = duration15.toPeriodTo(readableInstant16, periodType17);
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.Duration duration21 = new org.joda.time.Duration(readableInstant19, readableInstant20);
        long long22 = duration21.getMillis();
        boolean boolean23 = duration15.isShorterThan((org.joda.time.ReadableDuration) duration21);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((long) 3, chronology25);
        org.joda.time.DateTime.Property property27 = dateTime26.dayOfYear();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateMidnight dateMidnight29 = new org.joda.time.DateMidnight((java.lang.Object) dateTime26, chronology28);
        org.joda.time.MutableDateTime mutableDateTime30 = dateTime26.toMutableDateTime();
        mutableDateTime30.addYears((int) (short) 100);
        org.joda.time.MutableDateTime.Property property33 = mutableDateTime30.dayOfWeek();
        org.joda.time.MutableDateTime.Property property34 = mutableDateTime30.year();
        org.joda.time.MutableDateTime.Property property35 = mutableDateTime30.weekyear();
        boolean boolean36 = duration15.equals((java.lang.Object) mutableDateTime30);
        org.joda.time.ReadableInstant readableInstant37 = null;
        org.joda.time.ReadableInstant readableInstant38 = null;
        org.joda.time.Duration duration39 = new org.joda.time.Duration(readableInstant37, readableInstant38);
        org.joda.time.ReadableInstant readableInstant40 = null;
        org.joda.time.PeriodType periodType41 = null;
        org.joda.time.Period period42 = duration39.toPeriodTo(readableInstant40, periodType41);
        org.joda.time.ReadableInstant readableInstant43 = null;
        org.joda.time.ReadableInstant readableInstant44 = null;
        org.joda.time.Duration duration45 = new org.joda.time.Duration(readableInstant43, readableInstant44);
        long long46 = duration45.getMillis();
        boolean boolean47 = duration39.isShorterThan((org.joda.time.ReadableDuration) duration45);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime((long) 3, chronology49);
        org.joda.time.DateTime.Property property51 = dateTime50.dayOfYear();
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.DateMidnight dateMidnight53 = new org.joda.time.DateMidnight((java.lang.Object) dateTime50, chronology52);
        org.joda.time.MutableDateTime mutableDateTime54 = dateTime50.toMutableDateTime();
        mutableDateTime54.addYears((int) (short) 100);
        org.joda.time.MutableDateTime.Property property57 = mutableDateTime54.dayOfWeek();
        org.joda.time.MutableDateTime.Property property58 = mutableDateTime54.year();
        org.joda.time.MutableDateTime.Property property59 = mutableDateTime54.weekyear();
        boolean boolean60 = duration39.equals((java.lang.Object) mutableDateTime54);
        mutableDateTime54.addMonths((int) ' ');
        mutableDateTime54.add((long) (byte) 10);
        org.joda.time.Period period65 = org.joda.time.Period.ZERO;
        org.joda.time.Period period66 = period65.normalizedStandard();
        org.joda.time.Period period68 = period65.plusHours(2);
        java.time.chrono.IsoEra isoEra69 = java.time.chrono.IsoEra.CE;
        boolean boolean70 = period68.equals((java.lang.Object) isoEra69);
        int int71 = period68.getMinutes();
        mutableDateTime54.add((org.joda.time.ReadablePeriod) period68);
        org.joda.time.MutablePeriod mutablePeriod73 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration15, (org.joda.time.ReadableInstant) mutableDateTime54);
        org.joda.time.DateMidnight dateMidnight74 = dateMidnight12.plus((org.joda.time.ReadableDuration) duration15);
        org.joda.time.DateMidnight dateMidnight76 = dateMidnight12.plusYears(35);
        org.joda.time.DateTimeZone dateTimeZone77 = dateMidnight76.getZone();
        org.joda.time.DateMidnight dateMidnight79 = dateMidnight76.minusWeeks((int) (short) 1);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 3L + "'", long9 == 3L);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(mutableDateTime30);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(mutableDateTime54);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(period65);
        org.junit.Assert.assertNotNull(period66);
        org.junit.Assert.assertNotNull(period68);
        org.junit.Assert.assertTrue("'" + isoEra69 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra69.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(dateMidnight74);
        org.junit.Assert.assertNotNull(dateMidnight76);
        org.junit.Assert.assertNotNull(dateTimeZone77);
        org.junit.Assert.assertNotNull(dateMidnight79);
    }

    @Test
    public void test6178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6178");
        java.util.GregorianCalendar gregorianCalendar5 = new java.util.GregorianCalendar(12, 4096, 7, (-1), (int) (short) 10);
        int int6 = gregorianCalendar5.getWeeksInWeekYear();
        java.lang.String str7 = gregorianCalendar5.getCalendarType();
        java.time.ZonedDateTime zonedDateTime8 = gregorianCalendar5.toZonedDateTime();
        java.time.ZonedDateTime zonedDateTime10 = zonedDateTime8.minusMonths((long) 10);
        java.time.chrono.ChronoZonedDateTime<java.time.LocalDate> localDateChronoZonedDateTime11 = zonedDateTime8.withEarlierOffsetAtOverlap();
        int int12 = zonedDateTime8.getDayOfYear();
        java.time.ZonedDateTime zonedDateTime14 = zonedDateTime8.withMinute(34);
        java.time.Instant instant15 = java.time.Instant.from((java.time.temporal.TemporalAccessor) zonedDateTime8);
        int int16 = zonedDateTime8.getDayOfMonth();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 52 + "'", int6 == 52);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "gregory" + "'", str7, "gregory");
        org.junit.Assert.assertNotNull(zonedDateTime8);
        org.junit.Assert.assertNotNull(zonedDateTime10);
        org.junit.Assert.assertNotNull(localDateChronoZonedDateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 127 + "'", int12 == 127);
        org.junit.Assert.assertNotNull(zonedDateTime14);
        org.junit.Assert.assertNotNull(instant15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 7 + "'", int16 == 7);
    }

    @Test
    public void test6179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6179");
        java.text.Format.Field field0 = null;
        java.text.FieldPosition fieldPosition1 = new java.text.FieldPosition(field0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime(chronology2);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.withYearOfCentury((int) 'a');
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.plusSeconds(6);
        org.joda.time.DateTime dateTime8 = localDateTime5.toDateTime();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime5.minusMillis((int) '/');
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusMonths(100);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.withDayOfYear(17);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime12.withYear(10);
        boolean boolean17 = fieldPosition1.equals((java.lang.Object) localDateTime12);
        int int18 = fieldPosition1.getBeginIndex();
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
    }

    @Test
    public void test6180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6180");
        org.joda.time.PeriodType periodType0 = org.joda.time.PeriodType.time();
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod(periodType0);
        org.joda.time.PeriodType periodType2 = periodType0.withYearsRemoved();
        org.junit.Assert.assertNotNull(periodType0);
        org.junit.Assert.assertNotNull(periodType2);
    }

    @Test
    public void test6181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6181");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 3, chronology1);
        org.joda.time.DateTime.Property property3 = dateTime2.dayOfYear();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight((java.lang.Object) dateTime2, chronology4);
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight5.minusMonths((-1));
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight5.withDayOfYear((int) ' ');
        org.joda.time.DateMidnight.Property property10 = dateMidnight9.monthOfYear();
        org.joda.time.Instant instant11 = new org.joda.time.Instant();
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.Duration duration14 = new org.joda.time.Duration(readableInstant12, readableInstant13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.PeriodType periodType16 = null;
        org.joda.time.Period period17 = duration14.toPeriodTo(readableInstant15, periodType16);
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.Duration duration20 = new org.joda.time.Duration(readableInstant18, readableInstant19);
        long long21 = duration20.getMillis();
        boolean boolean22 = duration14.isShorterThan((org.joda.time.ReadableDuration) duration20);
        org.joda.time.Instant instant23 = instant11.minus((org.joda.time.ReadableDuration) duration14);
        int int24 = property10.getDifference((org.joda.time.ReadableInstant) instant11);
        org.joda.time.Instant instant26 = instant11.withMillis((long) 37);
        org.joda.time.Chronology chronology27 = instant26.getChronology();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(instant23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-624) + "'", int24 == (-624));
        org.junit.Assert.assertNotNull(instant26);
        org.junit.Assert.assertNotNull(chronology27);
    }

    @Test
    public void test6182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6182");
        java.util.GregorianCalendar gregorianCalendar5 = new java.util.GregorianCalendar(12, 4096, 7, (-1), (int) (short) 10);
        int int6 = gregorianCalendar5.getWeeksInWeekYear();
        java.util.TimeZone timeZone7 = gregorianCalendar5.getTimeZone();
        java.util.Locale locale9 = new java.util.Locale("hi!");
        java.util.Calendar calendar10 = java.util.Calendar.getInstance(timeZone7, locale9);
        java.time.Instant instant11 = calendar10.toInstant();
        java.time.Instant instant12 = calendar10.toInstant();
        // The following exception was thrown during execution in test generation
        try {
            int int14 = calendar10.getLeastMaximum(16384);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 16384");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 52 + "'", int6 == 52);
        org.junit.Assert.assertNotNull(timeZone7);
        org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertEquals(locale9.toString(), "hi!");
        org.junit.Assert.assertNotNull(calendar10);
// flaky:         org.junit.Assert.assertEquals(calendar10.toString(), "java.util.GregorianCalendar[time=1645436571780,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=35,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=42,SECOND=51,MILLISECOND=815,ZONE_OFFSET=35,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertNotNull(instant12);
    }

    @Test
    public void test6183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6183");
        java.util.stream.DoubleStream doubleStream0 = java.util.stream.DoubleStream.empty();
        java.util.stream.DoubleStream doubleStream2 = doubleStream0.skip(0L);
        java.util.OptionalDouble optionalDouble3 = doubleStream2.max();
        // The following exception was thrown during execution in test generation
        try {
            long long4 = doubleStream2.count();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: stream has already been operated upon or closed");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleStream0);
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertNotNull(optionalDouble3);
    }

    @Test
    public void test6184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6184");
        java.util.GregorianCalendar gregorianCalendar5 = new java.util.GregorianCalendar(12, 4096, 7, (-1), (int) (short) 10);
        int int6 = gregorianCalendar5.getWeeksInWeekYear();
        java.lang.String str7 = gregorianCalendar5.getCalendarType();
        java.time.ZonedDateTime zonedDateTime8 = gregorianCalendar5.toZonedDateTime();
        java.time.ZonedDateTime zonedDateTime10 = zonedDateTime8.minusMonths((long) 10);
        java.time.ZonedDateTime zonedDateTime12 = zonedDateTime10.minusHours((long) 9);
        java.time.LocalTime localTime17 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime18 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime17);
        java.time.LocalTime localTime23 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime24 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime23);
        java.time.temporal.ChronoField chronoField25 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime27 = localTime23.with((java.time.temporal.TemporalField) chronoField25, (long) (short) 1);
        long long28 = localTime17.getLong((java.time.temporal.TemporalField) chronoField25);
        java.time.LocalTime localTime30 = localTime17.withSecond((int) (short) 1);
        int int31 = localTime30.getMinute();
        java.time.LocalTime localTime33 = localTime30.plusHours((long) (-1));
        java.time.LocalDateTime localDateTime34 = java.time.LocalDateTime.now();
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery35 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period36 = localDateTime34.query(periodTemporalQuery35);
        java.time.Period period37 = localTime33.query(periodTemporalQuery35);
        java.time.Period period38 = zonedDateTime12.query(periodTemporalQuery35);
        java.time.ZonedDateTime zonedDateTime40 = zonedDateTime12.minusDays((long) 0);
        java.time.ZonedDateTime zonedDateTime42 = zonedDateTime12.withYear(5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 52 + "'", int6 == 52);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "gregory" + "'", str7, "gregory");
        org.junit.Assert.assertNotNull(zonedDateTime8);
        org.junit.Assert.assertNotNull(zonedDateTime10);
        org.junit.Assert.assertNotNull(zonedDateTime12);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertNotNull(localTime23);
        org.junit.Assert.assertNotNull(localTime24);
        org.junit.Assert.assertTrue("'" + chronoField25 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField25.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime27);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 3601000000001L + "'", long28 == 3601000000001L);
        org.junit.Assert.assertNotNull(localTime30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(localTime33);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(periodTemporalQuery35);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertNotNull(zonedDateTime40);
        org.junit.Assert.assertNotNull(zonedDateTime42);
    }

    @Test
    public void test6185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6185");
        java.util.GregorianCalendar gregorianCalendar5 = new java.util.GregorianCalendar(12, 4096, 7, (-1), (int) (short) 10);
        int int6 = gregorianCalendar5.getWeeksInWeekYear();
        java.lang.String str7 = gregorianCalendar5.getCalendarType();
        java.time.ZonedDateTime zonedDateTime8 = gregorianCalendar5.toZonedDateTime();
        java.time.ZonedDateTime zonedDateTime10 = zonedDateTime8.minusMonths((long) 10);
        java.time.chrono.ChronoZonedDateTime<java.time.LocalDate> localDateChronoZonedDateTime11 = zonedDateTime8.withEarlierOffsetAtOverlap();
        java.time.ZonedDateTime zonedDateTime13 = zonedDateTime8.minusMonths((long) 4200);
        java.time.ZonedDateTime zonedDateTime15 = zonedDateTime13.plusNanos(8L);
        java.time.ZonedDateTime zonedDateTime17 = zonedDateTime15.minusSeconds((long) 83400);
        java.time.temporal.ChronoField chronoField18 = java.time.temporal.ChronoField.MILLI_OF_DAY;
        int int19 = zonedDateTime17.get((java.time.temporal.TemporalField) chronoField18);
        java.time.LocalDateTime localDateTime20 = java.time.LocalDateTime.now();
        java.time.LocalTime localTime25 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime26 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime25);
        java.time.temporal.ChronoField chronoField27 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime29 = localTime25.with((java.time.temporal.TemporalField) chronoField27, (long) (short) 1);
        java.util.Locale locale30 = java.util.Locale.GERMANY;
        java.lang.String str31 = chronoField27.getDisplayName(locale30);
        long long32 = localDateTime20.getLong((java.time.temporal.TemporalField) chronoField27);
        long long33 = zonedDateTime17.getLong((java.time.temporal.TemporalField) chronoField27);
        int int34 = zonedDateTime17.getMinute();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 52 + "'", int6 == 52);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "gregory" + "'", str7, "gregory");
        org.junit.Assert.assertNotNull(zonedDateTime8);
        org.junit.Assert.assertNotNull(zonedDateTime10);
        org.junit.Assert.assertNotNull(localDateChronoZonedDateTime11);
        org.junit.Assert.assertNotNull(zonedDateTime13);
        org.junit.Assert.assertNotNull(zonedDateTime15);
        org.junit.Assert.assertNotNull(zonedDateTime17);
        org.junit.Assert.assertTrue("'" + chronoField18 + "' != '" + java.time.temporal.ChronoField.MILLI_OF_DAY + "'", chronoField18.equals(java.time.temporal.ChronoField.MILLI_OF_DAY));
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 86399965 + "'", int19 == 86399965);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localTime25);
        org.junit.Assert.assertNotNull(localTime26);
        org.junit.Assert.assertTrue("'" + chronoField27 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField27.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime29);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "NanoOfDay" + "'", str31, "NanoOfDay");
// flaky:         org.junit.Assert.assertTrue("'" + long32 + "' != '" + 34971827000000L + "'", long32 == 34971827000000L);
// flaky:         org.junit.Assert.assertTrue("'" + long33 + "' != '" + 86399965000008L + "'", long33 == 86399965000008L);
// flaky:         org.junit.Assert.assertTrue("'" + int34 + "' != '" + 59 + "'", int34 == 59);
    }

    @Test
    public void test6186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6186");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.Duration duration2 = new org.joda.time.Duration(readableInstant0, readableInstant1);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = duration2.toPeriodTo(readableInstant3, periodType4);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.Duration duration8 = new org.joda.time.Duration(readableInstant6, readableInstant7);
        long long9 = duration8.getMillis();
        boolean boolean10 = duration2.isShorterThan((org.joda.time.ReadableDuration) duration8);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) 3, chronology12);
        org.joda.time.DateTime.Property property14 = dateTime13.dayOfYear();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight((java.lang.Object) dateTime13, chronology15);
        org.joda.time.MutableDateTime mutableDateTime17 = dateTime13.toMutableDateTime();
        mutableDateTime17.addYears((int) (short) 100);
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime17.dayOfWeek();
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime17.year();
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime17.weekyear();
        boolean boolean23 = duration2.equals((java.lang.Object) mutableDateTime17);
        mutableDateTime17.addMonths((int) ' ');
        mutableDateTime17.add((long) (byte) 10);
        org.joda.time.Period period28 = org.joda.time.Period.ZERO;
        org.joda.time.Period period29 = period28.normalizedStandard();
        org.joda.time.Period period31 = period28.plusHours(2);
        java.time.chrono.IsoEra isoEra32 = java.time.chrono.IsoEra.CE;
        boolean boolean33 = period31.equals((java.lang.Object) isoEra32);
        int int34 = period31.getMinutes();
        mutableDateTime17.add((org.joda.time.ReadablePeriod) period31);
        java.util.TimeZone timeZone37 = null;
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forTimeZone(timeZone37);
        org.joda.time.DateMidnight dateMidnight39 = new org.joda.time.DateMidnight((long) 1970, dateTimeZone38);
        long long42 = dateTimeZone38.convertLocalToUTC((long) 3, false);
        long long45 = dateTimeZone38.convertLocalToUTC(0L, true);
        mutableDateTime17.setZoneRetainFields(dateTimeZone38);
        java.lang.String str47 = dateTimeZone38.toString();
        org.joda.time.chrono.EthiopicChronology ethiopicChronology48 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone38);
        org.joda.time.DateTimeField dateTimeField49 = ethiopicChronology48.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone50 = ethiopicChronology48.getZone();
        org.joda.time.DateTimeField dateTimeField51 = ethiopicChronology48.era();
        org.joda.time.DateTimeField dateTimeField52 = ethiopicChronology48.secondOfDay();
        org.joda.time.DateTimeField dateTimeField53 = ethiopicChronology48.minuteOfHour();
        org.joda.time.DurationField durationField54 = ethiopicChronology48.months();
        org.joda.time.DateTimeField dateTimeField55 = ethiopicChronology48.weekyearOfCentury();
        org.joda.time.Minutes minutes56 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes58 = minutes56.minus(12);
        org.joda.time.Minutes minutes59 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes61 = minutes59.minus(12);
        org.joda.time.Minutes minutes62 = minutes56.minus(minutes59);
        org.joda.time.DurationFieldType durationFieldType63 = minutes56.getFieldType();
        int[] intArray66 = ethiopicChronology48.get((org.joda.time.ReadablePeriod) minutes56, (long) 30, (long) 741000000);
        org.joda.time.DateTimeField dateTimeField67 = ethiopicChronology48.yearOfEra();
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertTrue("'" + isoEra32 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra32.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 3L + "'", long42 == 3L);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Etc/UTC" + "'", str47, "Etc/UTC");
        org.junit.Assert.assertNotNull(ethiopicChronology48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(durationField54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(minutes56);
        org.junit.Assert.assertNotNull(minutes58);
        org.junit.Assert.assertNotNull(minutes59);
        org.junit.Assert.assertNotNull(minutes61);
        org.junit.Assert.assertNotNull(minutes62);
        org.junit.Assert.assertNotNull(durationFieldType63);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[12349]");
        org.junit.Assert.assertNotNull(dateTimeField67);
    }

    @Test
    public void test6187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6187");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 3, chronology1);
        org.joda.time.DateTime.Property property3 = dateTime2.dayOfYear();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight((java.lang.Object) dateTime2, chronology4);
        org.joda.time.MutableDateTime mutableDateTime6 = dateTime2.toMutableDateTime();
        mutableDateTime6.addYears((int) (short) 100);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime6.dayOfWeek();
        int int10 = property9.get();
        org.joda.time.MutableDateTime mutableDateTime11 = property9.roundHalfCeiling();
        mutableDateTime11.setWeekyear((-201));
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime11.dayOfYear();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 3 + "'", int10 == 3);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(property14);
    }

    @Test
    public void test6188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6188");
        org.joda.time.Weeks weeks1 = org.joda.time.Weeks.ONE;
        java.util.concurrent.TimeUnit timeUnit2 = java.util.concurrent.TimeUnit.NANOSECONDS;
        boolean boolean3 = weeks1.equals((java.lang.Object) timeUnit2);
        org.joda.time.MutablePeriod mutablePeriod4 = weeks1.toMutablePeriod();
        int int5 = mutablePeriod4.getSeconds();
        mutablePeriod4.addSeconds(10);
        org.joda.time.Weeks weeks9 = org.joda.time.Weeks.ONE;
        java.util.concurrent.TimeUnit timeUnit10 = java.util.concurrent.TimeUnit.NANOSECONDS;
        boolean boolean11 = weeks9.equals((java.lang.Object) timeUnit10);
        org.joda.time.MutablePeriod mutablePeriod12 = weeks9.toMutablePeriod();
        int int13 = mutablePeriod12.getSeconds();
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.Duration duration16 = new org.joda.time.Duration(readableInstant14, readableInstant15);
        long long17 = duration16.getMillis();
        org.joda.time.Duration duration19 = duration16.plus((long) (byte) 1);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.LocalTime localTime23 = new org.joda.time.LocalTime((long) 0, chronology22);
        org.joda.time.Chronology chronology24 = localTime23.getChronology();
        java.util.Locale locale25 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale locale26 = java.util.Locale.GERMANY;
        java.lang.String str27 = locale25.getDisplayScript(locale26);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket29 = new org.joda.time.format.DateTimeParserBucket((long) 1970, chronology24, locale25, (java.lang.Integer) 1);
        mutablePeriod12.setPeriod((org.joda.time.ReadableDuration) duration16, chronology24);
        mutablePeriod4.setPeriod(86399L, chronology24);
        org.joda.time.MutableDateTime mutableDateTime32 = new org.joda.time.MutableDateTime(0L, chronology24);
        org.joda.time.MutableDateTime mutableDateTime33 = mutableDateTime32.toMutableDateTime();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((long) 3, chronology35);
        org.joda.time.DateTime.Property property37 = dateTime36.dayOfYear();
        org.joda.time.Interval interval38 = property37.toInterval();
        org.joda.time.DateTimeField dateTimeField39 = property37.getField();
        org.joda.time.DateTime dateTime41 = property37.addToCopy((long) (byte) 1);
        org.joda.time.DateTime dateTime43 = dateTime41.withYear(4);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime((long) 3, chronology45);
        org.joda.time.Period period47 = org.joda.time.Period.ZERO;
        org.joda.time.Period period48 = period47.normalizedStandard();
        org.joda.time.Period period50 = period48.minusMinutes((int) ' ');
        org.joda.time.Period period52 = period50.minusMonths((int) (byte) 0);
        org.joda.time.PeriodType periodType53 = period52.getPeriodType();
        org.joda.time.DateTime dateTime54 = dateTime46.minus((org.joda.time.ReadablePeriod) period52);
        org.joda.time.Duration duration55 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime43, (org.joda.time.ReadableInstant) dateTime54);
        org.joda.time.PeriodType periodType57 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.LocalTime localTime60 = new org.joda.time.LocalTime((long) 0, chronology59);
        org.joda.time.Chronology chronology61 = localTime60.getChronology();
        org.joda.time.DateTimeField dateTimeField62 = chronology61.weekyearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime63 = org.joda.time.MutableDateTime.now(chronology61);
        org.joda.time.DateTimeField dateTimeField64 = chronology61.monthOfYear();
        org.joda.time.Period period65 = new org.joda.time.Period(3601000000001L, periodType57, chronology61);
        org.joda.time.Period period66 = duration55.toPeriod(chronology61);
        org.joda.time.Interval interval67 = new org.joda.time.Interval((org.joda.time.ReadableInstant) mutableDateTime32, (org.joda.time.ReadableDuration) duration55);
        org.joda.time.ReadablePeriod readablePeriod68 = null;
        mutableDateTime32.add(readablePeriod68, 27);
        org.junit.Assert.assertNotNull(weeks1);
        org.junit.Assert.assertNotNull(timeUnit2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(mutablePeriod4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(weeks9);
        org.junit.Assert.assertNotNull(timeUnit10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(mutablePeriod12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(mutableDateTime33);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(period47);
        org.junit.Assert.assertNotNull(period48);
        org.junit.Assert.assertNotNull(period50);
        org.junit.Assert.assertNotNull(period52);
        org.junit.Assert.assertNotNull(periodType53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(periodType57);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertNotNull(mutableDateTime63);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertNotNull(period66);
    }

    @Test
    public void test6189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6189");
        java.util.TimeZone timeZone1 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight((long) 12, dateTimeZone2);
        org.joda.time.MutableDateTime mutableDateTime4 = new org.joda.time.MutableDateTime(dateTimeZone2);
        org.joda.time.TimeOfDay timeOfDay5 = new org.joda.time.TimeOfDay(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTimeZone2);
    }

    @Test
    public void test6190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6190");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 3, chronology1);
        org.joda.time.DateTime.Property property3 = dateTime2.dayOfYear();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight((java.lang.Object) dateTime2, chronology4);
        org.joda.time.MutableDateTime mutableDateTime6 = dateTime2.toMutableDateTime();
        mutableDateTime6.addYears((int) (short) 100);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime6.millisOfDay();
        org.joda.time.PeriodType periodType10 = org.joda.time.PeriodType.years();
        org.joda.time.DurationFieldType durationFieldType11 = org.joda.time.DurationFieldType.halfdays();
        int int12 = periodType10.indexOf(durationFieldType11);
        mutableDateTime6.add(durationFieldType11, (int) 'a');
        java.util.TimeZone timeZone16 = null;
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forTimeZone(timeZone16);
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight((long) 1970, dateTimeZone17);
        mutableDateTime6.setTime((org.joda.time.ReadableInstant) dateMidnight18);
        mutableDateTime6.addWeekyears(52);
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime6.secondOfDay();
        java.lang.String str23 = property22.getAsString();
        org.joda.time.MutableDateTime mutableDateTime24 = property22.roundFloor();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(periodType10);
        org.junit.Assert.assertNotNull(durationFieldType11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "0" + "'", str23, "0");
        org.junit.Assert.assertNotNull(mutableDateTime24);
    }

    @Test
    public void test6191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6191");
        org.joda.time.Period period2 = new org.joda.time.Period((long) (-1000000), (long) 1);
    }

    @Test
    public void test6192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6192");
        java.io.File file2 = java.io.File.createTempFile("PT3600S", "secondOfMinute");
        java.io.File file3 = file2.getCanonicalFile();
        java.io.File file4 = file3.getAbsoluteFile();
        file3.deleteOnExit();
        boolean boolean6 = file3.setReadOnly();
        java.nio.file.Path path7 = file3.toPath();
        org.junit.Assert.assertNotNull(file2);
        org.junit.Assert.assertEquals(file2.getParent(), "/tmp");
// flaky:         org.junit.Assert.assertEquals(file2.toString(), "/tmp/PT3600S288689484000404677secondOfMinute");
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "/tmp");
// flaky:         org.junit.Assert.assertEquals(file3.toString(), "/tmp/PT3600S288689484000404677secondOfMinute");
        org.junit.Assert.assertNotNull(file4);
        org.junit.Assert.assertEquals(file4.getParent(), "/tmp");
// flaky:         org.junit.Assert.assertEquals(file4.toString(), "/tmp/PT3600S288689484000404677secondOfMinute");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(path7);
    }

    @Test
    public void test6193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6193");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.now();
        java.time.temporal.ChronoField chronoField1 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime3 = localDateTime0.with((java.time.temporal.TemporalField) chronoField1, (long) 10);
        java.time.LocalDateTime localDateTime5 = localDateTime0.minusMinutes((long) 12);
        java.time.LocalDate localDate8 = java.time.LocalDate.ofEpochDay((long) ' ');
        java.time.OffsetTime offsetTime9 = java.time.OffsetTime.MAX;
        java.time.LocalTime localTime10 = offsetTime9.toLocalTime();
        java.lang.String str11 = offsetTime9.toString();
        java.time.Duration duration12 = java.time.Duration.ZERO;
        java.lang.String str13 = duration12.toString();
        java.time.OffsetTime offsetTime14 = offsetTime9.plus((java.time.temporal.TemporalAmount) duration12);
        java.time.LocalTime localTime15 = offsetTime9.toLocalTime();
        java.time.chrono.ChronoLocalDateTime<?> wildcardChronoLocalDateTime16 = localDate8.atTime(localTime15);
        java.time.LocalDate localDate18 = localDate8.minusWeeks((long) 2097);
        java.util.TimeZone timeZone20 = null;
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forTimeZone(timeZone20);
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight((long) 1970, dateTimeZone21);
        long long25 = dateTimeZone21.convertLocalToUTC((long) 3, false);
        long long28 = dateTimeZone21.convertLocalToUTC(0L, true);
        boolean boolean29 = localDate8.equals((java.lang.Object) true);
        int int30 = localDate8.lengthOfMonth();
        java.time.LocalDate localDate33 = java.time.LocalDate.ofEpochDay((long) ' ');
        int int34 = localDate33.getMonthValue();
        org.joda.time.Period period35 = org.joda.time.Period.ZERO;
        org.joda.time.Period period36 = period35.normalizedStandard();
        org.joda.time.Period period38 = period35.plusHours(2);
        java.time.chrono.IsoEra isoEra39 = java.time.chrono.IsoEra.CE;
        boolean boolean40 = period38.equals((java.lang.Object) isoEra39);
        java.time.LocalTime localTime45 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime46 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime45);
        java.time.LocalTime localTime51 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime52 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime51);
        java.time.temporal.ChronoField chronoField53 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime55 = localTime51.with((java.time.temporal.TemporalField) chronoField53, (long) (short) 1);
        long long56 = localTime45.getLong((java.time.temporal.TemporalField) chronoField53);
        boolean boolean57 = isoEra39.isSupported((java.time.temporal.TemporalField) chronoField53);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery58 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period59 = isoEra39.query(periodTemporalQuery58);
        boolean boolean60 = period59.isNegative();
        java.time.Period period62 = period59.plusDays((long) ' ');
        java.time.temporal.ChronoField chronoField63 = java.time.temporal.ChronoField.SECOND_OF_DAY;
        boolean boolean64 = period59.equals((java.lang.Object) chronoField63);
        boolean boolean65 = localDate33.isSupported((java.time.temporal.TemporalField) chronoField63);
        java.time.temporal.TemporalUnit temporalUnit66 = chronoField63.getRangeUnit();
        java.time.chrono.ChronoLocalDate chronoLocalDate67 = localDate8.minus((long) (-1), temporalUnit66);
        java.time.LocalDateTime localDateTime68 = localDateTime0.minus(1645434620L, temporalUnit66);
        java.time.LocalDate localDate69 = localDateTime0.toLocalDate();
        java.time.LocalDateTime localDateTime71 = localDateTime0.plusSeconds((long) ':');
        java.lang.String str72 = localDateTime0.toString();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertTrue("'" + chronoField1 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField1.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(offsetTime9);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "23:59:59.999999999-18:00" + "'", str11, "23:59:59.999999999-18:00");
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "PT0S" + "'", str13, "PT0S");
        org.junit.Assert.assertNotNull(offsetTime14);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(wildcardChronoLocalDateTime16);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 3L + "'", long25 == 3L);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 28 + "'", int30 == 28);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2 + "'", int34 == 2);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertTrue("'" + isoEra39 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra39.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(localTime45);
        org.junit.Assert.assertNotNull(localTime46);
        org.junit.Assert.assertNotNull(localTime51);
        org.junit.Assert.assertNotNull(localTime52);
        org.junit.Assert.assertTrue("'" + chronoField53 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField53.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime55);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 3601000000001L + "'", long56 == 3601000000001L);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(periodTemporalQuery58);
        org.junit.Assert.assertNotNull(period59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(period62);
        org.junit.Assert.assertTrue("'" + chronoField63 + "' != '" + java.time.temporal.ChronoField.SECOND_OF_DAY + "'", chronoField63.equals(java.time.temporal.ChronoField.SECOND_OF_DAY));
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + temporalUnit66 + "' != '" + java.time.temporal.ChronoUnit.DAYS + "'", temporalUnit66.equals(java.time.temporal.ChronoUnit.DAYS));
        org.junit.Assert.assertNotNull(chronoLocalDate67);
        org.junit.Assert.assertNotNull(localDateTime68);
        org.junit.Assert.assertNotNull(localDate69);
        org.junit.Assert.assertNotNull(localDateTime71);
// flaky:         org.junit.Assert.assertEquals("'" + str72 + "' != '" + "2022-02-21T09:42:51.958" + "'", str72, "2022-02-21T09:42:51.958");
    }

    @Test
    public void test6194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6194");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("file");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "file");
    }

    @Test
    public void test6195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6195");
        org.joda.time.Period period0 = org.joda.time.Period.ZERO;
        org.joda.time.Period period1 = period0.normalizedStandard();
        org.joda.time.Period period3 = period0.plusHours(2);
        java.time.chrono.IsoEra isoEra4 = java.time.chrono.IsoEra.CE;
        boolean boolean5 = period3.equals((java.lang.Object) isoEra4);
        java.time.LocalTime localTime10 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime11 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime10);
        java.time.LocalTime localTime16 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime17 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime16);
        java.time.temporal.ChronoField chronoField18 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime20 = localTime16.with((java.time.temporal.TemporalField) chronoField18, (long) (short) 1);
        long long21 = localTime10.getLong((java.time.temporal.TemporalField) chronoField18);
        boolean boolean22 = isoEra4.isSupported((java.time.temporal.TemporalField) chronoField18);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery23 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period24 = isoEra4.query(periodTemporalQuery23);
        boolean boolean25 = period24.isNegative();
        java.time.Period period27 = period24.plusDays((long) ' ');
        boolean boolean28 = period24.isNegative();
        java.time.Period period30 = period24.minusYears((long) 10);
        org.joda.time.Period period31 = org.joda.time.Period.ZERO;
        org.joda.time.Period period32 = period31.normalizedStandard();
        org.joda.time.Period period34 = period31.plusHours(2);
        java.time.chrono.IsoEra isoEra35 = java.time.chrono.IsoEra.CE;
        boolean boolean36 = period34.equals((java.lang.Object) isoEra35);
        java.time.LocalTime localTime41 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime42 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime41);
        java.time.LocalTime localTime47 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime48 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime47);
        java.time.temporal.ChronoField chronoField49 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime51 = localTime47.with((java.time.temporal.TemporalField) chronoField49, (long) (short) 1);
        long long52 = localTime41.getLong((java.time.temporal.TemporalField) chronoField49);
        boolean boolean53 = isoEra35.isSupported((java.time.temporal.TemporalField) chronoField49);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery54 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period55 = isoEra35.query(periodTemporalQuery54);
        java.time.chrono.ChronoPeriod chronoPeriod56 = period30.minus((java.time.temporal.TemporalAmount) period55);
        java.time.chrono.ChronoPeriod chronoPeriod58 = period30.multipliedBy(4096);
        int int59 = period30.getMonths();
        java.time.chrono.IsoChronology isoChronology60 = period30.getChronology();
        java.time.ZoneOffset zoneOffset63 = java.time.ZoneOffset.ofHoursMinutes(1, 10);
        java.time.LocalDate localDate64 = java.time.LocalDate.now((java.time.ZoneId) zoneOffset63);
        java.time.Clock clock65 = java.time.Clock.system((java.time.ZoneId) zoneOffset63);
        java.time.Duration duration67 = java.time.Duration.ofSeconds((long) 0);
        java.time.Duration duration69 = duration67.multipliedBy((long) (byte) -1);
        java.time.Clock clock70 = java.time.Clock.offset(clock65, duration67);
        java.time.chrono.ChronoLocalDate chronoLocalDate71 = isoChronology60.dateNow(clock65);
        int int72 = chronoLocalDate71.lengthOfYear();
        java.time.LocalDate localDate74 = java.time.LocalDate.ofEpochDay((long) ' ');
        java.time.OffsetTime offsetTime75 = java.time.OffsetTime.MAX;
        java.time.LocalTime localTime76 = offsetTime75.toLocalTime();
        java.lang.String str77 = offsetTime75.toString();
        java.time.Duration duration78 = java.time.Duration.ZERO;
        java.lang.String str79 = duration78.toString();
        java.time.OffsetTime offsetTime80 = offsetTime75.plus((java.time.temporal.TemporalAmount) duration78);
        java.time.LocalTime localTime81 = offsetTime75.toLocalTime();
        java.time.chrono.ChronoLocalDateTime<?> wildcardChronoLocalDateTime82 = localDate74.atTime(localTime81);
        java.time.LocalDate localDate84 = localDate74.plusMonths(0L);
        java.time.chrono.Chronology chronology85 = localDate84.getChronology();
        java.time.chrono.ChronoPeriod chronoPeriod86 = chronoLocalDate71.until((java.time.chrono.ChronoLocalDate) localDate84);
        java.time.chrono.IsoChronology isoChronology87 = localDate84.getChronology();
        org.junit.Assert.assertNotNull(period0);
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertTrue("'" + isoEra4 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra4.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertTrue("'" + chronoField18 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField18.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 3601000000001L + "'", long21 == 3601000000001L);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(periodTemporalQuery23);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertTrue("'" + isoEra35 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra35.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(localTime41);
        org.junit.Assert.assertNotNull(localTime42);
        org.junit.Assert.assertNotNull(localTime47);
        org.junit.Assert.assertNotNull(localTime48);
        org.junit.Assert.assertTrue("'" + chronoField49 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField49.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime51);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 3601000000001L + "'", long52 == 3601000000001L);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(periodTemporalQuery54);
        org.junit.Assert.assertNotNull(period55);
        org.junit.Assert.assertNotNull(chronoPeriod56);
        org.junit.Assert.assertNotNull(chronoPeriod58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(isoChronology60);
        org.junit.Assert.assertNotNull(zoneOffset63);
        org.junit.Assert.assertNotNull(localDate64);
        org.junit.Assert.assertNotNull(clock65);
        org.junit.Assert.assertNotNull(duration67);
        org.junit.Assert.assertNotNull(duration69);
        org.junit.Assert.assertNotNull(clock70);
        org.junit.Assert.assertNotNull(chronoLocalDate71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 365 + "'", int72 == 365);
        org.junit.Assert.assertNotNull(localDate74);
        org.junit.Assert.assertNotNull(offsetTime75);
        org.junit.Assert.assertNotNull(localTime76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "23:59:59.999999999-18:00" + "'", str77, "23:59:59.999999999-18:00");
        org.junit.Assert.assertNotNull(duration78);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "PT0S" + "'", str79, "PT0S");
        org.junit.Assert.assertNotNull(offsetTime80);
        org.junit.Assert.assertNotNull(localTime81);
        org.junit.Assert.assertNotNull(wildcardChronoLocalDateTime82);
        org.junit.Assert.assertNotNull(localDate84);
        org.junit.Assert.assertNotNull(chronology85);
        org.junit.Assert.assertNotNull(chronoPeriod86);
        org.junit.Assert.assertNotNull(isoChronology87);
    }

    @Test
    public void test6196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6196");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes2 = minutes0.minus(12);
        org.joda.time.Minutes minutes3 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes5 = minutes3.minus(12);
        org.joda.time.Minutes minutes6 = minutes0.minus(minutes3);
        org.joda.time.Minutes minutes7 = minutes3.negated();
        org.joda.time.Minutes minutes8 = org.joda.time.Minutes.MIN_VALUE;
        boolean boolean9 = minutes3.isGreaterThan(minutes8);
        org.joda.time.Minutes minutes10 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes12 = minutes10.minus(12);
        org.joda.time.Minutes minutes13 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes15 = minutes13.minus(12);
        org.joda.time.Minutes minutes16 = minutes10.minus(minutes13);
        org.joda.time.Minutes minutes17 = minutes13.negated();
        org.joda.time.Minutes minutes18 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes20 = minutes18.minus(12);
        org.joda.time.Minutes minutes21 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes23 = minutes21.minus(12);
        org.joda.time.Minutes minutes24 = minutes18.minus(minutes21);
        org.joda.time.Minutes minutes25 = minutes21.negated();
        org.joda.time.Minutes minutes26 = org.joda.time.Minutes.MIN_VALUE;
        boolean boolean27 = minutes21.isGreaterThan(minutes26);
        java.lang.String str28 = minutes21.toString();
        org.joda.time.Minutes minutes29 = minutes13.minus(minutes21);
        org.joda.time.Minutes minutes30 = minutes8.plus(minutes21);
        org.joda.time.DurationFieldType durationFieldType31 = minutes21.getFieldType();
        org.joda.time.Minutes minutes32 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes34 = minutes32.minus(12);
        org.joda.time.Minutes minutes35 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes37 = minutes35.minus(12);
        java.lang.String str38 = minutes35.toString();
        org.joda.time.Minutes minutes39 = minutes32.minus(minutes35);
        org.joda.time.Minutes minutes41 = minutes32.dividedBy(679);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Minutes minutes42 = minutes21.plus(minutes32);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: The calculation caused an overflow: 2147483647 + 2147483647");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(minutes3);
        org.junit.Assert.assertNotNull(minutes5);
        org.junit.Assert.assertNotNull(minutes6);
        org.junit.Assert.assertNotNull(minutes7);
        org.junit.Assert.assertNotNull(minutes8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(minutes10);
        org.junit.Assert.assertNotNull(minutes12);
        org.junit.Assert.assertNotNull(minutes13);
        org.junit.Assert.assertNotNull(minutes15);
        org.junit.Assert.assertNotNull(minutes16);
        org.junit.Assert.assertNotNull(minutes17);
        org.junit.Assert.assertNotNull(minutes18);
        org.junit.Assert.assertNotNull(minutes20);
        org.junit.Assert.assertNotNull(minutes21);
        org.junit.Assert.assertNotNull(minutes23);
        org.junit.Assert.assertNotNull(minutes24);
        org.junit.Assert.assertNotNull(minutes25);
        org.junit.Assert.assertNotNull(minutes26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "PT2147483647M" + "'", str28, "PT2147483647M");
        org.junit.Assert.assertNotNull(minutes29);
        org.junit.Assert.assertNotNull(minutes30);
        org.junit.Assert.assertNotNull(durationFieldType31);
        org.junit.Assert.assertNotNull(minutes32);
        org.junit.Assert.assertNotNull(minutes34);
        org.junit.Assert.assertNotNull(minutes35);
        org.junit.Assert.assertNotNull(minutes37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "PT2147483647M" + "'", str38, "PT2147483647M");
        org.junit.Assert.assertNotNull(minutes39);
        org.junit.Assert.assertNotNull(minutes41);
    }

    @Test
    public void test6197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6197");
        org.joda.time.TimeOfDay timeOfDay1 = org.joda.time.TimeOfDay.fromMillisOfDay((long) (short) 0);
        org.joda.time.TimeOfDay timeOfDay3 = org.joda.time.TimeOfDay.fromMillisOfDay((long) (short) 0);
        org.joda.time.Hours hours4 = org.joda.time.Hours.hoursBetween((org.joda.time.ReadablePartial) timeOfDay1, (org.joda.time.ReadablePartial) timeOfDay3);
        org.joda.time.DurationFieldType durationFieldType5 = org.joda.time.DurationFieldType.hours();
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay3.withFieldAdded(durationFieldType5, (int) (byte) 0);
        int int8 = timeOfDay3.getMillisOfSecond();
        org.joda.time.TimeOfDay timeOfDay10 = timeOfDay3.plusHours(9);
        org.joda.time.TimeOfDay.Property property11 = timeOfDay3.secondOfMinute();
        java.time.ZoneOffset zoneOffset14 = java.time.ZoneOffset.ofHoursMinutes(1, 10);
        java.time.LocalDate localDate15 = java.time.LocalDate.now((java.time.ZoneId) zoneOffset14);
        boolean boolean16 = property11.equals((java.lang.Object) localDate15);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = property11.getFieldType();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) 3, chronology19);
        org.joda.time.DateTime.Property property21 = dateTime20.dayOfYear();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateMidnight dateMidnight23 = new org.joda.time.DateMidnight((java.lang.Object) dateTime20, chronology22);
        org.joda.time.MutableDateTime mutableDateTime24 = dateTime20.toMutableDateTime();
        mutableDateTime24.addYears((int) (short) 100);
        org.joda.time.MutableDateTime.Property property27 = mutableDateTime24.dayOfWeek();
        org.joda.time.MutableDateTime.Property property28 = mutableDateTime24.year();
        java.util.TimeZone timeZone29 = null;
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forTimeZone(timeZone29);
        mutableDateTime24.setZone(dateTimeZone30);
        java.util.Locale locale33 = java.util.Locale.TAIWAN;
        java.lang.String str34 = dateTimeZone30.getShortName((long) 64, locale33);
        int int35 = property11.getMaximumTextLength(locale33);
        org.joda.time.TimeOfDay timeOfDay36 = property11.getTimeOfDay();
        org.joda.time.DurationField durationField37 = property11.getRangeDurationField();
        org.joda.time.DurationField durationField38 = property11.getDurationField();
        int int39 = property11.get();
        org.junit.Assert.assertNotNull(timeOfDay1);
        org.junit.Assert.assertNotNull(timeOfDay3);
        org.junit.Assert.assertNotNull(hours4);
        org.junit.Assert.assertNotNull(durationFieldType5);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(zoneOffset14);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(mutableDateTime24);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "+00:00" + "'", str34, "+00:00");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2 + "'", int35 == 2);
        org.junit.Assert.assertNotNull(timeOfDay36);
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
    }

    @Test
    public void test6198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6198");
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay((long) (short) 100);
    }

    @Test
    public void test6199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6199");
        java.io.File file0 = null;
        java.io.File file2 = new java.io.File(file0, "1970-01-01T00:00:00.003Z");
        java.net.URL uRL3 = file2.toURL();
        boolean boolean4 = file2.canRead();
        java.nio.file.Path path5 = file2.toPath();
        java.nio.file.Path path6 = path5.toAbsolutePath();
        java.io.File file7 = path6.toFile();
        java.io.File file8 = null;
        java.io.File file10 = new java.io.File(file8, "1970-01-01T00:00:00.003Z");
        java.net.URL uRL11 = file10.toURL();
        boolean boolean12 = file10.canRead();
        java.nio.file.Path path13 = file10.toPath();
        java.nio.file.Path path14 = path13.toAbsolutePath();
        java.io.File file15 = null;
        java.io.File file17 = new java.io.File(file15, "1970-01-01T00:00:00.003Z");
        java.net.URL uRL18 = file17.toURL();
        boolean boolean19 = file17.canRead();
        java.nio.file.Path path20 = file17.toPath();
        java.nio.file.Path path21 = path20.toAbsolutePath();
        java.io.File file22 = path21.toFile();
        boolean boolean23 = path13.endsWith(path21);
        java.io.File file24 = null;
        java.io.File file26 = new java.io.File(file24, "1970-01-01T00:00:00.003Z");
        java.net.URL uRL27 = file26.toURL();
        boolean boolean28 = file26.canRead();
        java.nio.file.Path path29 = file26.toPath();
        java.nio.file.Path path30 = path29.toAbsolutePath();
        boolean boolean31 = path13.endsWith(path29);
        int int32 = path6.compareTo(path29);
        java.io.File file33 = null;
        java.io.File file35 = new java.io.File(file33, "1970-01-01T00:00:00.003Z");
        boolean boolean36 = file35.exists();
        boolean boolean37 = file35.mkdirs();
        java.net.URI uRI38 = file35.toURI();
        java.lang.String str39 = file35.getName();
        boolean boolean40 = file35.delete();
        java.nio.file.Path path41 = file35.toPath();
        java.nio.file.Path path42 = path29.resolve(path41);
        java.io.File file43 = null;
        java.io.File file45 = new java.io.File(file43, "1970-01-01T00:00:00.003Z");
        java.net.URL uRL46 = file45.toURL();
        boolean boolean47 = file45.canRead();
        java.nio.file.Path path48 = file45.toPath();
        java.nio.file.Path path49 = path48.toAbsolutePath();
        java.io.File file50 = null;
        java.io.File file52 = new java.io.File(file50, "1970-01-01T00:00:00.003Z");
        java.net.URL uRL53 = file52.toURL();
        boolean boolean54 = file52.canRead();
        java.nio.file.Path path55 = file52.toPath();
        java.nio.file.Path path56 = path55.toAbsolutePath();
        java.io.File file57 = null;
        java.io.File file59 = new java.io.File(file57, "1970-01-01T00:00:00.003Z");
        java.net.URL uRL60 = file59.toURL();
        boolean boolean61 = file59.canRead();
        java.nio.file.Path path62 = file59.toPath();
        java.nio.file.Path path63 = path62.toAbsolutePath();
        java.io.File file64 = path63.toFile();
        boolean boolean65 = path55.endsWith(path63);
        java.util.Iterator<java.nio.file.Path> pathItor66 = path55.iterator();
        java.nio.file.Path path67 = path55.toAbsolutePath();
        boolean boolean68 = path48.endsWith(path55);
        boolean boolean69 = path29.endsWith(path55);
        org.junit.Assert.assertNull("file2.getParent() == null", file2.getParent());
        org.junit.Assert.assertEquals(file2.toString(), "1970-01-01T00:00:00.003Z");
        org.junit.Assert.assertNotNull(uRL3);
// flaky:         org.junit.Assert.assertEquals(uRL3.toString(), "file:/experiment/1970-01-01T00:00:00.003Z/");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(path5);
        org.junit.Assert.assertNotNull(path6);
        org.junit.Assert.assertNotNull(file7);
// flaky:         org.junit.Assert.assertEquals(file7.getParent(), "/experiment");
// flaky:         org.junit.Assert.assertEquals(file7.toString(), "/experiment/1970-01-01T00:00:00.003Z");
        org.junit.Assert.assertNull("file10.getParent() == null", file10.getParent());
        org.junit.Assert.assertEquals(file10.toString(), "1970-01-01T00:00:00.003Z");
        org.junit.Assert.assertNotNull(uRL11);
// flaky:         org.junit.Assert.assertEquals(uRL11.toString(), "file:/experiment/1970-01-01T00:00:00.003Z/");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(path13);
        org.junit.Assert.assertNotNull(path14);
        org.junit.Assert.assertNull("file17.getParent() == null", file17.getParent());
        org.junit.Assert.assertEquals(file17.toString(), "1970-01-01T00:00:00.003Z");
        org.junit.Assert.assertNotNull(uRL18);
// flaky:         org.junit.Assert.assertEquals(uRL18.toString(), "file:/experiment/1970-01-01T00:00:00.003Z/");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(path20);
        org.junit.Assert.assertNotNull(path21);
        org.junit.Assert.assertNotNull(file22);
// flaky:         org.junit.Assert.assertEquals(file22.getParent(), "/experiment");
// flaky:         org.junit.Assert.assertEquals(file22.toString(), "/experiment/1970-01-01T00:00:00.003Z");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull("file26.getParent() == null", file26.getParent());
        org.junit.Assert.assertEquals(file26.toString(), "1970-01-01T00:00:00.003Z");
        org.junit.Assert.assertNotNull(uRL27);
// flaky:         org.junit.Assert.assertEquals(uRL27.toString(), "file:/experiment/1970-01-01T00:00:00.003Z/");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(path29);
        org.junit.Assert.assertNotNull(path30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-2) + "'", int32 == (-2));
        org.junit.Assert.assertNull("file35.getParent() == null", file35.getParent());
        org.junit.Assert.assertEquals(file35.toString(), "1970-01-01T00:00:00.003Z");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(uRI38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "1970-01-01T00:00:00.003Z" + "'", str39, "1970-01-01T00:00:00.003Z");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(path41);
        org.junit.Assert.assertNotNull(path42);
        org.junit.Assert.assertNull("file45.getParent() == null", file45.getParent());
        org.junit.Assert.assertEquals(file45.toString(), "1970-01-01T00:00:00.003Z");
        org.junit.Assert.assertNotNull(uRL46);
// flaky:         org.junit.Assert.assertEquals(uRL46.toString(), "file:/experiment/1970-01-01T00:00:00.003Z");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(path48);
        org.junit.Assert.assertNotNull(path49);
        org.junit.Assert.assertNull("file52.getParent() == null", file52.getParent());
        org.junit.Assert.assertEquals(file52.toString(), "1970-01-01T00:00:00.003Z");
        org.junit.Assert.assertNotNull(uRL53);
// flaky:         org.junit.Assert.assertEquals(uRL53.toString(), "file:/experiment/1970-01-01T00:00:00.003Z");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(path55);
        org.junit.Assert.assertNotNull(path56);
        org.junit.Assert.assertNull("file59.getParent() == null", file59.getParent());
        org.junit.Assert.assertEquals(file59.toString(), "1970-01-01T00:00:00.003Z");
        org.junit.Assert.assertNotNull(uRL60);
// flaky:         org.junit.Assert.assertEquals(uRL60.toString(), "file:/experiment/1970-01-01T00:00:00.003Z");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(path62);
        org.junit.Assert.assertNotNull(path63);
        org.junit.Assert.assertNotNull(file64);
// flaky:         org.junit.Assert.assertEquals(file64.getParent(), "/experiment");
// flaky:         org.junit.Assert.assertEquals(file64.toString(), "/experiment/1970-01-01T00:00:00.003Z");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(pathItor66);
        org.junit.Assert.assertNotNull(path67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
    }

    @Test
    public void test6200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6200");
        java.net.URI uRI1 = new java.net.URI("hi!");
        java.lang.String str2 = uRI1.toASCIIString();
        java.lang.String str3 = uRI1.getHost();
        java.lang.String str4 = uRI1.getRawSchemeSpecificPart();
        java.lang.String str5 = uRI1.getRawPath();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi!" + "'", str2, "hi!");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
    }

    @Test
    public void test6201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6201");
        java.util.stream.LongStream longStream2 = java.util.stream.LongStream.rangeClosed((long) 5, (long) 'a');
        java.util.Spliterator.OfLong ofLong3 = longStream2.spliterator();
        java.util.LongSummaryStatistics longSummaryStatistics4 = new java.util.LongSummaryStatistics();
        longSummaryStatistics4.accept(3);
        long long7 = longSummaryStatistics4.getMax();
        java.util.LongSummaryStatistics longSummaryStatistics8 = new java.util.LongSummaryStatistics();
        longSummaryStatistics8.accept(3);
        java.util.function.LongConsumer longConsumer11 = longSummaryStatistics4.andThen((java.util.function.LongConsumer) longSummaryStatistics8);
        java.util.LongSummaryStatistics longSummaryStatistics12 = new java.util.LongSummaryStatistics();
        longSummaryStatistics12.accept(3);
        long long15 = longSummaryStatistics12.getMax();
        double double16 = longSummaryStatistics12.getAverage();
        longSummaryStatistics12.accept(6);
        java.util.function.LongConsumer longConsumer19 = longSummaryStatistics4.andThen((java.util.function.LongConsumer) longSummaryStatistics12);
        double double20 = longSummaryStatistics4.getAverage();
        boolean boolean21 = ofLong3.tryAdvance((java.util.function.LongConsumer) longSummaryStatistics4);
        java.util.Comparator<? super java.lang.Long> wildcardComparator22 = ofLong3.getComparator();
        java.util.Spliterator.OfLong ofLong23 = ofLong3.trySplit();
        org.junit.Assert.assertNotNull(longStream2);
        org.junit.Assert.assertNotNull(ofLong3);
        org.junit.Assert.assertEquals(longSummaryStatistics4.toString(), "LongSummaryStatistics{count=2, sum=8, min=3, average=4.000000, max=5}");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 3L + "'", long7 == 3L);
        org.junit.Assert.assertEquals(longSummaryStatistics8.toString(), "LongSummaryStatistics{count=1, sum=3, min=3, average=3.000000, max=3}");
        org.junit.Assert.assertNotNull(longConsumer11);
        org.junit.Assert.assertEquals(longSummaryStatistics12.toString(), "LongSummaryStatistics{count=2, sum=9, min=3, average=4.500000, max=6}");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 3L + "'", long15 == 3L);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 3.0d + "'", double16 == 3.0d);
        org.junit.Assert.assertNotNull(longConsumer19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 3.0d + "'", double20 == 3.0d);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNull(wildcardComparator22);
        org.junit.Assert.assertNotNull(ofLong23);
    }

    @Test
    public void test6202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6202");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        boolean boolean3 = periodFormatter2.isParser();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalTime localTime7 = new org.joda.time.LocalTime((long) 0, chronology6);
        org.joda.time.Chronology chronology8 = localTime7.getChronology();
        java.util.Locale locale9 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale locale10 = java.util.Locale.GERMANY;
        java.lang.String str11 = locale9.getDisplayScript(locale10);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket13 = new org.joda.time.format.DateTimeParserBucket((long) 1970, chronology8, locale9, (java.lang.Integer) 1);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.LocalTime localTime16 = new org.joda.time.LocalTime((long) 0, chronology15);
        org.joda.time.Chronology chronology17 = localTime16.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.weekyearOfCentury();
        org.joda.time.DurationField durationField19 = dateTimeField18.getLeapDurationField();
        dateTimeParserBucket13.saveField(dateTimeField18, (int) 'u');
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.yearOfCentury();
        java.time.temporal.ChronoField chronoField24 = java.time.temporal.ChronoField.DAY_OF_WEEK;
        java.time.LocalDateTime localDateTime25 = java.time.LocalDateTime.now();
        java.time.temporal.ChronoField chronoField26 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime28 = localDateTime25.with((java.time.temporal.TemporalField) chronoField26, (long) 10);
        java.time.Duration duration30 = java.time.Duration.ofSeconds((long) 0);
        java.time.temporal.Temporal temporal31 = localDateTime25.minus((java.time.temporal.TemporalAmount) duration30);
        long long32 = chronoField24.getFrom((java.time.temporal.TemporalAccessor) temporal31);
        java.time.LocalTime localTime37 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime38 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime37);
        java.time.temporal.ChronoField chronoField39 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime41 = localTime37.with((java.time.temporal.TemporalField) chronoField39, (long) (short) 1);
        java.util.Locale locale42 = java.util.Locale.GERMANY;
        java.lang.String str43 = chronoField39.getDisplayName(locale42);
        java.lang.String str44 = chronoField24.getDisplayName(locale42);
        dateTimeParserBucket13.saveField(dateTimeFieldType22, "Optional.empty", locale42);
        java.lang.String str46 = locale42.getDisplayCountry();
        org.joda.time.format.PeriodFormatter periodFormatter47 = periodFormatter2.withLocale(locale42);
        org.joda.time.PeriodType periodType48 = periodFormatter2.getParseType();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertTrue("'" + chronoField24 + "' != '" + java.time.temporal.ChronoField.DAY_OF_WEEK + "'", chronoField24.equals(java.time.temporal.ChronoField.DAY_OF_WEEK));
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertTrue("'" + chronoField26 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField26.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime28);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(temporal31);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 1L + "'", long32 == 1L);
        org.junit.Assert.assertNotNull(localTime37);
        org.junit.Assert.assertNotNull(localTime38);
        org.junit.Assert.assertTrue("'" + chronoField39 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField39.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime41);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "NanoOfDay" + "'", str43, "NanoOfDay");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Wochentag" + "'", str44, "Wochentag");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "Germany" + "'", str46, "Germany");
        org.junit.Assert.assertNotNull(periodFormatter47);
        org.junit.Assert.assertNull(periodType48);
    }

    @Test
    public void test6203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6203");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Locale.LanguageRange[] languageRangeArray3 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList4 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList4, languageRangeArray3);
        java.util.Locale locale6 = java.util.Locale.JAPAN;
        java.util.Locale[] localeArray7 = new java.util.Locale[] { locale6 };
        java.util.ArrayList<java.util.Locale> localeList8 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList8, localeArray7);
        java.util.List<java.util.Locale> localeList10 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList4, (java.util.Collection<java.util.Locale>) localeList8);
        localeList10.clear();
        java.util.List<java.util.Locale> localeList12 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.util.Locale>) localeList10);
        java.util.Locale.LanguageRange[] languageRangeArray13 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList14 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList14, languageRangeArray13);
        java.util.Locale.LanguageRange[] languageRangeArray16 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList17 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList17, languageRangeArray16);
        java.util.Locale locale19 = java.util.Locale.JAPAN;
        java.util.Locale[] localeArray20 = new java.util.Locale[] { locale19 };
        java.util.ArrayList<java.util.Locale> localeList21 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList21, localeArray20);
        java.util.List<java.util.Locale> localeList23 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList17, (java.util.Collection<java.util.Locale>) localeList21);
        localeList23.clear();
        java.util.List<java.util.Locale> localeList25 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList14, (java.util.Collection<java.util.Locale>) localeList23);
        java.util.List<java.util.Locale> localeList26 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.util.Locale>) localeList25);
        java.util.stream.Collector.Characteristics characteristics27 = java.util.stream.Collector.Characteristics.UNORDERED;
        boolean boolean28 = localeList25.contains((java.lang.Object) characteristics27);
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property30 = localDate29.dayOfMonth();
        boolean boolean31 = localeList25.remove((java.lang.Object) property30);
        java.util.Locale locale33 = new java.util.Locale("hi!");
        boolean boolean34 = locale33.hasExtensions();
        java.time.format.DecimalStyle decimalStyle35 = java.time.format.DecimalStyle.of(locale33);
        java.util.Set<java.lang.String> strSet36 = locale33.getUnicodeLocaleKeys();
        java.nio.CharBuffer charBuffer38 = java.nio.CharBuffer.wrap((java.lang.CharSequence) "2022-02-21T09:34:06.670Z");
        java.nio.CharBuffer charBuffer40 = java.nio.CharBuffer.wrap((java.lang.CharSequence) "German");
        java.nio.charset.Charset charset41 = java.nio.charset.Charset.defaultCharset();
        java.nio.charset.CharsetDecoder charsetDecoder42 = charset41.newDecoder();
        java.nio.charset.Charset charset43 = java.nio.charset.Charset.defaultCharset();
        boolean boolean44 = charset41.contains(charset43);
        java.nio.charset.CharsetEncoder charsetEncoder45 = charset41.newEncoder();
        char[] charArray46 = new char[] {};
        java.nio.CharBuffer charBuffer47 = java.nio.CharBuffer.wrap(charArray46);
        java.nio.ByteBuffer byteBuffer48 = charsetEncoder45.encode(charBuffer47);
        java.nio.CharBuffer charBuffer49 = charBuffer47.slice();
        java.nio.CharBuffer charBuffer50 = charBuffer47.compact();
        java.nio.CharBuffer charBuffer51 = charBuffer47.duplicate();
        java.nio.charset.Charset charset52 = java.nio.charset.Charset.defaultCharset();
        java.nio.charset.CharsetDecoder charsetDecoder53 = charset52.newDecoder();
        float float54 = charsetDecoder53.maxCharsPerByte();
        java.nio.charset.Charset charset55 = java.nio.charset.Charset.defaultCharset();
        java.nio.charset.CharsetDecoder charsetDecoder56 = charset55.newDecoder();
        java.nio.charset.Charset charset57 = java.nio.charset.Charset.defaultCharset();
        boolean boolean58 = charset55.contains(charset57);
        java.nio.charset.CharsetEncoder charsetEncoder59 = charset55.newEncoder();
        char[] charArray60 = new char[] {};
        java.nio.CharBuffer charBuffer61 = java.nio.CharBuffer.wrap(charArray60);
        java.nio.ByteBuffer byteBuffer62 = charsetEncoder59.encode(charBuffer61);
        char[] charArray69 = new char[] { '#', '/', '4', 'a', '4', 'u' };
        java.nio.CharBuffer charBuffer70 = java.nio.CharBuffer.wrap(charArray69);
        java.nio.charset.CoderResult coderResult72 = charsetDecoder53.decode(byteBuffer62, charBuffer70, false);
        boolean boolean73 = charBuffer70.isDirect();
        char[] charArray74 = charBuffer70.array();
        int int75 = charBuffer70.length();
        java.nio.charset.Charset charset76 = java.nio.charset.Charset.defaultCharset();
        java.nio.charset.CharsetDecoder charsetDecoder77 = charset76.newDecoder();
        java.nio.charset.Charset charset78 = java.nio.charset.Charset.defaultCharset();
        java.nio.charset.CharsetDecoder charsetDecoder79 = charset78.newDecoder();
        java.nio.charset.Charset charset80 = java.nio.charset.Charset.defaultCharset();
        boolean boolean81 = charset78.contains(charset80);
        java.nio.charset.CharsetEncoder charsetEncoder82 = charset78.newEncoder();
        char[] charArray83 = new char[] {};
        java.nio.CharBuffer charBuffer84 = java.nio.CharBuffer.wrap(charArray83);
        java.nio.ByteBuffer byteBuffer85 = charsetEncoder82.encode(charBuffer84);
        java.nio.CharBuffer charBuffer86 = charBuffer84.slice();
        java.nio.CharBuffer charBuffer87 = charBuffer84.compact();
        java.nio.CharBuffer charBuffer88 = charBuffer84.duplicate();
        java.nio.ByteBuffer byteBuffer89 = charset76.encode(charBuffer84);
        java.nio.CharBuffer[] charBufferArray90 = new java.nio.CharBuffer[] { charBuffer38, charBuffer40, charBuffer47, charBuffer70, charBuffer84 };
        java.nio.CharBuffer[] charBufferArray91 = strSet36.toArray(charBufferArray90);
        boolean boolean92 = localeList25.removeAll((java.util.Collection<java.lang.String>) strSet36);
        java.util.Iterator<java.lang.String> strItor93 = strSet36.iterator();
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(languageRangeArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(localeArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(localeList10);
        org.junit.Assert.assertNotNull(localeList12);
        org.junit.Assert.assertNotNull(languageRangeArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(languageRangeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(localeArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(localeList23);
        org.junit.Assert.assertNotNull(localeList25);
        org.junit.Assert.assertNotNull(localeList26);
        org.junit.Assert.assertTrue("'" + characteristics27 + "' != '" + java.util.stream.Collector.Characteristics.UNORDERED + "'", characteristics27.equals(java.util.stream.Collector.Characteristics.UNORDERED));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals(locale33.toString(), "hi!");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(decimalStyle35);
        org.junit.Assert.assertNotNull(strSet36);
        org.junit.Assert.assertNotNull(charBuffer38);
        org.junit.Assert.assertNotNull(charBuffer40);
        org.junit.Assert.assertNotNull(charset41);
        org.junit.Assert.assertNotNull(charsetDecoder42);
        org.junit.Assert.assertNotNull(charset43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(charsetEncoder45);
        org.junit.Assert.assertNotNull(charArray46);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray46), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray46), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray46), "[]");
        org.junit.Assert.assertNotNull(charBuffer47);
        org.junit.Assert.assertNotNull(byteBuffer48);
        org.junit.Assert.assertNotNull(charBuffer49);
        org.junit.Assert.assertNotNull(charBuffer50);
        org.junit.Assert.assertNotNull(charBuffer51);
        org.junit.Assert.assertNotNull(charset52);
        org.junit.Assert.assertNotNull(charsetDecoder53);
        org.junit.Assert.assertTrue("'" + float54 + "' != '" + 1.0f + "'", float54 == 1.0f);
        org.junit.Assert.assertNotNull(charset55);
        org.junit.Assert.assertNotNull(charsetDecoder56);
        org.junit.Assert.assertNotNull(charset57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(charsetEncoder59);
        org.junit.Assert.assertNotNull(charArray60);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray60), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray60), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray60), "[]");
        org.junit.Assert.assertNotNull(charBuffer61);
        org.junit.Assert.assertNotNull(byteBuffer62);
        org.junit.Assert.assertNotNull(charArray69);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray69), "#/4a4u");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray69), "#/4a4u");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray69), "[#, /, 4, a, 4, u]");
        org.junit.Assert.assertNotNull(charBuffer70);
        org.junit.Assert.assertNotNull(coderResult72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(charArray74);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray74), "#/4a4u");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray74), "#/4a4u");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray74), "[#, /, 4, a, 4, u]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 6 + "'", int75 == 6);
        org.junit.Assert.assertNotNull(charset76);
        org.junit.Assert.assertNotNull(charsetDecoder77);
        org.junit.Assert.assertNotNull(charset78);
        org.junit.Assert.assertNotNull(charsetDecoder79);
        org.junit.Assert.assertNotNull(charset80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNotNull(charsetEncoder82);
        org.junit.Assert.assertNotNull(charArray83);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray83), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray83), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray83), "[]");
        org.junit.Assert.assertNotNull(charBuffer84);
        org.junit.Assert.assertNotNull(byteBuffer85);
        org.junit.Assert.assertNotNull(charBuffer86);
        org.junit.Assert.assertNotNull(charBuffer87);
        org.junit.Assert.assertNotNull(charBuffer88);
        org.junit.Assert.assertNotNull(byteBuffer89);
        org.junit.Assert.assertNotNull(charBufferArray90);
        org.junit.Assert.assertNotNull(charBufferArray91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(strItor93);
    }

    @Test
    public void test6204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6204");
        java.util.Date date6 = new java.util.Date((int) (byte) 100, 4, 306, (int) ':', 52, (int) ' ');
        org.joda.time.LocalTime localTime7 = org.joda.time.LocalTime.fromDateFields(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sun Mar 04 10:52:32 UTC 2001");
        org.junit.Assert.assertNotNull(localTime7);
    }

    @Test
    public void test6205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6205");
        org.joda.time.TimeOfDay timeOfDay1 = org.joda.time.TimeOfDay.fromMillisOfDay((long) (short) 0);
        org.joda.time.TimeOfDay timeOfDay3 = org.joda.time.TimeOfDay.fromMillisOfDay((long) (short) 0);
        org.joda.time.Hours hours4 = org.joda.time.Hours.hoursBetween((org.joda.time.ReadablePartial) timeOfDay1, (org.joda.time.ReadablePartial) timeOfDay3);
        org.joda.time.DurationFieldType durationFieldType5 = org.joda.time.DurationFieldType.hours();
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay3.withFieldAdded(durationFieldType5, (int) (byte) 0);
        int int8 = timeOfDay3.getMillisOfSecond();
        org.joda.time.TimeOfDay timeOfDay10 = timeOfDay3.plusHours(9);
        org.joda.time.TimeOfDay.Property property11 = timeOfDay3.secondOfMinute();
        java.time.ZoneOffset zoneOffset14 = java.time.ZoneOffset.ofHoursMinutes(1, 10);
        java.time.LocalDate localDate15 = java.time.LocalDate.now((java.time.ZoneId) zoneOffset14);
        boolean boolean16 = property11.equals((java.lang.Object) localDate15);
        java.time.ZoneOffset zoneOffset19 = java.time.ZoneOffset.ofHoursMinutes(1, 10);
        java.time.LocalDate localDate20 = java.time.LocalDate.now((java.time.ZoneId) zoneOffset19);
        java.time.Clock clock21 = java.time.Clock.system((java.time.ZoneId) zoneOffset19);
        java.time.Clock clock22 = java.time.Clock.tickSeconds((java.time.ZoneId) zoneOffset19);
        java.util.function.Predicate<org.joda.time.DateTimeFieldType> dateTimeFieldTypePredicate24 = java.util.function.Predicate.isEqual((java.lang.Object) 1.0d);
        java.util.Map<java.lang.String, java.lang.String> strMap25 = java.time.ZoneId.SHORT_IDS;
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        boolean boolean27 = strMap25.containsValue((java.lang.Object) dateTimeFieldType26);
        boolean boolean28 = dateTimeFieldTypePredicate24.test(dateTimeFieldType26);
        boolean boolean29 = zoneOffset19.equals((java.lang.Object) boolean28);
        java.util.Optional<java.lang.Exception> exceptionOptional30 = java.util.Optional.empty();
        java.lang.String str31 = exceptionOptional30.toString();
        java.time.LocalDateTime localDateTime32 = java.time.LocalDateTime.now();
        java.time.temporal.ChronoField chronoField33 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime35 = localDateTime32.with((java.time.temporal.TemporalField) chronoField33, (long) 10);
        java.time.LocalDateTime localDateTime37 = localDateTime32.withDayOfYear((int) '/');
        boolean boolean38 = exceptionOptional30.equals((java.lang.Object) localDateTime37);
        java.time.LocalDateTime localDateTime40 = localDateTime37.withNano(2);
        java.time.temporal.ChronoField chronoField41 = java.time.temporal.ChronoField.AMPM_OF_DAY;
        int int42 = localDateTime37.get((java.time.temporal.TemporalField) chronoField41);
        java.time.temporal.ChronoField chronoField43 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_MONTH;
        java.time.temporal.ValueRange valueRange44 = localDateTime37.range((java.time.temporal.TemporalField) chronoField43);
        boolean boolean45 = zoneOffset19.isSupported((java.time.temporal.TemporalField) chronoField43);
        java.time.ZonedDateTime zonedDateTime46 = localDate15.atStartOfDay((java.time.ZoneId) zoneOffset19);
        org.junit.Assert.assertNotNull(timeOfDay1);
        org.junit.Assert.assertNotNull(timeOfDay3);
        org.junit.Assert.assertNotNull(hours4);
        org.junit.Assert.assertNotNull(durationFieldType5);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(zoneOffset14);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(zoneOffset19);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(clock21);
        org.junit.Assert.assertNotNull(clock22);
        org.junit.Assert.assertNotNull(dateTimeFieldTypePredicate24);
        org.junit.Assert.assertNotNull(strMap25);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(exceptionOptional30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Optional.empty" + "'", str31, "Optional.empty");
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertTrue("'" + chronoField33 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField33.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertTrue("'" + chronoField41 + "' != '" + java.time.temporal.ChronoField.AMPM_OF_DAY + "'", chronoField41.equals(java.time.temporal.ChronoField.AMPM_OF_DAY));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + chronoField43 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_MONTH + "'", chronoField43.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_MONTH));
        org.junit.Assert.assertNotNull(valueRange44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(zonedDateTime46);
    }

    @Test
    public void test6206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6206");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((long) 0, chronology2);
        org.joda.time.Chronology chronology4 = localTime3.getChronology();
        java.util.Locale locale5 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale locale6 = java.util.Locale.GERMANY;
        java.lang.String str7 = locale5.getDisplayScript(locale6);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket9 = new org.joda.time.format.DateTimeParserBucket((long) 1970, chronology4, locale5, (java.lang.Integer) 1);
        org.joda.time.DateTime dateTime10 = org.joda.time.DateTime.now(chronology4);
        int int11 = dateTime10.getYearOfEra();
        org.joda.time.DateTime dateTime13 = dateTime10.plusMillis(733000000);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2022 + "'", int11 == 2022);
        org.junit.Assert.assertNotNull(dateTime13);
    }

    @Test
    public void test6207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6207");
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.Duration duration3 = new org.joda.time.Duration(readableInstant1, readableInstant2);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.PeriodType periodType5 = null;
        org.joda.time.Period period6 = duration3.toPeriodTo(readableInstant4, periodType5);
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.Duration duration9 = new org.joda.time.Duration(readableInstant7, readableInstant8);
        long long10 = duration9.getMillis();
        boolean boolean11 = duration3.isShorterThan((org.joda.time.ReadableDuration) duration9);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) 3, chronology13);
        org.joda.time.DateTime.Property property15 = dateTime14.dayOfYear();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight((java.lang.Object) dateTime14, chronology16);
        org.joda.time.MutableDateTime mutableDateTime18 = dateTime14.toMutableDateTime();
        mutableDateTime18.addYears((int) (short) 100);
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime18.dayOfWeek();
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime18.year();
        org.joda.time.MutableDateTime.Property property23 = mutableDateTime18.weekyear();
        boolean boolean24 = duration3.equals((java.lang.Object) mutableDateTime18);
        mutableDateTime18.addMonths((int) ' ');
        mutableDateTime18.add((long) (byte) 10);
        org.joda.time.Period period29 = org.joda.time.Period.ZERO;
        org.joda.time.Period period30 = period29.normalizedStandard();
        org.joda.time.Period period32 = period29.plusHours(2);
        java.time.chrono.IsoEra isoEra33 = java.time.chrono.IsoEra.CE;
        boolean boolean34 = period32.equals((java.lang.Object) isoEra33);
        int int35 = period32.getMinutes();
        mutableDateTime18.add((org.joda.time.ReadablePeriod) period32);
        java.util.TimeZone timeZone38 = null;
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forTimeZone(timeZone38);
        org.joda.time.DateMidnight dateMidnight40 = new org.joda.time.DateMidnight((long) 1970, dateTimeZone39);
        long long43 = dateTimeZone39.convertLocalToUTC((long) 3, false);
        long long46 = dateTimeZone39.convertLocalToUTC(0L, true);
        mutableDateTime18.setZoneRetainFields(dateTimeZone39);
        java.lang.String str48 = dateTimeZone39.toString();
        org.joda.time.chrono.EthiopicChronology ethiopicChronology49 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone39);
        org.joda.time.DateTimeField dateTimeField50 = ethiopicChronology49.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone51 = ethiopicChronology49.getZone();
        org.joda.time.DateTimeField dateTimeField52 = ethiopicChronology49.era();
        org.joda.time.DateTimeField dateTimeField53 = ethiopicChronology49.secondOfDay();
        org.joda.time.DateTimeField dateTimeField54 = ethiopicChronology49.minuteOfHour();
        org.joda.time.DurationField durationField55 = ethiopicChronology49.months();
        org.joda.time.DateMidnight dateMidnight56 = new org.joda.time.DateMidnight(1645401600000L, (org.joda.time.Chronology) ethiopicChronology49);
        org.joda.time.DateTimeField dateTimeField57 = ethiopicChronology49.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField58 = ethiopicChronology49.millisOfDay();
        // The following exception was thrown during execution in test generation
        try {
            long long61 = dateTimeField58.set((long) 57, 96000000);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 96000000 for millisOfDay must be in the range [0,86399999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(mutableDateTime18);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertTrue("'" + isoEra33 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra33.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 3L + "'", long43 == 3L);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "Etc/UTC" + "'", str48, "Etc/UTC");
        org.junit.Assert.assertNotNull(ethiopicChronology49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(durationField55);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(dateTimeField58);
    }

    @Test
    public void test6208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6208");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 3, chronology1);
        org.joda.time.DateTime.Property property3 = dateTime2.dayOfYear();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight((java.lang.Object) dateTime2, chronology4);
        org.joda.time.MutableDateTime mutableDateTime6 = dateTime2.toMutableDateTime();
        org.joda.time.Days days7 = org.joda.time.Days.ONE;
        org.joda.time.MutableInterval mutableInterval8 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadablePeriod) days7);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) 3, chronology10);
        org.joda.time.DateTime.Property property12 = dateTime11.dayOfYear();
        org.joda.time.Interval interval13 = property12.toInterval();
        mutableInterval8.setInterval((org.joda.time.ReadableInterval) interval13);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) 3, chronology16);
        org.joda.time.DateTime.Property property18 = dateTime17.dayOfYear();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight((java.lang.Object) dateTime17, chronology19);
        org.joda.time.DateMidnight dateMidnight22 = dateMidnight20.minusMonths((-1));
        boolean boolean23 = interval13.isAfter((org.joda.time.ReadableInstant) dateMidnight20);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((long) 3, chronology25);
        org.joda.time.DateTime.Property property27 = dateTime26.dayOfYear();
        org.joda.time.Interval interval28 = property27.toInterval();
        org.joda.time.Period period29 = org.joda.time.Period.ZERO;
        org.joda.time.Period period30 = period29.normalizedStandard();
        org.joda.time.Period period32 = period30.minusMinutes((int) ' ');
        org.joda.time.Period period34 = period32.withMinutes(32769);
        boolean boolean35 = interval28.equals((java.lang.Object) period34);
        boolean boolean36 = interval13.contains((org.joda.time.ReadableInterval) interval28);
        org.joda.time.ReadableInstant readableInstant37 = null;
        org.joda.time.ReadableInstant readableInstant38 = null;
        org.joda.time.Duration duration39 = new org.joda.time.Duration(readableInstant37, readableInstant38);
        org.joda.time.Seconds seconds40 = duration39.toStandardSeconds();
        org.joda.time.Duration duration42 = duration39.minus((long) 'x');
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.LocalTime localTime45 = new org.joda.time.LocalTime((long) 0, chronology44);
        org.joda.time.Chronology chronology46 = localTime45.getChronology();
        org.joda.time.DateTimeField dateTimeField47 = chronology46.weekyearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime48 = org.joda.time.MutableDateTime.now(chronology46);
        mutableDateTime48.setWeekOfWeekyear((int) '#');
        mutableDateTime48.addHours(0);
        int int53 = mutableDateTime48.getMillisOfDay();
        mutableDateTime48.addDays(366);
        boolean boolean56 = duration42.equals((java.lang.Object) mutableDateTime48);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval57 = interval13.withDurationBeforeEnd((org.joda.time.ReadableDuration) duration42);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(days7);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(seconds40);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(mutableDateTime48);
// flaky:         org.junit.Assert.assertTrue("'" + int53 + "' != '" + 34972320 + "'", int53 == 34972320);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test6209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6209");
        java.time.OffsetTime offsetTime0 = java.time.OffsetTime.MAX;
        java.time.LocalTime localTime1 = offsetTime0.toLocalTime();
        java.lang.String str2 = offsetTime0.toString();
        java.time.Duration duration3 = java.time.Duration.ZERO;
        java.lang.String str4 = duration3.toString();
        java.time.OffsetTime offsetTime5 = offsetTime0.plus((java.time.temporal.TemporalAmount) duration3);
        java.time.OffsetTime offsetTime7 = offsetTime0.plusNanos((long) 0);
        java.time.LocalTime localTime12 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime13 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime12);
        java.time.temporal.ChronoField chronoField14 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime16 = localTime12.with((java.time.temporal.TemporalField) chronoField14, (long) (short) 1);
        java.util.Locale locale17 = java.util.Locale.GERMANY;
        java.lang.String str18 = chronoField14.getDisplayName(locale17);
        java.time.OffsetTime offsetTime20 = offsetTime7.with((java.time.temporal.TemporalField) chronoField14, (long) 28);
        org.joda.time.Period period21 = org.joda.time.Period.ZERO;
        org.joda.time.Period period22 = period21.normalizedStandard();
        org.joda.time.Period period24 = period21.plusHours(2);
        java.time.chrono.IsoEra isoEra25 = java.time.chrono.IsoEra.CE;
        boolean boolean26 = period24.equals((java.lang.Object) isoEra25);
        java.time.LocalTime localTime31 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime32 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime31);
        java.time.LocalTime localTime37 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime38 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime37);
        java.time.temporal.ChronoField chronoField39 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime41 = localTime37.with((java.time.temporal.TemporalField) chronoField39, (long) (short) 1);
        long long42 = localTime31.getLong((java.time.temporal.TemporalField) chronoField39);
        boolean boolean43 = isoEra25.isSupported((java.time.temporal.TemporalField) chronoField39);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery44 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period45 = isoEra25.query(periodTemporalQuery44);
        boolean boolean46 = period45.isNegative();
        java.time.Period period48 = period45.plusDays((long) ' ');
        java.time.temporal.ChronoField chronoField49 = java.time.temporal.ChronoField.SECOND_OF_DAY;
        boolean boolean50 = period45.equals((java.lang.Object) chronoField49);
        java.time.chrono.ChronoPeriod chronoPeriod51 = period45.negated();
        java.time.OffsetTime offsetTime52 = offsetTime7.minus((java.time.temporal.TemporalAmount) period45);
        java.time.Period period54 = period45.plusYears((long) 2022);
        java.time.Period period56 = period54.minusDays((long) (short) 100);
        java.time.Period period57 = java.time.Period.from((java.time.temporal.TemporalAmount) period56);
        java.time.LocalDate localDate59 = java.time.LocalDate.ofEpochDay((long) ' ');
        java.time.OffsetTime offsetTime60 = java.time.OffsetTime.MAX;
        java.time.LocalTime localTime61 = offsetTime60.toLocalTime();
        java.lang.String str62 = offsetTime60.toString();
        java.time.Duration duration63 = java.time.Duration.ZERO;
        java.lang.String str64 = duration63.toString();
        java.time.OffsetTime offsetTime65 = offsetTime60.plus((java.time.temporal.TemporalAmount) duration63);
        java.time.LocalTime localTime66 = offsetTime60.toLocalTime();
        java.time.chrono.ChronoLocalDateTime<?> wildcardChronoLocalDateTime67 = localDate59.atTime(localTime66);
        java.time.LocalDate localDate69 = localDate59.minusWeeks((long) 2097);
        java.time.LocalDate localDate71 = localDate69.minusMonths((long) (byte) 0);
        java.time.temporal.Temporal temporal72 = period57.subtractFrom((java.time.temporal.Temporal) localDate71);
        java.time.LocalTime localTime77 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime78 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime77);
        java.time.LocalTime localTime80 = localTime78.withNano(2022);
        java.time.chrono.ChronoLocalDateTime<?> wildcardChronoLocalDateTime81 = localDate71.atTime(localTime78);
        // The following exception was thrown during execution in test generation
        try {
            java.time.LocalDate localDate83 = localDate71.minusMonths(1645436569272L);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for Year (valid values -999999999 - 999999999): -137119712177");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(offsetTime0);
        org.junit.Assert.assertNotNull(localTime1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "23:59:59.999999999-18:00" + "'", str2, "23:59:59.999999999-18:00");
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "PT0S" + "'", str4, "PT0S");
        org.junit.Assert.assertNotNull(offsetTime5);
        org.junit.Assert.assertNotNull(offsetTime7);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertTrue("'" + chronoField14 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField14.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "NanoOfDay" + "'", str18, "NanoOfDay");
        org.junit.Assert.assertNotNull(offsetTime20);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertTrue("'" + isoEra25 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra25.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(localTime31);
        org.junit.Assert.assertNotNull(localTime32);
        org.junit.Assert.assertNotNull(localTime37);
        org.junit.Assert.assertNotNull(localTime38);
        org.junit.Assert.assertTrue("'" + chronoField39 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField39.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime41);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 3601000000001L + "'", long42 == 3601000000001L);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(periodTemporalQuery44);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(period48);
        org.junit.Assert.assertTrue("'" + chronoField49 + "' != '" + java.time.temporal.ChronoField.SECOND_OF_DAY + "'", chronoField49.equals(java.time.temporal.ChronoField.SECOND_OF_DAY));
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(chronoPeriod51);
        org.junit.Assert.assertNotNull(offsetTime52);
        org.junit.Assert.assertNotNull(period54);
        org.junit.Assert.assertNotNull(period56);
        org.junit.Assert.assertNotNull(period57);
        org.junit.Assert.assertNotNull(localDate59);
        org.junit.Assert.assertNotNull(offsetTime60);
        org.junit.Assert.assertNotNull(localTime61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "23:59:59.999999999-18:00" + "'", str62, "23:59:59.999999999-18:00");
        org.junit.Assert.assertNotNull(duration63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "PT0S" + "'", str64, "PT0S");
        org.junit.Assert.assertNotNull(offsetTime65);
        org.junit.Assert.assertNotNull(localTime66);
        org.junit.Assert.assertNotNull(wildcardChronoLocalDateTime67);
        org.junit.Assert.assertNotNull(localDate69);
        org.junit.Assert.assertNotNull(localDate71);
        org.junit.Assert.assertNotNull(temporal72);
        org.junit.Assert.assertNotNull(localTime77);
        org.junit.Assert.assertNotNull(localTime78);
        org.junit.Assert.assertNotNull(localTime80);
        org.junit.Assert.assertNotNull(wildcardChronoLocalDateTime81);
    }

    @Test
    public void test6210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6210");
        java.net.URI uRI1 = new java.net.URI("599b081c1808");
        java.net.URI uRI2 = uRI1.normalize();
        org.junit.Assert.assertNotNull(uRI2);
    }

    @Test
    public void test6211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6211");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((long) 0, chronology1);
        org.joda.time.Chronology chronology3 = localTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField4 = chronology3.weekyearOfCentury();
        org.joda.time.tz.NameProvider nameProvider6 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.LocalTime localTime10 = new org.joda.time.LocalTime((long) 0, chronology9);
        org.joda.time.Chronology chronology11 = localTime10.getChronology();
        org.joda.time.DateTimeField dateTimeField12 = chronology11.weekyearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime13 = org.joda.time.MutableDateTime.now(chronology11);
        org.joda.time.DateTimeField dateTimeField14 = chronology11.monthOfYear();
        java.util.Locale locale15 = java.util.Locale.getDefault();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket17 = new org.joda.time.format.DateTimeParserBucket((long) 28, chronology11, locale15, (java.lang.Integer) 0);
        java.lang.String str20 = nameProvider6.getShortName(locale15, "22", "Chinese");
        java.lang.String str21 = dateTimeField4.getAsText(64, locale15);
        java.util.Set<java.lang.String> strSet22 = locale15.getUnicodeLocaleAttributes();
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(nameProvider6);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(locale15);
// flaky:         org.junit.Assert.assertEquals(locale15.toString(), "");
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "64" + "'", str21, "64");
        org.junit.Assert.assertNotNull(strSet22);
    }

    @Test
    public void test6212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6212");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 3, chronology1);
        org.joda.time.DateTime.Property property3 = dateTime2.dayOfYear();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight((java.lang.Object) dateTime2, chronology4);
        org.joda.time.MutableDateTime mutableDateTime6 = dateTime2.toMutableDateTime();
        org.joda.time.Days days7 = org.joda.time.Days.ONE;
        org.joda.time.MutableInterval mutableInterval8 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadablePeriod) days7);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) 3, chronology10);
        org.joda.time.DateTime.Property property12 = dateTime11.dayOfYear();
        org.joda.time.Interval interval13 = property12.toInterval();
        mutableInterval8.setInterval((org.joda.time.ReadableInterval) interval13);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) 3, chronology16);
        org.joda.time.DateTime.Property property18 = dateTime17.dayOfYear();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight((java.lang.Object) dateTime17, chronology19);
        org.joda.time.DateMidnight dateMidnight22 = dateMidnight20.minusMonths((-1));
        boolean boolean23 = interval13.isAfter((org.joda.time.ReadableInstant) dateMidnight20);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((long) 3, chronology25);
        org.joda.time.DateTime.Property property27 = dateTime26.dayOfYear();
        org.joda.time.Interval interval28 = property27.toInterval();
        org.joda.time.Period period29 = org.joda.time.Period.ZERO;
        org.joda.time.Period period30 = period29.normalizedStandard();
        org.joda.time.Period period32 = period30.minusMinutes((int) ' ');
        org.joda.time.Period period34 = period32.withMinutes(32769);
        boolean boolean35 = interval28.equals((java.lang.Object) period34);
        boolean boolean36 = interval13.contains((org.joda.time.ReadableInterval) interval28);
        boolean boolean37 = interval28.isBeforeNow();
        java.lang.String str38 = interval28.toString();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(days7);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "1970-01-01T00:00:00.000Z/1970-01-02T00:00:00.000Z" + "'", str38, "1970-01-01T00:00:00.000Z/1970-01-02T00:00:00.000Z");
    }

    @Test
    public void test6213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6213");
        java.nio.charset.Charset charset0 = java.nio.charset.Charset.defaultCharset();
        java.nio.charset.CharsetDecoder charsetDecoder1 = charset0.newDecoder();
        java.nio.charset.Charset charset2 = java.nio.charset.Charset.defaultCharset();
        boolean boolean3 = charset0.contains(charset2);
        java.nio.charset.CharsetEncoder charsetEncoder4 = charset0.newEncoder();
        boolean boolean6 = charsetEncoder4.canEncode('a');
        boolean boolean8 = charsetEncoder4.canEncode('4');
        java.nio.charset.Charset charset9 = charsetEncoder4.charset();
        byte[] byteArray10 = charsetEncoder4.replacement();
        org.junit.Assert.assertNotNull(charset0);
        org.junit.Assert.assertNotNull(charsetDecoder1);
        org.junit.Assert.assertNotNull(charset2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(charsetEncoder4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(charset9);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[63]");
    }

    @Test
    public void test6214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6214");
        java.util.Map<java.lang.String, java.lang.String> strMap0 = java.time.ZoneId.SHORT_IDS;
        boolean boolean2 = strMap0.containsValue((java.lang.Object) "2022-02-21T09:34:23.848Z");
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate();
        int int4 = localDate3.getCenturyOfEra();
        org.joda.time.LocalDate.Property property5 = localDate3.dayOfWeek();
        org.joda.time.LocalDate localDate7 = property5.addToCopy(7);
        org.joda.time.LocalDate localDate8 = property5.roundCeilingCopy();
        int int9 = localDate8.getMonthOfYear();
        org.joda.time.DurationFieldType durationFieldType10 = org.joda.time.DurationFieldType.weeks();
        boolean boolean11 = localDate8.isSupported(durationFieldType10);
        boolean boolean12 = strMap0.containsKey((java.lang.Object) localDate8);
        org.junit.Assert.assertNotNull(strMap0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 20 + "'", int4 == 20);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2 + "'", int9 == 2);
        org.junit.Assert.assertNotNull(durationFieldType10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test6215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6215");
        java.net.Proxy proxy0 = java.net.Proxy.NO_PROXY;
        java.net.SocketAddress socketAddress1 = proxy0.address();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.LocalTime localTime4 = new org.joda.time.LocalTime((long) 0, chronology3);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((long) 3, chronology6);
        org.joda.time.DateTime.Property property8 = dateTime7.dayOfYear();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight((java.lang.Object) dateTime7, chronology9);
        org.joda.time.DateTime dateTime11 = localTime4.toDateTime((org.joda.time.ReadableInstant) dateTime7);
        org.joda.time.DateTime dateTime13 = dateTime11.minusMillis((int) (byte) 0);
        org.joda.time.DateTime dateTime15 = dateTime11.withYearOfCentury((int) (byte) 10);
        org.joda.time.DateTime.Property property16 = dateTime15.hourOfDay();
        org.joda.time.DateTime dateTime18 = dateTime15.plus((long) 3600000);
        org.joda.time.DateTime dateTime21 = dateTime18.withDurationAdded((long) 366, (int) '#');
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((long) 3, chronology23);
        int int25 = dateTime24.getYear();
        java.util.GregorianCalendar gregorianCalendar26 = dateTime24.toGregorianCalendar();
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.Duration duration29 = new org.joda.time.Duration(readableInstant27, readableInstant28);
        org.joda.time.Duration duration31 = duration29.withMillis((-1L));
        org.joda.time.Duration duration33 = duration31.minus((long) 2022);
        org.joda.time.DateTime dateTime34 = dateTime24.minus((org.joda.time.ReadableDuration) duration31);
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.Duration duration37 = new org.joda.time.Duration(readableInstant35, readableInstant36);
        org.joda.time.Duration duration39 = duration37.withMillis((-1L));
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime((long) 3, chronology41);
        org.joda.time.DateTime.Property property43 = dateTime42.dayOfYear();
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.DateMidnight dateMidnight45 = new org.joda.time.DateMidnight((java.lang.Object) dateTime42, chronology44);
        org.joda.time.DateMidnight dateMidnight47 = dateMidnight45.minusMonths((-1));
        org.joda.time.DateMidnight dateMidnight49 = dateMidnight45.withDayOfYear((int) ' ');
        org.joda.time.PeriodType periodType50 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period51 = duration39.toPeriodFrom((org.joda.time.ReadableInstant) dateMidnight45, periodType50);
        org.joda.time.Period period52 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime21, (org.joda.time.ReadableInstant) dateTime24, periodType50);
        boolean boolean53 = proxy0.equals((java.lang.Object) dateTime24);
        org.joda.time.ReadableInstant readableInstant54 = null;
        boolean boolean55 = dateTime24.isEqual(readableInstant54);
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.LocalTime localTime58 = new org.joda.time.LocalTime((long) 0, chronology57);
        org.joda.time.Chronology chronology59 = localTime58.getChronology();
        org.joda.time.DateTimeField dateTimeField60 = chronology59.weekyearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime61 = org.joda.time.MutableDateTime.now(chronology59);
        org.joda.time.DateTimeField dateTimeField62 = chronology59.hourOfDay();
        org.joda.time.DurationField durationField63 = chronology59.eras();
        org.joda.time.LocalTime localTime64 = new org.joda.time.LocalTime(chronology59);
        org.joda.time.DateTime dateTime65 = dateTime24.toDateTime(chronology59);
        org.junit.Assert.assertNotNull(proxy0);
        org.junit.Assert.assertNull(socketAddress1);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1970 + "'", int25 == 1970);
        org.junit.Assert.assertNotNull(gregorianCalendar26);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(dateMidnight47);
        org.junit.Assert.assertNotNull(dateMidnight49);
        org.junit.Assert.assertNotNull(periodType50);
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(mutableDateTime61);
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertNotNull(durationField63);
        org.junit.Assert.assertNotNull(dateTime65);
    }

    @Test
    public void test6216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6216");
        java.util.Set<java.lang.String> strSet0 = java.time.ZoneId.getAvailableZoneIds();
        java.util.stream.Stream<java.lang.String> strStream1 = strSet0.parallelStream();
        java.util.stream.Stream<java.lang.String> strStream2 = strSet0.parallelStream();
        java.util.Set<java.lang.String> strSet3 = java.time.ZoneId.getAvailableZoneIds();
        java.util.stream.Stream<java.lang.String> strStream4 = strSet3.parallelStream();
        java.lang.Object[] objArray5 = strSet3.toArray();
        boolean boolean6 = strSet0.addAll((java.util.Collection<java.lang.String>) strSet3);
        org.junit.Assert.assertNotNull(strSet0);
        org.junit.Assert.assertNotNull(strStream1);
        org.junit.Assert.assertNotNull(strStream2);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNotNull(strStream4);
        org.junit.Assert.assertNotNull(objArray5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test6217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6217");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 3, chronology1);
        org.joda.time.DateTime.Property property3 = dateTime2.dayOfYear();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight((java.lang.Object) dateTime2, chronology4);
        org.joda.time.MutableDateTime mutableDateTime6 = dateTime2.toMutableDateTime();
        mutableDateTime6.addYears((int) (short) 100);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime6.dayOfWeek();
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime6.year();
        org.joda.time.MutableDateTime.Property property11 = mutableDateTime6.weekyear();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) 3, chronology13);
        org.joda.time.Period period15 = org.joda.time.Period.ZERO;
        org.joda.time.Period period16 = period15.normalizedStandard();
        org.joda.time.Period period18 = period16.minusMinutes((int) ' ');
        org.joda.time.Period period20 = period18.minusMonths((int) (byte) 0);
        org.joda.time.PeriodType periodType21 = period20.getPeriodType();
        org.joda.time.DateTime dateTime22 = dateTime14.minus((org.joda.time.ReadablePeriod) period20);
        org.joda.time.DateTime dateTime24 = dateTime14.plusHours(34);
        org.joda.time.DateTime dateTime26 = dateTime14.plusMonths(5);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.LocalTime localTime29 = new org.joda.time.LocalTime((long) 0, chronology28);
        org.joda.time.Chronology chronology30 = localTime29.getChronology();
        org.joda.time.DateTimeField dateTimeField31 = chronology30.weekyearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime32 = org.joda.time.MutableDateTime.now(chronology30);
        mutableDateTime32.setWeekOfWeekyear((int) '#');
        mutableDateTime32.addHours(0);
        org.joda.time.Days days37 = org.joda.time.Days.daysBetween((org.joda.time.ReadableInstant) dateTime26, (org.joda.time.ReadableInstant) mutableDateTime32);
        long long38 = property11.getDifferenceAsLong((org.joda.time.ReadableInstant) mutableDateTime32);
        org.joda.time.MutableDateTime mutableDateTime39 = property11.getMutableDateTime();
        mutableDateTime39.addWeeks((int) ':');
        org.joda.time.MutableDateTime mutableDateTime42 = mutableDateTime39.copy();
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.LocalTime localTime47 = new org.joda.time.LocalTime((long) 0, chronology46);
        org.joda.time.Chronology chronology48 = localTime47.getChronology();
        java.util.Locale locale49 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale locale50 = java.util.Locale.GERMANY;
        java.lang.String str51 = locale49.getDisplayScript(locale50);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket53 = new org.joda.time.format.DateTimeParserBucket((long) 1970, chronology48, locale49, (java.lang.Integer) 1);
        org.joda.time.DateTimeField dateTimeField54 = chronology48.clockhourOfDay();
        org.joda.time.Period period59 = new org.joda.time.Period((int) '#', 0, 2, (int) (short) 100);
        org.joda.time.Period period61 = period59.withSeconds(12);
        int int62 = period61.getMillis();
        int[] intArray64 = chronology48.get((org.joda.time.ReadablePeriod) period61, (long) (byte) 10);
        org.joda.time.DateTime dateTime65 = new org.joda.time.DateTime((long) 2147483647, chronology48);
        mutableDateTime42.setChronology(chronology48);
        org.joda.time.Chronology chronology67 = mutableDateTime42.getChronology();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(mutableDateTime32);
        org.junit.Assert.assertNotNull(days37);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 47L + "'", long38 == 47L);
        org.junit.Assert.assertNotNull(mutableDateTime39);
        org.junit.Assert.assertNotNull(mutableDateTime42);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(period61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 100 + "'", int62 == 100);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[0, 0, 0, 0, 0, 0, 0, 10]");
        org.junit.Assert.assertNotNull(chronology67);
    }

    @Test
    public void test6218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6218");
        java.net.URI uRI1 = new java.net.URI("0");
        java.net.URI uRI2 = uRI1.parseServerAuthority();
        org.junit.Assert.assertNotNull(uRI2);
    }

    @Test
    public void test6219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6219");
        org.joda.time.PeriodType periodType1 = org.joda.time.PeriodType.minutes();
        org.joda.time.Period period2 = new org.joda.time.Period(1644481818L, periodType1);
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod(periodType1);
        org.junit.Assert.assertNotNull(periodType1);
    }

    @Test
    public void test6220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6220");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.Duration duration2 = new org.joda.time.Duration(readableInstant0, readableInstant1);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = duration2.toPeriodTo(readableInstant3, periodType4);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.Duration duration8 = new org.joda.time.Duration(readableInstant6, readableInstant7);
        long long9 = duration8.getMillis();
        boolean boolean10 = duration2.isShorterThan((org.joda.time.ReadableDuration) duration8);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) 3, chronology12);
        org.joda.time.DateTime.Property property14 = dateTime13.dayOfYear();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight((java.lang.Object) dateTime13, chronology15);
        org.joda.time.MutableDateTime mutableDateTime17 = dateTime13.toMutableDateTime();
        mutableDateTime17.addYears((int) (short) 100);
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime17.dayOfWeek();
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime17.year();
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime17.weekyear();
        boolean boolean23 = duration2.equals((java.lang.Object) mutableDateTime17);
        mutableDateTime17.addMonths((int) ' ');
        mutableDateTime17.add((long) (byte) 10);
        org.joda.time.Period period28 = org.joda.time.Period.ZERO;
        org.joda.time.Period period29 = period28.normalizedStandard();
        org.joda.time.Period period31 = period28.plusHours(2);
        java.time.chrono.IsoEra isoEra32 = java.time.chrono.IsoEra.CE;
        boolean boolean33 = period31.equals((java.lang.Object) isoEra32);
        int int34 = period31.getMinutes();
        mutableDateTime17.add((org.joda.time.ReadablePeriod) period31);
        java.util.TimeZone timeZone37 = null;
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forTimeZone(timeZone37);
        org.joda.time.DateMidnight dateMidnight39 = new org.joda.time.DateMidnight((long) 1970, dateTimeZone38);
        long long42 = dateTimeZone38.convertLocalToUTC((long) 3, false);
        long long45 = dateTimeZone38.convertLocalToUTC(0L, true);
        mutableDateTime17.setZoneRetainFields(dateTimeZone38);
        java.lang.String str47 = dateTimeZone38.toString();
        org.joda.time.chrono.EthiopicChronology ethiopicChronology48 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone38);
        org.joda.time.DateTimeField dateTimeField49 = ethiopicChronology48.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone50 = ethiopicChronology48.getZone();
        org.joda.time.DateTimeField dateTimeField51 = ethiopicChronology48.era();
        org.joda.time.DateTimeField dateTimeField52 = ethiopicChronology48.secondOfDay();
        org.joda.time.DateTimeField dateTimeField53 = ethiopicChronology48.minuteOfHour();
        org.joda.time.DurationField durationField54 = ethiopicChronology48.months();
        org.joda.time.DateTimeField dateTimeField55 = ethiopicChronology48.weekyearOfCentury();
        org.joda.time.Minutes minutes56 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes58 = minutes56.minus(12);
        org.joda.time.Minutes minutes59 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes61 = minutes59.minus(12);
        org.joda.time.Minutes minutes62 = minutes56.minus(minutes59);
        org.joda.time.DurationFieldType durationFieldType63 = minutes56.getFieldType();
        int[] intArray66 = ethiopicChronology48.get((org.joda.time.ReadablePeriod) minutes56, (long) 30, (long) 741000000);
        org.joda.time.DateTimeField dateTimeField67 = ethiopicChronology48.minuteOfHour();
        org.joda.time.DurationField durationField68 = ethiopicChronology48.months();
        org.joda.time.DateTimeField dateTimeField69 = ethiopicChronology48.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField70 = ethiopicChronology48.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime71 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) ethiopicChronology48);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertTrue("'" + isoEra32 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra32.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 3L + "'", long42 == 3L);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Etc/UTC" + "'", str47, "Etc/UTC");
        org.junit.Assert.assertNotNull(ethiopicChronology48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(durationField54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(minutes56);
        org.junit.Assert.assertNotNull(minutes58);
        org.junit.Assert.assertNotNull(minutes59);
        org.junit.Assert.assertNotNull(minutes61);
        org.junit.Assert.assertNotNull(minutes62);
        org.junit.Assert.assertNotNull(durationFieldType63);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[12349]");
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertNotNull(durationField68);
        org.junit.Assert.assertNotNull(dateTimeField69);
        org.junit.Assert.assertNotNull(dateTimeField70);
    }

    @Test
    public void test6221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6221");
        java.nio.charset.Charset charset0 = java.nio.charset.Charset.defaultCharset();
        java.nio.charset.CharsetDecoder charsetDecoder1 = charset0.newDecoder();
        java.nio.charset.Charset charset2 = java.nio.charset.Charset.defaultCharset();
        java.nio.charset.CharsetDecoder charsetDecoder3 = charset2.newDecoder();
        java.nio.charset.Charset charset4 = java.nio.charset.Charset.defaultCharset();
        boolean boolean5 = charset2.contains(charset4);
        int int6 = charset0.compareTo(charset2);
        java.util.Locale locale9 = new java.util.Locale("PT0S", "2022-02-21T09:34:06.670Z");
        java.lang.String str10 = charset2.displayName(locale9);
        java.lang.String str11 = charset2.displayName();
        java.lang.String str12 = charset2.name();
        boolean boolean13 = charset2.canEncode();
        java.lang.String str14 = charset2.displayName();
        org.junit.Assert.assertNotNull(charset0);
        org.junit.Assert.assertNotNull(charsetDecoder1);
        org.junit.Assert.assertNotNull(charset2);
        org.junit.Assert.assertNotNull(charsetDecoder3);
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertEquals(locale9.toString(), "pt0s_2022-02-21T09:34:06.670Z");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "US-ASCII" + "'", str10, "US-ASCII");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "US-ASCII" + "'", str11, "US-ASCII");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "US-ASCII" + "'", str12, "US-ASCII");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "US-ASCII" + "'", str14, "US-ASCII");
    }

    @Test
    public void test6222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6222");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime(47, (-10800001), 1929, (int) (short) 100, 11, (int) (byte) 1, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 100 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test6223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6223");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.now();
        java.time.LocalDateTime localDateTime1 = java.time.LocalDateTime.now();
        java.time.temporal.ChronoField chronoField2 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime4 = localDateTime1.with((java.time.temporal.TemporalField) chronoField2, (long) 10);
        boolean boolean5 = localDateTime0.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime1);
        java.time.LocalDateTime localDateTime7 = localDateTime1.withHour(5);
        org.joda.time.TimeOfDay timeOfDay9 = org.joda.time.TimeOfDay.fromMillisOfDay((long) (short) 0);
        org.joda.time.TimeOfDay timeOfDay11 = org.joda.time.TimeOfDay.fromMillisOfDay((long) (short) 0);
        org.joda.time.Hours hours12 = org.joda.time.Hours.hoursBetween((org.joda.time.ReadablePartial) timeOfDay9, (org.joda.time.ReadablePartial) timeOfDay11);
        org.joda.time.DurationFieldType durationFieldType13 = org.joda.time.DurationFieldType.hours();
        org.joda.time.TimeOfDay timeOfDay15 = timeOfDay11.withFieldAdded(durationFieldType13, (int) (byte) 0);
        org.joda.time.TimeOfDay timeOfDay17 = org.joda.time.TimeOfDay.fromMillisOfDay((long) (short) 0);
        org.joda.time.TimeOfDay timeOfDay19 = org.joda.time.TimeOfDay.fromMillisOfDay((long) (short) 0);
        org.joda.time.Hours hours20 = org.joda.time.Hours.hoursBetween((org.joda.time.ReadablePartial) timeOfDay17, (org.joda.time.ReadablePartial) timeOfDay19);
        org.joda.time.TimeOfDay timeOfDay22 = timeOfDay17.withSecondOfMinute(0);
        boolean boolean23 = timeOfDay15.isAfter((org.joda.time.ReadablePartial) timeOfDay22);
        org.joda.time.TimeOfDay timeOfDay25 = timeOfDay15.minusSeconds(32769);
        org.joda.time.DateTime dateTime26 = timeOfDay15.toDateTimeToday();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.LocalTime localTime29 = new org.joda.time.LocalTime((long) 0, chronology28);
        org.joda.time.LocalTime localTime31 = localTime29.minusMillis(2022);
        org.joda.time.LocalTime localTime33 = localTime29.plusMillis((int) (byte) 0);
        org.joda.time.LocalTime localTime35 = localTime29.minusMinutes(23);
        org.joda.time.LocalTime localTime37 = localTime29.withSecondOfMinute(13);
        int int38 = timeOfDay15.compareTo((org.joda.time.ReadablePartial) localTime29);
        boolean boolean39 = localDateTime7.equals((java.lang.Object) timeOfDay15);
        org.joda.time.TimeOfDay timeOfDay41 = timeOfDay15.plusSeconds(275);
        // The following exception was thrown during execution in test generation
        try {
            int int43 = timeOfDay41.getValue(2070);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 2070");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertTrue("'" + chronoField2 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField2.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime4);
// flaky:         org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(timeOfDay9);
        org.junit.Assert.assertNotNull(timeOfDay11);
        org.junit.Assert.assertNotNull(hours12);
        org.junit.Assert.assertNotNull(durationFieldType13);
        org.junit.Assert.assertNotNull(timeOfDay15);
        org.junit.Assert.assertNotNull(timeOfDay17);
        org.junit.Assert.assertNotNull(timeOfDay19);
        org.junit.Assert.assertNotNull(hours20);
        org.junit.Assert.assertNotNull(timeOfDay22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(timeOfDay25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(localTime31);
        org.junit.Assert.assertNotNull(localTime33);
        org.junit.Assert.assertNotNull(localTime35);
        org.junit.Assert.assertNotNull(localTime37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(timeOfDay41);
    }

    @Test
    public void test6224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6224");
        org.joda.time.YearMonthDay yearMonthDay0 = new org.joda.time.YearMonthDay();
        java.util.TimeZone timeZone3 = null;
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forTimeZone(timeZone3);
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight((long) 1970, dateTimeZone4);
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((long) 3600000, dateTimeZone4);
        org.joda.time.DateMidnight dateMidnight7 = yearMonthDay0.toDateMidnight(dateTimeZone4);
        org.joda.time.LocalDate localDate8 = yearMonthDay0.toLocalDate();
        org.joda.time.DateTime dateTime9 = localDate8.toDateTimeAtMidnight();
        org.joda.time.DateTime dateTime10 = localDate8.toDateTimeAtStartOfDay();
        int int11 = localDate8.getWeekOfWeekyear();
        org.joda.time.DateTime dateTime12 = localDate8.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate localDate14 = localDate8.plusMonths(0);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 8 + "'", int11 == 8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(localDate14);
    }

    @Test
    public void test6225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6225");
        java.net.URI uRI1 = new java.net.URI("hi!");
        java.lang.String str2 = uRI1.getRawAuthority();
        java.lang.String str3 = uRI1.toString();
        java.lang.String str4 = uRI1.getUserInfo();
        java.io.OutputStream outputStream5 = null;
        java.io.FilterOutputStream filterOutputStream6 = new java.io.FilterOutputStream(outputStream5);
        byte[] byteArray8 = new byte[] { (byte) 100 };
        filterOutputStream6.write(byteArray8, (int) (byte) 0, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer12 = java.nio.ByteBuffer.wrap(byteArray8);
        java.nio.LongBuffer longBuffer13 = byteBuffer12.asLongBuffer();
        java.nio.ByteBuffer byteBuffer14 = byteBuffer12.duplicate();
        boolean boolean15 = uRI1.equals((java.lang.Object) byteBuffer12);
        java.nio.DoubleBuffer doubleBuffer16 = byteBuffer12.asDoubleBuffer();
        java.util.stream.IntStream intStream18 = java.util.stream.IntStream.of((int) '/');
        java.util.OptionalInt optionalInt19 = intStream18.min();
        short[] shortArray22 = new short[] { (short) 1, (byte) 10 };
        java.nio.ShortBuffer shortBuffer23 = java.nio.ShortBuffer.wrap(shortArray22);
        short[] shortArray26 = new short[] { (short) 1, (byte) 10 };
        java.nio.ShortBuffer shortBuffer27 = java.nio.ShortBuffer.wrap(shortArray26);
        java.nio.ShortBuffer shortBuffer28 = shortBuffer23.put(shortBuffer27);
        int int29 = shortBuffer28.limit();
        boolean boolean30 = shortBuffer28.isReadOnly();
        boolean boolean31 = optionalInt19.equals((java.lang.Object) shortBuffer28);
        java.nio.ByteOrder byteOrder32 = shortBuffer28.order();
        java.nio.ByteBuffer byteBuffer33 = byteBuffer12.order(byteOrder32);
        java.nio.ByteBuffer byteBuffer35 = byteBuffer33.put((byte) 0);
        int int36 = byteBuffer35.arrayOffset();
        java.nio.charset.Charset charset37 = java.nio.charset.Charset.defaultCharset();
        java.nio.charset.CharsetDecoder charsetDecoder38 = charset37.newDecoder();
        java.nio.charset.Charset charset39 = java.nio.charset.Charset.defaultCharset();
        java.nio.charset.CharsetDecoder charsetDecoder40 = charset39.newDecoder();
        java.nio.charset.Charset charset41 = java.nio.charset.Charset.defaultCharset();
        boolean boolean42 = charset39.contains(charset41);
        java.nio.charset.CharsetEncoder charsetEncoder43 = charset39.newEncoder();
        char[] charArray44 = new char[] {};
        java.nio.CharBuffer charBuffer45 = java.nio.CharBuffer.wrap(charArray44);
        java.nio.ByteBuffer byteBuffer46 = charsetEncoder43.encode(charBuffer45);
        java.nio.CharBuffer charBuffer47 = charBuffer45.slice();
        java.nio.CharBuffer charBuffer48 = charBuffer45.compact();
        java.nio.CharBuffer charBuffer49 = charBuffer45.duplicate();
        java.nio.ByteBuffer byteBuffer50 = charset37.encode(charBuffer45);
        java.nio.ByteBuffer byteBuffer51 = byteBuffer35.put(byteBuffer50);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "hi!" + "'", str3, "hi!");
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0]");
        org.junit.Assert.assertNotNull(byteBuffer12);
        org.junit.Assert.assertNotNull(longBuffer13);
        org.junit.Assert.assertNotNull(byteBuffer14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(doubleBuffer16);
        org.junit.Assert.assertNotNull(intStream18);
        org.junit.Assert.assertNotNull(optionalInt19);
        org.junit.Assert.assertNotNull(shortArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray22), "[1, 10]");
        org.junit.Assert.assertNotNull(shortBuffer23);
        org.junit.Assert.assertNotNull(shortArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray26), "[1, 10]");
        org.junit.Assert.assertNotNull(shortBuffer27);
        org.junit.Assert.assertNotNull(shortBuffer28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2 + "'", int29 == 2);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(byteOrder32);
        org.junit.Assert.assertNotNull(byteBuffer33);
        org.junit.Assert.assertNotNull(byteBuffer35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(charset37);
        org.junit.Assert.assertNotNull(charsetDecoder38);
        org.junit.Assert.assertNotNull(charset39);
        org.junit.Assert.assertNotNull(charsetDecoder40);
        org.junit.Assert.assertNotNull(charset41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(charsetEncoder43);
        org.junit.Assert.assertNotNull(charArray44);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray44), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray44), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray44), "[]");
        org.junit.Assert.assertNotNull(charBuffer45);
        org.junit.Assert.assertNotNull(byteBuffer46);
        org.junit.Assert.assertNotNull(charBuffer47);
        org.junit.Assert.assertNotNull(charBuffer48);
        org.junit.Assert.assertNotNull(charBuffer49);
        org.junit.Assert.assertNotNull(byteBuffer50);
        org.junit.Assert.assertNotNull(byteBuffer51);
    }

    @Test
    public void test6226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6226");
        long long6 = java.util.Date.UTC(99, (int) (byte) -1, (int) 'a', 0, 47, 35);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 920767655000L + "'", long6 == 920767655000L);
    }

    @Test
    public void test6227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6227");
        // The following exception was thrown during execution in test generation
        try {
            java.time.temporal.ValueRange valueRange2 = java.time.temporal.ValueRange.of(1645436343757L, 0L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minimum value must be less than maximum value");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test6228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6228");
        java.time.Duration duration1 = java.time.Duration.ofMinutes((long) 3);
        java.time.Duration duration2 = duration1.abs();
        java.time.Duration duration4 = duration2.plusMinutes(0L);
        boolean boolean5 = duration4.isZero();
        long long6 = duration4.toDays();
        java.time.Duration duration8 = duration4.withSeconds((long) 11);
        java.time.Duration duration10 = duration4.plusMinutes(1645434659L);
        java.time.LocalTime localTime15 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime16 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime15);
        java.time.LocalTime localTime21 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime22 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime21);
        java.time.temporal.ChronoField chronoField23 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime25 = localTime21.with((java.time.temporal.TemporalField) chronoField23, (long) (short) 1);
        long long26 = localTime15.getLong((java.time.temporal.TemporalField) chronoField23);
        java.time.LocalTime localTime28 = localTime15.withSecond((int) (short) 1);
        java.time.temporal.ChronoField chronoField29 = java.time.temporal.ChronoField.SECOND_OF_DAY;
        java.time.temporal.ValueRange valueRange30 = localTime28.range((java.time.temporal.TemporalField) chronoField29);
        java.time.Duration duration32 = java.time.Duration.ofSeconds((long) 0);
        java.time.LocalTime localTime33 = localTime28.plus((java.time.temporal.TemporalAmount) duration32);
        java.time.Duration duration35 = duration32.plusDays((long) (short) 1);
        java.time.Duration duration37 = duration32.plusSeconds((long) 16);
        java.time.Duration duration38 = duration10.plus(duration32);
        long long39 = duration32.toMillis();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration2);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertTrue("'" + chronoField23 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField23.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime25);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 3601000000001L + "'", long26 == 3601000000001L);
        org.junit.Assert.assertNotNull(localTime28);
        org.junit.Assert.assertTrue("'" + chronoField29 + "' != '" + java.time.temporal.ChronoField.SECOND_OF_DAY + "'", chronoField29.equals(java.time.temporal.ChronoField.SECOND_OF_DAY));
        org.junit.Assert.assertNotNull(valueRange30);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(localTime33);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
    }

    @Test
    public void test6229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6229");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 3, chronology1);
        org.joda.time.DateTime.Property property3 = dateTime2.dayOfYear();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight((java.lang.Object) dateTime2, chronology4);
        org.joda.time.MutableDateTime mutableDateTime6 = dateTime2.toMutableDateTime();
        org.joda.time.Days days7 = org.joda.time.Days.ONE;
        org.joda.time.MutableInterval mutableInterval8 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadablePeriod) days7);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) 3, chronology10);
        org.joda.time.DateTime.Property property12 = dateTime11.dayOfYear();
        org.joda.time.Interval interval13 = property12.toInterval();
        mutableInterval8.setInterval((org.joda.time.ReadableInterval) interval13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.Duration duration17 = new org.joda.time.Duration(readableInstant15, readableInstant16);
        org.joda.time.Duration duration19 = duration17.withMillis((-1L));
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.Duration duration21 = duration17.minus(readableDuration20);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((long) 3, chronology23);
        org.joda.time.DateTime.Property property25 = dateTime24.dayOfYear();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateMidnight dateMidnight27 = new org.joda.time.DateMidnight((java.lang.Object) dateTime24, chronology26);
        org.joda.time.DateMidnight.Property property28 = dateMidnight27.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight29 = property28.getDateMidnight();
        org.joda.time.Interval interval30 = new org.joda.time.Interval((org.joda.time.ReadableDuration) duration21, (org.joda.time.ReadableInstant) dateMidnight29);
        mutableInterval8.setEnd((org.joda.time.ReadableInstant) dateMidnight29);
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.Duration duration34 = new org.joda.time.Duration(readableInstant32, readableInstant33);
        long long35 = duration34.getMillis();
        mutableInterval8.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration34);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime((long) 3, chronology38);
        org.joda.time.DateTime.Property property40 = dateTime39.dayOfYear();
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime((long) 3, chronology42);
        org.joda.time.DateTime.Property property44 = dateTime43.dayOfYear();
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.DateMidnight dateMidnight46 = new org.joda.time.DateMidnight((java.lang.Object) dateTime43, chronology45);
        org.joda.time.DateMidnight dateMidnight48 = dateMidnight46.minusMonths((-1));
        org.joda.time.DateMidnight dateMidnight50 = dateMidnight46.withDayOfYear((int) ' ');
        int int51 = dateMidnight46.getWeekOfWeekyear();
        long long52 = property40.getDifferenceAsLong((org.joda.time.ReadableInstant) dateMidnight46);
        boolean boolean54 = dateMidnight46.isAfter(10L);
        boolean boolean55 = mutableInterval8.isAfter((org.joda.time.ReadableInstant) dateMidnight46);
        org.joda.time.Days days56 = org.joda.time.Days.daysIn((org.joda.time.ReadableInterval) mutableInterval8);
        boolean boolean57 = mutableInterval8.containsNow();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(days7);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(dateMidnight29);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(dateMidnight48);
        org.junit.Assert.assertNotNull(dateMidnight50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(days56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
    }

    @Test
    public void test6230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6230");
        java.util.stream.DoubleStream doubleStream0 = java.util.stream.DoubleStream.empty();
        java.util.stream.DoubleStream doubleStream2 = doubleStream0.skip(0L);
        java.util.stream.DoubleStream doubleStream3 = doubleStream2.unordered();
        java.util.DoubleSummaryStatistics doubleSummaryStatistics4 = new java.util.DoubleSummaryStatistics();
        doubleSummaryStatistics4.accept((double) 97);
        double double7 = doubleSummaryStatistics4.getMin();
        java.util.DoubleSummaryStatistics doubleSummaryStatistics8 = new java.util.DoubleSummaryStatistics();
        doubleSummaryStatistics8.accept((double) 97);
        double double11 = doubleSummaryStatistics8.getMin();
        doubleSummaryStatistics4.combine(doubleSummaryStatistics8);
        doubleStream2.forEach((java.util.function.DoubleConsumer) doubleSummaryStatistics8);
        double double14 = doubleSummaryStatistics8.getAverage();
        org.junit.Assert.assertNotNull(doubleStream0);
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertNotNull(doubleStream3);
        org.junit.Assert.assertEquals(doubleSummaryStatistics4.toString(), "DoubleSummaryStatistics{count=2, sum=194.000000, min=97.000000, average=97.000000, max=97.000000}");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 97.0d + "'", double7 == 97.0d);
        org.junit.Assert.assertEquals(doubleSummaryStatistics8.toString(), "DoubleSummaryStatistics{count=1, sum=97.000000, min=97.000000, average=97.000000, max=97.000000}");
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 97.0d + "'", double11 == 97.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 97.0d + "'", double14 == 97.0d);
    }

    @Test
    public void test6231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6231");
        java.security.KeyException keyException1 = new java.security.KeyException("IntSummaryStatistics{count=0, sum=0, min=2147483647, average=0.000000, max=-2147483648}");
    }

    @Test
    public void test6232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6232");
        java.util.GregorianCalendar gregorianCalendar5 = new java.util.GregorianCalendar(12, 4096, 7, (-1), (int) (short) 10);
        int int6 = gregorianCalendar5.getWeeksInWeekYear();
        java.util.TimeZone timeZone7 = gregorianCalendar5.getTimeZone();
        java.lang.String str8 = timeZone7.getID();
        java.time.ZoneId zoneId9 = timeZone7.toZoneId();
        org.joda.time.TimeOfDay timeOfDay11 = org.joda.time.TimeOfDay.fromMillisOfDay((long) (short) 0);
        org.joda.time.TimeOfDay timeOfDay13 = org.joda.time.TimeOfDay.fromMillisOfDay((long) (short) 0);
        org.joda.time.Hours hours14 = org.joda.time.Hours.hoursBetween((org.joda.time.ReadablePartial) timeOfDay11, (org.joda.time.ReadablePartial) timeOfDay13);
        org.joda.time.DurationFieldType durationFieldType15 = org.joda.time.DurationFieldType.hours();
        org.joda.time.TimeOfDay timeOfDay17 = timeOfDay13.withFieldAdded(durationFieldType15, (int) (byte) 0);
        int int18 = timeOfDay13.getMillisOfSecond();
        org.joda.time.TimeOfDay timeOfDay20 = timeOfDay13.plusHours(9);
        org.joda.time.TimeOfDay.Property property21 = timeOfDay13.secondOfMinute();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((long) 3, chronology23);
        org.joda.time.DateTime.Property property25 = dateTime24.dayOfYear();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateMidnight dateMidnight27 = new org.joda.time.DateMidnight((java.lang.Object) dateTime24, chronology26);
        org.joda.time.MutableDateTime mutableDateTime28 = dateTime24.toMutableDateTime();
        mutableDateTime28.addYears((int) (short) 100);
        org.joda.time.MutableDateTime.Property property31 = mutableDateTime28.millisOfDay();
        org.joda.time.PeriodType periodType32 = org.joda.time.PeriodType.years();
        org.joda.time.DurationFieldType durationFieldType33 = org.joda.time.DurationFieldType.halfdays();
        int int34 = periodType32.indexOf(durationFieldType33);
        mutableDateTime28.add(durationFieldType33, (int) 'a');
        java.util.TimeZone timeZone38 = null;
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forTimeZone(timeZone38);
        org.joda.time.DateMidnight dateMidnight40 = new org.joda.time.DateMidnight((long) 1970, dateTimeZone39);
        mutableDateTime28.setTime((org.joda.time.ReadableInstant) dateMidnight40);
        int int42 = property21.compareTo((org.joda.time.ReadableInstant) dateMidnight40);
        java.lang.String str43 = property21.getName();
        java.time.OffsetDateTime offsetDateTime44 = java.time.OffsetDateTime.now();
        java.time.temporal.ChronoField chronoField45 = java.time.temporal.ChronoField.HOUR_OF_DAY;
        boolean boolean46 = offsetDateTime44.isSupported((java.time.temporal.TemporalField) chronoField45);
        java.util.Locale locale47 = java.util.Locale.GERMANY;
        java.lang.String str48 = locale47.getDisplayLanguage();
        java.lang.String str49 = chronoField45.getDisplayName(locale47);
        java.lang.String str50 = locale47.getDisplayVariant();
        java.lang.String str51 = property21.getAsText(locale47);
        java.lang.String str52 = timeZone7.getDisplayName(locale47);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 52 + "'", int6 == 52);
        org.junit.Assert.assertNotNull(timeZone7);
        org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Etc/UTC" + "'", str8, "Etc/UTC");
        org.junit.Assert.assertNotNull(zoneId9);
        org.junit.Assert.assertNotNull(timeOfDay11);
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertNotNull(hours14);
        org.junit.Assert.assertNotNull(durationFieldType15);
        org.junit.Assert.assertNotNull(timeOfDay17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(timeOfDay20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(mutableDateTime28);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(periodType32);
        org.junit.Assert.assertNotNull(durationFieldType33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "secondOfMinute" + "'", str43, "secondOfMinute");
        org.junit.Assert.assertNotNull(offsetDateTime44);
        org.junit.Assert.assertTrue("'" + chronoField45 + "' != '" + java.time.temporal.ChronoField.HOUR_OF_DAY + "'", chronoField45.equals(java.time.temporal.ChronoField.HOUR_OF_DAY));
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "German" + "'", str48, "German");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "Stunde" + "'", str49, "Stunde");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "0" + "'", str51, "0");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "Koordinierte Universalzeit" + "'", str52, "Koordinierte Universalzeit");
    }

    @Test
    public void test6233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6233");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        int int1 = localDate0.getCenturyOfEra();
        org.joda.time.LocalDate.Property property2 = localDate0.dayOfWeek();
        org.joda.time.LocalDate localDate4 = property2.addToCopy(7);
        org.joda.time.LocalDate.Property property5 = localDate4.dayOfMonth();
        int int6 = localDate4.getEra();
        org.joda.time.LocalDate localDate8 = localDate4.plusDays((-4));
        org.joda.time.LocalDate localDate10 = localDate8.plusWeeks((-1));
        java.util.Date date11 = localDate10.toDate();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 20 + "'", int1 == 20);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Feb 17 00:00:00 UTC 2022");
    }

    @Test
    public void test6234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6234");
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod(3601000000001L, (long) 28);
        int int3 = mutablePeriod2.getMonths();
        mutablePeriod2.setWeeks(35);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
    }

    @Test
    public void test6235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6235");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.now();
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery1 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period2 = localDateTime0.query(periodTemporalQuery1);
        java.time.chrono.IsoChronology isoChronology3 = period2.getChronology();
        java.time.Clock clock4 = java.time.Clock.systemUTC();
        java.time.Duration duration6 = java.time.Duration.ofSeconds((long) 256);
        java.time.Clock clock7 = java.time.Clock.tick(clock4, duration6);
        java.time.Duration duration9 = java.time.Duration.ofMinutes((long) 3);
        java.time.Duration duration10 = duration9.abs();
        java.time.Clock clock11 = java.time.Clock.offset(clock4, duration9);
        java.time.LocalDate localDate12 = java.time.LocalDate.now(clock11);
        java.time.LocalDate localDate13 = isoChronology3.dateNow(clock11);
        java.lang.String str14 = isoChronology3.toString();
        java.lang.String str15 = isoChronology3.getId();
        java.time.format.DateTimeFormatter dateTimeFormatter16 = java.time.format.DateTimeFormatter.ISO_DATE;
        java.lang.String str17 = dateTimeFormatter16.toString();
        java.time.LocalDateTime localDateTime18 = java.time.LocalDateTime.now();
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery19 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period20 = localDateTime18.query(periodTemporalQuery19);
        java.text.Format format21 = dateTimeFormatter16.toFormat(periodTemporalQuery19);
        java.time.chrono.Chronology chronology22 = dateTimeFormatter16.getChronology();
        java.time.format.DateTimeFormatter dateTimeFormatter23 = java.time.format.DateTimeFormatter.ISO_DATE;
        java.lang.String str24 = dateTimeFormatter23.toString();
        java.time.LocalDateTime localDateTime25 = java.time.LocalDateTime.now();
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery26 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period27 = localDateTime25.query(periodTemporalQuery26);
        java.text.Format format28 = dateTimeFormatter23.toFormat(periodTemporalQuery26);
        java.time.chrono.Chronology chronology29 = dateTimeFormatter23.getChronology();
        int int30 = chronology22.compareTo(chronology29);
        boolean boolean32 = chronology22.equals((java.lang.Object) 21);
        int int33 = isoChronology3.compareTo(chronology22);
        boolean boolean35 = isoChronology3.isLeapYear(920767655000L);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(periodTemporalQuery1);
        org.junit.Assert.assertNotNull(period2);
        org.junit.Assert.assertNotNull(isoChronology3);
        org.junit.Assert.assertNotNull(clock4);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(clock7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(clock11);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "ISO" + "'", str14, "ISO");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "ISO" + "'", str15, "ISO");
        org.junit.Assert.assertNotNull(dateTimeFormatter16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "ParseCaseSensitive(false)(Value(Year,4,10,EXCEEDS_PAD)'-'Value(MonthOfYear,2)'-'Value(DayOfMonth,2))[Offset(+HH:MM:ss,'Z')]" + "'", str17, "ParseCaseSensitive(false)(Value(Year,4,10,EXCEEDS_PAD)'-'Value(MonthOfYear,2)'-'Value(DayOfMonth,2))[Offset(+HH:MM:ss,'Z')]");
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(periodTemporalQuery19);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(format21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeFormatter23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "ParseCaseSensitive(false)(Value(Year,4,10,EXCEEDS_PAD)'-'Value(MonthOfYear,2)'-'Value(DayOfMonth,2))[Offset(+HH:MM:ss,'Z')]" + "'", str24, "ParseCaseSensitive(false)(Value(Year,4,10,EXCEEDS_PAD)'-'Value(MonthOfYear,2)'-'Value(DayOfMonth,2))[Offset(+HH:MM:ss,'Z')]");
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(periodTemporalQuery26);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(format28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test6236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6236");
        short[] shortArray2 = new short[] { (short) 1, (byte) 10 };
        java.nio.ShortBuffer shortBuffer3 = java.nio.ShortBuffer.wrap(shortArray2);
        short[] shortArray6 = new short[] { (short) 1, (byte) 10 };
        java.nio.ShortBuffer shortBuffer7 = java.nio.ShortBuffer.wrap(shortArray6);
        java.nio.ShortBuffer shortBuffer8 = shortBuffer3.put(shortBuffer7);
        int int9 = shortBuffer8.limit();
        java.nio.ShortBuffer shortBuffer10 = shortBuffer8.asReadOnlyBuffer();
        java.nio.ShortBuffer shortBuffer11 = shortBuffer8.asReadOnlyBuffer();
        java.nio.ShortBuffer shortBuffer12 = shortBuffer11.asReadOnlyBuffer();
        short[] shortArray15 = new short[] { (short) 1, (byte) 10 };
        java.nio.ShortBuffer shortBuffer16 = java.nio.ShortBuffer.wrap(shortArray15);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ShortBuffer shortBuffer17 = shortBuffer11.put(shortArray15);
            org.junit.Assert.fail("Expected exception of type java.nio.ReadOnlyBufferException; message: null");
        } catch (java.nio.ReadOnlyBufferException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(shortArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray2), "[1, 10]");
        org.junit.Assert.assertNotNull(shortBuffer3);
        org.junit.Assert.assertNotNull(shortArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray6), "[1, 10]");
        org.junit.Assert.assertNotNull(shortBuffer7);
        org.junit.Assert.assertNotNull(shortBuffer8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2 + "'", int9 == 2);
        org.junit.Assert.assertNotNull(shortBuffer10);
        org.junit.Assert.assertNotNull(shortBuffer11);
        org.junit.Assert.assertNotNull(shortBuffer12);
        org.junit.Assert.assertNotNull(shortArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray15), "[1, 10]");
        org.junit.Assert.assertNotNull(shortBuffer16);
    }

    @Test
    public void test6237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6237");
        java.time.format.FormatStyle formatStyle0 = java.time.format.FormatStyle.LONG;
        java.time.format.FormatStyle formatStyle1 = java.time.format.FormatStyle.LONG;
        java.time.format.DateTimeFormatter dateTimeFormatter2 = java.time.format.DateTimeFormatter.ofLocalizedDateTime(formatStyle0, formatStyle1);
        java.time.LocalDateTime localDateTime3 = java.time.LocalDateTime.now();
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery4 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period5 = localDateTime3.query(periodTemporalQuery4);
        java.text.Format format6 = dateTimeFormatter2.toFormat(periodTemporalQuery4);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(chronology7);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.withYearOfCentury((int) 'a');
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.plusSeconds(6);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime10.withWeekyear(10);
        org.joda.time.LocalDateTime.Property property15 = localDateTime10.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime17 = property15.addToCopy(3601000000001L);
        org.joda.time.DateTimeField dateTimeField18 = property15.getField();
        // The following exception was thrown during execution in test generation
        try {
            java.text.AttributedCharacterIterator attributedCharacterIterator19 = format6.formatToCharacterIterator((java.lang.Object) property15);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Format target must implement TemporalAccessor");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + formatStyle0 + "' != '" + java.time.format.FormatStyle.LONG + "'", formatStyle0.equals(java.time.format.FormatStyle.LONG));
        org.junit.Assert.assertTrue("'" + formatStyle1 + "' != '" + java.time.format.FormatStyle.LONG + "'", formatStyle1.equals(java.time.format.FormatStyle.LONG));
        org.junit.Assert.assertNotNull(dateTimeFormatter2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(periodTemporalQuery4);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(format6);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(dateTimeField18);
    }

    @Test
    public void test6238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6238");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 3, chronology1);
        org.joda.time.DateTime.Property property3 = dateTime2.dayOfYear();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight((java.lang.Object) dateTime2, chronology4);
        org.joda.time.MutableDateTime mutableDateTime6 = dateTime2.toMutableDateTime();
        mutableDateTime6.addYears((int) (short) 100);
        mutableDateTime6.setMillis((long) 21);
        org.joda.time.MutableDateTime.Property property11 = mutableDateTime6.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime12 = property11.roundHalfCeiling();
        java.time.LocalTime localTime17 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime18 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime17);
        long long19 = localTime18.toNanoOfDay();
        java.util.GregorianCalendar gregorianCalendar25 = new java.util.GregorianCalendar(12, 4096, 7, (-1), (int) (short) 10);
        int int26 = gregorianCalendar25.getWeeksInWeekYear();
        java.lang.String str27 = gregorianCalendar25.getCalendarType();
        java.time.ZonedDateTime zonedDateTime28 = gregorianCalendar25.toZonedDateTime();
        java.time.ZonedDateTime zonedDateTime30 = zonedDateTime28.minusMonths((long) 10);
        java.time.temporal.Temporal temporal31 = localTime18.adjustInto((java.time.temporal.Temporal) zonedDateTime30);
        boolean boolean32 = mutableDateTime12.equals((java.lang.Object) zonedDateTime30);
        java.time.ZonedDateTime zonedDateTime34 = zonedDateTime30.plusDays(11724424192L);
        java.time.DayOfWeek dayOfWeek35 = zonedDateTime30.getDayOfWeek();
        int int36 = dayOfWeek35.getValue();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 3601000000001L + "'", long19 == 3601000000001L);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 52 + "'", int26 == 52);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "gregory" + "'", str27, "gregory");
        org.junit.Assert.assertNotNull(zonedDateTime28);
        org.junit.Assert.assertNotNull(zonedDateTime30);
        org.junit.Assert.assertNotNull(temporal31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(zonedDateTime34);
        org.junit.Assert.assertTrue("'" + dayOfWeek35 + "' != '" + java.time.DayOfWeek.MONDAY + "'", dayOfWeek35.equals(java.time.DayOfWeek.MONDAY));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
    }

    @Test
    public void test6239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6239");
        org.joda.time.TimeOfDay timeOfDay1 = org.joda.time.TimeOfDay.fromMillisOfDay((long) (short) 0);
        org.joda.time.TimeOfDay timeOfDay3 = org.joda.time.TimeOfDay.fromMillisOfDay((long) (short) 0);
        org.joda.time.Hours hours4 = org.joda.time.Hours.hoursBetween((org.joda.time.ReadablePartial) timeOfDay1, (org.joda.time.ReadablePartial) timeOfDay3);
        org.joda.time.DurationFieldType durationFieldType5 = org.joda.time.DurationFieldType.hours();
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay3.withFieldAdded(durationFieldType5, (int) (byte) 0);
        int int8 = timeOfDay3.getMillisOfSecond();
        org.joda.time.TimeOfDay timeOfDay10 = timeOfDay3.plusHours(9);
        org.joda.time.TimeOfDay.Property property11 = timeOfDay3.secondOfMinute();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) 3, chronology13);
        org.joda.time.DateTime.Property property15 = dateTime14.dayOfYear();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight((java.lang.Object) dateTime14, chronology16);
        org.joda.time.MutableDateTime mutableDateTime18 = dateTime14.toMutableDateTime();
        boolean boolean19 = mutableDateTime18.isBeforeNow();
        int int20 = property11.compareTo((org.joda.time.ReadableInstant) mutableDateTime18);
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime18.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime22 = property21.roundCeiling();
        org.junit.Assert.assertNotNull(timeOfDay1);
        org.junit.Assert.assertNotNull(timeOfDay3);
        org.junit.Assert.assertNotNull(hours4);
        org.junit.Assert.assertNotNull(durationFieldType5);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(mutableDateTime18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(mutableDateTime22);
    }

    @Test
    public void test6240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6240");
        java.util.Hashtable<java.security.cert.Certificate[], org.joda.time.DateTimeField> certificateArrayMap1 = new java.util.Hashtable<java.security.cert.Certificate[], org.joda.time.DateTimeField>(21);
    }

    @Test
    public void test6241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6241");
        java.net.InetAddress inetAddress0 = java.net.InetAddress.getLoopbackAddress();
        boolean boolean1 = inetAddress0.isAnyLocalAddress();
        org.junit.Assert.assertNotNull(inetAddress0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test6242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6242");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect(10800000);
        java.nio.ByteBuffer byteBuffer2 = byteBuffer1.asReadOnlyBuffer();
        char char4 = byteBuffer1.getChar(0);
        java.nio.ByteBuffer byteBuffer6 = byteBuffer1.putDouble((double) (-369216316800001L));
        java.nio.ByteBuffer byteBuffer8 = byteBuffer6.putFloat((float) 980211834622L);
        java.nio.ByteBuffer byteBuffer10 = byteBuffer6.putInt((int) ' ');
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer2);
        org.junit.Assert.assertTrue("'" + char4 + "' != '" + '\000' + "'", char4 == '\000');
        org.junit.Assert.assertNotNull(byteBuffer6);
        org.junit.Assert.assertNotNull(byteBuffer8);
        org.junit.Assert.assertNotNull(byteBuffer10);
    }

    @Test
    public void test6243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6243");
        java.util.stream.IntStream intStream2 = java.util.stream.IntStream.rangeClosed(100, (int) '4');
        java.util.stream.IntStream intStream4 = intStream2.skip((long) 256);
        java.util.PrimitiveIterator.OfInt ofInt5 = intStream4.iterator();
        java.util.stream.IntStream intStream8 = java.util.stream.IntStream.rangeClosed(100, (int) '4');
        java.util.stream.IntStream intStream9 = intStream8.sequential();
        java.util.function.IntUnaryOperator intUnaryOperator10 = java.util.function.IntUnaryOperator.identity();
        java.util.stream.IntStream intStream11 = intStream8.map(intUnaryOperator10);
        java.util.OptionalInt optionalInt12 = intStream11.findAny();
        java.util.LongSummaryStatistics longSummaryStatistics13 = new java.util.LongSummaryStatistics();
        longSummaryStatistics13.accept(3);
        long long16 = longSummaryStatistics13.getMax();
        java.util.LongSummaryStatistics longSummaryStatistics17 = new java.util.LongSummaryStatistics();
        longSummaryStatistics17.accept(3);
        java.util.function.LongConsumer longConsumer20 = longSummaryStatistics13.andThen((java.util.function.LongConsumer) longSummaryStatistics17);
        java.util.LongSummaryStatistics longSummaryStatistics21 = new java.util.LongSummaryStatistics();
        longSummaryStatistics21.accept(3);
        long long24 = longSummaryStatistics21.getMax();
        double double25 = longSummaryStatistics21.getAverage();
        longSummaryStatistics21.accept(6);
        java.util.function.LongConsumer longConsumer28 = longSummaryStatistics13.andThen((java.util.function.LongConsumer) longSummaryStatistics21);
        java.util.stream.IntStream intStream31 = java.util.stream.IntStream.rangeClosed(100, (int) '4');
        java.util.IntSummaryStatistics intSummaryStatistics32 = new java.util.IntSummaryStatistics();
        intStream31.forEach((java.util.function.IntConsumer) intSummaryStatistics32);
        java.util.IntSummaryStatistics intSummaryStatistics34 = new java.util.IntSummaryStatistics();
        intSummaryStatistics34.accept(57);
        intSummaryStatistics32.combine(intSummaryStatistics34);
        java.util.function.IntConsumer intConsumer38 = longSummaryStatistics21.andThen((java.util.function.IntConsumer) intSummaryStatistics32);
        long long39 = intSummaryStatistics32.getCount();
        optionalInt12.ifPresent((java.util.function.IntConsumer) intSummaryStatistics32);
        int int41 = intSummaryStatistics32.getMax();
        ofInt5.forEachRemaining((java.util.function.IntConsumer) intSummaryStatistics32);
        org.junit.Assert.assertNotNull(intStream2);
        org.junit.Assert.assertNotNull(intStream4);
        org.junit.Assert.assertNotNull(ofInt5);
        org.junit.Assert.assertNotNull(intStream8);
        org.junit.Assert.assertNotNull(intStream9);
        org.junit.Assert.assertNotNull(intUnaryOperator10);
        org.junit.Assert.assertNotNull(intStream11);
        org.junit.Assert.assertNotNull(optionalInt12);
        org.junit.Assert.assertEquals(longSummaryStatistics13.toString(), "LongSummaryStatistics{count=1, sum=3, min=3, average=3.000000, max=3}");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 3L + "'", long16 == 3L);
        org.junit.Assert.assertEquals(longSummaryStatistics17.toString(), "LongSummaryStatistics{count=1, sum=3, min=3, average=3.000000, max=3}");
        org.junit.Assert.assertNotNull(longConsumer20);
        org.junit.Assert.assertEquals(longSummaryStatistics21.toString(), "LongSummaryStatistics{count=2, sum=9, min=3, average=4.500000, max=6}");
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 3L + "'", long24 == 3L);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 3.0d + "'", double25 == 3.0d);
        org.junit.Assert.assertNotNull(longConsumer28);
        org.junit.Assert.assertNotNull(intStream31);
        org.junit.Assert.assertEquals(intSummaryStatistics32.toString(), "IntSummaryStatistics{count=1, sum=57, min=57, average=57.000000, max=57}");
        org.junit.Assert.assertEquals(intSummaryStatistics34.toString(), "IntSummaryStatistics{count=1, sum=57, min=57, average=57.000000, max=57}");
        org.junit.Assert.assertNotNull(intConsumer38);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 1L + "'", long39 == 1L);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 57 + "'", int41 == 57);
    }

    @Test
    public void test6244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6244");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.Duration duration2 = new org.joda.time.Duration(readableInstant0, readableInstant1);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = duration2.toPeriodTo(readableInstant3, periodType4);
        long long6 = duration2.getStandardSeconds();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 3, chronology8);
        org.joda.time.DateTime.Property property10 = dateTime9.dayOfYear();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight((java.lang.Object) dateTime9, chronology11);
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight12.minusMonths((-1));
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight12.withDayOfYear((int) ' ');
        org.joda.time.Interval interval17 = duration2.toIntervalTo((org.joda.time.ReadableInstant) dateMidnight16);
        org.joda.time.DateMidnight.Property property18 = dateMidnight16.dayOfYear();
        org.joda.time.DateMidnight dateMidnight20 = property18.addToCopy(22);
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.Duration duration23 = new org.joda.time.Duration(readableInstant21, readableInstant22);
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.PeriodType periodType25 = null;
        org.joda.time.Period period26 = duration23.toPeriodTo(readableInstant24, periodType25);
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.Duration duration29 = new org.joda.time.Duration(readableInstant27, readableInstant28);
        long long30 = duration29.getMillis();
        boolean boolean31 = duration23.isShorterThan((org.joda.time.ReadableDuration) duration29);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime((long) 3, chronology33);
        org.joda.time.DateTime.Property property35 = dateTime34.dayOfYear();
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.DateMidnight dateMidnight37 = new org.joda.time.DateMidnight((java.lang.Object) dateTime34, chronology36);
        org.joda.time.MutableDateTime mutableDateTime38 = dateTime34.toMutableDateTime();
        mutableDateTime38.addYears((int) (short) 100);
        org.joda.time.MutableDateTime.Property property41 = mutableDateTime38.dayOfWeek();
        org.joda.time.MutableDateTime.Property property42 = mutableDateTime38.year();
        org.joda.time.MutableDateTime.Property property43 = mutableDateTime38.weekyear();
        boolean boolean44 = duration23.equals((java.lang.Object) mutableDateTime38);
        mutableDateTime38.addMonths((int) ' ');
        mutableDateTime38.add((long) (byte) 10);
        org.joda.time.Period period49 = org.joda.time.Period.ZERO;
        org.joda.time.Period period50 = period49.normalizedStandard();
        org.joda.time.Period period52 = period49.plusHours(2);
        java.time.chrono.IsoEra isoEra53 = java.time.chrono.IsoEra.CE;
        boolean boolean54 = period52.equals((java.lang.Object) isoEra53);
        int int55 = period52.getMinutes();
        mutableDateTime38.add((org.joda.time.ReadablePeriod) period52);
        java.util.TimeZone timeZone58 = null;
        org.joda.time.DateTimeZone dateTimeZone59 = org.joda.time.DateTimeZone.forTimeZone(timeZone58);
        org.joda.time.DateMidnight dateMidnight60 = new org.joda.time.DateMidnight((long) 1970, dateTimeZone59);
        long long63 = dateTimeZone59.convertLocalToUTC((long) 3, false);
        long long66 = dateTimeZone59.convertLocalToUTC(0L, true);
        mutableDateTime38.setZoneRetainFields(dateTimeZone59);
        java.lang.String str68 = dateTimeZone59.toString();
        org.joda.time.Chronology chronology70 = null;
        org.joda.time.DateTime dateTime71 = new org.joda.time.DateTime((long) 3, chronology70);
        org.joda.time.DateTime.Property property72 = dateTime71.dayOfYear();
        org.joda.time.Chronology chronology73 = null;
        org.joda.time.DateMidnight dateMidnight74 = new org.joda.time.DateMidnight((java.lang.Object) dateTime71, chronology73);
        org.joda.time.MutableDateTime mutableDateTime75 = dateTime71.toMutableDateTime();
        mutableDateTime75.addYears((int) (short) 100);
        org.joda.time.MutableDateTime.Property property78 = mutableDateTime75.dayOfWeek();
        org.joda.time.MutableDateTime.Property property79 = mutableDateTime75.year();
        java.util.TimeZone timeZone80 = null;
        org.joda.time.DateTimeZone dateTimeZone81 = org.joda.time.DateTimeZone.forTimeZone(timeZone80);
        mutableDateTime75.setZone(dateTimeZone81);
        java.util.Locale locale84 = java.util.Locale.TAIWAN;
        java.lang.String str85 = dateTimeZone81.getShortName((long) 64, locale84);
        long long87 = dateTimeZone59.getMillisKeepLocal(dateTimeZone81, (long) 7);
        org.joda.time.DateMidnight dateMidnight88 = dateMidnight20.withZoneRetainFields(dateTimeZone81);
        org.joda.time.DateTimeFieldType dateTimeFieldType89 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.DateMidnight.Property property90 = dateMidnight20.property(dateTimeFieldType89);
        org.joda.time.DateMidnight dateMidnight91 = property90.roundFloorCopy();
        java.util.Locale locale92 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.String> strSet93 = locale92.getUnicodeLocaleKeys();
        java.lang.String str94 = property90.getAsText(locale92);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(mutableDateTime38);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(period49);
        org.junit.Assert.assertNotNull(period50);
        org.junit.Assert.assertNotNull(period52);
        org.junit.Assert.assertTrue("'" + isoEra53 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra53.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone59);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 3L + "'", long63 == 3L);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 0L + "'", long66 == 0L);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "Etc/UTC" + "'", str68, "Etc/UTC");
        org.junit.Assert.assertNotNull(property72);
        org.junit.Assert.assertNotNull(mutableDateTime75);
        org.junit.Assert.assertNotNull(property78);
        org.junit.Assert.assertNotNull(property79);
        org.junit.Assert.assertNotNull(dateTimeZone81);
        org.junit.Assert.assertNotNull(locale84);
        org.junit.Assert.assertEquals(locale84.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "+00:00" + "'", str85, "+00:00");
        org.junit.Assert.assertTrue("'" + long87 + "' != '" + 7L + "'", long87 == 7L);
        org.junit.Assert.assertNotNull(dateMidnight88);
        org.junit.Assert.assertNotNull(dateTimeFieldType89);
        org.junit.Assert.assertNotNull(property90);
        org.junit.Assert.assertNotNull(dateMidnight91);
        org.junit.Assert.assertNotNull(locale92);
        org.junit.Assert.assertEquals(locale92.toString(), "ko");
        org.junit.Assert.assertNotNull(strSet93);
// flaky:         org.junit.Assert.assertEquals("'" + str94 + "' != '" + "\uc6d4" + "'", str94, "\uc6d4");
    }

    @Test
    public void test6245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6245");
        java.time.LocalTime localTime4 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime5 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime4);
        long long6 = localTime4.toNanoOfDay();
        java.time.OffsetTime offsetTime7 = java.time.OffsetTime.MAX;
        java.time.LocalTime localTime8 = offsetTime7.toLocalTime();
        java.time.Duration duration10 = java.time.Duration.ofMinutes((long) 3);
        java.time.temporal.Temporal temporal11 = localTime8.plus((java.time.temporal.TemporalAmount) duration10);
        java.time.Duration duration13 = duration10.plusNanos((long) 9);
        java.time.LocalTime localTime14 = localTime4.plus((java.time.temporal.TemporalAmount) duration10);
        long long15 = duration10.toMillis();
        java.time.LocalDateTime localDateTime16 = java.time.LocalDateTime.MIN;
        java.time.Month month17 = java.time.Month.NOVEMBER;
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime18 = localDateTime16.with((java.time.temporal.TemporalAdjuster) month17);
        java.time.LocalDateTime localDateTime20 = localDateTime16.plusMinutes((long) 3600000);
        java.time.temporal.Temporal temporal21 = duration10.addTo((java.time.temporal.Temporal) localDateTime16);
        java.util.GregorianCalendar gregorianCalendar27 = new java.util.GregorianCalendar(12, 4096, 7, (-1), (int) (short) 10);
        int int28 = gregorianCalendar27.getWeeksInWeekYear();
        java.lang.String str29 = gregorianCalendar27.getCalendarType();
        java.time.ZonedDateTime zonedDateTime30 = gregorianCalendar27.toZonedDateTime();
        java.util.GregorianCalendar gregorianCalendar36 = new java.util.GregorianCalendar(12, 4096, 7, (-1), (int) (short) 10);
        int int37 = gregorianCalendar36.getWeeksInWeekYear();
        java.lang.String str38 = gregorianCalendar36.getCalendarType();
        java.time.ZonedDateTime zonedDateTime39 = gregorianCalendar36.toZonedDateTime();
        int int40 = zonedDateTime30.compareTo((java.time.chrono.ChronoZonedDateTime<java.time.LocalDate>) zonedDateTime39);
        java.time.ZonedDateTime zonedDateTime42 = zonedDateTime30.plusDays((long) 2022);
        java.time.Instant instant43 = zonedDateTime30.toInstant();
        java.time.chrono.Chronology chronology44 = zonedDateTime30.getChronology();
        java.util.GregorianCalendar gregorianCalendar50 = new java.util.GregorianCalendar(12, 4096, 7, (-1), (int) (short) 10);
        int int51 = gregorianCalendar50.getWeeksInWeekYear();
        java.lang.String str52 = gregorianCalendar50.getCalendarType();
        java.time.ZonedDateTime zonedDateTime53 = gregorianCalendar50.toZonedDateTime();
        java.time.ZonedDateTime zonedDateTime55 = zonedDateTime53.minusMonths((long) 10);
        boolean boolean56 = zonedDateTime30.isBefore((java.time.chrono.ChronoZonedDateTime<java.time.LocalDate>) zonedDateTime55);
        java.time.OffsetDateTime offsetDateTime57 = java.time.OffsetDateTime.from((java.time.temporal.TemporalAccessor) zonedDateTime30);
        java.time.OffsetTime offsetTime58 = offsetDateTime57.toOffsetTime();
        java.time.format.DateTimeFormatter dateTimeFormatter59 = java.time.format.DateTimeFormatter.ISO_LOCAL_DATE_TIME;
        java.time.ZoneOffset zoneOffset62 = java.time.ZoneOffset.ofHoursMinutes(1, 10);
        java.time.LocalDate localDate63 = java.time.LocalDate.now((java.time.ZoneId) zoneOffset62);
        java.time.LocalDate localDate64 = java.time.LocalDate.now((java.time.ZoneId) zoneOffset62);
        java.time.format.DateTimeFormatter dateTimeFormatter65 = dateTimeFormatter59.withZone((java.time.ZoneId) zoneOffset62);
        java.time.OffsetTime offsetTime66 = offsetTime58.withOffsetSameInstant(zoneOffset62);
        long long67 = localDateTime16.toEpochSecond(zoneOffset62);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 3601000000001L + "'", long6 == 3601000000001L);
        org.junit.Assert.assertNotNull(offsetTime7);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(temporal11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 180000L + "'", long15 == 180000L);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + month17 + "' != '" + java.time.Month.NOVEMBER + "'", month17.equals(java.time.Month.NOVEMBER));
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(temporal21);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 52 + "'", int28 == 52);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "gregory" + "'", str29, "gregory");
        org.junit.Assert.assertNotNull(zonedDateTime30);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 52 + "'", int37 == 52);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "gregory" + "'", str38, "gregory");
        org.junit.Assert.assertNotNull(zonedDateTime39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(zonedDateTime42);
        org.junit.Assert.assertNotNull(instant43);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 52 + "'", int51 == 52);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "gregory" + "'", str52, "gregory");
        org.junit.Assert.assertNotNull(zonedDateTime53);
        org.junit.Assert.assertNotNull(zonedDateTime55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(offsetDateTime57);
        org.junit.Assert.assertNotNull(offsetTime58);
        org.junit.Assert.assertNotNull(dateTimeFormatter59);
        org.junit.Assert.assertNotNull(zoneOffset62);
        org.junit.Assert.assertNotNull(localDate63);
        org.junit.Assert.assertNotNull(localDate64);
        org.junit.Assert.assertNotNull(dateTimeFormatter65);
        org.junit.Assert.assertNotNull(offsetTime66);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + (-31557014135601000L) + "'", long67 == (-31557014135601000L));
    }

    @Test
    public void test6246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6246");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 3, chronology1);
        org.joda.time.Period period3 = org.joda.time.Period.ZERO;
        org.joda.time.Period period4 = period3.normalizedStandard();
        org.joda.time.Period period6 = period4.minusMinutes((int) ' ');
        org.joda.time.Period period8 = period6.minusMonths((int) (byte) 0);
        org.joda.time.PeriodType periodType9 = period8.getPeriodType();
        org.joda.time.DateTime dateTime10 = dateTime2.minus((org.joda.time.ReadablePeriod) period8);
        org.joda.time.DateTime dateTime12 = dateTime2.plusHours(34);
        org.joda.time.Period period13 = org.joda.time.Period.ZERO;
        org.joda.time.Period period14 = period13.normalizedStandard();
        org.joda.time.Period period16 = period14.minusMinutes((int) ' ');
        org.joda.time.Period period18 = period16.minusMonths((int) (byte) 0);
        org.joda.time.DateTime dateTime19 = dateTime2.plus((org.joda.time.ReadablePeriod) period18);
        int int20 = dateTime2.getYearOfCentury();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((long) 3, chronology22);
        org.joda.time.DateTime.Property property24 = dateTime23.dayOfYear();
        org.joda.time.Interval interval25 = property24.toInterval();
        org.joda.time.Period period26 = org.joda.time.Period.ZERO;
        org.joda.time.Period period27 = period26.normalizedStandard();
        org.joda.time.Period period29 = period27.minusMinutes((int) ' ');
        org.joda.time.Period period31 = period29.withMinutes(32769);
        boolean boolean32 = interval25.equals((java.lang.Object) period31);
        org.joda.time.Period period33 = org.joda.time.Period.ZERO;
        org.joda.time.Period period34 = period33.normalizedStandard();
        org.joda.time.Period period36 = period33.plusHours(2);
        int int37 = period33.getDays();
        org.joda.time.Interval interval38 = interval25.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period33);
        long long39 = interval38.getEndMillis();
        org.joda.time.ReadableInstant readableInstant40 = null;
        org.joda.time.ReadableInstant readableInstant41 = null;
        org.joda.time.Duration duration42 = new org.joda.time.Duration(readableInstant40, readableInstant41);
        org.joda.time.Duration duration44 = duration42.withMillis((-1L));
        org.joda.time.ReadableDuration readableDuration45 = null;
        org.joda.time.Duration duration46 = duration42.minus(readableDuration45);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime((long) 3, chronology48);
        org.joda.time.DateTime.Property property50 = dateTime49.dayOfYear();
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.DateMidnight dateMidnight52 = new org.joda.time.DateMidnight((java.lang.Object) dateTime49, chronology51);
        org.joda.time.DateMidnight.Property property53 = dateMidnight52.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight54 = property53.getDateMidnight();
        org.joda.time.Interval interval55 = new org.joda.time.Interval((org.joda.time.ReadableDuration) duration46, (org.joda.time.ReadableInstant) dateMidnight54);
        org.joda.time.Interval interval56 = interval38.withDurationAfterStart((org.joda.time.ReadableDuration) duration46);
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.LocalTime localTime59 = new org.joda.time.LocalTime((long) 0, chronology58);
        org.joda.time.Chronology chronology60 = localTime59.getChronology();
        org.joda.time.DateTimeField dateTimeField61 = chronology60.weekyearOfCentury();
        org.joda.time.Period period62 = duration46.toPeriod(chronology60);
        org.joda.time.DurationField durationField63 = chronology60.months();
        org.joda.time.DateTimeField dateTimeField64 = chronology60.era();
        org.joda.time.DateTimeField dateTimeField65 = chronology60.hourOfHalfday();
        org.joda.time.MutableDateTime mutableDateTime66 = dateTime2.toMutableDateTime(chronology60);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime68 = dateTime2.withSecondOfMinute(680);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 680 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 70 + "'", int20 == 70);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 86400000L + "'", long39 == 86400000L);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(dateMidnight54);
        org.junit.Assert.assertNotNull(interval56);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertNotNull(period62);
        org.junit.Assert.assertNotNull(durationField63);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertNotNull(mutableDateTime66);
    }

    @Test
    public void test6247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6247");
        java.util.GregorianCalendar gregorianCalendar5 = new java.util.GregorianCalendar(12, 4096, 7, (-1), (int) (short) 10);
        int int6 = gregorianCalendar5.getWeeksInWeekYear();
        java.lang.String str7 = gregorianCalendar5.getCalendarType();
        java.time.ZonedDateTime zonedDateTime8 = gregorianCalendar5.toZonedDateTime();
        java.time.ZonedDateTime zonedDateTime10 = zonedDateTime8.minusMonths((long) 10);
        java.time.ZonedDateTime zonedDateTime12 = zonedDateTime10.withNano(52);
        java.time.LocalTime localTime17 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime18 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime17);
        long long19 = localTime18.toNanoOfDay();
        java.util.GregorianCalendar gregorianCalendar25 = new java.util.GregorianCalendar(12, 4096, 7, (-1), (int) (short) 10);
        int int26 = gregorianCalendar25.getWeeksInWeekYear();
        java.lang.String str27 = gregorianCalendar25.getCalendarType();
        java.time.ZonedDateTime zonedDateTime28 = gregorianCalendar25.toZonedDateTime();
        java.time.ZonedDateTime zonedDateTime30 = zonedDateTime28.minusMonths((long) 10);
        java.time.temporal.Temporal temporal31 = localTime18.adjustInto((java.time.temporal.Temporal) zonedDateTime30);
        java.time.LocalDateTime localDateTime32 = java.time.LocalDateTime.now();
        java.time.LocalDateTime localDateTime34 = localDateTime32.minusYears((long) (byte) 10);
        java.time.LocalDateTime localDateTime35 = java.time.LocalDateTime.now();
        java.time.LocalDateTime localDateTime37 = localDateTime35.minusYears((long) (byte) 10);
        boolean boolean38 = localDateTime32.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime37);
        java.time.OffsetTime offsetTime39 = java.time.OffsetTime.MAX;
        java.time.LocalTime localTime40 = offsetTime39.toLocalTime();
        java.time.OffsetTime offsetTime41 = java.time.OffsetTime.MAX;
        java.time.LocalTime localTime42 = offsetTime41.toLocalTime();
        java.lang.String str43 = offsetTime41.toString();
        java.time.Duration duration44 = java.time.Duration.ZERO;
        java.lang.String str45 = duration44.toString();
        java.time.OffsetTime offsetTime46 = offsetTime41.plus((java.time.temporal.TemporalAmount) duration44);
        java.time.OffsetTime offsetTime48 = offsetTime41.plusNanos((long) 0);
        java.time.LocalTime localTime53 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime54 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime53);
        java.time.temporal.ChronoField chronoField55 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime57 = localTime53.with((java.time.temporal.TemporalField) chronoField55, (long) (short) 1);
        java.util.Locale locale58 = java.util.Locale.GERMANY;
        java.lang.String str59 = chronoField55.getDisplayName(locale58);
        java.time.OffsetTime offsetTime61 = offsetTime48.with((java.time.temporal.TemporalField) chronoField55, (long) 28);
        long long62 = localTime40.getLong((java.time.temporal.TemporalField) chronoField55);
        java.time.temporal.TemporalUnit temporalUnit63 = chronoField55.getRangeUnit();
        boolean boolean64 = localDateTime32.isSupported(temporalUnit63);
        java.time.ZonedDateTime zonedDateTime65 = zonedDateTime30.truncatedTo(temporalUnit63);
        boolean boolean66 = zonedDateTime12.isEqual((java.time.chrono.ChronoZonedDateTime<java.time.LocalDate>) zonedDateTime30);
        java.time.ZoneOffset zoneOffset67 = zonedDateTime30.getOffset();
        java.time.Clock clock68 = java.time.Clock.system((java.time.ZoneId) zoneOffset67);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 52 + "'", int6 == 52);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "gregory" + "'", str7, "gregory");
        org.junit.Assert.assertNotNull(zonedDateTime8);
        org.junit.Assert.assertNotNull(zonedDateTime10);
        org.junit.Assert.assertNotNull(zonedDateTime12);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 3601000000001L + "'", long19 == 3601000000001L);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 52 + "'", int26 == 52);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "gregory" + "'", str27, "gregory");
        org.junit.Assert.assertNotNull(zonedDateTime28);
        org.junit.Assert.assertNotNull(zonedDateTime30);
        org.junit.Assert.assertNotNull(temporal31);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(offsetTime39);
        org.junit.Assert.assertNotNull(localTime40);
        org.junit.Assert.assertNotNull(offsetTime41);
        org.junit.Assert.assertNotNull(localTime42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "23:59:59.999999999-18:00" + "'", str43, "23:59:59.999999999-18:00");
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "PT0S" + "'", str45, "PT0S");
        org.junit.Assert.assertNotNull(offsetTime46);
        org.junit.Assert.assertNotNull(offsetTime48);
        org.junit.Assert.assertNotNull(localTime53);
        org.junit.Assert.assertNotNull(localTime54);
        org.junit.Assert.assertTrue("'" + chronoField55 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField55.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime57);
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "NanoOfDay" + "'", str59, "NanoOfDay");
        org.junit.Assert.assertNotNull(offsetTime61);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 86399999999999L + "'", long62 == 86399999999999L);
        org.junit.Assert.assertTrue("'" + temporalUnit63 + "' != '" + java.time.temporal.ChronoUnit.DAYS + "'", temporalUnit63.equals(java.time.temporal.ChronoUnit.DAYS));
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(zonedDateTime65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(zoneOffset67);
        org.junit.Assert.assertNotNull(clock68);
    }

    @Test
    public void test6248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6248");
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.ofHoursMinutes(1, 10);
        java.time.LocalDate localDate3 = java.time.LocalDate.now((java.time.ZoneId) zoneOffset2);
        java.time.Clock clock4 = java.time.Clock.system((java.time.ZoneId) zoneOffset2);
        java.time.Duration duration6 = java.time.Duration.ofSeconds((long) 0);
        java.time.Duration duration8 = duration6.multipliedBy((long) (byte) -1);
        java.time.Clock clock9 = java.time.Clock.offset(clock4, duration6);
        java.time.Instant instant10 = clock4.instant();
        java.time.LocalDateTime localDateTime11 = java.time.LocalDateTime.now();
        java.time.temporal.ChronoField chronoField12 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime14 = localDateTime11.with((java.time.temporal.TemporalField) chronoField12, (long) 10);
        java.lang.String str15 = localDateTime11.toString();
        java.util.GregorianCalendar gregorianCalendar21 = new java.util.GregorianCalendar(12, 4096, 7, (-1), (int) (short) 10);
        int int22 = gregorianCalendar21.getWeeksInWeekYear();
        java.util.TimeZone timeZone23 = gregorianCalendar21.getTimeZone();
        java.util.Locale locale25 = new java.util.Locale("hi!");
        java.util.Calendar calendar26 = java.util.Calendar.getInstance(timeZone23, locale25);
        java.time.Instant instant27 = calendar26.toInstant();
        java.time.chrono.IsoEra isoEra28 = java.time.chrono.IsoEra.CE;
        java.time.format.DateTimeFormatter dateTimeFormatter29 = java.time.format.DateTimeFormatter.ISO_DATE;
        java.lang.String str30 = dateTimeFormatter29.toString();
        java.time.LocalDateTime localDateTime31 = java.time.LocalDateTime.now();
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery32 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period33 = localDateTime31.query(periodTemporalQuery32);
        java.text.Format format34 = dateTimeFormatter29.toFormat(periodTemporalQuery32);
        java.time.Period period35 = isoEra28.query(periodTemporalQuery32);
        java.time.Period period36 = instant27.query(periodTemporalQuery32);
        java.time.Period period37 = localDateTime11.query(periodTemporalQuery32);
        java.time.LocalDate localDate38 = localDateTime11.toLocalDate();
        // The following exception was thrown during execution in test generation
        try {
            java.time.Instant instant39 = instant10.with((java.time.temporal.TemporalAdjuster) localDateTime11);
            org.junit.Assert.fail("Expected exception of type java.time.temporal.UnsupportedTemporalTypeException; message: Unsupported field: EpochDay");
        } catch (java.time.temporal.UnsupportedTemporalTypeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(clock4);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(clock9);
        org.junit.Assert.assertNotNull(instant10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + chronoField12 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField12.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime14);
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "2022-02-21T09:42:56.244" + "'", str15, "2022-02-21T09:42:56.244");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 52 + "'", int22 == 52);
        org.junit.Assert.assertNotNull(timeZone23);
        org.junit.Assert.assertEquals(timeZone23.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertEquals(locale25.toString(), "hi!");
        org.junit.Assert.assertNotNull(calendar26);
// flaky:         org.junit.Assert.assertEquals(calendar26.toString(), "java.util.GregorianCalendar[time=1645436576245,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=35,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=42,SECOND=56,MILLISECOND=280,ZONE_OFFSET=35,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(instant27);
        org.junit.Assert.assertTrue("'" + isoEra28 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra28.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertNotNull(dateTimeFormatter29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "ParseCaseSensitive(false)(Value(Year,4,10,EXCEEDS_PAD)'-'Value(MonthOfYear,2)'-'Value(DayOfMonth,2))[Offset(+HH:MM:ss,'Z')]" + "'", str30, "ParseCaseSensitive(false)(Value(Year,4,10,EXCEEDS_PAD)'-'Value(MonthOfYear,2)'-'Value(DayOfMonth,2))[Offset(+HH:MM:ss,'Z')]");
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(periodTemporalQuery32);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(format34);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(localDate38);
    }

    @Test
    public void test6249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6249");
        java.time.Clock clock0 = java.time.Clock.systemUTC();
        java.time.Duration duration2 = java.time.Duration.ofSeconds((long) 256);
        java.time.Clock clock3 = java.time.Clock.tick(clock0, duration2);
        java.time.LocalDateTime localDateTime4 = java.time.LocalDateTime.now(clock0);
        java.time.LocalDateTime localDateTime6 = localDateTime4.plusMinutes((long) 86);
        org.junit.Assert.assertNotNull(clock0);
        org.junit.Assert.assertNotNull(duration2);
        org.junit.Assert.assertNotNull(clock3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
    }

    @Test
    public void test6250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6250");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((long) 0, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) 3, chronology4);
        org.joda.time.DateTime.Property property6 = dateTime5.dayOfYear();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateMidnight dateMidnight8 = new org.joda.time.DateMidnight((java.lang.Object) dateTime5, chronology7);
        org.joda.time.DateTime dateTime9 = localTime2.toDateTime((org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.LocalTime localTime11 = localTime2.plusHours(3);
        int int12 = localTime11.getMillisOfDay();
        org.joda.time.LocalTime.Property property13 = localTime11.millisOfSecond();
        org.joda.time.LocalTime localTime15 = localTime11.plusSeconds(19);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((long) 3, chronology17);
        org.joda.time.DateTime.Property property19 = dateTime18.dayOfYear();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight((java.lang.Object) dateTime18, chronology20);
        org.joda.time.MutableDateTime mutableDateTime22 = dateTime18.toMutableDateTime();
        org.joda.time.Days days23 = org.joda.time.Days.ONE;
        org.joda.time.MutableInterval mutableInterval24 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime18, (org.joda.time.ReadablePeriod) days23);
        java.lang.String[] strArray27 = new java.lang.String[] { "halfdays", "Optional.empty" };
        java.util.ArrayList<java.lang.String> strList28 = new java.util.ArrayList<java.lang.String>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList28, strArray27);
        java.util.Iterator<java.lang.String> strItor30 = strList28.iterator();
        boolean boolean31 = days23.equals((java.lang.Object) strItor30);
        org.joda.time.Days days33 = days23.dividedBy(10800000);
        org.joda.time.LocalTime localTime35 = localTime11.withPeriodAdded((org.joda.time.ReadablePeriod) days33, 57);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime((long) 3, chronology37);
        org.joda.time.Period period39 = org.joda.time.Period.ZERO;
        org.joda.time.Period period40 = period39.normalizedStandard();
        org.joda.time.Period period42 = period40.minusMinutes((int) ' ');
        org.joda.time.Period period44 = period42.minusMonths((int) (byte) 0);
        org.joda.time.PeriodType periodType45 = period44.getPeriodType();
        org.joda.time.DateTime dateTime46 = dateTime38.minus((org.joda.time.ReadablePeriod) period44);
        org.joda.time.DateTime dateTime48 = dateTime38.plusHours(34);
        org.joda.time.DateTime dateTime50 = dateTime38.plusMonths(5);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.LocalTime localTime53 = new org.joda.time.LocalTime((long) 0, chronology52);
        org.joda.time.Chronology chronology54 = localTime53.getChronology();
        org.joda.time.DateTimeField dateTimeField55 = chronology54.weekyearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime56 = org.joda.time.MutableDateTime.now(chronology54);
        mutableDateTime56.setWeekOfWeekyear((int) '#');
        mutableDateTime56.addHours(0);
        org.joda.time.Days days61 = org.joda.time.Days.daysBetween((org.joda.time.ReadableInstant) dateTime50, (org.joda.time.ReadableInstant) mutableDateTime56);
        org.joda.time.PeriodType periodType62 = days61.getPeriodType();
        boolean boolean63 = days33.isLessThan(days61);
        java.lang.String str64 = days33.toString();
        org.joda.time.PeriodType periodType65 = days33.getPeriodType();
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 10800000 + "'", int12 == 10800000);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(mutableDateTime22);
        org.junit.Assert.assertNotNull(days23);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(strItor30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(days33);
        org.junit.Assert.assertNotNull(localTime35);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertNotNull(periodType45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(mutableDateTime56);
        org.junit.Assert.assertNotNull(days61);
        org.junit.Assert.assertNotNull(periodType62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "P0D" + "'", str64, "P0D");
        org.junit.Assert.assertNotNull(periodType65);
    }

    @Test
    public void test6251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6251");
        org.joda.time.Period period0 = org.joda.time.Period.ZERO;
        org.joda.time.Period period1 = period0.normalizedStandard();
        org.joda.time.Period period3 = period1.minusMinutes((int) ' ');
        org.joda.time.Period period5 = period3.withMinutes(32769);
        org.joda.time.Period period7 = period5.withWeeks(32772);
        org.junit.Assert.assertNotNull(period0);
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(period7);
    }

    @Test
    public void test6252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6252");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 3, chronology1);
        org.joda.time.DateTime.Property property3 = dateTime2.dayOfYear();
        org.joda.time.DateTime.Property property4 = dateTime2.dayOfYear();
        org.joda.time.DateTime dateTime5 = property4.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime7 = property4.addToCopy((long) 576);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((java.lang.Object) property4);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No period converter found for type: org.joda.time.DateTime$Property");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
    }

    @Test
    public void test6253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6253");
        java.time.Period period1 = java.time.Period.ofYears(28);
        java.time.chrono.IsoChronology isoChronology2 = period1.getChronology();
        boolean boolean4 = isoChronology2.isLeapYear((long) 35);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((long) 3, chronology6);
        org.joda.time.DateTime.Property property8 = dateTime7.dayOfYear();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight((java.lang.Object) dateTime7, chronology9);
        org.joda.time.MutableDateTime mutableDateTime11 = dateTime7.toMutableDateTime();
        mutableDateTime11.addYears((int) (short) 100);
        mutableDateTime11.setMillis((long) 21);
        org.joda.time.MutableDateTime.Property property16 = mutableDateTime11.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime17 = property16.roundHalfCeiling();
        java.time.LocalTime localTime22 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime23 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime22);
        long long24 = localTime23.toNanoOfDay();
        java.util.GregorianCalendar gregorianCalendar30 = new java.util.GregorianCalendar(12, 4096, 7, (-1), (int) (short) 10);
        int int31 = gregorianCalendar30.getWeeksInWeekYear();
        java.lang.String str32 = gregorianCalendar30.getCalendarType();
        java.time.ZonedDateTime zonedDateTime33 = gregorianCalendar30.toZonedDateTime();
        java.time.ZonedDateTime zonedDateTime35 = zonedDateTime33.minusMonths((long) 10);
        java.time.temporal.Temporal temporal36 = localTime23.adjustInto((java.time.temporal.Temporal) zonedDateTime35);
        boolean boolean37 = mutableDateTime17.equals((java.lang.Object) zonedDateTime35);
        java.util.GregorianCalendar gregorianCalendar43 = new java.util.GregorianCalendar(12, 4096, 7, (-1), (int) (short) 10);
        int int44 = gregorianCalendar43.getWeeksInWeekYear();
        java.lang.String str45 = gregorianCalendar43.getCalendarType();
        java.time.ZonedDateTime zonedDateTime46 = gregorianCalendar43.toZonedDateTime();
        java.util.GregorianCalendar gregorianCalendar52 = new java.util.GregorianCalendar(12, 4096, 7, (-1), (int) (short) 10);
        int int53 = gregorianCalendar52.getWeeksInWeekYear();
        java.lang.String str54 = gregorianCalendar52.getCalendarType();
        java.time.ZonedDateTime zonedDateTime55 = gregorianCalendar52.toZonedDateTime();
        int int56 = zonedDateTime46.compareTo((java.time.chrono.ChronoZonedDateTime<java.time.LocalDate>) zonedDateTime55);
        java.time.ZonedDateTime zonedDateTime58 = zonedDateTime46.plusDays((long) 2022);
        java.time.Instant instant59 = zonedDateTime46.toInstant();
        java.time.chrono.Chronology chronology60 = zonedDateTime46.getChronology();
        boolean boolean61 = zonedDateTime35.isAfter((java.time.chrono.ChronoZonedDateTime<java.time.LocalDate>) zonedDateTime46);
        java.time.ZonedDateTime zonedDateTime62 = isoChronology2.zonedDateTime((java.time.temporal.TemporalAccessor) zonedDateTime35);
        java.time.LocalDate localDate63 = zonedDateTime62.toLocalDate();
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(isoChronology2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertNotNull(localTime23);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 3601000000001L + "'", long24 == 3601000000001L);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 52 + "'", int31 == 52);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "gregory" + "'", str32, "gregory");
        org.junit.Assert.assertNotNull(zonedDateTime33);
        org.junit.Assert.assertNotNull(zonedDateTime35);
        org.junit.Assert.assertNotNull(temporal36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 52 + "'", int44 == 52);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "gregory" + "'", str45, "gregory");
        org.junit.Assert.assertNotNull(zonedDateTime46);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 52 + "'", int53 == 52);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "gregory" + "'", str54, "gregory");
        org.junit.Assert.assertNotNull(zonedDateTime55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(zonedDateTime58);
        org.junit.Assert.assertNotNull(instant59);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(zonedDateTime62);
        org.junit.Assert.assertNotNull(localDate63);
    }

    @Test
    public void test6254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6254");
        java.nio.charset.Charset charset0 = java.nio.charset.Charset.defaultCharset();
        java.nio.charset.CharsetDecoder charsetDecoder1 = charset0.newDecoder();
        java.lang.String str2 = charset0.toString();
        org.junit.Assert.assertNotNull(charset0);
        org.junit.Assert.assertNotNull(charsetDecoder1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "US-ASCII" + "'", str2, "US-ASCII");
    }

    @Test
    public void test6255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6255");
        java.time.Period period1 = java.time.Period.ofYears(28);
        java.time.chrono.IsoChronology isoChronology2 = period1.getChronology();
        java.time.LocalDate localDate3 = isoChronology2.dateNow();
        // The following exception was thrown during execution in test generation
        try {
            java.time.LocalDate localDate7 = isoChronology2.date(189, 18, 306);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for MonthOfYear (valid values 1 - 12): 18");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(isoChronology2);
        org.junit.Assert.assertNotNull(localDate3);
    }

    @Test
    public void test6256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6256");
        java.util.stream.LongStream longStream2 = java.util.stream.LongStream.rangeClosed((long) 5, (long) 'a');
        java.util.OptionalLong optionalLong3 = longStream2.min();
        java.util.stream.LongStream longStream4 = longStream2.sequential();
        // The following exception was thrown during execution in test generation
        try {
            long long5 = longStream4.count();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: stream has already been operated upon or closed");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(longStream2);
        org.junit.Assert.assertNotNull(optionalLong3);
        org.junit.Assert.assertNotNull(longStream4);
    }

    @Test
    public void test6257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6257");
        java.time.ZoneOffset zoneOffset0 = java.time.ZoneOffset.MIN;
        java.time.temporal.ChronoField chronoField1 = java.time.temporal.ChronoField.YEAR;
        // The following exception was thrown during execution in test generation
        try {
            long long2 = zoneOffset0.getLong((java.time.temporal.TemporalField) chronoField1);
            org.junit.Assert.fail("Expected exception of type java.time.temporal.UnsupportedTemporalTypeException; message: Unsupported field: Year");
        } catch (java.time.temporal.UnsupportedTemporalTypeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(zoneOffset0);
        org.junit.Assert.assertTrue("'" + chronoField1 + "' != '" + java.time.temporal.ChronoField.YEAR + "'", chronoField1.equals(java.time.temporal.ChronoField.YEAR));
    }

    @Test
    public void test6258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6258");
        java.util.Locale locale1 = new java.util.Locale("hi!");
        boolean boolean2 = locale1.hasExtensions();
        java.time.format.DecimalStyle decimalStyle3 = java.time.format.DecimalStyle.of(locale1);
        java.util.Set<java.lang.String> strSet4 = locale1.getUnicodeLocaleKeys();
        java.util.Set<java.lang.String> strSet5 = java.time.ZoneId.getAvailableZoneIds();
        boolean boolean6 = strSet4.containsAll((java.util.Collection<java.lang.String>) strSet5);
        java.util.Set<java.lang.String> strSet7 = java.time.ZoneId.getAvailableZoneIds();
        java.util.Set<java.lang.String> strSet8 = java.time.ZoneId.getAvailableZoneIds();
        java.util.stream.Stream<java.lang.String> strStream9 = strSet8.parallelStream();
        java.lang.Object[] objArray10 = strSet8.toArray();
        java.util.Spliterator<java.lang.String> strSpliterator11 = strSet8.spliterator();
        boolean boolean12 = strSet7.containsAll((java.util.Collection<java.lang.String>) strSet8);
        strSet7.clear();
        boolean boolean14 = strSet5.retainAll((java.util.Collection<java.lang.String>) strSet7);
        java.util.Set<java.lang.String> strSet15 = java.time.ZoneId.getAvailableZoneIds();
        java.util.stream.Stream<java.lang.String> strStream16 = strSet15.parallelStream();
        boolean boolean18 = strSet15.contains((java.lang.Object) 1.0d);
        java.util.stream.Stream<java.lang.String> strStream19 = strSet15.parallelStream();
        boolean boolean20 = strSet7.retainAll((java.util.Collection<java.lang.String>) strSet15);
        java.util.Iterator<java.lang.String> strItor21 = strSet7.iterator();
        org.junit.Assert.assertEquals(locale1.toString(), "hi!");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(decimalStyle3);
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertNotNull(strStream9);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertNotNull(strSpliterator11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(strSet15);
        org.junit.Assert.assertNotNull(strStream16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(strStream19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(strItor21);
    }

    @Test
    public void test6259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6259");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.Duration duration2 = new org.joda.time.Duration(readableInstant0, readableInstant1);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = duration2.toPeriodTo(readableInstant3, periodType4);
        long long6 = duration2.getStandardSeconds();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 3, chronology8);
        org.joda.time.DateTime.Property property10 = dateTime9.dayOfYear();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight((java.lang.Object) dateTime9, chronology11);
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight12.minusMonths((-1));
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight12.withDayOfYear((int) ' ');
        org.joda.time.Interval interval17 = duration2.toIntervalTo((org.joda.time.ReadableInstant) dateMidnight16);
        long long18 = duration2.getStandardSeconds();
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate();
        org.joda.time.Interval interval20 = localDate19.toInterval();
        int int21 = localDate19.getYearOfCentury();
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.Duration duration24 = new org.joda.time.Duration(readableInstant22, readableInstant23);
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.PeriodType periodType26 = null;
        org.joda.time.Period period27 = duration24.toPeriodTo(readableInstant25, periodType26);
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.Duration duration30 = new org.joda.time.Duration(readableInstant28, readableInstant29);
        long long31 = duration30.getMillis();
        boolean boolean32 = duration24.isShorterThan((org.joda.time.ReadableDuration) duration30);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime((long) 3, chronology34);
        org.joda.time.DateTime.Property property36 = dateTime35.dayOfYear();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.DateMidnight dateMidnight38 = new org.joda.time.DateMidnight((java.lang.Object) dateTime35, chronology37);
        org.joda.time.MutableDateTime mutableDateTime39 = dateTime35.toMutableDateTime();
        mutableDateTime39.addYears((int) (short) 100);
        org.joda.time.MutableDateTime.Property property42 = mutableDateTime39.dayOfWeek();
        org.joda.time.MutableDateTime.Property property43 = mutableDateTime39.year();
        org.joda.time.MutableDateTime.Property property44 = mutableDateTime39.weekyear();
        boolean boolean45 = duration24.equals((java.lang.Object) mutableDateTime39);
        mutableDateTime39.addMonths((int) ' ');
        mutableDateTime39.add((long) (byte) 10);
        org.joda.time.Period period50 = org.joda.time.Period.ZERO;
        org.joda.time.Period period51 = period50.normalizedStandard();
        org.joda.time.Period period53 = period50.plusHours(2);
        java.time.chrono.IsoEra isoEra54 = java.time.chrono.IsoEra.CE;
        boolean boolean55 = period53.equals((java.lang.Object) isoEra54);
        int int56 = period53.getMinutes();
        mutableDateTime39.add((org.joda.time.ReadablePeriod) period53);
        java.util.TimeZone timeZone59 = null;
        org.joda.time.DateTimeZone dateTimeZone60 = org.joda.time.DateTimeZone.forTimeZone(timeZone59);
        org.joda.time.DateMidnight dateMidnight61 = new org.joda.time.DateMidnight((long) 1970, dateTimeZone60);
        long long64 = dateTimeZone60.convertLocalToUTC((long) 3, false);
        long long67 = dateTimeZone60.convertLocalToUTC(0L, true);
        mutableDateTime39.setZoneRetainFields(dateTimeZone60);
        java.lang.String str69 = dateTimeZone60.toString();
        org.joda.time.chrono.EthiopicChronology ethiopicChronology70 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone60);
        org.joda.time.DateTime dateTime71 = localDate19.toDateTimeAtCurrentTime(dateTimeZone60);
        org.joda.time.DateTime dateTime73 = dateTime71.minusMinutes((-10));
        org.joda.time.Period period74 = duration2.toPeriodTo((org.joda.time.ReadableInstant) dateTime71);
        org.joda.time.DateTime dateTime75 = dateTime71.toDateTimeISO();
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 22 + "'", int21 == 22);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(mutableDateTime39);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(period50);
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertTrue("'" + isoEra54 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra54.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone60);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 3L + "'", long64 == 3L);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 0L + "'", long67 == 0L);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "Etc/UTC" + "'", str69, "Etc/UTC");
        org.junit.Assert.assertNotNull(ethiopicChronology70);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(period74);
        org.junit.Assert.assertNotNull(dateTime75);
    }

    @Test
    public void test6260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6260");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.Duration duration2 = new org.joda.time.Duration(readableInstant0, readableInstant1);
        org.joda.time.Duration duration4 = duration2.withMillis((-1L));
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((long) 3, chronology6);
        org.joda.time.DateTime.Property property8 = dateTime7.dayOfYear();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight((java.lang.Object) dateTime7, chronology9);
        org.joda.time.DateMidnight dateMidnight12 = dateMidnight10.minusMonths((-1));
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight10.withDayOfYear((int) ' ');
        org.joda.time.PeriodType periodType15 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period16 = duration4.toPeriodFrom((org.joda.time.ReadableInstant) dateMidnight10, periodType15);
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.Duration duration19 = new org.joda.time.Duration(readableInstant17, readableInstant18);
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.PeriodType periodType21 = null;
        org.joda.time.Period period22 = duration19.toPeriodTo(readableInstant20, periodType21);
        long long23 = duration19.getStandardSeconds();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((long) 3, chronology25);
        org.joda.time.DateTime.Property property27 = dateTime26.dayOfYear();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateMidnight dateMidnight29 = new org.joda.time.DateMidnight((java.lang.Object) dateTime26, chronology28);
        org.joda.time.DateMidnight dateMidnight31 = dateMidnight29.minusMonths((-1));
        org.joda.time.DateMidnight dateMidnight33 = dateMidnight29.withDayOfYear((int) ' ');
        org.joda.time.Interval interval34 = duration19.toIntervalTo((org.joda.time.ReadableInstant) dateMidnight33);
        org.joda.time.PeriodType periodType36 = org.joda.time.PeriodType.time();
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod((long) 'a', periodType36);
        org.joda.time.Period period38 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight10, (org.joda.time.ReadableDuration) duration19, periodType36);
        org.joda.time.ReadableInstant readableInstant39 = null;
        org.joda.time.ReadableInstant readableInstant40 = null;
        org.joda.time.Duration duration41 = new org.joda.time.Duration(readableInstant39, readableInstant40);
        org.joda.time.Seconds seconds42 = duration41.toStandardSeconds();
        int int43 = seconds42.getSeconds();
        org.joda.time.DateMidnight dateMidnight45 = dateMidnight10.withPeriodAdded((org.joda.time.ReadablePeriod) seconds42, 0);
        org.joda.time.ReadableInstant readableInstant46 = null;
        org.joda.time.MutableInterval mutableInterval47 = new org.joda.time.MutableInterval((org.joda.time.ReadablePeriod) seconds42, readableInstant46);
        org.joda.time.Duration duration48 = mutableInterval47.toDuration();
        mutableInterval47.setStartMillis(999999999L);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(periodType15);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateMidnight31);
        org.junit.Assert.assertNotNull(dateMidnight33);
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertNotNull(periodType36);
        org.junit.Assert.assertNotNull(seconds42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(dateMidnight45);
        org.junit.Assert.assertNotNull(duration48);
    }

    @Test
    public void test6261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6261");
        java.io.File file0 = null;
        java.io.File file2 = new java.io.File(file0, "1970-01-01T00:00:00.003Z");
        java.net.URL uRL3 = file2.toURL();
        java.io.File file4 = null;
        java.io.File file6 = new java.io.File(file4, "1970-01-01T00:00:00.003Z");
        java.net.URL uRL7 = file6.toURL();
        boolean boolean8 = uRL3.sameFile(uRL7);
        java.lang.String str9 = uRL7.getQuery();
        java.lang.String str10 = uRL7.getFile();
        org.junit.Assert.assertNull("file2.getParent() == null", file2.getParent());
        org.junit.Assert.assertEquals(file2.toString(), "1970-01-01T00:00:00.003Z");
        org.junit.Assert.assertNotNull(uRL3);
// flaky:         org.junit.Assert.assertEquals(uRL3.toString(), "file:/experiment/1970-01-01T00:00:00.003Z");
        org.junit.Assert.assertNull("file6.getParent() == null", file6.getParent());
        org.junit.Assert.assertEquals(file6.toString(), "1970-01-01T00:00:00.003Z");
        org.junit.Assert.assertNotNull(uRL7);
// flaky:         org.junit.Assert.assertEquals(uRL7.toString(), "file:/experiment/1970-01-01T00:00:00.003Z");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNull(str9);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "/experiment/1970-01-01T00:00:00.003Z" + "'", str10, "/experiment/1970-01-01T00:00:00.003Z");
    }

    @Test
    public void test6262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6262");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardDays(2021L);
        org.junit.Assert.assertNotNull(duration1);
    }

    @Test
    public void test6263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6263");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.Duration duration2 = new org.joda.time.Duration(readableInstant0, readableInstant1);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = duration2.toPeriodTo(readableInstant3, periodType4);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.Duration duration8 = new org.joda.time.Duration(readableInstant6, readableInstant7);
        long long9 = duration8.getMillis();
        boolean boolean10 = duration2.isShorterThan((org.joda.time.ReadableDuration) duration8);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) 3, chronology12);
        org.joda.time.DateTime.Property property14 = dateTime13.dayOfYear();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight((java.lang.Object) dateTime13, chronology15);
        org.joda.time.MutableDateTime mutableDateTime17 = dateTime13.toMutableDateTime();
        mutableDateTime17.addYears((int) (short) 100);
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime17.dayOfWeek();
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime17.year();
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime17.weekyear();
        boolean boolean23 = duration2.equals((java.lang.Object) mutableDateTime17);
        mutableDateTime17.addMonths((int) ' ');
        mutableDateTime17.add((long) (byte) 10);
        org.joda.time.Period period28 = org.joda.time.Period.ZERO;
        org.joda.time.Period period29 = period28.normalizedStandard();
        org.joda.time.Period period31 = period28.plusHours(2);
        java.time.chrono.IsoEra isoEra32 = java.time.chrono.IsoEra.CE;
        boolean boolean33 = period31.equals((java.lang.Object) isoEra32);
        int int34 = period31.getMinutes();
        mutableDateTime17.add((org.joda.time.ReadablePeriod) period31);
        java.util.TimeZone timeZone37 = null;
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forTimeZone(timeZone37);
        org.joda.time.DateMidnight dateMidnight39 = new org.joda.time.DateMidnight((long) 1970, dateTimeZone38);
        long long42 = dateTimeZone38.convertLocalToUTC((long) 3, false);
        long long45 = dateTimeZone38.convertLocalToUTC(0L, true);
        mutableDateTime17.setZoneRetainFields(dateTimeZone38);
        java.lang.String str47 = dateTimeZone38.toString();
        org.joda.time.chrono.EthiopicChronology ethiopicChronology48 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone38);
        org.joda.time.DateTimeField dateTimeField49 = ethiopicChronology48.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone50 = ethiopicChronology48.getZone();
        org.joda.time.DateTimeField dateTimeField51 = ethiopicChronology48.era();
        org.joda.time.DateTimeField dateTimeField52 = ethiopicChronology48.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone53 = ethiopicChronology48.getZone();
        org.joda.time.YearMonthDay yearMonthDay54 = new org.joda.time.YearMonthDay(dateTimeZone53);
        org.joda.time.LocalTime localTime56 = new org.joda.time.LocalTime(3600000000L);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean57 = yearMonthDay54.isAfter((org.joda.time.ReadablePartial) localTime56);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: ReadablePartial objects must have matching field types");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertTrue("'" + isoEra32 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra32.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 3L + "'", long42 == 3L);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Etc/UTC" + "'", str47, "Etc/UTC");
        org.junit.Assert.assertNotNull(ethiopicChronology48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(dateTimeZone53);
    }

    @Test
    public void test6264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6264");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        java.util.Locale.LanguageRange[] languageRangeArray3 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList4 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList4, languageRangeArray3);
        java.util.Locale.LanguageRange[] languageRangeArray6 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList7 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList7, languageRangeArray6);
        java.util.Locale locale9 = java.util.Locale.JAPAN;
        java.util.Locale[] localeArray10 = new java.util.Locale[] { locale9 };
        java.util.ArrayList<java.util.Locale> localeList11 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList11, localeArray10);
        java.util.List<java.util.Locale> localeList13 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList7, (java.util.Collection<java.util.Locale>) localeList11);
        localeList13.clear();
        java.util.List<java.util.Locale> localeList15 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList4, (java.util.Collection<java.util.Locale>) localeList13);
        java.util.Locale.LanguageRange[] languageRangeArray16 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList17 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList17, languageRangeArray16);
        java.util.Locale.LanguageRange[] languageRangeArray19 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList20 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList20, languageRangeArray19);
        java.util.Locale locale22 = java.util.Locale.JAPAN;
        java.util.Locale[] localeArray23 = new java.util.Locale[] { locale22 };
        java.util.ArrayList<java.util.Locale> localeList24 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList24, localeArray23);
        java.util.List<java.util.Locale> localeList26 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList20, (java.util.Collection<java.util.Locale>) localeList24);
        localeList26.clear();
        java.util.List<java.util.Locale> localeList28 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList17, (java.util.Collection<java.util.Locale>) localeList26);
        java.util.List<java.util.Locale> localeList29 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList4, (java.util.Collection<java.util.Locale>) localeList28);
        java.util.ListIterator<java.util.Locale> localeItor30 = localeList28.listIterator();
        java.util.Locale locale31 = java.util.Locale.ENGLISH;
        localeItor30.add(locale31);
        org.joda.time.format.PeriodFormatter periodFormatter33 = periodFormatter2.withLocale(locale31);
        org.joda.time.format.PeriodPrinter periodPrinter34 = periodFormatter2.getPrinter();
        org.junit.Assert.assertNotNull(languageRangeArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(languageRangeArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(localeArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(localeList13);
        org.junit.Assert.assertNotNull(localeList15);
        org.junit.Assert.assertNotNull(languageRangeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(languageRangeArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(localeArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(localeList26);
        org.junit.Assert.assertNotNull(localeList28);
        org.junit.Assert.assertNotNull(localeList29);
        org.junit.Assert.assertNotNull(localeItor30);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "en");
        org.junit.Assert.assertNotNull(periodFormatter33);
        org.junit.Assert.assertNull(periodPrinter34);
    }

    @Test
    public void test6265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6265");
        java.util.GregorianCalendar gregorianCalendar3 = new java.util.GregorianCalendar(14, 3601, 14);
        java.util.Date date10 = new java.util.Date((int) (byte) 100, 4, 306, (int) ':', 52, (int) ' ');
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime(chronology11);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.withYearOfCentury((int) 'a');
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.plusSeconds(6);
        org.joda.time.DateTime dateTime17 = localDateTime14.toDateTime();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime14.minusMillis((int) '/');
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.minusMonths(100);
        java.util.Date date22 = localDateTime19.toDate();
        boolean boolean23 = date10.after(date22);
        int int24 = date22.getDay();
        gregorianCalendar3.setTime(date22);
        long long26 = date22.getTime();
        date22.setMinutes(41);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Mar 04 10:52:32 UTC 2001");
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(date22);
// flaky:         org.junit.Assert.assertEquals(date22.toString(), "Thu Feb 21 09:41:57 UTC 2097");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 4 + "'", int24 == 4);
// flaky:         org.junit.Assert.assertTrue("'" + long26 + "' != '" + 4012278177550L + "'", long26 == 4012278177550L);
    }

    @Test
    public void test6266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6266");
        org.joda.time.Weeks weeks0 = org.joda.time.Weeks.ONE;
        java.util.concurrent.TimeUnit timeUnit1 = java.util.concurrent.TimeUnit.NANOSECONDS;
        boolean boolean2 = weeks0.equals((java.lang.Object) timeUnit1);
        org.joda.time.MutablePeriod mutablePeriod3 = weeks0.toMutablePeriod();
        org.joda.time.Chronology chronology6 = null;
        mutablePeriod3.setPeriod((long) 2, (long) 2, chronology6);
        org.joda.time.Period period12 = new org.joda.time.Period((int) '#', 0, 2, (int) (short) 100);
        mutablePeriod3.add((org.joda.time.ReadablePeriod) period12);
        mutablePeriod3.setHours((int) (byte) -1);
        mutablePeriod3.setYears(100);
        mutablePeriod3.addSeconds((int) (byte) 100);
        mutablePeriod3.addMinutes(275);
        org.junit.Assert.assertNotNull(weeks0);
        org.junit.Assert.assertNotNull(timeUnit1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(mutablePeriod3);
    }

    @Test
    public void test6267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6267");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 3, chronology1);
        org.joda.time.DateTime.Property property3 = dateTime2.dayOfYear();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight((java.lang.Object) dateTime2, chronology4);
        org.joda.time.MutableDateTime mutableDateTime6 = dateTime2.toMutableDateTime();
        mutableDateTime6.addYears((int) (short) 100);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime6.dayOfWeek();
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime6.year();
        java.util.TimeZone timeZone11 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        mutableDateTime6.setZone(dateTimeZone12);
        java.util.Locale locale15 = java.util.Locale.TAIWAN;
        java.lang.String str16 = dateTimeZone12.getShortName((long) 64, locale15);
        java.lang.String str17 = locale15.getDisplayName();
        java.util.GregorianCalendar gregorianCalendar18 = new java.util.GregorianCalendar(locale15);
        gregorianCalendar18.setMinimalDaysInFirstWeek((int) (short) 0);
        int int21 = gregorianCalendar18.getFirstDayOfWeek();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean23 = gregorianCalendar18.isSet(35);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 35");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+00:00" + "'", str16, "+00:00");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Chinese (Taiwan)" + "'", str17, "Chinese (Taiwan)");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
    }

    @Test
    public void test6268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6268");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.Duration duration2 = new org.joda.time.Duration(readableInstant0, readableInstant1);
        org.joda.time.Duration duration4 = duration2.withMillis((-1L));
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((long) 3, chronology6);
        org.joda.time.DateTime.Property property8 = dateTime7.dayOfYear();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight((java.lang.Object) dateTime7, chronology9);
        org.joda.time.DateMidnight dateMidnight12 = dateMidnight10.minusMonths((-1));
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight10.withDayOfYear((int) ' ');
        org.joda.time.PeriodType periodType15 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period16 = duration4.toPeriodFrom((org.joda.time.ReadableInstant) dateMidnight10, periodType15);
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.Duration duration19 = new org.joda.time.Duration(readableInstant17, readableInstant18);
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.PeriodType periodType21 = null;
        org.joda.time.Period period22 = duration19.toPeriodTo(readableInstant20, periodType21);
        long long23 = duration19.getStandardSeconds();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((long) 3, chronology25);
        org.joda.time.DateTime.Property property27 = dateTime26.dayOfYear();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateMidnight dateMidnight29 = new org.joda.time.DateMidnight((java.lang.Object) dateTime26, chronology28);
        org.joda.time.DateMidnight dateMidnight31 = dateMidnight29.minusMonths((-1));
        org.joda.time.DateMidnight dateMidnight33 = dateMidnight29.withDayOfYear((int) ' ');
        org.joda.time.Interval interval34 = duration19.toIntervalTo((org.joda.time.ReadableInstant) dateMidnight33);
        org.joda.time.PeriodType periodType36 = org.joda.time.PeriodType.time();
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod((long) 'a', periodType36);
        org.joda.time.Period period38 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight10, (org.joda.time.ReadableDuration) duration19, periodType36);
        org.joda.time.ReadableInstant readableInstant39 = null;
        org.joda.time.ReadableInstant readableInstant40 = null;
        org.joda.time.Duration duration41 = new org.joda.time.Duration(readableInstant39, readableInstant40);
        org.joda.time.Seconds seconds42 = duration41.toStandardSeconds();
        int int43 = seconds42.getSeconds();
        org.joda.time.DateMidnight dateMidnight45 = dateMidnight10.withPeriodAdded((org.joda.time.ReadablePeriod) seconds42, 0);
        org.joda.time.Duration duration46 = seconds42.toStandardDuration();
        org.joda.time.Seconds seconds47 = seconds42.negated();
        org.joda.time.ReadableInstant readableInstant48 = null;
        org.joda.time.ReadableInstant readableInstant49 = null;
        org.joda.time.Duration duration50 = new org.joda.time.Duration(readableInstant48, readableInstant49);
        org.joda.time.Seconds seconds51 = duration50.toStandardSeconds();
        int int52 = seconds51.getSeconds();
        org.joda.time.ReadableInstant readableInstant53 = null;
        org.joda.time.ReadableInstant readableInstant54 = null;
        org.joda.time.Duration duration55 = new org.joda.time.Duration(readableInstant53, readableInstant54);
        org.joda.time.Seconds seconds56 = duration55.toStandardSeconds();
        int int57 = seconds56.getSeconds();
        org.joda.time.Seconds seconds59 = seconds56.dividedBy(28);
        boolean boolean60 = seconds51.isGreaterThan(seconds59);
        org.joda.time.ReadableInstant readableInstant61 = null;
        org.joda.time.ReadableInstant readableInstant62 = null;
        org.joda.time.Duration duration63 = new org.joda.time.Duration(readableInstant61, readableInstant62);
        org.joda.time.Seconds seconds64 = duration63.toStandardSeconds();
        int int65 = seconds64.getSeconds();
        org.joda.time.Seconds seconds67 = seconds64.dividedBy(28);
        org.joda.time.Seconds seconds68 = seconds67.negated();
        org.joda.time.Seconds seconds69 = seconds51.plus(seconds68);
        org.joda.time.Seconds seconds71 = seconds51.multipliedBy((int) '/');
        org.joda.time.Seconds seconds72 = seconds42.plus(seconds51);
        org.joda.time.Seconds seconds74 = seconds72.minus(335);
        java.lang.String str75 = seconds72.toString();
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(periodType15);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateMidnight31);
        org.junit.Assert.assertNotNull(dateMidnight33);
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertNotNull(periodType36);
        org.junit.Assert.assertNotNull(seconds42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(dateMidnight45);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertNotNull(seconds47);
        org.junit.Assert.assertNotNull(seconds51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(seconds56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(seconds59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(seconds64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(seconds67);
        org.junit.Assert.assertNotNull(seconds68);
        org.junit.Assert.assertNotNull(seconds69);
        org.junit.Assert.assertNotNull(seconds71);
        org.junit.Assert.assertNotNull(seconds72);
        org.junit.Assert.assertNotNull(seconds74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "PT0S" + "'", str75, "PT0S");
    }

    @Test
    public void test6269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6269");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.now();
        java.time.temporal.ChronoField chronoField1 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime3 = localDateTime0.with((java.time.temporal.TemporalField) chronoField1, (long) 10);
        java.time.LocalDateTime localDateTime5 = localDateTime0.minusMinutes((long) 12);
        java.time.LocalDate localDate8 = java.time.LocalDate.ofEpochDay((long) ' ');
        java.time.OffsetTime offsetTime9 = java.time.OffsetTime.MAX;
        java.time.LocalTime localTime10 = offsetTime9.toLocalTime();
        java.lang.String str11 = offsetTime9.toString();
        java.time.Duration duration12 = java.time.Duration.ZERO;
        java.lang.String str13 = duration12.toString();
        java.time.OffsetTime offsetTime14 = offsetTime9.plus((java.time.temporal.TemporalAmount) duration12);
        java.time.LocalTime localTime15 = offsetTime9.toLocalTime();
        java.time.chrono.ChronoLocalDateTime<?> wildcardChronoLocalDateTime16 = localDate8.atTime(localTime15);
        java.time.LocalDate localDate18 = localDate8.minusWeeks((long) 2097);
        java.util.TimeZone timeZone20 = null;
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forTimeZone(timeZone20);
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight((long) 1970, dateTimeZone21);
        long long25 = dateTimeZone21.convertLocalToUTC((long) 3, false);
        long long28 = dateTimeZone21.convertLocalToUTC(0L, true);
        boolean boolean29 = localDate8.equals((java.lang.Object) true);
        int int30 = localDate8.lengthOfMonth();
        java.time.LocalDate localDate33 = java.time.LocalDate.ofEpochDay((long) ' ');
        int int34 = localDate33.getMonthValue();
        org.joda.time.Period period35 = org.joda.time.Period.ZERO;
        org.joda.time.Period period36 = period35.normalizedStandard();
        org.joda.time.Period period38 = period35.plusHours(2);
        java.time.chrono.IsoEra isoEra39 = java.time.chrono.IsoEra.CE;
        boolean boolean40 = period38.equals((java.lang.Object) isoEra39);
        java.time.LocalTime localTime45 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime46 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime45);
        java.time.LocalTime localTime51 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime52 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime51);
        java.time.temporal.ChronoField chronoField53 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime55 = localTime51.with((java.time.temporal.TemporalField) chronoField53, (long) (short) 1);
        long long56 = localTime45.getLong((java.time.temporal.TemporalField) chronoField53);
        boolean boolean57 = isoEra39.isSupported((java.time.temporal.TemporalField) chronoField53);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery58 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period59 = isoEra39.query(periodTemporalQuery58);
        boolean boolean60 = period59.isNegative();
        java.time.Period period62 = period59.plusDays((long) ' ');
        java.time.temporal.ChronoField chronoField63 = java.time.temporal.ChronoField.SECOND_OF_DAY;
        boolean boolean64 = period59.equals((java.lang.Object) chronoField63);
        boolean boolean65 = localDate33.isSupported((java.time.temporal.TemporalField) chronoField63);
        java.time.temporal.TemporalUnit temporalUnit66 = chronoField63.getRangeUnit();
        java.time.chrono.ChronoLocalDate chronoLocalDate67 = localDate8.minus((long) (-1), temporalUnit66);
        java.time.LocalDateTime localDateTime68 = localDateTime0.minus(1645434620L, temporalUnit66);
        java.time.LocalDateTime localDateTime70 = localDateTime0.minusSeconds((long) 32772);
        // The following exception was thrown during execution in test generation
        try {
            java.time.LocalDateTime localDateTime72 = localDateTime0.withDayOfYear(999999991);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for DayOfYear (valid values 1 - 365/366): 999999991");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertTrue("'" + chronoField1 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField1.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(offsetTime9);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "23:59:59.999999999-18:00" + "'", str11, "23:59:59.999999999-18:00");
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "PT0S" + "'", str13, "PT0S");
        org.junit.Assert.assertNotNull(offsetTime14);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(wildcardChronoLocalDateTime16);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 3L + "'", long25 == 3L);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 28 + "'", int30 == 28);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2 + "'", int34 == 2);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertTrue("'" + isoEra39 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra39.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(localTime45);
        org.junit.Assert.assertNotNull(localTime46);
        org.junit.Assert.assertNotNull(localTime51);
        org.junit.Assert.assertNotNull(localTime52);
        org.junit.Assert.assertTrue("'" + chronoField53 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField53.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime55);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 3601000000001L + "'", long56 == 3601000000001L);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(periodTemporalQuery58);
        org.junit.Assert.assertNotNull(period59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(period62);
        org.junit.Assert.assertTrue("'" + chronoField63 + "' != '" + java.time.temporal.ChronoField.SECOND_OF_DAY + "'", chronoField63.equals(java.time.temporal.ChronoField.SECOND_OF_DAY));
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + temporalUnit66 + "' != '" + java.time.temporal.ChronoUnit.DAYS + "'", temporalUnit66.equals(java.time.temporal.ChronoUnit.DAYS));
        org.junit.Assert.assertNotNull(chronoLocalDate67);
        org.junit.Assert.assertNotNull(localDateTime68);
        org.junit.Assert.assertNotNull(localDateTime70);
    }

    @Test
    public void test6270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6270");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 3, chronology1);
        org.joda.time.DateTime.Property property3 = dateTime2.dayOfYear();
        org.joda.time.Interval interval4 = property3.toInterval();
        org.joda.time.Period period5 = org.joda.time.Period.ZERO;
        org.joda.time.Period period6 = period5.normalizedStandard();
        org.joda.time.Period period8 = period6.minusMinutes((int) ' ');
        org.joda.time.Period period10 = period8.withMinutes(32769);
        boolean boolean11 = interval4.equals((java.lang.Object) period10);
        org.joda.time.DateTime dateTime12 = interval4.getStart();
        org.joda.time.Duration duration13 = interval4.toDuration();
        org.joda.time.PeriodType periodType14 = org.joda.time.PeriodType.years();
        org.joda.time.PeriodType periodType15 = periodType14.withMinutesRemoved();
        org.joda.time.PeriodType periodType16 = periodType14.withWeeksRemoved();
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.Duration duration19 = new org.joda.time.Duration(readableInstant17, readableInstant18);
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.PeriodType periodType21 = null;
        org.joda.time.Period period22 = duration19.toPeriodTo(readableInstant20, periodType21);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.Duration duration25 = new org.joda.time.Duration(readableInstant23, readableInstant24);
        long long26 = duration25.getMillis();
        boolean boolean27 = duration19.isShorterThan((org.joda.time.ReadableDuration) duration25);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((long) 3, chronology29);
        org.joda.time.DateTime.Property property31 = dateTime30.dayOfYear();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.DateMidnight dateMidnight33 = new org.joda.time.DateMidnight((java.lang.Object) dateTime30, chronology32);
        org.joda.time.MutableDateTime mutableDateTime34 = dateTime30.toMutableDateTime();
        mutableDateTime34.addYears((int) (short) 100);
        org.joda.time.MutableDateTime.Property property37 = mutableDateTime34.dayOfWeek();
        org.joda.time.MutableDateTime.Property property38 = mutableDateTime34.year();
        org.joda.time.MutableDateTime.Property property39 = mutableDateTime34.weekyear();
        boolean boolean40 = duration19.equals((java.lang.Object) mutableDateTime34);
        mutableDateTime34.addMonths((int) ' ');
        mutableDateTime34.add((long) (byte) 10);
        org.joda.time.Period period45 = org.joda.time.Period.ZERO;
        org.joda.time.Period period46 = period45.normalizedStandard();
        org.joda.time.Period period48 = period45.plusHours(2);
        java.time.chrono.IsoEra isoEra49 = java.time.chrono.IsoEra.CE;
        boolean boolean50 = period48.equals((java.lang.Object) isoEra49);
        int int51 = period48.getMinutes();
        mutableDateTime34.add((org.joda.time.ReadablePeriod) period48);
        java.util.TimeZone timeZone54 = null;
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.forTimeZone(timeZone54);
        org.joda.time.DateMidnight dateMidnight56 = new org.joda.time.DateMidnight((long) 1970, dateTimeZone55);
        long long59 = dateTimeZone55.convertLocalToUTC((long) 3, false);
        long long62 = dateTimeZone55.convertLocalToUTC(0L, true);
        mutableDateTime34.setZoneRetainFields(dateTimeZone55);
        java.lang.String str64 = dateTimeZone55.toString();
        org.joda.time.chrono.EthiopicChronology ethiopicChronology65 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone55);
        org.joda.time.DateTimeField dateTimeField66 = ethiopicChronology65.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone67 = ethiopicChronology65.getZone();
        org.joda.time.DateTimeField dateTimeField68 = ethiopicChronology65.era();
        org.joda.time.DateTimeField dateTimeField69 = ethiopicChronology65.millisOfDay();
        org.joda.time.Period period70 = duration13.toPeriod(periodType16, (org.joda.time.Chronology) ethiopicChronology65);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(periodType14);
        org.junit.Assert.assertNotNull(periodType15);
        org.junit.Assert.assertNotNull(periodType16);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(mutableDateTime34);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertNotNull(period48);
        org.junit.Assert.assertTrue("'" + isoEra49 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra49.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone55);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 3L + "'", long59 == 3L);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 0L + "'", long62 == 0L);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "Etc/UTC" + "'", str64, "Etc/UTC");
        org.junit.Assert.assertNotNull(ethiopicChronology65);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertNotNull(dateTimeZone67);
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertNotNull(dateTimeField69);
        org.junit.Assert.assertNotNull(period70);
    }

    @Test
    public void test6271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6271");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.Duration duration2 = new org.joda.time.Duration(readableInstant0, readableInstant1);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = duration2.toPeriodTo(readableInstant3, periodType4);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.Duration duration8 = new org.joda.time.Duration(readableInstant6, readableInstant7);
        long long9 = duration8.getMillis();
        boolean boolean10 = duration2.isShorterThan((org.joda.time.ReadableDuration) duration8);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) 3, chronology12);
        org.joda.time.DateTime.Property property14 = dateTime13.dayOfYear();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight((java.lang.Object) dateTime13, chronology15);
        org.joda.time.MutableDateTime mutableDateTime17 = dateTime13.toMutableDateTime();
        mutableDateTime17.addYears((int) (short) 100);
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime17.dayOfWeek();
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime17.year();
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime17.weekyear();
        boolean boolean23 = duration2.equals((java.lang.Object) mutableDateTime17);
        mutableDateTime17.addMonths((int) ' ');
        mutableDateTime17.add((long) (byte) 10);
        org.joda.time.Period period32 = new org.joda.time.Period((int) '#', 0, 2, (int) (short) 100);
        org.joda.time.MutableInterval mutableInterval33 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) mutableDateTime17, (org.joda.time.ReadablePeriod) period32);
        // The following exception was thrown during execution in test generation
        try {
            mutableInterval33.setInterval((long) 34595674, (-61702041600000L));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test6272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6272");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.Duration duration2 = new org.joda.time.Duration(readableInstant0, readableInstant1);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = duration2.toPeriodTo(readableInstant3, periodType4);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.Duration duration8 = new org.joda.time.Duration(readableInstant6, readableInstant7);
        long long9 = duration8.getMillis();
        boolean boolean10 = duration2.isShorterThan((org.joda.time.ReadableDuration) duration8);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) 3, chronology12);
        org.joda.time.DateTime.Property property14 = dateTime13.dayOfYear();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight((java.lang.Object) dateTime13, chronology15);
        org.joda.time.MutableDateTime mutableDateTime17 = dateTime13.toMutableDateTime();
        mutableDateTime17.addYears((int) (short) 100);
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime17.dayOfWeek();
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime17.year();
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime17.weekyear();
        boolean boolean23 = duration2.equals((java.lang.Object) mutableDateTime17);
        mutableDateTime17.addMonths((int) ' ');
        mutableDateTime17.add((long) (byte) 10);
        org.joda.time.Period period28 = org.joda.time.Period.ZERO;
        org.joda.time.Period period29 = period28.normalizedStandard();
        org.joda.time.Period period31 = period28.plusHours(2);
        java.time.chrono.IsoEra isoEra32 = java.time.chrono.IsoEra.CE;
        boolean boolean33 = period31.equals((java.lang.Object) isoEra32);
        int int34 = period31.getMinutes();
        mutableDateTime17.add((org.joda.time.ReadablePeriod) period31);
        java.util.TimeZone timeZone37 = null;
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forTimeZone(timeZone37);
        org.joda.time.DateMidnight dateMidnight39 = new org.joda.time.DateMidnight((long) 1970, dateTimeZone38);
        long long42 = dateTimeZone38.convertLocalToUTC((long) 3, false);
        long long45 = dateTimeZone38.convertLocalToUTC(0L, true);
        mutableDateTime17.setZoneRetainFields(dateTimeZone38);
        java.lang.String str47 = dateTimeZone38.toString();
        org.joda.time.chrono.EthiopicChronology ethiopicChronology48 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone38);
        org.joda.time.DateTimeField dateTimeField49 = ethiopicChronology48.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone50 = ethiopicChronology48.getZone();
        org.joda.time.DateTimeField dateTimeField51 = ethiopicChronology48.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField52 = ethiopicChronology48.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField53 = ethiopicChronology48.secondOfMinute();
        org.joda.time.DurationField durationField54 = ethiopicChronology48.hours();
        org.joda.time.DateTimeField dateTimeField55 = ethiopicChronology48.dayOfYear();
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertTrue("'" + isoEra32 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra32.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 3L + "'", long42 == 3L);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Etc/UTC" + "'", str47, "Etc/UTC");
        org.junit.Assert.assertNotNull(ethiopicChronology48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(durationField54);
        org.junit.Assert.assertNotNull(dateTimeField55);
    }

    @Test
    public void test6273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6273");
        java.time.Duration duration1 = java.time.Duration.ofHours(58L);
        org.junit.Assert.assertNotNull(duration1);
    }

    @Test
    public void test6274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6274");
        java.nio.charset.Charset charset0 = java.nio.charset.Charset.defaultCharset();
        java.nio.charset.CharsetDecoder charsetDecoder1 = charset0.newDecoder();
        float float2 = charsetDecoder1.maxCharsPerByte();
        java.nio.charset.Charset charset3 = java.nio.charset.Charset.defaultCharset();
        java.nio.charset.CharsetDecoder charsetDecoder4 = charset3.newDecoder();
        java.nio.charset.Charset charset5 = java.nio.charset.Charset.defaultCharset();
        boolean boolean6 = charset3.contains(charset5);
        java.nio.charset.CharsetEncoder charsetEncoder7 = charset3.newEncoder();
        char[] charArray8 = new char[] {};
        java.nio.CharBuffer charBuffer9 = java.nio.CharBuffer.wrap(charArray8);
        java.nio.ByteBuffer byteBuffer10 = charsetEncoder7.encode(charBuffer9);
        char[] charArray17 = new char[] { '#', '/', '4', 'a', '4', 'u' };
        java.nio.CharBuffer charBuffer18 = java.nio.CharBuffer.wrap(charArray17);
        java.nio.charset.CoderResult coderResult20 = charsetDecoder1.decode(byteBuffer10, charBuffer18, false);
        boolean boolean21 = coderResult20.isUnderflow();
        java.lang.String str22 = coderResult20.toString();
        org.junit.Assert.assertNotNull(charset0);
        org.junit.Assert.assertNotNull(charsetDecoder1);
        org.junit.Assert.assertTrue("'" + float2 + "' != '" + 1.0f + "'", float2 == 1.0f);
        org.junit.Assert.assertNotNull(charset3);
        org.junit.Assert.assertNotNull(charsetDecoder4);
        org.junit.Assert.assertNotNull(charset5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(charsetEncoder7);
        org.junit.Assert.assertNotNull(charArray8);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray8), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray8), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray8), "[]");
        org.junit.Assert.assertNotNull(charBuffer9);
        org.junit.Assert.assertNotNull(byteBuffer10);
        org.junit.Assert.assertNotNull(charArray17);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray17), "#/4a4u");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray17), "#/4a4u");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray17), "[#, /, 4, a, 4, u]");
        org.junit.Assert.assertNotNull(charBuffer18);
        org.junit.Assert.assertNotNull(coderResult20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "UNDERFLOW" + "'", str22, "UNDERFLOW");
    }

    @Test
    public void test6275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6275");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.nio.LongBuffer longBuffer3 = java.nio.LongBuffer.allocate((int) (short) 0);
        java.nio.Buffer buffer4 = longBuffer3.mark();
        boolean boolean5 = properties1.containsKey((java.lang.Object) longBuffer3);
        java.util.Collection<java.lang.Object> objCollection6 = properties1.values();
        java.util.Properties properties7 = new java.util.Properties(properties1);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) 3, chronology9);
        org.joda.time.DateTime.Property property11 = dateTime10.dayOfYear();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight((java.lang.Object) dateTime10, chronology12);
        org.joda.time.MutableDateTime mutableDateTime14 = dateTime10.toMutableDateTime();
        mutableDateTime14.addYears((int) (short) 100);
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime14.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime18 = property17.roundFloor();
        java.time.Instant instant19 = java.time.Instant.now();
        java.time.Instant instant20 = java.time.Instant.now();
        boolean boolean21 = instant19.isAfter(instant20);
        boolean boolean22 = properties1.remove((java.lang.Object) mutableDateTime18, (java.lang.Object) boolean21);
        java.util.GregorianCalendar gregorianCalendar26 = new java.util.GregorianCalendar(14, 3601, 14);
        java.time.ZonedDateTime zonedDateTime27 = gregorianCalendar26.toZonedDateTime();
        gregorianCalendar26.roll(3, 978);
        boolean boolean31 = properties1.contains((java.lang.Object) 3);
        org.junit.Assert.assertNotNull(longBuffer3);
        org.junit.Assert.assertNotNull(buffer4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(objCollection6);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(mutableDateTime14);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(mutableDateTime18);
        org.junit.Assert.assertNotNull(instant19);
        org.junit.Assert.assertNotNull(instant20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(zonedDateTime27);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test6276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6276");
        java.util.Properties properties0 = new java.util.Properties();
        java.time.OffsetTime offsetTime1 = java.time.OffsetTime.MAX;
        java.time.LocalTime localTime2 = offsetTime1.toLocalTime();
        java.lang.String str3 = offsetTime1.toString();
        java.time.Duration duration4 = java.time.Duration.ZERO;
        java.lang.String str5 = duration4.toString();
        java.time.OffsetTime offsetTime6 = offsetTime1.plus((java.time.temporal.TemporalAmount) duration4);
        java.time.OffsetTime offsetTime8 = offsetTime1.plusNanos((long) 0);
        java.time.LocalTime localTime13 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime14 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime13);
        java.time.temporal.ChronoField chronoField15 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime17 = localTime13.with((java.time.temporal.TemporalField) chronoField15, (long) (short) 1);
        java.util.Locale locale18 = java.util.Locale.GERMANY;
        java.lang.String str19 = chronoField15.getDisplayName(locale18);
        java.time.OffsetTime offsetTime21 = offsetTime8.with((java.time.temporal.TemporalField) chronoField15, (long) 28);
        org.joda.time.Period period22 = org.joda.time.Period.ZERO;
        org.joda.time.Period period23 = period22.normalizedStandard();
        org.joda.time.Period period25 = period22.plusHours(2);
        java.time.chrono.IsoEra isoEra26 = java.time.chrono.IsoEra.CE;
        boolean boolean27 = period25.equals((java.lang.Object) isoEra26);
        java.time.LocalTime localTime32 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime33 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime32);
        java.time.LocalTime localTime38 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime39 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime38);
        java.time.temporal.ChronoField chronoField40 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime42 = localTime38.with((java.time.temporal.TemporalField) chronoField40, (long) (short) 1);
        long long43 = localTime32.getLong((java.time.temporal.TemporalField) chronoField40);
        boolean boolean44 = isoEra26.isSupported((java.time.temporal.TemporalField) chronoField40);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery45 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period46 = isoEra26.query(periodTemporalQuery45);
        boolean boolean47 = period46.isNegative();
        java.time.Period period49 = period46.plusDays((long) ' ');
        java.time.temporal.ChronoField chronoField50 = java.time.temporal.ChronoField.SECOND_OF_DAY;
        boolean boolean51 = period46.equals((java.lang.Object) chronoField50);
        java.time.chrono.ChronoPeriod chronoPeriod52 = period46.negated();
        java.time.OffsetTime offsetTime53 = offsetTime8.minus((java.time.temporal.TemporalAmount) period46);
        java.time.Period period55 = period46.plusYears((long) 2022);
        java.time.Period period57 = period55.minusDays((long) (short) 100);
        java.time.Period period58 = java.time.Period.from((java.time.temporal.TemporalAmount) period57);
        java.time.LocalDate localDate60 = java.time.LocalDate.ofEpochDay((long) ' ');
        java.time.OffsetTime offsetTime61 = java.time.OffsetTime.MAX;
        java.time.LocalTime localTime62 = offsetTime61.toLocalTime();
        java.lang.String str63 = offsetTime61.toString();
        java.time.Duration duration64 = java.time.Duration.ZERO;
        java.lang.String str65 = duration64.toString();
        java.time.OffsetTime offsetTime66 = offsetTime61.plus((java.time.temporal.TemporalAmount) duration64);
        java.time.LocalTime localTime67 = offsetTime61.toLocalTime();
        java.time.chrono.ChronoLocalDateTime<?> wildcardChronoLocalDateTime68 = localDate60.atTime(localTime67);
        java.time.LocalDate localDate70 = localDate60.minusWeeks((long) 2097);
        java.time.LocalDate localDate72 = localDate70.minusMonths((long) (byte) 0);
        java.time.temporal.Temporal temporal73 = period58.subtractFrom((java.time.temporal.Temporal) localDate72);
        java.time.Month month74 = java.time.Month.DECEMBER;
        java.time.Month month75 = month74.firstMonthOfQuarter();
        boolean boolean76 = properties0.remove((java.lang.Object) period58, (java.lang.Object) month74);
        org.junit.Assert.assertNotNull(offsetTime1);
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "23:59:59.999999999-18:00" + "'", str3, "23:59:59.999999999-18:00");
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "PT0S" + "'", str5, "PT0S");
        org.junit.Assert.assertNotNull(offsetTime6);
        org.junit.Assert.assertNotNull(offsetTime8);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertTrue("'" + chronoField15 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField15.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "NanoOfDay" + "'", str19, "NanoOfDay");
        org.junit.Assert.assertNotNull(offsetTime21);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertTrue("'" + isoEra26 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra26.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(localTime32);
        org.junit.Assert.assertNotNull(localTime33);
        org.junit.Assert.assertNotNull(localTime38);
        org.junit.Assert.assertNotNull(localTime39);
        org.junit.Assert.assertTrue("'" + chronoField40 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField40.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime42);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 3601000000001L + "'", long43 == 3601000000001L);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(periodTemporalQuery45);
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(period49);
        org.junit.Assert.assertTrue("'" + chronoField50 + "' != '" + java.time.temporal.ChronoField.SECOND_OF_DAY + "'", chronoField50.equals(java.time.temporal.ChronoField.SECOND_OF_DAY));
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(chronoPeriod52);
        org.junit.Assert.assertNotNull(offsetTime53);
        org.junit.Assert.assertNotNull(period55);
        org.junit.Assert.assertNotNull(period57);
        org.junit.Assert.assertNotNull(period58);
        org.junit.Assert.assertNotNull(localDate60);
        org.junit.Assert.assertNotNull(offsetTime61);
        org.junit.Assert.assertNotNull(localTime62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "23:59:59.999999999-18:00" + "'", str63, "23:59:59.999999999-18:00");
        org.junit.Assert.assertNotNull(duration64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "PT0S" + "'", str65, "PT0S");
        org.junit.Assert.assertNotNull(offsetTime66);
        org.junit.Assert.assertNotNull(localTime67);
        org.junit.Assert.assertNotNull(wildcardChronoLocalDateTime68);
        org.junit.Assert.assertNotNull(localDate70);
        org.junit.Assert.assertNotNull(localDate72);
        org.junit.Assert.assertNotNull(temporal73);
        org.junit.Assert.assertTrue("'" + month74 + "' != '" + java.time.Month.DECEMBER + "'", month74.equals(java.time.Month.DECEMBER));
        org.junit.Assert.assertTrue("'" + month75 + "' != '" + java.time.Month.OCTOBER + "'", month75.equals(java.time.Month.OCTOBER));
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
    }

    @Test
    public void test6277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6277");
        java.util.stream.IntStream intStream2 = java.util.stream.IntStream.rangeClosed(100, (int) '4');
        java.util.stream.IntStream intStream3 = intStream2.sequential();
        java.util.function.IntUnaryOperator intUnaryOperator4 = java.util.function.IntUnaryOperator.identity();
        java.util.stream.IntStream intStream5 = intStream2.map(intUnaryOperator4);
        java.util.OptionalInt optionalInt6 = intStream5.findAny();
        java.util.LongSummaryStatistics longSummaryStatistics7 = new java.util.LongSummaryStatistics();
        longSummaryStatistics7.accept(3);
        long long10 = longSummaryStatistics7.getMax();
        java.util.LongSummaryStatistics longSummaryStatistics11 = new java.util.LongSummaryStatistics();
        longSummaryStatistics11.accept(3);
        java.util.function.LongConsumer longConsumer14 = longSummaryStatistics7.andThen((java.util.function.LongConsumer) longSummaryStatistics11);
        java.util.LongSummaryStatistics longSummaryStatistics15 = new java.util.LongSummaryStatistics();
        longSummaryStatistics15.accept(3);
        long long18 = longSummaryStatistics15.getMax();
        double double19 = longSummaryStatistics15.getAverage();
        longSummaryStatistics15.accept(6);
        java.util.function.LongConsumer longConsumer22 = longSummaryStatistics7.andThen((java.util.function.LongConsumer) longSummaryStatistics15);
        java.util.stream.IntStream intStream25 = java.util.stream.IntStream.rangeClosed(100, (int) '4');
        java.util.IntSummaryStatistics intSummaryStatistics26 = new java.util.IntSummaryStatistics();
        intStream25.forEach((java.util.function.IntConsumer) intSummaryStatistics26);
        java.util.IntSummaryStatistics intSummaryStatistics28 = new java.util.IntSummaryStatistics();
        intSummaryStatistics28.accept(57);
        intSummaryStatistics26.combine(intSummaryStatistics28);
        java.util.function.IntConsumer intConsumer32 = longSummaryStatistics15.andThen((java.util.function.IntConsumer) intSummaryStatistics26);
        long long33 = intSummaryStatistics26.getCount();
        optionalInt6.ifPresent((java.util.function.IntConsumer) intSummaryStatistics26);
        int int35 = intSummaryStatistics26.getMax();
        double double36 = intSummaryStatistics26.getAverage();
        org.junit.Assert.assertNotNull(intStream2);
        org.junit.Assert.assertNotNull(intStream3);
        org.junit.Assert.assertNotNull(intUnaryOperator4);
        org.junit.Assert.assertNotNull(intStream5);
        org.junit.Assert.assertNotNull(optionalInt6);
        org.junit.Assert.assertEquals(longSummaryStatistics7.toString(), "LongSummaryStatistics{count=1, sum=3, min=3, average=3.000000, max=3}");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 3L + "'", long10 == 3L);
        org.junit.Assert.assertEquals(longSummaryStatistics11.toString(), "LongSummaryStatistics{count=1, sum=3, min=3, average=3.000000, max=3}");
        org.junit.Assert.assertNotNull(longConsumer14);
        org.junit.Assert.assertEquals(longSummaryStatistics15.toString(), "LongSummaryStatistics{count=2, sum=9, min=3, average=4.500000, max=6}");
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 3L + "'", long18 == 3L);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 3.0d + "'", double19 == 3.0d);
        org.junit.Assert.assertNotNull(longConsumer22);
        org.junit.Assert.assertNotNull(intStream25);
        org.junit.Assert.assertEquals(intSummaryStatistics26.toString(), "IntSummaryStatistics{count=1, sum=57, min=57, average=57.000000, max=57}");
        org.junit.Assert.assertEquals(intSummaryStatistics28.toString(), "IntSummaryStatistics{count=1, sum=57, min=57, average=57.000000, max=57}");
        org.junit.Assert.assertNotNull(intConsumer32);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 1L + "'", long33 == 1L);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 57 + "'", int35 == 57);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 57.0d + "'", double36 == 57.0d);
    }

    @Test
    public void test6278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6278");
        java.util.GregorianCalendar gregorianCalendar5 = new java.util.GregorianCalendar(12, 4096, 7, (-1), (int) (short) 10);
        int int6 = gregorianCalendar5.getWeeksInWeekYear();
        org.joda.time.YearMonthDay yearMonthDay7 = org.joda.time.YearMonthDay.fromCalendarFields((java.util.Calendar) gregorianCalendar5);
        org.joda.time.YearMonthDay yearMonthDay9 = yearMonthDay7.withYear(0);
        org.joda.time.Hours hours10 = org.joda.time.Hours.ZERO;
        org.joda.time.YearMonthDay yearMonthDay11 = yearMonthDay9.minus((org.joda.time.ReadablePeriod) hours10);
        org.joda.time.Duration duration12 = hours10.toStandardDuration();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 52 + "'", int6 == 52);
        org.junit.Assert.assertNotNull(yearMonthDay7);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertNotNull(hours10);
        org.junit.Assert.assertNotNull(yearMonthDay11);
        org.junit.Assert.assertNotNull(duration12);
    }

    @Test
    public void test6279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6279");
        org.joda.time.Period period0 = org.joda.time.Period.ZERO;
        org.joda.time.Period period1 = period0.normalizedStandard();
        org.joda.time.Period period3 = period0.plusHours(2);
        java.time.chrono.IsoEra isoEra4 = java.time.chrono.IsoEra.CE;
        boolean boolean5 = period3.equals((java.lang.Object) isoEra4);
        java.time.LocalTime localTime10 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime11 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime10);
        java.time.LocalTime localTime16 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime17 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime16);
        java.time.temporal.ChronoField chronoField18 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime20 = localTime16.with((java.time.temporal.TemporalField) chronoField18, (long) (short) 1);
        long long21 = localTime10.getLong((java.time.temporal.TemporalField) chronoField18);
        boolean boolean22 = isoEra4.isSupported((java.time.temporal.TemporalField) chronoField18);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery23 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period24 = isoEra4.query(periodTemporalQuery23);
        boolean boolean25 = period24.isNegative();
        java.time.Period period27 = period24.plusDays((long) ' ');
        boolean boolean28 = period24.isNegative();
        java.time.Period period30 = period24.minusYears((long) 10);
        java.time.Period period32 = period24.minusYears((long) 366);
        boolean boolean33 = period24.isZero();
        org.junit.Assert.assertNotNull(period0);
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertTrue("'" + isoEra4 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra4.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertTrue("'" + chronoField18 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField18.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 3601000000001L + "'", long21 == 3601000000001L);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(periodTemporalQuery23);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
    }

    @Test
    public void test6280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6280");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocate((int) 'a');
        java.nio.ByteBuffer byteBuffer4 = byteBuffer1.put(47, (byte) 1);
        java.nio.ByteBuffer byteBuffer6 = byteBuffer1.put((byte) 100);
        short short8 = byteBuffer6.getShort(30);
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer4);
        org.junit.Assert.assertNotNull(byteBuffer6);
        org.junit.Assert.assertTrue("'" + short8 + "' != '" + (short) 0 + "'", short8 == (short) 0);
    }

    @Test
    public void test6281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6281");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 3, chronology1);
        org.joda.time.DateTime.Property property3 = dateTime2.dayOfYear();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight((java.lang.Object) dateTime2, chronology4);
        org.joda.time.MutableDateTime mutableDateTime6 = dateTime2.toMutableDateTime();
        org.joda.time.Days days7 = org.joda.time.Days.ONE;
        org.joda.time.MutableInterval mutableInterval8 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadablePeriod) days7);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) 3, chronology10);
        org.joda.time.DateTime.Property property12 = dateTime11.dayOfYear();
        org.joda.time.Interval interval13 = property12.toInterval();
        mutableInterval8.setInterval((org.joda.time.ReadableInterval) interval13);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) 3, chronology16);
        org.joda.time.DateTime.Property property18 = dateTime17.dayOfYear();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight((java.lang.Object) dateTime17, chronology19);
        org.joda.time.DateMidnight.Property property21 = dateMidnight20.dayOfMonth();
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.Duration duration24 = new org.joda.time.Duration(readableInstant22, readableInstant23);
        org.joda.time.Duration duration26 = duration24.withMillis((-1L));
        org.joda.time.ReadableDuration readableDuration27 = null;
        org.joda.time.Duration duration28 = duration24.minus(readableDuration27);
        org.joda.time.DateMidnight dateMidnight29 = dateMidnight20.plus((org.joda.time.ReadableDuration) duration28);
        mutableInterval8.setDurationAfterStart((org.joda.time.ReadableDuration) duration28);
        org.joda.time.MutableDateTime mutableDateTime31 = new org.joda.time.MutableDateTime();
        boolean boolean32 = mutableInterval8.isBefore((org.joda.time.ReadableInstant) mutableDateTime31);
        org.joda.time.MutableDateTime mutableDateTime33 = mutableDateTime31.copy();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime31.setWeekOfWeekyear(0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(days7);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(dateMidnight29);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(mutableDateTime33);
    }

    @Test
    public void test6282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6282");
        // The following exception was thrown during execution in test generation
        try {
            java.time.ZoneId zoneId1 = java.time.ZoneId.of("UNDERFLOW");
            org.junit.Assert.fail("Expected exception of type java.time.zone.ZoneRulesException; message: Unknown time-zone ID: UNDERFLOW");
        } catch (java.time.zone.ZoneRulesException e) {
            // Expected exception.
        }
    }

    @Test
    public void test6283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6283");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 127);
    }

    @Test
    public void test6284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6284");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.time.LocalTime localTime6 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime7 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime6);
        java.time.LocalTime localTime12 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime13 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime12);
        java.time.temporal.ChronoField chronoField14 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime16 = localTime12.with((java.time.temporal.TemporalField) chronoField14, (long) (short) 1);
        long long17 = localTime6.getLong((java.time.temporal.TemporalField) chronoField14);
        java.time.LocalTime localTime19 = localTime6.withSecond((int) (short) 1);
        java.lang.Object obj21 = properties1.put((java.lang.Object) localTime19, (java.lang.Object) "117");
        java.lang.Object obj22 = properties1.clone();
        properties1.clear();
        properties1.clear();
        java.util.Enumeration<java.lang.Object> objEnumeration25 = properties1.elements();
        java.time.Instant instant26 = java.time.Instant.now();
        java.nio.file.attribute.FileTime fileTime27 = java.nio.file.attribute.FileTime.from(instant26);
        org.joda.time.Period period28 = org.joda.time.Period.ZERO;
        org.joda.time.Period period29 = period28.normalizedStandard();
        org.joda.time.Period period31 = period28.plusHours(2);
        java.time.chrono.IsoEra isoEra32 = java.time.chrono.IsoEra.CE;
        boolean boolean33 = period31.equals((java.lang.Object) isoEra32);
        java.time.LocalTime localTime38 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime39 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime38);
        java.time.LocalTime localTime44 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime45 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime44);
        java.time.temporal.ChronoField chronoField46 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime48 = localTime44.with((java.time.temporal.TemporalField) chronoField46, (long) (short) 1);
        long long49 = localTime38.getLong((java.time.temporal.TemporalField) chronoField46);
        boolean boolean50 = isoEra32.isSupported((java.time.temporal.TemporalField) chronoField46);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery51 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period52 = isoEra32.query(periodTemporalQuery51);
        boolean boolean53 = period52.isNegative();
        java.time.Period period55 = period52.plusDays((long) ' ');
        java.time.temporal.ChronoField chronoField56 = java.time.temporal.ChronoField.SECOND_OF_DAY;
        boolean boolean57 = period52.equals((java.lang.Object) chronoField56);
        java.time.chrono.ChronoPeriod chronoPeriod58 = period52.negated();
        java.time.Instant instant59 = instant26.minus((java.time.temporal.TemporalAmount) chronoPeriod58);
        java.time.LocalDateTime localDateTime60 = java.time.LocalDateTime.now();
        java.time.temporal.ChronoField chronoField61 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime63 = localDateTime60.with((java.time.temporal.TemporalField) chronoField61, (long) 10);
        java.time.Duration duration65 = java.time.Duration.ofSeconds((long) 0);
        java.time.temporal.Temporal temporal66 = localDateTime60.minus((java.time.temporal.TemporalAmount) duration65);
        java.time.Duration duration68 = duration65.plusHours((long) '.');
        java.time.Instant instant69 = instant26.minus((java.time.temporal.TemporalAmount) duration68);
        boolean boolean70 = properties1.equals((java.lang.Object) instant69);
        java.util.Collection<java.lang.Object> objCollection71 = properties1.values();
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertTrue("'" + chronoField14 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField14.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 3601000000001L + "'", long17 == 3601000000001L);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertNull(obj21);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertEquals(obj22.toString(), "{01:00:01.000000001=117}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj22), "{01:00:01.000000001=117}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj22), "{01:00:01.000000001=117}");
        org.junit.Assert.assertNotNull(objEnumeration25);
        org.junit.Assert.assertNotNull(instant26);
        org.junit.Assert.assertNotNull(fileTime27);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertTrue("'" + isoEra32 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra32.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(localTime38);
        org.junit.Assert.assertNotNull(localTime39);
        org.junit.Assert.assertNotNull(localTime44);
        org.junit.Assert.assertNotNull(localTime45);
        org.junit.Assert.assertTrue("'" + chronoField46 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField46.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime48);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 3601000000001L + "'", long49 == 3601000000001L);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(periodTemporalQuery51);
        org.junit.Assert.assertNotNull(period52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(period55);
        org.junit.Assert.assertTrue("'" + chronoField56 + "' != '" + java.time.temporal.ChronoField.SECOND_OF_DAY + "'", chronoField56.equals(java.time.temporal.ChronoField.SECOND_OF_DAY));
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(chronoPeriod58);
        org.junit.Assert.assertNotNull(instant59);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertTrue("'" + chronoField61 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField61.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime63);
        org.junit.Assert.assertNotNull(duration65);
        org.junit.Assert.assertNotNull(temporal66);
        org.junit.Assert.assertNotNull(duration68);
        org.junit.Assert.assertNotNull(instant69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(objCollection71);
    }

    @Test
    public void test6285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6285");
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.ofHoursMinutes(1, 10);
        java.time.LocalDate localDate3 = java.time.LocalDate.now((java.time.ZoneId) zoneOffset2);
        java.time.Clock clock4 = java.time.Clock.system((java.time.ZoneId) zoneOffset2);
        java.time.ZonedDateTime zonedDateTime5 = java.time.ZonedDateTime.now(clock4);
        java.time.LocalDate localDate6 = java.time.LocalDate.now(clock4);
        java.time.OffsetTime offsetTime7 = java.time.OffsetTime.now(clock4);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(clock4);
        org.junit.Assert.assertNotNull(zonedDateTime5);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(offsetTime7);
    }

    @Test
    public void test6286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6286");
        java.net.URI uRI1 = new java.net.URI("hi!");
        java.lang.String str2 = uRI1.getRawAuthority();
        java.lang.String str3 = uRI1.toString();
        java.lang.String str4 = uRI1.getRawFragment();
        java.net.URI uRI6 = new java.net.URI("hi!");
        java.lang.String str7 = uRI6.toASCIIString();
        java.net.URI uRI8 = uRI1.resolve(uRI6);
        java.net.URI uRI9 = uRI1.parseServerAuthority();
        java.net.URI uRI11 = new java.net.URI("hi!");
        java.lang.String str12 = uRI11.getSchemeSpecificPart();
        java.lang.String str13 = uRI11.getAuthority();
        java.lang.String str14 = uRI11.getFragment();
        int int15 = uRI9.compareTo(uRI11);
        java.lang.String str16 = uRI9.getScheme();
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "hi!" + "'", str3, "hi!");
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertNotNull(uRI8);
        org.junit.Assert.assertNotNull(uRI9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNull(str16);
    }

    @Test
    public void test6287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6287");
        java.util.GregorianCalendar gregorianCalendar0 = new java.util.GregorianCalendar();
        int int1 = gregorianCalendar0.getWeeksInWeekYear();
        org.joda.time.TimeOfDay timeOfDay2 = org.joda.time.TimeOfDay.fromCalendarFields((java.util.Calendar) gregorianCalendar0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 53 + "'", int1 == 53);
        org.junit.Assert.assertNotNull(timeOfDay2);
    }

    @Test
    public void test6288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6288");
        java.util.SortedMap<java.lang.String, java.nio.charset.Charset> strMap0 = java.nio.charset.Charset.availableCharsets();
        java.lang.String str1 = strMap0.lastKey();
        java.util.SortedMap<java.lang.String, java.nio.charset.Charset> strMap3 = strMap0.headMap("172.17.0.2");
        java.util.SortedMap<java.lang.String, java.nio.charset.Charset> strMap5 = strMap0.tailMap("January");
        java.util.SortedMap<java.lang.String, java.nio.charset.Charset> strMap7 = strMap0.tailMap("java.util.GregorianCalendar[time=-60303580980035,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=35,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=59,MONTH=0,WEEK_OF_YEAR=4,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=22,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=4,AM_PM=1,HOUR=9,HOUR_OF_DAY=21,MINUTE=17,SECOND=0,MILLISECOND=0,ZONE_OFFSET=35,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strMap0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "x-windows-iso2022jp" + "'", str1, "x-windows-iso2022jp");
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(strMap7);
    }

    @Test
    public void test6289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6289");
        org.joda.time.Period period0 = org.joda.time.Period.ZERO;
        org.joda.time.Period period1 = period0.normalizedStandard();
        org.joda.time.Period period3 = period0.plusHours(2);
        java.time.chrono.IsoEra isoEra4 = java.time.chrono.IsoEra.CE;
        boolean boolean5 = period3.equals((java.lang.Object) isoEra4);
        java.time.LocalTime localTime10 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime11 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime10);
        java.time.LocalTime localTime16 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime17 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime16);
        java.time.temporal.ChronoField chronoField18 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime20 = localTime16.with((java.time.temporal.TemporalField) chronoField18, (long) (short) 1);
        long long21 = localTime10.getLong((java.time.temporal.TemporalField) chronoField18);
        boolean boolean22 = isoEra4.isSupported((java.time.temporal.TemporalField) chronoField18);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery23 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period24 = isoEra4.query(periodTemporalQuery23);
        boolean boolean25 = period24.isNegative();
        java.time.Period period27 = period24.plusDays((long) ' ');
        java.time.temporal.ChronoField chronoField28 = java.time.temporal.ChronoField.SECOND_OF_DAY;
        boolean boolean29 = period24.equals((java.lang.Object) chronoField28);
        java.time.chrono.ChronoPeriod chronoPeriod30 = period24.negated();
        java.time.OffsetDateTime offsetDateTime31 = java.time.OffsetDateTime.now();
        java.time.temporal.ChronoField chronoField32 = java.time.temporal.ChronoField.HOUR_OF_DAY;
        boolean boolean33 = offsetDateTime31.isSupported((java.time.temporal.TemporalField) chronoField32);
        java.time.Month month34 = offsetDateTime31.getMonth();
        java.time.temporal.Temporal temporal35 = period24.addTo((java.time.temporal.Temporal) offsetDateTime31);
        int int36 = offsetDateTime31.getHour();
        java.time.Duration duration37 = java.time.Duration.ZERO;
        java.time.Duration duration39 = duration37.minusHours((long) 8);
        java.time.Duration duration41 = duration37.minusDays((long) 17);
        java.time.OffsetDateTime offsetDateTime42 = offsetDateTime31.minus((java.time.temporal.TemporalAmount) duration37);
        java.time.LocalTime localTime43 = offsetDateTime42.toLocalTime();
        org.junit.Assert.assertNotNull(period0);
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertTrue("'" + isoEra4 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra4.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertTrue("'" + chronoField18 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField18.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 3601000000001L + "'", long21 == 3601000000001L);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(periodTemporalQuery23);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertTrue("'" + chronoField28 + "' != '" + java.time.temporal.ChronoField.SECOND_OF_DAY + "'", chronoField28.equals(java.time.temporal.ChronoField.SECOND_OF_DAY));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(chronoPeriod30);
        org.junit.Assert.assertNotNull(offsetDateTime31);
        org.junit.Assert.assertTrue("'" + chronoField32 + "' != '" + java.time.temporal.ChronoField.HOUR_OF_DAY + "'", chronoField32.equals(java.time.temporal.ChronoField.HOUR_OF_DAY));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + month34 + "' != '" + java.time.Month.FEBRUARY + "'", month34.equals(java.time.Month.FEBRUARY));
        org.junit.Assert.assertNotNull(temporal35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 9 + "'", int36 == 9);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(offsetDateTime42);
        org.junit.Assert.assertNotNull(localTime43);
    }

    @Test
    public void test6290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6290");
        java.time.LocalDateTime localDateTime1 = java.time.LocalDateTime.now();
        java.time.LocalDateTime localDateTime3 = localDateTime1.minusYears((long) (byte) 10);
        java.time.LocalDateTime localDateTime4 = java.time.LocalDateTime.now();
        java.time.LocalDateTime localDateTime6 = localDateTime4.minusYears((long) (byte) 10);
        boolean boolean7 = localDateTime1.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime6);
        java.time.LocalDateTime localDateTime9 = localDateTime6.withSecond((int) '+');
        java.time.LocalDateTime localDateTime11 = localDateTime9.minusWeeks((long) 57);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) 3, chronology13);
        org.joda.time.DateTime.Property property15 = dateTime14.dayOfYear();
        org.joda.time.Interval interval16 = property15.toInterval();
        org.joda.time.Period period17 = org.joda.time.Period.ZERO;
        org.joda.time.Period period18 = period17.normalizedStandard();
        org.joda.time.Period period20 = period18.minusMinutes((int) ' ');
        org.joda.time.Period period22 = period20.withMinutes(32769);
        boolean boolean23 = interval16.equals((java.lang.Object) period22);
        boolean boolean24 = localDateTime11.equals((java.lang.Object) boolean23);
        java.nio.file.attribute.FileTime fileTime26 = java.nio.file.attribute.FileTime.fromMillis((long) 21);
        java.time.Instant instant27 = fileTime26.toInstant();
        java.util.GregorianCalendar gregorianCalendar34 = new java.util.GregorianCalendar(12, 4096, 7, (-1), (int) (short) 10);
        int int35 = gregorianCalendar34.getWeeksInWeekYear();
        java.lang.String str36 = gregorianCalendar34.getCalendarType();
        java.time.ZonedDateTime zonedDateTime37 = gregorianCalendar34.toZonedDateTime();
        java.time.ZonedDateTime zonedDateTime39 = zonedDateTime37.minusMonths((long) 10);
        java.time.OffsetDateTime offsetDateTime40 = zonedDateTime39.toOffsetDateTime();
        java.time.ZoneOffset zoneOffset44 = java.time.ZoneOffset.ofHoursMinutes(1, 10);
        java.time.temporal.ChronoField chronoField45 = java.time.temporal.ChronoField.HOUR_OF_DAY;
        java.time.temporal.ValueRange valueRange46 = chronoField45.range();
        boolean boolean47 = zoneOffset44.isSupported((java.time.temporal.TemporalField) chronoField45);
        java.time.temporal.TemporalUnit temporalUnit48 = chronoField45.getBaseUnit();
        java.time.OffsetDateTime offsetDateTime49 = offsetDateTime40.plus((long) 'u', temporalUnit48);
        java.time.Instant instant50 = instant27.minus((long) 78000000, temporalUnit48);
        boolean boolean51 = localDateTime11.isSupported(temporalUnit48);
        java.time.Duration duration52 = java.time.Duration.of((long) 1000002021, temporalUnit48);
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(fileTime26);
        org.junit.Assert.assertNotNull(instant27);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 52 + "'", int35 == 52);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "gregory" + "'", str36, "gregory");
        org.junit.Assert.assertNotNull(zonedDateTime37);
        org.junit.Assert.assertNotNull(zonedDateTime39);
        org.junit.Assert.assertNotNull(offsetDateTime40);
        org.junit.Assert.assertNotNull(zoneOffset44);
        org.junit.Assert.assertTrue("'" + chronoField45 + "' != '" + java.time.temporal.ChronoField.HOUR_OF_DAY + "'", chronoField45.equals(java.time.temporal.ChronoField.HOUR_OF_DAY));
        org.junit.Assert.assertNotNull(valueRange46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + temporalUnit48 + "' != '" + java.time.temporal.ChronoUnit.HOURS + "'", temporalUnit48.equals(java.time.temporal.ChronoUnit.HOURS));
        org.junit.Assert.assertNotNull(offsetDateTime49);
        org.junit.Assert.assertNotNull(instant50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(duration52);
    }

    @Test
    public void test6291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6291");
        java.util.Locale locale0 = java.util.Locale.CANADA;
        java.util.GregorianCalendar gregorianCalendar1 = new java.util.GregorianCalendar(locale0);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_CA");
    }

    @Test
    public void test6292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6292");
        java.io.File file0 = null;
        java.io.File file2 = new java.io.File(file0, "1970-01-01T00:00:00.003Z");
        boolean boolean3 = file2.exists();
        boolean boolean4 = file2.mkdirs();
        java.net.URI uRI5 = file2.toURI();
        java.lang.String str6 = file2.getName();
        boolean boolean7 = file2.delete();
        java.nio.file.Path path8 = file2.toPath();
        java.nio.file.FileSystem fileSystem9 = path8.getFileSystem();
        // The following exception was thrown during execution in test generation
        try {
            java.nio.file.PathMatcher pathMatcher11 = fileSystem9.getPathMatcher("\u4e2d\u56fd\u8a9e\u53f0\u6e7e)");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull("file2.getParent() == null", file2.getParent());
        org.junit.Assert.assertEquals(file2.toString(), "1970-01-01T00:00:00.003Z");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(uRI5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "1970-01-01T00:00:00.003Z" + "'", str6, "1970-01-01T00:00:00.003Z");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(path8);
        org.junit.Assert.assertNotNull(fileSystem9);
    }

    @Test
    public void test6293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6293");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 3, chronology1);
        org.joda.time.DateTime.Property property3 = dateTime2.dayOfYear();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight((java.lang.Object) dateTime2, chronology4);
        org.joda.time.MutableDateTime mutableDateTime6 = dateTime2.toMutableDateTime();
        mutableDateTime6.addYears((int) (short) 100);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime6.millisOfDay();
        org.joda.time.PeriodType periodType10 = org.joda.time.PeriodType.years();
        org.joda.time.DurationFieldType durationFieldType11 = org.joda.time.DurationFieldType.halfdays();
        int int12 = periodType10.indexOf(durationFieldType11);
        mutableDateTime6.add(durationFieldType11, (int) 'a');
        org.joda.time.MutableDateTime.Property property15 = mutableDateTime6.millisOfSecond();
        org.joda.time.MutableDateTime mutableDateTime16 = property15.roundHalfFloor();
        float[] floatArray19 = new float[] { (-1L), (byte) -1 };
        java.nio.FloatBuffer floatBuffer20 = java.nio.FloatBuffer.wrap(floatArray19);
        java.nio.FloatBuffer floatBuffer21 = floatBuffer20.compact();
        java.nio.FloatBuffer floatBuffer22 = floatBuffer20.asReadOnlyBuffer();
        java.nio.ByteOrder byteOrder23 = floatBuffer20.order();
        java.nio.FloatBuffer floatBuffer24 = floatBuffer20.slice();
        int int25 = floatBuffer20.arrayOffset();
        boolean boolean26 = mutableDateTime16.equals((java.lang.Object) floatBuffer20);
        int int27 = mutableDateTime16.getSecondOfMinute();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(periodType10);
        org.junit.Assert.assertNotNull(durationFieldType11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertNotNull(floatArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray19), "[-1.0, -1.0]");
        org.junit.Assert.assertNotNull(floatBuffer20);
        org.junit.Assert.assertNotNull(floatBuffer21);
        org.junit.Assert.assertNotNull(floatBuffer22);
        org.junit.Assert.assertNotNull(byteOrder23);
        org.junit.Assert.assertNotNull(floatBuffer24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
    }

    @Test
    public void test6294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6294");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(0L);
        org.joda.time.DateTime dateTime2 = instant1.toDateTime();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.LocalTime localTime6 = new org.joda.time.LocalTime((long) 0, chronology5);
        org.joda.time.Chronology chronology7 = localTime6.getChronology();
        java.util.Locale locale8 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale locale9 = java.util.Locale.GERMANY;
        java.lang.String str10 = locale8.getDisplayScript(locale9);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket12 = new org.joda.time.format.DateTimeParserBucket((long) 1970, chronology7, locale8, (java.lang.Integer) 1);
        org.joda.time.DateTime dateTime13 = org.joda.time.DateTime.now(chronology7);
        org.joda.time.DateTime.Property property14 = dateTime13.hourOfDay();
        org.joda.time.DateTime dateTime15 = property14.roundHalfFloorCopy();
        org.joda.time.Minutes minutes16 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime15);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(minutes16);
    }

    @Test
    public void test6295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6295");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        int int1 = localDate0.getCenturyOfEra();
        org.joda.time.LocalDate.Property property2 = localDate0.dayOfWeek();
        org.joda.time.LocalDate.Property property3 = localDate0.centuryOfEra();
        java.util.Locale locale5 = java.util.Locale.forLanguageTag("HourOfDay");
        java.lang.String str6 = property3.getAsShortText(locale5);
        java.lang.String str7 = locale5.toLanguageTag();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 20 + "'", int1 == 20);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "20" + "'", str6, "20");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "und" + "'", str7, "und");
    }

    @Test
    public void test6296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6296");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.Duration duration2 = new org.joda.time.Duration(readableInstant0, readableInstant1);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = duration2.toPeriodTo(readableInstant3, periodType4);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.Duration duration8 = new org.joda.time.Duration(readableInstant6, readableInstant7);
        long long9 = duration8.getMillis();
        boolean boolean10 = duration2.isShorterThan((org.joda.time.ReadableDuration) duration8);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) 3, chronology12);
        org.joda.time.DateTime.Property property14 = dateTime13.dayOfYear();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight((java.lang.Object) dateTime13, chronology15);
        org.joda.time.MutableDateTime mutableDateTime17 = dateTime13.toMutableDateTime();
        mutableDateTime17.addYears((int) (short) 100);
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime17.dayOfWeek();
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime17.year();
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime17.weekyear();
        boolean boolean23 = duration2.equals((java.lang.Object) mutableDateTime17);
        mutableDateTime17.addMonths((int) ' ');
        mutableDateTime17.add((long) (byte) 10);
        org.joda.time.Period period28 = org.joda.time.Period.ZERO;
        org.joda.time.Period period29 = period28.normalizedStandard();
        org.joda.time.Period period31 = period28.plusHours(2);
        java.time.chrono.IsoEra isoEra32 = java.time.chrono.IsoEra.CE;
        boolean boolean33 = period31.equals((java.lang.Object) isoEra32);
        int int34 = period31.getMinutes();
        mutableDateTime17.add((org.joda.time.ReadablePeriod) period31);
        java.util.TimeZone timeZone37 = null;
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forTimeZone(timeZone37);
        org.joda.time.DateMidnight dateMidnight39 = new org.joda.time.DateMidnight((long) 1970, dateTimeZone38);
        long long42 = dateTimeZone38.convertLocalToUTC((long) 3, false);
        long long45 = dateTimeZone38.convertLocalToUTC(0L, true);
        mutableDateTime17.setZoneRetainFields(dateTimeZone38);
        java.lang.String str47 = dateTimeZone38.toString();
        org.joda.time.chrono.EthiopicChronology ethiopicChronology48 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone38);
        org.joda.time.DateTimeField dateTimeField49 = ethiopicChronology48.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone50 = ethiopicChronology48.getZone();
        org.joda.time.DateTimeField dateTimeField51 = ethiopicChronology48.era();
        org.joda.time.DateTimeField dateTimeField52 = ethiopicChronology48.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone53 = ethiopicChronology48.getZone();
        org.joda.time.DurationField durationField54 = ethiopicChronology48.weekyears();
        org.joda.time.DurationField durationField55 = ethiopicChronology48.minutes();
        org.joda.time.DurationField durationField56 = ethiopicChronology48.weekyears();
        org.joda.time.DateTimeField dateTimeField57 = ethiopicChronology48.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField58 = ethiopicChronology48.millisOfSecond();
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertTrue("'" + isoEra32 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra32.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 3L + "'", long42 == 3L);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Etc/UTC" + "'", str47, "Etc/UTC");
        org.junit.Assert.assertNotNull(ethiopicChronology48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertNotNull(durationField54);
        org.junit.Assert.assertNotNull(durationField55);
        org.junit.Assert.assertNotNull(durationField56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(dateTimeField58);
    }

    @Test
    public void test6297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6297");
        java.net.InetAddress inetAddress0 = java.net.InetAddress.getLocalHost();
        boolean boolean1 = inetAddress0.isMCOrgLocal();
        float[] floatArray4 = new float[] { (-1L), (byte) -1 };
        java.nio.FloatBuffer floatBuffer5 = java.nio.FloatBuffer.wrap(floatArray4);
        boolean boolean6 = inetAddress0.equals((java.lang.Object) floatBuffer5);
        float[] floatArray9 = new float[] { (-1L), (byte) -1 };
        java.nio.FloatBuffer floatBuffer10 = java.nio.FloatBuffer.wrap(floatArray9);
        java.nio.FloatBuffer floatBuffer11 = floatBuffer10.compact();
        java.nio.FloatBuffer floatBuffer12 = floatBuffer10.asReadOnlyBuffer();
        java.nio.ByteOrder byteOrder13 = floatBuffer10.order();
        boolean boolean14 = floatBuffer5.equals((java.lang.Object) floatBuffer10);
        float[] floatArray17 = new float[] { (-1L), (byte) -1 };
        java.nio.FloatBuffer floatBuffer18 = java.nio.FloatBuffer.wrap(floatArray17);
        java.nio.FloatBuffer floatBuffer19 = floatBuffer18.compact();
        boolean boolean20 = floatBuffer19.isDirect();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((long) 3, chronology22);
        org.joda.time.DateTime.Property property24 = dateTime23.dayOfYear();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateMidnight dateMidnight26 = new org.joda.time.DateMidnight((java.lang.Object) dateTime23, chronology25);
        org.joda.time.MutableDateTime mutableDateTime27 = dateTime23.toMutableDateTime();
        mutableDateTime27.addYears((int) (short) 100);
        org.joda.time.MutableDateTime.Property property30 = mutableDateTime27.dayOfWeek();
        int int31 = property30.get();
        boolean boolean32 = floatBuffer19.equals((java.lang.Object) int31);
        java.nio.FloatBuffer floatBuffer33 = floatBuffer5.put(floatBuffer19);
        java.util.stream.Stream<java.lang.Object> objStream34 = java.util.stream.Stream.empty();
        java.util.stream.Stream<java.lang.Object> objStream35 = objStream34.parallel();
        boolean boolean36 = floatBuffer5.equals((java.lang.Object) objStream34);
        java.util.stream.Stream<java.lang.Object> objStream37 = objStream34.parallel();
        org.junit.Assert.assertNotNull(inetAddress0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(floatArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray4), "[-1.0, -1.0]");
        org.junit.Assert.assertNotNull(floatBuffer5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(floatArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray9), "[-1.0, -1.0]");
        org.junit.Assert.assertNotNull(floatBuffer10);
        org.junit.Assert.assertNotNull(floatBuffer11);
        org.junit.Assert.assertNotNull(floatBuffer12);
        org.junit.Assert.assertNotNull(byteOrder13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(floatArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray17), "[-1.0, -1.0]");
        org.junit.Assert.assertNotNull(floatBuffer18);
        org.junit.Assert.assertNotNull(floatBuffer19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(mutableDateTime27);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 3 + "'", int31 == 3);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(floatBuffer33);
        org.junit.Assert.assertNotNull(objStream34);
        org.junit.Assert.assertNotNull(objStream35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(objStream37);
    }

    @Test
    public void test6298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6298");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.Duration duration2 = new org.joda.time.Duration(readableInstant0, readableInstant1);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = duration2.toPeriodTo(readableInstant3, periodType4);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.Duration duration8 = new org.joda.time.Duration(readableInstant6, readableInstant7);
        long long9 = duration8.getMillis();
        boolean boolean10 = duration2.isShorterThan((org.joda.time.ReadableDuration) duration8);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) 3, chronology12);
        org.joda.time.DateTime.Property property14 = dateTime13.dayOfYear();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight((java.lang.Object) dateTime13, chronology15);
        org.joda.time.MutableDateTime mutableDateTime17 = dateTime13.toMutableDateTime();
        mutableDateTime17.addYears((int) (short) 100);
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime17.dayOfWeek();
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime17.year();
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime17.weekyear();
        boolean boolean23 = duration2.equals((java.lang.Object) mutableDateTime17);
        mutableDateTime17.addMonths((int) ' ');
        mutableDateTime17.add((long) (byte) 10);
        org.joda.time.Period period28 = org.joda.time.Period.ZERO;
        org.joda.time.Period period29 = period28.normalizedStandard();
        org.joda.time.Period period31 = period28.plusHours(2);
        java.time.chrono.IsoEra isoEra32 = java.time.chrono.IsoEra.CE;
        boolean boolean33 = period31.equals((java.lang.Object) isoEra32);
        int int34 = period31.getMinutes();
        mutableDateTime17.add((org.joda.time.ReadablePeriod) period31);
        java.util.TimeZone timeZone37 = null;
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forTimeZone(timeZone37);
        org.joda.time.DateMidnight dateMidnight39 = new org.joda.time.DateMidnight((long) 1970, dateTimeZone38);
        long long42 = dateTimeZone38.convertLocalToUTC((long) 3, false);
        long long45 = dateTimeZone38.convertLocalToUTC(0L, true);
        mutableDateTime17.setZoneRetainFields(dateTimeZone38);
        java.lang.String str47 = dateTimeZone38.toString();
        org.joda.time.chrono.EthiopicChronology ethiopicChronology48 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone38);
        org.joda.time.DateTimeField dateTimeField49 = ethiopicChronology48.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone50 = ethiopicChronology48.getZone();
        org.joda.time.DateTimeField dateTimeField51 = ethiopicChronology48.era();
        org.joda.time.DateTimeField dateTimeField52 = ethiopicChronology48.secondOfDay();
        org.joda.time.DateTimeField dateTimeField53 = ethiopicChronology48.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField54 = ethiopicChronology48.halfdayOfDay();
        org.joda.time.DurationField durationField55 = ethiopicChronology48.weekyears();
        org.joda.time.DateTimeField dateTimeField56 = ethiopicChronology48.yearOfEra();
        org.joda.time.DateMidnight dateMidnight57 = new org.joda.time.DateMidnight((org.joda.time.Chronology) ethiopicChronology48);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertTrue("'" + isoEra32 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra32.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 3L + "'", long42 == 3L);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Etc/UTC" + "'", str47, "Etc/UTC");
        org.junit.Assert.assertNotNull(ethiopicChronology48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(durationField55);
        org.junit.Assert.assertNotNull(dateTimeField56);
    }

    @Test
    public void test6299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6299");
        java.time.Month month0 = java.time.Month.DECEMBER;
        java.time.Month month1 = month0.firstMonthOfQuarter();
        java.time.chrono.Chronology chronology2 = java.time.chrono.Chronology.from((java.time.temporal.TemporalAccessor) month1);
        org.junit.Assert.assertTrue("'" + month0 + "' != '" + java.time.Month.DECEMBER + "'", month0.equals(java.time.Month.DECEMBER));
        org.junit.Assert.assertTrue("'" + month1 + "' != '" + java.time.Month.OCTOBER + "'", month1.equals(java.time.Month.OCTOBER));
        org.junit.Assert.assertNotNull(chronology2);
    }

    @Test
    public void test6300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6300");
        java.time.OffsetDateTime offsetDateTime0 = java.time.OffsetDateTime.now();
        java.time.LocalDate localDate1 = offsetDateTime0.toLocalDate();
        java.time.OffsetDateTime offsetDateTime2 = java.time.OffsetDateTime.now();
        java.time.temporal.ChronoField chronoField3 = java.time.temporal.ChronoField.HOUR_OF_DAY;
        boolean boolean4 = offsetDateTime2.isSupported((java.time.temporal.TemporalField) chronoField3);
        boolean boolean5 = offsetDateTime0.isEqual(offsetDateTime2);
        java.time.OffsetDateTime offsetDateTime7 = offsetDateTime2.minusHours(3601000000001L);
        java.util.GregorianCalendar gregorianCalendar13 = new java.util.GregorianCalendar(12, 4096, 7, (-1), (int) (short) 10);
        int int14 = gregorianCalendar13.getWeeksInWeekYear();
        java.lang.String str15 = gregorianCalendar13.getCalendarType();
        java.time.ZonedDateTime zonedDateTime16 = gregorianCalendar13.toZonedDateTime();
        java.time.ZonedDateTime zonedDateTime18 = zonedDateTime16.minusMonths((long) 10);
        java.time.ZonedDateTime zonedDateTime20 = zonedDateTime18.minusHours((long) 9);
        java.time.ZoneOffset zoneOffset21 = zonedDateTime18.getOffset();
        java.time.ZonedDateTime zonedDateTime22 = offsetDateTime2.atZoneSimilarLocal((java.time.ZoneId) zoneOffset21);
        java.time.zone.ZoneRules zoneRules23 = java.time.zone.ZoneRules.of(zoneOffset21);
        boolean boolean24 = zoneRules23.isFixedOffset();
        org.junit.Assert.assertNotNull(offsetDateTime0);
        org.junit.Assert.assertNotNull(localDate1);
        org.junit.Assert.assertNotNull(offsetDateTime2);
        org.junit.Assert.assertTrue("'" + chronoField3 + "' != '" + java.time.temporal.ChronoField.HOUR_OF_DAY + "'", chronoField3.equals(java.time.temporal.ChronoField.HOUR_OF_DAY));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(offsetDateTime7);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 52 + "'", int14 == 52);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "gregory" + "'", str15, "gregory");
        org.junit.Assert.assertNotNull(zonedDateTime16);
        org.junit.Assert.assertNotNull(zonedDateTime18);
        org.junit.Assert.assertNotNull(zonedDateTime20);
        org.junit.Assert.assertNotNull(zoneOffset21);
        org.junit.Assert.assertNotNull(zonedDateTime22);
        org.junit.Assert.assertNotNull(zoneRules23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
    }

    @Test
    public void test6301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6301");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.now();
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery1 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period2 = localDateTime0.query(periodTemporalQuery1);
        java.time.LocalDateTime localDateTime4 = localDateTime0.withNano(35);
        java.time.LocalDateTime localDateTime6 = localDateTime4.minusNanos((long) 50);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(periodTemporalQuery1);
        org.junit.Assert.assertNotNull(period2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
    }

    @Test
    public void test6302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6302");
        java.nio.charset.Charset charset0 = java.nio.charset.Charset.defaultCharset();
        java.nio.charset.CharsetDecoder charsetDecoder1 = charset0.newDecoder();
        float float2 = charsetDecoder1.maxCharsPerByte();
        java.nio.charset.CodingErrorAction codingErrorAction3 = java.nio.charset.CodingErrorAction.IGNORE;
        java.nio.charset.CharsetDecoder charsetDecoder4 = charsetDecoder1.onMalformedInput(codingErrorAction3);
        float float5 = charsetDecoder1.maxCharsPerByte();
        java.nio.charset.Charset charset6 = charsetDecoder1.charset();
        java.nio.charset.Charset charset7 = java.nio.charset.Charset.defaultCharset();
        java.nio.charset.CharsetDecoder charsetDecoder8 = charset7.newDecoder();
        java.nio.charset.Charset charset9 = java.nio.charset.Charset.defaultCharset();
        boolean boolean10 = charset7.contains(charset9);
        java.nio.charset.CharsetEncoder charsetEncoder11 = charset7.newEncoder();
        byte[] byteArray12 = charsetEncoder11.replacement();
        java.nio.charset.Charset charset13 = java.nio.charset.Charset.defaultCharset();
        java.nio.charset.CharsetDecoder charsetDecoder14 = charset13.newDecoder();
        float float15 = charsetDecoder14.maxCharsPerByte();
        float float16 = charsetDecoder14.averageCharsPerByte();
        java.nio.charset.CodingErrorAction codingErrorAction17 = charsetDecoder14.unmappableCharacterAction();
        java.nio.charset.CharsetEncoder charsetEncoder18 = charsetEncoder11.onUnmappableCharacter(codingErrorAction17);
        java.nio.charset.Charset charset19 = java.nio.charset.Charset.defaultCharset();
        java.nio.charset.CharsetDecoder charsetDecoder20 = charset19.newDecoder();
        java.nio.charset.Charset charset21 = java.nio.charset.Charset.defaultCharset();
        boolean boolean22 = charset19.contains(charset21);
        java.nio.charset.CharsetEncoder charsetEncoder23 = charset19.newEncoder();
        char[] charArray24 = new char[] {};
        java.nio.CharBuffer charBuffer25 = java.nio.CharBuffer.wrap(charArray24);
        java.nio.ByteBuffer byteBuffer26 = charsetEncoder23.encode(charBuffer25);
        java.nio.CharBuffer charBuffer27 = charBuffer25.slice();
        java.nio.ByteBuffer byteBuffer28 = charsetEncoder18.encode(charBuffer27);
        java.nio.ByteBuffer byteBuffer29 = byteBuffer28.asReadOnlyBuffer();
        java.nio.CharBuffer charBuffer30 = charsetDecoder1.decode(byteBuffer28);
        java.util.stream.IntStream intStream31 = charBuffer30.chars();
        java.util.function.IntPredicate intPredicate32 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean33 = intStream31.allMatch(intPredicate32);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charset0);
        org.junit.Assert.assertNotNull(charsetDecoder1);
        org.junit.Assert.assertTrue("'" + float2 + "' != '" + 1.0f + "'", float2 == 1.0f);
        org.junit.Assert.assertNotNull(codingErrorAction3);
        org.junit.Assert.assertNotNull(charsetDecoder4);
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + 1.0f + "'", float5 == 1.0f);
        org.junit.Assert.assertNotNull(charset6);
        org.junit.Assert.assertNotNull(charset7);
        org.junit.Assert.assertNotNull(charsetDecoder8);
        org.junit.Assert.assertNotNull(charset9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(charsetEncoder11);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[63]");
        org.junit.Assert.assertNotNull(charset13);
        org.junit.Assert.assertNotNull(charsetDecoder14);
        org.junit.Assert.assertTrue("'" + float15 + "' != '" + 1.0f + "'", float15 == 1.0f);
        org.junit.Assert.assertTrue("'" + float16 + "' != '" + 1.0f + "'", float16 == 1.0f);
        org.junit.Assert.assertNotNull(codingErrorAction17);
        org.junit.Assert.assertNotNull(charsetEncoder18);
        org.junit.Assert.assertNotNull(charset19);
        org.junit.Assert.assertNotNull(charsetDecoder20);
        org.junit.Assert.assertNotNull(charset21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(charsetEncoder23);
        org.junit.Assert.assertNotNull(charArray24);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray24), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray24), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray24), "[]");
        org.junit.Assert.assertNotNull(charBuffer25);
        org.junit.Assert.assertNotNull(byteBuffer26);
        org.junit.Assert.assertNotNull(charBuffer27);
        org.junit.Assert.assertNotNull(byteBuffer28);
        org.junit.Assert.assertNotNull(byteBuffer29);
        org.junit.Assert.assertNotNull(charBuffer30);
        org.junit.Assert.assertNotNull(intStream31);
    }

    @Test
    public void test6303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6303");
        org.joda.time.Period period0 = org.joda.time.Period.ZERO;
        org.joda.time.Period period1 = period0.normalizedStandard();
        org.joda.time.Period period3 = period1.minusMinutes((int) ' ');
        org.joda.time.Period period5 = period3.minusMonths((int) (byte) 0);
        org.joda.time.Period period7 = period3.minusMonths(999999999);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Seconds seconds8 = period7.toStandardSeconds();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Cannot convert to Seconds as this period contains months and months vary in length");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period0);
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(period7);
    }

    @Test
    public void test6304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6304");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.Duration duration2 = new org.joda.time.Duration(readableInstant0, readableInstant1);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = duration2.toPeriodTo(readableInstant3, periodType4);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.Duration duration8 = new org.joda.time.Duration(readableInstant6, readableInstant7);
        long long9 = duration8.getMillis();
        boolean boolean10 = duration2.isShorterThan((org.joda.time.ReadableDuration) duration8);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) 3, chronology12);
        org.joda.time.DateTime.Property property14 = dateTime13.dayOfYear();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight((java.lang.Object) dateTime13, chronology15);
        org.joda.time.MutableDateTime mutableDateTime17 = dateTime13.toMutableDateTime();
        mutableDateTime17.addYears((int) (short) 100);
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime17.dayOfWeek();
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime17.year();
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime17.weekyear();
        boolean boolean23 = duration2.equals((java.lang.Object) mutableDateTime17);
        mutableDateTime17.addMonths((int) ' ');
        mutableDateTime17.add((long) (byte) 10);
        org.joda.time.Period period28 = org.joda.time.Period.ZERO;
        org.joda.time.Period period29 = period28.normalizedStandard();
        org.joda.time.Period period31 = period28.plusHours(2);
        java.time.chrono.IsoEra isoEra32 = java.time.chrono.IsoEra.CE;
        boolean boolean33 = period31.equals((java.lang.Object) isoEra32);
        int int34 = period31.getMinutes();
        mutableDateTime17.add((org.joda.time.ReadablePeriod) period31);
        java.util.TimeZone timeZone37 = null;
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forTimeZone(timeZone37);
        org.joda.time.DateMidnight dateMidnight39 = new org.joda.time.DateMidnight((long) 1970, dateTimeZone38);
        long long42 = dateTimeZone38.convertLocalToUTC((long) 3, false);
        long long45 = dateTimeZone38.convertLocalToUTC(0L, true);
        mutableDateTime17.setZoneRetainFields(dateTimeZone38);
        java.lang.String str47 = dateTimeZone38.toString();
        org.joda.time.chrono.EthiopicChronology ethiopicChronology48 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone38);
        org.joda.time.DateTimeField dateTimeField49 = ethiopicChronology48.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone50 = ethiopicChronology48.getZone();
        org.joda.time.DateTimeField dateTimeField51 = ethiopicChronology48.era();
        org.joda.time.DateTimeField dateTimeField52 = ethiopicChronology48.secondOfDay();
        org.joda.time.DateTimeField dateTimeField53 = ethiopicChronology48.minuteOfHour();
        org.joda.time.DurationField durationField54 = ethiopicChronology48.months();
        org.joda.time.DateTimeField dateTimeField55 = ethiopicChronology48.weekyearOfCentury();
        org.joda.time.Minutes minutes56 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes58 = minutes56.minus(12);
        org.joda.time.Minutes minutes59 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes61 = minutes59.minus(12);
        org.joda.time.Minutes minutes62 = minutes56.minus(minutes59);
        org.joda.time.DurationFieldType durationFieldType63 = minutes56.getFieldType();
        int[] intArray66 = ethiopicChronology48.get((org.joda.time.ReadablePeriod) minutes56, (long) 30, (long) 741000000);
        java.nio.IntBuffer intBuffer67 = java.nio.IntBuffer.wrap(intArray66);
        java.nio.IntBuffer intBuffer68 = intBuffer67.duplicate();
        boolean boolean69 = intBuffer68.isDirect();
        java.nio.IntBuffer intBuffer71 = intBuffer68.put(0);
        // The following exception was thrown during execution in test generation
        try {
            int int73 = intBuffer68.get(999);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: 999");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertTrue("'" + isoEra32 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra32.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 3L + "'", long42 == 3L);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Etc/UTC" + "'", str47, "Etc/UTC");
        org.junit.Assert.assertNotNull(ethiopicChronology48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(durationField54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(minutes56);
        org.junit.Assert.assertNotNull(minutes58);
        org.junit.Assert.assertNotNull(minutes59);
        org.junit.Assert.assertNotNull(minutes61);
        org.junit.Assert.assertNotNull(minutes62);
        org.junit.Assert.assertNotNull(durationFieldType63);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[0]");
        org.junit.Assert.assertNotNull(intBuffer67);
        org.junit.Assert.assertNotNull(intBuffer68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(intBuffer71);
    }

    @Test
    public void test6305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6305");
        java.util.concurrent.TimeUnit timeUnit1 = java.util.concurrent.TimeUnit.NANOSECONDS;
        long long3 = timeUnit1.toMinutes((long) '4');
        java.nio.file.attribute.FileTime fileTime4 = java.nio.file.attribute.FileTime.from((long) 10, timeUnit1);
        timeUnit1.sleep(3L);
        long long8 = timeUnit1.toNanos((long) 9);
        java.util.concurrent.TimeUnit timeUnit10 = java.util.concurrent.TimeUnit.HOURS;
        long long11 = timeUnit1.convert(0L, timeUnit10);
        org.joda.time.PeriodType periodType12 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period13 = new org.joda.time.Period((java.lang.Object) long11, periodType12);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No period converter found for type: java.lang.Long");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeUnit1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(fileTime4);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 9L + "'", long8 == 9L);
        org.junit.Assert.assertNotNull(timeUnit10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
    }

    @Test
    public void test6306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6306");
        java.util.stream.IntStream intStream2 = java.util.stream.IntStream.rangeClosed(100, (int) '4');
        java.util.stream.IntStream intStream3 = intStream2.parallel();
        intStream2.close();
        java.util.function.IntBinaryOperator intBinaryOperator6 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int7 = intStream2.reduce(0, intBinaryOperator6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intStream2);
        org.junit.Assert.assertNotNull(intStream3);
    }

    @Test
    public void test6307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6307");
        // The following exception was thrown during execution in test generation
        try {
            java.net.InetAddress inetAddress1 = java.net.InetAddress.getByName("2022-02-21T09:40:50.426");
            org.junit.Assert.fail("Expected exception of type java.net.UnknownHostException; message: 2022-02-21T09:40:50.426: invalid IPv6 address");
        } catch (java.net.UnknownHostException e) {
            // Expected exception.
        }
    }

    @Test
    public void test6308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6308");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.Duration duration2 = new org.joda.time.Duration(readableInstant0, readableInstant1);
        org.joda.time.Duration duration4 = duration2.withMillis((-1L));
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((long) 3, chronology6);
        org.joda.time.DateTime.Property property8 = dateTime7.dayOfYear();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight((java.lang.Object) dateTime7, chronology9);
        org.joda.time.DateMidnight dateMidnight12 = dateMidnight10.minusMonths((-1));
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight10.withDayOfYear((int) ' ');
        org.joda.time.PeriodType periodType15 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period16 = duration4.toPeriodFrom((org.joda.time.ReadableInstant) dateMidnight10, periodType15);
        org.joda.time.PeriodType periodType17 = period16.getPeriodType();
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod(periodType17);
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((long) 3, chronology21);
        org.joda.time.DateTime.Property property23 = dateTime22.dayOfYear();
        org.joda.time.Interval interval24 = property23.toInterval();
        org.joda.time.DateTimeField dateTimeField25 = property23.getField();
        org.joda.time.DateTime dateTime27 = property23.addToCopy((long) (byte) 1);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.LocalTime localTime30 = new org.joda.time.LocalTime((long) 0, chronology29);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((long) 3, chronology32);
        org.joda.time.DateTime.Property property34 = dateTime33.dayOfYear();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.DateMidnight dateMidnight36 = new org.joda.time.DateMidnight((java.lang.Object) dateTime33, chronology35);
        org.joda.time.DateTime dateTime37 = localTime30.toDateTime((org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.DateTime dateTime39 = dateTime37.minusMillis((int) (byte) 0);
        org.joda.time.DateTime dateTime41 = dateTime37.withYearOfCentury((int) (byte) 10);
        org.joda.time.DateTime.Property property42 = dateTime41.hourOfDay();
        boolean boolean43 = dateTime27.isEqual((org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.Duration duration44 = new org.joda.time.Duration(readableInstant19, (org.joda.time.ReadableInstant) dateTime41);
        mutablePeriod18.add((org.joda.time.ReadableDuration) duration44);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime((long) 3, chronology47);
        org.joda.time.DateTime.Property property49 = dateTime48.dayOfYear();
        org.joda.time.Interval interval50 = property49.toInterval();
        org.joda.time.DateTimeField dateTimeField51 = property49.getField();
        org.joda.time.DateTime dateTime53 = property49.addWrapFieldToCopy(0);
        org.joda.time.DateTime dateTime55 = property49.setCopy(34);
        org.joda.time.DateTime dateTime57 = dateTime55.plusHours(70);
        org.joda.time.DateTime dateTime59 = dateTime57.withWeekyear(624);
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.DateTime dateTime62 = new org.joda.time.DateTime((long) 3, chronology61);
        org.joda.time.DateTime.Property property63 = dateTime62.dayOfYear();
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.DateMidnight dateMidnight65 = new org.joda.time.DateMidnight((java.lang.Object) dateTime62, chronology64);
        org.joda.time.MutableDateTime mutableDateTime66 = dateTime62.toMutableDateTime();
        mutableDateTime66.setDayOfYear(28);
        int int69 = mutableDateTime66.getMillisOfDay();
        mutableDateTime66.addMinutes(353);
        int int72 = dateTime59.compareTo((org.joda.time.ReadableInstant) mutableDateTime66);
        org.joda.time.Chronology chronology74 = null;
        org.joda.time.LocalTime localTime75 = new org.joda.time.LocalTime((long) 0, chronology74);
        org.joda.time.Chronology chronology77 = null;
        org.joda.time.DateTime dateTime78 = new org.joda.time.DateTime((long) 3, chronology77);
        org.joda.time.DateTime.Property property79 = dateTime78.dayOfYear();
        org.joda.time.Chronology chronology80 = null;
        org.joda.time.DateMidnight dateMidnight81 = new org.joda.time.DateMidnight((java.lang.Object) dateTime78, chronology80);
        org.joda.time.DateTime dateTime82 = localTime75.toDateTime((org.joda.time.ReadableInstant) dateTime78);
        org.joda.time.DateTime dateTime84 = dateTime82.minusMillis((int) (byte) 0);
        boolean boolean85 = dateTime82.isAfterNow();
        int int86 = dateTime82.getDayOfYear();
        org.joda.time.DateTime dateTime88 = dateTime82.minusMinutes(11);
        mutablePeriod18.setPeriod((org.joda.time.ReadableInstant) dateTime59, (org.joda.time.ReadableInstant) dateTime88);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(periodType15);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(periodType17);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(interval50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertNotNull(mutableDateTime66);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 3 + "'", int69 == 3);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-1) + "'", int72 == (-1));
        org.junit.Assert.assertNotNull(property79);
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertNotNull(dateTime84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 1 + "'", int86 == 1);
        org.junit.Assert.assertNotNull(dateTime88);
    }

    @Test
    public void test6309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6309");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 3, chronology1);
        org.joda.time.DateTime.Property property3 = dateTime2.dayOfYear();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight((java.lang.Object) dateTime2, chronology4);
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight5.minusMonths((-1));
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight5.withDayOfYear((int) ' ');
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight9.minusMonths(1024);
        org.joda.time.DateMidnight.Property property12 = dateMidnight11.year();
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight11.minusMonths(7);
        org.joda.time.DateMidnight.Property property15 = dateMidnight14.centuryOfEra();
        org.joda.time.DateMidnight.Property property16 = dateMidnight14.yearOfCentury();
        org.joda.time.DateMidnight.Property property17 = dateMidnight14.dayOfWeek();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(property17);
    }

    @Test
    public void test6310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6310");
        java.time.OffsetTime offsetTime0 = java.time.OffsetTime.MAX;
        java.time.LocalTime localTime1 = offsetTime0.toLocalTime();
        java.lang.String str2 = offsetTime0.toString();
        java.time.Duration duration3 = java.time.Duration.ZERO;
        java.lang.String str4 = duration3.toString();
        java.time.OffsetTime offsetTime5 = offsetTime0.plus((java.time.temporal.TemporalAmount) duration3);
        java.time.OffsetTime offsetTime7 = offsetTime0.withHour((int) (short) 1);
        java.time.OffsetTime offsetTime8 = java.time.OffsetTime.MAX;
        java.time.LocalTime localTime9 = offsetTime8.toLocalTime();
        java.time.OffsetTime offsetTime10 = java.time.OffsetTime.MAX;
        java.time.LocalTime localTime11 = offsetTime10.toLocalTime();
        java.lang.String str12 = offsetTime10.toString();
        java.time.Duration duration13 = java.time.Duration.ZERO;
        java.lang.String str14 = duration13.toString();
        java.time.OffsetTime offsetTime15 = offsetTime10.plus((java.time.temporal.TemporalAmount) duration13);
        java.time.OffsetTime offsetTime17 = offsetTime10.plusNanos((long) 0);
        java.time.LocalTime localTime22 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime23 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime22);
        java.time.temporal.ChronoField chronoField24 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime26 = localTime22.with((java.time.temporal.TemporalField) chronoField24, (long) (short) 1);
        java.util.Locale locale27 = java.util.Locale.GERMANY;
        java.lang.String str28 = chronoField24.getDisplayName(locale27);
        java.time.OffsetTime offsetTime30 = offsetTime17.with((java.time.temporal.TemporalField) chronoField24, (long) 28);
        long long31 = localTime9.getLong((java.time.temporal.TemporalField) chronoField24);
        java.time.LocalTime localTime33 = localTime9.plusHours((long) 36);
        java.time.LocalDateTime localDateTime34 = java.time.LocalDateTime.now();
        java.time.LocalTime localTime35 = localDateTime34.toLocalTime();
        java.time.chrono.Chronology chronology36 = localDateTime34.getChronology();
        java.time.LocalDateTime localDateTime37 = java.time.LocalDateTime.now();
        java.time.LocalTime localTime38 = localDateTime37.toLocalTime();
        java.time.LocalDateTime localDateTime40 = localDateTime37.withDayOfMonth(10);
        java.time.format.DateTimeFormatter dateTimeFormatter41 = java.time.format.DateTimeFormatter.ISO_LOCAL_DATE_TIME;
        java.time.ZoneOffset zoneOffset44 = java.time.ZoneOffset.ofHoursMinutes(1, 10);
        java.time.LocalDate localDate45 = java.time.LocalDate.now((java.time.ZoneId) zoneOffset44);
        java.time.LocalDate localDate46 = java.time.LocalDate.now((java.time.ZoneId) zoneOffset44);
        java.time.format.DateTimeFormatter dateTimeFormatter47 = dateTimeFormatter41.withZone((java.time.ZoneId) zoneOffset44);
        long long48 = localDateTime40.toEpochSecond(zoneOffset44);
        java.time.chrono.ChronoLocalDate chronoLocalDate49 = chronology36.dateNow((java.time.ZoneId) zoneOffset44);
        java.time.OffsetTime offsetTime50 = localTime33.atOffset(zoneOffset44);
        int int51 = offsetTime7.compareTo(offsetTime50);
        java.time.OffsetTime offsetTime53 = offsetTime50.minusSeconds((long) 601);
        java.time.temporal.ChronoField chronoField54 = java.time.temporal.ChronoField.INSTANT_SECONDS;
        java.time.temporal.TemporalUnit temporalUnit55 = chronoField54.getRangeUnit();
        java.lang.String str56 = chronoField54.toString();
        boolean boolean57 = offsetTime50.isSupported((java.time.temporal.TemporalField) chronoField54);
        org.junit.Assert.assertNotNull(offsetTime0);
        org.junit.Assert.assertNotNull(localTime1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "23:59:59.999999999-18:00" + "'", str2, "23:59:59.999999999-18:00");
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "PT0S" + "'", str4, "PT0S");
        org.junit.Assert.assertNotNull(offsetTime5);
        org.junit.Assert.assertNotNull(offsetTime7);
        org.junit.Assert.assertNotNull(offsetTime8);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(offsetTime10);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "23:59:59.999999999-18:00" + "'", str12, "23:59:59.999999999-18:00");
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "PT0S" + "'", str14, "PT0S");
        org.junit.Assert.assertNotNull(offsetTime15);
        org.junit.Assert.assertNotNull(offsetTime17);
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertNotNull(localTime23);
        org.junit.Assert.assertTrue("'" + chronoField24 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField24.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime26);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "NanoOfDay" + "'", str28, "NanoOfDay");
        org.junit.Assert.assertNotNull(offsetTime30);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 86399999999999L + "'", long31 == 86399999999999L);
        org.junit.Assert.assertNotNull(localTime33);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(localTime35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(localTime38);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(dateTimeFormatter41);
        org.junit.Assert.assertNotNull(zoneOffset44);
        org.junit.Assert.assertNotNull(localDate45);
        org.junit.Assert.assertNotNull(localDate46);
        org.junit.Assert.assertNotNull(dateTimeFormatter47);
// flaky:         org.junit.Assert.assertTrue("'" + long48 + "' != '" + 1644481977L + "'", long48 == 1644481977L);
        org.junit.Assert.assertNotNull(chronoLocalDate49);
        org.junit.Assert.assertNotNull(offsetTime50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertNotNull(offsetTime53);
        org.junit.Assert.assertTrue("'" + chronoField54 + "' != '" + java.time.temporal.ChronoField.INSTANT_SECONDS + "'", chronoField54.equals(java.time.temporal.ChronoField.INSTANT_SECONDS));
        org.junit.Assert.assertTrue("'" + temporalUnit55 + "' != '" + java.time.temporal.ChronoUnit.FOREVER + "'", temporalUnit55.equals(java.time.temporal.ChronoUnit.FOREVER));
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "InstantSeconds" + "'", str56, "InstantSeconds");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
    }

    @Test
    public void test6311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6311");
        java.nio.charset.Charset charset0 = java.nio.charset.Charset.defaultCharset();
        java.nio.charset.CharsetDecoder charsetDecoder1 = charset0.newDecoder();
        java.nio.charset.Charset charset2 = java.nio.charset.Charset.defaultCharset();
        boolean boolean3 = charset0.contains(charset2);
        java.nio.charset.CharsetEncoder charsetEncoder4 = charset0.newEncoder();
        byte[] byteArray5 = charsetEncoder4.replacement();
        java.nio.charset.Charset charset6 = java.nio.charset.Charset.defaultCharset();
        java.nio.charset.CharsetDecoder charsetDecoder7 = charset6.newDecoder();
        float float8 = charsetDecoder7.maxCharsPerByte();
        float float9 = charsetDecoder7.averageCharsPerByte();
        java.nio.charset.CodingErrorAction codingErrorAction10 = charsetDecoder7.unmappableCharacterAction();
        java.nio.charset.CharsetEncoder charsetEncoder11 = charsetEncoder4.onUnmappableCharacter(codingErrorAction10);
        java.nio.charset.Charset charset12 = java.nio.charset.Charset.defaultCharset();
        java.nio.charset.CharsetDecoder charsetDecoder13 = charset12.newDecoder();
        java.nio.charset.Charset charset14 = java.nio.charset.Charset.defaultCharset();
        boolean boolean15 = charset12.contains(charset14);
        java.nio.charset.CharsetEncoder charsetEncoder16 = charset12.newEncoder();
        char[] charArray17 = new char[] {};
        java.nio.CharBuffer charBuffer18 = java.nio.CharBuffer.wrap(charArray17);
        java.nio.ByteBuffer byteBuffer19 = charsetEncoder16.encode(charBuffer18);
        java.nio.CharBuffer charBuffer20 = charBuffer18.slice();
        java.nio.ByteBuffer byteBuffer21 = charsetEncoder11.encode(charBuffer20);
        java.util.stream.IntStream intStream22 = charBuffer20.chars();
        java.util.stream.IntStream intStream23 = intStream22.unordered();
        java.util.stream.IntStream intStream25 = java.util.stream.IntStream.of(365);
        java.util.stream.LongStream longStream26 = intStream25.asLongStream();
        java.util.stream.LongStream longStream27 = longStream26.parallel();
        java.util.LongSummaryStatistics longSummaryStatistics28 = new java.util.LongSummaryStatistics();
        longSummaryStatistics28.accept(3);
        long long31 = longSummaryStatistics28.getMax();
        java.util.LongSummaryStatistics longSummaryStatistics32 = new java.util.LongSummaryStatistics();
        longSummaryStatistics32.accept(3);
        java.util.function.LongConsumer longConsumer35 = longSummaryStatistics28.andThen((java.util.function.LongConsumer) longSummaryStatistics32);
        long long36 = longSummaryStatistics28.getMin();
        long long37 = longSummaryStatistics28.getMax();
        long long38 = longSummaryStatistics28.getSum();
        longStream27.forEachOrdered((java.util.function.LongConsumer) longSummaryStatistics28);
        intStream23.forEach((java.util.function.IntConsumer) longSummaryStatistics28);
        // The following exception was thrown during execution in test generation
        try {
            java.util.PrimitiveIterator.OfInt ofInt41 = intStream23.iterator();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: stream has already been operated upon or closed");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charset0);
        org.junit.Assert.assertNotNull(charsetDecoder1);
        org.junit.Assert.assertNotNull(charset2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(charsetEncoder4);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[63]");
        org.junit.Assert.assertNotNull(charset6);
        org.junit.Assert.assertNotNull(charsetDecoder7);
        org.junit.Assert.assertTrue("'" + float8 + "' != '" + 1.0f + "'", float8 == 1.0f);
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + 1.0f + "'", float9 == 1.0f);
        org.junit.Assert.assertNotNull(codingErrorAction10);
        org.junit.Assert.assertNotNull(charsetEncoder11);
        org.junit.Assert.assertNotNull(charset12);
        org.junit.Assert.assertNotNull(charsetDecoder13);
        org.junit.Assert.assertNotNull(charset14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(charsetEncoder16);
        org.junit.Assert.assertNotNull(charArray17);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray17), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray17), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray17), "[]");
        org.junit.Assert.assertNotNull(charBuffer18);
        org.junit.Assert.assertNotNull(byteBuffer19);
        org.junit.Assert.assertNotNull(charBuffer20);
        org.junit.Assert.assertNotNull(byteBuffer21);
        org.junit.Assert.assertNotNull(intStream22);
        org.junit.Assert.assertNotNull(intStream23);
        org.junit.Assert.assertNotNull(intStream25);
        org.junit.Assert.assertNotNull(longStream26);
        org.junit.Assert.assertNotNull(longStream27);
        org.junit.Assert.assertEquals(longSummaryStatistics28.toString(), "LongSummaryStatistics{count=2, sum=368, min=3, average=184.000000, max=365}");
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 3L + "'", long31 == 3L);
        org.junit.Assert.assertEquals(longSummaryStatistics32.toString(), "LongSummaryStatistics{count=1, sum=3, min=3, average=3.000000, max=3}");
        org.junit.Assert.assertNotNull(longConsumer35);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 3L + "'", long36 == 3L);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 3L + "'", long37 == 3L);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 3L + "'", long38 == 3L);
    }

    @Test
    public void test6312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6312");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 3, chronology1);
        org.joda.time.DateTime.Property property3 = dateTime2.dayOfYear();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight((java.lang.Object) dateTime2, chronology4);
        org.joda.time.MutableDateTime mutableDateTime6 = dateTime2.toMutableDateTime();
        org.joda.time.Days days7 = org.joda.time.Days.ONE;
        org.joda.time.MutableInterval mutableInterval8 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadablePeriod) days7);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) 3, chronology10);
        org.joda.time.DateTime.Property property12 = dateTime11.dayOfYear();
        org.joda.time.Interval interval13 = property12.toInterval();
        mutableInterval8.setInterval((org.joda.time.ReadableInterval) interval13);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) 3, chronology16);
        org.joda.time.DateTime.Property property18 = dateTime17.dayOfYear();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight((java.lang.Object) dateTime17, chronology19);
        org.joda.time.DateMidnight.Property property21 = dateMidnight20.dayOfMonth();
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.Duration duration24 = new org.joda.time.Duration(readableInstant22, readableInstant23);
        org.joda.time.Duration duration26 = duration24.withMillis((-1L));
        org.joda.time.ReadableDuration readableDuration27 = null;
        org.joda.time.Duration duration28 = duration24.minus(readableDuration27);
        org.joda.time.DateMidnight dateMidnight29 = dateMidnight20.plus((org.joda.time.ReadableDuration) duration28);
        mutableInterval8.setDurationAfterStart((org.joda.time.ReadableDuration) duration28);
        org.joda.time.MutableDateTime mutableDateTime31 = new org.joda.time.MutableDateTime();
        boolean boolean32 = mutableInterval8.isBefore((org.joda.time.ReadableInstant) mutableDateTime31);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.LocalTime localTime35 = new org.joda.time.LocalTime((long) 0, chronology34);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime((long) 3, chronology37);
        org.joda.time.DateTime.Property property39 = dateTime38.dayOfYear();
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.DateMidnight dateMidnight41 = new org.joda.time.DateMidnight((java.lang.Object) dateTime38, chronology40);
        org.joda.time.DateTime dateTime42 = localTime35.toDateTime((org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.DateTime dateTime44 = dateTime42.minusMillis((int) (byte) 0);
        boolean boolean46 = dateTime44.isAfter((long) (byte) -1);
        org.joda.time.DateTime.Property property47 = dateTime44.dayOfWeek();
        mutableDateTime31.setDate((org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.DateTime dateTime50 = dateTime44.withYearOfEra(366);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(days7);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(dateMidnight29);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(dateTime50);
    }

    @Test
    public void test6313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6313");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.minusYears((-16000000));
        int int5 = localDateTime4.getEra();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
    }

    @Test
    public void test6314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6314");
        double[] doubleArray4 = new double[] { (byte) 0, 59, 83400000000000L, '4' };
        java.util.stream.DoubleStream doubleStream5 = java.util.stream.DoubleStream.of(doubleArray4);
        java.nio.DoubleBuffer doubleBuffer6 = java.nio.DoubleBuffer.wrap(doubleArray4);
        double[] doubleArray11 = new double[] { (byte) 0, 59, 83400000000000L, '4' };
        java.util.stream.DoubleStream doubleStream12 = java.util.stream.DoubleStream.of(doubleArray11);
        java.nio.DoubleBuffer doubleBuffer13 = java.nio.DoubleBuffer.wrap(doubleArray11);
        java.nio.DoubleBuffer doubleBuffer14 = doubleBuffer6.put(doubleBuffer13);
        java.lang.String str15 = doubleBuffer14.toString();
        double[] doubleArray20 = new double[] { (byte) 0, 59, 83400000000000L, '4' };
        java.util.stream.DoubleStream doubleStream21 = java.util.stream.DoubleStream.of(doubleArray20);
        java.nio.DoubleBuffer doubleBuffer22 = java.nio.DoubleBuffer.wrap(doubleArray20);
        double[] doubleArray27 = new double[] { (byte) 0, 59, 83400000000000L, '4' };
        java.util.stream.DoubleStream doubleStream28 = java.util.stream.DoubleStream.of(doubleArray27);
        java.nio.DoubleBuffer doubleBuffer29 = java.nio.DoubleBuffer.wrap(doubleArray27);
        java.nio.DoubleBuffer doubleBuffer30 = doubleBuffer22.put(doubleBuffer29);
        java.nio.DoubleBuffer doubleBuffer31 = doubleBuffer14.put(doubleBuffer30);
        java.nio.DoubleBuffer doubleBuffer34 = doubleBuffer14.put((int) (short) 1, (double) 740000000);
        org.joda.time.Weeks weeks35 = org.joda.time.Weeks.ONE;
        java.util.concurrent.TimeUnit timeUnit36 = java.util.concurrent.TimeUnit.NANOSECONDS;
        boolean boolean37 = weeks35.equals((java.lang.Object) timeUnit36);
        org.joda.time.MutablePeriod mutablePeriod38 = weeks35.toMutablePeriod();
        mutablePeriod38.add((int) '#', 0, 10, 0, (int) (byte) 0, (int) (short) 0, 1, (-1));
        mutablePeriod38.clear();
        int int49 = mutablePeriod38.getWeeks();
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime((long) 3, chronology51);
        org.joda.time.DateTime.Property property53 = dateTime52.dayOfYear();
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.DateMidnight dateMidnight55 = new org.joda.time.DateMidnight((java.lang.Object) dateTime52, chronology54);
        org.joda.time.DateMidnight.Property property56 = dateMidnight55.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight57 = property56.roundCeilingCopy();
        org.joda.time.DateMidnight dateMidnight59 = property56.setCopy("1");
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.LocalTime localTime62 = new org.joda.time.LocalTime((long) 0, chronology61);
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.DateTime dateTime65 = new org.joda.time.DateTime((long) 3, chronology64);
        org.joda.time.DateTime.Property property66 = dateTime65.dayOfYear();
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.DateMidnight dateMidnight68 = new org.joda.time.DateMidnight((java.lang.Object) dateTime65, chronology67);
        org.joda.time.DateTime dateTime69 = localTime62.toDateTime((org.joda.time.ReadableInstant) dateTime65);
        org.joda.time.DateTime dateTime71 = dateTime69.minusMillis((int) (byte) 0);
        org.joda.time.DateTime dateTime73 = dateTime69.withYearOfCentury((int) (byte) 10);
        org.joda.time.DateTime.Property property74 = dateTime73.hourOfDay();
        org.joda.time.DateTime dateTime76 = dateTime73.plus((long) 3600000);
        org.joda.time.DateTime dateTime79 = dateTime76.withDurationAdded((long) 366, (int) '#');
        mutablePeriod38.setPeriod((org.joda.time.ReadableInstant) dateMidnight59, (org.joda.time.ReadableInstant) dateTime79);
        org.joda.time.DateMidnight.Property property81 = dateMidnight59.year();
        boolean boolean82 = doubleBuffer14.equals((java.lang.Object) dateMidnight59);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[0.0, 7.4E8, 8.34E13, 52.0]");
        org.junit.Assert.assertNotNull(doubleStream5);
        org.junit.Assert.assertNotNull(doubleBuffer6);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0, 59.0, 8.34E13, 52.0]");
        org.junit.Assert.assertNotNull(doubleStream12);
        org.junit.Assert.assertNotNull(doubleBuffer13);
        org.junit.Assert.assertNotNull(doubleBuffer14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "java.nio.HeapDoubleBuffer[pos=4 lim=4 cap=4]" + "'", str15, "java.nio.HeapDoubleBuffer[pos=4 lim=4 cap=4]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[0.0, 59.0, 8.34E13, 52.0]");
        org.junit.Assert.assertNotNull(doubleStream21);
        org.junit.Assert.assertNotNull(doubleBuffer22);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[0.0, 59.0, 8.34E13, 52.0]");
        org.junit.Assert.assertNotNull(doubleStream28);
        org.junit.Assert.assertNotNull(doubleBuffer29);
        org.junit.Assert.assertNotNull(doubleBuffer30);
        org.junit.Assert.assertNotNull(doubleBuffer31);
        org.junit.Assert.assertNotNull(doubleBuffer34);
        org.junit.Assert.assertNotNull(weeks35);
        org.junit.Assert.assertNotNull(timeUnit36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(mutablePeriod38);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(dateMidnight57);
        org.junit.Assert.assertNotNull(dateMidnight59);
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(property74);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertNotNull(property81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
    }

    @Test
    public void test6315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6315");
        java.time.LocalDate localDate1 = java.time.LocalDate.ofEpochDay((long) ' ');
        java.time.OffsetTime offsetTime2 = java.time.OffsetTime.MAX;
        java.time.LocalTime localTime3 = offsetTime2.toLocalTime();
        java.lang.String str4 = offsetTime2.toString();
        java.time.Duration duration5 = java.time.Duration.ZERO;
        java.lang.String str6 = duration5.toString();
        java.time.OffsetTime offsetTime7 = offsetTime2.plus((java.time.temporal.TemporalAmount) duration5);
        java.time.LocalTime localTime8 = offsetTime2.toLocalTime();
        java.time.chrono.ChronoLocalDateTime<?> wildcardChronoLocalDateTime9 = localDate1.atTime(localTime8);
        java.time.LocalDate localDate11 = localDate1.minusWeeks((long) 2097);
        java.time.LocalDate localDate13 = localDate11.minusMonths((long) (byte) 0);
        java.time.OffsetTime offsetTime14 = java.time.OffsetTime.MAX;
        java.time.LocalTime localTime15 = offsetTime14.toLocalTime();
        java.lang.String str16 = offsetTime14.toString();
        java.time.Duration duration17 = java.time.Duration.ZERO;
        java.lang.String str18 = duration17.toString();
        java.time.OffsetTime offsetTime19 = offsetTime14.plus((java.time.temporal.TemporalAmount) duration17);
        java.time.OffsetTime offsetTime21 = offsetTime14.plusNanos((long) 0);
        int int22 = offsetTime14.getMinute();
        java.time.OffsetDateTime offsetDateTime23 = localDate11.atTime(offsetTime14);
        java.time.OffsetTime offsetTime25 = offsetTime14.minusNanos((-3155241599900L));
        java.time.ZoneOffset zoneOffset28 = java.time.ZoneOffset.ofHoursMinutes(1, 10);
        java.time.LocalDate localDate29 = java.time.LocalDate.now((java.time.ZoneId) zoneOffset28);
        java.time.LocalDate localDate30 = java.time.LocalDate.now((java.time.ZoneId) zoneOffset28);
        java.time.OffsetTime offsetTime31 = offsetTime25.withOffsetSameLocal(zoneOffset28);
        org.junit.Assert.assertNotNull(localDate1);
        org.junit.Assert.assertNotNull(offsetTime2);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "23:59:59.999999999-18:00" + "'", str4, "23:59:59.999999999-18:00");
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "PT0S" + "'", str6, "PT0S");
        org.junit.Assert.assertNotNull(offsetTime7);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(wildcardChronoLocalDateTime9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(offsetTime14);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "23:59:59.999999999-18:00" + "'", str16, "23:59:59.999999999-18:00");
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "PT0S" + "'", str18, "PT0S");
        org.junit.Assert.assertNotNull(offsetTime19);
        org.junit.Assert.assertNotNull(offsetTime21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 59 + "'", int22 == 59);
        org.junit.Assert.assertNotNull(offsetDateTime23);
        org.junit.Assert.assertNotNull(offsetTime25);
        org.junit.Assert.assertNotNull(zoneOffset28);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertNotNull(offsetTime31);
    }

    @Test
    public void test6316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6316");
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.ofHoursMinutes(1, 10);
        java.time.LocalDate localDate3 = java.time.LocalDate.now((java.time.ZoneId) zoneOffset2);
        java.time.Clock clock4 = java.time.Clock.system((java.time.ZoneId) zoneOffset2);
        java.time.ZonedDateTime zonedDateTime5 = java.time.ZonedDateTime.now(clock4);
        java.time.LocalDate localDate6 = java.time.LocalDate.now(clock4);
        java.util.GregorianCalendar gregorianCalendar12 = new java.util.GregorianCalendar(12, 4096, 7, (-1), (int) (short) 10);
        int int13 = gregorianCalendar12.getWeeksInWeekYear();
        java.lang.String str14 = gregorianCalendar12.getCalendarType();
        java.time.ZonedDateTime zonedDateTime15 = gregorianCalendar12.toZonedDateTime();
        java.time.ZonedDateTime zonedDateTime17 = zonedDateTime15.minusMonths((long) 10);
        int int18 = zonedDateTime15.getMonthValue();
        int int19 = zonedDateTime15.getSecond();
        java.util.GregorianCalendar gregorianCalendar25 = new java.util.GregorianCalendar(12, 4096, 7, (-1), (int) (short) 10);
        int int26 = gregorianCalendar25.getWeeksInWeekYear();
        java.lang.String str27 = gregorianCalendar25.getCalendarType();
        java.time.ZonedDateTime zonedDateTime28 = gregorianCalendar25.toZonedDateTime();
        java.time.ZonedDateTime zonedDateTime30 = zonedDateTime28.minusMonths((long) 10);
        java.time.chrono.ChronoZonedDateTime<java.time.LocalDate> localDateChronoZonedDateTime31 = zonedDateTime28.withEarlierOffsetAtOverlap();
        java.time.ZonedDateTime zonedDateTime33 = zonedDateTime28.minusMonths((long) 4200);
        boolean boolean34 = zonedDateTime15.isBefore((java.time.chrono.ChronoZonedDateTime<java.time.LocalDate>) zonedDateTime33);
        java.time.ZonedDateTime zonedDateTime36 = zonedDateTime15.minusMinutes((long) 34);
        java.time.chrono.Chronology chronology37 = zonedDateTime36.getChronology();
        java.time.LocalDateTime localDateTime38 = java.time.LocalDateTime.MIN;
        java.time.Month month39 = java.time.Month.NOVEMBER;
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime40 = localDateTime38.with((java.time.temporal.TemporalAdjuster) month39);
        java.time.chrono.Chronology chronology41 = localDateChronoLocalDateTime40.getChronology();
        java.time.temporal.ChronoField chronoField42 = java.time.temporal.ChronoField.DAY_OF_WEEK;
        java.time.LocalDateTime localDateTime43 = java.time.LocalDateTime.now();
        java.time.temporal.ChronoField chronoField44 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime46 = localDateTime43.with((java.time.temporal.TemporalField) chronoField44, (long) 10);
        java.time.Duration duration48 = java.time.Duration.ofSeconds((long) 0);
        java.time.temporal.Temporal temporal49 = localDateTime43.minus((java.time.temporal.TemporalAmount) duration48);
        long long50 = chronoField42.getFrom((java.time.temporal.TemporalAccessor) temporal49);
        java.time.LocalTime localTime55 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime56 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime55);
        java.time.temporal.ChronoField chronoField57 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime59 = localTime55.with((java.time.temporal.TemporalField) chronoField57, (long) (short) 1);
        java.util.Locale locale60 = java.util.Locale.GERMANY;
        java.lang.String str61 = chronoField57.getDisplayName(locale60);
        java.lang.String str62 = chronoField42.getDisplayName(locale60);
        java.lang.String str63 = chronoField42.toString();
        java.lang.String str64 = chronoField42.toString();
        java.time.temporal.ValueRange valueRange65 = chronology41.range(chronoField42);
        int int66 = zonedDateTime36.get((java.time.temporal.TemporalField) chronoField42);
        java.time.temporal.ValueRange valueRange67 = localDate6.range((java.time.temporal.TemporalField) chronoField42);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(clock4);
        org.junit.Assert.assertNotNull(zonedDateTime5);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 52 + "'", int13 == 52);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "gregory" + "'", str14, "gregory");
        org.junit.Assert.assertNotNull(zonedDateTime15);
        org.junit.Assert.assertNotNull(zonedDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 5 + "'", int18 == 5);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 59 + "'", int19 == 59);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 52 + "'", int26 == 52);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "gregory" + "'", str27, "gregory");
        org.junit.Assert.assertNotNull(zonedDateTime28);
        org.junit.Assert.assertNotNull(zonedDateTime30);
        org.junit.Assert.assertNotNull(localDateChronoZonedDateTime31);
        org.junit.Assert.assertNotNull(zonedDateTime33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(zonedDateTime36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertTrue("'" + month39 + "' != '" + java.time.Month.NOVEMBER + "'", month39.equals(java.time.Month.NOVEMBER));
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertTrue("'" + chronoField42 + "' != '" + java.time.temporal.ChronoField.DAY_OF_WEEK + "'", chronoField42.equals(java.time.temporal.ChronoField.DAY_OF_WEEK));
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertTrue("'" + chronoField44 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField44.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime46);
        org.junit.Assert.assertNotNull(duration48);
        org.junit.Assert.assertNotNull(temporal49);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 1L + "'", long50 == 1L);
        org.junit.Assert.assertNotNull(localTime55);
        org.junit.Assert.assertNotNull(localTime56);
        org.junit.Assert.assertTrue("'" + chronoField57 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField57.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime59);
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "NanoOfDay" + "'", str61, "NanoOfDay");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "Wochentag" + "'", str62, "Wochentag");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "DayOfWeek" + "'", str63, "DayOfWeek");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "DayOfWeek" + "'", str64, "DayOfWeek");
        org.junit.Assert.assertNotNull(valueRange65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 4 + "'", int66 == 4);
        org.junit.Assert.assertNotNull(valueRange67);
    }

    @Test
    public void test6317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6317");
        java.util.GregorianCalendar gregorianCalendar5 = new java.util.GregorianCalendar(12, 4096, 7, (-1), (int) (short) 10);
        int int6 = gregorianCalendar5.getWeeksInWeekYear();
        java.lang.String str7 = gregorianCalendar5.getCalendarType();
        java.time.ZonedDateTime zonedDateTime8 = gregorianCalendar5.toZonedDateTime();
        java.util.GregorianCalendar gregorianCalendar14 = new java.util.GregorianCalendar(12, 4096, 7, (-1), (int) (short) 10);
        int int15 = gregorianCalendar14.getWeeksInWeekYear();
        java.lang.String str16 = gregorianCalendar14.getCalendarType();
        java.time.ZonedDateTime zonedDateTime17 = gregorianCalendar14.toZonedDateTime();
        int int18 = zonedDateTime8.compareTo((java.time.chrono.ChronoZonedDateTime<java.time.LocalDate>) zonedDateTime17);
        java.time.ZonedDateTime zonedDateTime20 = zonedDateTime8.plusDays((long) 2022);
        java.util.GregorianCalendar gregorianCalendar26 = new java.util.GregorianCalendar(12, 4096, 7, (-1), (int) (short) 10);
        int int27 = gregorianCalendar26.getWeeksInWeekYear();
        java.lang.String str28 = gregorianCalendar26.getCalendarType();
        java.time.ZonedDateTime zonedDateTime29 = gregorianCalendar26.toZonedDateTime();
        java.time.ZonedDateTime zonedDateTime31 = zonedDateTime29.minusMonths((long) 10);
        java.time.chrono.ChronoZonedDateTime<java.time.LocalDate> localDateChronoZonedDateTime32 = zonedDateTime29.withEarlierOffsetAtOverlap();
        java.time.ZonedDateTime zonedDateTime34 = zonedDateTime29.minusMonths((long) 4200);
        java.time.ZonedDateTime zonedDateTime36 = zonedDateTime34.plusNanos(8L);
        java.time.ZonedDateTime zonedDateTime38 = zonedDateTime36.minusSeconds((long) 83400);
        boolean boolean39 = zonedDateTime8.isAfter((java.time.chrono.ChronoZonedDateTime<java.time.LocalDate>) zonedDateTime36);
        java.time.ZonedDateTime zonedDateTime41 = zonedDateTime36.plusMonths((long) 574);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 52 + "'", int6 == 52);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "gregory" + "'", str7, "gregory");
        org.junit.Assert.assertNotNull(zonedDateTime8);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 52 + "'", int15 == 52);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "gregory" + "'", str16, "gregory");
        org.junit.Assert.assertNotNull(zonedDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(zonedDateTime20);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 52 + "'", int27 == 52);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "gregory" + "'", str28, "gregory");
        org.junit.Assert.assertNotNull(zonedDateTime29);
        org.junit.Assert.assertNotNull(zonedDateTime31);
        org.junit.Assert.assertNotNull(localDateChronoZonedDateTime32);
        org.junit.Assert.assertNotNull(zonedDateTime34);
        org.junit.Assert.assertNotNull(zonedDateTime36);
        org.junit.Assert.assertNotNull(zonedDateTime38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(zonedDateTime41);
    }

    @Test
    public void test6318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6318");
        java.nio.charset.Charset charset0 = java.nio.charset.Charset.defaultCharset();
        java.nio.charset.CharsetDecoder charsetDecoder1 = charset0.newDecoder();
        float float2 = charsetDecoder1.maxCharsPerByte();
        java.nio.charset.CodingErrorAction codingErrorAction3 = java.nio.charset.CodingErrorAction.IGNORE;
        java.nio.charset.CharsetDecoder charsetDecoder4 = charsetDecoder1.onMalformedInput(codingErrorAction3);
        float float5 = charsetDecoder1.maxCharsPerByte();
        java.nio.charset.Charset charset6 = charsetDecoder1.charset();
        java.nio.charset.Charset charset7 = java.nio.charset.Charset.defaultCharset();
        java.nio.charset.CharsetDecoder charsetDecoder8 = charset7.newDecoder();
        java.nio.charset.Charset charset9 = java.nio.charset.Charset.defaultCharset();
        boolean boolean10 = charset7.contains(charset9);
        java.nio.charset.CharsetEncoder charsetEncoder11 = charset7.newEncoder();
        byte[] byteArray12 = charsetEncoder11.replacement();
        java.nio.charset.Charset charset13 = java.nio.charset.Charset.defaultCharset();
        java.nio.charset.CharsetDecoder charsetDecoder14 = charset13.newDecoder();
        float float15 = charsetDecoder14.maxCharsPerByte();
        float float16 = charsetDecoder14.averageCharsPerByte();
        java.nio.charset.CodingErrorAction codingErrorAction17 = charsetDecoder14.unmappableCharacterAction();
        java.nio.charset.CharsetEncoder charsetEncoder18 = charsetEncoder11.onUnmappableCharacter(codingErrorAction17);
        java.nio.charset.Charset charset19 = java.nio.charset.Charset.defaultCharset();
        java.nio.charset.CharsetDecoder charsetDecoder20 = charset19.newDecoder();
        java.nio.charset.Charset charset21 = java.nio.charset.Charset.defaultCharset();
        boolean boolean22 = charset19.contains(charset21);
        java.nio.charset.CharsetEncoder charsetEncoder23 = charset19.newEncoder();
        char[] charArray24 = new char[] {};
        java.nio.CharBuffer charBuffer25 = java.nio.CharBuffer.wrap(charArray24);
        java.nio.ByteBuffer byteBuffer26 = charsetEncoder23.encode(charBuffer25);
        java.nio.CharBuffer charBuffer27 = charBuffer25.slice();
        java.nio.ByteBuffer byteBuffer28 = charsetEncoder18.encode(charBuffer27);
        java.nio.ByteBuffer byteBuffer29 = byteBuffer28.asReadOnlyBuffer();
        java.nio.CharBuffer charBuffer30 = charsetDecoder1.decode(byteBuffer28);
        java.util.stream.IntStream intStream31 = charBuffer30.chars();
        // The following exception was thrown during execution in test generation
        try {
            java.nio.CharBuffer charBuffer33 = charBuffer30.put("Coordinated Universal Time");
            org.junit.Assert.fail("Expected exception of type java.nio.BufferOverflowException; message: null");
        } catch (java.nio.BufferOverflowException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charset0);
        org.junit.Assert.assertNotNull(charsetDecoder1);
        org.junit.Assert.assertTrue("'" + float2 + "' != '" + 1.0f + "'", float2 == 1.0f);
        org.junit.Assert.assertNotNull(codingErrorAction3);
        org.junit.Assert.assertNotNull(charsetDecoder4);
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + 1.0f + "'", float5 == 1.0f);
        org.junit.Assert.assertNotNull(charset6);
        org.junit.Assert.assertNotNull(charset7);
        org.junit.Assert.assertNotNull(charsetDecoder8);
        org.junit.Assert.assertNotNull(charset9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(charsetEncoder11);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[63]");
        org.junit.Assert.assertNotNull(charset13);
        org.junit.Assert.assertNotNull(charsetDecoder14);
        org.junit.Assert.assertTrue("'" + float15 + "' != '" + 1.0f + "'", float15 == 1.0f);
        org.junit.Assert.assertTrue("'" + float16 + "' != '" + 1.0f + "'", float16 == 1.0f);
        org.junit.Assert.assertNotNull(codingErrorAction17);
        org.junit.Assert.assertNotNull(charsetEncoder18);
        org.junit.Assert.assertNotNull(charset19);
        org.junit.Assert.assertNotNull(charsetDecoder20);
        org.junit.Assert.assertNotNull(charset21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(charsetEncoder23);
        org.junit.Assert.assertNotNull(charArray24);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray24), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray24), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray24), "[]");
        org.junit.Assert.assertNotNull(charBuffer25);
        org.junit.Assert.assertNotNull(byteBuffer26);
        org.junit.Assert.assertNotNull(charBuffer27);
        org.junit.Assert.assertNotNull(byteBuffer28);
        org.junit.Assert.assertNotNull(byteBuffer29);
        org.junit.Assert.assertNotNull(charBuffer30);
        org.junit.Assert.assertNotNull(intStream31);
    }

    @Test
    public void test6319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6319");
        java.util.stream.IntStream intStream1 = java.util.stream.IntStream.of(365);
        java.util.stream.LongStream longStream2 = intStream1.asLongStream();
        java.util.stream.LongStream longStream3 = longStream2.parallel();
        java.util.stream.LongStream longStream5 = java.util.stream.LongStream.of(0L);
        java.util.stream.LongStream longStream6 = longStream5.unordered();
        java.util.stream.LongStream longStream7 = java.util.stream.LongStream.concat(longStream3, longStream6);
        java.util.function.LongToIntFunction longToIntFunction8 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.IntStream intStream9 = longStream7.mapToInt(longToIntFunction8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intStream1);
        org.junit.Assert.assertNotNull(longStream2);
        org.junit.Assert.assertNotNull(longStream3);
        org.junit.Assert.assertNotNull(longStream5);
        org.junit.Assert.assertNotNull(longStream6);
        org.junit.Assert.assertNotNull(longStream7);
    }

    @Test
    public void test6320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6320");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(58L);
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.Duration duration4 = new org.joda.time.Duration(readableInstant2, readableInstant3);
        org.joda.time.Duration duration6 = duration4.withMillis((-1L));
        org.joda.time.Period period7 = duration6.toPeriod();
        org.joda.time.Instant instant8 = instant1.minus((org.joda.time.ReadableDuration) duration6);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) 3, chronology10);
        org.joda.time.DateTime.Property property12 = dateTime11.dayOfYear();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight((java.lang.Object) dateTime11, chronology13);
        org.joda.time.MutableDateTime mutableDateTime15 = dateTime11.toMutableDateTime();
        mutableDateTime15.addYears((int) (short) 100);
        org.joda.time.MutableDateTime.Property property18 = mutableDateTime15.millisOfDay();
        org.joda.time.PeriodType periodType19 = org.joda.time.PeriodType.years();
        org.joda.time.DurationFieldType durationFieldType20 = org.joda.time.DurationFieldType.halfdays();
        int int21 = periodType19.indexOf(durationFieldType20);
        mutableDateTime15.add(durationFieldType20, (int) 'a');
        java.util.TimeZone timeZone25 = null;
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forTimeZone(timeZone25);
        org.joda.time.DateMidnight dateMidnight27 = new org.joda.time.DateMidnight((long) 1970, dateTimeZone26);
        mutableDateTime15.setTime((org.joda.time.ReadableInstant) dateMidnight27);
        mutableDateTime15.addWeekyears(52);
        org.joda.time.MutableDateTime.Property property31 = mutableDateTime15.secondOfMinute();
        boolean boolean32 = instant8.isAfter((org.joda.time.ReadableInstant) mutableDateTime15);
        org.joda.time.DateTime dateTime33 = instant8.toDateTime();
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(instant8);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(periodType19);
        org.junit.Assert.assertNotNull(durationFieldType20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(dateTime33);
    }

    @Test
    public void test6321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6321");
        org.joda.time.Period period0 = org.joda.time.Period.ZERO;
        org.joda.time.Period period2 = period0.minusMillis(7);
        org.joda.time.Hours hours3 = period0.toStandardHours();
        org.junit.Assert.assertNotNull(period0);
        org.junit.Assert.assertNotNull(period2);
        org.junit.Assert.assertNotNull(hours3);
    }

    @Test
    public void test6322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6322");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 3, chronology1);
        org.joda.time.DateTime.Property property3 = dateTime2.dayOfYear();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight((java.lang.Object) dateTime2, chronology4);
        org.joda.time.MutableDateTime mutableDateTime6 = dateTime2.toMutableDateTime();
        org.joda.time.Days days7 = org.joda.time.Days.ONE;
        org.joda.time.MutableInterval mutableInterval8 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadablePeriod) days7);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) 3, chronology10);
        org.joda.time.DateTime.Property property12 = dateTime11.dayOfYear();
        org.joda.time.Interval interval13 = property12.toInterval();
        mutableInterval8.setInterval((org.joda.time.ReadableInterval) interval13);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) 3, chronology16);
        org.joda.time.DateTime.Property property18 = dateTime17.dayOfYear();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight((java.lang.Object) dateTime17, chronology19);
        org.joda.time.DateMidnight.Property property21 = dateMidnight20.dayOfMonth();
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.Duration duration24 = new org.joda.time.Duration(readableInstant22, readableInstant23);
        org.joda.time.Duration duration26 = duration24.withMillis((-1L));
        org.joda.time.ReadableDuration readableDuration27 = null;
        org.joda.time.Duration duration28 = duration24.minus(readableDuration27);
        org.joda.time.DateMidnight dateMidnight29 = dateMidnight20.plus((org.joda.time.ReadableDuration) duration28);
        mutableInterval8.setDurationAfterStart((org.joda.time.ReadableDuration) duration28);
        java.lang.Object obj31 = mutableInterval8.clone();
        long long32 = mutableInterval8.toDurationMillis();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(days7);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(dateMidnight29);
        org.junit.Assert.assertNotNull(obj31);
        org.junit.Assert.assertEquals(obj31.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj31), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj31), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
    }

    @Test
    public void test6323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6323");
        org.joda.time.Weeks weeks1 = org.joda.time.Weeks.ONE;
        java.util.concurrent.TimeUnit timeUnit2 = java.util.concurrent.TimeUnit.NANOSECONDS;
        boolean boolean3 = weeks1.equals((java.lang.Object) timeUnit2);
        org.joda.time.MutablePeriod mutablePeriod4 = weeks1.toMutablePeriod();
        int int5 = mutablePeriod4.getSeconds();
        mutablePeriod4.addSeconds(10);
        org.joda.time.Weeks weeks9 = org.joda.time.Weeks.ONE;
        java.util.concurrent.TimeUnit timeUnit10 = java.util.concurrent.TimeUnit.NANOSECONDS;
        boolean boolean11 = weeks9.equals((java.lang.Object) timeUnit10);
        org.joda.time.MutablePeriod mutablePeriod12 = weeks9.toMutablePeriod();
        int int13 = mutablePeriod12.getSeconds();
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.Duration duration16 = new org.joda.time.Duration(readableInstant14, readableInstant15);
        long long17 = duration16.getMillis();
        org.joda.time.Duration duration19 = duration16.plus((long) (byte) 1);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.LocalTime localTime23 = new org.joda.time.LocalTime((long) 0, chronology22);
        org.joda.time.Chronology chronology24 = localTime23.getChronology();
        java.util.Locale locale25 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale locale26 = java.util.Locale.GERMANY;
        java.lang.String str27 = locale25.getDisplayScript(locale26);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket29 = new org.joda.time.format.DateTimeParserBucket((long) 1970, chronology24, locale25, (java.lang.Integer) 1);
        mutablePeriod12.setPeriod((org.joda.time.ReadableDuration) duration16, chronology24);
        mutablePeriod4.setPeriod(86399L, chronology24);
        org.joda.time.MutableDateTime mutableDateTime32 = new org.joda.time.MutableDateTime(0L, chronology24);
        org.joda.time.MutableDateTime mutableDateTime33 = mutableDateTime32.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property34 = mutableDateTime32.yearOfEra();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime36 = property34.set(0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for yearOfEra must be in the range [1,292278993]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(weeks1);
        org.junit.Assert.assertNotNull(timeUnit2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(mutablePeriod4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(weeks9);
        org.junit.Assert.assertNotNull(timeUnit10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(mutablePeriod12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(mutableDateTime33);
        org.junit.Assert.assertNotNull(property34);
    }

    @Test
    public void test6324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6324");
        java.util.stream.IntStream intStream1 = java.util.stream.IntStream.of(365);
        java.util.stream.LongStream longStream2 = intStream1.asLongStream();
        java.util.Spliterator.OfLong ofLong3 = longStream2.spliterator();
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.LongStream longStream4 = longStream2.distinct();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: stream has already been operated upon or closed");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intStream1);
        org.junit.Assert.assertNotNull(longStream2);
        org.junit.Assert.assertNotNull(ofLong3);
    }

    @Test
    public void test6325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6325");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 3, chronology1);
        int int3 = dateTime2.getYear();
        java.lang.String str4 = dateTime2.toString();
        org.joda.time.DateTime dateTime6 = dateTime2.withDayOfYear(30);
        org.joda.time.DateTime.Property property7 = dateTime2.secondOfDay();
        org.joda.time.DateTime dateTime8 = property7.roundHalfCeilingCopy();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1970-01-01T00:00:00.003Z" + "'", str4, "1970-01-01T00:00:00.003Z");
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime8);
    }

    @Test
    public void test6326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6326");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 3, chronology1);
        org.joda.time.DateTime.Property property3 = dateTime2.dayOfYear();
        org.joda.time.Interval interval4 = property3.toInterval();
        org.joda.time.DateTimeField dateTimeField5 = property3.getField();
        org.joda.time.DateTime dateTime7 = property3.addToCopy((long) (byte) 1);
        org.joda.time.DateTimeField dateTimeField8 = property3.getField();
        org.joda.time.DateTime dateTime9 = property3.roundHalfEvenCopy();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTime9);
    }

    @Test
    public void test6327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6327");
        java.time.LocalTime localTime0 = java.time.LocalTime.MIDNIGHT;
        java.time.Duration duration1 = java.time.Duration.ZERO;
        java.time.LocalTime localTime6 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime7 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime6);
        java.time.temporal.ChronoField chronoField8 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime10 = localTime6.with((java.time.temporal.TemporalField) chronoField8, (long) (short) 1);
        java.time.Duration duration12 = java.time.Duration.ofMinutes((long) 3);
        java.time.LocalTime localTime13 = localTime6.minus((java.time.temporal.TemporalAmount) duration12);
        java.time.temporal.Temporal temporal14 = duration1.subtractFrom((java.time.temporal.Temporal) localTime13);
        java.time.LocalTime localTime16 = localTime13.plusMinutes((long) 31);
        boolean boolean17 = localTime0.isAfter(localTime16);
        java.time.LocalTime localTime19 = localTime16.plusNanos((long) 32769);
        java.time.Duration duration21 = java.time.Duration.ofMinutes((long) 3);
        java.time.Duration duration22 = duration21.abs();
        java.time.Duration duration24 = duration22.plusMinutes(0L);
        boolean boolean25 = duration24.isZero();
        java.time.LocalTime localTime26 = localTime19.plus((java.time.temporal.TemporalAmount) duration24);
        java.time.LocalTime localTime28 = localTime26.plusMinutes(4283L);
        java.time.Instant instant29 = java.time.Instant.now();
        java.time.OffsetDateTime offsetDateTime30 = java.time.OffsetDateTime.now();
        java.time.temporal.ChronoField chronoField31 = java.time.temporal.ChronoField.HOUR_OF_DAY;
        boolean boolean32 = offsetDateTime30.isSupported((java.time.temporal.TemporalField) chronoField31);
        java.time.Month month33 = offsetDateTime30.getMonth();
        java.time.ZoneOffset zoneOffset36 = java.time.ZoneOffset.ofHoursMinutes(1, 10);
        java.time.LocalDate localDate37 = java.time.LocalDate.now((java.time.ZoneId) zoneOffset36);
        java.time.Clock clock38 = java.time.Clock.system((java.time.ZoneId) zoneOffset36);
        java.time.Duration duration40 = java.time.Duration.ofSeconds((long) 0);
        java.time.Duration duration42 = duration40.multipliedBy((long) (byte) -1);
        java.time.Clock clock43 = java.time.Clock.offset(clock38, duration40);
        java.time.OffsetDateTime offsetDateTime44 = offsetDateTime30.plus((java.time.temporal.TemporalAmount) duration40);
        java.time.Instant instant45 = offsetDateTime30.toInstant();
        boolean boolean46 = instant29.isAfter(instant45);
        java.util.GregorianCalendar gregorianCalendar52 = new java.util.GregorianCalendar(12, 4096, 7, (-1), (int) (short) 10);
        int int53 = gregorianCalendar52.getWeeksInWeekYear();
        java.lang.String str54 = gregorianCalendar52.getCalendarType();
        java.time.ZonedDateTime zonedDateTime55 = gregorianCalendar52.toZonedDateTime();
        java.time.ZonedDateTime zonedDateTime57 = zonedDateTime55.minusMonths((long) 10);
        java.time.ZonedDateTime zonedDateTime59 = zonedDateTime57.minusHours((long) 9);
        java.time.LocalTime localTime64 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime65 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime64);
        java.time.LocalTime localTime70 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime71 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime70);
        java.time.temporal.ChronoField chronoField72 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime74 = localTime70.with((java.time.temporal.TemporalField) chronoField72, (long) (short) 1);
        long long75 = localTime64.getLong((java.time.temporal.TemporalField) chronoField72);
        java.time.LocalTime localTime77 = localTime64.withSecond((int) (short) 1);
        int int78 = localTime77.getMinute();
        java.time.LocalTime localTime80 = localTime77.plusHours((long) (-1));
        java.time.LocalDateTime localDateTime81 = java.time.LocalDateTime.now();
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery82 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period83 = localDateTime81.query(periodTemporalQuery82);
        java.time.Period period84 = localTime80.query(periodTemporalQuery82);
        java.time.Period period85 = zonedDateTime59.query(periodTemporalQuery82);
        java.time.Period period86 = instant45.query(periodTemporalQuery82);
        java.time.Period period87 = localTime28.query(periodTemporalQuery82);
        org.junit.Assert.assertNotNull(localTime0);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertTrue("'" + chronoField8 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField8.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(temporal14);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(localTime26);
        org.junit.Assert.assertNotNull(localTime28);
        org.junit.Assert.assertNotNull(instant29);
        org.junit.Assert.assertNotNull(offsetDateTime30);
        org.junit.Assert.assertTrue("'" + chronoField31 + "' != '" + java.time.temporal.ChronoField.HOUR_OF_DAY + "'", chronoField31.equals(java.time.temporal.ChronoField.HOUR_OF_DAY));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + month33 + "' != '" + java.time.Month.FEBRUARY + "'", month33.equals(java.time.Month.FEBRUARY));
        org.junit.Assert.assertNotNull(zoneOffset36);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertNotNull(clock38);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(clock43);
        org.junit.Assert.assertNotNull(offsetDateTime44);
        org.junit.Assert.assertNotNull(instant45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 52 + "'", int53 == 52);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "gregory" + "'", str54, "gregory");
        org.junit.Assert.assertNotNull(zonedDateTime55);
        org.junit.Assert.assertNotNull(zonedDateTime57);
        org.junit.Assert.assertNotNull(zonedDateTime59);
        org.junit.Assert.assertNotNull(localTime64);
        org.junit.Assert.assertNotNull(localTime65);
        org.junit.Assert.assertNotNull(localTime70);
        org.junit.Assert.assertNotNull(localTime71);
        org.junit.Assert.assertTrue("'" + chronoField72 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField72.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime74);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 3601000000001L + "'", long75 == 3601000000001L);
        org.junit.Assert.assertNotNull(localTime77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertNotNull(localTime80);
        org.junit.Assert.assertNotNull(localDateTime81);
        org.junit.Assert.assertNotNull(periodTemporalQuery82);
        org.junit.Assert.assertNotNull(period83);
        org.junit.Assert.assertNotNull(period84);
        org.junit.Assert.assertNotNull(period85);
        org.junit.Assert.assertNotNull(period86);
        org.junit.Assert.assertNotNull(period87);
    }

    @Test
    public void test6328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6328");
        java.time.Duration duration0 = java.time.Duration.ZERO;
        java.time.Duration duration2 = duration0.minusHours((long) 8);
        java.time.Duration duration4 = duration0.minusDays((long) 17);
        java.time.Duration duration6 = duration0.plusDays((long) 32769);
        java.time.LocalTime localTime11 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime12 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime11);
        java.time.temporal.ChronoField chronoField13 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime15 = localTime11.with((java.time.temporal.TemporalField) chronoField13, (long) (short) 1);
        java.time.Duration duration17 = java.time.Duration.ofMinutes((long) 3);
        java.time.LocalTime localTime18 = localTime11.minus((java.time.temporal.TemporalAmount) duration17);
        java.time.Duration duration19 = duration6.minus(duration17);
        java.util.List<java.time.temporal.TemporalUnit> temporalUnitList20 = duration17.getUnits();
        org.junit.Assert.assertNotNull(duration0);
        org.junit.Assert.assertNotNull(duration2);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertTrue("'" + chronoField13 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField13.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(temporalUnitList20);
    }

    @Test
    public void test6329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6329");
        java.util.stream.IntStream intStream2 = java.util.stream.IntStream.rangeClosed(100, (int) '4');
        java.util.stream.IntStream intStream3 = intStream2.sequential();
        java.util.OptionalInt optionalInt4 = intStream2.findFirst();
        org.junit.Assert.assertNotNull(intStream2);
        org.junit.Assert.assertNotNull(intStream3);
        org.junit.Assert.assertNotNull(optionalInt4);
    }

    @Test
    public void test6330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6330");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        int int1 = localDate0.getCenturyOfEra();
        org.joda.time.LocalDate.Property property2 = localDate0.dayOfWeek();
        org.joda.time.LocalDate localDate4 = property2.addToCopy(7);
        org.joda.time.LocalDate localDate5 = property2.roundCeilingCopy();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) 3, chronology7);
        org.joda.time.DateTime.Property property9 = dateTime8.dayOfYear();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight((java.lang.Object) dateTime8, chronology10);
        org.joda.time.MutableDateTime mutableDateTime12 = dateTime8.toMutableDateTime();
        mutableDateTime12.addYears((int) (short) 100);
        org.joda.time.MutableDateTime.Property property15 = mutableDateTime12.dayOfWeek();
        org.joda.time.MutableDateTime.Property property16 = mutableDateTime12.year();
        java.util.TimeZone timeZone17 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forTimeZone(timeZone17);
        mutableDateTime12.setZone(dateTimeZone18);
        java.util.Locale locale21 = java.util.Locale.TAIWAN;
        java.lang.String str22 = dateTimeZone18.getShortName((long) 64, locale21);
        java.util.Locale locale24 = java.util.Locale.FRANCE;
        java.lang.String str25 = dateTimeZone18.getName(86400000L, locale24);
        org.joda.time.DateTime dateTime26 = localDate5.toDateTimeAtMidnight(dateTimeZone18);
        org.joda.time.DateTime.Property property27 = dateTime26.centuryOfEra();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 20 + "'", int1 == 20);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+00:00" + "'", str22, "+00:00");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "+00:00" + "'", str25, "+00:00");
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(property27);
    }

    @Test
    public void test6331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6331");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((long) 0, chronology2);
        org.joda.time.Chronology chronology4 = localTime3.getChronology();
        org.joda.time.DateTimeField dateTimeField5 = chronology4.weekyearOfCentury();
        org.joda.time.DurationField durationField6 = chronology4.weekyears();
        org.joda.time.DurationField durationField7 = chronology4.seconds();
        org.joda.time.LocalTime localTime8 = org.joda.time.LocalTime.fromMillisOfDay((long) (byte) 0, chronology4);
        org.joda.time.LocalTime.Property property9 = localTime8.millisOfSecond();
        org.joda.time.LocalTime localTime10 = property9.roundFloorCopy();
        org.joda.time.LocalTime localTime12 = property9.addCopy(197);
        org.joda.time.LocalTime localTime13 = property9.roundHalfEvenCopy();
        org.joda.time.LocalTime localTime14 = property9.roundCeilingCopy();
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.Duration duration17 = new org.joda.time.Duration(readableInstant15, readableInstant16);
        org.joda.time.Duration duration19 = duration17.withMillis((-1L));
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((long) 3, chronology21);
        org.joda.time.DateTime.Property property23 = dateTime22.dayOfYear();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateMidnight dateMidnight25 = new org.joda.time.DateMidnight((java.lang.Object) dateTime22, chronology24);
        org.joda.time.DateMidnight dateMidnight27 = dateMidnight25.minusMonths((-1));
        org.joda.time.DateMidnight dateMidnight29 = dateMidnight25.withDayOfYear((int) ' ');
        org.joda.time.PeriodType periodType30 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period31 = duration19.toPeriodFrom((org.joda.time.ReadableInstant) dateMidnight25, periodType30);
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.Duration duration34 = new org.joda.time.Duration(readableInstant32, readableInstant33);
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.PeriodType periodType36 = null;
        org.joda.time.Period period37 = duration34.toPeriodTo(readableInstant35, periodType36);
        long long38 = duration34.getStandardSeconds();
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime((long) 3, chronology40);
        org.joda.time.DateTime.Property property42 = dateTime41.dayOfYear();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.DateMidnight dateMidnight44 = new org.joda.time.DateMidnight((java.lang.Object) dateTime41, chronology43);
        org.joda.time.DateMidnight dateMidnight46 = dateMidnight44.minusMonths((-1));
        org.joda.time.DateMidnight dateMidnight48 = dateMidnight44.withDayOfYear((int) ' ');
        org.joda.time.Interval interval49 = duration34.toIntervalTo((org.joda.time.ReadableInstant) dateMidnight48);
        org.joda.time.PeriodType periodType51 = org.joda.time.PeriodType.time();
        org.joda.time.MutablePeriod mutablePeriod52 = new org.joda.time.MutablePeriod((long) 'a', periodType51);
        org.joda.time.Period period53 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight25, (org.joda.time.ReadableDuration) duration34, periodType51);
        org.joda.time.Period period55 = period53.minusMinutes(10800000);
        org.joda.time.Duration duration57 = org.joda.time.Duration.standardHours((long) 1);
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.DateTime dateTime60 = new org.joda.time.DateTime((long) 3, chronology59);
        org.joda.time.DateTime.Property property61 = dateTime60.dayOfYear();
        org.joda.time.Interval interval62 = property61.toInterval();
        org.joda.time.DateTime dateTime63 = interval62.getEnd();
        org.joda.time.ReadableInstant readableInstant66 = null;
        org.joda.time.ReadableInstant readableInstant67 = null;
        org.joda.time.Duration duration68 = new org.joda.time.Duration(readableInstant66, readableInstant67);
        org.joda.time.Duration duration70 = duration68.withMillis((-1L));
        org.joda.time.Chronology chronology72 = null;
        org.joda.time.DateTime dateTime73 = new org.joda.time.DateTime((long) 3, chronology72);
        org.joda.time.DateTime.Property property74 = dateTime73.dayOfYear();
        org.joda.time.Chronology chronology75 = null;
        org.joda.time.DateMidnight dateMidnight76 = new org.joda.time.DateMidnight((java.lang.Object) dateTime73, chronology75);
        org.joda.time.DateMidnight dateMidnight78 = dateMidnight76.minusMonths((-1));
        org.joda.time.DateMidnight dateMidnight80 = dateMidnight76.withDayOfYear((int) ' ');
        org.joda.time.PeriodType periodType81 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period82 = duration70.toPeriodFrom((org.joda.time.ReadableInstant) dateMidnight76, periodType81);
        org.joda.time.Chronology chronology84 = null;
        org.joda.time.LocalTime localTime85 = new org.joda.time.LocalTime((long) 0, chronology84);
        org.joda.time.Chronology chronology86 = localTime85.getChronology();
        org.joda.time.DateTimeField dateTimeField87 = chronology86.weekyearOfCentury();
        org.joda.time.DurationField durationField88 = chronology86.weekyears();
        org.joda.time.DurationField durationField89 = chronology86.seconds();
        org.joda.time.Chronology chronology90 = chronology86.withUTC();
        org.joda.time.DateTimeField dateTimeField91 = chronology86.hourOfDay();
        org.joda.time.Period period92 = new org.joda.time.Period(28L, 3L, periodType81, chronology86);
        org.joda.time.Period period93 = duration57.toPeriodTo((org.joda.time.ReadableInstant) dateTime63, periodType81);
        org.joda.time.Period period94 = period53.normalizedStandard(periodType81);
        org.joda.time.LocalTime localTime96 = localTime14.withPeriodAdded((org.joda.time.ReadablePeriod) period94, 36);
        org.joda.time.Seconds seconds97 = period94.toStandardSeconds();
        int int98 = seconds97.getSeconds();
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateMidnight27);
        org.junit.Assert.assertNotNull(dateMidnight29);
        org.junit.Assert.assertNotNull(periodType30);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(dateMidnight46);
        org.junit.Assert.assertNotNull(dateMidnight48);
        org.junit.Assert.assertNotNull(interval49);
        org.junit.Assert.assertNotNull(periodType51);
        org.junit.Assert.assertNotNull(period55);
        org.junit.Assert.assertNotNull(duration57);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertNotNull(interval62);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(duration70);
        org.junit.Assert.assertNotNull(property74);
        org.junit.Assert.assertNotNull(dateMidnight78);
        org.junit.Assert.assertNotNull(dateMidnight80);
        org.junit.Assert.assertNotNull(periodType81);
        org.junit.Assert.assertNotNull(period82);
        org.junit.Assert.assertNotNull(chronology86);
        org.junit.Assert.assertNotNull(dateTimeField87);
        org.junit.Assert.assertNotNull(durationField88);
        org.junit.Assert.assertNotNull(durationField89);
        org.junit.Assert.assertNotNull(chronology90);
        org.junit.Assert.assertNotNull(dateTimeField91);
        org.junit.Assert.assertNotNull(period93);
        org.junit.Assert.assertNotNull(period94);
        org.junit.Assert.assertNotNull(localTime96);
        org.junit.Assert.assertNotNull(seconds97);
        org.junit.Assert.assertTrue("'" + int98 + "' != '" + 0 + "'", int98 == 0);
    }

    @Test
    public void test6332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6332");
        java.nio.charset.Charset charset0 = java.nio.charset.Charset.defaultCharset();
        java.nio.charset.CharsetDecoder charsetDecoder1 = charset0.newDecoder();
        float float2 = charsetDecoder1.maxCharsPerByte();
        java.nio.charset.Charset charset3 = java.nio.charset.Charset.defaultCharset();
        java.nio.charset.CharsetDecoder charsetDecoder4 = charset3.newDecoder();
        java.nio.charset.Charset charset5 = java.nio.charset.Charset.defaultCharset();
        boolean boolean6 = charset3.contains(charset5);
        java.nio.charset.CharsetEncoder charsetEncoder7 = charset3.newEncoder();
        char[] charArray8 = new char[] {};
        java.nio.CharBuffer charBuffer9 = java.nio.CharBuffer.wrap(charArray8);
        java.nio.ByteBuffer byteBuffer10 = charsetEncoder7.encode(charBuffer9);
        char[] charArray17 = new char[] { '#', '/', '4', 'a', '4', 'u' };
        java.nio.CharBuffer charBuffer18 = java.nio.CharBuffer.wrap(charArray17);
        java.nio.charset.CoderResult coderResult20 = charsetDecoder1.decode(byteBuffer10, charBuffer18, false);
        java.nio.ByteBuffer byteBuffer21 = byteBuffer10.asReadOnlyBuffer();
        // The following exception was thrown during execution in test generation
        try {
            char char23 = byteBuffer21.getChar(679);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charset0);
        org.junit.Assert.assertNotNull(charsetDecoder1);
        org.junit.Assert.assertTrue("'" + float2 + "' != '" + 1.0f + "'", float2 == 1.0f);
        org.junit.Assert.assertNotNull(charset3);
        org.junit.Assert.assertNotNull(charsetDecoder4);
        org.junit.Assert.assertNotNull(charset5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(charsetEncoder7);
        org.junit.Assert.assertNotNull(charArray8);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray8), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray8), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray8), "[]");
        org.junit.Assert.assertNotNull(charBuffer9);
        org.junit.Assert.assertNotNull(byteBuffer10);
        org.junit.Assert.assertNotNull(charArray17);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray17), "#/4a4u");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray17), "#/4a4u");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray17), "[#, /, 4, a, 4, u]");
        org.junit.Assert.assertNotNull(charBuffer18);
        org.junit.Assert.assertNotNull(coderResult20);
        org.junit.Assert.assertNotNull(byteBuffer21);
    }

    @Test
    public void test6333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6333");
        java.util.stream.IntStream intStream1 = java.util.stream.IntStream.of(365);
        java.util.stream.LongStream longStream2 = intStream1.asLongStream();
        java.util.stream.LongStream longStream3 = longStream2.parallel();
        java.util.stream.LongStream longStream5 = java.util.stream.LongStream.of(0L);
        java.util.stream.LongStream longStream6 = longStream5.unordered();
        java.util.stream.LongStream longStream7 = java.util.stream.LongStream.concat(longStream3, longStream6);
        java.util.function.LongPredicate longPredicate8 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.LongStream longStream9 = longStream3.filter(longPredicate8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intStream1);
        org.junit.Assert.assertNotNull(longStream2);
        org.junit.Assert.assertNotNull(longStream3);
        org.junit.Assert.assertNotNull(longStream5);
        org.junit.Assert.assertNotNull(longStream6);
        org.junit.Assert.assertNotNull(longStream7);
    }

    @Test
    public void test6334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6334");
        java.time.OffsetTime offsetTime0 = java.time.OffsetTime.MAX;
        java.time.LocalTime localTime1 = offsetTime0.toLocalTime();
        java.lang.String str2 = offsetTime0.toString();
        java.time.Duration duration3 = java.time.Duration.ZERO;
        java.lang.String str4 = duration3.toString();
        java.time.OffsetTime offsetTime5 = offsetTime0.plus((java.time.temporal.TemporalAmount) duration3);
        java.time.OffsetTime offsetTime7 = offsetTime0.plusNanos((long) 0);
        java.time.LocalDate localDate9 = java.time.LocalDate.ofEpochDay((long) ' ');
        java.time.OffsetTime offsetTime10 = java.time.OffsetTime.MAX;
        java.time.LocalTime localTime11 = offsetTime10.toLocalTime();
        java.lang.String str12 = offsetTime10.toString();
        java.time.Duration duration13 = java.time.Duration.ZERO;
        java.lang.String str14 = duration13.toString();
        java.time.OffsetTime offsetTime15 = offsetTime10.plus((java.time.temporal.TemporalAmount) duration13);
        java.time.LocalTime localTime16 = offsetTime10.toLocalTime();
        java.time.chrono.ChronoLocalDateTime<?> wildcardChronoLocalDateTime17 = localDate9.atTime(localTime16);
        java.time.LocalDate localDate19 = localDate9.minusWeeks((long) 2097);
        java.time.OffsetDateTime offsetDateTime20 = offsetTime7.atDate(localDate9);
        java.time.Clock clock21 = java.time.Clock.systemUTC();
        java.time.Duration duration23 = java.time.Duration.ofSeconds((long) 256);
        java.time.Clock clock24 = java.time.Clock.tick(clock21, duration23);
        java.time.OffsetTime offsetTime25 = java.time.OffsetTime.now(clock24);
        java.time.LocalTime localTime26 = java.time.LocalTime.now(clock24);
        java.time.LocalDateTime localDateTime27 = localDate9.atTime(localTime26);
        java.time.chrono.Chronology chronology28 = localDateTime27.getChronology();
        org.junit.Assert.assertNotNull(offsetTime0);
        org.junit.Assert.assertNotNull(localTime1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "23:59:59.999999999-18:00" + "'", str2, "23:59:59.999999999-18:00");
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "PT0S" + "'", str4, "PT0S");
        org.junit.Assert.assertNotNull(offsetTime5);
        org.junit.Assert.assertNotNull(offsetTime7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(offsetTime10);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "23:59:59.999999999-18:00" + "'", str12, "23:59:59.999999999-18:00");
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "PT0S" + "'", str14, "PT0S");
        org.junit.Assert.assertNotNull(offsetTime15);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(wildcardChronoLocalDateTime17);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(offsetDateTime20);
        org.junit.Assert.assertNotNull(clock21);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(clock24);
        org.junit.Assert.assertNotNull(offsetTime25);
        org.junit.Assert.assertNotNull(localTime26);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(chronology28);
    }

    @Test
    public void test6335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6335");
        java.time.LocalDate localDate1 = java.time.LocalDate.ofEpochDay((long) ' ');
        java.time.OffsetTime offsetTime2 = java.time.OffsetTime.MAX;
        java.time.LocalTime localTime3 = offsetTime2.toLocalTime();
        java.lang.String str4 = offsetTime2.toString();
        java.time.Duration duration5 = java.time.Duration.ZERO;
        java.lang.String str6 = duration5.toString();
        java.time.OffsetTime offsetTime7 = offsetTime2.plus((java.time.temporal.TemporalAmount) duration5);
        java.time.LocalTime localTime8 = offsetTime2.toLocalTime();
        java.time.chrono.ChronoLocalDateTime<?> wildcardChronoLocalDateTime9 = localDate1.atTime(localTime8);
        java.time.LocalDate localDate11 = localDate1.plusMonths(0L);
        org.joda.time.Period period12 = org.joda.time.Period.ZERO;
        org.joda.time.Period period13 = period12.normalizedStandard();
        org.joda.time.Period period15 = period12.plusHours(2);
        java.time.chrono.IsoEra isoEra16 = java.time.chrono.IsoEra.CE;
        boolean boolean17 = period15.equals((java.lang.Object) isoEra16);
        java.time.LocalTime localTime22 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime23 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime22);
        java.time.LocalTime localTime28 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime29 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime28);
        java.time.temporal.ChronoField chronoField30 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime32 = localTime28.with((java.time.temporal.TemporalField) chronoField30, (long) (short) 1);
        long long33 = localTime22.getLong((java.time.temporal.TemporalField) chronoField30);
        boolean boolean34 = isoEra16.isSupported((java.time.temporal.TemporalField) chronoField30);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery35 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period36 = isoEra16.query(periodTemporalQuery35);
        boolean boolean37 = period36.isNegative();
        java.time.Period period39 = period36.plusDays((long) ' ');
        boolean boolean40 = period36.isNegative();
        java.time.Period period42 = period36.minusYears((long) 10);
        org.joda.time.Period period43 = org.joda.time.Period.ZERO;
        org.joda.time.Period period44 = period43.normalizedStandard();
        org.joda.time.Period period46 = period43.plusHours(2);
        java.time.chrono.IsoEra isoEra47 = java.time.chrono.IsoEra.CE;
        boolean boolean48 = period46.equals((java.lang.Object) isoEra47);
        java.time.LocalTime localTime53 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime54 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime53);
        java.time.LocalTime localTime59 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime60 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime59);
        java.time.temporal.ChronoField chronoField61 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime63 = localTime59.with((java.time.temporal.TemporalField) chronoField61, (long) (short) 1);
        long long64 = localTime53.getLong((java.time.temporal.TemporalField) chronoField61);
        boolean boolean65 = isoEra47.isSupported((java.time.temporal.TemporalField) chronoField61);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery66 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period67 = isoEra47.query(periodTemporalQuery66);
        java.time.chrono.ChronoPeriod chronoPeriod68 = period42.minus((java.time.temporal.TemporalAmount) period67);
        java.util.List<java.time.temporal.TemporalUnit> temporalUnitList69 = period67.getUnits();
        int int70 = period67.getMonths();
        java.time.chrono.ChronoPeriod chronoPeriod72 = period67.multipliedBy((int) '\uffff');
        java.time.LocalDate localDate73 = localDate1.minus((java.time.temporal.TemporalAmount) period67);
        boolean boolean75 = localDate1.equals((java.lang.Object) "2022-02-21T09:41:20.566Z");
        org.junit.Assert.assertNotNull(localDate1);
        org.junit.Assert.assertNotNull(offsetTime2);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "23:59:59.999999999-18:00" + "'", str4, "23:59:59.999999999-18:00");
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "PT0S" + "'", str6, "PT0S");
        org.junit.Assert.assertNotNull(offsetTime7);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(wildcardChronoLocalDateTime9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertTrue("'" + isoEra16 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra16.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertNotNull(localTime23);
        org.junit.Assert.assertNotNull(localTime28);
        org.junit.Assert.assertNotNull(localTime29);
        org.junit.Assert.assertTrue("'" + chronoField30 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField30.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime32);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 3601000000001L + "'", long33 == 3601000000001L);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(periodTemporalQuery35);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertTrue("'" + isoEra47 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra47.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(localTime53);
        org.junit.Assert.assertNotNull(localTime54);
        org.junit.Assert.assertNotNull(localTime59);
        org.junit.Assert.assertNotNull(localTime60);
        org.junit.Assert.assertTrue("'" + chronoField61 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField61.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime63);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 3601000000001L + "'", long64 == 3601000000001L);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(periodTemporalQuery66);
        org.junit.Assert.assertNotNull(period67);
        org.junit.Assert.assertNotNull(chronoPeriod68);
        org.junit.Assert.assertNotNull(temporalUnitList69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(chronoPeriod72);
        org.junit.Assert.assertNotNull(localDate73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
    }

    @Test
    public void test6336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6336");
        org.joda.time.TimeOfDay timeOfDay1 = org.joda.time.TimeOfDay.fromMillisOfDay((long) (short) 0);
        org.joda.time.TimeOfDay timeOfDay3 = org.joda.time.TimeOfDay.fromMillisOfDay((long) (short) 0);
        org.joda.time.Hours hours4 = org.joda.time.Hours.hoursBetween((org.joda.time.ReadablePartial) timeOfDay1, (org.joda.time.ReadablePartial) timeOfDay3);
        org.joda.time.TimeOfDay timeOfDay6 = timeOfDay1.withSecondOfMinute(0);
        org.joda.time.LocalTime localTime7 = timeOfDay1.toLocalTime();
        org.joda.time.LocalTime localTime9 = localTime7.plusMinutes(1936);
        org.joda.time.LocalTime.Property property10 = localTime7.millisOfDay();
        org.joda.time.LocalTime localTime11 = property10.roundCeilingCopy();
        org.junit.Assert.assertNotNull(timeOfDay1);
        org.junit.Assert.assertNotNull(timeOfDay3);
        org.junit.Assert.assertNotNull(hours4);
        org.junit.Assert.assertNotNull(timeOfDay6);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localTime11);
    }

    @Test
    public void test6337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6337");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.now();
        java.time.LocalDateTime localDateTime2 = localDateTime0.minusYears((long) (byte) 10);
        java.time.LocalDateTime localDateTime3 = java.time.LocalDateTime.now();
        java.time.LocalDateTime localDateTime5 = localDateTime3.minusYears((long) (byte) 10);
        boolean boolean6 = localDateTime0.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime5);
        java.time.LocalDateTime localDateTime7 = java.time.LocalDateTime.now();
        java.time.temporal.ChronoField chronoField8 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime10 = localDateTime7.with((java.time.temporal.TemporalField) chronoField8, (long) 10);
        java.time.LocalDateTime localDateTime12 = localDateTime7.minusMinutes((long) 12);
        boolean boolean13 = localDateTime5.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime7);
        int int14 = localDateTime5.getYear();
        java.time.LocalDateTime localDateTime16 = localDateTime5.minusDays((-4831848L));
        java.time.LocalDateTime localDateTime17 = java.time.LocalDateTime.now();
        java.time.LocalTime localTime22 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime23 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime22);
        java.time.temporal.ChronoField chronoField24 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime26 = localTime22.with((java.time.temporal.TemporalField) chronoField24, (long) (short) 1);
        java.util.Locale locale27 = java.util.Locale.GERMANY;
        java.lang.String str28 = chronoField24.getDisplayName(locale27);
        long long29 = localDateTime17.getLong((java.time.temporal.TemporalField) chronoField24);
        java.time.LocalDateTime localDateTime31 = localDateTime17.plusHours((long) 10);
        boolean boolean32 = localDateTime16.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime31);
        java.time.LocalDateTime localDateTime34 = localDateTime16.minusMinutes((long) 601);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertTrue("'" + chronoField8 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField8.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2012 + "'", int14 == 2012);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertNotNull(localTime23);
        org.junit.Assert.assertTrue("'" + chronoField24 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField24.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime26);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "NanoOfDay" + "'", str28, "NanoOfDay");
// flaky:         org.junit.Assert.assertTrue("'" + long29 + "' != '" + 34978016000000L + "'", long29 == 34978016000000L);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(localDateTime34);
    }

    @Test
    public void test6338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6338");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 3, chronology1);
        org.joda.time.DateTime.Property property3 = dateTime2.dayOfYear();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight((java.lang.Object) dateTime2, chronology4);
        org.joda.time.DateMidnight.Property property6 = dateMidnight5.dayOfMonth();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 3, chronology8);
        org.joda.time.DateTime.Property property10 = dateTime9.dayOfYear();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight((java.lang.Object) dateTime9, chronology11);
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight12.minusMonths((-1));
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight12.withDayOfYear((int) ' ');
        org.joda.time.Weeks weeks17 = org.joda.time.Weeks.weeksBetween((org.joda.time.ReadableInstant) dateMidnight5, (org.joda.time.ReadableInstant) dateMidnight16);
        org.joda.time.DateMidnight.Property property18 = dateMidnight5.year();
        org.joda.time.DateMidnight dateMidnight19 = property18.roundHalfEvenCopy();
        org.joda.time.DurationFieldType durationFieldType20 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight22 = dateMidnight19.withFieldAdded(durationFieldType20, 679);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(weeks17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateMidnight19);
    }

    @Test
    public void test6339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6339");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.withField(dateTimeFieldType2, (int) 'a');
        org.joda.time.Chronology chronology5 = localDateTime1.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            long long10 = chronology5.getDateTimeMillis(20, 580, 999, 736);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 580 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(chronology5);
    }

    @Test
    public void test6340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6340");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.Duration duration2 = new org.joda.time.Duration(readableInstant0, readableInstant1);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = duration2.toPeriodTo(readableInstant3, periodType4);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.Duration duration8 = new org.joda.time.Duration(readableInstant6, readableInstant7);
        long long9 = duration8.getMillis();
        boolean boolean10 = duration2.isShorterThan((org.joda.time.ReadableDuration) duration8);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) 3, chronology12);
        org.joda.time.DateTime.Property property14 = dateTime13.dayOfYear();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight((java.lang.Object) dateTime13, chronology15);
        org.joda.time.MutableDateTime mutableDateTime17 = dateTime13.toMutableDateTime();
        mutableDateTime17.addYears((int) (short) 100);
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime17.dayOfWeek();
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime17.year();
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime17.weekyear();
        boolean boolean23 = duration2.equals((java.lang.Object) mutableDateTime17);
        mutableDateTime17.addMonths((int) ' ');
        mutableDateTime17.add((long) (byte) 10);
        org.joda.time.Period period28 = org.joda.time.Period.ZERO;
        org.joda.time.Period period29 = period28.normalizedStandard();
        org.joda.time.Period period31 = period28.plusHours(2);
        java.time.chrono.IsoEra isoEra32 = java.time.chrono.IsoEra.CE;
        boolean boolean33 = period31.equals((java.lang.Object) isoEra32);
        int int34 = period31.getMinutes();
        mutableDateTime17.add((org.joda.time.ReadablePeriod) period31);
        java.util.TimeZone timeZone37 = null;
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forTimeZone(timeZone37);
        org.joda.time.DateMidnight dateMidnight39 = new org.joda.time.DateMidnight((long) 1970, dateTimeZone38);
        long long42 = dateTimeZone38.convertLocalToUTC((long) 3, false);
        long long45 = dateTimeZone38.convertLocalToUTC(0L, true);
        mutableDateTime17.setZoneRetainFields(dateTimeZone38);
        java.lang.String str47 = dateTimeZone38.toString();
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime((long) 3, chronology49);
        org.joda.time.DateTime.Property property51 = dateTime50.dayOfYear();
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.DateMidnight dateMidnight53 = new org.joda.time.DateMidnight((java.lang.Object) dateTime50, chronology52);
        org.joda.time.MutableDateTime mutableDateTime54 = dateTime50.toMutableDateTime();
        mutableDateTime54.addYears((int) (short) 100);
        org.joda.time.MutableDateTime.Property property57 = mutableDateTime54.dayOfWeek();
        org.joda.time.MutableDateTime.Property property58 = mutableDateTime54.year();
        java.util.TimeZone timeZone59 = null;
        org.joda.time.DateTimeZone dateTimeZone60 = org.joda.time.DateTimeZone.forTimeZone(timeZone59);
        mutableDateTime54.setZone(dateTimeZone60);
        java.util.Locale locale63 = java.util.Locale.TAIWAN;
        java.lang.String str64 = dateTimeZone60.getShortName((long) 64, locale63);
        long long66 = dateTimeZone38.getMillisKeepLocal(dateTimeZone60, (long) 7);
        java.time.LocalTime localTime72 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime73 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime72);
        java.time.temporal.ChronoField chronoField74 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime76 = localTime72.with((java.time.temporal.TemporalField) chronoField74, (long) (short) 1);
        java.util.Locale locale77 = java.util.Locale.GERMANY;
        java.lang.String str78 = chronoField74.getDisplayName(locale77);
        java.lang.String str79 = dateTimeZone60.getShortName((long) 306, locale77);
        java.time.format.DecimalStyle decimalStyle80 = java.time.format.DecimalStyle.of(locale77);
        java.time.format.DecimalStyle decimalStyle82 = decimalStyle80.withDecimalSeparator('\000');
        char char83 = decimalStyle80.getNegativeSign();
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertTrue("'" + isoEra32 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra32.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 3L + "'", long42 == 3L);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Etc/UTC" + "'", str47, "Etc/UTC");
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(mutableDateTime54);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNotNull(dateTimeZone60);
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "+00:00" + "'", str64, "+00:00");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 7L + "'", long66 == 7L);
        org.junit.Assert.assertNotNull(localTime72);
        org.junit.Assert.assertNotNull(localTime73);
        org.junit.Assert.assertTrue("'" + chronoField74 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField74.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime76);
        org.junit.Assert.assertNotNull(locale77);
        org.junit.Assert.assertEquals(locale77.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "NanoOfDay" + "'", str78, "NanoOfDay");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "+00:00" + "'", str79, "+00:00");
        org.junit.Assert.assertNotNull(decimalStyle80);
        org.junit.Assert.assertNotNull(decimalStyle82);
        org.junit.Assert.assertTrue("'" + char83 + "' != '" + '-' + "'", char83 == '-');
    }

    @Test
    public void test6341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6341");
        java.io.File file0 = null;
        java.io.File file2 = new java.io.File(file0, "1970-01-01T00:00:00.003Z");
        java.net.URL uRL3 = file2.toURL();
        java.io.File file4 = null;
        java.io.File file6 = new java.io.File(file4, "1970-01-01T00:00:00.003Z");
        java.net.URL uRL7 = file6.toURL();
        boolean boolean8 = uRL3.sameFile(uRL7);
        java.lang.String str9 = uRL3.getPath();
        java.net.URLConnection uRLConnection10 = uRL3.openConnection();
        java.lang.String str11 = uRLConnection10.getContentType();
        long long14 = uRLConnection10.getHeaderFieldLong("zh-TW", 57L);
        long long17 = uRLConnection10.getHeaderFieldLong("x-windows-iso2022jp", (long) 97);
        uRLConnection10.setDefaultUseCaches(true);
        long long20 = uRLConnection10.getLastModified();
        java.lang.String str22 = uRLConnection10.getHeaderFieldKey(97);
        java.lang.String str23 = uRLConnection10.getContentEncoding();
        org.junit.Assert.assertNull("file2.getParent() == null", file2.getParent());
        org.junit.Assert.assertEquals(file2.toString(), "1970-01-01T00:00:00.003Z");
        org.junit.Assert.assertNotNull(uRL3);
// flaky:         org.junit.Assert.assertEquals(uRL3.toString(), "file:/experiment/1970-01-01T00:00:00.003Z");
        org.junit.Assert.assertNull("file6.getParent() == null", file6.getParent());
        org.junit.Assert.assertEquals(file6.toString(), "1970-01-01T00:00:00.003Z");
        org.junit.Assert.assertNotNull(uRL7);
// flaky:         org.junit.Assert.assertEquals(uRL7.toString(), "file:/experiment/1970-01-01T00:00:00.003Z");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "/experiment/1970-01-01T00:00:00.003Z" + "'", str9, "/experiment/1970-01-01T00:00:00.003Z");
        org.junit.Assert.assertNotNull(uRLConnection10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "content/unknown" + "'", str11, "content/unknown");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 57L + "'", long14 == 57L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 97L + "'", long17 == 97L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNull(str23);
    }

    @Test
    public void test6342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6342");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 3, chronology1);
        org.joda.time.DateTime.Property property3 = dateTime2.dayOfYear();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight((java.lang.Object) dateTime2, chronology4);
        org.joda.time.MutableDateTime mutableDateTime6 = dateTime2.toMutableDateTime();
        mutableDateTime6.addYears((int) (short) 100);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime6.dayOfWeek();
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime6.year();
        java.util.TimeZone timeZone11 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        mutableDateTime6.setZone(dateTimeZone12);
        java.util.TimeZone timeZone14 = dateTimeZone12.toTimeZone();
        int int16 = timeZone14.getOffset((long) (byte) -1);
        java.util.Locale locale19 = new java.util.Locale("PT0S", "2022-02-21T09:34:06.670Z");
        java.util.GregorianCalendar gregorianCalendar20 = new java.util.GregorianCalendar(timeZone14, locale19);
        java.time.ZonedDateTime zonedDateTime21 = gregorianCalendar20.toZonedDateTime();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(timeZone14);
        org.junit.Assert.assertEquals(timeZone14.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertEquals(locale19.toString(), "pt0s_2022-02-21T09:34:06.670Z");
        org.junit.Assert.assertNotNull(zonedDateTime21);
    }

    @Test
    public void test6343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6343");
        java.time.OffsetDateTime offsetDateTime4 = java.time.OffsetDateTime.now();
        java.time.LocalDate localDate5 = offsetDateTime4.toLocalDate();
        java.time.OffsetDateTime offsetDateTime6 = java.time.OffsetDateTime.now();
        java.time.temporal.ChronoField chronoField7 = java.time.temporal.ChronoField.HOUR_OF_DAY;
        boolean boolean8 = offsetDateTime6.isSupported((java.time.temporal.TemporalField) chronoField7);
        boolean boolean9 = offsetDateTime4.isEqual(offsetDateTime6);
        java.time.OffsetDateTime offsetDateTime11 = offsetDateTime6.minusHours(3601000000001L);
        java.util.GregorianCalendar gregorianCalendar17 = new java.util.GregorianCalendar(12, 4096, 7, (-1), (int) (short) 10);
        int int18 = gregorianCalendar17.getWeeksInWeekYear();
        java.lang.String str19 = gregorianCalendar17.getCalendarType();
        java.time.ZonedDateTime zonedDateTime20 = gregorianCalendar17.toZonedDateTime();
        java.time.ZonedDateTime zonedDateTime22 = zonedDateTime20.minusMonths((long) 10);
        java.time.ZonedDateTime zonedDateTime24 = zonedDateTime22.minusHours((long) 9);
        java.time.ZoneOffset zoneOffset25 = zonedDateTime22.getOffset();
        java.time.ZonedDateTime zonedDateTime26 = offsetDateTime6.atZoneSimilarLocal((java.time.ZoneId) zoneOffset25);
        java.time.zone.ZoneRules zoneRules27 = java.time.zone.ZoneRules.of(zoneOffset25);
        java.time.Instant instant28 = java.time.Instant.now();
        java.time.Instant instant29 = java.time.Instant.now();
        boolean boolean30 = instant28.isAfter(instant29);
        java.time.ZoneOffset zoneOffset31 = zoneRules27.getStandardOffset(instant29);
        java.time.ZonedDateTime zonedDateTime32 = java.time.ZonedDateTime.now((java.time.ZoneId) zoneOffset31);
        // The following exception was thrown during execution in test generation
        try {
            java.time.OffsetTime offsetTime33 = java.time.OffsetTime.of(145, 999999999, 2098, (-1299), zoneOffset31);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for HourOfDay (valid values 0 - 23): 145");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(offsetDateTime4);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(offsetDateTime6);
        org.junit.Assert.assertTrue("'" + chronoField7 + "' != '" + java.time.temporal.ChronoField.HOUR_OF_DAY + "'", chronoField7.equals(java.time.temporal.ChronoField.HOUR_OF_DAY));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(offsetDateTime11);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 52 + "'", int18 == 52);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "gregory" + "'", str19, "gregory");
        org.junit.Assert.assertNotNull(zonedDateTime20);
        org.junit.Assert.assertNotNull(zonedDateTime22);
        org.junit.Assert.assertNotNull(zonedDateTime24);
        org.junit.Assert.assertNotNull(zoneOffset25);
        org.junit.Assert.assertNotNull(zonedDateTime26);
        org.junit.Assert.assertNotNull(zoneRules27);
        org.junit.Assert.assertNotNull(instant28);
        org.junit.Assert.assertNotNull(instant29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(zoneOffset31);
        org.junit.Assert.assertNotNull(zonedDateTime32);
    }

    @Test
    public void test6344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6344");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.now();
        java.time.LocalTime localTime1 = localDateTime0.toLocalTime();
        java.time.LocalDateTime localDateTime2 = java.time.LocalDateTime.now();
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery3 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period4 = localDateTime2.query(periodTemporalQuery3);
        java.time.chrono.IsoChronology isoChronology5 = period4.getChronology();
        java.util.GregorianCalendar gregorianCalendar11 = new java.util.GregorianCalendar(12, 4096, 7, (-1), (int) (short) 10);
        int int12 = gregorianCalendar11.getWeeksInWeekYear();
        java.lang.String str13 = gregorianCalendar11.getCalendarType();
        java.time.ZonedDateTime zonedDateTime14 = gregorianCalendar11.toZonedDateTime();
        java.util.GregorianCalendar gregorianCalendar20 = new java.util.GregorianCalendar(12, 4096, 7, (-1), (int) (short) 10);
        int int21 = gregorianCalendar20.getWeeksInWeekYear();
        java.lang.String str22 = gregorianCalendar20.getCalendarType();
        java.time.ZonedDateTime zonedDateTime23 = gregorianCalendar20.toZonedDateTime();
        int int24 = zonedDateTime14.compareTo((java.time.chrono.ChronoZonedDateTime<java.time.LocalDate>) zonedDateTime23);
        java.time.ZonedDateTime zonedDateTime26 = zonedDateTime14.plusDays((long) 2022);
        java.time.Instant instant27 = zonedDateTime14.toInstant();
        java.time.Period period29 = java.time.Period.ofMonths(0);
        java.time.ZonedDateTime zonedDateTime30 = zonedDateTime14.minus((java.time.temporal.TemporalAmount) period29);
        java.time.LocalTime localTime31 = zonedDateTime14.toLocalTime();
        java.time.temporal.ChronoField chronoField32 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        int int33 = zonedDateTime14.get((java.time.temporal.TemporalField) chronoField32);
        java.time.temporal.ValueRange valueRange34 = isoChronology5.range(chronoField32);
        // The following exception was thrown during execution in test generation
        try {
            java.time.LocalTime localTime36 = localTime1.with((java.time.temporal.TemporalField) chronoField32, 3850070400007L);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for AlignedWeekOfYear (valid values 1 - 53): 3850070400007");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localTime1);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(periodTemporalQuery3);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(isoChronology5);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 52 + "'", int12 == 52);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "gregory" + "'", str13, "gregory");
        org.junit.Assert.assertNotNull(zonedDateTime14);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 52 + "'", int21 == 52);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "gregory" + "'", str22, "gregory");
        org.junit.Assert.assertNotNull(zonedDateTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(zonedDateTime26);
        org.junit.Assert.assertNotNull(instant27);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(zonedDateTime30);
        org.junit.Assert.assertNotNull(localTime31);
        org.junit.Assert.assertTrue("'" + chronoField32 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField32.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 19 + "'", int33 == 19);
        org.junit.Assert.assertNotNull(valueRange34);
    }

    @Test
    public void test6345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6345");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withYearOfCentury((int) 'a');
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.plusSeconds(6);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime3.withWeekyear(10);
        org.joda.time.LocalDateTime.Property property8 = localDateTime3.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime10 = property8.addToCopy(3601000000001L);
        int int11 = localDateTime10.getMillisOfSecond();
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.LocalDateTime.Property property13 = localDateTime10.property(dateTimeFieldType12);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime15 = localDateTime10.withDayOfMonth(197);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 197 for dayOfMonth must be in the range [1,30]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime10);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 133 + "'", int11 == 133);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(property13);
    }

    @Test
    public void test6346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6346");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.Duration duration2 = new org.joda.time.Duration(readableInstant0, readableInstant1);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = duration2.toPeriodTo(readableInstant3, periodType4);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.Duration duration8 = new org.joda.time.Duration(readableInstant6, readableInstant7);
        long long9 = duration8.getMillis();
        boolean boolean10 = duration2.isShorterThan((org.joda.time.ReadableDuration) duration8);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) 3, chronology12);
        org.joda.time.DateTime.Property property14 = dateTime13.dayOfYear();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight((java.lang.Object) dateTime13, chronology15);
        org.joda.time.MutableDateTime mutableDateTime17 = dateTime13.toMutableDateTime();
        mutableDateTime17.addYears((int) (short) 100);
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime17.dayOfWeek();
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime17.year();
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime17.weekyear();
        boolean boolean23 = duration2.equals((java.lang.Object) mutableDateTime17);
        mutableDateTime17.addMonths((int) ' ');
        mutableDateTime17.add((long) (byte) 10);
        org.joda.time.Period period28 = org.joda.time.Period.ZERO;
        org.joda.time.Period period29 = period28.normalizedStandard();
        org.joda.time.Period period31 = period28.plusHours(2);
        java.time.chrono.IsoEra isoEra32 = java.time.chrono.IsoEra.CE;
        boolean boolean33 = period31.equals((java.lang.Object) isoEra32);
        int int34 = period31.getMinutes();
        mutableDateTime17.add((org.joda.time.ReadablePeriod) period31);
        java.util.TimeZone timeZone37 = null;
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forTimeZone(timeZone37);
        org.joda.time.DateMidnight dateMidnight39 = new org.joda.time.DateMidnight((long) 1970, dateTimeZone38);
        long long42 = dateTimeZone38.convertLocalToUTC((long) 3, false);
        long long45 = dateTimeZone38.convertLocalToUTC(0L, true);
        mutableDateTime17.setZoneRetainFields(dateTimeZone38);
        java.lang.String str47 = dateTimeZone38.toString();
        org.joda.time.chrono.EthiopicChronology ethiopicChronology48 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone38);
        org.joda.time.DateTimeField dateTimeField49 = ethiopicChronology48.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone50 = ethiopicChronology48.getZone();
        org.joda.time.DateTimeField dateTimeField51 = ethiopicChronology48.era();
        org.joda.time.DateTimeField dateTimeField52 = ethiopicChronology48.secondOfDay();
        org.joda.time.DateTimeField dateTimeField53 = ethiopicChronology48.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField54 = ethiopicChronology48.halfdayOfDay();
        org.joda.time.DurationField durationField55 = ethiopicChronology48.weekyears();
        org.joda.time.DateTimeField dateTimeField56 = ethiopicChronology48.hourOfHalfday();
        org.joda.time.DurationField durationField57 = dateTimeField56.getRangeDurationField();
        long long59 = dateTimeField56.roundHalfCeiling(115430400000L);
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.LocalDateTime localDateTime61 = new org.joda.time.LocalDateTime(chronology60);
        org.joda.time.DateTimeFieldType dateTimeFieldType62 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.LocalDateTime localDateTime64 = localDateTime61.withField(dateTimeFieldType62, (int) 'a');
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.LocalDateTime localDateTime66 = new org.joda.time.LocalDateTime(chronology65);
        org.joda.time.LocalDateTime localDateTime68 = localDateTime66.withYearOfCentury((int) 'a');
        org.joda.time.LocalDateTime localDateTime70 = localDateTime68.plusSeconds(6);
        boolean boolean71 = localDateTime64.isBefore((org.joda.time.ReadablePartial) localDateTime68);
        int int72 = dateTimeField56.getMaximumValue((org.joda.time.ReadablePartial) localDateTime64);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertTrue("'" + isoEra32 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra32.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 3L + "'", long42 == 3L);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Etc/UTC" + "'", str47, "Etc/UTC");
        org.junit.Assert.assertNotNull(ethiopicChronology48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(durationField55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(durationField57);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 115430400000L + "'", long59 == 115430400000L);
        org.junit.Assert.assertNotNull(dateTimeFieldType62);
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertNotNull(localDateTime68);
        org.junit.Assert.assertNotNull(localDateTime70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 11 + "'", int72 == 11);
    }

    @Test
    public void test6347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6347");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withYearOfCentury((int) 'a');
        int int4 = localDateTime3.getDayOfMonth();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime3.plusYears((int) (short) 100);
        int int7 = localDateTime3.getSecondOfMinute();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime(chronology8);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.withYearOfCentury((int) 'a');
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.plusSeconds(6);
        boolean boolean14 = localDateTime3.isEqual((org.joda.time.ReadablePartial) localDateTime11);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.Duration duration17 = new org.joda.time.Duration(readableInstant15, readableInstant16);
        org.joda.time.Seconds seconds18 = duration17.toStandardSeconds();
        int int19 = seconds18.getSeconds();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime3.plus((org.joda.time.ReadablePeriod) seconds18);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.withDayOfMonth(8);
        java.util.Date date23 = localDateTime22.toDate();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 21 + "'", int4 == 21);
        org.junit.Assert.assertNotNull(localDateTime6);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 58 + "'", int7 == 58);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(seconds18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(date23);
// flaky:         org.junit.Assert.assertEquals(date23.toString(), "Fri Feb 08 09:42:59 UTC 2097");
    }

    @Test
    public void test6348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6348");
        java.util.GregorianCalendar gregorianCalendar5 = new java.util.GregorianCalendar(12, 4096, 7, (-1), (int) (short) 10);
        int int6 = gregorianCalendar5.getWeeksInWeekYear();
        org.joda.time.YearMonthDay yearMonthDay7 = org.joda.time.YearMonthDay.fromCalendarFields((java.util.Calendar) gregorianCalendar5);
        org.joda.time.YearMonthDay yearMonthDay9 = yearMonthDay7.withYear(0);
        org.joda.time.Hours hours10 = org.joda.time.Hours.ZERO;
        org.joda.time.YearMonthDay yearMonthDay11 = yearMonthDay9.minus((org.joda.time.ReadablePeriod) hours10);
        org.joda.time.YearMonthDay yearMonthDay13 = yearMonthDay11.withYear(96000000);
        int int14 = yearMonthDay13.getMonthOfYear();
        org.joda.time.LocalDate localDate15 = yearMonthDay13.toLocalDate();
        org.joda.time.YearMonthDay.Property property16 = yearMonthDay13.monthOfYear();
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate();
        org.joda.time.Interval interval18 = localDate17.toInterval();
        int int19 = localDate17.getDayOfYear();
        int int20 = localDate17.getYearOfEra();
        org.joda.time.LocalDate localDate22 = localDate17.withYearOfCentury((int) ':');
        int int23 = localDate22.getMonthOfYear();
        int int24 = yearMonthDay13.compareTo((org.joda.time.ReadablePartial) localDate22);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 52 + "'", int6 == 52);
        org.junit.Assert.assertNotNull(yearMonthDay7);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertNotNull(hours10);
        org.junit.Assert.assertNotNull(yearMonthDay11);
        org.junit.Assert.assertNotNull(yearMonthDay13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 52 + "'", int19 == 52);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2022 + "'", int20 == 2022);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2 + "'", int23 == 2);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
    }

    @Test
    public void test6349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6349");
        java.util.stream.IntStream intStream2 = java.util.stream.IntStream.range(70, (int) '\000');
        org.junit.Assert.assertNotNull(intStream2);
    }

    @Test
    public void test6350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6350");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.Duration duration2 = new org.joda.time.Duration(readableInstant0, readableInstant1);
        long long3 = duration2.getMillis();
        org.joda.time.Duration duration5 = duration2.plus((long) (byte) 1);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) 3, chronology7);
        org.joda.time.DateTime.Property property9 = dateTime8.dayOfYear();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight((java.lang.Object) dateTime8, chronology10);
        org.joda.time.DateMidnight dateMidnight13 = dateMidnight11.minusMonths((-1));
        org.joda.time.DateMidnight dateMidnight15 = dateMidnight11.withDayOfYear((int) ' ');
        org.joda.time.Period period16 = duration5.toPeriodFrom((org.joda.time.ReadableInstant) dateMidnight11);
        org.joda.time.Period period18 = org.joda.time.Period.ZERO;
        org.joda.time.Period period19 = period18.normalizedStandard();
        org.joda.time.Period period21 = period19.minusMinutes((int) ' ');
        org.joda.time.Period period23 = period21.minusMonths((int) (byte) 0);
        org.joda.time.PeriodType periodType24 = period23.getPeriodType();
        org.joda.time.PeriodType periodType25 = periodType24.withHoursRemoved();
        org.joda.time.PeriodType periodType26 = periodType25.withSecondsRemoved();
        org.joda.time.PeriodType periodType27 = periodType26.withMonthsRemoved();
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod(0L, periodType26);
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.Duration duration31 = new org.joda.time.Duration(readableInstant29, readableInstant30);
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.PeriodType periodType33 = null;
        org.joda.time.Period period34 = duration31.toPeriodTo(readableInstant32, periodType33);
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.Duration duration37 = new org.joda.time.Duration(readableInstant35, readableInstant36);
        long long38 = duration37.getMillis();
        boolean boolean39 = duration31.isShorterThan((org.joda.time.ReadableDuration) duration37);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime((long) 3, chronology41);
        org.joda.time.DateTime.Property property43 = dateTime42.dayOfYear();
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.DateMidnight dateMidnight45 = new org.joda.time.DateMidnight((java.lang.Object) dateTime42, chronology44);
        org.joda.time.MutableDateTime mutableDateTime46 = dateTime42.toMutableDateTime();
        mutableDateTime46.addYears((int) (short) 100);
        org.joda.time.MutableDateTime.Property property49 = mutableDateTime46.dayOfWeek();
        org.joda.time.MutableDateTime.Property property50 = mutableDateTime46.year();
        org.joda.time.MutableDateTime.Property property51 = mutableDateTime46.weekyear();
        boolean boolean52 = duration31.equals((java.lang.Object) mutableDateTime46);
        mutableDateTime46.addMonths((int) ' ');
        mutableDateTime46.add((long) (byte) 10);
        org.joda.time.Period period57 = org.joda.time.Period.ZERO;
        org.joda.time.Period period58 = period57.normalizedStandard();
        org.joda.time.Period period60 = period57.plusHours(2);
        java.time.chrono.IsoEra isoEra61 = java.time.chrono.IsoEra.CE;
        boolean boolean62 = period60.equals((java.lang.Object) isoEra61);
        int int63 = period60.getMinutes();
        mutableDateTime46.add((org.joda.time.ReadablePeriod) period60);
        java.util.TimeZone timeZone66 = null;
        org.joda.time.DateTimeZone dateTimeZone67 = org.joda.time.DateTimeZone.forTimeZone(timeZone66);
        org.joda.time.DateMidnight dateMidnight68 = new org.joda.time.DateMidnight((long) 1970, dateTimeZone67);
        long long71 = dateTimeZone67.convertLocalToUTC((long) 3, false);
        long long74 = dateTimeZone67.convertLocalToUTC(0L, true);
        mutableDateTime46.setZoneRetainFields(dateTimeZone67);
        java.lang.String str76 = dateTimeZone67.toString();
        org.joda.time.chrono.EthiopicChronology ethiopicChronology77 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone67);
        org.joda.time.DateTimeField dateTimeField78 = ethiopicChronology77.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone79 = ethiopicChronology77.getZone();
        org.joda.time.DateTimeField dateTimeField80 = ethiopicChronology77.era();
        org.joda.time.DateTimeField dateTimeField81 = ethiopicChronology77.secondOfDay();
        org.joda.time.DateTimeField dateTimeField82 = ethiopicChronology77.minuteOfHour();
        org.joda.time.DurationField durationField83 = ethiopicChronology77.months();
        org.joda.time.DateTimeField dateTimeField84 = ethiopicChronology77.weekyearOfCentury();
        org.joda.time.Period period85 = duration5.toPeriod(periodType26, (org.joda.time.Chronology) ethiopicChronology77);
        int int86 = ethiopicChronology77.getMinimumDaysInFirstWeek();
        // The following exception was thrown during execution in test generation
        try {
            long long91 = ethiopicChronology77.getDateTimeMillis(9, 22, 22, (int) 'u');
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 22 for monthOfYear must be in the range [1,13]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(periodType24);
        org.junit.Assert.assertNotNull(periodType25);
        org.junit.Assert.assertNotNull(periodType26);
        org.junit.Assert.assertNotNull(periodType27);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(mutableDateTime46);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(period57);
        org.junit.Assert.assertNotNull(period58);
        org.junit.Assert.assertNotNull(period60);
        org.junit.Assert.assertTrue("'" + isoEra61 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra61.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone67);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 3L + "'", long71 == 3L);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 0L + "'", long74 == 0L);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "Etc/UTC" + "'", str76, "Etc/UTC");
        org.junit.Assert.assertNotNull(ethiopicChronology77);
        org.junit.Assert.assertNotNull(dateTimeField78);
        org.junit.Assert.assertNotNull(dateTimeZone79);
        org.junit.Assert.assertNotNull(dateTimeField80);
        org.junit.Assert.assertNotNull(dateTimeField81);
        org.junit.Assert.assertNotNull(dateTimeField82);
        org.junit.Assert.assertNotNull(durationField83);
        org.junit.Assert.assertNotNull(dateTimeField84);
        org.junit.Assert.assertNotNull(period85);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 4 + "'", int86 == 4);
    }

    @Test
    public void test6351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6351");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime3 = property2.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime4 = property2.withMinimumValue();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime(chronology5);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.withYearOfCentury((int) 'a');
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.plusSeconds(6);
        org.joda.time.DateTime dateTime11 = localDateTime8.toDateTime();
        boolean boolean12 = localDateTime4.isEqual((org.joda.time.ReadablePartial) localDateTime8);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int14 = localDateTime4.get(dateTimeFieldType13);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The DateTimeFieldType must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test6352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6352");
        java.security.GeneralSecurityException generalSecurityException4 = new java.security.GeneralSecurityException("NanoOfDay");
        java.security.cert.CertificateException certificateException5 = new java.security.cert.CertificateException("January", (java.lang.Throwable) generalSecurityException4);
        java.io.IOException iOException6 = new java.io.IOException("19", (java.lang.Throwable) generalSecurityException4);
        java.security.KeyException keyException7 = new java.security.KeyException("IntSummaryStatistics{count=1, sum=57, min=57, average=57.000000, max=57}", (java.lang.Throwable) iOException6);
    }

    @Test
    public void test6353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6353");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((long) 0, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) 3, chronology4);
        org.joda.time.DateTime.Property property6 = dateTime5.dayOfYear();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateMidnight dateMidnight8 = new org.joda.time.DateMidnight((java.lang.Object) dateTime5, chronology7);
        org.joda.time.DateTime dateTime9 = localTime2.toDateTime((org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.LocalTime localTime11 = localTime2.plusHours(3);
        int int12 = localTime11.getMillisOfDay();
        org.joda.time.LocalTime.Property property13 = localTime11.millisOfDay();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.LocalTime localTime16 = new org.joda.time.LocalTime((long) 0, chronology15);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) 3, chronology18);
        org.joda.time.DateTime.Property property20 = dateTime19.dayOfYear();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight((java.lang.Object) dateTime19, chronology21);
        org.joda.time.DateTime dateTime23 = localTime16.toDateTime((org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.LocalTime localTime25 = localTime16.plusHours(3);
        int int26 = localTime25.getMillisOfDay();
        org.joda.time.LocalTime.Property property27 = localTime25.millisOfSecond();
        org.joda.time.LocalTime localTime29 = localTime25.plusSeconds(19);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.LocalTime localTime32 = new org.joda.time.LocalTime((long) 0, chronology31);
        org.joda.time.Chronology chronology33 = localTime32.getChronology();
        org.joda.time.DateTimeField dateTimeField34 = chronology33.weekyearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime35 = org.joda.time.MutableDateTime.now(chronology33);
        org.joda.time.DateTimeField dateTimeField36 = chronology33.hourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = dateTimeField36.getType();
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.LocalTime localTime40 = new org.joda.time.LocalTime((long) 0, chronology39);
        org.joda.time.Chronology chronology41 = localTime40.getChronology();
        org.joda.time.DateTimeField dateTimeField42 = chronology41.weekyearOfCentury();
        org.joda.time.DurationField durationField43 = chronology41.weekyears();
        org.joda.time.DurationField durationField44 = chronology41.seconds();
        org.joda.time.Chronology chronology45 = chronology41.withUTC();
        boolean boolean46 = dateTimeFieldType37.isSupported(chronology45);
        boolean boolean47 = localTime29.isSupported(dateTimeFieldType37);
        org.joda.time.LocalTime.Property property48 = localTime11.property(dateTimeFieldType37);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 10800000 + "'", int12 == 10800000);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(localTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10800000 + "'", int26 == 10800000);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(localTime29);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(mutableDateTime35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(durationField43);
        org.junit.Assert.assertNotNull(durationField44);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(property48);
    }

    @Test
    public void test6354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6354");
        java.util.stream.IntStream intStream2 = java.util.stream.IntStream.rangeClosed(100, (int) '4');
        java.util.stream.IntStream intStream3 = intStream2.sequential();
        java.util.function.IntUnaryOperator intUnaryOperator4 = java.util.function.IntUnaryOperator.identity();
        java.util.stream.IntStream intStream5 = intStream2.map(intUnaryOperator4);
        java.util.OptionalInt optionalInt6 = intStream5.findAny();
        java.util.LongSummaryStatistics longSummaryStatistics7 = new java.util.LongSummaryStatistics();
        longSummaryStatistics7.accept(3);
        long long10 = longSummaryStatistics7.getMax();
        java.util.LongSummaryStatistics longSummaryStatistics11 = new java.util.LongSummaryStatistics();
        longSummaryStatistics11.accept(3);
        java.util.function.LongConsumer longConsumer14 = longSummaryStatistics7.andThen((java.util.function.LongConsumer) longSummaryStatistics11);
        java.util.LongSummaryStatistics longSummaryStatistics15 = new java.util.LongSummaryStatistics();
        longSummaryStatistics15.accept(3);
        long long18 = longSummaryStatistics15.getMax();
        double double19 = longSummaryStatistics15.getAverage();
        longSummaryStatistics15.accept(6);
        java.util.function.LongConsumer longConsumer22 = longSummaryStatistics7.andThen((java.util.function.LongConsumer) longSummaryStatistics15);
        java.util.stream.IntStream intStream25 = java.util.stream.IntStream.rangeClosed(100, (int) '4');
        java.util.IntSummaryStatistics intSummaryStatistics26 = new java.util.IntSummaryStatistics();
        intStream25.forEach((java.util.function.IntConsumer) intSummaryStatistics26);
        java.util.IntSummaryStatistics intSummaryStatistics28 = new java.util.IntSummaryStatistics();
        intSummaryStatistics28.accept(57);
        intSummaryStatistics26.combine(intSummaryStatistics28);
        java.util.function.IntConsumer intConsumer32 = longSummaryStatistics15.andThen((java.util.function.IntConsumer) intSummaryStatistics26);
        long long33 = intSummaryStatistics26.getCount();
        optionalInt6.ifPresent((java.util.function.IntConsumer) intSummaryStatistics26);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime(chronology35);
        org.joda.time.LocalDateTime.Property property37 = localDateTime36.yearOfCentury();
        int int38 = property37.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime40 = property37.addToCopy((long) (-1));
        boolean boolean41 = optionalInt6.equals((java.lang.Object) property37);
        java.lang.String str42 = optionalInt6.toString();
        boolean boolean43 = optionalInt6.isPresent();
        org.junit.Assert.assertNotNull(intStream2);
        org.junit.Assert.assertNotNull(intStream3);
        org.junit.Assert.assertNotNull(intUnaryOperator4);
        org.junit.Assert.assertNotNull(intStream5);
        org.junit.Assert.assertNotNull(optionalInt6);
        org.junit.Assert.assertEquals(longSummaryStatistics7.toString(), "LongSummaryStatistics{count=1, sum=3, min=3, average=3.000000, max=3}");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 3L + "'", long10 == 3L);
        org.junit.Assert.assertEquals(longSummaryStatistics11.toString(), "LongSummaryStatistics{count=1, sum=3, min=3, average=3.000000, max=3}");
        org.junit.Assert.assertNotNull(longConsumer14);
        org.junit.Assert.assertEquals(longSummaryStatistics15.toString(), "LongSummaryStatistics{count=2, sum=9, min=3, average=4.500000, max=6}");
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 3L + "'", long18 == 3L);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 3.0d + "'", double19 == 3.0d);
        org.junit.Assert.assertNotNull(longConsumer22);
        org.junit.Assert.assertNotNull(intStream25);
        org.junit.Assert.assertEquals(intSummaryStatistics26.toString(), "IntSummaryStatistics{count=1, sum=57, min=57, average=57.000000, max=57}");
        org.junit.Assert.assertEquals(intSummaryStatistics28.toString(), "IntSummaryStatistics{count=1, sum=57, min=57, average=57.000000, max=57}");
        org.junit.Assert.assertNotNull(intConsumer32);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 1L + "'", long33 == 1L);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 99 + "'", int38 == 99);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "OptionalInt.empty" + "'", str42, "OptionalInt.empty");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
    }

    @Test
    public void test6355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6355");
        java.util.stream.IntStream intStream2 = java.util.stream.IntStream.range(0, 10);
        int[] intArray3 = intStream2.toArray();
        java.nio.IntBuffer intBuffer4 = java.nio.IntBuffer.wrap(intArray3);
        org.junit.Assert.assertNotNull(intStream2);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]");
        org.junit.Assert.assertNotNull(intBuffer4);
    }

    @Test
    public void test6356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6356");
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.ofHoursMinutes(1, 10);
        java.time.LocalDate localDate3 = java.time.LocalDate.now((java.time.ZoneId) zoneOffset2);
        java.time.Clock clock4 = java.time.Clock.system((java.time.ZoneId) zoneOffset2);
        java.time.Duration duration6 = java.time.Duration.ofSeconds((long) 0);
        java.time.Duration duration8 = duration6.multipliedBy((long) (byte) -1);
        java.time.Clock clock9 = java.time.Clock.offset(clock4, duration6);
        java.time.ZonedDateTime zonedDateTime10 = java.time.ZonedDateTime.now(clock9);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(clock4);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(clock9);
        org.junit.Assert.assertNotNull(zonedDateTime10);
    }

    @Test
    public void test6357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6357");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.LocalTime localTime4 = new org.joda.time.LocalTime((long) 0, chronology3);
        org.joda.time.Chronology chronology5 = localTime4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.weekyearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime7 = org.joda.time.MutableDateTime.now(chronology5);
        org.joda.time.DateTimeField dateTimeField8 = chronology5.monthOfYear();
        java.util.Locale locale9 = java.util.Locale.getDefault();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket((long) 28, chronology5, locale9, (java.lang.Integer) 0);
        java.util.Locale locale12 = java.util.Locale.ITALY;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket13 = new org.joda.time.format.DateTimeParserBucket(11724424192L, chronology5, locale12);
        dateTimeParserBucket13.setPivotYear((java.lang.Integer) 56);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(locale9);
// flaky:         org.junit.Assert.assertEquals(locale9.toString(), "");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "it_IT");
    }

    @Test
    public void test6358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6358");
        java.lang.Exception exception0 = null;
        java.security.PrivilegedActionException privilegedActionException1 = new java.security.PrivilegedActionException(exception0);
    }

    @Test
    public void test6359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6359");
        org.joda.time.Weeks weeks0 = org.joda.time.Weeks.THREE;
        org.joda.time.Weeks weeks1 = org.joda.time.Weeks.ONE;
        java.util.concurrent.TimeUnit timeUnit2 = java.util.concurrent.TimeUnit.NANOSECONDS;
        boolean boolean3 = weeks1.equals((java.lang.Object) timeUnit2);
        org.joda.time.MutablePeriod mutablePeriod4 = weeks1.toMutablePeriod();
        boolean boolean5 = weeks0.isGreaterThan(weeks1);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.Duration duration8 = new org.joda.time.Duration(readableInstant6, readableInstant7);
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.PeriodType periodType10 = null;
        org.joda.time.Period period11 = duration8.toPeriodTo(readableInstant9, periodType10);
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.Duration duration14 = new org.joda.time.Duration(readableInstant12, readableInstant13);
        long long15 = duration14.getMillis();
        boolean boolean16 = duration8.isShorterThan((org.joda.time.ReadableDuration) duration14);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) 3, chronology18);
        org.joda.time.DateTime.Property property20 = dateTime19.dayOfYear();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight((java.lang.Object) dateTime19, chronology21);
        org.joda.time.MutableDateTime mutableDateTime23 = dateTime19.toMutableDateTime();
        mutableDateTime23.addYears((int) (short) 100);
        org.joda.time.MutableDateTime.Property property26 = mutableDateTime23.dayOfWeek();
        org.joda.time.MutableDateTime.Property property27 = mutableDateTime23.year();
        org.joda.time.MutableDateTime.Property property28 = mutableDateTime23.weekyear();
        boolean boolean29 = duration8.equals((java.lang.Object) mutableDateTime23);
        mutableDateTime23.addMonths((int) ' ');
        mutableDateTime23.add((long) (byte) 10);
        org.joda.time.Period period34 = org.joda.time.Period.ZERO;
        org.joda.time.Period period35 = period34.normalizedStandard();
        org.joda.time.Period period37 = period34.plusHours(2);
        java.time.chrono.IsoEra isoEra38 = java.time.chrono.IsoEra.CE;
        boolean boolean39 = period37.equals((java.lang.Object) isoEra38);
        int int40 = period37.getMinutes();
        mutableDateTime23.add((org.joda.time.ReadablePeriod) period37);
        java.util.TimeZone timeZone43 = null;
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forTimeZone(timeZone43);
        org.joda.time.DateMidnight dateMidnight45 = new org.joda.time.DateMidnight((long) 1970, dateTimeZone44);
        long long48 = dateTimeZone44.convertLocalToUTC((long) 3, false);
        long long51 = dateTimeZone44.convertLocalToUTC(0L, true);
        mutableDateTime23.setZoneRetainFields(dateTimeZone44);
        org.joda.time.Interval interval53 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) weeks0, (org.joda.time.ReadableInstant) mutableDateTime23);
        org.joda.time.Interval interval54 = interval53.toInterval();
        org.junit.Assert.assertNotNull(weeks0);
        org.junit.Assert.assertNotNull(weeks1);
        org.junit.Assert.assertNotNull(timeUnit2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(mutablePeriod4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(mutableDateTime23);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertTrue("'" + isoEra38 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra38.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 3L + "'", long48 == 3L);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 0L + "'", long51 == 0L);
        org.junit.Assert.assertNotNull(interval54);
    }

    @Test
    public void test6360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6360");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes2 = minutes0.minus(12);
        org.joda.time.Minutes minutes3 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes5 = minutes3.minus(12);
        org.joda.time.Minutes minutes6 = minutes0.minus(minutes3);
        org.joda.time.Minutes minutes7 = minutes3.negated();
        org.joda.time.Minutes minutes8 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes10 = minutes8.minus(12);
        java.lang.String str11 = minutes8.toString();
        org.joda.time.Minutes minutes12 = minutes8.negated();
        java.lang.String str13 = minutes8.toString();
        boolean boolean14 = minutes7.isLessThan(minutes8);
        org.joda.time.DurationFieldType durationFieldType15 = minutes7.getFieldType();
        org.joda.time.Minutes minutes17 = minutes7.dividedBy(35);
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(minutes3);
        org.junit.Assert.assertNotNull(minutes5);
        org.junit.Assert.assertNotNull(minutes6);
        org.junit.Assert.assertNotNull(minutes7);
        org.junit.Assert.assertNotNull(minutes8);
        org.junit.Assert.assertNotNull(minutes10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "PT2147483647M" + "'", str11, "PT2147483647M");
        org.junit.Assert.assertNotNull(minutes12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "PT2147483647M" + "'", str13, "PT2147483647M");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(durationFieldType15);
        org.junit.Assert.assertNotNull(minutes17);
    }

    @Test
    public void test6361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6361");
        java.time.Duration duration0 = java.time.Duration.ZERO;
        java.time.LocalTime localTime5 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime6 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime5);
        java.time.temporal.ChronoField chronoField7 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime9 = localTime5.with((java.time.temporal.TemporalField) chronoField7, (long) (short) 1);
        java.time.Duration duration11 = java.time.Duration.ofMinutes((long) 3);
        java.time.LocalTime localTime12 = localTime5.minus((java.time.temporal.TemporalAmount) duration11);
        java.time.temporal.Temporal temporal13 = duration0.subtractFrom((java.time.temporal.Temporal) localTime12);
        java.util.Properties properties15 = null;
        java.util.Properties properties16 = new java.util.Properties(properties15);
        java.time.LocalTime localTime21 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime22 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime21);
        java.time.LocalTime localTime27 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime28 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime27);
        java.time.temporal.ChronoField chronoField29 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime31 = localTime27.with((java.time.temporal.TemporalField) chronoField29, (long) (short) 1);
        long long32 = localTime21.getLong((java.time.temporal.TemporalField) chronoField29);
        java.time.LocalTime localTime34 = localTime21.withSecond((int) (short) 1);
        java.lang.Object obj36 = properties16.put((java.lang.Object) localTime34, (java.lang.Object) "117");
        java.time.LocalDateTime localDateTime37 = java.time.LocalDateTime.MIN;
        java.time.Month month38 = java.time.Month.NOVEMBER;
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime39 = localDateTime37.with((java.time.temporal.TemporalAdjuster) month38);
        java.time.LocalDate localDate42 = java.time.LocalDate.ofEpochDay((long) ' ');
        int int43 = localDate42.getMonthValue();
        org.joda.time.Period period44 = org.joda.time.Period.ZERO;
        org.joda.time.Period period45 = period44.normalizedStandard();
        org.joda.time.Period period47 = period44.plusHours(2);
        java.time.chrono.IsoEra isoEra48 = java.time.chrono.IsoEra.CE;
        boolean boolean49 = period47.equals((java.lang.Object) isoEra48);
        java.time.LocalTime localTime54 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime55 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime54);
        java.time.LocalTime localTime60 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime61 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime60);
        java.time.temporal.ChronoField chronoField62 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime64 = localTime60.with((java.time.temporal.TemporalField) chronoField62, (long) (short) 1);
        long long65 = localTime54.getLong((java.time.temporal.TemporalField) chronoField62);
        boolean boolean66 = isoEra48.isSupported((java.time.temporal.TemporalField) chronoField62);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery67 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period68 = isoEra48.query(periodTemporalQuery67);
        boolean boolean69 = period68.isNegative();
        java.time.Period period71 = period68.plusDays((long) ' ');
        java.time.temporal.ChronoField chronoField72 = java.time.temporal.ChronoField.SECOND_OF_DAY;
        boolean boolean73 = period68.equals((java.lang.Object) chronoField72);
        boolean boolean74 = localDate42.isSupported((java.time.temporal.TemporalField) chronoField72);
        java.time.temporal.TemporalUnit temporalUnit75 = chronoField72.getRangeUnit();
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime76 = localDateChronoLocalDateTime39.plus(1L, temporalUnit75);
        java.time.LocalTime localTime77 = localTime34.truncatedTo(temporalUnit75);
        java.time.Duration duration78 = duration0.plus((long) 256, temporalUnit75);
        org.junit.Assert.assertNotNull(duration0);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertTrue("'" + chronoField7 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField7.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(temporal13);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertNotNull(localTime27);
        org.junit.Assert.assertNotNull(localTime28);
        org.junit.Assert.assertTrue("'" + chronoField29 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField29.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime31);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 3601000000001L + "'", long32 == 3601000000001L);
        org.junit.Assert.assertNotNull(localTime34);
        org.junit.Assert.assertNull(obj36);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertTrue("'" + month38 + "' != '" + java.time.Month.NOVEMBER + "'", month38.equals(java.time.Month.NOVEMBER));
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime39);
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertNotNull(period47);
        org.junit.Assert.assertTrue("'" + isoEra48 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra48.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(localTime54);
        org.junit.Assert.assertNotNull(localTime55);
        org.junit.Assert.assertNotNull(localTime60);
        org.junit.Assert.assertNotNull(localTime61);
        org.junit.Assert.assertTrue("'" + chronoField62 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField62.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime64);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 3601000000001L + "'", long65 == 3601000000001L);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(periodTemporalQuery67);
        org.junit.Assert.assertNotNull(period68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(period71);
        org.junit.Assert.assertTrue("'" + chronoField72 + "' != '" + java.time.temporal.ChronoField.SECOND_OF_DAY + "'", chronoField72.equals(java.time.temporal.ChronoField.SECOND_OF_DAY));
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + temporalUnit75 + "' != '" + java.time.temporal.ChronoUnit.DAYS + "'", temporalUnit75.equals(java.time.temporal.ChronoUnit.DAYS));
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime76);
        org.junit.Assert.assertNotNull(localTime77);
        org.junit.Assert.assertNotNull(duration78);
    }

    @Test
    public void test6362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6362");
        short[] shortArray2 = new short[] { (short) 1, (byte) 10 };
        java.nio.ShortBuffer shortBuffer3 = java.nio.ShortBuffer.wrap(shortArray2);
        short[] shortArray6 = new short[] { (short) 1, (byte) 10 };
        java.nio.ShortBuffer shortBuffer7 = java.nio.ShortBuffer.wrap(shortArray6);
        java.nio.ShortBuffer shortBuffer8 = shortBuffer3.put(shortBuffer7);
        int int9 = shortBuffer8.limit();
        java.nio.Buffer buffer10 = shortBuffer8.clear();
        java.nio.ShortBuffer shortBuffer12 = shortBuffer8.put((short) (byte) 100);
        short[] shortArray15 = new short[] { (short) 1, (byte) 10 };
        java.nio.ShortBuffer shortBuffer16 = java.nio.ShortBuffer.wrap(shortArray15);
        short[] shortArray19 = new short[] { (short) 1, (byte) 10 };
        java.nio.ShortBuffer shortBuffer20 = java.nio.ShortBuffer.wrap(shortArray19);
        java.nio.ShortBuffer shortBuffer21 = shortBuffer16.put(shortBuffer20);
        java.nio.ShortBuffer shortBuffer22 = shortBuffer8.put(shortBuffer21);
        boolean boolean23 = shortBuffer8.hasArray();
        boolean boolean24 = shortBuffer8.hasRemaining();
        org.junit.Assert.assertNotNull(shortArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray2), "[100, 10]");
        org.junit.Assert.assertNotNull(shortBuffer3);
        org.junit.Assert.assertNotNull(shortArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray6), "[1, 10]");
        org.junit.Assert.assertNotNull(shortBuffer7);
        org.junit.Assert.assertNotNull(shortBuffer8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2 + "'", int9 == 2);
        org.junit.Assert.assertNotNull(buffer10);
        org.junit.Assert.assertNotNull(shortBuffer12);
        org.junit.Assert.assertNotNull(shortArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray15), "[1, 10]");
        org.junit.Assert.assertNotNull(shortBuffer16);
        org.junit.Assert.assertNotNull(shortArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray19), "[1, 10]");
        org.junit.Assert.assertNotNull(shortBuffer20);
        org.junit.Assert.assertNotNull(shortBuffer21);
        org.junit.Assert.assertNotNull(shortBuffer22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
    }

    @Test
    public void test6363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6363");
        java.net.InetAddress inetAddress0 = java.net.InetAddress.getLocalHost();
        java.lang.String str1 = inetAddress0.toString();
        java.net.NetworkInterface networkInterface2 = java.net.NetworkInterface.getByInetAddress(inetAddress0);
        java.util.List<java.net.InterfaceAddress> interfaceAddressList3 = networkInterface2.getInterfaceAddresses();
        boolean boolean4 = networkInterface2.supportsMulticast();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((long) 3, chronology6);
        org.joda.time.DateTime.Property property8 = dateTime7.dayOfYear();
        org.joda.time.DateTime dateTime9 = property8.roundHalfCeilingCopy();
        int int10 = dateTime9.getMillisOfDay();
        boolean boolean11 = networkInterface2.equals((java.lang.Object) dateTime9);
        boolean boolean12 = networkInterface2.isVirtual();
        boolean boolean13 = networkInterface2.isUp();
        org.junit.Assert.assertNotNull(inetAddress0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "599b081c1808/172.17.0.2" + "'", str1, "599b081c1808/172.17.0.2");
        org.junit.Assert.assertNotNull(networkInterface2);
        org.junit.Assert.assertNotNull(interfaceAddressList3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test6364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6364");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.now();
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery1 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period2 = localDateTime0.query(periodTemporalQuery1);
        java.time.chrono.IsoChronology isoChronology3 = period2.getChronology();
        java.time.Clock clock4 = java.time.Clock.systemUTC();
        java.time.Duration duration6 = java.time.Duration.ofSeconds((long) 256);
        java.time.Clock clock7 = java.time.Clock.tick(clock4, duration6);
        java.time.Duration duration9 = java.time.Duration.ofMinutes((long) 3);
        java.time.Duration duration10 = duration9.abs();
        java.time.Clock clock11 = java.time.Clock.offset(clock4, duration9);
        java.time.LocalDate localDate12 = java.time.LocalDate.now(clock11);
        java.time.LocalDate localDate13 = isoChronology3.dateNow(clock11);
        org.joda.time.Period period14 = org.joda.time.Period.ZERO;
        org.joda.time.Period period15 = period14.normalizedStandard();
        org.joda.time.Period period17 = period14.plusHours(2);
        java.time.chrono.IsoEra isoEra18 = java.time.chrono.IsoEra.CE;
        boolean boolean19 = period17.equals((java.lang.Object) isoEra18);
        java.time.LocalTime localTime24 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime25 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime24);
        java.time.LocalTime localTime30 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime31 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime30);
        java.time.temporal.ChronoField chronoField32 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime34 = localTime30.with((java.time.temporal.TemporalField) chronoField32, (long) (short) 1);
        long long35 = localTime24.getLong((java.time.temporal.TemporalField) chronoField32);
        boolean boolean36 = isoEra18.isSupported((java.time.temporal.TemporalField) chronoField32);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery37 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period38 = isoEra18.query(periodTemporalQuery37);
        boolean boolean39 = period38.isNegative();
        java.time.Period period41 = period38.plusDays((long) ' ');
        boolean boolean42 = period38.isNegative();
        java.time.Period period44 = period38.minusYears((long) 10);
        org.joda.time.Period period45 = org.joda.time.Period.ZERO;
        org.joda.time.Period period46 = period45.normalizedStandard();
        org.joda.time.Period period48 = period45.plusHours(2);
        java.time.chrono.IsoEra isoEra49 = java.time.chrono.IsoEra.CE;
        boolean boolean50 = period48.equals((java.lang.Object) isoEra49);
        java.time.LocalTime localTime55 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime56 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime55);
        java.time.LocalTime localTime61 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime62 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime61);
        java.time.temporal.ChronoField chronoField63 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime65 = localTime61.with((java.time.temporal.TemporalField) chronoField63, (long) (short) 1);
        long long66 = localTime55.getLong((java.time.temporal.TemporalField) chronoField63);
        boolean boolean67 = isoEra49.isSupported((java.time.temporal.TemporalField) chronoField63);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery68 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period69 = isoEra49.query(periodTemporalQuery68);
        java.time.chrono.ChronoPeriod chronoPeriod70 = period44.minus((java.time.temporal.TemporalAmount) period69);
        java.time.chrono.ChronoPeriod chronoPeriod72 = period44.multipliedBy(4096);
        int int73 = period44.getMonths();
        java.time.chrono.IsoChronology isoChronology74 = period44.getChronology();
        java.time.ZoneOffset zoneOffset77 = java.time.ZoneOffset.ofHoursMinutes(1, 10);
        java.time.LocalDate localDate78 = java.time.LocalDate.now((java.time.ZoneId) zoneOffset77);
        java.time.Clock clock79 = java.time.Clock.system((java.time.ZoneId) zoneOffset77);
        java.time.Duration duration81 = java.time.Duration.ofSeconds((long) 0);
        java.time.Duration duration83 = duration81.multipliedBy((long) (byte) -1);
        java.time.Clock clock84 = java.time.Clock.offset(clock79, duration81);
        java.time.chrono.ChronoLocalDate chronoLocalDate85 = isoChronology74.dateNow(clock79);
        java.time.LocalDate localDate86 = isoChronology3.dateNow(clock79);
        java.time.LocalDate localDate87 = isoChronology3.dateNow();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(periodTemporalQuery1);
        org.junit.Assert.assertNotNull(period2);
        org.junit.Assert.assertNotNull(isoChronology3);
        org.junit.Assert.assertNotNull(clock4);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(clock7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(clock11);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertTrue("'" + isoEra18 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra18.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(localTime24);
        org.junit.Assert.assertNotNull(localTime25);
        org.junit.Assert.assertNotNull(localTime30);
        org.junit.Assert.assertNotNull(localTime31);
        org.junit.Assert.assertTrue("'" + chronoField32 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField32.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime34);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 3601000000001L + "'", long35 == 3601000000001L);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(periodTemporalQuery37);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertNotNull(period48);
        org.junit.Assert.assertTrue("'" + isoEra49 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra49.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(localTime55);
        org.junit.Assert.assertNotNull(localTime56);
        org.junit.Assert.assertNotNull(localTime61);
        org.junit.Assert.assertNotNull(localTime62);
        org.junit.Assert.assertTrue("'" + chronoField63 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField63.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime65);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 3601000000001L + "'", long66 == 3601000000001L);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(periodTemporalQuery68);
        org.junit.Assert.assertNotNull(period69);
        org.junit.Assert.assertNotNull(chronoPeriod70);
        org.junit.Assert.assertNotNull(chronoPeriod72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertNotNull(isoChronology74);
        org.junit.Assert.assertNotNull(zoneOffset77);
        org.junit.Assert.assertNotNull(localDate78);
        org.junit.Assert.assertNotNull(clock79);
        org.junit.Assert.assertNotNull(duration81);
        org.junit.Assert.assertNotNull(duration83);
        org.junit.Assert.assertNotNull(clock84);
        org.junit.Assert.assertNotNull(chronoLocalDate85);
        org.junit.Assert.assertNotNull(localDate86);
        org.junit.Assert.assertNotNull(localDate87);
    }

    @Test
    public void test6365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6365");
        java.time.OffsetTime offsetTime0 = java.time.OffsetTime.MAX;
        java.time.LocalTime localTime1 = offsetTime0.toLocalTime();
        java.lang.String str2 = offsetTime0.toString();
        java.time.OffsetTime offsetTime3 = java.time.OffsetTime.MAX;
        java.time.LocalTime localTime4 = offsetTime3.toLocalTime();
        boolean boolean5 = offsetTime0.isBefore(offsetTime3);
        java.time.LocalTime localTime10 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime11 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime10);
        java.time.LocalTime localTime16 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime17 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime16);
        java.time.temporal.ChronoField chronoField18 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime20 = localTime16.with((java.time.temporal.TemporalField) chronoField18, (long) (short) 1);
        long long21 = localTime10.getLong((java.time.temporal.TemporalField) chronoField18);
        java.time.LocalTime localTime23 = localTime10.withSecond((int) (short) 1);
        int int24 = localTime23.getMinute();
        java.time.OffsetTime offsetTime25 = offsetTime3.with((java.time.temporal.TemporalAdjuster) localTime23);
        java.time.LocalDate localDate27 = java.time.LocalDate.ofEpochDay((long) ' ');
        java.time.OffsetTime offsetTime28 = java.time.OffsetTime.MAX;
        java.time.LocalTime localTime29 = offsetTime28.toLocalTime();
        java.lang.String str30 = offsetTime28.toString();
        java.time.Duration duration31 = java.time.Duration.ZERO;
        java.lang.String str32 = duration31.toString();
        java.time.OffsetTime offsetTime33 = offsetTime28.plus((java.time.temporal.TemporalAmount) duration31);
        java.time.LocalTime localTime34 = offsetTime28.toLocalTime();
        java.time.chrono.ChronoLocalDateTime<?> wildcardChronoLocalDateTime35 = localDate27.atTime(localTime34);
        java.time.LocalDate localDate37 = localDate27.minusWeeks((long) 2097);
        java.time.OffsetTime offsetTime38 = java.time.OffsetTime.MAX;
        java.time.LocalTime localTime39 = offsetTime38.toLocalTime();
        java.lang.String str40 = offsetTime38.toString();
        java.time.Duration duration41 = java.time.Duration.ZERO;
        java.lang.String str42 = duration41.toString();
        java.time.OffsetTime offsetTime43 = offsetTime38.plus((java.time.temporal.TemporalAmount) duration41);
        java.time.OffsetTime offsetTime45 = offsetTime38.plusNanos((long) 0);
        java.time.LocalTime localTime50 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime51 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime50);
        java.time.temporal.ChronoField chronoField52 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime54 = localTime50.with((java.time.temporal.TemporalField) chronoField52, (long) (short) 1);
        java.util.Locale locale55 = java.util.Locale.GERMANY;
        java.lang.String str56 = chronoField52.getDisplayName(locale55);
        java.time.OffsetTime offsetTime58 = offsetTime45.with((java.time.temporal.TemporalField) chronoField52, (long) 28);
        java.time.OffsetDateTime offsetDateTime59 = localDate37.atTime(offsetTime45);
        int int60 = localDate37.getYear();
        java.time.OffsetDateTime offsetDateTime61 = offsetTime25.atDate(localDate37);
        java.time.OffsetDateTime offsetDateTime63 = offsetDateTime61.withNano((int) (short) 1);
        java.time.OffsetDateTime offsetDateTime65 = offsetDateTime63.plusNanos(163974109860000L);
        org.junit.Assert.assertNotNull(offsetTime0);
        org.junit.Assert.assertNotNull(localTime1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "23:59:59.999999999-18:00" + "'", str2, "23:59:59.999999999-18:00");
        org.junit.Assert.assertNotNull(offsetTime3);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertTrue("'" + chronoField18 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField18.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 3601000000001L + "'", long21 == 3601000000001L);
        org.junit.Assert.assertNotNull(localTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(offsetTime25);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(offsetTime28);
        org.junit.Assert.assertNotNull(localTime29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "23:59:59.999999999-18:00" + "'", str30, "23:59:59.999999999-18:00");
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "PT0S" + "'", str32, "PT0S");
        org.junit.Assert.assertNotNull(offsetTime33);
        org.junit.Assert.assertNotNull(localTime34);
        org.junit.Assert.assertNotNull(wildcardChronoLocalDateTime35);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertNotNull(offsetTime38);
        org.junit.Assert.assertNotNull(localTime39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "23:59:59.999999999-18:00" + "'", str40, "23:59:59.999999999-18:00");
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "PT0S" + "'", str42, "PT0S");
        org.junit.Assert.assertNotNull(offsetTime43);
        org.junit.Assert.assertNotNull(offsetTime45);
        org.junit.Assert.assertNotNull(localTime50);
        org.junit.Assert.assertNotNull(localTime51);
        org.junit.Assert.assertTrue("'" + chronoField52 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField52.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime54);
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "NanoOfDay" + "'", str56, "NanoOfDay");
        org.junit.Assert.assertNotNull(offsetTime58);
        org.junit.Assert.assertNotNull(offsetDateTime59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1929 + "'", int60 == 1929);
        org.junit.Assert.assertNotNull(offsetDateTime61);
        org.junit.Assert.assertNotNull(offsetDateTime63);
        org.junit.Assert.assertNotNull(offsetDateTime65);
    }

    @Test
    public void test6366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6366");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((long) 0, chronology2);
        org.joda.time.Chronology chronology4 = localTime3.getChronology();
        java.util.Locale locale5 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale locale6 = java.util.Locale.GERMANY;
        java.lang.String str7 = locale5.getDisplayScript(locale6);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket9 = new org.joda.time.format.DateTimeParserBucket((long) 1970, chronology4, locale5, (java.lang.Integer) 1);
        long long15 = chronology4.getDateTimeMillis(1L, (int) (short) 10, 8, 4, 3);
        org.joda.time.DurationField durationField16 = chronology4.halfdays();
        org.joda.time.DateTimeField dateTimeField17 = chronology4.weekyear();
        org.joda.time.DateTimeField dateTimeField18 = chronology4.secondOfDay();
        org.joda.time.DurationField durationField19 = dateTimeField18.getLeapDurationField();
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 36484003L + "'", long15 == 36484003L);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNull(durationField19);
    }

    @Test
    public void test6367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6367");
        java.nio.charset.Charset charset0 = java.nio.charset.Charset.defaultCharset();
        java.nio.charset.CharsetDecoder charsetDecoder1 = charset0.newDecoder();
        float float2 = charsetDecoder1.maxCharsPerByte();
        java.nio.charset.CodingErrorAction codingErrorAction3 = java.nio.charset.CodingErrorAction.IGNORE;
        java.nio.charset.CharsetDecoder charsetDecoder4 = charsetDecoder1.onMalformedInput(codingErrorAction3);
        java.nio.charset.Charset charset5 = java.nio.charset.Charset.defaultCharset();
        java.nio.charset.CharsetDecoder charsetDecoder6 = charset5.newDecoder();
        float float7 = charsetDecoder6.maxCharsPerByte();
        java.nio.charset.CodingErrorAction codingErrorAction8 = java.nio.charset.CodingErrorAction.IGNORE;
        java.nio.charset.CharsetDecoder charsetDecoder9 = charsetDecoder6.onMalformedInput(codingErrorAction8);
        java.nio.charset.CharsetDecoder charsetDecoder10 = charsetDecoder4.onMalformedInput(codingErrorAction8);
        java.nio.charset.Charset charset11 = java.nio.charset.Charset.defaultCharset();
        java.nio.charset.CharsetDecoder charsetDecoder12 = charset11.newDecoder();
        java.nio.charset.Charset charset13 = java.nio.charset.Charset.defaultCharset();
        boolean boolean14 = charset11.contains(charset13);
        java.nio.charset.CharsetEncoder charsetEncoder15 = charset11.newEncoder();
        char[] charArray16 = new char[] {};
        java.nio.CharBuffer charBuffer17 = java.nio.CharBuffer.wrap(charArray16);
        java.nio.ByteBuffer byteBuffer18 = charsetEncoder15.encode(charBuffer17);
        java.nio.ByteOrder byteOrder19 = byteBuffer18.order();
        java.nio.CharBuffer charBuffer20 = charsetDecoder4.decode(byteBuffer18);
        java.util.stream.IntStream intStream21 = charBuffer20.codePoints();
        org.junit.Assert.assertNotNull(charset0);
        org.junit.Assert.assertNotNull(charsetDecoder1);
        org.junit.Assert.assertTrue("'" + float2 + "' != '" + 1.0f + "'", float2 == 1.0f);
        org.junit.Assert.assertNotNull(codingErrorAction3);
        org.junit.Assert.assertNotNull(charsetDecoder4);
        org.junit.Assert.assertNotNull(charset5);
        org.junit.Assert.assertNotNull(charsetDecoder6);
        org.junit.Assert.assertTrue("'" + float7 + "' != '" + 1.0f + "'", float7 == 1.0f);
        org.junit.Assert.assertNotNull(codingErrorAction8);
        org.junit.Assert.assertNotNull(charsetDecoder9);
        org.junit.Assert.assertNotNull(charsetDecoder10);
        org.junit.Assert.assertNotNull(charset11);
        org.junit.Assert.assertNotNull(charsetDecoder12);
        org.junit.Assert.assertNotNull(charset13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(charsetEncoder15);
        org.junit.Assert.assertNotNull(charArray16);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray16), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray16), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray16), "[]");
        org.junit.Assert.assertNotNull(charBuffer17);
        org.junit.Assert.assertNotNull(byteBuffer18);
        org.junit.Assert.assertNotNull(byteOrder19);
        org.junit.Assert.assertNotNull(charBuffer20);
        org.junit.Assert.assertNotNull(intStream21);
    }

    @Test
    public void test6368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6368");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.Duration duration2 = new org.joda.time.Duration(readableInstant0, readableInstant1);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = duration2.toPeriodTo(readableInstant3, periodType4);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.Duration duration8 = new org.joda.time.Duration(readableInstant6, readableInstant7);
        long long9 = duration8.getMillis();
        boolean boolean10 = duration2.isShorterThan((org.joda.time.ReadableDuration) duration8);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) 3, chronology12);
        org.joda.time.DateTime.Property property14 = dateTime13.dayOfYear();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight((java.lang.Object) dateTime13, chronology15);
        org.joda.time.MutableDateTime mutableDateTime17 = dateTime13.toMutableDateTime();
        mutableDateTime17.addYears((int) (short) 100);
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime17.dayOfWeek();
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime17.year();
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime17.weekyear();
        boolean boolean23 = duration2.equals((java.lang.Object) mutableDateTime17);
        mutableDateTime17.addMonths((int) ' ');
        mutableDateTime17.add((long) (byte) 10);
        org.joda.time.Period period28 = org.joda.time.Period.ZERO;
        org.joda.time.Period period29 = period28.normalizedStandard();
        org.joda.time.Period period31 = period28.plusHours(2);
        java.time.chrono.IsoEra isoEra32 = java.time.chrono.IsoEra.CE;
        boolean boolean33 = period31.equals((java.lang.Object) isoEra32);
        int int34 = period31.getMinutes();
        mutableDateTime17.add((org.joda.time.ReadablePeriod) period31);
        java.util.TimeZone timeZone37 = null;
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forTimeZone(timeZone37);
        org.joda.time.DateMidnight dateMidnight39 = new org.joda.time.DateMidnight((long) 1970, dateTimeZone38);
        long long42 = dateTimeZone38.convertLocalToUTC((long) 3, false);
        long long45 = dateTimeZone38.convertLocalToUTC(0L, true);
        mutableDateTime17.setZoneRetainFields(dateTimeZone38);
        java.lang.String str47 = dateTimeZone38.toString();
        org.joda.time.chrono.EthiopicChronology ethiopicChronology48 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone38);
        org.joda.time.DateTimeField dateTimeField49 = ethiopicChronology48.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone50 = ethiopicChronology48.getZone();
        org.joda.time.DateTimeField dateTimeField51 = ethiopicChronology48.era();
        org.joda.time.DateTimeField dateTimeField52 = ethiopicChronology48.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone53 = ethiopicChronology48.getZone();
        org.joda.time.DurationField durationField54 = ethiopicChronology48.days();
        java.lang.String str55 = durationField54.toString();
        long long58 = durationField54.getValueAsLong((long) 965000000, 23L);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertTrue("'" + isoEra32 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra32.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 3L + "'", long42 == 3L);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Etc/UTC" + "'", str47, "Etc/UTC");
        org.junit.Assert.assertNotNull(ethiopicChronology48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertNotNull(durationField54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "DurationField[days]" + "'", str55, "DurationField[days]");
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 11L + "'", long58 == 11L);
    }

    @Test
    public void test6369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6369");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.now();
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery1 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period2 = localDateTime0.query(periodTemporalQuery1);
        java.time.chrono.IsoChronology isoChronology3 = period2.getChronology();
        java.time.Clock clock4 = java.time.Clock.systemUTC();
        java.time.Duration duration6 = java.time.Duration.ofSeconds((long) 256);
        java.time.Clock clock7 = java.time.Clock.tick(clock4, duration6);
        java.time.Duration duration9 = java.time.Duration.ofMinutes((long) 3);
        java.time.Duration duration10 = duration9.abs();
        java.time.Clock clock11 = java.time.Clock.offset(clock4, duration9);
        java.time.LocalDate localDate12 = java.time.LocalDate.now(clock11);
        java.time.LocalDate localDate13 = isoChronology3.dateNow(clock11);
        java.lang.String str14 = isoChronology3.toString();
        java.lang.String str15 = isoChronology3.getId();
        java.time.format.DateTimeFormatter dateTimeFormatter16 = java.time.format.DateTimeFormatter.ISO_DATE;
        java.lang.String str17 = dateTimeFormatter16.toString();
        java.time.LocalDateTime localDateTime18 = java.time.LocalDateTime.now();
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery19 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period20 = localDateTime18.query(periodTemporalQuery19);
        java.text.Format format21 = dateTimeFormatter16.toFormat(periodTemporalQuery19);
        java.time.chrono.Chronology chronology22 = dateTimeFormatter16.getChronology();
        java.time.format.DateTimeFormatter dateTimeFormatter23 = java.time.format.DateTimeFormatter.ISO_DATE;
        java.lang.String str24 = dateTimeFormatter23.toString();
        java.time.LocalDateTime localDateTime25 = java.time.LocalDateTime.now();
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery26 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period27 = localDateTime25.query(periodTemporalQuery26);
        java.text.Format format28 = dateTimeFormatter23.toFormat(periodTemporalQuery26);
        java.time.chrono.Chronology chronology29 = dateTimeFormatter23.getChronology();
        int int30 = chronology22.compareTo(chronology29);
        boolean boolean32 = chronology22.equals((java.lang.Object) 21);
        int int33 = isoChronology3.compareTo(chronology22);
        java.time.LocalDate localDate35 = java.time.LocalDate.ofEpochDay((long) ' ');
        int int36 = localDate35.getMonthValue();
        org.joda.time.Period period37 = org.joda.time.Period.ZERO;
        org.joda.time.Period period38 = period37.normalizedStandard();
        org.joda.time.Period period40 = period37.plusHours(2);
        java.time.chrono.IsoEra isoEra41 = java.time.chrono.IsoEra.CE;
        boolean boolean42 = period40.equals((java.lang.Object) isoEra41);
        java.time.LocalTime localTime47 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime48 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime47);
        java.time.LocalTime localTime53 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime54 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime53);
        java.time.temporal.ChronoField chronoField55 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime57 = localTime53.with((java.time.temporal.TemporalField) chronoField55, (long) (short) 1);
        long long58 = localTime47.getLong((java.time.temporal.TemporalField) chronoField55);
        boolean boolean59 = isoEra41.isSupported((java.time.temporal.TemporalField) chronoField55);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery60 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period61 = isoEra41.query(periodTemporalQuery60);
        boolean boolean62 = period61.isNegative();
        java.time.Period period64 = period61.plusDays((long) ' ');
        java.time.temporal.ChronoField chronoField65 = java.time.temporal.ChronoField.SECOND_OF_DAY;
        boolean boolean66 = period61.equals((java.lang.Object) chronoField65);
        boolean boolean67 = localDate35.isSupported((java.time.temporal.TemporalField) chronoField65);
        java.time.temporal.TemporalUnit temporalUnit68 = chronoField65.getRangeUnit();
        java.time.temporal.ValueRange valueRange69 = isoChronology3.range(chronoField65);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(periodTemporalQuery1);
        org.junit.Assert.assertNotNull(period2);
        org.junit.Assert.assertNotNull(isoChronology3);
        org.junit.Assert.assertNotNull(clock4);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(clock7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(clock11);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "ISO" + "'", str14, "ISO");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "ISO" + "'", str15, "ISO");
        org.junit.Assert.assertNotNull(dateTimeFormatter16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "ParseCaseSensitive(false)(Value(Year,4,10,EXCEEDS_PAD)'-'Value(MonthOfYear,2)'-'Value(DayOfMonth,2))[Offset(+HH:MM:ss,'Z')]" + "'", str17, "ParseCaseSensitive(false)(Value(Year,4,10,EXCEEDS_PAD)'-'Value(MonthOfYear,2)'-'Value(DayOfMonth,2))[Offset(+HH:MM:ss,'Z')]");
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(periodTemporalQuery19);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(format21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeFormatter23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "ParseCaseSensitive(false)(Value(Year,4,10,EXCEEDS_PAD)'-'Value(MonthOfYear,2)'-'Value(DayOfMonth,2))[Offset(+HH:MM:ss,'Z')]" + "'", str24, "ParseCaseSensitive(false)(Value(Year,4,10,EXCEEDS_PAD)'-'Value(MonthOfYear,2)'-'Value(DayOfMonth,2))[Offset(+HH:MM:ss,'Z')]");
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(periodTemporalQuery26);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(format28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2 + "'", int36 == 2);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertTrue("'" + isoEra41 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra41.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(localTime47);
        org.junit.Assert.assertNotNull(localTime48);
        org.junit.Assert.assertNotNull(localTime53);
        org.junit.Assert.assertNotNull(localTime54);
        org.junit.Assert.assertTrue("'" + chronoField55 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField55.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime57);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 3601000000001L + "'", long58 == 3601000000001L);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(periodTemporalQuery60);
        org.junit.Assert.assertNotNull(period61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(period64);
        org.junit.Assert.assertTrue("'" + chronoField65 + "' != '" + java.time.temporal.ChronoField.SECOND_OF_DAY + "'", chronoField65.equals(java.time.temporal.ChronoField.SECOND_OF_DAY));
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + temporalUnit68 + "' != '" + java.time.temporal.ChronoUnit.DAYS + "'", temporalUnit68.equals(java.time.temporal.ChronoUnit.DAYS));
        org.junit.Assert.assertNotNull(valueRange69);
    }

    @Test
    public void test6370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6370");
        java.util.GregorianCalendar gregorianCalendar5 = new java.util.GregorianCalendar(12, 4096, 7, (-1), (int) (short) 10);
        gregorianCalendar5.set((int) ':', 3, 256, 5, 17, 3600000);
        int int13 = gregorianCalendar5.getWeekYear();
        int int14 = gregorianCalendar5.getFirstDayOfWeek();
        int int15 = gregorianCalendar5.getMinimalDaysInFirstWeek();
        boolean boolean16 = gregorianCalendar5.isWeekDateSupported();
        boolean boolean17 = gregorianCalendar5.isWeekDateSupported();
        // The following exception was thrown during execution in test generation
        try {
            int int19 = gregorianCalendar5.getGreatestMinimum(1097);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1097");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 59 + "'", int13 == 59);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
    }

    @Test
    public void test6371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6371");
        java.time.Month month0 = java.time.Month.DECEMBER;
        int int1 = month0.getValue();
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery2 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period3 = month0.query(periodTemporalQuery2);
        java.lang.String str4 = period3.toString();
        org.junit.Assert.assertTrue("'" + month0 + "' != '" + java.time.Month.DECEMBER + "'", month0.equals(java.time.Month.DECEMBER));
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 12 + "'", int1 == 12);
        org.junit.Assert.assertNotNull(periodTemporalQuery2);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "P0D" + "'", str4, "P0D");
    }

    @Test
    public void test6372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6372");
        java.util.stream.DoubleStream doubleStream0 = java.util.stream.DoubleStream.empty();
        java.util.stream.DoubleStream doubleStream1 = doubleStream0.unordered();
        double[] doubleArray2 = doubleStream0.toArray();
        java.nio.DoubleBuffer doubleBuffer3 = java.nio.DoubleBuffer.wrap(doubleArray2);
        java.util.stream.DoubleStream doubleStream4 = java.util.stream.DoubleStream.of(doubleArray2);
        java.util.OptionalDouble optionalDouble5 = doubleStream4.findFirst();
        org.junit.Assert.assertNotNull(doubleStream0);
        org.junit.Assert.assertNotNull(doubleStream1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleBuffer3);
        org.junit.Assert.assertNotNull(doubleStream4);
        org.junit.Assert.assertNotNull(optionalDouble5);
    }

    @Test
    public void test6373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6373");
        java.nio.LongBuffer longBuffer1 = java.nio.LongBuffer.allocate((int) (short) 0);
        java.nio.Buffer buffer2 = longBuffer1.mark();
        java.time.LocalTime localTime7 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime8 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime7);
        java.time.temporal.ChronoField chronoField9 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime11 = localTime7.with((java.time.temporal.TemporalField) chronoField9, (long) (short) 1);
        java.time.Duration duration13 = java.time.Duration.ofMinutes((long) 3);
        java.time.LocalTime localTime14 = localTime7.minus((java.time.temporal.TemporalAmount) duration13);
        boolean boolean15 = longBuffer1.equals((java.lang.Object) localTime7);
        java.nio.LongBuffer longBuffer16 = longBuffer1.slice();
        boolean boolean17 = longBuffer1.hasArray();
        long[] longArray18 = longBuffer1.array();
        org.junit.Assert.assertNotNull(longBuffer1);
        org.junit.Assert.assertNotNull(buffer2);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertTrue("'" + chronoField9 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField9.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(longBuffer16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(longArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray18), "[]");
    }

    @Test
    public void test6374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6374");
        java.nio.charset.Charset charset0 = java.nio.charset.Charset.defaultCharset();
        java.nio.charset.CharsetDecoder charsetDecoder1 = charset0.newDecoder();
        float float2 = charsetDecoder1.maxCharsPerByte();
        java.nio.charset.CodingErrorAction codingErrorAction3 = java.nio.charset.CodingErrorAction.IGNORE;
        java.nio.charset.CharsetDecoder charsetDecoder4 = charsetDecoder1.onMalformedInput(codingErrorAction3);
        java.nio.charset.CodingErrorAction codingErrorAction5 = charsetDecoder4.unmappableCharacterAction();
        boolean boolean6 = charsetDecoder4.isAutoDetecting();
        java.nio.charset.CodingErrorAction codingErrorAction7 = charsetDecoder4.unmappableCharacterAction();
        java.nio.charset.Charset charset8 = charsetDecoder4.charset();
        org.junit.Assert.assertNotNull(charset0);
        org.junit.Assert.assertNotNull(charsetDecoder1);
        org.junit.Assert.assertTrue("'" + float2 + "' != '" + 1.0f + "'", float2 == 1.0f);
        org.junit.Assert.assertNotNull(codingErrorAction3);
        org.junit.Assert.assertNotNull(charsetDecoder4);
        org.junit.Assert.assertNotNull(codingErrorAction5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(codingErrorAction7);
        org.junit.Assert.assertNotNull(charset8);
    }

    @Test
    public void test6375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6375");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.now();
        java.time.temporal.ChronoField chronoField1 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime3 = localDateTime0.with((java.time.temporal.TemporalField) chronoField1, (long) 10);
        java.time.LocalDateTime localDateTime5 = localDateTime0.minusMinutes((long) 12);
        java.time.chrono.Chronology chronology6 = localDateTime0.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            java.time.LocalDateTime localDateTime8 = localDateTime0.withHour(1728000);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for HourOfDay (valid values 0 - 23): 1728000");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertTrue("'" + chronoField1 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField1.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
    }

    @Test
    public void test6376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6376");
        java.time.OffsetTime offsetTime0 = java.time.OffsetTime.MAX;
        java.time.LocalTime localTime1 = offsetTime0.toLocalTime();
        java.time.LocalTime localTime6 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime7 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime6);
        java.time.LocalTime localTime12 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime13 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime12);
        java.time.temporal.ChronoField chronoField14 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime16 = localTime12.with((java.time.temporal.TemporalField) chronoField14, (long) (short) 1);
        long long17 = localTime6.getLong((java.time.temporal.TemporalField) chronoField14);
        java.time.LocalTime localTime19 = localTime6.withSecond((int) (short) 1);
        int int20 = localTime19.getMinute();
        java.time.LocalTime localTime22 = localTime19.plusHours((long) (-1));
        java.time.OffsetTime offsetTime23 = offsetTime0.with((java.time.temporal.TemporalAdjuster) localTime19);
        java.util.GregorianCalendar gregorianCalendar29 = new java.util.GregorianCalendar(12, 4096, 7, (-1), (int) (short) 10);
        int int30 = gregorianCalendar29.getWeeksInWeekYear();
        java.lang.String str31 = gregorianCalendar29.getCalendarType();
        java.time.ZonedDateTime zonedDateTime32 = gregorianCalendar29.toZonedDateTime();
        java.time.ZonedDateTime zonedDateTime34 = zonedDateTime32.minusMonths((long) 10);
        int int35 = zonedDateTime32.getMonthValue();
        int int36 = zonedDateTime32.getSecond();
        java.time.ZoneOffset zoneOffset37 = zonedDateTime32.getOffset();
        java.time.OffsetTime offsetTime38 = offsetTime0.withOffsetSameLocal(zoneOffset37);
        int int39 = zoneOffset37.getTotalSeconds();
        org.junit.Assert.assertNotNull(offsetTime0);
        org.junit.Assert.assertNotNull(localTime1);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertTrue("'" + chronoField14 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField14.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 3601000000001L + "'", long17 == 3601000000001L);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertNotNull(offsetTime23);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 52 + "'", int30 == 52);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "gregory" + "'", str31, "gregory");
        org.junit.Assert.assertNotNull(zonedDateTime32);
        org.junit.Assert.assertNotNull(zonedDateTime34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 5 + "'", int35 == 5);
// flaky:         org.junit.Assert.assertTrue("'" + int36 + "' != '" + 59 + "'", int36 == 59);
        org.junit.Assert.assertNotNull(zoneOffset37);
        org.junit.Assert.assertNotNull(offsetTime38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
    }

    @Test
    public void test6377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6377");
        short[] shortArray2 = new short[] { (short) 1, (byte) 10 };
        java.nio.ShortBuffer shortBuffer3 = java.nio.ShortBuffer.wrap(shortArray2);
        short[] shortArray6 = new short[] { (short) 1, (byte) 10 };
        java.nio.ShortBuffer shortBuffer7 = java.nio.ShortBuffer.wrap(shortArray6);
        java.nio.ShortBuffer shortBuffer8 = shortBuffer3.put(shortBuffer7);
        int int9 = shortBuffer8.limit();
        java.nio.ShortBuffer shortBuffer10 = shortBuffer8.asReadOnlyBuffer();
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ShortBuffer shortBuffer13 = shortBuffer8.put(34, (short) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(shortArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray2), "[1, 10]");
        org.junit.Assert.assertNotNull(shortBuffer3);
        org.junit.Assert.assertNotNull(shortArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray6), "[1, 10]");
        org.junit.Assert.assertNotNull(shortBuffer7);
        org.junit.Assert.assertNotNull(shortBuffer8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2 + "'", int9 == 2);
        org.junit.Assert.assertNotNull(shortBuffer10);
    }

    @Test
    public void test6378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6378");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withYearOfCentury((int) 'a');
        int int4 = localDateTime3.getDayOfMonth();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime3.plusYears((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime3.withWeekOfWeekyear((int) '.');
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.withSecondOfMinute(50);
        org.joda.time.LocalDateTime.Property property11 = localDateTime8.yearOfEra();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 21 + "'", int4 == 21);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
    }

    @Test
    public void test6379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6379");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Locale.LanguageRange[] languageRangeArray3 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList4 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList4, languageRangeArray3);
        java.util.Locale locale6 = java.util.Locale.JAPAN;
        java.util.Locale[] localeArray7 = new java.util.Locale[] { locale6 };
        java.util.ArrayList<java.util.Locale> localeList8 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList8, localeArray7);
        java.util.List<java.util.Locale> localeList10 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList4, (java.util.Collection<java.util.Locale>) localeList8);
        localeList10.clear();
        java.util.List<java.util.Locale> localeList12 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.util.Locale>) localeList10);
        java.util.Locale.LanguageRange[] languageRangeArray13 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList14 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList14, languageRangeArray13);
        java.util.Locale.LanguageRange[] languageRangeArray16 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList17 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList17, languageRangeArray16);
        java.util.Locale locale19 = java.util.Locale.JAPAN;
        java.util.Locale[] localeArray20 = new java.util.Locale[] { locale19 };
        java.util.ArrayList<java.util.Locale> localeList21 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList21, localeArray20);
        java.util.List<java.util.Locale> localeList23 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList17, (java.util.Collection<java.util.Locale>) localeList21);
        localeList23.clear();
        java.util.List<java.util.Locale> localeList25 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList14, (java.util.Collection<java.util.Locale>) localeList23);
        java.util.List<java.util.Locale> localeList26 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.util.Locale>) localeList25);
        java.util.Iterator<java.util.Locale> localeItor27 = localeList25.iterator();
        org.joda.time.format.PeriodPrinter periodPrinter29 = null;
        org.joda.time.format.PeriodParser periodParser30 = null;
        org.joda.time.format.PeriodFormatter periodFormatter31 = new org.joda.time.format.PeriodFormatter(periodPrinter29, periodParser30);
        java.util.Locale.LanguageRange[] languageRangeArray32 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList33 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList33, languageRangeArray32);
        java.util.Locale.LanguageRange[] languageRangeArray35 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList36 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList36, languageRangeArray35);
        java.util.Locale locale38 = java.util.Locale.JAPAN;
        java.util.Locale[] localeArray39 = new java.util.Locale[] { locale38 };
        java.util.ArrayList<java.util.Locale> localeList40 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList40, localeArray39);
        java.util.List<java.util.Locale> localeList42 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList36, (java.util.Collection<java.util.Locale>) localeList40);
        localeList42.clear();
        java.util.List<java.util.Locale> localeList44 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList33, (java.util.Collection<java.util.Locale>) localeList42);
        java.util.Locale.LanguageRange[] languageRangeArray45 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList46 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList46, languageRangeArray45);
        java.util.Locale.LanguageRange[] languageRangeArray48 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList49 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList49, languageRangeArray48);
        java.util.Locale locale51 = java.util.Locale.JAPAN;
        java.util.Locale[] localeArray52 = new java.util.Locale[] { locale51 };
        java.util.ArrayList<java.util.Locale> localeList53 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList53, localeArray52);
        java.util.List<java.util.Locale> localeList55 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList49, (java.util.Collection<java.util.Locale>) localeList53);
        localeList55.clear();
        java.util.List<java.util.Locale> localeList57 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList46, (java.util.Collection<java.util.Locale>) localeList55);
        java.util.List<java.util.Locale> localeList58 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList33, (java.util.Collection<java.util.Locale>) localeList57);
        java.util.ListIterator<java.util.Locale> localeItor59 = localeList57.listIterator();
        java.util.Locale locale60 = java.util.Locale.ENGLISH;
        localeItor59.add(locale60);
        org.joda.time.format.PeriodFormatter periodFormatter62 = periodFormatter31.withLocale(locale60);
        java.lang.String str63 = locale60.getDisplayLanguage();
        // The following exception was thrown during execution in test generation
        try {
            localeList25.add(6, locale60);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 6, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(languageRangeArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(localeArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(localeList10);
        org.junit.Assert.assertNotNull(localeList12);
        org.junit.Assert.assertNotNull(languageRangeArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(languageRangeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(localeArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(localeList23);
        org.junit.Assert.assertNotNull(localeList25);
        org.junit.Assert.assertNotNull(localeList26);
        org.junit.Assert.assertNotNull(localeItor27);
        org.junit.Assert.assertNotNull(languageRangeArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(languageRangeArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(localeArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(localeList42);
        org.junit.Assert.assertNotNull(localeList44);
        org.junit.Assert.assertNotNull(languageRangeArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(languageRangeArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(localeArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(localeList55);
        org.junit.Assert.assertNotNull(localeList57);
        org.junit.Assert.assertNotNull(localeList58);
        org.junit.Assert.assertNotNull(localeItor59);
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "en");
        org.junit.Assert.assertNotNull(periodFormatter62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "English" + "'", str63, "English");
    }

    @Test
    public void test6380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6380");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.Duration duration2 = new org.joda.time.Duration(readableInstant0, readableInstant1);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = duration2.toPeriodTo(readableInstant3, periodType4);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.Duration duration8 = new org.joda.time.Duration(readableInstant6, readableInstant7);
        long long9 = duration8.getMillis();
        boolean boolean10 = duration2.isShorterThan((org.joda.time.ReadableDuration) duration8);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) 3, chronology12);
        org.joda.time.DateTime.Property property14 = dateTime13.dayOfYear();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight((java.lang.Object) dateTime13, chronology15);
        org.joda.time.MutableDateTime mutableDateTime17 = dateTime13.toMutableDateTime();
        mutableDateTime17.addYears((int) (short) 100);
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime17.dayOfWeek();
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime17.year();
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime17.weekyear();
        boolean boolean23 = duration2.equals((java.lang.Object) mutableDateTime17);
        mutableDateTime17.addMonths((int) ' ');
        mutableDateTime17.add((long) (byte) 10);
        org.joda.time.Period period28 = org.joda.time.Period.ZERO;
        org.joda.time.Period period29 = period28.normalizedStandard();
        org.joda.time.Period period31 = period28.plusHours(2);
        java.time.chrono.IsoEra isoEra32 = java.time.chrono.IsoEra.CE;
        boolean boolean33 = period31.equals((java.lang.Object) isoEra32);
        int int34 = period31.getMinutes();
        mutableDateTime17.add((org.joda.time.ReadablePeriod) period31);
        java.util.TimeZone timeZone37 = null;
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forTimeZone(timeZone37);
        org.joda.time.DateMidnight dateMidnight39 = new org.joda.time.DateMidnight((long) 1970, dateTimeZone38);
        long long42 = dateTimeZone38.convertLocalToUTC((long) 3, false);
        long long45 = dateTimeZone38.convertLocalToUTC(0L, true);
        mutableDateTime17.setZoneRetainFields(dateTimeZone38);
        java.lang.String str47 = dateTimeZone38.toString();
        org.joda.time.chrono.EthiopicChronology ethiopicChronology48 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone38);
        org.joda.time.DateTimeField dateTimeField49 = ethiopicChronology48.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone50 = ethiopicChronology48.getZone();
        org.joda.time.DateTimeField dateTimeField51 = ethiopicChronology48.era();
        org.joda.time.DateTimeField dateTimeField52 = ethiopicChronology48.secondOfDay();
        org.joda.time.DateTimeField dateTimeField53 = ethiopicChronology48.minuteOfHour();
        org.joda.time.DurationField durationField54 = ethiopicChronology48.months();
        org.joda.time.DateTimeField dateTimeField55 = ethiopicChronology48.weekyearOfCentury();
        org.joda.time.Minutes minutes56 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes58 = minutes56.minus(12);
        org.joda.time.Minutes minutes59 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes61 = minutes59.minus(12);
        org.joda.time.Minutes minutes62 = minutes56.minus(minutes59);
        org.joda.time.DurationFieldType durationFieldType63 = minutes56.getFieldType();
        int[] intArray66 = ethiopicChronology48.get((org.joda.time.ReadablePeriod) minutes56, (long) 30, (long) 741000000);
        org.joda.time.DateTimeField dateTimeField67 = ethiopicChronology48.minuteOfHour();
        org.joda.time.DurationField durationField68 = ethiopicChronology48.months();
        org.joda.time.DateTimeField dateTimeField69 = ethiopicChronology48.millisOfSecond();
        org.joda.time.Chronology chronology70 = ethiopicChronology48.withUTC();
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertTrue("'" + isoEra32 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra32.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 3L + "'", long42 == 3L);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Etc/UTC" + "'", str47, "Etc/UTC");
        org.junit.Assert.assertNotNull(ethiopicChronology48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(durationField54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(minutes56);
        org.junit.Assert.assertNotNull(minutes58);
        org.junit.Assert.assertNotNull(minutes59);
        org.junit.Assert.assertNotNull(minutes61);
        org.junit.Assert.assertNotNull(minutes62);
        org.junit.Assert.assertNotNull(durationFieldType63);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[12349]");
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertNotNull(durationField68);
        org.junit.Assert.assertNotNull(dateTimeField69);
        org.junit.Assert.assertNotNull(chronology70);
    }

    @Test
    public void test6381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6381");
        org.joda.time.Duration duration0 = org.joda.time.Duration.ZERO;
        org.joda.time.Days days1 = duration0.toStandardDays();
        org.joda.time.MutablePeriod mutablePeriod2 = days1.toMutablePeriod();
        org.junit.Assert.assertNotNull(duration0);
        org.junit.Assert.assertNotNull(days1);
        org.junit.Assert.assertNotNull(mutablePeriod2);
    }

    @Test
    public void test6382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6382");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.Duration duration2 = new org.joda.time.Duration(readableInstant0, readableInstant1);
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval((java.lang.Object) readableInstant1);
        org.joda.time.Hours hours4 = org.joda.time.Hours.EIGHT;
        org.joda.time.Hours hours6 = hours4.minus((-1));
        mutableInterval3.setPeriodBeforeEnd((org.joda.time.ReadablePeriod) hours4);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) 3, chronology9);
        org.joda.time.DateTime.Property property11 = dateTime10.dayOfYear();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight((java.lang.Object) dateTime10, chronology12);
        org.joda.time.DateMidnight.Property property14 = dateMidnight13.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight15 = property14.roundCeilingCopy();
        org.joda.time.DateMidnight dateMidnight16 = property14.roundHalfFloorCopy();
        mutableInterval3.setStart((org.joda.time.ReadableInstant) dateMidnight16);
        org.joda.time.MutableInterval mutableInterval18 = mutableInterval3.copy();
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate();
        org.joda.time.Interval interval20 = localDate19.toInterval();
        int int21 = localDate19.getDayOfYear();
        java.util.Date date22 = localDate19.toDate();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) 3, chronology24);
        org.joda.time.DateTime.Property property26 = dateTime25.dayOfYear();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.DateMidnight dateMidnight28 = new org.joda.time.DateMidnight((java.lang.Object) dateTime25, chronology27);
        org.joda.time.MutableDateTime mutableDateTime29 = dateTime25.toMutableDateTime();
        mutableDateTime29.addYears((int) (short) 100);
        org.joda.time.MutableDateTime.Property property32 = mutableDateTime29.dayOfWeek();
        org.joda.time.MutableDateTime.Property property33 = mutableDateTime29.year();
        java.util.TimeZone timeZone34 = null;
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forTimeZone(timeZone34);
        mutableDateTime29.setZone(dateTimeZone35);
        java.util.Locale locale38 = java.util.Locale.TAIWAN;
        java.lang.String str39 = dateTimeZone35.getShortName((long) 64, locale38);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime((long) 3, chronology41);
        org.joda.time.DateTime.Property property43 = dateTime42.dayOfYear();
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.DateMidnight dateMidnight45 = new org.joda.time.DateMidnight((java.lang.Object) dateTime42, chronology44);
        org.joda.time.MutableDateTime mutableDateTime46 = dateTime42.toMutableDateTime();
        mutableDateTime46.addYears((int) (short) 100);
        org.joda.time.MutableDateTime.Property property49 = mutableDateTime46.dayOfWeek();
        org.joda.time.MutableDateTime.Property property50 = mutableDateTime46.year();
        java.util.TimeZone timeZone51 = null;
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.forTimeZone(timeZone51);
        mutableDateTime46.setZone(dateTimeZone52);
        java.util.Locale locale55 = java.util.Locale.TAIWAN;
        java.lang.String str56 = dateTimeZone52.getShortName((long) 64, locale55);
        long long58 = dateTimeZone35.getMillisKeepLocal(dateTimeZone52, (long) 64);
        org.joda.time.DateTime dateTime59 = new org.joda.time.DateTime(dateTimeZone35);
        org.joda.time.Interval interval60 = localDate19.toInterval(dateTimeZone35);
        boolean boolean61 = mutableInterval18.overlaps((org.joda.time.ReadableInterval) interval60);
        org.junit.Assert.assertNotNull(hours4);
        org.junit.Assert.assertNotNull(hours6);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(mutableInterval18);
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 52 + "'", int21 == 52);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Mon Feb 21 00:00:00 UTC 2022");
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(mutableDateTime29);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "+00:00" + "'", str39, "+00:00");
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(mutableDateTime46);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "+00:00" + "'", str56, "+00:00");
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 64L + "'", long58 == 64L);
        org.junit.Assert.assertNotNull(interval60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
    }

    @Test
    public void test6383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6383");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withYearOfCentury((int) 'a');
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.withMillisOfDay((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime1.minusDays(32772);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime1.withYearOfEra(34595674);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime11 = localDateTime1.withMonthOfYear(121);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 121 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
    }

    @Test
    public void test6384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6384");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.util.TimeZone timeZone3 = null;
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forTimeZone(timeZone3);
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight((long) 1970, dateTimeZone4);
        long long8 = dateTimeZone4.convertLocalToUTC((long) 3, false);
        long long10 = dateTimeZone1.getMillisKeepLocal(dateTimeZone4, (long) ':');
        java.util.TimeZone timeZone11 = dateTimeZone1.toTimeZone();
        java.util.GregorianCalendar gregorianCalendar12 = new java.util.GregorianCalendar(timeZone11);
        timeZone11.setID("00:00:01.000000001");
        java.util.Locale locale18 = new java.util.Locale("hi!");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str19 = timeZone11.getDisplayName(false, 8, locale18);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal style: 8");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 3L + "'", long8 == 3L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 58L + "'", long10 == 58L);
        org.junit.Assert.assertNotNull(timeZone11);
        org.junit.Assert.assertEquals(timeZone11.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertEquals(locale18.toString(), "hi!");
    }

    @Test
    public void test6385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6385");
        org.joda.time.Period period2 = org.joda.time.Period.ZERO;
        org.joda.time.Period period3 = period2.normalizedStandard();
        org.joda.time.Period period5 = period3.minusMinutes((int) ' ');
        org.joda.time.Period period7 = period5.minusMonths((int) (byte) 0);
        org.joda.time.PeriodType periodType8 = period7.getPeriodType();
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod((long) '4', 86399L, periodType8);
        mutablePeriod9.setDays((int) (byte) 100);
        org.junit.Assert.assertNotNull(period2);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(periodType8);
    }

    @Test
    public void test6386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6386");
        java.io.File file0 = null;
        java.io.File file2 = new java.io.File(file0, "1970-01-01T00:00:00.003Z");
        boolean boolean3 = file2.exists();
        boolean boolean4 = file2.mkdirs();
        java.net.URI uRI5 = file2.toURI();
        java.lang.String str6 = file2.getName();
        boolean boolean7 = file2.delete();
        java.nio.file.Path path8 = file2.toPath();
        java.nio.file.FileSystem fileSystem9 = path8.getFileSystem();
        // The following exception was thrown during execution in test generation
        try {
            java.nio.file.PathMatcher pathMatcher11 = fileSystem9.getPathMatcher("\u5fb7\u6587\u5fb7\u56fd)");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull("file2.getParent() == null", file2.getParent());
        org.junit.Assert.assertEquals(file2.toString(), "1970-01-01T00:00:00.003Z");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(uRI5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "1970-01-01T00:00:00.003Z" + "'", str6, "1970-01-01T00:00:00.003Z");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(path8);
        org.junit.Assert.assertNotNull(fileSystem9);
    }

    @Test
    public void test6387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6387");
        java.nio.file.attribute.FileTime fileTime1 = java.nio.file.attribute.FileTime.fromMillis(8380800010L);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate();
        int int3 = localDate2.getCenturyOfEra();
        org.joda.time.LocalDate.Property property4 = localDate2.centuryOfEra();
        boolean boolean5 = fileTime1.equals((java.lang.Object) localDate2);
        java.util.concurrent.TimeUnit timeUnit7 = java.util.concurrent.TimeUnit.NANOSECONDS;
        long long9 = timeUnit7.toMinutes((long) '4');
        java.nio.file.attribute.FileTime fileTime10 = java.nio.file.attribute.FileTime.from((long) 10, timeUnit7);
        timeUnit7.sleep(3L);
        long long14 = timeUnit7.toNanos((long) 9);
        java.util.concurrent.TimeUnit timeUnit16 = java.util.concurrent.TimeUnit.HOURS;
        long long17 = timeUnit7.convert(0L, timeUnit16);
        long long19 = timeUnit7.toMillis((long) 19);
        long long21 = timeUnit7.toNanos((long) 42);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) 3, chronology24);
        org.joda.time.DateTime.Property property26 = dateTime25.dayOfYear();
        org.joda.time.Interval interval27 = property26.toInterval();
        org.joda.time.Weeks weeks28 = org.joda.time.Weeks.ONE;
        java.util.concurrent.TimeUnit timeUnit29 = java.util.concurrent.TimeUnit.NANOSECONDS;
        boolean boolean30 = weeks28.equals((java.lang.Object) timeUnit29);
        timeUnit29.sleep((long) 10);
        boolean boolean33 = interval27.equals((java.lang.Object) timeUnit29);
        long long35 = timeUnit29.toSeconds((long) 97);
        long long36 = timeUnit7.convert((long) 2022, timeUnit29);
        long long37 = fileTime1.to(timeUnit7);
        java.time.Instant instant38 = fileTime1.toInstant();
        org.junit.Assert.assertNotNull(fileTime1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 20 + "'", int3 == 20);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(timeUnit7);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(fileTime10);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 9L + "'", long14 == 9L);
        org.junit.Assert.assertNotNull(timeUnit16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 42L + "'", long21 == 42L);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(weeks28);
        org.junit.Assert.assertNotNull(timeUnit29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 2022L + "'", long36 == 2022L);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 8380800010000000L + "'", long37 == 8380800010000000L);
        org.junit.Assert.assertNotNull(instant38);
    }

    @Test
    public void test6388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6388");
        java.util.GregorianCalendar gregorianCalendar5 = new java.util.GregorianCalendar(12, 4096, 7, (-1), (int) (short) 10);
        int int6 = gregorianCalendar5.getWeeksInWeekYear();
        java.lang.String str7 = gregorianCalendar5.getCalendarType();
        java.time.ZonedDateTime zonedDateTime8 = gregorianCalendar5.toZonedDateTime();
        java.util.GregorianCalendar gregorianCalendar14 = new java.util.GregorianCalendar(12, 4096, 7, (-1), (int) (short) 10);
        int int15 = gregorianCalendar14.getWeeksInWeekYear();
        java.lang.String str16 = gregorianCalendar14.getCalendarType();
        java.time.ZonedDateTime zonedDateTime17 = gregorianCalendar14.toZonedDateTime();
        int int18 = zonedDateTime8.compareTo((java.time.chrono.ChronoZonedDateTime<java.time.LocalDate>) zonedDateTime17);
        java.time.ZonedDateTime zonedDateTime20 = zonedDateTime8.plusDays((long) 2022);
        java.util.GregorianCalendar gregorianCalendar26 = new java.util.GregorianCalendar(12, 4096, 7, (-1), (int) (short) 10);
        int int27 = gregorianCalendar26.getWeeksInWeekYear();
        java.lang.String str28 = gregorianCalendar26.getCalendarType();
        java.time.ZonedDateTime zonedDateTime29 = gregorianCalendar26.toZonedDateTime();
        java.time.ZonedDateTime zonedDateTime31 = zonedDateTime29.minusMonths((long) 10);
        java.time.chrono.ChronoZonedDateTime<java.time.LocalDate> localDateChronoZonedDateTime32 = zonedDateTime29.withEarlierOffsetAtOverlap();
        java.time.ZonedDateTime zonedDateTime34 = zonedDateTime29.minusMonths((long) 4200);
        java.time.ZonedDateTime zonedDateTime36 = zonedDateTime34.plusNanos(8L);
        java.time.ZonedDateTime zonedDateTime38 = zonedDateTime36.minusSeconds((long) 83400);
        boolean boolean39 = zonedDateTime8.isAfter((java.time.chrono.ChronoZonedDateTime<java.time.LocalDate>) zonedDateTime36);
        java.time.ZonedDateTime zonedDateTime41 = zonedDateTime36.minusMonths(9L);
        java.time.LocalDate localDate43 = java.time.LocalDate.ofEpochDay((long) ' ');
        java.time.OffsetTime offsetTime44 = java.time.OffsetTime.MAX;
        java.time.LocalTime localTime45 = offsetTime44.toLocalTime();
        java.lang.String str46 = offsetTime44.toString();
        java.time.Duration duration47 = java.time.Duration.ZERO;
        java.lang.String str48 = duration47.toString();
        java.time.OffsetTime offsetTime49 = offsetTime44.plus((java.time.temporal.TemporalAmount) duration47);
        java.time.LocalTime localTime50 = offsetTime44.toLocalTime();
        java.time.chrono.ChronoLocalDateTime<?> wildcardChronoLocalDateTime51 = localDate43.atTime(localTime50);
        java.time.LocalDate localDate53 = localDate43.minusWeeks((long) 2097);
        java.time.OffsetTime offsetTime54 = java.time.OffsetTime.MAX;
        java.time.LocalTime localTime55 = offsetTime54.toLocalTime();
        java.lang.String str56 = offsetTime54.toString();
        java.time.Duration duration57 = java.time.Duration.ZERO;
        java.lang.String str58 = duration57.toString();
        java.time.OffsetTime offsetTime59 = offsetTime54.plus((java.time.temporal.TemporalAmount) duration57);
        java.time.OffsetTime offsetTime61 = offsetTime54.plusNanos((long) 0);
        java.time.LocalTime localTime66 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime67 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime66);
        java.time.temporal.ChronoField chronoField68 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime70 = localTime66.with((java.time.temporal.TemporalField) chronoField68, (long) (short) 1);
        java.util.Locale locale71 = java.util.Locale.GERMANY;
        java.lang.String str72 = chronoField68.getDisplayName(locale71);
        java.time.OffsetTime offsetTime74 = offsetTime61.with((java.time.temporal.TemporalField) chronoField68, (long) 28);
        java.time.OffsetDateTime offsetDateTime75 = localDate53.atTime(offsetTime61);
        java.time.OffsetDateTime offsetDateTime76 = java.time.OffsetDateTime.now();
        java.time.temporal.ChronoField chronoField77 = java.time.temporal.ChronoField.HOUR_OF_DAY;
        boolean boolean78 = offsetDateTime76.isSupported((java.time.temporal.TemporalField) chronoField77);
        java.time.temporal.ValueRange valueRange79 = offsetTime61.range((java.time.temporal.TemporalField) chronoField77);
        java.time.ZonedDateTime zonedDateTime81 = zonedDateTime41.with((java.time.temporal.TemporalField) chronoField77, 0L);
        java.time.LocalTime localTime82 = zonedDateTime41.toLocalTime();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 52 + "'", int6 == 52);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "gregory" + "'", str7, "gregory");
        org.junit.Assert.assertNotNull(zonedDateTime8);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 52 + "'", int15 == 52);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "gregory" + "'", str16, "gregory");
        org.junit.Assert.assertNotNull(zonedDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(zonedDateTime20);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 52 + "'", int27 == 52);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "gregory" + "'", str28, "gregory");
        org.junit.Assert.assertNotNull(zonedDateTime29);
        org.junit.Assert.assertNotNull(zonedDateTime31);
        org.junit.Assert.assertNotNull(localDateChronoZonedDateTime32);
        org.junit.Assert.assertNotNull(zonedDateTime34);
        org.junit.Assert.assertNotNull(zonedDateTime36);
        org.junit.Assert.assertNotNull(zonedDateTime38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(zonedDateTime41);
        org.junit.Assert.assertNotNull(localDate43);
        org.junit.Assert.assertNotNull(offsetTime44);
        org.junit.Assert.assertNotNull(localTime45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "23:59:59.999999999-18:00" + "'", str46, "23:59:59.999999999-18:00");
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "PT0S" + "'", str48, "PT0S");
        org.junit.Assert.assertNotNull(offsetTime49);
        org.junit.Assert.assertNotNull(localTime50);
        org.junit.Assert.assertNotNull(wildcardChronoLocalDateTime51);
        org.junit.Assert.assertNotNull(localDate53);
        org.junit.Assert.assertNotNull(offsetTime54);
        org.junit.Assert.assertNotNull(localTime55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "23:59:59.999999999-18:00" + "'", str56, "23:59:59.999999999-18:00");
        org.junit.Assert.assertNotNull(duration57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "PT0S" + "'", str58, "PT0S");
        org.junit.Assert.assertNotNull(offsetTime59);
        org.junit.Assert.assertNotNull(offsetTime61);
        org.junit.Assert.assertNotNull(localTime66);
        org.junit.Assert.assertNotNull(localTime67);
        org.junit.Assert.assertTrue("'" + chronoField68 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField68.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime70);
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "NanoOfDay" + "'", str72, "NanoOfDay");
        org.junit.Assert.assertNotNull(offsetTime74);
        org.junit.Assert.assertNotNull(offsetDateTime75);
        org.junit.Assert.assertNotNull(offsetDateTime76);
        org.junit.Assert.assertTrue("'" + chronoField77 + "' != '" + java.time.temporal.ChronoField.HOUR_OF_DAY + "'", chronoField77.equals(java.time.temporal.ChronoField.HOUR_OF_DAY));
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNotNull(valueRange79);
        org.junit.Assert.assertNotNull(zonedDateTime81);
        org.junit.Assert.assertNotNull(localTime82);
    }

    @Test
    public void test6389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6389");
        java.time.DayOfWeek dayOfWeek0 = java.time.DayOfWeek.MONDAY;
        java.time.DayOfWeek dayOfWeek2 = dayOfWeek0.plus((long) 8);
        java.time.OffsetDateTime offsetDateTime3 = java.time.OffsetDateTime.now();
        java.time.LocalDate localDate5 = java.time.LocalDate.ofEpochDay((long) ' ');
        int int6 = localDate5.getMonthValue();
        org.joda.time.Period period7 = org.joda.time.Period.ZERO;
        org.joda.time.Period period8 = period7.normalizedStandard();
        org.joda.time.Period period10 = period7.plusHours(2);
        java.time.chrono.IsoEra isoEra11 = java.time.chrono.IsoEra.CE;
        boolean boolean12 = period10.equals((java.lang.Object) isoEra11);
        java.time.LocalTime localTime17 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime18 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime17);
        java.time.LocalTime localTime23 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime24 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime23);
        java.time.temporal.ChronoField chronoField25 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime27 = localTime23.with((java.time.temporal.TemporalField) chronoField25, (long) (short) 1);
        long long28 = localTime17.getLong((java.time.temporal.TemporalField) chronoField25);
        boolean boolean29 = isoEra11.isSupported((java.time.temporal.TemporalField) chronoField25);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery30 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period31 = isoEra11.query(periodTemporalQuery30);
        boolean boolean32 = period31.isNegative();
        java.time.Period period34 = period31.plusDays((long) ' ');
        java.time.temporal.ChronoField chronoField35 = java.time.temporal.ChronoField.SECOND_OF_DAY;
        boolean boolean36 = period31.equals((java.lang.Object) chronoField35);
        boolean boolean37 = localDate5.isSupported((java.time.temporal.TemporalField) chronoField35);
        boolean boolean38 = offsetDateTime3.isSupported((java.time.temporal.TemporalField) chronoField35);
        java.time.OffsetDateTime offsetDateTime40 = offsetDateTime3.minusMonths((long) 16);
        java.time.OffsetDateTime offsetDateTime42 = offsetDateTime3.withNano(306);
        java.time.temporal.Temporal temporal43 = dayOfWeek0.adjustInto((java.time.temporal.Temporal) offsetDateTime3);
        // The following exception was thrown during execution in test generation
        try {
            java.time.chrono.ChronoZonedDateTime<?> wildcardChronoZonedDateTime44 = java.time.chrono.ChronoZonedDateTime.from((java.time.temporal.TemporalAccessor) dayOfWeek0);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Unable to obtain ChronoZonedDateTime from TemporalAccessor: class java.time.DayOfWeek");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + dayOfWeek0 + "' != '" + java.time.DayOfWeek.MONDAY + "'", dayOfWeek0.equals(java.time.DayOfWeek.MONDAY));
        org.junit.Assert.assertTrue("'" + dayOfWeek2 + "' != '" + java.time.DayOfWeek.TUESDAY + "'", dayOfWeek2.equals(java.time.DayOfWeek.TUESDAY));
        org.junit.Assert.assertNotNull(offsetDateTime3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertTrue("'" + isoEra11 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra11.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertNotNull(localTime23);
        org.junit.Assert.assertNotNull(localTime24);
        org.junit.Assert.assertTrue("'" + chronoField25 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField25.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime27);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 3601000000001L + "'", long28 == 3601000000001L);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(periodTemporalQuery30);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertTrue("'" + chronoField35 + "' != '" + java.time.temporal.ChronoField.SECOND_OF_DAY + "'", chronoField35.equals(java.time.temporal.ChronoField.SECOND_OF_DAY));
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(offsetDateTime40);
        org.junit.Assert.assertNotNull(offsetDateTime42);
        org.junit.Assert.assertNotNull(temporal43);
    }

    @Test
    public void test6390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6390");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        int int1 = localDate0.getCenturyOfEra();
        org.joda.time.LocalDate.Property property2 = localDate0.dayOfWeek();
        org.joda.time.LocalDate.Property property3 = localDate0.centuryOfEra();
        org.joda.time.LocalDate localDate4 = property3.roundHalfEvenCopy();
        org.joda.time.LocalDate localDate5 = property3.roundHalfFloorCopy();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate7 = localDate5.withWeekOfWeekyear((-10800001));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -10800001 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 20 + "'", int1 == 20);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate5);
    }

    @Test
    public void test6391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6391");
        java.util.stream.Stream<java.lang.Object> objStream0 = java.util.stream.Stream.empty();
        java.util.stream.Stream<java.lang.Object> objStream1 = objStream0.parallel();
        java.util.stream.Stream<java.lang.Object> objStream2 = objStream0.unordered();
        java.util.stream.Stream<java.lang.Object> objStream4 = objStream0.skip(4924800047L);
        java.util.Iterator<java.lang.Object> objItor5 = objStream4.iterator();
        java.util.stream.Stream<java.lang.Object> objStream6 = objStream4.parallel();
        java.util.stream.Stream<java.lang.Object> objStream7 = objStream6.unordered();
        objStream6.close();
        org.junit.Assert.assertNotNull(objStream0);
        org.junit.Assert.assertNotNull(objStream1);
        org.junit.Assert.assertNotNull(objStream2);
        org.junit.Assert.assertNotNull(objStream4);
        org.junit.Assert.assertNotNull(objItor5);
        org.junit.Assert.assertNotNull(objStream6);
        org.junit.Assert.assertNotNull(objStream7);
    }

    @Test
    public void test6392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6392");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.now();
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery1 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period2 = localDateTime0.query(periodTemporalQuery1);
        java.time.chrono.IsoChronology isoChronology3 = period2.getChronology();
        java.util.GregorianCalendar gregorianCalendar9 = new java.util.GregorianCalendar(12, 4096, 7, (-1), (int) (short) 10);
        int int10 = gregorianCalendar9.getWeeksInWeekYear();
        java.lang.String str11 = gregorianCalendar9.getCalendarType();
        java.time.ZonedDateTime zonedDateTime12 = gregorianCalendar9.toZonedDateTime();
        java.util.GregorianCalendar gregorianCalendar18 = new java.util.GregorianCalendar(12, 4096, 7, (-1), (int) (short) 10);
        int int19 = gregorianCalendar18.getWeeksInWeekYear();
        java.lang.String str20 = gregorianCalendar18.getCalendarType();
        java.time.ZonedDateTime zonedDateTime21 = gregorianCalendar18.toZonedDateTime();
        int int22 = zonedDateTime12.compareTo((java.time.chrono.ChronoZonedDateTime<java.time.LocalDate>) zonedDateTime21);
        java.time.ZonedDateTime zonedDateTime24 = zonedDateTime12.plusDays((long) 2022);
        java.time.Instant instant25 = zonedDateTime12.toInstant();
        java.time.Period period27 = java.time.Period.ofMonths(0);
        java.time.ZonedDateTime zonedDateTime28 = zonedDateTime12.minus((java.time.temporal.TemporalAmount) period27);
        java.time.LocalTime localTime29 = zonedDateTime12.toLocalTime();
        java.time.temporal.ChronoField chronoField30 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        int int31 = zonedDateTime12.get((java.time.temporal.TemporalField) chronoField30);
        java.time.temporal.ValueRange valueRange32 = isoChronology3.range(chronoField30);
        java.time.OffsetTime offsetTime33 = java.time.OffsetTime.MAX;
        java.time.LocalTime localTime34 = offsetTime33.toLocalTime();
        java.time.LocalTime localTime39 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime40 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime39);
        java.time.LocalTime localTime45 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime46 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime45);
        java.time.temporal.ChronoField chronoField47 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime49 = localTime45.with((java.time.temporal.TemporalField) chronoField47, (long) (short) 1);
        long long50 = localTime39.getLong((java.time.temporal.TemporalField) chronoField47);
        java.time.LocalTime localTime52 = localTime39.withSecond((int) (short) 1);
        int int53 = localTime52.getMinute();
        java.time.LocalTime localTime55 = localTime52.plusHours((long) (-1));
        java.time.OffsetTime offsetTime56 = offsetTime33.with((java.time.temporal.TemporalAdjuster) localTime52);
        java.time.OffsetTime offsetTime58 = offsetTime33.minusHours((long) 3);
        java.time.OffsetTime offsetTime60 = offsetTime33.minusNanos(19044L);
        // The following exception was thrown during execution in test generation
        try {
            java.time.OffsetTime offsetTime62 = chronoField30.adjustInto(offsetTime60, 1645436347011L);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for AlignedWeekOfYear (valid values 1 - 53): 1645436347011");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(periodTemporalQuery1);
        org.junit.Assert.assertNotNull(period2);
        org.junit.Assert.assertNotNull(isoChronology3);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 52 + "'", int10 == 52);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "gregory" + "'", str11, "gregory");
        org.junit.Assert.assertNotNull(zonedDateTime12);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 52 + "'", int19 == 52);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "gregory" + "'", str20, "gregory");
        org.junit.Assert.assertNotNull(zonedDateTime21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(zonedDateTime24);
        org.junit.Assert.assertNotNull(instant25);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(zonedDateTime28);
        org.junit.Assert.assertNotNull(localTime29);
        org.junit.Assert.assertTrue("'" + chronoField30 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField30.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 19 + "'", int31 == 19);
        org.junit.Assert.assertNotNull(valueRange32);
        org.junit.Assert.assertNotNull(offsetTime33);
        org.junit.Assert.assertNotNull(localTime34);
        org.junit.Assert.assertNotNull(localTime39);
        org.junit.Assert.assertNotNull(localTime40);
        org.junit.Assert.assertNotNull(localTime45);
        org.junit.Assert.assertNotNull(localTime46);
        org.junit.Assert.assertTrue("'" + chronoField47 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField47.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime49);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 3601000000001L + "'", long50 == 3601000000001L);
        org.junit.Assert.assertNotNull(localTime52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(localTime55);
        org.junit.Assert.assertNotNull(offsetTime56);
        org.junit.Assert.assertNotNull(offsetTime58);
        org.junit.Assert.assertNotNull(offsetTime60);
    }

    @Test
    public void test6393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6393");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds((long) 13);
        org.junit.Assert.assertNotNull(duration1);
    }

    @Test
    public void test6394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6394");
        java.io.PrintStream printStream1 = new java.io.PrintStream("subject:\n (GERMAN)");
        printStream1.write((int) '#');
        java.util.GregorianCalendar gregorianCalendar9 = new java.util.GregorianCalendar(12, 4096, 7, (-1), (int) (short) 10);
        int int10 = gregorianCalendar9.getWeeksInWeekYear();
        java.util.TimeZone timeZone11 = gregorianCalendar9.getTimeZone();
        int int13 = gregorianCalendar9.getMaximum((int) (short) 10);
        printStream1.print((java.lang.Object) gregorianCalendar9);
        java.util.GregorianCalendar gregorianCalendar21 = new java.util.GregorianCalendar(12, 4096, 7, (-1), (int) (short) 10);
        int int22 = gregorianCalendar21.getWeeksInWeekYear();
        org.joda.time.YearMonthDay yearMonthDay23 = org.joda.time.YearMonthDay.fromCalendarFields((java.util.Calendar) gregorianCalendar21);
        org.joda.time.YearMonthDay yearMonthDay25 = yearMonthDay23.withYear(0);
        org.joda.time.DateTimeField[] dateTimeFieldArray26 = yearMonthDay25.getFields();
        java.io.PrintStream printStream27 = printStream1.format("java.nio.HeapByteBufferR[pos=0 lim=0 cap=0]", (java.lang.Object[]) dateTimeFieldArray26);
        java.io.PrintStream printStream29 = printStream27.append('#');
        printStream27.print("19");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 52 + "'", int10 == 52);
        org.junit.Assert.assertNotNull(timeZone11);
        org.junit.Assert.assertEquals(timeZone11.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 11 + "'", int13 == 11);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 52 + "'", int22 == 52);
        org.junit.Assert.assertNotNull(yearMonthDay23);
        org.junit.Assert.assertNotNull(yearMonthDay25);
        org.junit.Assert.assertNotNull(dateTimeFieldArray26);
        org.junit.Assert.assertNotNull(printStream27);
        org.junit.Assert.assertNotNull(printStream29);
    }

    @Test
    public void test6395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6395");
        java.util.Locale locale0 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str1 = locale0.toLanguageTag();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "zh-CN" + "'", str1, "zh-CN");
    }

    @Test
    public void test6396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6396");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MIN;
        java.time.Month month1 = java.time.Month.NOVEMBER;
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime2 = localDateTime0.with((java.time.temporal.TemporalAdjuster) month1);
        org.joda.time.Period period3 = org.joda.time.Period.ZERO;
        org.joda.time.Period period4 = period3.normalizedStandard();
        org.joda.time.Period period6 = period3.plusHours(2);
        java.time.chrono.IsoEra isoEra7 = java.time.chrono.IsoEra.CE;
        boolean boolean8 = period6.equals((java.lang.Object) isoEra7);
        java.time.LocalTime localTime13 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime14 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime13);
        java.time.LocalTime localTime19 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime20 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime19);
        java.time.temporal.ChronoField chronoField21 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime23 = localTime19.with((java.time.temporal.TemporalField) chronoField21, (long) (short) 1);
        long long24 = localTime13.getLong((java.time.temporal.TemporalField) chronoField21);
        boolean boolean25 = isoEra7.isSupported((java.time.temporal.TemporalField) chronoField21);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery26 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period27 = isoEra7.query(periodTemporalQuery26);
        java.time.format.TextStyle textStyle28 = java.time.format.TextStyle.NARROW_STANDALONE;
        org.joda.time.tz.NameProvider nameProvider29 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.LocalTime localTime33 = new org.joda.time.LocalTime((long) 0, chronology32);
        org.joda.time.Chronology chronology34 = localTime33.getChronology();
        org.joda.time.DateTimeField dateTimeField35 = chronology34.weekyearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime36 = org.joda.time.MutableDateTime.now(chronology34);
        org.joda.time.DateTimeField dateTimeField37 = chronology34.monthOfYear();
        java.util.Locale locale38 = java.util.Locale.getDefault();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket40 = new org.joda.time.format.DateTimeParserBucket((long) 28, chronology34, locale38, (java.lang.Integer) 0);
        java.lang.String str43 = nameProvider29.getShortName(locale38, "22", "Chinese");
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime((long) 3, chronology45);
        org.joda.time.DateTime.Property property47 = dateTime46.dayOfYear();
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.DateMidnight dateMidnight49 = new org.joda.time.DateMidnight((java.lang.Object) dateTime46, chronology48);
        org.joda.time.MutableDateTime mutableDateTime50 = dateTime46.toMutableDateTime();
        mutableDateTime50.addYears((int) (short) 100);
        org.joda.time.MutableDateTime.Property property53 = mutableDateTime50.dayOfWeek();
        org.joda.time.MutableDateTime.Property property54 = mutableDateTime50.year();
        java.util.TimeZone timeZone55 = null;
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.forTimeZone(timeZone55);
        mutableDateTime50.setZone(dateTimeZone56);
        java.util.Locale locale59 = java.util.Locale.TAIWAN;
        java.lang.String str60 = dateTimeZone56.getShortName((long) 64, locale59);
        java.lang.String str63 = nameProvider29.getName(locale59, "P1W", "Wochentag");
        java.time.format.DecimalStyle decimalStyle64 = java.time.format.DecimalStyle.of(locale59);
        java.lang.String str65 = isoEra7.getDisplayName(textStyle28, locale59);
        java.util.Locale locale66 = java.util.Locale.JAPANESE;
        java.lang.String str67 = month1.getDisplayName(textStyle28, locale66);
        boolean boolean68 = textStyle28.isStandalone();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertTrue("'" + month1 + "' != '" + java.time.Month.NOVEMBER + "'", month1.equals(java.time.Month.NOVEMBER));
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime2);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertTrue("'" + isoEra7 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra7.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertTrue("'" + chronoField21 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField21.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime23);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 3601000000001L + "'", long24 == 3601000000001L);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(periodTemporalQuery26);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertTrue("'" + textStyle28 + "' != '" + java.time.format.TextStyle.NARROW_STANDALONE + "'", textStyle28.equals(java.time.format.TextStyle.NARROW_STANDALONE));
        org.junit.Assert.assertNotNull(nameProvider29);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(mutableDateTime36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(locale38);
// flaky:         org.junit.Assert.assertEquals(locale38.toString(), "");
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(mutableDateTime50);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(dateTimeZone56);
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "+00:00" + "'", str60, "+00:00");
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertNotNull(decimalStyle64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "1" + "'", str65, "1");
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "11" + "'", str67, "11");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
    }

    @Test
    public void test6397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6397");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        org.joda.time.Chronology chronology4 = dateTimeFormatter3.getChronolgy();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight5 = org.joda.time.DateMidnight.parse("0117-01-11", dateTimeFormatter3);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(chronology4);
    }

    @Test
    public void test6398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6398");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str4 = dateTimeFormatter2.print(0L);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
    }

    @Test
    public void test6399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6399");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((long) 0, chronology2);
        org.joda.time.Chronology chronology4 = localTime3.getChronology();
        java.util.Locale locale5 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale locale6 = java.util.Locale.GERMANY;
        java.lang.String str7 = locale5.getDisplayScript(locale6);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket9 = new org.joda.time.format.DateTimeParserBucket((long) 1970, chronology4, locale5, (java.lang.Integer) 1);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.LocalTime localTime12 = new org.joda.time.LocalTime((long) 0, chronology11);
        org.joda.time.Chronology chronology13 = localTime12.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.weekyearOfCentury();
        org.joda.time.DurationField durationField15 = dateTimeField14.getLeapDurationField();
        dateTimeParserBucket9.saveField(dateTimeField14, (int) 'u');
        java.util.Locale locale19 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str20 = dateTimeField14.getAsShortText((int) 'u', locale19);
        boolean boolean21 = dateTimeField14.isSupported();
        java.util.Locale locale26 = new java.util.Locale("ParseCaseSensitive(false)(Value(Year,4,10,EXCEEDS_PAD)'-'Value(MonthOfYear,2)'-'Value(DayOfMonth,2))[Offset(+HH:MM:ss,'Z')]", "UNDERFLOW", "Years");
        java.lang.String str27 = dateTimeField14.getAsText((long) 14, locale26);
        boolean boolean28 = dateTimeField14.isLenient();
        int int31 = dateTimeField14.getDifference(34971827000000L, (long) (-4));
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNull(durationField15);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "117" + "'", str20, "117");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertEquals(locale26.toString(), "parsecasesensitive(false)(value(year,4,10,exceeds_pad)'-'value(monthofyear,2)'-'value(dayofmonth,2))[offset(+hh:mm:ss,'z')]_UNDERFLOW_Years");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "70" + "'", str27, "70");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1108 + "'", int31 == 1108);
    }

    @Test
    public void test6400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6400");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 3, chronology1);
        org.joda.time.DateTime.Property property3 = dateTime2.dayOfYear();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight((java.lang.Object) dateTime2, chronology4);
        org.joda.time.MutableDateTime mutableDateTime6 = dateTime2.toMutableDateTime();
        mutableDateTime6.addYears((int) (short) 100);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime6.dayOfWeek();
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime6.year();
        java.util.TimeZone timeZone11 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        mutableDateTime6.setZone(dateTimeZone12);
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime6.minuteOfHour();
        org.joda.time.MutableDateTime mutableDateTime15 = property14.roundHalfCeiling();
        org.joda.time.MutableDateTime.Property property16 = mutableDateTime15.weekyear();
        long long17 = mutableDateTime15.getMillis();
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.Duration duration20 = new org.joda.time.Duration(readableInstant18, readableInstant19);
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.PeriodType periodType22 = null;
        org.joda.time.Period period23 = duration20.toPeriodTo(readableInstant21, periodType22);
        long long24 = duration20.getStandardSeconds();
        mutableDateTime15.add((org.joda.time.ReadableDuration) duration20, 1969);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 3155760000000L + "'", long17 == 3155760000000L);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
    }

    @Test
    public void test6401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6401");
        java.net.URI uRI1 = new java.net.URI("hi!");
        java.lang.String str2 = uRI1.getRawAuthority();
        java.lang.String str3 = uRI1.toASCIIString();
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "hi!" + "'", str3, "hi!");
    }

    @Test
    public void test6402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6402");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withSecondOfMinute(275);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 275 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
    }

    @Test
    public void test6403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6403");
        org.joda.time.Period period0 = org.joda.time.Period.ZERO;
        org.joda.time.Period period1 = period0.normalizedStandard();
        org.joda.time.Period period3 = period0.plusHours(2);
        org.joda.time.Period period5 = period0.plusDays((-2));
        org.junit.Assert.assertNotNull(period0);
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(period5);
    }

    @Test
    public void test6404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6404");
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.Duration duration3 = new org.joda.time.Duration(readableInstant1, readableInstant2);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.PeriodType periodType5 = null;
        org.joda.time.Period period6 = duration3.toPeriodTo(readableInstant4, periodType5);
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.Duration duration9 = new org.joda.time.Duration(readableInstant7, readableInstant8);
        long long10 = duration9.getMillis();
        boolean boolean11 = duration3.isShorterThan((org.joda.time.ReadableDuration) duration9);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) 3, chronology13);
        org.joda.time.DateTime.Property property15 = dateTime14.dayOfYear();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight((java.lang.Object) dateTime14, chronology16);
        org.joda.time.MutableDateTime mutableDateTime18 = dateTime14.toMutableDateTime();
        mutableDateTime18.addYears((int) (short) 100);
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime18.dayOfWeek();
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime18.year();
        org.joda.time.MutableDateTime.Property property23 = mutableDateTime18.weekyear();
        boolean boolean24 = duration3.equals((java.lang.Object) mutableDateTime18);
        mutableDateTime18.addMonths((int) ' ');
        mutableDateTime18.add((long) (byte) 10);
        org.joda.time.Period period29 = org.joda.time.Period.ZERO;
        org.joda.time.Period period30 = period29.normalizedStandard();
        org.joda.time.Period period32 = period29.plusHours(2);
        java.time.chrono.IsoEra isoEra33 = java.time.chrono.IsoEra.CE;
        boolean boolean34 = period32.equals((java.lang.Object) isoEra33);
        int int35 = period32.getMinutes();
        mutableDateTime18.add((org.joda.time.ReadablePeriod) period32);
        java.util.TimeZone timeZone38 = null;
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forTimeZone(timeZone38);
        org.joda.time.DateMidnight dateMidnight40 = new org.joda.time.DateMidnight((long) 1970, dateTimeZone39);
        long long43 = dateTimeZone39.convertLocalToUTC((long) 3, false);
        long long46 = dateTimeZone39.convertLocalToUTC(0L, true);
        mutableDateTime18.setZoneRetainFields(dateTimeZone39);
        java.lang.String str48 = dateTimeZone39.toString();
        org.joda.time.chrono.EthiopicChronology ethiopicChronology49 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone39);
        org.joda.time.DateTimeField dateTimeField50 = ethiopicChronology49.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone51 = ethiopicChronology49.getZone();
        org.joda.time.DateTimeField dateTimeField52 = ethiopicChronology49.centuryOfEra();
        java.util.Locale locale53 = java.util.Locale.KOREA;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket55 = new org.joda.time.format.DateTimeParserBucket(1645401600000L, (org.joda.time.Chronology) ethiopicChronology49, locale53, (java.lang.Integer) 4);
        org.joda.time.DateTimeField dateTimeField56 = ethiopicChronology49.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField57 = ethiopicChronology49.weekOfWeekyear();
        org.joda.time.LocalDate localDate58 = new org.joda.time.LocalDate();
        int int59 = localDate58.getCenturyOfEra();
        org.joda.time.LocalDate.Property property60 = localDate58.dayOfWeek();
        org.joda.time.LocalDate localDate62 = property60.addToCopy(7);
        org.joda.time.LocalDate localDate63 = property60.roundCeilingCopy();
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.DateTime dateTime66 = new org.joda.time.DateTime((long) 3, chronology65);
        org.joda.time.DateTime.Property property67 = dateTime66.dayOfYear();
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.DateMidnight dateMidnight69 = new org.joda.time.DateMidnight((java.lang.Object) dateTime66, chronology68);
        org.joda.time.MutableDateTime mutableDateTime70 = dateTime66.toMutableDateTime();
        mutableDateTime70.addYears((int) (short) 100);
        org.joda.time.MutableDateTime.Property property73 = mutableDateTime70.dayOfWeek();
        org.joda.time.MutableDateTime.Property property74 = mutableDateTime70.year();
        java.util.TimeZone timeZone75 = null;
        org.joda.time.DateTimeZone dateTimeZone76 = org.joda.time.DateTimeZone.forTimeZone(timeZone75);
        mutableDateTime70.setZone(dateTimeZone76);
        java.util.Locale locale79 = java.util.Locale.TAIWAN;
        java.lang.String str80 = dateTimeZone76.getShortName((long) 64, locale79);
        java.util.Locale locale82 = java.util.Locale.FRANCE;
        java.lang.String str83 = dateTimeZone76.getName(86400000L, locale82);
        org.joda.time.DateTime dateTime84 = localDate63.toDateTimeAtMidnight(dateTimeZone76);
        long long86 = ethiopicChronology49.set((org.joda.time.ReadablePartial) localDate63, 5L);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(mutableDateTime18);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertTrue("'" + isoEra33 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra33.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 3L + "'", long43 == 3L);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "Etc/UTC" + "'", str48, "Etc/UTC");
        org.junit.Assert.assertNotNull(ethiopicChronology49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 20 + "'", int59 == 20);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertNotNull(localDate62);
        org.junit.Assert.assertNotNull(localDate63);
        org.junit.Assert.assertNotNull(property67);
        org.junit.Assert.assertNotNull(mutableDateTime70);
        org.junit.Assert.assertNotNull(property73);
        org.junit.Assert.assertNotNull(property74);
        org.junit.Assert.assertNotNull(dateTimeZone76);
        org.junit.Assert.assertNotNull(locale79);
        org.junit.Assert.assertEquals(locale79.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "+00:00" + "'", str80, "+00:00");
        org.junit.Assert.assertNotNull(locale82);
        org.junit.Assert.assertEquals(locale82.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "+00:00" + "'", str83, "+00:00");
        org.junit.Assert.assertNotNull(dateTime84);
        org.junit.Assert.assertTrue("'" + long86 + "' != '" + 1888099200005L + "'", long86 == 1888099200005L);
    }

    @Test
    public void test6405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6405");
        java.io.OutputStream outputStream0 = null;
        java.io.FilterOutputStream filterOutputStream1 = new java.io.FilterOutputStream(outputStream0);
        java.io.PrintWriter printWriter3 = new java.io.PrintWriter((java.io.OutputStream) filterOutputStream1, true);
        printWriter3.print((float) 1645434616L);
    }

    @Test
    public void test6406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6406");
        java.io.File file2 = java.io.File.createTempFile("PT3600S", "secondOfMinute");
        java.io.File file3 = file2.getCanonicalFile();
        java.io.File file4 = file3.getAbsoluteFile();
        file3.deleteOnExit();
        boolean boolean6 = file3.mkdir();
        org.junit.Assert.assertNotNull(file2);
        org.junit.Assert.assertEquals(file2.getParent(), "/tmp");
// flaky:         org.junit.Assert.assertEquals(file2.toString(), "/tmp/PT3600S1294988519305147538secondOfMinute");
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "/tmp");
// flaky:         org.junit.Assert.assertEquals(file3.toString(), "/tmp/PT3600S1294988519305147538secondOfMinute");
        org.junit.Assert.assertNotNull(file4);
        org.junit.Assert.assertEquals(file4.getParent(), "/tmp");
// flaky:         org.junit.Assert.assertEquals(file4.toString(), "/tmp/PT3600S1294988519305147538secondOfMinute");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test6407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6407");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 3, chronology1);
        org.joda.time.Period period3 = org.joda.time.Period.ZERO;
        org.joda.time.Period period4 = period3.normalizedStandard();
        org.joda.time.Period period6 = period4.minusMinutes((int) ' ');
        org.joda.time.Period period8 = period6.minusMonths((int) (byte) 0);
        org.joda.time.PeriodType periodType9 = period8.getPeriodType();
        org.joda.time.DateTime dateTime10 = dateTime2.minus((org.joda.time.ReadablePeriod) period8);
        org.joda.time.DateTime dateTime12 = dateTime2.plusHours(34);
        org.joda.time.DateTime dateTime14 = dateTime12.minusSeconds((int) '#');
        org.joda.time.Period period19 = new org.joda.time.Period((int) '#', 0, 2, (int) (short) 100);
        org.joda.time.Period period21 = period19.withSeconds(12);
        int int22 = period21.getMillis();
        org.joda.time.DateTime dateTime23 = dateTime14.plus((org.joda.time.ReadablePeriod) period21);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((long) 3, chronology25);
        org.joda.time.DateTime.Property property27 = dateTime26.dayOfYear();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((long) 3, chronology29);
        org.joda.time.DateTime.Property property31 = dateTime30.dayOfYear();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.DateMidnight dateMidnight33 = new org.joda.time.DateMidnight((java.lang.Object) dateTime30, chronology32);
        org.joda.time.DateMidnight dateMidnight35 = dateMidnight33.minusMonths((-1));
        org.joda.time.DateMidnight dateMidnight37 = dateMidnight33.withDayOfYear((int) ' ');
        int int38 = dateMidnight33.getWeekOfWeekyear();
        long long39 = property27.getDifferenceAsLong((org.joda.time.ReadableInstant) dateMidnight33);
        org.joda.time.Interval interval40 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period21, (org.joda.time.ReadableInstant) dateMidnight33);
        org.joda.time.Chronology chronology41 = interval40.getChronology();
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 100 + "'", int22 == 100);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(dateMidnight35);
        org.junit.Assert.assertNotNull(dateMidnight37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertNotNull(chronology41);
    }

    @Test
    public void test6408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6408");
        java.time.Duration duration1 = java.time.Duration.ofMinutes((long) 3);
        java.time.Duration duration2 = duration1.abs();
        int int3 = duration2.getNano();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.LocalTime localTime6 = new org.joda.time.LocalTime((long) 0, chronology5);
        org.joda.time.LocalTime localTime8 = localTime6.minusMillis(2022);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.monthOfYear();
        boolean boolean10 = localTime8.isSupported(dateTimeFieldType9);
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = org.joda.time.DateTimeFieldType.centuryOfEra();
        int int12 = localTime8.indexOf(dateTimeFieldType11);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.LocalTime localTime15 = new org.joda.time.LocalTime((long) 0, chronology14);
        org.joda.time.LocalTime localTime17 = localTime15.minusMillis(2022);
        org.joda.time.LocalTime localTime19 = localTime15.plusMillis((int) (byte) 0);
        org.joda.time.LocalTime localTime20 = localTime8.withFields((org.joda.time.ReadablePartial) localTime19);
        boolean boolean21 = duration2.equals((java.lang.Object) localTime20);
        java.time.OffsetDateTime offsetDateTime23 = java.time.OffsetDateTime.now();
        java.time.LocalDate localDate25 = java.time.LocalDate.ofEpochDay((long) ' ');
        int int26 = localDate25.getMonthValue();
        org.joda.time.Period period27 = org.joda.time.Period.ZERO;
        org.joda.time.Period period28 = period27.normalizedStandard();
        org.joda.time.Period period30 = period27.plusHours(2);
        java.time.chrono.IsoEra isoEra31 = java.time.chrono.IsoEra.CE;
        boolean boolean32 = period30.equals((java.lang.Object) isoEra31);
        java.time.LocalTime localTime37 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime38 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime37);
        java.time.LocalTime localTime43 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime44 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime43);
        java.time.temporal.ChronoField chronoField45 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime47 = localTime43.with((java.time.temporal.TemporalField) chronoField45, (long) (short) 1);
        long long48 = localTime37.getLong((java.time.temporal.TemporalField) chronoField45);
        boolean boolean49 = isoEra31.isSupported((java.time.temporal.TemporalField) chronoField45);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery50 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period51 = isoEra31.query(periodTemporalQuery50);
        boolean boolean52 = period51.isNegative();
        java.time.Period period54 = period51.plusDays((long) ' ');
        java.time.temporal.ChronoField chronoField55 = java.time.temporal.ChronoField.SECOND_OF_DAY;
        boolean boolean56 = period51.equals((java.lang.Object) chronoField55);
        boolean boolean57 = localDate25.isSupported((java.time.temporal.TemporalField) chronoField55);
        java.time.temporal.TemporalUnit temporalUnit58 = chronoField55.getRangeUnit();
        java.time.OffsetDateTime offsetDateTime59 = offsetDateTime23.truncatedTo(temporalUnit58);
        java.time.Duration duration60 = duration2.plus((long) 11, temporalUnit58);
        java.time.Duration duration62 = duration2.plusMinutes(1645434629L);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(offsetDateTime23);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertTrue("'" + isoEra31 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra31.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(localTime37);
        org.junit.Assert.assertNotNull(localTime38);
        org.junit.Assert.assertNotNull(localTime43);
        org.junit.Assert.assertNotNull(localTime44);
        org.junit.Assert.assertTrue("'" + chronoField45 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField45.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime47);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 3601000000001L + "'", long48 == 3601000000001L);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(periodTemporalQuery50);
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(period54);
        org.junit.Assert.assertTrue("'" + chronoField55 + "' != '" + java.time.temporal.ChronoField.SECOND_OF_DAY + "'", chronoField55.equals(java.time.temporal.ChronoField.SECOND_OF_DAY));
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + temporalUnit58 + "' != '" + java.time.temporal.ChronoUnit.DAYS + "'", temporalUnit58.equals(java.time.temporal.ChronoUnit.DAYS));
        org.junit.Assert.assertNotNull(offsetDateTime59);
        org.junit.Assert.assertNotNull(duration60);
        org.junit.Assert.assertNotNull(duration62);
    }

    @Test
    public void test6409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6409");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        org.joda.time.MutableDateTime.Property property1 = mutableDateTime0.era();
        org.joda.time.MutableDateTime mutableDateTime2 = property1.roundFloor();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(mutableDateTime2);
    }

    @Test
    public void test6410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6410");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.time.LocalTime localTime6 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime7 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime6);
        java.time.LocalTime localTime12 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime13 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime12);
        java.time.temporal.ChronoField chronoField14 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime16 = localTime12.with((java.time.temporal.TemporalField) chronoField14, (long) (short) 1);
        long long17 = localTime6.getLong((java.time.temporal.TemporalField) chronoField14);
        java.time.LocalTime localTime19 = localTime6.withSecond((int) (short) 1);
        java.lang.Object obj21 = properties1.put((java.lang.Object) localTime19, (java.lang.Object) "117");
        boolean boolean23 = properties1.containsValue((java.lang.Object) 6);
        java.time.LocalDate localDate26 = java.time.LocalDate.ofEpochDay((long) ' ');
        int int27 = localDate26.getMonthValue();
        java.lang.Object obj28 = properties1.replace((java.lang.Object) 21, (java.lang.Object) localDate26);
        java.time.LocalDateTime localDateTime29 = java.time.LocalDateTime.MIN;
        java.time.Month month30 = java.time.Month.NOVEMBER;
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime31 = localDateTime29.with((java.time.temporal.TemporalAdjuster) month30);
        java.time.LocalDate localDate34 = java.time.LocalDate.ofEpochDay((long) ' ');
        int int35 = localDate34.getMonthValue();
        org.joda.time.Period period36 = org.joda.time.Period.ZERO;
        org.joda.time.Period period37 = period36.normalizedStandard();
        org.joda.time.Period period39 = period36.plusHours(2);
        java.time.chrono.IsoEra isoEra40 = java.time.chrono.IsoEra.CE;
        boolean boolean41 = period39.equals((java.lang.Object) isoEra40);
        java.time.LocalTime localTime46 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime47 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime46);
        java.time.LocalTime localTime52 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime53 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime52);
        java.time.temporal.ChronoField chronoField54 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime56 = localTime52.with((java.time.temporal.TemporalField) chronoField54, (long) (short) 1);
        long long57 = localTime46.getLong((java.time.temporal.TemporalField) chronoField54);
        boolean boolean58 = isoEra40.isSupported((java.time.temporal.TemporalField) chronoField54);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery59 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period60 = isoEra40.query(periodTemporalQuery59);
        boolean boolean61 = period60.isNegative();
        java.time.Period period63 = period60.plusDays((long) ' ');
        java.time.temporal.ChronoField chronoField64 = java.time.temporal.ChronoField.SECOND_OF_DAY;
        boolean boolean65 = period60.equals((java.lang.Object) chronoField64);
        boolean boolean66 = localDate34.isSupported((java.time.temporal.TemporalField) chronoField64);
        java.time.temporal.TemporalUnit temporalUnit67 = chronoField64.getRangeUnit();
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime68 = localDateChronoLocalDateTime31.plus(1L, temporalUnit67);
        boolean boolean69 = localDate26.isSupported(temporalUnit67);
        java.time.Duration duration70 = java.time.Duration.ZERO;
        java.time.Duration duration72 = duration70.minusHours((long) 8);
        java.time.Duration duration74 = duration70.minusDays((long) 17);
        java.time.LocalDate localDate75 = localDate26.plus((java.time.temporal.TemporalAmount) duration70);
        java.time.chrono.IsoChronology isoChronology76 = localDate26.getChronology();
        java.time.LocalDate localDate78 = localDate26.plusYears(4096L);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertTrue("'" + chronoField14 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField14.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 3601000000001L + "'", long17 == 3601000000001L);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertNull(obj21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2 + "'", int27 == 2);
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertTrue("'" + month30 + "' != '" + java.time.Month.NOVEMBER + "'", month30.equals(java.time.Month.NOVEMBER));
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime31);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2 + "'", int35 == 2);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertTrue("'" + isoEra40 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra40.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(localTime46);
        org.junit.Assert.assertNotNull(localTime47);
        org.junit.Assert.assertNotNull(localTime52);
        org.junit.Assert.assertNotNull(localTime53);
        org.junit.Assert.assertTrue("'" + chronoField54 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField54.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime56);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 3601000000001L + "'", long57 == 3601000000001L);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(periodTemporalQuery59);
        org.junit.Assert.assertNotNull(period60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(period63);
        org.junit.Assert.assertTrue("'" + chronoField64 + "' != '" + java.time.temporal.ChronoField.SECOND_OF_DAY + "'", chronoField64.equals(java.time.temporal.ChronoField.SECOND_OF_DAY));
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + temporalUnit67 + "' != '" + java.time.temporal.ChronoUnit.DAYS + "'", temporalUnit67.equals(java.time.temporal.ChronoUnit.DAYS));
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(duration70);
        org.junit.Assert.assertNotNull(duration72);
        org.junit.Assert.assertNotNull(duration74);
        org.junit.Assert.assertNotNull(localDate75);
        org.junit.Assert.assertNotNull(isoChronology76);
        org.junit.Assert.assertNotNull(localDate78);
    }

    @Test
    public void test6411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6411");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 3, chronology1);
        org.joda.time.DateTime.Property property3 = dateTime2.dayOfYear();
        org.joda.time.Interval interval4 = property3.toInterval();
        org.joda.time.DateTimeField dateTimeField5 = property3.getField();
        org.joda.time.DateTime dateTime7 = property3.addToCopy((long) (byte) 1);
        org.joda.time.DateTime dateTime9 = dateTime7.withYear(4);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) 3, chronology11);
        org.joda.time.Period period13 = org.joda.time.Period.ZERO;
        org.joda.time.Period period14 = period13.normalizedStandard();
        org.joda.time.Period period16 = period14.minusMinutes((int) ' ');
        org.joda.time.Period period18 = period16.minusMonths((int) (byte) 0);
        org.joda.time.PeriodType periodType19 = period18.getPeriodType();
        org.joda.time.DateTime dateTime20 = dateTime12.minus((org.joda.time.ReadablePeriod) period18);
        org.joda.time.Duration duration21 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.DateTime dateTime22 = dateTime9.withTimeAtStartOfDay();
        java.util.TimeZone timeZone23 = null;
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forTimeZone(timeZone23);
        java.util.TimeZone timeZone26 = null;
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forTimeZone(timeZone26);
        org.joda.time.DateMidnight dateMidnight28 = new org.joda.time.DateMidnight((long) 1970, dateTimeZone27);
        long long31 = dateTimeZone27.convertLocalToUTC((long) 3, false);
        long long33 = dateTimeZone24.getMillisKeepLocal(dateTimeZone27, (long) ':');
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime((java.lang.Object) dateTime9, dateTimeZone27);
        int int35 = dateTime34.getCenturyOfEra();
        org.joda.time.DateTime dateTime37 = dateTime34.withDayOfYear(365);
        org.joda.time.LocalTime localTime38 = dateTime37.toLocalTime();
        int int39 = localTime38.getMillisOfSecond();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(periodType19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 3L + "'", long31 == 3L);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 58L + "'", long33 == 58L);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(localTime38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 3 + "'", int39 == 3);
    }

    @Test
    public void test6412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6412");
        java.nio.charset.Charset charset0 = java.nio.charset.Charset.defaultCharset();
        java.nio.charset.CharsetDecoder charsetDecoder1 = charset0.newDecoder();
        float float2 = charsetDecoder1.maxCharsPerByte();
        java.nio.charset.Charset charset3 = java.nio.charset.Charset.defaultCharset();
        java.nio.charset.CharsetDecoder charsetDecoder4 = charset3.newDecoder();
        java.nio.charset.Charset charset5 = java.nio.charset.Charset.defaultCharset();
        boolean boolean6 = charset3.contains(charset5);
        java.nio.charset.CharsetEncoder charsetEncoder7 = charset3.newEncoder();
        char[] charArray8 = new char[] {};
        java.nio.CharBuffer charBuffer9 = java.nio.CharBuffer.wrap(charArray8);
        java.nio.ByteBuffer byteBuffer10 = charsetEncoder7.encode(charBuffer9);
        char[] charArray17 = new char[] { '#', '/', '4', 'a', '4', 'u' };
        java.nio.CharBuffer charBuffer18 = java.nio.CharBuffer.wrap(charArray17);
        java.nio.charset.CoderResult coderResult20 = charsetDecoder1.decode(byteBuffer10, charBuffer18, false);
        java.nio.ByteBuffer byteBuffer21 = byteBuffer10.asReadOnlyBuffer();
        java.nio.ByteOrder byteOrder22 = byteBuffer21.order();
        org.junit.Assert.assertNotNull(charset0);
        org.junit.Assert.assertNotNull(charsetDecoder1);
        org.junit.Assert.assertTrue("'" + float2 + "' != '" + 1.0f + "'", float2 == 1.0f);
        org.junit.Assert.assertNotNull(charset3);
        org.junit.Assert.assertNotNull(charsetDecoder4);
        org.junit.Assert.assertNotNull(charset5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(charsetEncoder7);
        org.junit.Assert.assertNotNull(charArray8);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray8), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray8), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray8), "[]");
        org.junit.Assert.assertNotNull(charBuffer9);
        org.junit.Assert.assertNotNull(byteBuffer10);
        org.junit.Assert.assertNotNull(charArray17);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray17), "#/4a4u");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray17), "#/4a4u");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray17), "[#, /, 4, a, 4, u]");
        org.junit.Assert.assertNotNull(charBuffer18);
        org.junit.Assert.assertNotNull(coderResult20);
        org.junit.Assert.assertNotNull(byteBuffer21);
        org.junit.Assert.assertNotNull(byteOrder22);
    }

    @Test
    public void test6413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6413");
        java.io.File file1 = null;
        java.io.File file3 = new java.io.File(file1, "1970-01-01T00:00:00.003Z");
        java.net.URL uRL4 = file3.toURL();
        java.io.File file5 = null;
        java.io.File file7 = new java.io.File(file5, "1970-01-01T00:00:00.003Z");
        java.net.URL uRL8 = file7.toURL();
        boolean boolean9 = uRL4.sameFile(uRL8);
        java.lang.String str10 = uRL4.getPath();
        java.net.URLConnection uRLConnection11 = uRL4.openConnection();
        java.lang.String str12 = uRLConnection11.getContentType();
        long long15 = uRLConnection11.getHeaderFieldLong("zh-TW", 57L);
        uRLConnection11.setReadTimeout(13);
        java.security.Permission permission18 = uRLConnection11.getPermission();
        java.security.AccessControlException accessControlException19 = new java.security.AccessControlException("parsecasesensitive(false)(value(year,4,10,exceeds_pad)'-'value(monthofyear,2)'-'value(dayofmonth,2))[offset(+hh:mm:ss,'z')]", permission18);
        java.security.Permission permission20 = accessControlException19.getPermission();
        java.time.chrono.IsoEra isoEra22 = java.time.chrono.IsoEra.of(0);
        boolean boolean23 = permission20.equals((java.lang.Object) 0);
        org.junit.Assert.assertNull("file3.getParent() == null", file3.getParent());
        org.junit.Assert.assertEquals(file3.toString(), "1970-01-01T00:00:00.003Z");
        org.junit.Assert.assertNotNull(uRL4);
// flaky:         org.junit.Assert.assertEquals(uRL4.toString(), "file:/experiment/1970-01-01T00:00:00.003Z");
        org.junit.Assert.assertNull("file7.getParent() == null", file7.getParent());
        org.junit.Assert.assertEquals(file7.toString(), "1970-01-01T00:00:00.003Z");
        org.junit.Assert.assertNotNull(uRL8);
// flaky:         org.junit.Assert.assertEquals(uRL8.toString(), "file:/experiment/1970-01-01T00:00:00.003Z");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "/experiment/1970-01-01T00:00:00.003Z" + "'", str10, "/experiment/1970-01-01T00:00:00.003Z");
        org.junit.Assert.assertNotNull(uRLConnection11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "content/unknown" + "'", str12, "content/unknown");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 57L + "'", long15 == 57L);
        org.junit.Assert.assertNotNull(permission18);
        org.junit.Assert.assertNotNull(permission20);
        org.junit.Assert.assertTrue("'" + isoEra22 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra22.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test6414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6414");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 3, chronology1);
        org.joda.time.DateTime.Property property3 = dateTime2.dayOfYear();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight((java.lang.Object) dateTime2, chronology4);
        org.joda.time.MutableDateTime mutableDateTime6 = dateTime2.toMutableDateTime();
        mutableDateTime6.addYears((int) (short) 100);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime6.dayOfWeek();
        int int10 = property9.get();
        org.joda.time.MutableDateTime mutableDateTime11 = property9.roundHalfCeiling();
        org.joda.time.MutableDateTime mutableDateTime12 = mutableDateTime11.copy();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 3 + "'", int10 == 3);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(mutableDateTime12);
    }

    @Test
    public void test6415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6415");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.time.LocalTime localTime6 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime7 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime6);
        java.time.LocalTime localTime12 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime13 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime12);
        java.time.temporal.ChronoField chronoField14 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime16 = localTime12.with((java.time.temporal.TemporalField) chronoField14, (long) (short) 1);
        long long17 = localTime6.getLong((java.time.temporal.TemporalField) chronoField14);
        java.time.LocalTime localTime19 = localTime6.withSecond((int) (short) 1);
        java.lang.Object obj21 = properties1.put((java.lang.Object) localTime19, (java.lang.Object) "117");
        java.util.Enumeration<java.lang.Object> objEnumeration22 = properties1.elements();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) 3, chronology24);
        org.joda.time.DateTime.Property property26 = dateTime25.dayOfYear();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.DateMidnight dateMidnight28 = new org.joda.time.DateMidnight((java.lang.Object) dateTime25, chronology27);
        org.joda.time.DateMidnight.Property property29 = dateMidnight28.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight30 = property29.roundCeilingCopy();
        org.joda.time.DateMidnight dateMidnight32 = property29.setCopy("1");
        boolean boolean33 = properties1.containsValue((java.lang.Object) "1");
        java.io.Reader reader34 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.load(reader34);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertTrue("'" + chronoField14 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField14.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 3601000000001L + "'", long17 == 3601000000001L);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertNull(obj21);
        org.junit.Assert.assertNotNull(objEnumeration22);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(dateMidnight30);
        org.junit.Assert.assertNotNull(dateMidnight32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test6416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6416");
        java.util.stream.LongStream longStream1 = java.util.stream.LongStream.of(0L);
        java.util.stream.LongStream longStream2 = longStream1.unordered();
        java.util.stream.DoubleStream doubleStream3 = longStream2.asDoubleStream();
        java.util.DoubleSummaryStatistics doubleSummaryStatistics4 = new java.util.DoubleSummaryStatistics();
        java.util.stream.DoubleStream doubleStream5 = java.util.stream.DoubleStream.empty();
        java.util.stream.DoubleStream doubleStream6 = doubleStream5.unordered();
        double[] doubleArray7 = doubleStream5.toArray();
        java.nio.DoubleBuffer doubleBuffer8 = java.nio.DoubleBuffer.wrap(doubleArray7);
        java.util.stream.DoubleStream doubleStream9 = java.util.stream.DoubleStream.of(doubleArray7);
        java.util.DoubleSummaryStatistics doubleSummaryStatistics10 = new java.util.DoubleSummaryStatistics();
        doubleSummaryStatistics10.accept((double) 97);
        doubleStream9.forEachOrdered((java.util.function.DoubleConsumer) doubleSummaryStatistics10);
        doubleSummaryStatistics4.combine(doubleSummaryStatistics10);
        doubleStream3.forEachOrdered((java.util.function.DoubleConsumer) doubleSummaryStatistics4);
        org.junit.Assert.assertNotNull(longStream1);
        org.junit.Assert.assertNotNull(longStream2);
        org.junit.Assert.assertNotNull(doubleStream3);
        org.junit.Assert.assertEquals(doubleSummaryStatistics4.toString(), "DoubleSummaryStatistics{count=2, sum=97.000000, min=0.000000, average=48.500000, max=97.000000}");
        org.junit.Assert.assertNotNull(doubleStream5);
        org.junit.Assert.assertNotNull(doubleStream6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(doubleBuffer8);
        org.junit.Assert.assertNotNull(doubleStream9);
        org.junit.Assert.assertEquals(doubleSummaryStatistics10.toString(), "DoubleSummaryStatistics{count=1, sum=97.000000, min=97.000000, average=97.000000, max=97.000000}");
    }

    @Test
    public void test6417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6417");
        org.joda.time.Period period0 = org.joda.time.Period.ZERO;
        org.joda.time.Period period1 = period0.normalizedStandard();
        org.joda.time.Period period3 = period1.minusMinutes((int) ' ');
        org.joda.time.Period period5 = period3.minusMonths((int) (byte) 0);
        org.joda.time.Minutes minutes6 = period5.toStandardMinutes();
        org.joda.time.Days days7 = minutes6.toStandardDays();
        org.junit.Assert.assertNotNull(period0);
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(minutes6);
        org.junit.Assert.assertNotNull(days7);
    }

    @Test
    public void test6418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6418");
        java.io.PrintStream printStream1 = new java.io.PrintStream("subject:\n (GERMAN)");
        printStream1.write((int) '#');
        java.util.GregorianCalendar gregorianCalendar9 = new java.util.GregorianCalendar(12, 4096, 7, (-1), (int) (short) 10);
        int int10 = gregorianCalendar9.getWeeksInWeekYear();
        java.util.TimeZone timeZone11 = gregorianCalendar9.getTimeZone();
        int int13 = gregorianCalendar9.getMaximum((int) (short) 10);
        printStream1.print((java.lang.Object) gregorianCalendar9);
        printStream1.println((long) 20);
        printStream1.print((double) (-10));
        char[] charArray24 = new char[] { ':', '\000', ' ', 'u', 'x' };
        printStream1.print(charArray24);
        printStream1.write((-201));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 52 + "'", int10 == 52);
        org.junit.Assert.assertNotNull(timeZone11);
        org.junit.Assert.assertEquals(timeZone11.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 11 + "'", int13 == 11);
        org.junit.Assert.assertNotNull(charArray24);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray24), ":\000 ux");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray24), ":\000 ux");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray24), "[:, \000,  , u, x]");
    }

    @Test
    public void test6419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6419");
        java.time.Duration duration1 = java.time.Duration.ofMinutes((long) 3);
        java.time.Duration duration2 = duration1.abs();
        java.time.Duration duration4 = duration2.plusMinutes(0L);
        boolean boolean5 = duration4.isZero();
        long long6 = duration4.toDays();
        java.time.Duration duration8 = duration4.withSeconds((long) 11);
        java.time.Duration duration10 = duration4.plusMinutes(1645434659L);
        java.time.LocalTime localTime15 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime16 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime15);
        java.time.LocalTime localTime21 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime22 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime21);
        java.time.temporal.ChronoField chronoField23 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime25 = localTime21.with((java.time.temporal.TemporalField) chronoField23, (long) (short) 1);
        long long26 = localTime15.getLong((java.time.temporal.TemporalField) chronoField23);
        java.time.LocalTime localTime28 = localTime15.withSecond((int) (short) 1);
        java.time.temporal.ChronoField chronoField29 = java.time.temporal.ChronoField.SECOND_OF_DAY;
        java.time.temporal.ValueRange valueRange30 = localTime28.range((java.time.temporal.TemporalField) chronoField29);
        java.time.Duration duration32 = java.time.Duration.ofSeconds((long) 0);
        java.time.LocalTime localTime33 = localTime28.plus((java.time.temporal.TemporalAmount) duration32);
        java.time.Duration duration35 = duration32.plusDays((long) (short) 1);
        java.time.Duration duration37 = duration32.plusSeconds((long) 16);
        java.time.Duration duration38 = duration10.plus(duration32);
        java.time.Duration duration40 = duration32.plusHours((-62135596800000L));
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration2);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertTrue("'" + chronoField23 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField23.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime25);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 3601000000001L + "'", long26 == 3601000000001L);
        org.junit.Assert.assertNotNull(localTime28);
        org.junit.Assert.assertTrue("'" + chronoField29 + "' != '" + java.time.temporal.ChronoField.SECOND_OF_DAY + "'", chronoField29.equals(java.time.temporal.ChronoField.SECOND_OF_DAY));
        org.junit.Assert.assertNotNull(valueRange30);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(localTime33);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(duration40);
    }

    @Test
    public void test6420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6420");
        java.time.format.DecimalStyle decimalStyle0 = java.time.format.DecimalStyle.STANDARD;
        java.time.format.DecimalStyle decimalStyle2 = decimalStyle0.withNegativeSign('/');
        java.time.format.DecimalStyle decimalStyle4 = decimalStyle0.withPositiveSign('\uffff');
        java.util.GregorianCalendar gregorianCalendar10 = new java.util.GregorianCalendar(12, 4096, 7, (-1), (int) (short) 10);
        int int11 = gregorianCalendar10.getWeeksInWeekYear();
        java.lang.String str12 = gregorianCalendar10.getCalendarType();
        java.time.ZonedDateTime zonedDateTime13 = gregorianCalendar10.toZonedDateTime();
        java.util.GregorianCalendar gregorianCalendar19 = new java.util.GregorianCalendar(12, 4096, 7, (-1), (int) (short) 10);
        int int20 = gregorianCalendar19.getWeeksInWeekYear();
        java.lang.String str21 = gregorianCalendar19.getCalendarType();
        java.time.ZonedDateTime zonedDateTime22 = gregorianCalendar19.toZonedDateTime();
        int int23 = zonedDateTime13.compareTo((java.time.chrono.ChronoZonedDateTime<java.time.LocalDate>) zonedDateTime22);
        java.time.ZonedDateTime zonedDateTime25 = zonedDateTime13.plusDays((long) 2022);
        java.time.Instant instant26 = zonedDateTime13.toInstant();
        java.time.chrono.Chronology chronology27 = zonedDateTime13.getChronology();
        java.util.GregorianCalendar gregorianCalendar33 = new java.util.GregorianCalendar(12, 4096, 7, (-1), (int) (short) 10);
        int int34 = gregorianCalendar33.getWeeksInWeekYear();
        java.lang.String str35 = gregorianCalendar33.getCalendarType();
        java.time.ZonedDateTime zonedDateTime36 = gregorianCalendar33.toZonedDateTime();
        java.time.ZonedDateTime zonedDateTime38 = zonedDateTime36.minusMonths((long) 10);
        boolean boolean39 = zonedDateTime13.isBefore((java.time.chrono.ChronoZonedDateTime<java.time.LocalDate>) zonedDateTime38);
        java.time.OffsetDateTime offsetDateTime40 = java.time.OffsetDateTime.from((java.time.temporal.TemporalAccessor) zonedDateTime13);
        java.time.temporal.ChronoField chronoField41 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        java.time.OffsetDateTime offsetDateTime43 = offsetDateTime40.with((java.time.temporal.TemporalField) chronoField41, (long) 17);
        boolean boolean44 = decimalStyle0.equals((java.lang.Object) offsetDateTime40);
        int int45 = offsetDateTime40.getMinute();
        java.time.format.DateTimeFormatter dateTimeFormatter46 = java.time.format.DateTimeFormatter.ISO_DATE;
        java.lang.String str47 = offsetDateTime40.format(dateTimeFormatter46);
        java.time.OffsetDateTime offsetDateTime49 = offsetDateTime40.withMinute(56);
        java.lang.String str50 = offsetDateTime49.toString();
        org.junit.Assert.assertNotNull(decimalStyle0);
        org.junit.Assert.assertNotNull(decimalStyle2);
        org.junit.Assert.assertNotNull(decimalStyle4);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "gregory" + "'", str12, "gregory");
        org.junit.Assert.assertNotNull(zonedDateTime13);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 52 + "'", int20 == 52);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "gregory" + "'", str21, "gregory");
        org.junit.Assert.assertNotNull(zonedDateTime22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(zonedDateTime25);
        org.junit.Assert.assertNotNull(instant26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 52 + "'", int34 == 52);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "gregory" + "'", str35, "gregory");
        org.junit.Assert.assertNotNull(zonedDateTime36);
        org.junit.Assert.assertNotNull(zonedDateTime38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(offsetDateTime40);
        org.junit.Assert.assertTrue("'" + chronoField41 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField41.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertNotNull(offsetDateTime43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int45 + "' != '" + 9 + "'", int45 == 9);
        org.junit.Assert.assertNotNull(dateTimeFormatter46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "0353-05-07Z" + "'", str47, "0353-05-07Z");
        org.junit.Assert.assertNotNull(offsetDateTime49);
// flaky:         org.junit.Assert.assertEquals("'" + str50 + "' != '" + "0353-05-07T23:56:59.965Z" + "'", str50, "0353-05-07T23:56:59.965Z");
    }

    @Test
    public void test6421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6421");
        java.util.GregorianCalendar gregorianCalendar5 = new java.util.GregorianCalendar(12, 4096, 7, (-1), (int) (short) 10);
        int int6 = gregorianCalendar5.getWeeksInWeekYear();
        java.lang.String str7 = gregorianCalendar5.getCalendarType();
        java.time.ZonedDateTime zonedDateTime8 = gregorianCalendar5.toZonedDateTime();
        java.time.Instant instant9 = gregorianCalendar5.toInstant();
        org.joda.time.LocalDateTime localDateTime10 = org.joda.time.LocalDateTime.fromCalendarFields((java.util.Calendar) gregorianCalendar5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 52 + "'", int6 == 52);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "gregory" + "'", str7, "gregory");
        org.junit.Assert.assertNotNull(zonedDateTime8);
        org.junit.Assert.assertNotNull(instant9);
        org.junit.Assert.assertNotNull(localDateTime10);
    }

    @Test
    public void test6422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6422");
        java.util.stream.Stream.Builder<java.io.OutputStream> outputStreamBuilder0 = java.util.stream.Stream.builder();
        java.util.stream.Stream.Builder<java.io.OutputStream> outputStreamBuilder1 = java.util.stream.Stream.builder();
        java.util.function.Consumer<java.io.OutputStream> outputStreamConsumer2 = outputStreamBuilder0.andThen((java.util.function.Consumer<java.io.OutputStream>) outputStreamBuilder1);
        java.io.PrintStream printStream4 = new java.io.PrintStream("subject:\n (GERMAN)");
        java.util.stream.Stream.Builder<java.io.OutputStream> outputStreamBuilder5 = outputStreamBuilder1.add((java.io.OutputStream) printStream4);
        java.io.PrintWriter printWriter6 = new java.io.PrintWriter((java.io.OutputStream) printStream4);
        java.io.PrintWriter printWriter7 = new java.io.PrintWriter((java.io.Writer) printWriter6);
        org.joda.time.Weeks weeks9 = org.joda.time.Weeks.ONE;
        java.util.concurrent.TimeUnit timeUnit10 = java.util.concurrent.TimeUnit.NANOSECONDS;
        boolean boolean11 = weeks9.equals((java.lang.Object) timeUnit10);
        org.joda.time.MutablePeriod mutablePeriod12 = weeks9.toMutablePeriod();
        int int13 = mutablePeriod12.getSeconds();
        mutablePeriod12.addHours((int) 'a');
        org.joda.time.DurationFieldType[] durationFieldTypeArray16 = mutablePeriod12.getFieldTypes();
        java.io.PrintWriter printWriter17 = printWriter7.format("P1W", (java.lang.Object[]) durationFieldTypeArray16);
        java.util.Set<java.lang.String> strSet19 = java.time.ZoneId.getAvailableZoneIds();
        java.util.Set<java.lang.String> strSet20 = java.time.ZoneId.getAvailableZoneIds();
        java.util.stream.Stream<java.lang.String> strStream21 = strSet20.parallelStream();
        java.lang.Object[] objArray22 = strSet20.toArray();
        java.util.Spliterator<java.lang.String> strSpliterator23 = strSet20.spliterator();
        boolean boolean24 = strSet19.containsAll((java.util.Collection<java.lang.String>) strSet20);
        boolean boolean26 = strSet19.add("gregory");
        java.lang.Object[] objArray27 = strSet19.toArray();
        java.io.PrintWriter printWriter28 = printWriter7.printf("8", objArray27);
        org.junit.Assert.assertNotNull(outputStreamBuilder0);
        org.junit.Assert.assertNotNull(outputStreamBuilder1);
        org.junit.Assert.assertNotNull(outputStreamConsumer2);
        org.junit.Assert.assertNotNull(outputStreamBuilder5);
        org.junit.Assert.assertNotNull(weeks9);
        org.junit.Assert.assertNotNull(timeUnit10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(mutablePeriod12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(durationFieldTypeArray16);
        org.junit.Assert.assertNotNull(printWriter17);
        org.junit.Assert.assertNotNull(strSet19);
        org.junit.Assert.assertNotNull(strSet20);
        org.junit.Assert.assertNotNull(strStream21);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertNotNull(strSpliterator23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertNotNull(printWriter28);
    }

    @Test
    public void test6423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6423");
        java.net.SocketException socketException1 = new java.net.SocketException("IntSummaryStatistics{count=0, sum=0, min=2147483647, average=0.000000, max=-2147483648}");
        java.util.stream.Stream<java.io.IOException> iOExceptionStream2 = java.util.stream.Stream.of((java.io.IOException) socketException1);
        java.security.SignatureException signatureException3 = new java.security.SignatureException((java.lang.Throwable) socketException1);
        org.junit.Assert.assertNotNull(iOExceptionStream2);
    }

    @Test
    public void test6424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6424");
        java.util.stream.Stream<java.lang.Object> objStream0 = java.util.stream.Stream.empty();
        java.lang.Object[] objArray1 = objStream0.toArray();
        java.lang.Runnable runnable2 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Stream<java.lang.Object> objStream3 = objStream0.onClose(runnable2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objStream0);
        org.junit.Assert.assertNotNull(objArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray1), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray1), "[]");
    }

    @Test
    public void test6425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6425");
        java.io.File file0 = null;
        java.io.File file2 = new java.io.File(file0, "1970-01-01T00:00:00.003Z");
        java.net.URL uRL3 = file2.toURL();
        boolean boolean4 = file2.canRead();
        java.nio.file.Path path5 = file2.toPath();
        java.nio.file.Path path6 = path5.toAbsolutePath();
        java.io.File file7 = path6.toFile();
        java.io.File file8 = file7.getAbsoluteFile();
        org.junit.Assert.assertNull("file2.getParent() == null", file2.getParent());
        org.junit.Assert.assertEquals(file2.toString(), "1970-01-01T00:00:00.003Z");
        org.junit.Assert.assertNotNull(uRL3);
// flaky:         org.junit.Assert.assertEquals(uRL3.toString(), "file:/experiment/1970-01-01T00:00:00.003Z");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(path5);
        org.junit.Assert.assertNotNull(path6);
        org.junit.Assert.assertNotNull(file7);
// flaky:         org.junit.Assert.assertEquals(file7.getParent(), "/experiment");
// flaky:         org.junit.Assert.assertEquals(file7.toString(), "/experiment/1970-01-01T00:00:00.003Z");
        org.junit.Assert.assertNotNull(file8);
// flaky:         org.junit.Assert.assertEquals(file8.getParent(), "/experiment");
// flaky:         org.junit.Assert.assertEquals(file8.toString(), "/experiment/1970-01-01T00:00:00.003Z");
    }

    @Test
    public void test6426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6426");
        java.util.OptionalDouble optionalDouble1 = java.util.OptionalDouble.of((double) 999999999L);
        org.junit.Assert.assertNotNull(optionalDouble1);
    }

    @Test
    public void test6427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6427");
        java.text.Format.Field field0 = null;
        java.text.FieldPosition fieldPosition1 = new java.text.FieldPosition(field0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.Duration duration4 = new org.joda.time.Duration(readableInstant2, readableInstant3);
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.PeriodType periodType6 = null;
        org.joda.time.Period period7 = duration4.toPeriodTo(readableInstant5, periodType6);
        org.joda.time.Days days8 = period7.toStandardDays();
        boolean boolean9 = fieldPosition1.equals((java.lang.Object) days8);
        int int10 = fieldPosition1.getBeginIndex();
        int int11 = fieldPosition1.getEndIndex();
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(days8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    public void test6428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6428");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.Duration duration2 = new org.joda.time.Duration(readableInstant0, readableInstant1);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = duration2.toPeriodTo(readableInstant3, periodType4);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.Duration duration8 = new org.joda.time.Duration(readableInstant6, readableInstant7);
        long long9 = duration8.getMillis();
        boolean boolean10 = duration2.isShorterThan((org.joda.time.ReadableDuration) duration8);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) 3, chronology12);
        org.joda.time.DateTime.Property property14 = dateTime13.dayOfYear();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight((java.lang.Object) dateTime13, chronology15);
        org.joda.time.MutableDateTime mutableDateTime17 = dateTime13.toMutableDateTime();
        mutableDateTime17.addYears((int) (short) 100);
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime17.dayOfWeek();
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime17.year();
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime17.weekyear();
        boolean boolean23 = duration2.equals((java.lang.Object) mutableDateTime17);
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.Duration duration26 = new org.joda.time.Duration(readableInstant24, readableInstant25);
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.PeriodType periodType28 = null;
        org.joda.time.Period period29 = duration26.toPeriodTo(readableInstant27, periodType28);
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.Duration duration32 = new org.joda.time.Duration(readableInstant30, readableInstant31);
        long long33 = duration32.getMillis();
        boolean boolean34 = duration26.isShorterThan((org.joda.time.ReadableDuration) duration32);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime((long) 3, chronology36);
        org.joda.time.DateTime.Property property38 = dateTime37.dayOfYear();
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.DateMidnight dateMidnight40 = new org.joda.time.DateMidnight((java.lang.Object) dateTime37, chronology39);
        org.joda.time.MutableDateTime mutableDateTime41 = dateTime37.toMutableDateTime();
        mutableDateTime41.addYears((int) (short) 100);
        org.joda.time.MutableDateTime.Property property44 = mutableDateTime41.dayOfWeek();
        org.joda.time.MutableDateTime.Property property45 = mutableDateTime41.year();
        org.joda.time.MutableDateTime.Property property46 = mutableDateTime41.weekyear();
        boolean boolean47 = duration26.equals((java.lang.Object) mutableDateTime41);
        mutableDateTime41.addMonths((int) ' ');
        mutableDateTime41.add((long) (byte) 10);
        org.joda.time.Period period52 = org.joda.time.Period.ZERO;
        org.joda.time.Period period53 = period52.normalizedStandard();
        org.joda.time.Period period55 = period52.plusHours(2);
        java.time.chrono.IsoEra isoEra56 = java.time.chrono.IsoEra.CE;
        boolean boolean57 = period55.equals((java.lang.Object) isoEra56);
        int int58 = period55.getMinutes();
        mutableDateTime41.add((org.joda.time.ReadablePeriod) period55);
        org.joda.time.MutablePeriod mutablePeriod60 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration2, (org.joda.time.ReadableInstant) mutableDateTime41);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime41.setMinuteOfDay(2070);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2070 for minuteOfDay must be in the range [0,1439]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(mutableDateTime41);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(period52);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertNotNull(period55);
        org.junit.Assert.assertTrue("'" + isoEra56 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra56.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
    }

    @Test
    public void test6429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6429");
        java.util.MissingResourceException missingResourceException4 = new java.util.MissingResourceException("22", "", "hours");
        java.util.InvalidPropertiesFormatException invalidPropertiesFormatException5 = new java.util.InvalidPropertiesFormatException((java.lang.Throwable) missingResourceException4);
        java.security.PrivilegedActionException privilegedActionException6 = new java.security.PrivilegedActionException((java.lang.Exception) missingResourceException4);
        java.security.NoSuchAlgorithmException noSuchAlgorithmException7 = new java.security.NoSuchAlgorithmException("weekOfWeekyear", (java.lang.Throwable) privilegedActionException6);
        java.io.IOException iOException8 = new java.io.IOException((java.lang.Throwable) privilegedActionException6);
        java.lang.String str9 = privilegedActionException6.toString();
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "java.security.PrivilegedActionException: java.util.MissingResourceException: 22" + "'", str9, "java.security.PrivilegedActionException: java.util.MissingResourceException: 22");
    }

    @Test
    public void test6430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6430");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.dayOfMonth();
        org.joda.time.DurationFieldType durationFieldType1 = dateTimeFieldType0.getRangeDurationType();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(durationFieldType1);
    }

    @Test
    public void test6431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6431");
        // The following exception was thrown during execution in test generation
        try {
            java.time.OffsetTime offsetTime1 = java.time.OffsetTime.parse((java.lang.CharSequence) "Tue, 6 May 0003 23:59:59 GMT");
            org.junit.Assert.fail("Expected exception of type java.time.format.DateTimeParseException; message: Text 'Tue, 6 May 0003 23:59:59 GMT' could not be parsed at index 0");
        } catch (java.time.format.DateTimeParseException e) {
            // Expected exception.
        }
    }

    @Test
    public void test6432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6432");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.Duration duration2 = new org.joda.time.Duration(readableInstant0, readableInstant1);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = duration2.toPeriodTo(readableInstant3, periodType4);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.Duration duration8 = new org.joda.time.Duration(readableInstant6, readableInstant7);
        long long9 = duration8.getMillis();
        boolean boolean10 = duration2.isShorterThan((org.joda.time.ReadableDuration) duration8);
        long long11 = duration2.getMillis();
        java.time.LocalDateTime localDateTime12 = java.time.LocalDateTime.now();
        java.time.LocalDateTime localDateTime14 = localDateTime12.minusYears((long) (byte) 10);
        java.time.LocalDateTime localDateTime15 = java.time.LocalDateTime.now();
        java.time.LocalDateTime localDateTime17 = localDateTime15.minusYears((long) (byte) 10);
        boolean boolean18 = localDateTime12.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime17);
        java.time.LocalDateTime localDateTime20 = localDateTime17.withSecond((int) '+');
        java.time.LocalDateTime localDateTime22 = localDateTime20.minusWeeks((long) 57);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) 3, chronology24);
        org.joda.time.Period period26 = org.joda.time.Period.ZERO;
        org.joda.time.Period period27 = period26.normalizedStandard();
        org.joda.time.Period period29 = period27.minusMinutes((int) ' ');
        org.joda.time.Period period31 = period29.minusMonths((int) (byte) 0);
        org.joda.time.PeriodType periodType32 = period31.getPeriodType();
        org.joda.time.DateTime dateTime33 = dateTime25.minus((org.joda.time.ReadablePeriod) period31);
        org.joda.time.DateTime dateTime35 = dateTime25.plusHours(34);
        org.joda.time.DateTime dateTime37 = dateTime25.plusMonths(5);
        org.joda.time.DateTime dateTime39 = dateTime25.minusHours((int) (byte) 10);
        boolean boolean40 = localDateTime20.equals((java.lang.Object) dateTime39);
        org.joda.time.Period period41 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration2, (org.joda.time.ReadableInstant) dateTime39);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(periodType32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test6433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6433");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.nio.LongBuffer longBuffer3 = java.nio.LongBuffer.allocate((int) (short) 0);
        java.nio.Buffer buffer4 = longBuffer3.mark();
        boolean boolean5 = properties1.containsKey((java.lang.Object) longBuffer3);
        java.util.Map<java.lang.String, java.lang.String> strMap6 = java.time.ZoneId.SHORT_IDS;
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        boolean boolean8 = strMap6.containsValue((java.lang.Object) dateTimeFieldType7);
        properties1.putAll(strMap6);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime(chronology10);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.withYearOfCentury((int) 'a');
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.plusSeconds(6);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime13.withWeekyear(10);
        org.joda.time.LocalDateTime.Property property18 = localDateTime13.millisOfSecond();
        java.lang.String str19 = strMap6.get((java.lang.Object) localDateTime13);
        java.time.temporal.ChronoField chronoField20 = java.time.temporal.ChronoField.NANO_OF_SECOND;
        java.time.OffsetTime offsetTime21 = java.time.OffsetTime.MAX;
        java.time.LocalTime localTime22 = offsetTime21.toLocalTime();
        java.lang.String str23 = offsetTime21.toString();
        java.time.temporal.ValueRange valueRange24 = chronoField20.rangeRefinedBy((java.time.temporal.TemporalAccessor) offsetTime21);
        boolean boolean25 = strMap6.equals((java.lang.Object) chronoField20);
        java.util.Properties properties26 = null;
        java.util.Properties properties27 = new java.util.Properties(properties26);
        java.nio.LongBuffer longBuffer29 = java.nio.LongBuffer.allocate((int) (short) 0);
        java.nio.Buffer buffer30 = longBuffer29.mark();
        boolean boolean31 = properties27.containsKey((java.lang.Object) longBuffer29);
        java.util.Map<java.lang.String, java.lang.String> strMap32 = java.time.ZoneId.SHORT_IDS;
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        boolean boolean34 = strMap32.containsValue((java.lang.Object) dateTimeFieldType33);
        properties27.putAll(strMap32);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime(chronology36);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime37.withYearOfCentury((int) 'a');
        org.joda.time.LocalDateTime localDateTime41 = localDateTime39.plusSeconds(6);
        org.joda.time.LocalDateTime localDateTime43 = localDateTime39.withWeekyear(10);
        org.joda.time.LocalDateTime.Property property44 = localDateTime39.millisOfSecond();
        java.lang.String str45 = strMap32.get((java.lang.Object) localDateTime39);
        java.time.temporal.ChronoField chronoField46 = java.time.temporal.ChronoField.NANO_OF_SECOND;
        java.time.OffsetTime offsetTime47 = java.time.OffsetTime.MAX;
        java.time.LocalTime localTime48 = offsetTime47.toLocalTime();
        java.lang.String str49 = offsetTime47.toString();
        java.time.temporal.ValueRange valueRange50 = chronoField46.rangeRefinedBy((java.time.temporal.TemporalAccessor) offsetTime47);
        boolean boolean51 = strMap32.equals((java.lang.Object) chronoField46);
        java.lang.Object obj52 = null;
        boolean boolean53 = strMap32.equals(obj52);
        boolean boolean54 = strMap32.isEmpty();
        // The following exception was thrown during execution in test generation
        try {
            strMap6.putAll(strMap32);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(longBuffer3);
        org.junit.Assert.assertNotNull(buffer4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertTrue("'" + chronoField20 + "' != '" + java.time.temporal.ChronoField.NANO_OF_SECOND + "'", chronoField20.equals(java.time.temporal.ChronoField.NANO_OF_SECOND));
        org.junit.Assert.assertNotNull(offsetTime21);
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "23:59:59.999999999-18:00" + "'", str23, "23:59:59.999999999-18:00");
        org.junit.Assert.assertNotNull(valueRange24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(longBuffer29);
        org.junit.Assert.assertNotNull(buffer30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(strMap32);
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertTrue("'" + chronoField46 + "' != '" + java.time.temporal.ChronoField.NANO_OF_SECOND + "'", chronoField46.equals(java.time.temporal.ChronoField.NANO_OF_SECOND));
        org.junit.Assert.assertNotNull(offsetTime47);
        org.junit.Assert.assertNotNull(localTime48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "23:59:59.999999999-18:00" + "'", str49, "23:59:59.999999999-18:00");
        org.junit.Assert.assertNotNull(valueRange50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test6434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6434");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 3, chronology1);
        org.joda.time.DateTime.Property property3 = dateTime2.dayOfYear();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight((java.lang.Object) dateTime2, chronology4);
        org.joda.time.MutableDateTime mutableDateTime6 = dateTime2.toMutableDateTime();
        mutableDateTime6.addYears((int) (short) 100);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime6.dayOfWeek();
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime6.year();
        org.joda.time.MutableDateTime.Property property11 = mutableDateTime6.weekyear();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) 3, chronology13);
        org.joda.time.Period period15 = org.joda.time.Period.ZERO;
        org.joda.time.Period period16 = period15.normalizedStandard();
        org.joda.time.Period period18 = period16.minusMinutes((int) ' ');
        org.joda.time.Period period20 = period18.minusMonths((int) (byte) 0);
        org.joda.time.PeriodType periodType21 = period20.getPeriodType();
        org.joda.time.DateTime dateTime22 = dateTime14.minus((org.joda.time.ReadablePeriod) period20);
        org.joda.time.DateTime dateTime24 = dateTime14.plusHours(34);
        org.joda.time.DateTime dateTime26 = dateTime14.plusMonths(5);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.LocalTime localTime29 = new org.joda.time.LocalTime((long) 0, chronology28);
        org.joda.time.Chronology chronology30 = localTime29.getChronology();
        org.joda.time.DateTimeField dateTimeField31 = chronology30.weekyearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime32 = org.joda.time.MutableDateTime.now(chronology30);
        mutableDateTime32.setWeekOfWeekyear((int) '#');
        mutableDateTime32.addHours(0);
        org.joda.time.Days days37 = org.joda.time.Days.daysBetween((org.joda.time.ReadableInstant) dateTime26, (org.joda.time.ReadableInstant) mutableDateTime32);
        long long38 = property11.getDifferenceAsLong((org.joda.time.ReadableInstant) mutableDateTime32);
        org.joda.time.MutableDateTime mutableDateTime39 = property11.getMutableDateTime();
        org.joda.time.MutableDateTime mutableDateTime41 = property11.add(35);
        mutableDateTime41.setSecondOfDay((int) '#');
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        mutableDateTime41.setZone(dateTimeZone44);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(mutableDateTime32);
        org.junit.Assert.assertNotNull(days37);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 47L + "'", long38 == 47L);
        org.junit.Assert.assertNotNull(mutableDateTime39);
        org.junit.Assert.assertNotNull(mutableDateTime41);
    }

    @Test
    public void test6435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6435");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        int int1 = localDate0.getCenturyOfEra();
        org.joda.time.LocalDate.Property property2 = localDate0.dayOfWeek();
        org.joda.time.LocalDate localDate4 = property2.addToCopy(2097);
        org.joda.time.LocalDate.Property property5 = localDate4.year();
        org.joda.time.LocalDate localDate7 = property5.addWrapFieldToCopy(2147483647);
        org.joda.time.LocalDate localDate8 = property5.roundCeilingCopy();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 20 + "'", int1 == 20);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(localDate8);
    }

    @Test
    public void test6436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6436");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate2 = property1.roundHalfEvenCopy();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
    }

    @Test
    public void test6437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6437");
        org.joda.time.Period period0 = org.joda.time.Period.ZERO;
        org.joda.time.Period period1 = period0.normalizedStandard();
        org.joda.time.Period period3 = period0.plusHours(2);
        java.time.chrono.IsoEra isoEra4 = java.time.chrono.IsoEra.CE;
        boolean boolean5 = period3.equals((java.lang.Object) isoEra4);
        java.time.LocalTime localTime10 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime11 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime10);
        java.time.LocalTime localTime16 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime17 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime16);
        java.time.temporal.ChronoField chronoField18 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime20 = localTime16.with((java.time.temporal.TemporalField) chronoField18, (long) (short) 1);
        long long21 = localTime10.getLong((java.time.temporal.TemporalField) chronoField18);
        boolean boolean22 = isoEra4.isSupported((java.time.temporal.TemporalField) chronoField18);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery23 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period24 = isoEra4.query(periodTemporalQuery23);
        boolean boolean25 = period24.isNegative();
        java.time.Period period27 = period24.plusDays((long) ' ');
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.LocalTime localTime30 = new org.joda.time.LocalTime((long) 0, chronology29);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((long) 3, chronology32);
        org.joda.time.DateTime.Property property34 = dateTime33.dayOfYear();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.DateMidnight dateMidnight36 = new org.joda.time.DateMidnight((java.lang.Object) dateTime33, chronology35);
        org.joda.time.DateTime dateTime37 = localTime30.toDateTime((org.joda.time.ReadableInstant) dateTime33);
        boolean boolean38 = period27.equals((java.lang.Object) localTime30);
        org.joda.time.Period period39 = org.joda.time.Period.ZERO;
        org.joda.time.Period period40 = period39.normalizedStandard();
        org.joda.time.Period period42 = period39.plusHours(2);
        java.time.chrono.IsoEra isoEra43 = java.time.chrono.IsoEra.CE;
        boolean boolean44 = period42.equals((java.lang.Object) isoEra43);
        java.time.LocalTime localTime49 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime50 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime49);
        java.time.LocalTime localTime55 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime56 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime55);
        java.time.temporal.ChronoField chronoField57 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime59 = localTime55.with((java.time.temporal.TemporalField) chronoField57, (long) (short) 1);
        long long60 = localTime49.getLong((java.time.temporal.TemporalField) chronoField57);
        boolean boolean61 = isoEra43.isSupported((java.time.temporal.TemporalField) chronoField57);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery62 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period63 = isoEra43.query(periodTemporalQuery62);
        boolean boolean64 = period63.isNegative();
        java.time.Period period66 = period63.plusDays((long) ' ');
        int int67 = period66.getYears();
        java.time.Period period68 = period27.minus((java.time.temporal.TemporalAmount) period66);
        java.time.chrono.ChronoPeriod chronoPeriod70 = period66.multipliedBy(189);
        org.junit.Assert.assertNotNull(period0);
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertTrue("'" + isoEra4 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra4.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertTrue("'" + chronoField18 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField18.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 3601000000001L + "'", long21 == 3601000000001L);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(periodTemporalQuery23);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertTrue("'" + isoEra43 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra43.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(localTime49);
        org.junit.Assert.assertNotNull(localTime50);
        org.junit.Assert.assertNotNull(localTime55);
        org.junit.Assert.assertNotNull(localTime56);
        org.junit.Assert.assertTrue("'" + chronoField57 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField57.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime59);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 3601000000001L + "'", long60 == 3601000000001L);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(periodTemporalQuery62);
        org.junit.Assert.assertNotNull(period63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(period66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(period68);
        org.junit.Assert.assertNotNull(chronoPeriod70);
    }

    @Test
    public void test6438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6438");
        java.util.stream.LongStream longStream1 = java.util.stream.LongStream.of(0L);
        java.util.stream.LongStream longStream2 = longStream1.unordered();
        // The following exception was thrown during execution in test generation
        try {
            java.util.OptionalLong optionalLong3 = longStream1.min();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: stream has already been operated upon or closed");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(longStream1);
        org.junit.Assert.assertNotNull(longStream2);
    }

    @Test
    public void test6439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6439");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.yearOfCentury();
        int int3 = property2.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime5 = property2.addToCopy((long) (-1));
        org.joda.time.LocalDateTime localDateTime6 = property2.roundHalfFloorCopy();
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime8 = property7.roundHalfCeilingCopy();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 99 + "'", int3 == 99);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime8);
    }

    @Test
    public void test6440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6440");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        java.util.Locale.LanguageRange[] languageRangeArray3 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList4 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList4, languageRangeArray3);
        java.util.Locale.LanguageRange[] languageRangeArray6 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList7 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList7, languageRangeArray6);
        java.util.Locale locale9 = java.util.Locale.JAPAN;
        java.util.Locale[] localeArray10 = new java.util.Locale[] { locale9 };
        java.util.ArrayList<java.util.Locale> localeList11 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList11, localeArray10);
        java.util.List<java.util.Locale> localeList13 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList7, (java.util.Collection<java.util.Locale>) localeList11);
        localeList13.clear();
        java.util.List<java.util.Locale> localeList15 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList4, (java.util.Collection<java.util.Locale>) localeList13);
        java.util.Locale.LanguageRange[] languageRangeArray16 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList17 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList17, languageRangeArray16);
        java.util.Locale.LanguageRange[] languageRangeArray19 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList20 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList20, languageRangeArray19);
        java.util.Locale locale22 = java.util.Locale.JAPAN;
        java.util.Locale[] localeArray23 = new java.util.Locale[] { locale22 };
        java.util.ArrayList<java.util.Locale> localeList24 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList24, localeArray23);
        java.util.List<java.util.Locale> localeList26 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList20, (java.util.Collection<java.util.Locale>) localeList24);
        localeList26.clear();
        java.util.List<java.util.Locale> localeList28 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList17, (java.util.Collection<java.util.Locale>) localeList26);
        java.util.List<java.util.Locale> localeList29 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList4, (java.util.Collection<java.util.Locale>) localeList28);
        java.util.ListIterator<java.util.Locale> localeItor30 = localeList28.listIterator();
        java.util.Locale locale31 = java.util.Locale.ENGLISH;
        localeItor30.add(locale31);
        org.joda.time.format.PeriodFormatter periodFormatter33 = periodFormatter2.withLocale(locale31);
        org.joda.time.format.PeriodPrinter periodPrinter34 = periodFormatter33.getPrinter();
        org.joda.time.format.PeriodParser periodParser35 = periodFormatter33.getParser();
        org.junit.Assert.assertNotNull(languageRangeArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(languageRangeArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(localeArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(localeList13);
        org.junit.Assert.assertNotNull(localeList15);
        org.junit.Assert.assertNotNull(languageRangeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(languageRangeArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(localeArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(localeList26);
        org.junit.Assert.assertNotNull(localeList28);
        org.junit.Assert.assertNotNull(localeList29);
        org.junit.Assert.assertNotNull(localeItor30);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "en");
        org.junit.Assert.assertNotNull(periodFormatter33);
        org.junit.Assert.assertNull(periodPrinter34);
        org.junit.Assert.assertNull(periodParser35);
    }

    @Test
    public void test6441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6441");
        java.security.KeyException keyException0 = new java.security.KeyException();
    }

    @Test
    public void test6442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6442");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.now();
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery1 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period2 = localDateTime0.query(periodTemporalQuery1);
        java.time.LocalDateTime localDateTime4 = localDateTime0.plusNanos((long) 2);
        org.joda.time.Period period5 = org.joda.time.Period.ZERO;
        org.joda.time.Period period6 = period5.normalizedStandard();
        org.joda.time.Period period8 = period5.plusHours(2);
        java.time.chrono.IsoEra isoEra9 = java.time.chrono.IsoEra.CE;
        boolean boolean10 = period8.equals((java.lang.Object) isoEra9);
        java.time.LocalTime localTime15 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime16 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime15);
        java.time.LocalTime localTime21 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime22 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime21);
        java.time.temporal.ChronoField chronoField23 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime25 = localTime21.with((java.time.temporal.TemporalField) chronoField23, (long) (short) 1);
        long long26 = localTime15.getLong((java.time.temporal.TemporalField) chronoField23);
        boolean boolean27 = isoEra9.isSupported((java.time.temporal.TemporalField) chronoField23);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery28 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period29 = isoEra9.query(periodTemporalQuery28);
        boolean boolean30 = period29.isNegative();
        java.time.Period period32 = period29.plusDays((long) ' ');
        java.time.temporal.ChronoField chronoField33 = java.time.temporal.ChronoField.SECOND_OF_DAY;
        boolean boolean34 = period29.equals((java.lang.Object) chronoField33);
        java.time.chrono.ChronoPeriod chronoPeriod35 = period29.negated();
        java.time.OffsetDateTime offsetDateTime36 = java.time.OffsetDateTime.now();
        java.time.temporal.ChronoField chronoField37 = java.time.temporal.ChronoField.HOUR_OF_DAY;
        boolean boolean38 = offsetDateTime36.isSupported((java.time.temporal.TemporalField) chronoField37);
        java.time.Month month39 = offsetDateTime36.getMonth();
        java.time.temporal.Temporal temporal40 = period29.addTo((java.time.temporal.Temporal) offsetDateTime36);
        java.time.DayOfWeek dayOfWeek41 = java.time.DayOfWeek.from((java.time.temporal.TemporalAccessor) offsetDateTime36);
        java.time.LocalDateTime localDateTime42 = java.time.LocalDateTime.now();
        java.time.LocalDateTime localDateTime44 = localDateTime42.minusYears((long) (byte) 10);
        java.time.LocalDateTime localDateTime45 = java.time.LocalDateTime.now();
        java.time.LocalDateTime localDateTime47 = localDateTime45.minusYears((long) (byte) 10);
        boolean boolean48 = localDateTime42.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime47);
        java.time.temporal.ChronoField chronoField49 = java.time.temporal.ChronoField.MICRO_OF_DAY;
        java.time.LocalTime localTime54 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime55 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime54);
        java.time.LocalTime localTime60 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime61 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime60);
        java.time.temporal.ChronoField chronoField62 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime64 = localTime60.with((java.time.temporal.TemporalField) chronoField62, (long) (short) 1);
        long long65 = localTime54.getLong((java.time.temporal.TemporalField) chronoField62);
        java.time.LocalTime localTime67 = chronoField49.adjustInto(localTime54, (long) (byte) 1);
        boolean boolean68 = localDateTime42.isSupported((java.time.temporal.TemporalField) chronoField49);
        boolean boolean69 = dayOfWeek41.isSupported((java.time.temporal.TemporalField) chronoField49);
        boolean boolean70 = localDateTime4.isSupported((java.time.temporal.TemporalField) chronoField49);
        java.time.temporal.TemporalUnit temporalUnit71 = chronoField49.getBaseUnit();
        boolean boolean72 = temporalUnit71.isDateBased();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(periodTemporalQuery1);
        org.junit.Assert.assertNotNull(period2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertTrue("'" + isoEra9 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra9.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertTrue("'" + chronoField23 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField23.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime25);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 3601000000001L + "'", long26 == 3601000000001L);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(periodTemporalQuery28);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertTrue("'" + chronoField33 + "' != '" + java.time.temporal.ChronoField.SECOND_OF_DAY + "'", chronoField33.equals(java.time.temporal.ChronoField.SECOND_OF_DAY));
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(chronoPeriod35);
        org.junit.Assert.assertNotNull(offsetDateTime36);
        org.junit.Assert.assertTrue("'" + chronoField37 + "' != '" + java.time.temporal.ChronoField.HOUR_OF_DAY + "'", chronoField37.equals(java.time.temporal.ChronoField.HOUR_OF_DAY));
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + month39 + "' != '" + java.time.Month.FEBRUARY + "'", month39.equals(java.time.Month.FEBRUARY));
        org.junit.Assert.assertNotNull(temporal40);
        org.junit.Assert.assertTrue("'" + dayOfWeek41 + "' != '" + java.time.DayOfWeek.MONDAY + "'", dayOfWeek41.equals(java.time.DayOfWeek.MONDAY));
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + chronoField49 + "' != '" + java.time.temporal.ChronoField.MICRO_OF_DAY + "'", chronoField49.equals(java.time.temporal.ChronoField.MICRO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime54);
        org.junit.Assert.assertNotNull(localTime55);
        org.junit.Assert.assertNotNull(localTime60);
        org.junit.Assert.assertNotNull(localTime61);
        org.junit.Assert.assertTrue("'" + chronoField62 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField62.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime64);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 3601000000001L + "'", long65 == 3601000000001L);
        org.junit.Assert.assertNotNull(localTime67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + temporalUnit71 + "' != '" + java.time.temporal.ChronoUnit.MICROS + "'", temporalUnit71.equals(java.time.temporal.ChronoUnit.MICROS));
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
    }

    @Test
    public void test6443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6443");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.yearOfCentury();
        int int3 = property2.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime5 = property2.addToCopy((long) (-1));
        org.joda.time.LocalDateTime localDateTime6 = property2.roundHalfFloorCopy();
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime9 = property7.addToCopy(97);
        org.joda.time.LocalDateTime localDateTime10 = property7.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.plusMillis(49);
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.Duration duration15 = new org.joda.time.Duration(readableInstant13, readableInstant14);
        org.joda.time.Seconds seconds16 = duration15.toStandardSeconds();
        int int17 = seconds16.getSeconds();
        org.joda.time.Seconds seconds19 = seconds16.dividedBy(28);
        org.joda.time.DurationFieldType durationFieldType20 = seconds19.getFieldType();
        boolean boolean21 = localDateTime10.isSupported(durationFieldType20);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 99 + "'", int3 == 99);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(seconds16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(seconds19);
        org.junit.Assert.assertNotNull(durationFieldType20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
    }

    @Test
    public void test6444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6444");
        java.util.TimeZone timeZone1 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight((long) 12, dateTimeZone2);
        org.joda.time.MutableDateTime mutableDateTime4 = new org.joda.time.MutableDateTime(dateTimeZone2);
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.Duration duration7 = new org.joda.time.Duration(readableInstant5, readableInstant6);
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.PeriodType periodType9 = null;
        org.joda.time.Period period10 = duration7.toPeriodTo(readableInstant8, periodType9);
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.Duration duration13 = new org.joda.time.Duration(readableInstant11, readableInstant12);
        long long14 = duration13.getMillis();
        boolean boolean15 = duration7.isShorterThan((org.joda.time.ReadableDuration) duration13);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((long) 3, chronology17);
        org.joda.time.DateTime.Property property19 = dateTime18.dayOfYear();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight((java.lang.Object) dateTime18, chronology20);
        org.joda.time.MutableDateTime mutableDateTime22 = dateTime18.toMutableDateTime();
        mutableDateTime22.addYears((int) (short) 100);
        org.joda.time.MutableDateTime.Property property25 = mutableDateTime22.dayOfWeek();
        org.joda.time.MutableDateTime.Property property26 = mutableDateTime22.year();
        org.joda.time.MutableDateTime.Property property27 = mutableDateTime22.weekyear();
        boolean boolean28 = duration7.equals((java.lang.Object) mutableDateTime22);
        mutableDateTime22.addMonths((int) ' ');
        mutableDateTime22.add((long) (byte) 10);
        org.joda.time.Period period33 = org.joda.time.Period.ZERO;
        org.joda.time.Period period34 = period33.normalizedStandard();
        org.joda.time.Period period36 = period33.plusHours(2);
        java.time.chrono.IsoEra isoEra37 = java.time.chrono.IsoEra.CE;
        boolean boolean38 = period36.equals((java.lang.Object) isoEra37);
        int int39 = period36.getMinutes();
        mutableDateTime22.add((org.joda.time.ReadablePeriod) period36);
        java.util.TimeZone timeZone42 = null;
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forTimeZone(timeZone42);
        org.joda.time.DateMidnight dateMidnight44 = new org.joda.time.DateMidnight((long) 1970, dateTimeZone43);
        long long47 = dateTimeZone43.convertLocalToUTC((long) 3, false);
        long long50 = dateTimeZone43.convertLocalToUTC(0L, true);
        mutableDateTime22.setZoneRetainFields(dateTimeZone43);
        java.lang.String str52 = dateTimeZone43.toString();
        org.joda.time.chrono.EthiopicChronology ethiopicChronology53 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone43);
        org.joda.time.DateTimeField dateTimeField54 = ethiopicChronology53.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone55 = ethiopicChronology53.getZone();
        org.joda.time.DateTimeField dateTimeField56 = ethiopicChronology53.era();
        org.joda.time.DateTimeField dateTimeField57 = ethiopicChronology53.secondOfDay();
        org.joda.time.DateTimeField dateTimeField58 = ethiopicChronology53.minuteOfHour();
        org.joda.time.DurationField durationField59 = ethiopicChronology53.months();
        org.joda.time.DateTimeField dateTimeField60 = ethiopicChronology53.monthOfYear();
        org.joda.time.LocalTime localTime61 = new org.joda.time.LocalTime((org.joda.time.Chronology) ethiopicChronology53);
        org.joda.time.LocalTime localTime62 = new org.joda.time.LocalTime((java.lang.Object) mutableDateTime4, (org.joda.time.Chronology) ethiopicChronology53);
        org.joda.time.DurationField durationField63 = ethiopicChronology53.centuries();
        org.joda.time.DurationField durationField64 = ethiopicChronology53.seconds();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(mutableDateTime22);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertTrue("'" + isoEra37 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra37.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 3L + "'", long47 == 3L);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "Etc/UTC" + "'", str52, "Etc/UTC");
        org.junit.Assert.assertNotNull(ethiopicChronology53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(dateTimeZone55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(durationField59);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(durationField63);
        org.junit.Assert.assertNotNull(durationField64);
    }

    @Test
    public void test6445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6445");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withYearOfCentury((int) 'a');
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.plusSeconds(6);
        org.joda.time.LocalDateTime.Property property6 = localDateTime5.yearOfCentury();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(property6);
    }

    @Test
    public void test6446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6446");
        java.net.FileNameMap fileNameMap0 = java.net.URLConnection.getFileNameMap();
        java.util.stream.Stream<java.net.FileNameMap> fileNameMapStream1 = java.util.stream.Stream.of(fileNameMap0);
        java.lang.String str3 = fileNameMap0.getContentTypeFor("Mon");
        org.junit.Assert.assertNotNull(fileNameMap0);
        org.junit.Assert.assertNotNull(fileNameMapStream1);
        org.junit.Assert.assertNull(str3);
    }

    @Test
    public void test6447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6447");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 189);
    }

    @Test
    public void test6448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6448");
        org.joda.time.Period period1 = org.joda.time.Period.minutes(1936);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((long) 3, chronology3);
        org.joda.time.Period period5 = org.joda.time.Period.ZERO;
        org.joda.time.Period period6 = period5.normalizedStandard();
        org.joda.time.Period period8 = period6.minusMinutes((int) ' ');
        org.joda.time.Period period10 = period8.minusMonths((int) (byte) 0);
        org.joda.time.PeriodType periodType11 = period10.getPeriodType();
        org.joda.time.DateTime dateTime12 = dateTime4.minus((org.joda.time.ReadablePeriod) period10);
        org.joda.time.DateTime dateTime14 = dateTime4.plusHours(34);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.Duration duration17 = new org.joda.time.Duration(readableInstant15, readableInstant16);
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.Duration duration20 = new org.joda.time.Duration(readableInstant18, readableInstant19);
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.PeriodType periodType22 = null;
        org.joda.time.Period period23 = duration20.toPeriodTo(readableInstant21, periodType22);
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.Duration duration26 = new org.joda.time.Duration(readableInstant24, readableInstant25);
        long long27 = duration26.getMillis();
        boolean boolean28 = duration20.isShorterThan((org.joda.time.ReadableDuration) duration26);
        boolean boolean29 = duration17.isLongerThan((org.joda.time.ReadableDuration) duration26);
        org.joda.time.DateTime dateTime31 = dateTime14.withDurationAdded((org.joda.time.ReadableDuration) duration17, 256);
        org.joda.time.Duration duration32 = period1.toDurationFrom((org.joda.time.ReadableInstant) dateTime31);
        int int33 = period1.size();
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(periodType11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 8 + "'", int33 == 8);
    }

    @Test
    public void test6449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6449");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.time.LocalTime localTime6 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime7 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime6);
        java.time.LocalTime localTime12 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime13 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime12);
        java.time.temporal.ChronoField chronoField14 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime16 = localTime12.with((java.time.temporal.TemporalField) chronoField14, (long) (short) 1);
        long long17 = localTime6.getLong((java.time.temporal.TemporalField) chronoField14);
        java.time.LocalTime localTime19 = localTime6.withSecond((int) (short) 1);
        java.lang.Object obj21 = properties1.put((java.lang.Object) localTime19, (java.lang.Object) "117");
        boolean boolean23 = properties1.containsValue((java.lang.Object) 6);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((long) 3, chronology25);
        org.joda.time.DateTime.Property property27 = dateTime26.dayOfYear();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateMidnight dateMidnight29 = new org.joda.time.DateMidnight((java.lang.Object) dateTime26, chronology28);
        org.joda.time.MutableDateTime mutableDateTime30 = dateTime26.toMutableDateTime();
        mutableDateTime30.addYears((int) (short) 100);
        org.joda.time.MutableDateTime.Property property33 = mutableDateTime30.millisOfDay();
        org.joda.time.PeriodType periodType34 = org.joda.time.PeriodType.years();
        org.joda.time.DurationFieldType durationFieldType35 = org.joda.time.DurationFieldType.halfdays();
        int int36 = periodType34.indexOf(durationFieldType35);
        mutableDateTime30.add(durationFieldType35, (int) 'a');
        org.joda.time.MutableDateTime.Property property39 = mutableDateTime30.millisOfSecond();
        org.joda.time.MutableDateTime mutableDateTime40 = property39.roundHalfFloor();
        boolean boolean41 = properties1.containsValue((java.lang.Object) property39);
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        org.joda.time.DurationFieldType durationFieldType43 = dateTimeFieldType42.getDurationType();
        java.util.stream.IntStream intStream46 = java.util.stream.IntStream.rangeClosed(100, (int) '4');
        java.util.stream.IntStream intStream48 = intStream46.skip((long) 256);
        java.util.PrimitiveIterator.OfInt ofInt49 = intStream48.iterator();
        java.util.LongSummaryStatistics longSummaryStatistics50 = new java.util.LongSummaryStatistics();
        longSummaryStatistics50.accept(3);
        long long53 = longSummaryStatistics50.getMax();
        java.util.LongSummaryStatistics longSummaryStatistics54 = new java.util.LongSummaryStatistics();
        longSummaryStatistics54.accept(3);
        java.util.function.LongConsumer longConsumer57 = longSummaryStatistics50.andThen((java.util.function.LongConsumer) longSummaryStatistics54);
        java.util.LongSummaryStatistics longSummaryStatistics58 = new java.util.LongSummaryStatistics();
        longSummaryStatistics58.accept(3);
        long long61 = longSummaryStatistics58.getMax();
        double double62 = longSummaryStatistics58.getAverage();
        longSummaryStatistics58.accept(6);
        java.util.function.LongConsumer longConsumer65 = longSummaryStatistics50.andThen((java.util.function.LongConsumer) longSummaryStatistics58);
        double double66 = longSummaryStatistics50.getAverage();
        java.util.LongSummaryStatistics longSummaryStatistics67 = new java.util.LongSummaryStatistics();
        longSummaryStatistics67.accept(3);
        java.util.function.LongConsumer longConsumer70 = longSummaryStatistics50.andThen((java.util.function.LongConsumer) longSummaryStatistics67);
        long long71 = longSummaryStatistics67.getSum();
        ofInt49.forEachRemaining((java.util.function.IntConsumer) longSummaryStatistics67);
        boolean boolean73 = ofInt49.hasNext();
        java.lang.Object obj74 = properties1.putIfAbsent((java.lang.Object) durationFieldType43, (java.lang.Object) ofInt49);
        java.util.function.Function<java.security.KeyException, java.security.KeyException> keyExceptionFunction75 = java.util.function.Function.identity();
        java.nio.charset.CharacterCodingException characterCodingException78 = new java.nio.charset.CharacterCodingException();
        java.security.InvalidKeyException invalidKeyException79 = new java.security.InvalidKeyException("1", (java.lang.Throwable) characterCodingException78);
        java.security.cert.CertificateEncodingException certificateEncodingException80 = new java.security.cert.CertificateEncodingException("Optional.empty", (java.lang.Throwable) invalidKeyException79);
        java.security.KeyException keyException81 = keyExceptionFunction75.apply((java.security.KeyException) invalidKeyException79);
        java.lang.Object obj82 = properties1.get((java.lang.Object) invalidKeyException79);
        int int83 = properties1.size();
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertTrue("'" + chronoField14 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField14.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 3601000000001L + "'", long17 == 3601000000001L);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertNull(obj21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(mutableDateTime30);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(periodType34);
        org.junit.Assert.assertNotNull(durationFieldType35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(mutableDateTime40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType42);
        org.junit.Assert.assertNotNull(durationFieldType43);
        org.junit.Assert.assertNotNull(intStream46);
        org.junit.Assert.assertNotNull(intStream48);
        org.junit.Assert.assertNotNull(ofInt49);
        org.junit.Assert.assertEquals(longSummaryStatistics50.toString(), "LongSummaryStatistics{count=1, sum=3, min=3, average=3.000000, max=3}");
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 3L + "'", long53 == 3L);
        org.junit.Assert.assertEquals(longSummaryStatistics54.toString(), "LongSummaryStatistics{count=1, sum=3, min=3, average=3.000000, max=3}");
        org.junit.Assert.assertNotNull(longConsumer57);
        org.junit.Assert.assertEquals(longSummaryStatistics58.toString(), "LongSummaryStatistics{count=2, sum=9, min=3, average=4.500000, max=6}");
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 3L + "'", long61 == 3L);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 3.0d + "'", double62 == 3.0d);
        org.junit.Assert.assertNotNull(longConsumer65);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 3.0d + "'", double66 == 3.0d);
        org.junit.Assert.assertEquals(longSummaryStatistics67.toString(), "LongSummaryStatistics{count=1, sum=3, min=3, average=3.000000, max=3}");
        org.junit.Assert.assertNotNull(longConsumer70);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 3L + "'", long71 == 3L);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNull(obj74);
        org.junit.Assert.assertNotNull(keyExceptionFunction75);
        org.junit.Assert.assertNotNull(keyException81);
        org.junit.Assert.assertNull(obj82);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 2 + "'", int83 == 2);
    }

    @Test
    public void test6450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6450");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((long) 0, chronology2);
        org.joda.time.Chronology chronology4 = localTime3.getChronology();
        org.joda.time.DateTimeField dateTimeField5 = chronology4.weekyearOfCentury();
        org.joda.time.DurationField durationField6 = chronology4.weekyears();
        org.joda.time.DurationField durationField7 = chronology4.seconds();
        org.joda.time.LocalTime localTime8 = org.joda.time.LocalTime.fromMillisOfDay((long) (byte) 0, chronology4);
        org.joda.time.Chronology chronology9 = localTime8.getChronology();
        org.joda.time.TimeOfDay timeOfDay11 = org.joda.time.TimeOfDay.fromMillisOfDay((long) (short) 0);
        org.joda.time.TimeOfDay timeOfDay13 = org.joda.time.TimeOfDay.fromMillisOfDay((long) (short) 0);
        org.joda.time.Hours hours14 = org.joda.time.Hours.hoursBetween((org.joda.time.ReadablePartial) timeOfDay11, (org.joda.time.ReadablePartial) timeOfDay13);
        org.joda.time.DurationFieldType durationFieldType15 = org.joda.time.DurationFieldType.hours();
        org.joda.time.TimeOfDay timeOfDay17 = timeOfDay13.withFieldAdded(durationFieldType15, (int) (byte) 0);
        org.joda.time.Chronology chronology18 = null;
        boolean boolean19 = durationFieldType15.isSupported(chronology18);
        boolean boolean20 = localTime8.isSupported(durationFieldType15);
        org.joda.time.LocalTime localTime22 = localTime8.plusHours(1970);
        org.joda.time.ReadableInterval readableInterval23 = null;
        org.joda.time.Hours hours24 = org.joda.time.Hours.hoursIn(readableInterval23);
        org.joda.time.Hours hours26 = hours24.multipliedBy((int) (byte) 0);
        org.joda.time.Hours hours27 = hours24.negated();
        org.joda.time.Hours hours29 = hours27.multipliedBy(999999999);
        org.joda.time.LocalTime localTime30 = localTime8.plus((org.joda.time.ReadablePeriod) hours27);
        org.joda.time.Hours hours32 = hours27.multipliedBy(13);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(timeOfDay11);
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertNotNull(hours14);
        org.junit.Assert.assertNotNull(durationFieldType15);
        org.junit.Assert.assertNotNull(timeOfDay17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertNotNull(hours24);
        org.junit.Assert.assertNotNull(hours26);
        org.junit.Assert.assertNotNull(hours27);
        org.junit.Assert.assertNotNull(hours29);
        org.junit.Assert.assertNotNull(localTime30);
        org.junit.Assert.assertNotNull(hours32);
    }

    @Test
    public void test6451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6451");
        java.io.File file2 = java.io.File.createTempFile("PT3600S", "secondOfMinute");
        java.io.File file3 = file2.getCanonicalFile();
        java.io.File file4 = file3.getAbsoluteFile();
        boolean boolean5 = file4.delete();
        org.junit.Assert.assertNotNull(file2);
        org.junit.Assert.assertEquals(file2.getParent(), "/tmp");
// flaky:         org.junit.Assert.assertEquals(file2.toString(), "/tmp/PT3600S1106012524612484036secondOfMinute");
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "/tmp");
// flaky:         org.junit.Assert.assertEquals(file3.toString(), "/tmp/PT3600S1106012524612484036secondOfMinute");
        org.junit.Assert.assertNotNull(file4);
        org.junit.Assert.assertEquals(file4.getParent(), "/tmp");
// flaky:         org.junit.Assert.assertEquals(file4.toString(), "/tmp/PT3600S1106012524612484036secondOfMinute");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
    }

    @Test
    public void test6452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6452");
        java.util.stream.Stream.Builder<java.io.OutputStream> outputStreamBuilder0 = java.util.stream.Stream.builder();
        java.util.stream.Stream.Builder<java.io.OutputStream> outputStreamBuilder1 = java.util.stream.Stream.builder();
        java.util.function.Consumer<java.io.OutputStream> outputStreamConsumer2 = outputStreamBuilder0.andThen((java.util.function.Consumer<java.io.OutputStream>) outputStreamBuilder1);
        java.io.PrintStream printStream4 = new java.io.PrintStream("subject:\n (GERMAN)");
        java.util.stream.Stream.Builder<java.io.OutputStream> outputStreamBuilder5 = outputStreamBuilder1.add((java.io.OutputStream) printStream4);
        java.io.PrintWriter printWriter6 = new java.io.PrintWriter((java.io.OutputStream) printStream4);
        printWriter6.close();
        org.junit.Assert.assertNotNull(outputStreamBuilder0);
        org.junit.Assert.assertNotNull(outputStreamBuilder1);
        org.junit.Assert.assertNotNull(outputStreamConsumer2);
        org.junit.Assert.assertNotNull(outputStreamBuilder5);
    }

    @Test
    public void test6453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6453");
        org.joda.time.Days days1 = org.joda.time.Days.days(2088);
        org.junit.Assert.assertNotNull(days1);
    }

    @Test
    public void test6454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6454");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 3, chronology1);
        org.joda.time.DateTime.Property property3 = dateTime2.dayOfYear();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight((java.lang.Object) dateTime2, chronology4);
        org.joda.time.MutableDateTime mutableDateTime6 = dateTime2.toMutableDateTime();
        mutableDateTime6.addYears((int) (short) 100);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime6.dayOfWeek();
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime6.year();
        java.util.TimeZone timeZone11 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        mutableDateTime6.setZone(dateTimeZone12);
        java.util.Locale locale15 = java.util.Locale.TAIWAN;
        java.lang.String str16 = dateTimeZone12.getShortName((long) 64, locale15);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) 3, chronology18);
        org.joda.time.DateTime.Property property20 = dateTime19.dayOfYear();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight((java.lang.Object) dateTime19, chronology21);
        org.joda.time.MutableDateTime mutableDateTime23 = dateTime19.toMutableDateTime();
        mutableDateTime23.addYears((int) (short) 100);
        org.joda.time.MutableDateTime.Property property26 = mutableDateTime23.dayOfWeek();
        org.joda.time.MutableDateTime.Property property27 = mutableDateTime23.year();
        java.util.TimeZone timeZone28 = null;
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forTimeZone(timeZone28);
        mutableDateTime23.setZone(dateTimeZone29);
        java.util.Locale locale32 = java.util.Locale.TAIWAN;
        java.lang.String str33 = dateTimeZone29.getShortName((long) 64, locale32);
        long long35 = dateTimeZone12.getMillisKeepLocal(dateTimeZone29, (long) 64);
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime(dateTimeZone12);
        org.joda.time.LocalDate localDate37 = new org.joda.time.LocalDate(dateTimeZone12);
        org.joda.time.chrono.EthiopicChronology ethiopicChronology38 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone12);
        org.joda.time.DateTimeField dateTimeField39 = ethiopicChronology38.clockhourOfDay();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+00:00" + "'", str16, "+00:00");
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(mutableDateTime23);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "+00:00" + "'", str33, "+00:00");
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 64L + "'", long35 == 64L);
        org.junit.Assert.assertNotNull(ethiopicChronology38);
        org.junit.Assert.assertNotNull(dateTimeField39);
    }

    @Test
    public void test6455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6455");
        java.io.File file0 = null;
        java.io.File file2 = new java.io.File(file0, "1970-01-01T00:00:00.003Z");
        java.net.URL uRL3 = file2.toURL();
        java.io.File file4 = null;
        java.io.File file6 = new java.io.File(file4, "1970-01-01T00:00:00.003Z");
        java.net.URL uRL7 = file6.toURL();
        boolean boolean8 = uRL3.sameFile(uRL7);
        java.lang.String str9 = uRL3.getPath();
        java.net.URLConnection uRLConnection10 = uRL3.openConnection();
        int int11 = uRL3.getPort();
        int int12 = uRL3.getPort();
        org.junit.Assert.assertNull("file2.getParent() == null", file2.getParent());
        org.junit.Assert.assertEquals(file2.toString(), "1970-01-01T00:00:00.003Z");
        org.junit.Assert.assertNotNull(uRL3);
// flaky:         org.junit.Assert.assertEquals(uRL3.toString(), "file:/experiment/1970-01-01T00:00:00.003Z");
        org.junit.Assert.assertNull("file6.getParent() == null", file6.getParent());
        org.junit.Assert.assertEquals(file6.toString(), "1970-01-01T00:00:00.003Z");
        org.junit.Assert.assertNotNull(uRL7);
// flaky:         org.junit.Assert.assertEquals(uRL7.toString(), "file:/experiment/1970-01-01T00:00:00.003Z");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "/experiment/1970-01-01T00:00:00.003Z" + "'", str9, "/experiment/1970-01-01T00:00:00.003Z");
        org.junit.Assert.assertNotNull(uRLConnection10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
    }

    @Test
    public void test6456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6456");
        java.time.chrono.IsoEra isoEra0 = java.time.chrono.IsoEra.CE;
        java.time.LocalTime localTime5 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime6 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime5);
        java.time.LocalTime localTime11 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime12 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime11);
        java.time.temporal.ChronoField chronoField13 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime15 = localTime11.with((java.time.temporal.TemporalField) chronoField13, (long) (short) 1);
        long long16 = localTime5.getLong((java.time.temporal.TemporalField) chronoField13);
        java.time.LocalTime localTime18 = localTime5.withSecond((int) (short) 1);
        java.time.temporal.ChronoField chronoField19 = java.time.temporal.ChronoField.SECOND_OF_DAY;
        java.time.temporal.ValueRange valueRange20 = localTime18.range((java.time.temporal.TemporalField) chronoField19);
        java.time.LocalTime localTime26 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime27 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime26);
        java.time.LocalTime localTime32 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime33 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime32);
        java.time.temporal.ChronoField chronoField34 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime36 = localTime32.with((java.time.temporal.TemporalField) chronoField34, (long) (short) 1);
        long long37 = localTime26.getLong((java.time.temporal.TemporalField) chronoField34);
        java.time.LocalTime localTime39 = localTime26.withSecond((int) (short) 1);
        java.time.temporal.ChronoField chronoField40 = java.time.temporal.ChronoField.SECOND_OF_DAY;
        java.time.temporal.ValueRange valueRange41 = localTime39.range((java.time.temporal.TemporalField) chronoField40);
        int int42 = valueRange20.checkValidIntValue((long) 2022, (java.time.temporal.TemporalField) chronoField40);
        java.time.temporal.ValueRange valueRange43 = chronoField40.range();
        boolean boolean44 = isoEra0.isSupported((java.time.temporal.TemporalField) chronoField40);
        org.junit.Assert.assertTrue("'" + isoEra0 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra0.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertTrue("'" + chronoField13 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField13.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 3601000000001L + "'", long16 == 3601000000001L);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertTrue("'" + chronoField19 + "' != '" + java.time.temporal.ChronoField.SECOND_OF_DAY + "'", chronoField19.equals(java.time.temporal.ChronoField.SECOND_OF_DAY));
        org.junit.Assert.assertNotNull(valueRange20);
        org.junit.Assert.assertNotNull(localTime26);
        org.junit.Assert.assertNotNull(localTime27);
        org.junit.Assert.assertNotNull(localTime32);
        org.junit.Assert.assertNotNull(localTime33);
        org.junit.Assert.assertTrue("'" + chronoField34 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField34.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime36);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 3601000000001L + "'", long37 == 3601000000001L);
        org.junit.Assert.assertNotNull(localTime39);
        org.junit.Assert.assertTrue("'" + chronoField40 + "' != '" + java.time.temporal.ChronoField.SECOND_OF_DAY + "'", chronoField40.equals(java.time.temporal.ChronoField.SECOND_OF_DAY));
        org.junit.Assert.assertNotNull(valueRange41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2022 + "'", int42 == 2022);
        org.junit.Assert.assertNotNull(valueRange43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test6457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6457");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.yearOfCentury();
        int int3 = property2.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime5 = property2.addToCopy((long) (-1));
        org.joda.time.LocalDateTime localDateTime6 = property2.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime7 = property2.roundCeilingCopy();
        org.joda.time.LocalDateTime localDateTime8 = property2.roundCeilingCopy();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.withCenturyOfEra(0);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 99 + "'", int3 == 99);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
    }

    @Test
    public void test6458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6458");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(34451155400000L);
        org.joda.time.YearMonthDay.Property property2 = yearMonthDay1.monthOfYear();
        org.junit.Assert.assertNotNull(property2);
    }

    @Test
    public void test6459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6459");
        java.nio.LongBuffer longBuffer1 = java.nio.LongBuffer.allocate(32769);
        java.nio.LongBuffer longBuffer3 = longBuffer1.put(34791587000000L);
        org.junit.Assert.assertNotNull(longBuffer1);
        org.junit.Assert.assertNotNull(longBuffer3);
    }

    @Test
    public void test6460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6460");
        org.joda.time.Weeks weeks0 = org.joda.time.Weeks.ONE;
        java.util.concurrent.TimeUnit timeUnit1 = java.util.concurrent.TimeUnit.NANOSECONDS;
        boolean boolean2 = weeks0.equals((java.lang.Object) timeUnit1);
        org.joda.time.MutablePeriod mutablePeriod3 = weeks0.toMutablePeriod();
        int int4 = mutablePeriod3.getSeconds();
        mutablePeriod3.addHours((int) 'a');
        mutablePeriod3.addMillis((int) '#');
        mutablePeriod3.addDays(4);
        mutablePeriod3.addYears((int) 'a');
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.Duration duration15 = new org.joda.time.Duration(readableInstant13, readableInstant14);
        long long16 = duration15.getMillis();
        org.joda.time.Duration duration18 = duration15.plus((long) (byte) 1);
        mutablePeriod3.add((org.joda.time.ReadableDuration) duration15);
        mutablePeriod3.setDays(741000000);
        org.junit.Assert.assertNotNull(weeks0);
        org.junit.Assert.assertNotNull(timeUnit1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(mutablePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertNotNull(duration18);
    }

    @Test
    public void test6461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6461");
        org.joda.time.TimeOfDay timeOfDay1 = org.joda.time.TimeOfDay.fromMillisOfDay((long) (short) 0);
        org.joda.time.TimeOfDay timeOfDay3 = org.joda.time.TimeOfDay.fromMillisOfDay((long) (short) 0);
        org.joda.time.Hours hours4 = org.joda.time.Hours.hoursBetween((org.joda.time.ReadablePartial) timeOfDay1, (org.joda.time.ReadablePartial) timeOfDay3);
        org.joda.time.DurationFieldType durationFieldType5 = org.joda.time.DurationFieldType.hours();
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay3.withFieldAdded(durationFieldType5, (int) (byte) 0);
        int int8 = timeOfDay3.getMillisOfSecond();
        int int9 = timeOfDay3.getMillisOfSecond();
        org.junit.Assert.assertNotNull(timeOfDay1);
        org.junit.Assert.assertNotNull(timeOfDay3);
        org.junit.Assert.assertNotNull(hours4);
        org.junit.Assert.assertNotNull(durationFieldType5);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }

    @Test
    public void test6462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6462");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 3, chronology1);
        org.joda.time.DateTime.Property property3 = dateTime2.dayOfYear();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight((java.lang.Object) dateTime2, chronology4);
        org.joda.time.MutableDateTime mutableDateTime6 = dateTime2.toMutableDateTime();
        org.joda.time.Days days7 = org.joda.time.Days.ONE;
        org.joda.time.MutableInterval mutableInterval8 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadablePeriod) days7);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) 3, chronology10);
        org.joda.time.DateTime.Property property12 = dateTime11.dayOfYear();
        org.joda.time.Interval interval13 = property12.toInterval();
        mutableInterval8.setInterval((org.joda.time.ReadableInterval) interval13);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) 3, chronology16);
        org.joda.time.DateTime.Property property18 = dateTime17.dayOfYear();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight((java.lang.Object) dateTime17, chronology19);
        org.joda.time.DateMidnight.Property property21 = dateMidnight20.dayOfMonth();
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.Duration duration24 = new org.joda.time.Duration(readableInstant22, readableInstant23);
        org.joda.time.Duration duration26 = duration24.withMillis((-1L));
        org.joda.time.ReadableDuration readableDuration27 = null;
        org.joda.time.Duration duration28 = duration24.minus(readableDuration27);
        org.joda.time.DateMidnight dateMidnight29 = dateMidnight20.plus((org.joda.time.ReadableDuration) duration28);
        mutableInterval8.setDurationAfterStart((org.joda.time.ReadableDuration) duration28);
        long long31 = mutableInterval8.getEndMillis();
        java.lang.String str32 = mutableInterval8.toString();
        mutableInterval8.setDurationAfterStart((long) 32769);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(days7);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(dateMidnight29);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z" + "'", str32, "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
    }

    @Test
    public void test6463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6463");
        java.text.Format.Field field0 = null;
        java.text.FieldPosition fieldPosition1 = new java.text.FieldPosition(field0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.Duration duration4 = new org.joda.time.Duration(readableInstant2, readableInstant3);
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.PeriodType periodType6 = null;
        org.joda.time.Period period7 = duration4.toPeriodTo(readableInstant5, periodType6);
        org.joda.time.Days days8 = period7.toStandardDays();
        boolean boolean9 = fieldPosition1.equals((java.lang.Object) days8);
        org.joda.time.Days days10 = days8.negated();
        org.joda.time.PeriodType periodType11 = days8.getPeriodType();
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(days8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(days10);
        org.junit.Assert.assertNotNull(periodType11);
    }

    @Test
    public void test6464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6464");
        org.joda.time.TimeOfDay timeOfDay1 = org.joda.time.TimeOfDay.fromMillisOfDay((long) (short) 0);
        org.joda.time.TimeOfDay timeOfDay3 = timeOfDay1.plusMinutes((-46800000));
        org.joda.time.TimeOfDay timeOfDay5 = timeOfDay3.withMinuteOfHour(0);
        org.junit.Assert.assertNotNull(timeOfDay1);
        org.junit.Assert.assertNotNull(timeOfDay3);
        org.junit.Assert.assertNotNull(timeOfDay5);
    }

    @Test
    public void test6465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6465");
        java.nio.CharBuffer charBuffer1 = java.nio.CharBuffer.wrap((java.lang.CharSequence) "2022-02-21T09:34:12.478Z");
        java.nio.CharBuffer charBuffer2 = charBuffer1.slice();
        java.nio.CharBuffer charBuffer3 = charBuffer2.asReadOnlyBuffer();
        org.junit.Assert.assertNotNull(charBuffer1);
        org.junit.Assert.assertNotNull(charBuffer2);
        org.junit.Assert.assertNotNull(charBuffer3);
    }

    @Test
    public void test6466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6466");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.Hours hours1 = org.joda.time.Hours.hoursIn(readableInterval0);
        org.joda.time.ReadableInterval readableInterval2 = null;
        org.joda.time.Hours hours3 = org.joda.time.Hours.hoursIn(readableInterval2);
        org.joda.time.Hours hours5 = hours3.multipliedBy((int) (byte) 0);
        org.joda.time.Hours hours6 = hours1.minus(hours5);
        org.joda.time.DurationFieldType durationFieldType7 = hours5.getFieldType();
        org.junit.Assert.assertNotNull(hours1);
        org.junit.Assert.assertNotNull(hours3);
        org.junit.Assert.assertNotNull(hours5);
        org.junit.Assert.assertNotNull(hours6);
        org.junit.Assert.assertNotNull(durationFieldType7);
    }

    @Test
    public void test6467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6467");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.time.LocalTime localTime6 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime7 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime6);
        java.time.LocalTime localTime12 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime13 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime12);
        java.time.temporal.ChronoField chronoField14 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime16 = localTime12.with((java.time.temporal.TemporalField) chronoField14, (long) (short) 1);
        long long17 = localTime6.getLong((java.time.temporal.TemporalField) chronoField14);
        java.time.LocalTime localTime19 = localTime6.withSecond((int) (short) 1);
        java.lang.Object obj21 = properties1.put((java.lang.Object) localTime19, (java.lang.Object) "117");
        java.lang.Object obj22 = properties1.clone();
        java.util.Set<java.lang.String> strSet23 = properties1.stringPropertyNames();
        java.util.Properties properties24 = null;
        java.util.Properties properties25 = new java.util.Properties(properties24);
        java.nio.LongBuffer longBuffer27 = java.nio.LongBuffer.allocate((int) (short) 0);
        java.nio.Buffer buffer28 = longBuffer27.mark();
        boolean boolean29 = properties25.containsKey((java.lang.Object) longBuffer27);
        java.util.Map<java.lang.String, java.lang.String> strMap30 = java.time.ZoneId.SHORT_IDS;
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        boolean boolean32 = strMap30.containsValue((java.lang.Object) dateTimeFieldType31);
        properties25.putAll(strMap30);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime(chronology34);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime35.withYearOfCentury((int) 'a');
        org.joda.time.LocalDateTime localDateTime39 = localDateTime37.plusSeconds(6);
        org.joda.time.LocalDateTime localDateTime41 = localDateTime37.withWeekyear(10);
        org.joda.time.LocalDateTime.Property property42 = localDateTime37.millisOfSecond();
        java.lang.String str43 = strMap30.get((java.lang.Object) localDateTime37);
        java.util.Set<java.util.Map.Entry<java.lang.String, java.lang.String>> strEntrySet44 = strMap30.entrySet();
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime((long) 3, chronology46);
        org.joda.time.DateTime.Property property48 = dateTime47.dayOfYear();
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.DateMidnight dateMidnight50 = new org.joda.time.DateMidnight((java.lang.Object) dateTime47, chronology49);
        org.joda.time.MutableDateTime mutableDateTime51 = dateTime47.toMutableDateTime();
        mutableDateTime51.addYears((int) (short) 100);
        mutableDateTime51.setMillis((long) 21);
        org.joda.time.MutableDateTime.Property property56 = mutableDateTime51.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime57 = property56.roundHalfCeiling();
        org.joda.time.MutableDateTime.Property property58 = mutableDateTime57.hourOfDay();
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.DateTime dateTime61 = new org.joda.time.DateTime((long) 3, chronology60);
        org.joda.time.DateTime.Property property62 = dateTime61.dayOfYear();
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.DateMidnight dateMidnight64 = new org.joda.time.DateMidnight((java.lang.Object) dateTime61, chronology63);
        org.joda.time.DateMidnight.Property property65 = dateMidnight64.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight66 = property65.roundCeilingCopy();
        int int67 = dateMidnight66.getHourOfDay();
        int int68 = dateMidnight66.getCenturyOfEra();
        java.lang.String str69 = dateMidnight66.toString();
        mutableDateTime57.setMillis((org.joda.time.ReadableInstant) dateMidnight66);
        boolean boolean71 = strMap30.containsKey((java.lang.Object) mutableDateTime57);
        java.util.Collection<java.lang.String> strCollection72 = strMap30.values();
        properties1.putAll(strMap30);
        java.util.Collection<java.lang.Object> objCollection74 = properties1.values();
        int int75 = properties1.size();
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertTrue("'" + chronoField14 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField14.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 3601000000001L + "'", long17 == 3601000000001L);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertNull(obj21);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertEquals(obj22.toString(), "{01:00:01.000000001=117}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj22), "{01:00:01.000000001=117}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj22), "{01:00:01.000000001=117}");
        org.junit.Assert.assertNotNull(strSet23);
        org.junit.Assert.assertNotNull(longBuffer27);
        org.junit.Assert.assertNotNull(buffer28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(strMap30);
        org.junit.Assert.assertNotNull(dateTimeFieldType31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNotNull(strEntrySet44);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(mutableDateTime51);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(mutableDateTime57);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertNotNull(dateMidnight66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 19 + "'", int68 == 19);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "1970-01-01T00:00:00.000Z" + "'", str69, "1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(strCollection72);
        org.junit.Assert.assertNotNull(objCollection74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 29 + "'", int75 == 29);
    }

    @Test
    public void test6468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6468");
        java.net.InetAddress inetAddress0 = java.net.InetAddress.getLocalHost();
        java.lang.String str1 = inetAddress0.toString();
        java.net.NetworkInterface networkInterface2 = java.net.NetworkInterface.getByInetAddress(inetAddress0);
        java.util.List<java.net.InterfaceAddress> interfaceAddressList3 = networkInterface2.getInterfaceAddresses();
        byte[] byteArray4 = networkInterface2.getHardwareAddress();
        java.util.stream.Stream<byte[]> byteArrayStream5 = java.util.stream.Stream.of(byteArray4);
        org.junit.Assert.assertNotNull(inetAddress0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "599b081c1808/172.17.0.2" + "'", str1, "599b081c1808/172.17.0.2");
        org.junit.Assert.assertNotNull(networkInterface2);
        org.junit.Assert.assertNotNull(interfaceAddressList3);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[2, 66, -84, 17, 0, 2]");
        org.junit.Assert.assertNotNull(byteArrayStream5);
    }

    @Test
    public void test6469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6469");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 3, chronology1);
        org.joda.time.DateTime.Property property3 = dateTime2.dayOfYear();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight((java.lang.Object) dateTime2, chronology4);
        org.joda.time.MutableDateTime mutableDateTime6 = dateTime2.toMutableDateTime();
        mutableDateTime6.addYears((int) (short) 100);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime6.millisOfDay();
        org.joda.time.PeriodType periodType10 = org.joda.time.PeriodType.years();
        org.joda.time.DurationFieldType durationFieldType11 = org.joda.time.DurationFieldType.halfdays();
        int int12 = periodType10.indexOf(durationFieldType11);
        mutableDateTime6.add(durationFieldType11, (int) 'a');
        org.joda.time.MutableDateTime.Property property15 = mutableDateTime6.millisOfSecond();
        org.joda.time.MutableDateTime.Property property16 = mutableDateTime6.yearOfEra();
        mutableDateTime6.setYear(576);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((long) 3, chronology20);
        org.joda.time.DateTime.Property property22 = dateTime21.dayOfYear();
        org.joda.time.Interval interval23 = property22.toInterval();
        org.joda.time.DateTimeField dateTimeField24 = property22.getField();
        org.joda.time.DateTime dateTime26 = property22.addToCopy((long) (byte) 1);
        org.joda.time.DateTime dateTime28 = dateTime26.withYear(4);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((long) 3, chronology30);
        org.joda.time.Period period32 = org.joda.time.Period.ZERO;
        org.joda.time.Period period33 = period32.normalizedStandard();
        org.joda.time.Period period35 = period33.minusMinutes((int) ' ');
        org.joda.time.Period period37 = period35.minusMonths((int) (byte) 0);
        org.joda.time.PeriodType periodType38 = period37.getPeriodType();
        org.joda.time.DateTime dateTime39 = dateTime31.minus((org.joda.time.ReadablePeriod) period37);
        org.joda.time.Duration duration40 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime28, (org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.DateTime dateTime42 = dateTime39.withWeekOfWeekyear(14);
        org.joda.time.DateTime dateTime44 = dateTime42.minusWeeks(40);
        boolean boolean45 = mutableDateTime6.equals((java.lang.Object) dateTime44);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(periodType10);
        org.junit.Assert.assertNotNull(durationFieldType11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(periodType38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
    }

    @Test
    public void test6470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6470");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((long) 0, chronology2);
        org.joda.time.Chronology chronology4 = localTime3.getChronology();
        org.joda.time.DateTimeField dateTimeField5 = chronology4.weekyearOfCentury();
        org.joda.time.DurationField durationField6 = chronology4.weekyears();
        org.joda.time.DurationField durationField7 = chronology4.seconds();
        org.joda.time.LocalTime localTime8 = org.joda.time.LocalTime.fromMillisOfDay((long) (byte) 0, chronology4);
        org.joda.time.LocalTime.Property property9 = localTime8.millisOfSecond();
        java.util.Locale locale10 = java.util.Locale.ITALY;
        org.joda.time.TimeOfDay timeOfDay12 = org.joda.time.TimeOfDay.fromMillisOfDay((long) (short) 0);
        org.joda.time.TimeOfDay timeOfDay14 = org.joda.time.TimeOfDay.fromMillisOfDay((long) (short) 0);
        org.joda.time.Hours hours15 = org.joda.time.Hours.hoursBetween((org.joda.time.ReadablePartial) timeOfDay12, (org.joda.time.ReadablePartial) timeOfDay14);
        org.joda.time.DurationFieldType durationFieldType16 = org.joda.time.DurationFieldType.hours();
        org.joda.time.TimeOfDay timeOfDay18 = timeOfDay14.withFieldAdded(durationFieldType16, (int) (byte) 0);
        int int19 = timeOfDay14.getMillisOfSecond();
        org.joda.time.TimeOfDay timeOfDay21 = timeOfDay14.plusHours(9);
        org.joda.time.TimeOfDay.Property property22 = timeOfDay14.secondOfMinute();
        java.time.ZoneOffset zoneOffset25 = java.time.ZoneOffset.ofHoursMinutes(1, 10);
        java.time.LocalDate localDate26 = java.time.LocalDate.now((java.time.ZoneId) zoneOffset25);
        boolean boolean27 = property22.equals((java.lang.Object) localDate26);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = property22.getFieldType();
        int int29 = property22.get();
        java.util.Locale locale30 = java.util.Locale.GERMANY;
        java.lang.String str31 = locale30.getDisplayName();
        java.lang.String str32 = property22.getAsShortText(locale30);
        java.lang.String str33 = locale10.getDisplayScript(locale30);
        java.util.Calendar calendar34 = java.util.Calendar.getInstance(locale10);
        java.lang.String str35 = property9.getAsText(locale10);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it_IT");
        org.junit.Assert.assertNotNull(timeOfDay12);
        org.junit.Assert.assertNotNull(timeOfDay14);
        org.junit.Assert.assertNotNull(hours15);
        org.junit.Assert.assertNotNull(durationFieldType16);
        org.junit.Assert.assertNotNull(timeOfDay18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(timeOfDay21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(zoneOffset25);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "German (Germany)" + "'", str31, "German (Germany)");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "0" + "'", str32, "0");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(calendar34);
// flaky:         org.junit.Assert.assertEquals(calendar34.toString(), "java.util.GregorianCalendar[time=1645436580296,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=35,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=43,SECOND=0,MILLISECOND=331,ZONE_OFFSET=35,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "0" + "'", str35, "0");
    }

    @Test
    public void test6471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6471");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.Duration duration2 = new org.joda.time.Duration(readableInstant0, readableInstant1);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = duration2.toPeriodTo(readableInstant3, periodType4);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.Duration duration8 = new org.joda.time.Duration(readableInstant6, readableInstant7);
        long long9 = duration8.getMillis();
        boolean boolean10 = duration2.isShorterThan((org.joda.time.ReadableDuration) duration8);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) 3, chronology12);
        org.joda.time.DateTime.Property property14 = dateTime13.dayOfYear();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight((java.lang.Object) dateTime13, chronology15);
        org.joda.time.MutableDateTime mutableDateTime17 = dateTime13.toMutableDateTime();
        mutableDateTime17.addYears((int) (short) 100);
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime17.dayOfWeek();
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime17.year();
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime17.weekyear();
        boolean boolean23 = duration2.equals((java.lang.Object) mutableDateTime17);
        mutableDateTime17.setYear(365);
        java.util.TimeZone timeZone30 = null;
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forTimeZone(timeZone30);
        org.joda.time.DateMidnight dateMidnight32 = new org.joda.time.DateMidnight((long) 1970, dateTimeZone31);
        long long35 = dateTimeZone31.convertLocalToUTC((long) 3, false);
        org.joda.time.Interval interval36 = new org.joda.time.Interval(10L, (long) 2097, dateTimeZone31);
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime(dateTimeZone31);
        org.joda.time.DateMidnight dateMidnight38 = new org.joda.time.DateMidnight(28L, dateTimeZone31);
        long long41 = dateTimeZone31.adjustOffset((long) 8, false);
        org.joda.time.MutableDateTime mutableDateTime42 = mutableDateTime17.toMutableDateTime(dateTimeZone31);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.LocalTime localTime45 = new org.joda.time.LocalTime((long) 0, chronology44);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime((long) 3, chronology47);
        org.joda.time.DateTime.Property property49 = dateTime48.dayOfYear();
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.DateMidnight dateMidnight51 = new org.joda.time.DateMidnight((java.lang.Object) dateTime48, chronology50);
        org.joda.time.DateTime dateTime52 = localTime45.toDateTime((org.joda.time.ReadableInstant) dateTime48);
        org.joda.time.DateTime dateTime54 = dateTime52.minusMillis((int) (byte) 0);
        org.joda.time.DateTime dateTime56 = dateTime52.withYearOfCentury((int) (byte) 10);
        org.joda.time.DateTime.Property property57 = dateTime56.hourOfDay();
        org.joda.time.DateTime dateTime59 = dateTime56.plus((long) 3600000);
        org.joda.time.DateTime dateTime62 = dateTime59.withDurationAdded((long) 366, (int) '#');
        java.util.Locale locale64 = java.util.Locale.ROOT;
        java.lang.String str65 = dateTime59.toString("70", locale64);
        org.joda.time.DateTimeZone dateTimeZone67 = org.joda.time.DateTimeZone.forOffsetMillis(306);
        org.joda.time.DateMidnight dateMidnight68 = new org.joda.time.DateMidnight((java.lang.Object) str65, dateTimeZone67);
        mutableDateTime42.setZoneRetainFields(dateTimeZone67);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 3L + "'", long35 == 3L);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 8L + "'", long41 == 8L);
        org.junit.Assert.assertNotNull(mutableDateTime42);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "70" + "'", str65, "70");
        org.junit.Assert.assertNotNull(dateTimeZone67);
    }

    @Test
    public void test6472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6472");
        java.util.GregorianCalendar gregorianCalendar5 = new java.util.GregorianCalendar(12, 4096, 7, (-1), (int) (short) 10);
        int int6 = gregorianCalendar5.getWeeksInWeekYear();
        java.lang.String str7 = gregorianCalendar5.getCalendarType();
        java.time.ZonedDateTime zonedDateTime8 = gregorianCalendar5.toZonedDateTime();
        java.time.ZonedDateTime zonedDateTime10 = zonedDateTime8.minusMonths((long) 10);
        java.time.OffsetDateTime offsetDateTime11 = zonedDateTime10.toOffsetDateTime();
        java.time.ZonedDateTime zonedDateTime13 = zonedDateTime10.plusYears((-8L));
        java.time.Duration duration14 = java.time.Duration.ZERO;
        java.time.LocalTime localTime19 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime20 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime19);
        java.time.temporal.ChronoField chronoField21 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime23 = localTime19.with((java.time.temporal.TemporalField) chronoField21, (long) (short) 1);
        java.time.Duration duration25 = java.time.Duration.ofMinutes((long) 3);
        java.time.LocalTime localTime26 = localTime19.minus((java.time.temporal.TemporalAmount) duration25);
        java.time.temporal.Temporal temporal27 = duration14.subtractFrom((java.time.temporal.Temporal) localTime26);
        java.time.LocalTime localTime29 = localTime26.plusMinutes((long) 31);
        java.time.ZonedDateTime zonedDateTime30 = zonedDateTime13.with((java.time.temporal.TemporalAdjuster) localTime26);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 52 + "'", int6 == 52);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "gregory" + "'", str7, "gregory");
        org.junit.Assert.assertNotNull(zonedDateTime8);
        org.junit.Assert.assertNotNull(zonedDateTime10);
        org.junit.Assert.assertNotNull(offsetDateTime11);
        org.junit.Assert.assertNotNull(zonedDateTime13);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertTrue("'" + chronoField21 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField21.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime23);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(localTime26);
        org.junit.Assert.assertNotNull(temporal27);
        org.junit.Assert.assertNotNull(localTime29);
        org.junit.Assert.assertNotNull(zonedDateTime30);
    }

    @Test
    public void test6473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6473");
        java.util.GregorianCalendar gregorianCalendar5 = new java.util.GregorianCalendar(12, 4096, 7, (-1), (int) (short) 10);
        int int6 = gregorianCalendar5.getWeeksInWeekYear();
        java.lang.String str7 = gregorianCalendar5.getCalendarType();
        java.time.ZonedDateTime zonedDateTime8 = gregorianCalendar5.toZonedDateTime();
        java.util.GregorianCalendar gregorianCalendar14 = new java.util.GregorianCalendar(12, 4096, 7, (-1), (int) (short) 10);
        int int15 = gregorianCalendar14.getWeeksInWeekYear();
        java.lang.String str16 = gregorianCalendar14.getCalendarType();
        java.time.ZonedDateTime zonedDateTime17 = gregorianCalendar14.toZonedDateTime();
        int int18 = zonedDateTime8.compareTo((java.time.chrono.ChronoZonedDateTime<java.time.LocalDate>) zonedDateTime17);
        int int19 = zonedDateTime17.getNano();
        java.time.ZonedDateTime zonedDateTime21 = zonedDateTime17.withNano((int) (short) 100);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 52 + "'", int6 == 52);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "gregory" + "'", str7, "gregory");
        org.junit.Assert.assertNotNull(zonedDateTime8);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 52 + "'", int15 == 52);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "gregory" + "'", str16, "gregory");
        org.junit.Assert.assertNotNull(zonedDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 965000000 + "'", int19 == 965000000);
        org.junit.Assert.assertNotNull(zonedDateTime21);
    }

    @Test
    public void test6474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6474");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((long) 0, chronology2);
        org.joda.time.Chronology chronology4 = localTime3.getChronology();
        org.joda.time.DateTimeField dateTimeField5 = chronology4.weekyearOfCentury();
        org.joda.time.DurationField durationField6 = chronology4.weekyears();
        org.joda.time.DurationField durationField7 = chronology4.seconds();
        org.joda.time.LocalTime localTime8 = org.joda.time.LocalTime.fromMillisOfDay((long) (byte) 0, chronology4);
        org.joda.time.LocalTime.Property property9 = localTime8.millisOfSecond();
        org.joda.time.LocalTime localTime10 = property9.roundCeilingCopy();
        org.joda.time.LocalTime localTime12 = property9.addCopy((-1));
        org.joda.time.LocalTime localTime14 = localTime12.minusMillis(70);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(localTime14);
    }

    @Test
    public void test6475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6475");
        java.nio.charset.Charset charset0 = java.nio.charset.Charset.defaultCharset();
        java.nio.charset.CharsetDecoder charsetDecoder1 = charset0.newDecoder();
        java.nio.charset.Charset charset2 = java.nio.charset.Charset.defaultCharset();
        boolean boolean3 = charset0.contains(charset2);
        java.nio.charset.CharsetEncoder charsetEncoder4 = charset0.newEncoder();
        byte[] byteArray5 = charsetEncoder4.replacement();
        java.nio.charset.Charset charset6 = java.nio.charset.Charset.defaultCharset();
        java.nio.charset.CharsetDecoder charsetDecoder7 = charset6.newDecoder();
        float float8 = charsetDecoder7.maxCharsPerByte();
        float float9 = charsetDecoder7.averageCharsPerByte();
        java.nio.charset.CodingErrorAction codingErrorAction10 = charsetDecoder7.unmappableCharacterAction();
        java.nio.charset.CharsetEncoder charsetEncoder11 = charsetEncoder4.onUnmappableCharacter(codingErrorAction10);
        java.nio.charset.Charset charset12 = java.nio.charset.Charset.defaultCharset();
        java.nio.charset.CharsetDecoder charsetDecoder13 = charset12.newDecoder();
        java.nio.charset.Charset charset14 = java.nio.charset.Charset.defaultCharset();
        boolean boolean15 = charset12.contains(charset14);
        java.nio.charset.CharsetEncoder charsetEncoder16 = charset12.newEncoder();
        char[] charArray17 = new char[] {};
        java.nio.CharBuffer charBuffer18 = java.nio.CharBuffer.wrap(charArray17);
        java.nio.ByteBuffer byteBuffer19 = charsetEncoder16.encode(charBuffer18);
        java.nio.CharBuffer charBuffer20 = charBuffer18.slice();
        java.nio.ByteBuffer byteBuffer21 = charsetEncoder11.encode(charBuffer20);
        java.util.stream.IntStream intStream22 = charBuffer20.chars();
        int int23 = charBuffer20.arrayOffset();
        java.util.stream.IntStream intStream24 = charBuffer20.chars();
        org.junit.Assert.assertNotNull(charset0);
        org.junit.Assert.assertNotNull(charsetDecoder1);
        org.junit.Assert.assertNotNull(charset2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(charsetEncoder4);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[63]");
        org.junit.Assert.assertNotNull(charset6);
        org.junit.Assert.assertNotNull(charsetDecoder7);
        org.junit.Assert.assertTrue("'" + float8 + "' != '" + 1.0f + "'", float8 == 1.0f);
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + 1.0f + "'", float9 == 1.0f);
        org.junit.Assert.assertNotNull(codingErrorAction10);
        org.junit.Assert.assertNotNull(charsetEncoder11);
        org.junit.Assert.assertNotNull(charset12);
        org.junit.Assert.assertNotNull(charsetDecoder13);
        org.junit.Assert.assertNotNull(charset14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(charsetEncoder16);
        org.junit.Assert.assertNotNull(charArray17);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray17), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray17), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray17), "[]");
        org.junit.Assert.assertNotNull(charBuffer18);
        org.junit.Assert.assertNotNull(byteBuffer19);
        org.junit.Assert.assertNotNull(charBuffer20);
        org.junit.Assert.assertNotNull(byteBuffer21);
        org.junit.Assert.assertNotNull(intStream22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(intStream24);
    }

    @Test
    public void test6476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6476");
        java.io.File file0 = null;
        java.io.File file2 = new java.io.File(file0, "1970-01-01T00:00:00.003Z");
        java.net.URL uRL3 = file2.toURL();
        boolean boolean4 = file2.canRead();
        java.nio.file.Path path5 = file2.toPath();
        java.nio.file.Path path6 = path5.toAbsolutePath();
        java.io.File file7 = null;
        java.io.File file9 = new java.io.File(file7, "1970-01-01T00:00:00.003Z");
        java.net.URL uRL10 = file9.toURL();
        boolean boolean11 = file9.canRead();
        java.nio.file.Path path12 = file9.toPath();
        java.nio.file.Path path13 = path12.toAbsolutePath();
        java.io.File file14 = path13.toFile();
        boolean boolean15 = path5.endsWith(path13);
        java.io.File file16 = null;
        java.io.File file18 = new java.io.File(file16, "1970-01-01T00:00:00.003Z");
        java.net.URL uRL19 = file18.toURL();
        boolean boolean20 = file18.canRead();
        java.nio.file.Path path21 = file18.toPath();
        java.nio.file.Path path22 = path21.toAbsolutePath();
        boolean boolean23 = path5.endsWith(path21);
        java.lang.String str24 = path5.toString();
        boolean boolean26 = path5.startsWith("ISOChronology[UTC]");
        java.io.File file27 = null;
        java.io.File file29 = new java.io.File(file27, "1970-01-01T00:00:00.003Z");
        java.net.URL uRL30 = file29.toURL();
        boolean boolean31 = file29.canRead();
        java.nio.file.Path path32 = file29.toPath();
        java.nio.file.Path path33 = path32.toAbsolutePath();
        java.io.File file34 = path33.toFile();
        java.io.File file35 = null;
        java.io.File file37 = new java.io.File(file35, "1970-01-01T00:00:00.003Z");
        java.net.URL uRL38 = file37.toURL();
        boolean boolean39 = file37.canRead();
        java.nio.file.Path path40 = file37.toPath();
        java.nio.file.Path path41 = path40.toAbsolutePath();
        java.io.File file42 = null;
        java.io.File file44 = new java.io.File(file42, "1970-01-01T00:00:00.003Z");
        java.net.URL uRL45 = file44.toURL();
        boolean boolean46 = file44.canRead();
        java.nio.file.Path path47 = file44.toPath();
        java.nio.file.Path path48 = path47.toAbsolutePath();
        java.io.File file49 = path48.toFile();
        boolean boolean50 = path40.endsWith(path48);
        java.io.File file51 = null;
        java.io.File file53 = new java.io.File(file51, "1970-01-01T00:00:00.003Z");
        java.net.URL uRL54 = file53.toURL();
        boolean boolean55 = file53.canRead();
        java.nio.file.Path path56 = file53.toPath();
        java.nio.file.Path path57 = path56.toAbsolutePath();
        boolean boolean58 = path40.endsWith(path56);
        int int59 = path33.compareTo(path56);
        java.io.File file60 = null;
        java.io.File file62 = new java.io.File(file60, "1970-01-01T00:00:00.003Z");
        boolean boolean63 = file62.exists();
        boolean boolean64 = file62.mkdirs();
        java.net.URI uRI65 = file62.toURI();
        java.lang.String str66 = file62.getName();
        boolean boolean67 = file62.delete();
        java.nio.file.Path path68 = file62.toPath();
        java.nio.file.Path path69 = path56.resolve(path68);
        boolean boolean70 = path5.startsWith(path56);
        org.junit.Assert.assertNull("file2.getParent() == null", file2.getParent());
        org.junit.Assert.assertEquals(file2.toString(), "1970-01-01T00:00:00.003Z");
        org.junit.Assert.assertNotNull(uRL3);
// flaky:         org.junit.Assert.assertEquals(uRL3.toString(), "file:/experiment/1970-01-01T00:00:00.003Z");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(path5);
        org.junit.Assert.assertNotNull(path6);
        org.junit.Assert.assertNull("file9.getParent() == null", file9.getParent());
        org.junit.Assert.assertEquals(file9.toString(), "1970-01-01T00:00:00.003Z");
        org.junit.Assert.assertNotNull(uRL10);
// flaky:         org.junit.Assert.assertEquals(uRL10.toString(), "file:/experiment/1970-01-01T00:00:00.003Z");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(path12);
        org.junit.Assert.assertNotNull(path13);
        org.junit.Assert.assertNotNull(file14);
// flaky:         org.junit.Assert.assertEquals(file14.getParent(), "/experiment");
// flaky:         org.junit.Assert.assertEquals(file14.toString(), "/experiment/1970-01-01T00:00:00.003Z");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull("file18.getParent() == null", file18.getParent());
        org.junit.Assert.assertEquals(file18.toString(), "1970-01-01T00:00:00.003Z");
        org.junit.Assert.assertNotNull(uRL19);
// flaky:         org.junit.Assert.assertEquals(uRL19.toString(), "file:/experiment/1970-01-01T00:00:00.003Z");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(path21);
        org.junit.Assert.assertNotNull(path22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "1970-01-01T00:00:00.003Z" + "'", str24, "1970-01-01T00:00:00.003Z");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull("file29.getParent() == null", file29.getParent());
        org.junit.Assert.assertEquals(file29.toString(), "1970-01-01T00:00:00.003Z");
        org.junit.Assert.assertNotNull(uRL30);
// flaky:         org.junit.Assert.assertEquals(uRL30.toString(), "file:/experiment/1970-01-01T00:00:00.003Z");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(path32);
        org.junit.Assert.assertNotNull(path33);
        org.junit.Assert.assertNotNull(file34);
// flaky:         org.junit.Assert.assertEquals(file34.getParent(), "/experiment");
// flaky:         org.junit.Assert.assertEquals(file34.toString(), "/experiment/1970-01-01T00:00:00.003Z");
        org.junit.Assert.assertNull("file37.getParent() == null", file37.getParent());
        org.junit.Assert.assertEquals(file37.toString(), "1970-01-01T00:00:00.003Z");
        org.junit.Assert.assertNotNull(uRL38);
// flaky:         org.junit.Assert.assertEquals(uRL38.toString(), "file:/experiment/1970-01-01T00:00:00.003Z");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(path40);
        org.junit.Assert.assertNotNull(path41);
        org.junit.Assert.assertNull("file44.getParent() == null", file44.getParent());
        org.junit.Assert.assertEquals(file44.toString(), "1970-01-01T00:00:00.003Z");
        org.junit.Assert.assertNotNull(uRL45);
// flaky:         org.junit.Assert.assertEquals(uRL45.toString(), "file:/experiment/1970-01-01T00:00:00.003Z");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(path47);
        org.junit.Assert.assertNotNull(path48);
        org.junit.Assert.assertNotNull(file49);
// flaky:         org.junit.Assert.assertEquals(file49.getParent(), "/experiment");
// flaky:         org.junit.Assert.assertEquals(file49.toString(), "/experiment/1970-01-01T00:00:00.003Z");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNull("file53.getParent() == null", file53.getParent());
        org.junit.Assert.assertEquals(file53.toString(), "1970-01-01T00:00:00.003Z");
        org.junit.Assert.assertNotNull(uRL54);
// flaky:         org.junit.Assert.assertEquals(uRL54.toString(), "file:/experiment/1970-01-01T00:00:00.003Z");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(path56);
        org.junit.Assert.assertNotNull(path57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-2) + "'", int59 == (-2));
        org.junit.Assert.assertNull("file62.getParent() == null", file62.getParent());
        org.junit.Assert.assertEquals(file62.toString(), "1970-01-01T00:00:00.003Z");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(uRI65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "1970-01-01T00:00:00.003Z" + "'", str66, "1970-01-01T00:00:00.003Z");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(path68);
        org.junit.Assert.assertNotNull(path69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
    }

    @Test
    public void test6477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6477");
        java.time.OffsetTime offsetTime0 = java.time.OffsetTime.MAX;
        java.time.LocalTime localTime1 = offsetTime0.toLocalTime();
        java.time.OffsetTime offsetTime2 = java.time.OffsetTime.MAX;
        java.time.LocalTime localTime3 = offsetTime2.toLocalTime();
        java.lang.String str4 = offsetTime2.toString();
        java.time.Duration duration5 = java.time.Duration.ZERO;
        java.lang.String str6 = duration5.toString();
        java.time.OffsetTime offsetTime7 = offsetTime2.plus((java.time.temporal.TemporalAmount) duration5);
        java.time.OffsetTime offsetTime9 = offsetTime2.plusNanos((long) 0);
        java.time.LocalTime localTime14 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime15 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime14);
        java.time.temporal.ChronoField chronoField16 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime18 = localTime14.with((java.time.temporal.TemporalField) chronoField16, (long) (short) 1);
        java.util.Locale locale19 = java.util.Locale.GERMANY;
        java.lang.String str20 = chronoField16.getDisplayName(locale19);
        java.time.OffsetTime offsetTime22 = offsetTime9.with((java.time.temporal.TemporalField) chronoField16, (long) 28);
        long long23 = localTime1.getLong((java.time.temporal.TemporalField) chronoField16);
        java.time.LocalTime localTime25 = localTime1.plusHours((long) 36);
        java.time.LocalDateTime localDateTime26 = java.time.LocalDateTime.now();
        java.time.LocalTime localTime27 = localDateTime26.toLocalTime();
        java.time.chrono.Chronology chronology28 = localDateTime26.getChronology();
        java.time.LocalDateTime localDateTime29 = java.time.LocalDateTime.now();
        java.time.LocalTime localTime30 = localDateTime29.toLocalTime();
        java.time.LocalDateTime localDateTime32 = localDateTime29.withDayOfMonth(10);
        java.time.format.DateTimeFormatter dateTimeFormatter33 = java.time.format.DateTimeFormatter.ISO_LOCAL_DATE_TIME;
        java.time.ZoneOffset zoneOffset36 = java.time.ZoneOffset.ofHoursMinutes(1, 10);
        java.time.LocalDate localDate37 = java.time.LocalDate.now((java.time.ZoneId) zoneOffset36);
        java.time.LocalDate localDate38 = java.time.LocalDate.now((java.time.ZoneId) zoneOffset36);
        java.time.format.DateTimeFormatter dateTimeFormatter39 = dateTimeFormatter33.withZone((java.time.ZoneId) zoneOffset36);
        long long40 = localDateTime32.toEpochSecond(zoneOffset36);
        java.time.chrono.ChronoLocalDate chronoLocalDate41 = chronology28.dateNow((java.time.ZoneId) zoneOffset36);
        java.time.OffsetTime offsetTime42 = localTime25.atOffset(zoneOffset36);
        int int43 = localTime25.getNano();
        java.time.Duration duration45 = java.time.Duration.ofMillis(34739555000000L);
        java.util.List<java.time.temporal.TemporalUnit> temporalUnitList46 = duration45.getUnits();
        java.time.temporal.Temporal temporal47 = localTime25.minus((java.time.temporal.TemporalAmount) duration45);
        org.junit.Assert.assertNotNull(offsetTime0);
        org.junit.Assert.assertNotNull(localTime1);
        org.junit.Assert.assertNotNull(offsetTime2);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "23:59:59.999999999-18:00" + "'", str4, "23:59:59.999999999-18:00");
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "PT0S" + "'", str6, "PT0S");
        org.junit.Assert.assertNotNull(offsetTime7);
        org.junit.Assert.assertNotNull(offsetTime9);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertTrue("'" + chronoField16 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField16.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "NanoOfDay" + "'", str20, "NanoOfDay");
        org.junit.Assert.assertNotNull(offsetTime22);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 86399999999999L + "'", long23 == 86399999999999L);
        org.junit.Assert.assertNotNull(localTime25);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localTime27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localTime30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(dateTimeFormatter33);
        org.junit.Assert.assertNotNull(zoneOffset36);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertNotNull(dateTimeFormatter39);
// flaky:         org.junit.Assert.assertTrue("'" + long40 + "' != '" + 1644481980L + "'", long40 == 1644481980L);
        org.junit.Assert.assertNotNull(chronoLocalDate41);
        org.junit.Assert.assertNotNull(offsetTime42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 999999999 + "'", int43 == 999999999);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(temporalUnitList46);
        org.junit.Assert.assertNotNull(temporal47);
    }

    @Test
    public void test6478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6478");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        int int1 = localDate0.getDayOfWeek();
        org.joda.time.LocalDate.Property property2 = localDate0.dayOfMonth();
        org.joda.time.LocalDate localDate3 = property2.withMaximumValue();
        org.joda.time.DateTime dateTime4 = localDate3.toDateTimeAtMidnight();
        org.joda.time.LocalDate localDate6 = localDate3.withMonthOfYear((int) (short) 10);
        org.joda.time.LocalDate localDate8 = localDate3.withDayOfYear(41);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate8);
    }

    @Test
    public void test6479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6479");
        java.text.ParsePosition parsePosition1 = new java.text.ParsePosition((-624));
        parsePosition1.setIndex(42);
    }

    @Test
    public void test6480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6480");
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.Duration duration3 = new org.joda.time.Duration(readableInstant1, readableInstant2);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.PeriodType periodType5 = null;
        org.joda.time.Period period6 = duration3.toPeriodTo(readableInstant4, periodType5);
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.Duration duration9 = new org.joda.time.Duration(readableInstant7, readableInstant8);
        long long10 = duration9.getMillis();
        boolean boolean11 = duration3.isShorterThan((org.joda.time.ReadableDuration) duration9);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) 3, chronology13);
        org.joda.time.DateTime.Property property15 = dateTime14.dayOfYear();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight((java.lang.Object) dateTime14, chronology16);
        org.joda.time.MutableDateTime mutableDateTime18 = dateTime14.toMutableDateTime();
        mutableDateTime18.addYears((int) (short) 100);
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime18.dayOfWeek();
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime18.year();
        org.joda.time.MutableDateTime.Property property23 = mutableDateTime18.weekyear();
        boolean boolean24 = duration3.equals((java.lang.Object) mutableDateTime18);
        mutableDateTime18.addMonths((int) ' ');
        mutableDateTime18.add((long) (byte) 10);
        org.joda.time.Period period29 = org.joda.time.Period.ZERO;
        org.joda.time.Period period30 = period29.normalizedStandard();
        org.joda.time.Period period32 = period29.plusHours(2);
        java.time.chrono.IsoEra isoEra33 = java.time.chrono.IsoEra.CE;
        boolean boolean34 = period32.equals((java.lang.Object) isoEra33);
        int int35 = period32.getMinutes();
        mutableDateTime18.add((org.joda.time.ReadablePeriod) period32);
        java.util.TimeZone timeZone38 = null;
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forTimeZone(timeZone38);
        org.joda.time.DateMidnight dateMidnight40 = new org.joda.time.DateMidnight((long) 1970, dateTimeZone39);
        long long43 = dateTimeZone39.convertLocalToUTC((long) 3, false);
        long long46 = dateTimeZone39.convertLocalToUTC(0L, true);
        mutableDateTime18.setZoneRetainFields(dateTimeZone39);
        java.lang.String str48 = dateTimeZone39.toString();
        org.joda.time.chrono.EthiopicChronology ethiopicChronology49 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone39);
        org.joda.time.DateTimeField dateTimeField50 = ethiopicChronology49.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone51 = ethiopicChronology49.getZone();
        org.joda.time.DateTimeField dateTimeField52 = ethiopicChronology49.era();
        org.joda.time.DateTimeField dateTimeField53 = ethiopicChronology49.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone54 = ethiopicChronology49.getZone();
        org.joda.time.DateTimeField dateTimeField55 = ethiopicChronology49.yearOfEra();
        org.joda.time.DateTimeField dateTimeField56 = ethiopicChronology49.halfdayOfDay();
        org.joda.time.YearMonthDay yearMonthDay57 = new org.joda.time.YearMonthDay((long) (-1299), (org.joda.time.Chronology) ethiopicChronology49);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(mutableDateTime18);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertTrue("'" + isoEra33 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra33.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 3L + "'", long43 == 3L);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "Etc/UTC" + "'", str48, "Etc/UTC");
        org.junit.Assert.assertNotNull(ethiopicChronology49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(dateTimeZone54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(dateTimeField56);
    }

    @Test
    public void test6481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6481");
        java.util.concurrent.TimeUnit timeUnit0 = java.util.concurrent.TimeUnit.HOURS;
        long long2 = timeUnit0.toSeconds(1314000057L);
        java.util.concurrent.TimeUnit timeUnit4 = java.util.concurrent.TimeUnit.NANOSECONDS;
        long long6 = timeUnit4.toMinutes((long) '4');
        long long8 = timeUnit4.toSeconds((long) 366);
        long long9 = timeUnit0.convert((long) 31, timeUnit4);
        long long11 = timeUnit4.toSeconds(1645434628L);
        org.junit.Assert.assertNotNull(timeUnit0);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 4730400205200L + "'", long2 == 4730400205200L);
        org.junit.Assert.assertNotNull(timeUnit4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1L + "'", long11 == 1L);
    }

    @Test
    public void test6482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6482");
        java.net.URI uRI1 = new java.net.URI("hi!");
        java.lang.String str2 = uRI1.getFragment();
        java.net.URI uRI4 = new java.net.URI("hi!");
        java.lang.String str5 = uRI4.getRawAuthority();
        java.lang.String str6 = uRI4.toString();
        java.lang.String str7 = uRI4.getRawFragment();
        java.net.URI uRI8 = uRI1.relativize(uRI4);
        int int9 = uRI4.getPort();
        java.net.URI uRI13 = new java.net.URI("x-windows-iso2022jp", "java.nio.charset.CharacterCodingException", "German");
        java.net.URI uRI14 = uRI4.resolve(uRI13);
        java.lang.String str15 = uRI13.getRawAuthority();
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(uRI8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(uRI14);
        org.junit.Assert.assertNull(str15);
    }

    @Test
    public void test6483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6483");
        java.util.stream.DoubleStream doubleStream1 = java.util.stream.DoubleStream.of((double) 2922789L);
        org.junit.Assert.assertNotNull(doubleStream1);
    }

    @Test
    public void test6484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6484");
        java.io.File file0 = null;
        java.io.File file2 = new java.io.File(file0, "1970-01-01T00:00:00.003Z");
        java.net.URL uRL3 = file2.toURL();
        boolean boolean4 = file2.canRead();
        java.nio.file.Path path5 = file2.toPath();
        java.nio.file.Path path6 = path5.toAbsolutePath();
        java.io.File file7 = null;
        java.io.File file9 = new java.io.File(file7, "1970-01-01T00:00:00.003Z");
        java.net.URL uRL10 = file9.toURL();
        boolean boolean11 = file9.canRead();
        java.nio.file.Path path12 = file9.toPath();
        java.nio.file.Path path13 = path12.toAbsolutePath();
        java.io.File file14 = path13.toFile();
        boolean boolean15 = path5.endsWith(path13);
        java.nio.file.LinkOption linkOption16 = null;
        java.nio.file.LinkOption[] linkOptionArray17 = new java.nio.file.LinkOption[] { linkOption16 };
        // The following exception was thrown during execution in test generation
        try {
            java.nio.file.Path path18 = path5.toRealPath(linkOptionArray17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull("file2.getParent() == null", file2.getParent());
        org.junit.Assert.assertEquals(file2.toString(), "1970-01-01T00:00:00.003Z");
        org.junit.Assert.assertNotNull(uRL3);
// flaky:         org.junit.Assert.assertEquals(uRL3.toString(), "file:/experiment/1970-01-01T00:00:00.003Z");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(path5);
        org.junit.Assert.assertNotNull(path6);
        org.junit.Assert.assertNull("file9.getParent() == null", file9.getParent());
        org.junit.Assert.assertEquals(file9.toString(), "1970-01-01T00:00:00.003Z");
        org.junit.Assert.assertNotNull(uRL10);
// flaky:         org.junit.Assert.assertEquals(uRL10.toString(), "file:/experiment/1970-01-01T00:00:00.003Z");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(path12);
        org.junit.Assert.assertNotNull(path13);
        org.junit.Assert.assertNotNull(file14);
// flaky:         org.junit.Assert.assertEquals(file14.getParent(), "/experiment");
// flaky:         org.junit.Assert.assertEquals(file14.toString(), "/experiment/1970-01-01T00:00:00.003Z");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(linkOptionArray17);
    }

    @Test
    public void test6485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6485");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 3, chronology1);
        org.joda.time.Period period3 = org.joda.time.Period.ZERO;
        org.joda.time.Period period4 = period3.normalizedStandard();
        org.joda.time.Period period6 = period4.minusMinutes((int) ' ');
        org.joda.time.Period period8 = period6.minusMonths((int) (byte) 0);
        org.joda.time.PeriodType periodType9 = period8.getPeriodType();
        org.joda.time.DateTime dateTime10 = dateTime2.minus((org.joda.time.ReadablePeriod) period8);
        org.joda.time.LocalDateTime localDateTime11 = dateTime2.toLocalDateTime();
        int[] intArray12 = localDateTime11.getValues();
        java.nio.IntBuffer intBuffer13 = java.nio.IntBuffer.wrap(intArray12);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[1970, 1, 1, 3]");
        org.junit.Assert.assertNotNull(intBuffer13);
    }

    @Test
    public void test6486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6486");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Locale.LanguageRange[] languageRangeArray3 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList4 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList4, languageRangeArray3);
        java.util.Locale locale6 = java.util.Locale.JAPAN;
        java.util.Locale[] localeArray7 = new java.util.Locale[] { locale6 };
        java.util.ArrayList<java.util.Locale> localeList8 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList8, localeArray7);
        java.util.List<java.util.Locale> localeList10 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList4, (java.util.Collection<java.util.Locale>) localeList8);
        localeList10.clear();
        java.util.List<java.util.Locale> localeList12 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.util.Locale>) localeList10);
        java.util.Locale.LanguageRange[] languageRangeArray13 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList14 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList14, languageRangeArray13);
        java.util.Locale.LanguageRange[] languageRangeArray16 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList17 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList17, languageRangeArray16);
        java.util.Locale locale19 = java.util.Locale.JAPAN;
        java.util.Locale[] localeArray20 = new java.util.Locale[] { locale19 };
        java.util.ArrayList<java.util.Locale> localeList21 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList21, localeArray20);
        java.util.List<java.util.Locale> localeList23 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList17, (java.util.Collection<java.util.Locale>) localeList21);
        localeList23.clear();
        java.util.List<java.util.Locale> localeList25 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList14, (java.util.Collection<java.util.Locale>) localeList23);
        java.util.List<java.util.Locale> localeList26 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.util.Locale>) localeList25);
        java.util.ListIterator<java.util.Locale> localeItor27 = localeList25.listIterator();
        java.util.Locale locale28 = java.util.Locale.ENGLISH;
        localeItor27.add(locale28);
        java.util.Locale locale31 = new java.util.Locale("Chinese");
        localeItor27.add(locale31);
        int int33 = localeItor27.nextIndex();
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(languageRangeArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(localeArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(localeList10);
        org.junit.Assert.assertNotNull(localeList12);
        org.junit.Assert.assertNotNull(languageRangeArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(languageRangeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(localeArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(localeList23);
        org.junit.Assert.assertNotNull(localeList25);
        org.junit.Assert.assertNotNull(localeList26);
        org.junit.Assert.assertNotNull(localeItor27);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "en");
        org.junit.Assert.assertEquals(locale31.toString(), "chinese");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2 + "'", int33 == 2);
    }

    @Test
    public void test6487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6487");
        org.joda.time.Weeks weeks0 = org.joda.time.Weeks.ONE;
        java.util.concurrent.TimeUnit timeUnit1 = java.util.concurrent.TimeUnit.NANOSECONDS;
        boolean boolean2 = weeks0.equals((java.lang.Object) timeUnit1);
        org.joda.time.MutablePeriod mutablePeriod3 = weeks0.toMutablePeriod();
        mutablePeriod3.add((int) '#', 0, 10, 0, (int) (byte) 0, (int) (short) 0, 1, (-1));
        mutablePeriod3.clear();
        org.joda.time.Period period14 = org.joda.time.Period.ZERO;
        org.joda.time.Period period15 = period14.normalizedStandard();
        org.joda.time.Period period17 = period14.plusHours(2);
        org.joda.time.DurationFieldType durationFieldType18 = org.joda.time.DurationFieldType.hours();
        int int19 = period14.indexOf(durationFieldType18);
        mutablePeriod3.set(durationFieldType18, (int) (byte) 10);
        mutablePeriod3.addMonths(3);
        mutablePeriod3.setSeconds(18);
        mutablePeriod3.addMonths(741000000);
        org.junit.Assert.assertNotNull(weeks0);
        org.junit.Assert.assertNotNull(timeUnit1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(mutablePeriod3);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(durationFieldType18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 4 + "'", int19 == 4);
    }

    @Test
    public void test6488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6488");
        java.nio.charset.Charset charset0 = java.nio.charset.Charset.defaultCharset();
        java.nio.charset.CharsetDecoder charsetDecoder1 = charset0.newDecoder();
        java.nio.charset.Charset charset2 = java.nio.charset.Charset.defaultCharset();
        boolean boolean3 = charset0.contains(charset2);
        java.nio.charset.CharsetEncoder charsetEncoder4 = charset0.newEncoder();
        char[] charArray5 = new char[] {};
        java.nio.CharBuffer charBuffer6 = java.nio.CharBuffer.wrap(charArray5);
        java.nio.ByteBuffer byteBuffer7 = charsetEncoder4.encode(charBuffer6);
        java.nio.CharBuffer charBuffer8 = charBuffer6.slice();
        java.nio.CharBuffer charBuffer9 = charBuffer6.compact();
        boolean boolean11 = charBuffer9.equals((java.lang.Object) "Feb 21, 2022 9:34:19 AM");
        java.nio.charset.Charset charset12 = java.nio.charset.Charset.defaultCharset();
        java.nio.charset.CharsetDecoder charsetDecoder13 = charset12.newDecoder();
        float float14 = charsetDecoder13.maxCharsPerByte();
        java.nio.charset.CodingErrorAction codingErrorAction15 = java.nio.charset.CodingErrorAction.IGNORE;
        java.nio.charset.CharsetDecoder charsetDecoder16 = charsetDecoder13.onMalformedInput(codingErrorAction15);
        float float17 = charsetDecoder13.maxCharsPerByte();
        java.nio.charset.Charset charset18 = charsetDecoder13.charset();
        java.nio.charset.Charset charset19 = java.nio.charset.Charset.defaultCharset();
        java.nio.charset.CharsetDecoder charsetDecoder20 = charset19.newDecoder();
        java.nio.charset.Charset charset21 = java.nio.charset.Charset.defaultCharset();
        boolean boolean22 = charset19.contains(charset21);
        java.nio.charset.CharsetEncoder charsetEncoder23 = charset19.newEncoder();
        byte[] byteArray24 = charsetEncoder23.replacement();
        java.nio.charset.Charset charset25 = java.nio.charset.Charset.defaultCharset();
        java.nio.charset.CharsetDecoder charsetDecoder26 = charset25.newDecoder();
        float float27 = charsetDecoder26.maxCharsPerByte();
        float float28 = charsetDecoder26.averageCharsPerByte();
        java.nio.charset.CodingErrorAction codingErrorAction29 = charsetDecoder26.unmappableCharacterAction();
        java.nio.charset.CharsetEncoder charsetEncoder30 = charsetEncoder23.onUnmappableCharacter(codingErrorAction29);
        java.nio.charset.Charset charset31 = java.nio.charset.Charset.defaultCharset();
        java.nio.charset.CharsetDecoder charsetDecoder32 = charset31.newDecoder();
        java.nio.charset.Charset charset33 = java.nio.charset.Charset.defaultCharset();
        boolean boolean34 = charset31.contains(charset33);
        java.nio.charset.CharsetEncoder charsetEncoder35 = charset31.newEncoder();
        char[] charArray36 = new char[] {};
        java.nio.CharBuffer charBuffer37 = java.nio.CharBuffer.wrap(charArray36);
        java.nio.ByteBuffer byteBuffer38 = charsetEncoder35.encode(charBuffer37);
        java.nio.CharBuffer charBuffer39 = charBuffer37.slice();
        java.nio.ByteBuffer byteBuffer40 = charsetEncoder30.encode(charBuffer39);
        java.nio.ByteBuffer byteBuffer41 = byteBuffer40.asReadOnlyBuffer();
        java.nio.CharBuffer charBuffer42 = charsetDecoder13.decode(byteBuffer40);
        java.util.stream.IntStream intStream43 = charBuffer42.chars();
        int int44 = charBuffer9.compareTo(charBuffer42);
        org.junit.Assert.assertNotNull(charset0);
        org.junit.Assert.assertNotNull(charsetDecoder1);
        org.junit.Assert.assertNotNull(charset2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(charsetEncoder4);
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[]");
        org.junit.Assert.assertNotNull(charBuffer6);
        org.junit.Assert.assertNotNull(byteBuffer7);
        org.junit.Assert.assertNotNull(charBuffer8);
        org.junit.Assert.assertNotNull(charBuffer9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(charset12);
        org.junit.Assert.assertNotNull(charsetDecoder13);
        org.junit.Assert.assertTrue("'" + float14 + "' != '" + 1.0f + "'", float14 == 1.0f);
        org.junit.Assert.assertNotNull(codingErrorAction15);
        org.junit.Assert.assertNotNull(charsetDecoder16);
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + 1.0f + "'", float17 == 1.0f);
        org.junit.Assert.assertNotNull(charset18);
        org.junit.Assert.assertNotNull(charset19);
        org.junit.Assert.assertNotNull(charsetDecoder20);
        org.junit.Assert.assertNotNull(charset21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(charsetEncoder23);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[63]");
        org.junit.Assert.assertNotNull(charset25);
        org.junit.Assert.assertNotNull(charsetDecoder26);
        org.junit.Assert.assertTrue("'" + float27 + "' != '" + 1.0f + "'", float27 == 1.0f);
        org.junit.Assert.assertTrue("'" + float28 + "' != '" + 1.0f + "'", float28 == 1.0f);
        org.junit.Assert.assertNotNull(codingErrorAction29);
        org.junit.Assert.assertNotNull(charsetEncoder30);
        org.junit.Assert.assertNotNull(charset31);
        org.junit.Assert.assertNotNull(charsetDecoder32);
        org.junit.Assert.assertNotNull(charset33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(charsetEncoder35);
        org.junit.Assert.assertNotNull(charArray36);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray36), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray36), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray36), "[]");
        org.junit.Assert.assertNotNull(charBuffer37);
        org.junit.Assert.assertNotNull(byteBuffer38);
        org.junit.Assert.assertNotNull(charBuffer39);
        org.junit.Assert.assertNotNull(byteBuffer40);
        org.junit.Assert.assertNotNull(byteBuffer41);
        org.junit.Assert.assertNotNull(charBuffer42);
        org.junit.Assert.assertNotNull(intStream43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
    }

    @Test
    public void test6489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6489");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withYearOfCentury((int) 'a');
        int int4 = localDateTime3.getDayOfMonth();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime3.withMinuteOfHour((int) ' ');
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.minusYears((int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Duration duration11 = new org.joda.time.Duration(readableInstant9, readableInstant10);
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.PeriodType periodType13 = null;
        org.joda.time.Period period14 = duration11.toPeriodTo(readableInstant12, periodType13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.Duration duration17 = new org.joda.time.Duration(readableInstant15, readableInstant16);
        long long18 = duration17.getMillis();
        boolean boolean19 = duration11.isShorterThan((org.joda.time.ReadableDuration) duration17);
        org.joda.time.Duration duration21 = duration11.withMillis((long) 2097);
        long long22 = duration21.getStandardDays();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime6.plus((org.joda.time.ReadableDuration) duration21);
        org.joda.time.LocalDateTime.Property property24 = localDateTime6.weekOfWeekyear();
        org.joda.time.LocalDateTime.Property property25 = localDateTime6.dayOfMonth();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 21 + "'", int4 == 21);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(property25);
    }

    @Test
    public void test6490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6490");
        short[] shortArray2 = new short[] { (short) 1, (byte) 10 };
        java.nio.ShortBuffer shortBuffer3 = java.nio.ShortBuffer.wrap(shortArray2);
        short[] shortArray6 = new short[] { (short) 1, (byte) 10 };
        java.nio.ShortBuffer shortBuffer7 = java.nio.ShortBuffer.wrap(shortArray6);
        java.nio.ShortBuffer shortBuffer8 = shortBuffer3.put(shortBuffer7);
        int int9 = shortBuffer8.limit();
        java.nio.ShortBuffer shortBuffer10 = shortBuffer8.asReadOnlyBuffer();
        short[] shortArray13 = new short[] { (short) 1, (byte) 10 };
        java.nio.ShortBuffer shortBuffer14 = java.nio.ShortBuffer.wrap(shortArray13);
        short[] shortArray17 = new short[] { (short) 1, (byte) 10 };
        java.nio.ShortBuffer shortBuffer18 = java.nio.ShortBuffer.wrap(shortArray17);
        java.nio.ShortBuffer shortBuffer19 = shortBuffer14.put(shortBuffer18);
        int int20 = shortBuffer19.limit();
        boolean boolean21 = shortBuffer19.isReadOnly();
        boolean boolean22 = shortBuffer19.hasArray();
        java.nio.ShortBuffer shortBuffer23 = shortBuffer19.compact();
        int int24 = shortBuffer8.compareTo(shortBuffer19);
        short[] shortArray25 = shortBuffer8.array();
        org.junit.Assert.assertNotNull(shortArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray2), "[1, 10]");
        org.junit.Assert.assertNotNull(shortBuffer3);
        org.junit.Assert.assertNotNull(shortArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray6), "[1, 10]");
        org.junit.Assert.assertNotNull(shortBuffer7);
        org.junit.Assert.assertNotNull(shortBuffer8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2 + "'", int9 == 2);
        org.junit.Assert.assertNotNull(shortBuffer10);
        org.junit.Assert.assertNotNull(shortArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray13), "[1, 10]");
        org.junit.Assert.assertNotNull(shortBuffer14);
        org.junit.Assert.assertNotNull(shortArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray17), "[1, 10]");
        org.junit.Assert.assertNotNull(shortBuffer18);
        org.junit.Assert.assertNotNull(shortBuffer19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2 + "'", int20 == 2);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(shortBuffer23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-2) + "'", int24 == (-2));
        org.junit.Assert.assertNotNull(shortArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray25), "[1, 10]");
    }

    @Test
    public void test6491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6491");
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintWriter printWriter1 = new java.io.PrintWriter("+00:00");
// flaky:             org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: +00:00 (Is a directory)");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
    }

    @Test
    public void test6492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6492");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withYearOfCentury((int) 'a');
        int int4 = localDateTime3.getDayOfMonth();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime3.withMinuteOfHour((int) ' ');
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.weekyear();
        int int8 = localDateTime3.get(dateTimeFieldType7);
        org.joda.time.LocalDateTime.Property property9 = localDateTime3.dayOfWeek();
        int int10 = localDateTime3.getHourOfDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime12 = localDateTime3.withEra(16384);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 16384 for era must be in the range [0,1]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 21 + "'", int4 == 21);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2097 + "'", int8 == 2097);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 9 + "'", int10 == 9);
    }

    @Test
    public void test6493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6493");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        org.joda.time.PeriodType periodType3 = org.joda.time.PeriodType.years();
        org.joda.time.format.PeriodFormatter periodFormatter4 = periodFormatter2.withParseType(periodType3);
        org.joda.time.PeriodType periodType5 = periodFormatter4.getParseType();
        boolean boolean6 = periodFormatter4.isPrinter();
        org.joda.time.Days days7 = org.joda.time.Days.TWO;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str8 = periodFormatter4.print((org.joda.time.ReadablePeriod) days7);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(periodFormatter4);
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(days7);
    }

    @Test
    public void test6494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6494");
        org.joda.time.MutablePeriod mutablePeriod0 = new org.joda.time.MutablePeriod();
        mutablePeriod0.setPeriod(12, 9, 2022, 34, (int) (short) 0, (int) (short) 1, 4096, 1);
        org.joda.time.MutablePeriod mutablePeriod10 = mutablePeriod0.copy();
        mutablePeriod10.addSeconds(241);
        mutablePeriod10.addMinutes(59);
        org.junit.Assert.assertNotNull(mutablePeriod10);
    }

    @Test
    public void test6495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6495");
        java.time.OffsetTime offsetTime0 = java.time.OffsetTime.MAX;
        java.time.LocalTime localTime1 = offsetTime0.toLocalTime();
        java.lang.String str2 = offsetTime0.toString();
        java.time.Duration duration3 = java.time.Duration.ZERO;
        java.lang.String str4 = duration3.toString();
        java.time.OffsetTime offsetTime5 = offsetTime0.plus((java.time.temporal.TemporalAmount) duration3);
        java.time.OffsetTime offsetTime7 = offsetTime0.plusNanos((long) 0);
        java.time.LocalTime localTime12 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime13 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime12);
        java.time.temporal.ChronoField chronoField14 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime16 = localTime12.with((java.time.temporal.TemporalField) chronoField14, (long) (short) 1);
        java.util.Locale locale17 = java.util.Locale.GERMANY;
        java.lang.String str18 = chronoField14.getDisplayName(locale17);
        java.time.OffsetTime offsetTime20 = offsetTime7.with((java.time.temporal.TemporalField) chronoField14, (long) 28);
        org.joda.time.Period period21 = org.joda.time.Period.ZERO;
        org.joda.time.Period period22 = period21.normalizedStandard();
        org.joda.time.Period period24 = period21.plusHours(2);
        java.time.chrono.IsoEra isoEra25 = java.time.chrono.IsoEra.CE;
        boolean boolean26 = period24.equals((java.lang.Object) isoEra25);
        java.time.LocalTime localTime31 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime32 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime31);
        java.time.LocalTime localTime37 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime38 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime37);
        java.time.temporal.ChronoField chronoField39 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime41 = localTime37.with((java.time.temporal.TemporalField) chronoField39, (long) (short) 1);
        long long42 = localTime31.getLong((java.time.temporal.TemporalField) chronoField39);
        boolean boolean43 = isoEra25.isSupported((java.time.temporal.TemporalField) chronoField39);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery44 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period45 = isoEra25.query(periodTemporalQuery44);
        boolean boolean46 = period45.isNegative();
        java.time.Period period48 = period45.plusDays((long) ' ');
        java.time.temporal.ChronoField chronoField49 = java.time.temporal.ChronoField.SECOND_OF_DAY;
        boolean boolean50 = period45.equals((java.lang.Object) chronoField49);
        java.time.chrono.ChronoPeriod chronoPeriod51 = period45.negated();
        java.time.OffsetTime offsetTime52 = offsetTime7.minus((java.time.temporal.TemporalAmount) period45);
        java.time.Period period54 = period45.plusYears((long) 2022);
        java.time.Period period56 = period54.minusDays((long) (short) 100);
        java.time.Period period57 = period54.normalized();
        // The following exception was thrown during execution in test generation
        try {
            java.time.Period period59 = period54.minusYears((-62040902399997L));
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: integer overflow");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(offsetTime0);
        org.junit.Assert.assertNotNull(localTime1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "23:59:59.999999999-18:00" + "'", str2, "23:59:59.999999999-18:00");
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "PT0S" + "'", str4, "PT0S");
        org.junit.Assert.assertNotNull(offsetTime5);
        org.junit.Assert.assertNotNull(offsetTime7);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertTrue("'" + chronoField14 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField14.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "NanoOfDay" + "'", str18, "NanoOfDay");
        org.junit.Assert.assertNotNull(offsetTime20);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertTrue("'" + isoEra25 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra25.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(localTime31);
        org.junit.Assert.assertNotNull(localTime32);
        org.junit.Assert.assertNotNull(localTime37);
        org.junit.Assert.assertNotNull(localTime38);
        org.junit.Assert.assertTrue("'" + chronoField39 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField39.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime41);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 3601000000001L + "'", long42 == 3601000000001L);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(periodTemporalQuery44);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(period48);
        org.junit.Assert.assertTrue("'" + chronoField49 + "' != '" + java.time.temporal.ChronoField.SECOND_OF_DAY + "'", chronoField49.equals(java.time.temporal.ChronoField.SECOND_OF_DAY));
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(chronoPeriod51);
        org.junit.Assert.assertNotNull(offsetTime52);
        org.junit.Assert.assertNotNull(period54);
        org.junit.Assert.assertNotNull(period56);
        org.junit.Assert.assertNotNull(period57);
    }

    @Test
    public void test6496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6496");
        org.joda.time.Weeks weeks0 = org.joda.time.Weeks.ONE;
        java.util.concurrent.TimeUnit timeUnit1 = java.util.concurrent.TimeUnit.NANOSECONDS;
        boolean boolean2 = weeks0.equals((java.lang.Object) timeUnit1);
        org.joda.time.Weeks weeks3 = weeks0.negated();
        org.joda.time.Weeks weeks5 = weeks3.plus((int) (short) 1);
        org.joda.time.Weeks weeks7 = weeks3.minus(10800000);
        org.joda.time.PeriodType periodType8 = weeks7.getPeriodType();
        org.junit.Assert.assertNotNull(weeks0);
        org.junit.Assert.assertNotNull(timeUnit1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(weeks3);
        org.junit.Assert.assertNotNull(weeks5);
        org.junit.Assert.assertNotNull(weeks7);
        org.junit.Assert.assertNotNull(periodType8);
    }

    @Test
    public void test6497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6497");
        java.time.Clock clock0 = java.time.Clock.systemUTC();
        java.time.Duration duration2 = java.time.Duration.ofSeconds((long) 256);
        java.time.Clock clock3 = java.time.Clock.tick(clock0, duration2);
        java.time.OffsetTime offsetTime4 = java.time.OffsetTime.now(clock3);
        org.joda.time.Period period5 = org.joda.time.Period.ZERO;
        org.joda.time.Period period6 = period5.normalizedStandard();
        org.joda.time.Period period8 = period5.plusHours(2);
        java.time.chrono.IsoEra isoEra9 = java.time.chrono.IsoEra.CE;
        boolean boolean10 = period8.equals((java.lang.Object) isoEra9);
        java.time.LocalTime localTime15 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime16 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime15);
        java.time.LocalTime localTime21 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime22 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime21);
        java.time.temporal.ChronoField chronoField23 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime25 = localTime21.with((java.time.temporal.TemporalField) chronoField23, (long) (short) 1);
        long long26 = localTime15.getLong((java.time.temporal.TemporalField) chronoField23);
        boolean boolean27 = isoEra9.isSupported((java.time.temporal.TemporalField) chronoField23);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery28 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period29 = isoEra9.query(periodTemporalQuery28);
        boolean boolean30 = period29.isNegative();
        java.time.Period period32 = period29.plusDays((long) ' ');
        java.time.temporal.ChronoField chronoField33 = java.time.temporal.ChronoField.SECOND_OF_DAY;
        boolean boolean34 = period29.equals((java.lang.Object) chronoField33);
        java.time.chrono.ChronoPeriod chronoPeriod35 = period29.negated();
        java.time.OffsetDateTime offsetDateTime36 = java.time.OffsetDateTime.now();
        java.time.temporal.ChronoField chronoField37 = java.time.temporal.ChronoField.HOUR_OF_DAY;
        boolean boolean38 = offsetDateTime36.isSupported((java.time.temporal.TemporalField) chronoField37);
        java.time.Month month39 = offsetDateTime36.getMonth();
        java.time.temporal.Temporal temporal40 = period29.addTo((java.time.temporal.Temporal) offsetDateTime36);
        java.time.OffsetDateTime offsetDateTime42 = offsetDateTime36.minusMinutes((long) '4');
        java.time.OffsetDateTime offsetDateTime44 = offsetDateTime42.plusDays(10L);
        java.time.OffsetDateTime offsetDateTime45 = java.time.OffsetDateTime.now();
        java.time.LocalDate localDate46 = offsetDateTime45.toLocalDate();
        org.joda.time.Period period47 = org.joda.time.Period.ZERO;
        org.joda.time.Period period48 = period47.normalizedStandard();
        org.joda.time.Period period50 = period47.plusHours(2);
        java.time.chrono.IsoEra isoEra51 = java.time.chrono.IsoEra.CE;
        boolean boolean52 = period50.equals((java.lang.Object) isoEra51);
        java.time.LocalTime localTime57 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime58 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime57);
        java.time.LocalTime localTime63 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime64 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime63);
        java.time.temporal.ChronoField chronoField65 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime67 = localTime63.with((java.time.temporal.TemporalField) chronoField65, (long) (short) 1);
        long long68 = localTime57.getLong((java.time.temporal.TemporalField) chronoField65);
        boolean boolean69 = isoEra51.isSupported((java.time.temporal.TemporalField) chronoField65);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery70 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period71 = isoEra51.query(periodTemporalQuery70);
        boolean boolean72 = period71.isNegative();
        java.time.Period period74 = period71.plusDays((long) ' ');
        java.time.temporal.ChronoField chronoField75 = java.time.temporal.ChronoField.SECOND_OF_DAY;
        boolean boolean76 = period71.equals((java.lang.Object) chronoField75);
        java.time.chrono.ChronoPeriod chronoPeriod77 = period71.negated();
        java.time.OffsetDateTime offsetDateTime78 = java.time.OffsetDateTime.now();
        java.time.temporal.ChronoField chronoField79 = java.time.temporal.ChronoField.HOUR_OF_DAY;
        boolean boolean80 = offsetDateTime78.isSupported((java.time.temporal.TemporalField) chronoField79);
        java.time.Month month81 = offsetDateTime78.getMonth();
        java.time.temporal.Temporal temporal82 = period71.addTo((java.time.temporal.Temporal) offsetDateTime78);
        java.time.chrono.ChronoLocalDate chronoLocalDate83 = localDate46.minus((java.time.temporal.TemporalAmount) period71);
        java.time.OffsetDateTime offsetDateTime84 = offsetDateTime44.plus((java.time.temporal.TemporalAmount) period71);
        java.time.OffsetDateTime offsetDateTime86 = offsetDateTime84.minusYears((long) 2097);
        java.time.temporal.Temporal temporal87 = offsetTime4.adjustInto((java.time.temporal.Temporal) offsetDateTime84);
        java.time.OffsetTime offsetTime89 = offsetTime4.minusSeconds(3L);
        org.junit.Assert.assertNotNull(clock0);
        org.junit.Assert.assertNotNull(duration2);
        org.junit.Assert.assertNotNull(clock3);
        org.junit.Assert.assertNotNull(offsetTime4);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertTrue("'" + isoEra9 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra9.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertTrue("'" + chronoField23 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField23.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime25);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 3601000000001L + "'", long26 == 3601000000001L);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(periodTemporalQuery28);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertTrue("'" + chronoField33 + "' != '" + java.time.temporal.ChronoField.SECOND_OF_DAY + "'", chronoField33.equals(java.time.temporal.ChronoField.SECOND_OF_DAY));
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(chronoPeriod35);
        org.junit.Assert.assertNotNull(offsetDateTime36);
        org.junit.Assert.assertTrue("'" + chronoField37 + "' != '" + java.time.temporal.ChronoField.HOUR_OF_DAY + "'", chronoField37.equals(java.time.temporal.ChronoField.HOUR_OF_DAY));
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + month39 + "' != '" + java.time.Month.FEBRUARY + "'", month39.equals(java.time.Month.FEBRUARY));
        org.junit.Assert.assertNotNull(temporal40);
        org.junit.Assert.assertNotNull(offsetDateTime42);
        org.junit.Assert.assertNotNull(offsetDateTime44);
        org.junit.Assert.assertNotNull(offsetDateTime45);
        org.junit.Assert.assertNotNull(localDate46);
        org.junit.Assert.assertNotNull(period47);
        org.junit.Assert.assertNotNull(period48);
        org.junit.Assert.assertNotNull(period50);
        org.junit.Assert.assertTrue("'" + isoEra51 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra51.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(localTime57);
        org.junit.Assert.assertNotNull(localTime58);
        org.junit.Assert.assertNotNull(localTime63);
        org.junit.Assert.assertNotNull(localTime64);
        org.junit.Assert.assertTrue("'" + chronoField65 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField65.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime67);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 3601000000001L + "'", long68 == 3601000000001L);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(periodTemporalQuery70);
        org.junit.Assert.assertNotNull(period71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(period74);
        org.junit.Assert.assertTrue("'" + chronoField75 + "' != '" + java.time.temporal.ChronoField.SECOND_OF_DAY + "'", chronoField75.equals(java.time.temporal.ChronoField.SECOND_OF_DAY));
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(chronoPeriod77);
        org.junit.Assert.assertNotNull(offsetDateTime78);
        org.junit.Assert.assertTrue("'" + chronoField79 + "' != '" + java.time.temporal.ChronoField.HOUR_OF_DAY + "'", chronoField79.equals(java.time.temporal.ChronoField.HOUR_OF_DAY));
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + month81 + "' != '" + java.time.Month.FEBRUARY + "'", month81.equals(java.time.Month.FEBRUARY));
        org.junit.Assert.assertNotNull(temporal82);
        org.junit.Assert.assertNotNull(chronoLocalDate83);
        org.junit.Assert.assertNotNull(offsetDateTime84);
        org.junit.Assert.assertNotNull(offsetDateTime86);
        org.junit.Assert.assertNotNull(temporal87);
        org.junit.Assert.assertNotNull(offsetTime89);
    }

    @Test
    public void test6498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6498");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.lang.Object obj2 = properties1.clone();
        java.time.OffsetTime offsetTime3 = java.time.OffsetTime.MAX;
        java.time.LocalTime localTime4 = offsetTime3.toLocalTime();
        java.time.Duration duration6 = java.time.Duration.ofMinutes((long) 3);
        java.time.temporal.Temporal temporal7 = localTime4.plus((java.time.temporal.TemporalAmount) duration6);
        java.time.Duration duration9 = duration6.plusNanos((long) 9);
        boolean boolean10 = properties1.containsValue((java.lang.Object) duration9);
        java.lang.String str12 = properties1.getProperty("German");
        java.lang.String str14 = properties1.getProperty("ISO");
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet15 = properties1.entrySet();
        org.junit.Assert.assertNotNull(obj2);
        org.junit.Assert.assertEquals(obj2.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj2), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj2), "{}");
        org.junit.Assert.assertNotNull(offsetTime3);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(temporal7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(objEntrySet15);
    }

    @Test
    public void test6499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6499");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 3, chronology1);
        org.joda.time.Period period3 = org.joda.time.Period.ZERO;
        org.joda.time.Period period4 = period3.normalizedStandard();
        org.joda.time.Period period6 = period4.minusMinutes((int) ' ');
        org.joda.time.Period period8 = period6.minusMonths((int) (byte) 0);
        org.joda.time.PeriodType periodType9 = period8.getPeriodType();
        org.joda.time.DateTime dateTime10 = dateTime2.minus((org.joda.time.ReadablePeriod) period8);
        org.joda.time.DateTime dateTime12 = dateTime2.plusHours(34);
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.Duration duration15 = new org.joda.time.Duration(readableInstant13, readableInstant14);
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.Duration duration18 = new org.joda.time.Duration(readableInstant16, readableInstant17);
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.PeriodType periodType20 = null;
        org.joda.time.Period period21 = duration18.toPeriodTo(readableInstant19, periodType20);
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.Duration duration24 = new org.joda.time.Duration(readableInstant22, readableInstant23);
        long long25 = duration24.getMillis();
        boolean boolean26 = duration18.isShorterThan((org.joda.time.ReadableDuration) duration24);
        boolean boolean27 = duration15.isLongerThan((org.joda.time.ReadableDuration) duration24);
        org.joda.time.DateTime dateTime29 = dateTime12.withDurationAdded((org.joda.time.ReadableDuration) duration15, 256);
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.Duration duration32 = new org.joda.time.Duration(readableInstant30, readableInstant31);
        org.joda.time.DateTime dateTime34 = dateTime29.withDurationAdded((org.joda.time.ReadableDuration) duration32, 353);
        int int35 = dateTime29.getMinuteOfHour();
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
    }

    @Test
    public void test6500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test6500");
        org.joda.time.Period period0 = org.joda.time.Period.ZERO;
        org.joda.time.Period period1 = period0.normalizedStandard();
        org.joda.time.Period period3 = period1.minusMinutes((int) ' ');
        org.joda.time.Period period5 = period3.withMinutes(32769);
        int int6 = period3.getMonths();
        org.joda.time.Weeks weeks7 = org.joda.time.Weeks.ONE;
        java.util.concurrent.TimeUnit timeUnit8 = java.util.concurrent.TimeUnit.NANOSECONDS;
        boolean boolean9 = weeks7.equals((java.lang.Object) timeUnit8);
        org.joda.time.MutablePeriod mutablePeriod10 = weeks7.toMutablePeriod();
        org.joda.time.Period period11 = period3.plus((org.joda.time.ReadablePeriod) weeks7);
        org.joda.time.Period period12 = org.joda.time.Period.ZERO;
        org.joda.time.Period period13 = period12.normalizedStandard();
        org.joda.time.Period period15 = period12.plusHours(2);
        org.joda.time.DurationFieldType durationFieldType16 = org.joda.time.DurationFieldType.hours();
        int int17 = period12.indexOf(durationFieldType16);
        org.joda.time.Weeks weeks18 = period12.toStandardWeeks();
        org.joda.time.Weeks weeks19 = weeks18.negated();
        org.joda.time.Weeks weeks20 = weeks7.minus(weeks19);
        org.junit.Assert.assertNotNull(period0);
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(weeks7);
        org.junit.Assert.assertNotNull(timeUnit8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(mutablePeriod10);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(durationFieldType16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 4 + "'", int17 == 4);
        org.junit.Assert.assertNotNull(weeks18);
        org.junit.Assert.assertNotNull(weeks19);
        org.junit.Assert.assertNotNull(weeks20);
    }
}
